{"nodes":[{"pos":[2133,2163],"content":"Represents the Hijri calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the Hijri calendar.","pos":[0,30]}]},{"pos":[5870,5966],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.HijriCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Globalization.HijriCalendar\"></xref> class."},{"pos":[6571,6690],"content":"Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is the specified number of months away from the specified &lt;xref:System.DateTime&gt;.","pos":[0,119],"source":"Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>."}]},{"pos":[6703,8478],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, if the specified month is Zulkadah, which has 30 days, the specified day is the 30th day of that month, and the value of the `months` parameter is 3, the resulting year is one more than the specified year, the resulting month is Safar, and the resulting day is the 29th day, which is the last day in Safar.       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.h_21_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.h_21_1.cs)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"It is changed to the last valid day in the resulting month of the resulting year.","pos":[151,232]},{"content":"The year part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting month is outside the year of the specified &lt;xref:System.DateTime&gt;.","pos":[233,382],"source":" The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[383,433]},{"content":"Therefore, &lt;xref:System.ArgumentException&gt; is thrown if the resulting year is outside the era of the specified &lt;xref:System.DateTime&gt;.","pos":[434,568],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[569,687],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"For example, if the specified month is Zulkadah, which has 30 days, the specified day is the 30th day of that month, and the value of the <ph id=\"ph1\">`months`</ph> parameter is 3, the resulting year is one more than the specified year, the resulting month is Safar, and the resulting day is the 29th day, which is the last day in Safar.","pos":[694,1013],"source":"       For example, if the specified month is Zulkadah, which has 30 days, the specified day is the 30th day of that month, and the value of the `months` parameter is 3, the resulting year is one more than the specified year, the resulting month is Safar, and the resulting day is the 29th day, which is the last day in Safar."},{"content":"If the value of the <ph id=\"ph1\">`months`</ph> parameter is negative, the resulting &lt;xref:System.DateTime&gt; is earlier than the specified &lt;xref:System.DateTime&gt;.","pos":[1020,1162],"source":"       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"content":"The&lt;xref:System.DateTime.Kind%2A&gt; property of the returned &lt;xref:System.DateTime&gt; value always equals &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[1169,1323],"source":"       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> parameter by calling the &lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt; method, as the following example shows.","pos":[1324,1526],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-system.globalization.h_21_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p4\">](~/add/codesnippet/csharp/m-system.globalization.h_21_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[1533,1766],"source":"[!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.h_21_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.h_21_1.cs)]"}]},{"pos":[9152,9196],"content":"The <xref:System.DateTime> to add months to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to add months to.","pos":[0,44],"source":"The <xref:System.DateTime> to add months to."}]},{"pos":[9258,9286],"content":"The number of months to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of months to add.","pos":[0,28]}]},{"pos":[9346,9469],"content":"The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that results from adding the specified number of months to the specified &lt;xref:System.DateTime&gt;.","pos":[0,123],"source":"The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>."}]},{"pos":[9636,9673],"content":"The resulting <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting &lt;xref:System.DateTime&gt;.","pos":[0,37],"source":"The resulting <xref:System.DateTime>."}]},{"pos":[9789,9895],"content":"<code>months</code> is less than -120000.       -or-       <code>months</code> is greater than 120000.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is less than -120000.","pos":[0,41],"source":"<code>months</code> is less than -120000."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is greater than 120000.","pos":[48,102],"source":"       -or-       <code>months</code> is greater than 120000."}]},{"pos":[10358,10476],"content":"Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is the specified number of years away from the specified &lt;xref:System.DateTime&gt;.","pos":[0,118],"source":"Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>."}]},{"pos":[10489,12132],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, Zulhijjah has 29 days, except during leap years when it has 30 days. If the specified date is the 30th day of Zulhijjah in a leap year and the value of `years` is 1, the resulting date will be the 29th day of Zulhijjah in the following year.       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.h_4_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.h_4_1.cs)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"It is changed to the last valid day in the resulting month of the resulting year.","pos":[151,232]},{"content":"The month part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[233,345],"source":" The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[346,396]},{"content":"Therefore, &lt;xref:System.ArgumentException&gt; is thrown if the resulting year is outside the era of the specified &lt;xref:System.DateTime&gt;.","pos":[397,531],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[532,650],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"For example, Zulhijjah has 29 days, except during leap years when it has 30 days.","pos":[657,738]},{"content":"If the specified date is the 30th day of Zulhijjah in a leap year and the value of <ph id=\"ph1\">`years`</ph> is 1, the resulting date will be the 29th day of Zulhijjah in the following year.","pos":[739,911],"source":" If the specified date is the 30th day of Zulhijjah in a leap year and the value of `years` is 1, the resulting date will be the 29th day of Zulhijjah in the following year."},{"content":"If <ph id=\"ph1\">`years`</ph> is negative, the resulting &lt;xref:System.DateTime&gt; is earlier than the specified &lt;xref:System.DateTime&gt;.","pos":[918,1032],"source":"       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"content":"The&lt;xref:System.DateTime.Kind%2A&gt; property of the returned &lt;xref:System.DateTime&gt; value always equals &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[1039,1193],"source":"       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> parameter by calling the &lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt; method, as the following example shows.","pos":[1194,1396],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-system.globalization.h_4_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p4\">](~/add/codesnippet/csharp/m-system.globalization.h_4_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[1403,1634],"source":"[!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.h_4_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.h_4_1.cs)]"}]},{"pos":[12801,12844],"content":"The <xref:System.DateTime> to add years to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to add years to.","pos":[0,43],"source":"The <xref:System.DateTime> to add years to."}]},{"pos":[12905,12932],"content":"The number of years to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of years to add.","pos":[0,27]}]},{"pos":[12992,13114],"content":"The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that results from adding the specified number of years to the specified &lt;xref:System.DateTime&gt;.","pos":[0,122],"source":"The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>."}]},{"pos":[13280,13348],"content":"The resulting <xref:System.DateTime> is outside the supported range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting &lt;xref:System.DateTime&gt; is outside the supported range.","pos":[0,68],"source":"The resulting <xref:System.DateTime> is outside the supported range."}]},{"pos":[13729,13840],"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","pos":[0,111]}]},{"pos":[14532,14611],"content":"Always returns <bpt id=\"p1\">&lt;xref href=\"System.Globalization.CalendarAlgorithmType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always returns <xref href=\"System.Globalization.CalendarAlgorithmType\"></xref>."},{"pos":[15166,15323],"content":"Gets the number of days in the year that precedes the year that is specified by the <xref:System.Globalization.HijriCalendar.MinSupportedDateTime*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of days in the year that precedes the year that is specified by the &lt;xref:System.Globalization.HijriCalendar.MinSupportedDateTime*&gt; property.","pos":[0,157],"source":"Gets the number of days in the year that precedes the year that is specified by the <xref:System.Globalization.HijriCalendar.MinSupportedDateTime*> property."}]},{"pos":[15335,15381],"content":"This property returns a constant value of 354.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property returns a constant value of 354.","pos":[0,46]}]},{"pos":[15526,15657],"content":"The number of days in the year that precedes the year specified by <xref:System.Globalization.HijriCalendar.MinSupportedDateTime*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the year that precedes the year specified by &lt;xref:System.Globalization.HijriCalendar.MinSupportedDateTime*&gt;.","pos":[0,131],"source":"The number of days in the year that precedes the year specified by <xref:System.Globalization.HijriCalendar.MinSupportedDateTime*>."}]},{"pos":[16091,16176],"content":"Gets the list of eras in the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.HijriCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the list of eras in the <xref href=\"System.Globalization.HijriCalendar\"></xref>."},{"pos":[16189,16419],"content":"The Hijri calendar recognizes one era: A.H. (Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca). This property always returns an array with only one element.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Hijri calendar recognizes one era: A.H. (Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca). This property always returns an array with only one element.","pos":[0,230],"nodes":[{"content":"The Hijri calendar recognizes one era: A.H.","pos":[0,43]},{"content":"(Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca).","pos":[44,169]},{"content":"This property always returns an array with only one element.","pos":[170,230]}]}]},{"pos":[16538,16647],"content":"An array of integers that represents the eras in the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.HijriCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of integers that represents the eras in the <xref href=\"System.Globalization.HijriCalendar\"></xref>."},{"pos":[17160,17229],"content":"Returns the day of the month in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the month in the specified &lt;xref:System.DateTime&gt;.","pos":[0,69],"source":"Returns the day of the month in the specified <xref:System.DateTime>."}]},{"pos":[17903,17938],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[17995,18096],"content":"An integer from 1 to 30 that represents the day of the month in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 30 that represents the day of the month in the specified &lt;xref:System.DateTime&gt;.","pos":[0,101],"source":"An integer from 1 to 30 that represents the day of the month in the specified <xref:System.DateTime>."}]},{"pos":[18613,18681],"content":"Returns the day of the week in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the week in the specified &lt;xref:System.DateTime&gt;.","pos":[0,68],"source":"Returns the day of the week in the specified <xref:System.DateTime>."}]},{"pos":[18694,19068],"content":"The <xref:System.DayOfWeek> values are as follows:      |DayOfWeek value|which indicates|   |---------------------|---------------------|   |Sunday|الاحد (Al-Ahad)|   |Monday|الاثنين (Al-Ithnayn)|   |Tuesday|الثلاثاء (At-Thulaathaa')|   |Wednesday|الاربعاء (Al-Arbi'aa')|   |Thursday|الخميس (Al-Khamiis)|   |Friday|الجمعة (Al-Jumu'ah)|   |Saturday|السبت (As-Sabt)|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.DayOfWeek&gt; values are as follows:      |DayOfWeek value|which indicates|   |---------------------|---------------------|   |Sunday|الاحد (Al-Ahad)|   |Monday|الاثنين (Al-Ithnayn)|   |Tuesday|الثلاثاء (At-Thulaathaa')|   |Wednesday|الاربعاء (Al-Arbi'aa')|   |Thursday|الخميس (Al-Khamiis)|   |Friday|الجمعة (Al-Jumu'ah)|   |Saturday|السبت (As-Sabt)|","pos":[0,364],"source":"The <xref:System.DayOfWeek> values are as follows:      |DayOfWeek value|which indicates|   |---------------------|---------------------|   |Sunday|الاحد (Al-Ahad)|   |Monday|الاثنين (Al-Ithnayn)|   |Tuesday|الثلاثاء (At-Thulaathaa')|   |Wednesday|الاربعاء (Al-Arbi'aa')|   |Thursday|الخميس (Al-Khamiis)|   |Friday|الجمعة (Al-Jumu'ah)|   |Saturday|السبت (As-Sabt)|"}]},{"pos":[19734,19769],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[19830,19938],"content":"A <xref:System.DayOfWeek> value that represents the day of the week in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DayOfWeek&gt; value that represents the day of the week in the specified &lt;xref:System.DateTime&gt;.","pos":[0,108],"source":"A <xref:System.DayOfWeek> value that represents the day of the week in the specified <xref:System.DateTime>."}]},{"pos":[20454,20522],"content":"Returns the day of the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,68],"source":"Returns the day of the year in the specified <xref:System.DateTime>."}]},{"pos":[20534,20887],"content":"The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.HijriCalendar.GetDaysInYear%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.HijriCalendar.GetDaysInYear%2A>.","pos":[0,353],"nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year.","pos":[0,84]},{"content":"For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by &lt;xref:System.Globalization.HijriCalendar.GetDaysInYear%2A&gt;.","pos":[85,353],"source":" For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.HijriCalendar.GetDaysInYear%2A>."}]}]},{"pos":[21546,21581],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[21638,21739],"content":"An integer from 1 to 355 that represents the day of the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 355 that represents the day of the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,101],"source":"An integer from 1 to 355 that represents the day of the year in the specified <xref:System.DateTime>."}]},{"pos":[22338,22418],"content":"Returns the number of days in the specified month of the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of days in the specified month of the specified year and era.","pos":[0,80]}]},{"pos":[22430,22545],"content":"For example, this method returns 29 or 30 for Zulhijjah (<ph id=\"ph1\">`month`</ph> = 12), depending on whether <ph id=\"ph2\">`year`</ph> is a leap year.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For example, this method returns 29 or 30 for Zulhijjah (`month` = 12), depending on whether `year` is a leap year."},{"pos":[23211,23247],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[23308,23358],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[23417,23452],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[23509,23594],"content":"The number of days in the specified month in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the specified month in the specified year in the specified era.","pos":[0,85]}]},{"pos":[23787,24029],"content":"<code>era</code> is outside the range supported by this calendar.       -or-       <code>year</code> is outside the range supported by this calendar.       -or-       <code>month</code> is outside the range supported by this calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[0,65],"source":"<code>era</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[72,149],"source":"       -or-       <code>year</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[156,234],"source":"       -or-       <code>month</code> is outside the range supported by this calendar."}]},{"pos":[24502,24559],"content":"Returns the number of days in the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of days in the specified year and era.","pos":[0,57]}]},{"pos":[25200,25236],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[25295,25330],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[25387,25502],"content":"The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.","pos":[0,115],"nodes":[{"content":"The number of days in the specified year and era.","pos":[0,49]},{"content":"The number of days is 354 in a common year or 355 in a leap year.","pos":[50,115]}]}]},{"pos":[25693,25779],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code> or <code>era</code> is outside the range supported by this calendar."},{"pos":[26187,26243],"content":"Returns the era in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the era in the specified &lt;xref:System.DateTime&gt;.","pos":[0,56],"source":"Returns the era in the specified <xref:System.DateTime>."}]},{"pos":[26256,26425],"content":"The Hijri calendar recognizes one era: A.H. (Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Hijri calendar recognizes one era: A.H. (Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca).","pos":[0,169],"nodes":[{"content":"The Hijri calendar recognizes one era: A.H.","pos":[0,43]},{"content":"(Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca).","pos":[44,169]}]}]},{"pos":[27079,27114],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[27171,27246],"content":"An integer that represents the era in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era in the specified &lt;xref:System.DateTime&gt;.","pos":[0,75],"source":"An integer that represents the era in the specified <xref:System.DateTime>."}]},{"pos":[27785,27840],"content":"Calculates the leap month for a specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the leap month for a specified year and era.","pos":[0,55]}]},{"pos":[27852,28419],"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[0,567],"nodes":[{"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year.","pos":[0,142]},{"content":"For example, the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt; method returns a number between 1 and 13 that indicates the month associated with a specified date.","pos":[143,326],"source":" For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date."},{"content":"If there is a leap month between the eighth and ninth months of the year, the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt; method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[327,567],"source":" If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month."}]}]},{"pos":[28572,28579],"content":"A year.","needQuote":true,"needEscape":true,"nodes":[{"content":"A year.","pos":[0,7]}]},{"pos":[28638,28770],"content":"An era. Specify <xref:System.Globalization.Calendar.CurrentEra> or <xref href=\"System.Globalization.HijriCalendar.HijriEra\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An era.","pos":[0,7]},{"content":"Specify &lt;xref:System.Globalization.Calendar.CurrentEra&gt; or <bpt id=\"p1\">&lt;xref href=\"System.Globalization.HijriCalendar.HijriEra\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[8,132],"source":" Specify <xref:System.Globalization.Calendar.CurrentEra> or <xref href=\"System.Globalization.HijriCalendar.HijriEra\"></xref>."}]},{"pos":[28827,28953],"content":"Always 0 because the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.HijriCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type does not support the notion of a leap month.","needQuote":true,"needEscape":true,"source":"Always 0 because the <xref href=\"System.Globalization.HijriCalendar\"></xref> type does not support the notion of a leap month."},{"pos":[29144,29395],"content":"<code>year</code> is less than the Hijri calendar year 1 or greater than the year 9666.       -or-       <code>era</code> is not <xref:System.Globalization.Calendar.CurrentEra> or <xref href=\"System.Globalization.HijriCalendar.HijriEra\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is less than the Hijri calendar year 1 or greater than the year 9666.","pos":[0,87],"source":"<code>year</code> is less than the Hijri calendar year 1 or greater than the year 9666."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref:System.Globalization.Calendar.CurrentEra&gt;</ph> or <bpt id=\"p1\">&lt;xref href=\"System.Globalization.HijriCalendar.HijriEra\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[94,245],"source":"       -or-       <code>era</code> is not <xref:System.Globalization.Calendar.CurrentEra> or <xref href=\"System.Globalization.HijriCalendar.HijriEra\"></xref>."}]},{"pos":[29814,29872],"content":"Returns the month in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the month in the specified &lt;xref:System.DateTime&gt;.","pos":[0,58],"source":"Returns the month in the specified <xref:System.DateTime>."}]},{"pos":[30541,30576],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[30633,30723],"content":"An integer from 1 to 12 that represents the month in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month in the specified &lt;xref:System.DateTime&gt;.","pos":[0,90],"source":"An integer from 1 to 12 that represents the month in the specified <xref:System.DateTime>."}]},{"pos":[31279,31338],"content":"Returns the number of months in the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of months in the specified year and era.","pos":[0,59]}]},{"pos":[32001,32037],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[32096,32131],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[32188,32239],"content":"The number of months in the specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of months in the specified year and era.","pos":[0,51]}]},{"pos":[32433,32586],"content":"<code>era</code> is outside the range supported by this calendar.       -or-       <code>year</code> is outside the range supported by this calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[0,65],"source":"<code>era</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[72,149],"source":"       -or-       <code>year</code> is outside the range supported by this calendar."}]},{"pos":[33000,33057],"content":"Returns the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,57],"source":"Returns the year in the specified <xref:System.DateTime>."}]},{"pos":[33722,33757],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[33814,33890],"content":"An integer that represents the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,76],"source":"An integer that represents the year in the specified <xref:System.DateTime>."}]},{"pos":[34354,34553],"content":"Gets or sets the number of days to add or subtract from the calendar to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the number of days to add or subtract from the calendar to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions.","pos":[0,199]}]},{"pos":[34565,35343],"content":"This implementation of the <xref:System.Globalization.HijriCalendar> class adjusts the calendar date by adding or subtracting a value from zero to two days to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions. That value is stored in the HijriAdjustment property. If HijriAdjustment is not set explicitly, it derives its value from the settings in the regional and language options portion of Control Panel and is stored in the registry value HKEY_CURRENT_USER\\Control Panel\\International\\AddHijriDate. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.HijriCalendar> class does not detect changes in the system settings automatically.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This implementation of the <xref:System.Globalization.HijriCalendar> class adjusts the calendar date by adding or subtracting a value from zero to two days to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions. That value is stored in the HijriAdjustment property. If HijriAdjustment is not set explicitly, it derives its value from the settings in the regional and language options portion of Control Panel and is stored in the registry value HKEY_CURRENT_USER\\Control Panel\\International\\AddHijriDate. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.HijriCalendar> class does not detect changes in the system settings automatically.","pos":[0,778],"nodes":[{"content":"This implementation of the &lt;xref:System.Globalization.HijriCalendar&gt; class adjusts the calendar date by adding or subtracting a value from zero to two days to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions.","pos":[0,286],"source":"This implementation of the <xref:System.Globalization.HijriCalendar> class adjusts the calendar date by adding or subtracting a value from zero to two days to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions."},{"content":"That value is stored in the HijriAdjustment property.","pos":[287,340]},{"content":"If HijriAdjustment is not set explicitly, it derives its value from the settings in the regional and language options portion of Control Panel and is stored in the registry value HKEY_CURRENT_USER\\Control Panel\\International\\AddHijriDate.","pos":[341,579]},{"content":"However, that information can change during the life of the &lt;xref:System.AppDomain&gt;.","pos":[580,664],"source":" However, that information can change during the life of the <xref:System.AppDomain>."},{"content":"The &lt;xref:System.Globalization.HijriCalendar&gt; class does not detect changes in the system settings automatically.","pos":[665,778],"source":" The <xref:System.Globalization.HijriCalendar> class does not detect changes in the system settings automatically."}]}]},{"pos":[35937,36033],"content":"An integer from -2 to 2 that represents the number of days to add or subtract from the calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from -2 to 2 that represents the number of days to add or subtract from the calendar.","pos":[0,96]}]},{"pos":[36226,36272],"content":"The property is being set to an invalid value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property is being set to an invalid value.","pos":[0,46]}]},{"pos":[36625,36676],"content":"Represents the current era. This field is constant.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the current era. This field is constant.","pos":[0,51],"nodes":[{"content":"Represents the current era.","pos":[0,27]},{"content":"This field is constant.","pos":[28,51]}]}]},{"pos":[36689,36908],"content":"The value of the HijriEra field is 1.       The Hijri calendar recognizes one era: A.H. (Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of the HijriEra field is 1.       The Hijri calendar recognizes one era: A.H. (Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca).","pos":[0,213],"nodes":[{"content":"The value of the HijriEra field is 1.","pos":[0,37]},{"content":"The Hijri calendar recognizes one era: A.H.","pos":[44,87]},{"content":"(Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca).","pos":[88,213]}]}]},{"pos":[37026,37038],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[37595,37647],"content":"Determines whether the specified date is a leap day.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified date is a leap day.","pos":[0,52]}]},{"pos":[37660,38017],"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.       A leap day is a day that occurs only in a leap year. In the Hijri calendar, the 30th day of Zulhijjah is the only leap day.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.       A leap day is a day that occurs only in a leap year. In the Hijri calendar, the 30th day of Zulhijjah is the only leap day.","pos":[0,355],"nodes":[{"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years.","pos":[0,168]},{"content":"A common year has 354 days and a leap year has 355 days.","pos":[169,225]},{"content":"A leap day is a day that occurs only in a leap year.","pos":[232,284]},{"content":"In the Hijri calendar, the 30th day of Zulhijjah is the only leap day.","pos":[285,355]}]}]},{"pos":[38707,38743],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[38804,38854],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[38913,38961],"content":"An integer from 1 to 30 that represents the day.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 30 that represents the day.","pos":[0,48]}]},{"pos":[39020,39055],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[39114,39285],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified day is a leap day; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified day is a leap day; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[39473,39802],"content":"<code>era</code> is outside the range supported by this calendar.       -or-       <code>year</code> is outside the range supported by this calendar.       -or-       <code>month</code> is outside the range supported by this calendar.       -or-       <code>day</code> is outside the range supported by this calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[0,65],"source":"<code>era</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[72,149],"source":"       -or-       <code>year</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[156,234],"source":"       -or-       <code>month</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;day&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[241,317],"source":"       -or-       <code>day</code> is outside the range supported by this calendar."}]},{"pos":[40309,40394],"content":"Determines whether the specified month in the specified year and era is a leap month.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified month in the specified year and era is a leap month.","pos":[0,85]}]},{"pos":[40407,40755],"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.       A leap month is an entire month that occurs only in a leap year. The Hijri calendar does not have any leap months.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.       A leap month is an entire month that occurs only in a leap year. The Hijri calendar does not have any leap months.","pos":[0,346],"nodes":[{"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years.","pos":[0,168]},{"content":"A common year has 354 days and a leap year has 355 days.","pos":[169,225]},{"content":"A leap month is an entire month that occurs only in a leap year.","pos":[232,296]},{"content":"The Hijri calendar does not have any leap months.","pos":[297,346]}]}]},{"pos":[41404,41440],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[41501,41551],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[41610,41645],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[41704,41794],"content":"This method always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41984,42226],"content":"<code>era</code> is outside the range supported by this calendar.       -or-       <code>year</code> is outside the range supported by this calendar.       -or-       <code>month</code> is outside the range supported by this calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[0,65],"source":"<code>era</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[72,149],"source":"       -or-       <code>year</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[156,234],"source":"       -or-       <code>month</code> is outside the range supported by this calendar."}]},{"pos":[42684,42758],"content":"Determines whether the specified year in the specified era is a leap year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified year in the specified era is a leap year.","pos":[0,74]}]},{"pos":[42770,42995],"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.","pos":[0,225],"nodes":[{"content":"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years.","pos":[0,168]},{"content":"A common year has 354 days and a leap year has 355 days.","pos":[169,225]}]}]},{"pos":[43627,43663],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[43722,43757],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[43816,43989],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified year is a leap year; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified year is a leap year; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[44178,44331],"content":"<code>era</code> is outside the range supported by this calendar.       -or-       <code>year</code> is outside the range supported by this calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[0,65],"source":"<code>era</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[72,149],"source":"       -or-       <code>year</code> is outside the range supported by this calendar."}]},{"pos":[44748,44805],"content":"Gets the latest date and time supported by this calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the latest date and time supported by this calendar.","pos":[0,57]}]},{"pos":[44817,44925],"content":"December 31, 9999 C.E. is equivalent to the 3rd day of the 4th month of the year 9666 in the Hijri calendar.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"December 31, 9999 C.E. is equivalent to the 3rd day of the 4th month of the year 9666 in the Hijri calendar.","pos":[0,108],"nodes":[{"content":"December 31, 9999 C.E.","pos":[0,22]},{"content":"is equivalent to the 3rd day of the 4th month of the year 9666 in the Hijri calendar.","pos":[23,108]}]}]},{"pos":[45527,45722],"content":"The latest date and time supported by the <xref href=\"System.Globalization.HijriCalendar\"></xref> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.HijriCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type, which is equivalent to the last moment of December 31, 9999 C.E.","pos":[0,168],"source":"The latest date and time supported by the <xref href=\"System.Globalization.HijriCalendar\"></xref> type, which is equivalent to the last moment of December 31, 9999 C.E."},{"content":"in the Gregorian calendar.","pos":[169,195]}]},{"pos":[46224,46283],"content":"Gets the earliest date and time supported by this calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the earliest date and time supported by this calendar.","pos":[0,59]}]},{"pos":[46295,46944],"content":"Microsoft Visual Basic represents time of day as the specified time on the minimum date  supported by the <xref:System.DateTime> type, which is January 1, 0001 C.E. However, the <xref:System.Globalization.HijriCalendar> type does not support that minimum date. Consequently, if you call a method to format the time of day using the current calendar but you do not specify a format specifier, formatting uses the ISO 8601 sortable (\"s\") date/time pattern format specifier instead of the default general (\"G\") date/time pattern format specifier. For more information, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Microsoft Visual Basic represents time of day as the specified time on the minimum date  supported by the &lt;xref:System.DateTime&gt; type, which is January 1, 0001 C.E.","pos":[0,164],"source":"Microsoft Visual Basic represents time of day as the specified time on the minimum date  supported by the <xref:System.DateTime> type, which is January 1, 0001 C.E."},{"content":"However, the &lt;xref:System.Globalization.HijriCalendar&gt; type does not support that minimum date.","pos":[165,260],"source":" However, the <xref:System.Globalization.HijriCalendar> type does not support that minimum date."},{"content":"Consequently, if you call a method to format the time of day using the current calendar but you do not specify a format specifier, formatting uses the ISO 8601 sortable (\"s\") date/time pattern format specifier instead of the default general (\"G\") date/time pattern format specifier.","pos":[261,543]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[544,649],"source":" For more information, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[47546,47739],"content":"The earliest date and time supported by the <xref href=\"System.Globalization.HijriCalendar\"></xref> type, which is equivalent to the first moment of July 18, 622 C.E. in the Gregorian calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"The earliest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.HijriCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type, which is equivalent to the first moment of July 18, 622 C.E.","pos":[0,166],"source":"The earliest date and time supported by the <xref href=\"System.Globalization.HijriCalendar\"></xref> type, which is equivalent to the first moment of July 18, 622 C.E."},{"content":"in the Gregorian calendar.","pos":[167,193]}]},{"pos":[48546,48628],"content":"Returns a <xref:System.DateTime> that is set to the specified date, time, and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is set to the specified date, time, and era.","pos":[0,82],"source":"Returns a <xref:System.DateTime> that is set to the specified date, time, and era."}]},{"pos":[48855,48891],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[48952,49002],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[49061,49109],"content":"An integer from 1 to 30 that represents the day.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 30 that represents the day.","pos":[0,48]}]},{"pos":[49169,49218],"content":"An integer from 0 to 23 that represents the hour.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 23 that represents the hour.","pos":[0,49]}]},{"pos":[49280,49331],"content":"An integer from 0 to 59 that represents the minute.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 59 that represents the minute.","pos":[0,51]}]},{"pos":[49393,49444],"content":"An integer from 0 to 59 that represents the second.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 59 that represents the second.","pos":[0,51]}]},{"pos":[49511,49568],"content":"An integer from 0 to 999 that represents the millisecond.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 999 that represents the millisecond.","pos":[0,57]}]},{"pos":[49627,49662],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[49722,49811],"content":"The <xref:System.DateTime> that is set to the specified date and time in the current era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that is set to the specified date and time in the current era.","pos":[0,89],"source":"The <xref:System.DateTime> that is set to the specified date and time in the current era."}]},{"pos":[50000,50649],"content":"<code>era</code> is outside the range supported by this calendar.       -or-       <code>year</code> is outside the range supported by this calendar.       -or-       <code>month</code> is outside the range supported by this calendar.       -or-       <code>day</code> is outside the range supported by this calendar.       -or-       <code>hour</code> is less than zero or greater than 23.       -or-       <code>minute</code> is less than zero or greater than 59.       -or-       <code>second</code> is less than zero or greater than 59.       -or-       <code>millisecond</code> is less than zero or greater than 999.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[0,65],"source":"<code>era</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[72,149],"source":"       -or-       <code>year</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[156,234],"source":"       -or-       <code>month</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;day&lt;/code&gt;</ph> is outside the range supported by this calendar.","pos":[241,317],"source":"       -or-       <code>day</code> is outside the range supported by this calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;hour&lt;/code&gt;</ph> is less than zero or greater than 23.","pos":[324,390],"source":"       -or-       <code>hour</code> is less than zero or greater than 23."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;minute&lt;/code&gt;</ph> is less than zero or greater than 59.","pos":[397,465],"source":"       -or-       <code>minute</code> is less than zero or greater than 59."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;second&lt;/code&gt;</ph> is less than zero or greater than 59.","pos":[472,540],"source":"       -or-       <code>second</code> is less than zero or greater than 59."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;millisecond&lt;/code&gt;</ph> is less than zero or greater than 999.","pos":[547,621],"source":"       -or-       <code>millisecond</code> is less than zero or greater than 999."}]},{"pos":[51088,51255],"content":"Converts the specified year to a four-digit year by using the <xref:System.Globalization.HijriCalendar.TwoDigitYearMax*> property to determine the appropriate century.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified year to a four-digit year by using the &lt;xref:System.Globalization.HijriCalendar.TwoDigitYearMax*&gt; property to determine the appropriate century.","pos":[0,167],"source":"Converts the specified year to a four-digit year by using the <xref:System.Globalization.HijriCalendar.TwoDigitYearMax*> property to determine the appropriate century."}]},{"pos":[51268,52393],"content":"<xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the two-digit `year` within that 100-year range. For example, if <xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> is set to 1429, the 100-year range is from 1330 to 1429; therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.       ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A&gt; is the last year in the 100-year range that can be represented by a two-digit year.","pos":[0,144],"source":"<xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year."},{"content":"The century is determined by finding the sole occurrence of the two-digit <ph id=\"ph1\">`year`</ph> within that 100-year range.","pos":[145,253],"source":" The century is determined by finding the sole occurrence of the two-digit `year` within that 100-year range."},{"content":"For example, if &lt;xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A&gt; is set to 1429, the 100-year range is from 1330 to 1429; therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.","pos":[254,496],"source":" For example, if <xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> is set to 1429, the 100-year range is from 1330 to 1429; therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429."},{"content":"ToFourDigitYear supports either a two-digit year or a four-digit year.","pos":[503,573]},{"content":"Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the &lt;xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A&gt; value representing the appropriate century.","pos":[574,803],"source":" Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> value representing the appropriate century."},{"content":"If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value.","pos":[804,962]},{"content":"If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","pos":[963,1123]}]},{"pos":[52541,52611],"content":"A two-digit or four-digit integer that represents the year to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"A two-digit or four-digit integer that represents the year to convert.","pos":[0,70]}]},{"pos":[52668,52744],"content":"An integer that contains the four-digit representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">year</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer that contains the four-digit representation of <code>year</code>."},{"pos":[52937,53003],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by this calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code> is outside the range supported by this calendar."},{"pos":[53394,53483],"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,89]}]},{"pos":[53496,54390],"content":"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 1429, the 100-year range is from 1330 to 1429. Therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.       The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.HijriCalendar> class does not detect changes in the system settings automatically.       The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 1429, the 100-year range is from 1330 to 1429. Therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.       The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.HijriCalendar> class does not detect changes in the system settings automatically.       The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.","pos":[0,890],"nodes":[{"content":"This property allows a 2-digit year to be properly translated to a 4-digit year.","pos":[0,80]},{"content":"For example, if this property is set to 1429, the 100-year range is from 1330 to 1429.","pos":[81,167]},{"content":"Therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.","pos":[168,276]},{"content":"The initial value of this property is derived from the settings in the regional and language options portion of Control Panel.","pos":[283,409]},{"content":"However, that information can change during the life of the &lt;xref:System.AppDomain&gt;.","pos":[410,494],"source":" However, that information can change during the life of the <xref:System.AppDomain>."},{"content":"The &lt;xref:System.Globalization.HijriCalendar&gt; class does not detect changes in the system settings automatically.","pos":[495,608],"source":" The <xref:System.Globalization.HijriCalendar> class does not detect changes in the system settings automatically."},{"content":"The application should set this value to 99 to indicate that 2-digit years are to be taken literally.","pos":[615,716]},{"content":"For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99.","pos":[717,835]},{"content":"Therefore, a 2-digit value of 30 is interpreted as 30.","pos":[836,890]}]}]},{"pos":[54521,54597],"content":"The last year of a 100-year range that can be represented by a 2-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"The last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,76]}]},{"pos":[54786,54813],"content":"This calendar is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"This calendar is read-only.","pos":[0,27]}]},{"pos":[54928,54995],"content":"The value in a set operation is less than 100 or greater than 9666.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value in a set operation is less than 100 or greater than 9666.","pos":[0,67]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.HijriCalendar\n  id: HijriCalendar\n  children:\n  - System.Globalization.HijriCalendar.#ctor\n  - System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.HijriCalendar.AlgorithmType\n  - System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear\n  - System.Globalization.HijriCalendar.Eras\n  - System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.HijriCalendar.GetEra(System.DateTime)\n  - System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.HijriCalendar.GetMonth(System.DateTime)\n  - System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.HijriCalendar.GetYear(System.DateTime)\n  - System.Globalization.HijriCalendar.HijriAdjustment\n  - System.Globalization.HijriCalendar.HijriEra\n  - System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.HijriCalendar.MaxSupportedDateTime\n  - System.Globalization.HijriCalendar.MinSupportedDateTime\n  - System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.HijriCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  name: HijriCalendar\n  nameWithType: HijriCalendar\n  fullName: System.Globalization.HijriCalendar\n  type: Class\n  summary: Represents the Hijri calendar.\n  remarks: \"The Hijri calendar recognizes one era: A.H. (Latin \\\"Anno Hegirae\\\", which means \\\"the year of the migration,\\\" in reference to the migration of Muhammad (PBUH) from Mecca).  \\n  \\n> [!NOTE]\\n>  For information about using the HijriCalendar class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).  \\n  \\n In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.  \\n  \\n The Hijri calendar has 12 months with 29 to 30 days each:  \\n  \\n|GetMonth value|Month|Days in common years|Days in leap years|  \\n|--------------------|-----------|--------------------------|------------------------|  \\n|1|محرم (Muharram)|30|30|  \\n|2|صفر (Safar)|29|29|  \\n|3|‏ربيع الاول (Rabi I)|30|30|  \\n|4|‏ربيع الثاني (Rabi II)|29|29|  \\n|5|جمادى الاولى (Jumada I)|30|30|  \\n|6|جمادى الثانية (Jumada II)|29|29|  \\n|7|رجب (Rajab)|30|30|  \\n|8|شعبان (Shaban)|29|29|  \\n|9|رمضان (Ramadan)|30|30|  \\n|10|شوال (Shawwal)|29|29|  \\n|11|ذو القعدة (Zulkadah)|30|30|  \\n|12|ذو الحجة (Zulhijjah)|29|30|  \\n  \\n Ramadan, the month of fasting in the Muslim world, officially starts and ends according to a decree that is based on the observation of the new moon. Therefore, the number of days in Shaban and the number of days in Ramadan vary.  \\n  \\n The date January 1, 2001 A.D. in the Gregorian calendar is roughly equivalent to the sixth day of Shawwal in the year 1421 A.H. in the Hijri calendar.  \\n  \\n This implementation of the HijriCalendar class adjusts the calendar date by adding or subtracting a value from zero to two days to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions. That value is stored in the <xref:System.Globalization.HijriCalendar.HijriAdjustment%2A> property. If <xref:System.Globalization.HijriCalendar.HijriAdjustment%2A> is not set explicitly, it derives its value from the settings in the regional and language options portion of Control Panel and is stored in the registry value HKEY_CURRENT_USER\\\\Control Panel\\\\International\\\\AddHijriDate. However, that information can change during the life of the <xref:System.AppDomain>. The HijriCalendar class does not detect changes in the system settings automatically.  \\n  \\n Each <xref:System.Globalization.CultureInfo> supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class HijriCalendar : System.Globalization.Calendar\n  inheritance:\n  - System.Globalization.Calendar\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: HijriCalendar()\n  nameWithType: HijriCalendar.HijriCalendar()\n  fullName: System.Globalization.HijriCalendar.HijriCalendar()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Initializes a new instance of the <xref href=\"System.Globalization.HijriCalendar\"></xref> class.\n  syntax:\n    content: public HijriCalendar ();\n    parameters: []\n  overload: System.Globalization.HijriCalendar.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: AddMonths(DateTime,Int32)\n  nameWithType: HijriCalendar.AddMonths(DateTime,Int32)\n  fullName: System.Globalization.HijriCalendar.AddMonths(DateTime,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, if the specified month is Zulkadah, which has 30 days, the specified day is the 30th day of that month, and the value of the `months` parameter is 3, the resulting year is one more than the specified year, the resulting month is Safar, and the resulting day is the 29th day, which is the last day in Safar.  \\n  \\n If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.h_21_1.vb)]\\n [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.h_21_1.cs)]\"\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hijri calendar.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_21_2.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_21_2.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_21_2.vb)]\"\n  syntax:\n    content: public override DateTime AddMonths (DateTime time, int months);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to add months to.\n    - id: months\n      type: System.Int32\n      description: The number of months to add.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>.\n  overload: System.Globalization.HijriCalendar.AddMonths*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The resulting <xref:System.DateTime>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>months</code> is less than -120000.  \\n  \\n -or-  \\n  \\n <code>months</code> is greater than 120000.\"\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: AddYears(DateTime,Int32)\n  nameWithType: HijriCalendar.AddYears(DateTime,Int32)\n  fullName: System.Globalization.HijriCalendar.AddYears(DateTime,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, Zulhijjah has 29 days, except during leap years when it has 30 days. If the specified date is the 30th day of Zulhijjah in a leap year and the value of `years` is 1, the resulting date will be the 29th day of Zulhijjah in the following year.  \\n  \\n If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.h_4_1.vb)]\\n [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.h_4_1.cs)]\"\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hijri calendar.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_4_2.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_4_2.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_4_2.vb)]\"\n  syntax:\n    content: public override DateTime AddYears (DateTime time, int years);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to add years to.\n    - id: years\n      type: System.Int32\n      description: The number of years to add.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>.\n  overload: System.Globalization.HijriCalendar.AddYears*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The resulting <xref:System.DateTime> is outside the supported range.\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.AlgorithmType\n  id: AlgorithmType\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: AlgorithmType\n  nameWithType: HijriCalendar.AlgorithmType\n  fullName: System.Globalization.HijriCalendar.AlgorithmType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.\n  remarks: ''\n  example:\n  - \"The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \\n  \\n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.h_0_1.cs)]\\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.h_0_1.vb)]\"\n  syntax:\n    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }\n    return:\n      type: System.Globalization.CalendarAlgorithmType\n      description: Always returns <xref href=\"System.Globalization.CalendarAlgorithmType\"></xref>.\n  overload: System.Globalization.HijriCalendar.AlgorithmType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear\n  id: DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: DaysInYearBeforeMinSupportedYear\n  nameWithType: HijriCalendar.DaysInYearBeforeMinSupportedYear\n  fullName: System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the number of days in the year that precedes the year that is specified by the <xref:System.Globalization.HijriCalendar.MinSupportedDateTime*> property.\n  remarks: This property returns a constant value of 354.\n  syntax:\n    content: protected override int DaysInYearBeforeMinSupportedYear { get; }\n    return:\n      type: System.Int32\n      description: The number of days in the year that precedes the year specified by <xref:System.Globalization.HijriCalendar.MinSupportedDateTime*>.\n  overload: System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.Eras\n  id: Eras\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: Eras\n  nameWithType: HijriCalendar.Eras\n  fullName: System.Globalization.HijriCalendar.Eras\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the list of eras in the <xref href=\"System.Globalization.HijriCalendar\"></xref>.\n  remarks: 'The Hijri calendar recognizes one era: A.H. (Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca). This property always returns an array with only one element.'\n  syntax:\n    content: public override int[] Eras { get; }\n    return:\n      type: System.Int32[]\n      description: An array of integers that represents the eras in the <xref href=\"System.Globalization.HijriCalendar\"></xref>.\n  overload: System.Globalization.HijriCalendar.Eras*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetDayOfMonth(DateTime)\n  nameWithType: HijriCalendar.GetDayOfMonth(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetDayOfMonth(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the month in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hijri calendar.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_16_1.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_16_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_16_1.vb)]\"\n  syntax:\n    content: public override int GetDayOfMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 30 that represents the day of the month in the specified <xref:System.DateTime>.\n  overload: System.Globalization.HijriCalendar.GetDayOfMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetDayOfWeek(DateTime)\n  nameWithType: HijriCalendar.GetDayOfWeek(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetDayOfWeek(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the week in the specified <xref:System.DateTime>.\n  remarks: \"The <xref:System.DayOfWeek> values are as follows:  \\n  \\n|DayOfWeek value|which indicates|  \\n|---------------------|---------------------|  \\n|Sunday|الاحد (Al-Ahad)|  \\n|Monday|الاثنين (Al-Ithnayn)|  \\n|Tuesday|الثلاثاء (At-Thulaathaa')|  \\n|Wednesday|الاربعاء (Al-Arbi'aa')|  \\n|Thursday|الخميس (Al-Khamiis)|  \\n|Friday|الجمعة (Al-Jumu'ah)|  \\n|Saturday|السبت (As-Sabt)|\"\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hijri calendar.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_17_1.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_17_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_17_1.vb)]\"\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.DayOfWeek\n      description: A <xref:System.DayOfWeek> value that represents the day of the week in the specified <xref:System.DateTime>.\n  overload: System.Globalization.HijriCalendar.GetDayOfWeek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetDayOfYear(DateTime)\n  nameWithType: HijriCalendar.GetDayOfYear(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetDayOfYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the year in the specified <xref:System.DateTime>.\n  remarks: The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.HijriCalendar.GetDaysInYear%2A>.\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hijri calendar.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_13_1.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_13_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_13_1.vb)]\"\n  syntax:\n    content: public override int GetDayOfYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 355 that represents the day of the year in the specified <xref:System.DateTime>.\n  overload: System.Globalization.HijriCalendar.GetDayOfYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetDaysInMonth(Int32,Int32,Int32)\n  nameWithType: HijriCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of days in the specified month of the specified year and era.\n  remarks: For example, this method returns 29 or 30 for Zulhijjah (`month` = 12), depending on whether `year` is a leap year.\n  example:\n  - \"The following code example calls `GetDaysInMonth` for the twelfth month in each of five years in each era.  \\n  \\n [!code-vb[System.Globalization.HijriCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/4f5a9e0a-9896-4180-95b7-_1.vb)]\\n [!code-cs[System.Globalization.HijriCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/4f5a9e0a-9896-4180-95b7-_1.cs)]\\n [!code-cpp[System.Globalization.HijriCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/4f5a9e0a-9896-4180-95b7-_1.cpp)]\"\n  syntax:\n    content: public override int GetDaysInMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified month in the specified year in the specified era.\n  overload: System.Globalization.HijriCalendar.GetDaysInMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by this calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetDaysInYear(Int32,Int32)\n  nameWithType: HijriCalendar.GetDaysInYear(Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.GetDaysInYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of days in the specified year and era.\n  remarks: ''\n  example:\n  - \"The following code example calls `GetDaysInYear` for five years in each era.  \\n  \\n [!code-cs[System.Globalization.HijriCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.h_3_1.cs)]\\n [!code-cpp[System.Globalization.HijriCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.h_3_1.cpp)]\\n [!code-vb[System.Globalization.HijriCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.h_3_1.vb)]\"\n  syntax:\n    content: public override int GetDaysInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.\n  overload: System.Globalization.HijriCalendar.GetDaysInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> or <code>era</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetEra(DateTime)\n  nameWithType: HijriCalendar.GetEra(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetEra(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the era in the specified <xref:System.DateTime>.\n  remarks: 'The Hijri calendar recognizes one era: A.H. (Latin \"Anno Hegirae\", which means \"the year of the migration,\" in reference to the migration of Muhammad (PBUH) from Mecca).'\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hijri calendar.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_14_1.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_14_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_14_1.vb)]\"\n  syntax:\n    content: public override int GetEra (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the era in the specified <xref:System.DateTime>.\n  overload: System.Globalization.HijriCalendar.GetEra*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetLeapMonth(Int32,Int32)\n  nameWithType: HijriCalendar.GetLeapMonth(Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.GetLeapMonth(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the leap month for a specified year and era.\n  remarks: In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.\n  syntax:\n    content: public override int GetLeapMonth (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: A year.\n    - id: era\n      type: System.Int32\n      description: An era. Specify <xref:System.Globalization.Calendar.CurrentEra> or <xref href=\"System.Globalization.HijriCalendar.HijriEra\"></xref>.\n    return:\n      type: System.Int32\n      description: Always 0 because the <xref href=\"System.Globalization.HijriCalendar\"></xref> type does not support the notion of a leap month.\n  overload: System.Globalization.HijriCalendar.GetLeapMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is less than the Hijri calendar year 1 or greater than the year 9666.  \\n  \\n -or-  \\n  \\n <code>era</code> is not <xref:System.Globalization.Calendar.CurrentEra> or <xref href=\\\"System.Globalization.HijriCalendar.HijriEra\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetMonth(DateTime)\n  nameWithType: HijriCalendar.GetMonth(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetMonth(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the month in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hijri calendar.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_19_1.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_19_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_19_1.vb)]\"\n  syntax:\n    content: public override int GetMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month in the specified <xref:System.DateTime>.\n  overload: System.Globalization.HijriCalendar.GetMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetMonthsInYear(Int32,Int32)\n  nameWithType: HijriCalendar.GetMonthsInYear(Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.GetMonthsInYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of months in the specified year and era.\n  remarks: ''\n  example:\n  - \"The following code example calls the GetMonthsInYear method for five years in each era.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.h_12_1.cpp)]\\n [!code-vb[System.Globalization.HijriCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.h_12_1.vb)]\\n [!code-cs[System.Globalization.HijriCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.h_12_1.cs)]\"\n  syntax:\n    content: public override int GetMonthsInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of months in the specified year and era.\n  overload: System.Globalization.HijriCalendar.GetMonthsInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by this calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: GetYear(DateTime)\n  nameWithType: HijriCalendar.GetYear(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the year in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hijri calendar.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_9_1.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_9_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_9_1.vb)]\"\n  syntax:\n    content: public override int GetYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the year in the specified <xref:System.DateTime>.\n  overload: System.Globalization.HijriCalendar.GetYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.HijriAdjustment\n  id: HijriAdjustment\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: HijriAdjustment\n  nameWithType: HijriCalendar.HijriAdjustment\n  fullName: System.Globalization.HijriCalendar.HijriAdjustment\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets or sets the number of days to add or subtract from the calendar to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions.\n  remarks: This implementation of the <xref:System.Globalization.HijriCalendar> class adjusts the calendar date by adding or subtracting a value from zero to two days to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions. That value is stored in the HijriAdjustment property. If HijriAdjustment is not set explicitly, it derives its value from the settings in the regional and language options portion of Control Panel and is stored in the registry value HKEY_CURRENT_USER\\Control Panel\\International\\AddHijriDate. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.HijriCalendar> class does not detect changes in the system settings automatically.\n  example:\n  - \"The following code example shows how HijriAdjustment affects the date.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar.HijriAdjustment#1](~/add/codesnippet/cpp/p-system.globalization.h_2_1.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar.HijriAdjustment#1](~/add/codesnippet/csharp/p-system.globalization.h_2_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar.HijriAdjustment#1](~/add/codesnippet/visualbasic/p-system.globalization.h_2_1.vb)]\"\n  syntax:\n    content: public int HijriAdjustment { get; set; }\n    return:\n      type: System.Int32\n      description: An integer from -2 to 2 that represents the number of days to add or subtract from the calendar.\n  overload: System.Globalization.HijriCalendar.HijriAdjustment*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The property is being set to an invalid value.\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.HijriEra\n  id: HijriEra\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: HijriEra\n  nameWithType: HijriCalendar.HijriEra\n  fullName: System.Globalization.HijriCalendar.HijriEra\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Represents the current era. This field is constant.\n  remarks: \"The value of the HijriEra field is 1.  \\n  \\n The Hijri calendar recognizes one era: A.H. (Latin \\\"Anno Hegirae\\\", which means \\\"the year of the migration,\\\" in reference to the migration of Muhammad (PBUH) from Mecca).\"\n  syntax:\n    content: public static readonly int HijriEra;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: IsLeapDay(Int32,Int32,Int32,Int32)\n  nameWithType: HijriCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified date is a leap day.\n  remarks: \"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.  \\n  \\n A leap day is a day that occurs only in a leap year. In the Hijri calendar, the 30th day of Zulhijjah is the only leap day.\"\n  example:\n  - \"The following code example calls the `IsLeapDay` method for the last day of the second month (February) for five years in each of the eras.  \\n  \\n [!code-cs[System.Globalization.HijriCalendar.IsLeapDay#1](~/add/codesnippet/csharp/6f043d10-1d5e-45a1-ab11-_1.cs)]\\n [!code-cpp[System.Globalization.HijriCalendar.IsLeapDay#1](~/add/codesnippet/cpp/6f043d10-1d5e-45a1-ab11-_1.cpp)]\\n [!code-vb[System.Globalization.HijriCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/6f043d10-1d5e-45a1-ab11-_1.vb)]\"\n  syntax:\n    content: public override bool IsLeapDay (int year, int month, int day, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 to 30 that represents the day.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified day is a leap day; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.HijriCalendar.IsLeapDay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>day</code> is outside the range supported by this calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: IsLeapMonth(Int32,Int32,Int32)\n  nameWithType: HijriCalendar.IsLeapMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.IsLeapMonth(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified month in the specified year and era is a leap month.\n  remarks: \"In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.  \\n  \\n A leap month is an entire month that occurs only in a leap year. The Hijri calendar does not have any leap months.\"\n  example:\n  - \"The following code example calls `IsLeapMonth` for all the months in five years in the current era.  \\n  \\n [!code-cs[System.Globalization.HijriCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/ab4078b3-e91f-4cfb-8fcf-_1.cs)]\\n [!code-cpp[System.Globalization.HijriCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/ab4078b3-e91f-4cfb-8fcf-_1.cpp)]\\n [!code-vb[System.Globalization.HijriCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/ab4078b3-e91f-4cfb-8fcf-_1.vb)]\"\n  syntax:\n    content: public override bool IsLeapMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: This method always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.HijriCalendar.IsLeapMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by this calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: IsLeapYear(Int32,Int32)\n  nameWithType: HijriCalendar.IsLeapYear(Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.IsLeapYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified year in the specified era is a leap year.\n  remarks: In every 30-year cycle that ends with a year that is evenly divisible by 30, the 2nd, 5th, 7th, 10th, 13th, 16th, 18th, 21st, 24th, 26th, and 29th years are leap years. A common year has 354 days and a leap year has 355 days.\n  example:\n  - \"The following code example calls the `IsLeapYear` method for five years in each of the eras.  \\n  \\n [!code-cpp[System.Globalization.HijriCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.h_0_1.cpp)]\\n [!code-cs[System.Globalization.HijriCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.h_0_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.h_0_1.vb)]\"\n  syntax:\n    content: public override bool IsLeapYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified year is a leap year; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.HijriCalendar.IsLeapYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by this calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: MaxSupportedDateTime\n  nameWithType: HijriCalendar.MaxSupportedDateTime\n  fullName: System.Globalization.HijriCalendar.MaxSupportedDateTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the latest date and time supported by this calendar.\n  remarks: December 31, 9999 C.E. is equivalent to the 3rd day of the 4th month of the year 9666 in the Hijri calendar.\n  example:\n  - \"The following code example gets the minimum value and the maximum value of the calendar.  \\n  \\n [!code-cs[System.Globalization.HijriCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.h_1_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.h_1_1.vb)]\\n [!code-cpp[System.Globalization.HijriCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.h_1_1.cpp)]\"\n  syntax:\n    content: public override DateTime MaxSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: The latest date and time supported by the <xref href=\"System.Globalization.HijriCalendar\"></xref> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.\n  overload: System.Globalization.HijriCalendar.MaxSupportedDateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: MinSupportedDateTime\n  nameWithType: HijriCalendar.MinSupportedDateTime\n  fullName: System.Globalization.HijriCalendar.MinSupportedDateTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the earliest date and time supported by this calendar.\n  remarks: Microsoft Visual Basic represents time of day as the specified time on the minimum date  supported by the <xref:System.DateTime> type, which is January 1, 0001 C.E. However, the <xref:System.Globalization.HijriCalendar> type does not support that minimum date. Consequently, if you call a method to format the time of day using the current calendar but you do not specify a format specifier, formatting uses the ISO 8601 sortable (\"s\") date/time pattern format specifier instead of the default general (\"G\") date/time pattern format specifier. For more information, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - \"The following code example gets the minimum value and the maximum value of the calendar.  \\n  \\n [!code-cs[System.Globalization.HijriCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.h_3_1.cs)]\\n [!code-vb[System.Globalization.HijriCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.h_3_1.vb)]\\n [!code-cpp[System.Globalization.HijriCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.h_3_1.cpp)]\"\n  syntax:\n    content: public override DateTime MinSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: The earliest date and time supported by the <xref href=\"System.Globalization.HijriCalendar\"></xref> type, which is equivalent to the first moment of July 18, 622 C.E. in the Gregorian calendar.\n  overload: System.Globalization.HijriCalendar.MinSupportedDateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: HijriCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is set to the specified date, time, and era.\n  syntax:\n    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 to 30 that represents the day.\n    - id: hour\n      type: System.Int32\n      description: An integer from 0 to 23 that represents the hour.\n    - id: minute\n      type: System.Int32\n      description: An integer from 0 to 59 that represents the minute.\n    - id: second\n      type: System.Int32\n      description: An integer from 0 to 59 that represents the second.\n    - id: millisecond\n      type: System.Int32\n      description: An integer from 0 to 999 that represents the millisecond.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that is set to the specified date and time in the current era.\n  overload: System.Globalization.HijriCalendar.ToDateTime*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>day</code> is outside the range supported by this calendar.  \\n  \\n -or-  \\n  \\n <code>hour</code> is less than zero or greater than 23.  \\n  \\n -or-  \\n  \\n <code>minute</code> is less than zero or greater than 59.  \\n  \\n -or-  \\n  \\n <code>second</code> is less than zero or greater than 59.  \\n  \\n -or-  \\n  \\n <code>millisecond</code> is less than zero or greater than 999.\"\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: ToFourDigitYear(Int32)\n  nameWithType: HijriCalendar.ToFourDigitYear(Int32)\n  fullName: System.Globalization.HijriCalendar.ToFourDigitYear(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Converts the specified year to a four-digit year by using the <xref:System.Globalization.HijriCalendar.TwoDigitYearMax*> property to determine the appropriate century.\n  remarks: \"<xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the two-digit `year` within that 100-year range. For example, if <xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> is set to 1429, the 100-year range is from 1330 to 1429; therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.  \\n  \\n ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.\"\n  syntax:\n    content: public override int ToFourDigitYear (int year);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: A two-digit or four-digit integer that represents the year to convert.\n    return:\n      type: System.Int32\n      description: An integer that contains the four-digit representation of <code>year</code>.\n  overload: System.Globalization.HijriCalendar.ToFourDigitYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> is outside the range supported by this calendar.\n  platform:\n  - net462\n- uid: System.Globalization.HijriCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.HijriCalendar\n  langs:\n  - csharp\n  name: TwoDigitYearMax\n  nameWithType: HijriCalendar.TwoDigitYearMax\n  fullName: System.Globalization.HijriCalendar.TwoDigitYearMax\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.\n  remarks: \"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 1429, the 100-year range is from 1330 to 1429. Therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.  \\n  \\n The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.HijriCalendar> class does not detect changes in the system settings automatically.  \\n  \\n The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    return:\n      type: System.Int32\n      description: The last year of a 100-year range that can be represented by a 2-digit year.\n  overload: System.Globalization.HijriCalendar.TwoDigitYearMax*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This calendar is read-only.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value in a set operation is less than 100 or greater than 9666.\n  platform:\n  - net462\nreferences:\n- uid: System.Globalization.Calendar\n  isExternal: false\n  name: System.Globalization.Calendar\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Globalization.HijriCalendar.#ctor\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: HijriCalendar()\n  nameWithType: HijriCalendar.HijriCalendar()\n  fullName: System.Globalization.HijriCalendar.HijriCalendar()\n- uid: System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: AddMonths(DateTime,Int32)\n  nameWithType: HijriCalendar.AddMonths(DateTime,Int32)\n  fullName: System.Globalization.HijriCalendar.AddMonths(DateTime,Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: AddYears(DateTime,Int32)\n  nameWithType: HijriCalendar.AddYears(DateTime,Int32)\n  fullName: System.Globalization.HijriCalendar.AddYears(DateTime,Int32)\n- uid: System.Globalization.HijriCalendar.AlgorithmType\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: HijriCalendar.AlgorithmType\n  fullName: System.Globalization.HijriCalendar.AlgorithmType\n- uid: System.Globalization.CalendarAlgorithmType\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarAlgorithmType\n  nameWithType: CalendarAlgorithmType\n  fullName: System.Globalization.CalendarAlgorithmType\n- uid: System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: DaysInYearBeforeMinSupportedYear\n  nameWithType: HijriCalendar.DaysInYearBeforeMinSupportedYear\n  fullName: System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear\n- uid: System.Globalization.HijriCalendar.Eras\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: HijriCalendar.Eras\n  fullName: System.Globalization.HijriCalendar.Eras\n- uid: System.Int32[]\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDayOfMonth(DateTime)\n  nameWithType: HijriCalendar.GetDayOfMonth(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDayOfWeek(DateTime)\n  nameWithType: HijriCalendar.GetDayOfWeek(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetDayOfWeek(DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: true\n  name: DayOfWeek\n  nameWithType: DayOfWeek\n  fullName: System.DayOfWeek\n- uid: System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDayOfYear(DateTime)\n  nameWithType: HijriCalendar.GetDayOfYear(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDaysInMonth(Int32,Int32,Int32)\n  nameWithType: HijriCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.GetDaysInMonth(Int32,Int32,Int32)\n- uid: System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDaysInYear(Int32,Int32)\n  nameWithType: HijriCalendar.GetDaysInYear(Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.GetDaysInYear(Int32,Int32)\n- uid: System.Globalization.HijriCalendar.GetEra(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetEra(DateTime)\n  nameWithType: HijriCalendar.GetEra(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetEra(DateTime)\n- uid: System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetLeapMonth(Int32,Int32)\n  nameWithType: HijriCalendar.GetLeapMonth(Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.GetLeapMonth(Int32,Int32)\n- uid: System.Globalization.HijriCalendar.GetMonth(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetMonth(DateTime)\n  nameWithType: HijriCalendar.GetMonth(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetMonth(DateTime)\n- uid: System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetMonthsInYear(Int32,Int32)\n  nameWithType: HijriCalendar.GetMonthsInYear(Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.GetMonthsInYear(Int32,Int32)\n- uid: System.Globalization.HijriCalendar.GetYear(System.DateTime)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetYear(DateTime)\n  nameWithType: HijriCalendar.GetYear(DateTime)\n  fullName: System.Globalization.HijriCalendar.GetYear(DateTime)\n- uid: System.Globalization.HijriCalendar.HijriAdjustment\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: HijriAdjustment\n  nameWithType: HijriCalendar.HijriAdjustment\n  fullName: System.Globalization.HijriCalendar.HijriAdjustment\n- uid: System.Globalization.HijriCalendar.HijriEra\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: HijriEra\n  nameWithType: HijriCalendar.HijriEra\n  fullName: System.Globalization.HijriCalendar.HijriEra\n- uid: System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: IsLeapDay(Int32,Int32,Int32,Int32)\n  nameWithType: HijriCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: IsLeapMonth(Int32,Int32,Int32)\n  nameWithType: HijriCalendar.IsLeapMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.IsLeapMonth(Int32,Int32,Int32)\n- uid: System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: IsLeapYear(Int32,Int32)\n  nameWithType: HijriCalendar.IsLeapYear(Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.IsLeapYear(Int32,Int32)\n- uid: System.Globalization.HijriCalendar.MaxSupportedDateTime\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: HijriCalendar.MaxSupportedDateTime\n  fullName: System.Globalization.HijriCalendar.MaxSupportedDateTime\n- uid: System.Globalization.HijriCalendar.MinSupportedDateTime\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: HijriCalendar.MinSupportedDateTime\n  fullName: System.Globalization.HijriCalendar.MinSupportedDateTime\n- uid: System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: HijriCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.HijriCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: ToFourDigitYear(Int32)\n  nameWithType: HijriCalendar.ToFourDigitYear(Int32)\n  fullName: System.Globalization.HijriCalendar.ToFourDigitYear(Int32)\n- uid: System.Globalization.HijriCalendar.TwoDigitYearMax\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: HijriCalendar.TwoDigitYearMax\n  fullName: System.Globalization.HijriCalendar.TwoDigitYearMax\n- uid: System.Globalization.HijriCalendar.#ctor*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: HijriCalendar\n  nameWithType: HijriCalendar.HijriCalendar\n- uid: System.Globalization.HijriCalendar.AddMonths*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: AddMonths\n  nameWithType: HijriCalendar.AddMonths\n- uid: System.Globalization.HijriCalendar.AddYears*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: AddYears\n  nameWithType: HijriCalendar.AddYears\n- uid: System.Globalization.HijriCalendar.AlgorithmType*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: HijriCalendar.AlgorithmType\n- uid: System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: DaysInYearBeforeMinSupportedYear\n  nameWithType: HijriCalendar.DaysInYearBeforeMinSupportedYear\n- uid: System.Globalization.HijriCalendar.Eras*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: HijriCalendar.Eras\n- uid: System.Globalization.HijriCalendar.GetDayOfMonth*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDayOfMonth\n  nameWithType: HijriCalendar.GetDayOfMonth\n- uid: System.Globalization.HijriCalendar.GetDayOfWeek*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDayOfWeek\n  nameWithType: HijriCalendar.GetDayOfWeek\n- uid: System.Globalization.HijriCalendar.GetDayOfYear*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDayOfYear\n  nameWithType: HijriCalendar.GetDayOfYear\n- uid: System.Globalization.HijriCalendar.GetDaysInMonth*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDaysInMonth\n  nameWithType: HijriCalendar.GetDaysInMonth\n- uid: System.Globalization.HijriCalendar.GetDaysInYear*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetDaysInYear\n  nameWithType: HijriCalendar.GetDaysInYear\n- uid: System.Globalization.HijriCalendar.GetEra*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetEra\n  nameWithType: HijriCalendar.GetEra\n- uid: System.Globalization.HijriCalendar.GetLeapMonth*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetLeapMonth\n  nameWithType: HijriCalendar.GetLeapMonth\n- uid: System.Globalization.HijriCalendar.GetMonth*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetMonth\n  nameWithType: HijriCalendar.GetMonth\n- uid: System.Globalization.HijriCalendar.GetMonthsInYear*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetMonthsInYear\n  nameWithType: HijriCalendar.GetMonthsInYear\n- uid: System.Globalization.HijriCalendar.GetYear*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: GetYear\n  nameWithType: HijriCalendar.GetYear\n- uid: System.Globalization.HijriCalendar.HijriAdjustment*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: HijriAdjustment\n  nameWithType: HijriCalendar.HijriAdjustment\n- uid: System.Globalization.HijriCalendar.IsLeapDay*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: IsLeapDay\n  nameWithType: HijriCalendar.IsLeapDay\n- uid: System.Globalization.HijriCalendar.IsLeapMonth*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: IsLeapMonth\n  nameWithType: HijriCalendar.IsLeapMonth\n- uid: System.Globalization.HijriCalendar.IsLeapYear*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: IsLeapYear\n  nameWithType: HijriCalendar.IsLeapYear\n- uid: System.Globalization.HijriCalendar.MaxSupportedDateTime*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: HijriCalendar.MaxSupportedDateTime\n- uid: System.Globalization.HijriCalendar.MinSupportedDateTime*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: HijriCalendar.MinSupportedDateTime\n- uid: System.Globalization.HijriCalendar.ToDateTime*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: ToDateTime\n  nameWithType: HijriCalendar.ToDateTime\n- uid: System.Globalization.HijriCalendar.ToFourDigitYear*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: ToFourDigitYear\n  nameWithType: HijriCalendar.ToFourDigitYear\n- uid: System.Globalization.HijriCalendar.TwoDigitYearMax*\n  parent: System.Globalization.HijriCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: HijriCalendar.TwoDigitYearMax\n"}