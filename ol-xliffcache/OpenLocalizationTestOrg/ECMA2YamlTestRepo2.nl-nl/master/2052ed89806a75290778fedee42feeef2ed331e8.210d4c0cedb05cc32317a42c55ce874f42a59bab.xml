{"nodes":[{"pos":[960,1178],"content":"Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional <ph id=\"ph1\">[!INCLUDE[TLA#tla_gui](~/add/includes/ajax-current-ext-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional [!INCLUDE[TLA#tla_gui](~/add/includes/ajax-current-ext-md.md)]."},{"pos":[1190,1315],"content":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Implemented on a UI Automation provider that must support the &lt;xref:System.Windows.Automation.WindowPattern&gt; control pattern.","pos":[0,125],"source":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern."}]},{"pos":[2083,2112],"content":"Attempts to close the window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to close the window.","pos":[0,29]}]},{"pos":[2125,2560],"content":"Close must return immediately without blocking.       Close raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event. If possible, the event should be raised after the control has completed its associated action.       When called on a split pane control, this method will close the pane and remove the associated split. This method might also close all other panes, depending on implementation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Close must return immediately without blocking.       Close raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event. If possible, the event should be raised after the control has completed its associated action.       When called on a split pane control, this method will close the pane and remove the associated split. This method might also close all other panes, depending on implementation.","pos":[0,431],"nodes":[{"content":"Close must return immediately without blocking.","pos":[0,47]},{"content":"Close raises the &lt;xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent&gt; event.","pos":[54,153],"source":"       Close raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event."},{"content":"If possible, the event should be raised after the control has completed its associated action.","pos":[154,248]},{"content":"When called on a split pane control, this method will close the pane and remove the associated split.","pos":[255,356]},{"content":"This method might also close all other panes, depending on implementation.","pos":[357,431]}]}]},{"pos":[2820,2879],"content":"When the control is unable to perform the requested action.","needQuote":true,"needEscape":true,"nodes":[{"content":"When the control is unable to perform the requested action.","pos":[0,59]}]},{"pos":[3034,3118],"content":"When the target element is no longer available (for example, the window has closed).","needQuote":true,"needEscape":true,"nodes":[{"content":"When the target element is no longer available (for example, the window has closed).","pos":[0,84]}]},{"pos":[3590,3631],"content":"Gets the interaction state of the window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the interaction state of the window.","pos":[0,41]}]},{"pos":[3829,3918],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Automation.WindowInteractionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the control.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Automation.WindowInteractionState\"></xref> of the control."},{"pos":[4443,4499],"content":"Gets a value that specifies whether the window is modal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that specifies whether the window is modal.","pos":[0,56]}]},{"pos":[4610,4768],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the window is modal; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window is modal; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5294,5379],"content":"Gets a value that specifies whether the window is the topmost element in the z-order.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that specifies whether the window is the topmost element in the z-order.","pos":[0,85]}]},{"pos":[5492,5652],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the window is topmost; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window is topmost; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6190,6254],"content":"Gets a value that specifies whether the window can be maximized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that specifies whether the window can be maximized.","pos":[0,64]}]},{"pos":[6369,6535],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the window can be maximized; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window can be maximized; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7075,7139],"content":"Gets a value that specifies whether the window can be minimized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that specifies whether the window can be minimized.","pos":[0,64]}]},{"pos":[7254,7420],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the window can be minimized; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window can be minimized; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8120,8199],"content":"Changes the visual state of the window. For example, minimizes or maximizes it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the visual state of the window. For example, minimizes or maximizes it.","pos":[0,79],"nodes":[{"content":"Changes the visual state of the window.","pos":[0,39]},{"content":"For example, minimizes or maximizes it.","pos":[40,79]}]}]},{"pos":[8410,8451],"content":"The requested visual state of the window.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested visual state of the window.","pos":[0,41]}]},{"pos":[8655,8712],"content":"When the control does not support the requested behavior.","needQuote":true,"needEscape":true,"nodes":[{"content":"When the control does not support the requested behavior.","pos":[0,57]}]},{"pos":[9159,9195],"content":"Gets the visual state of the window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the visual state of the window.","pos":[0,36]}]},{"pos":[9378,9409],"content":"The visual state of the window.","needQuote":true,"needEscape":true,"nodes":[{"content":"The visual state of the window.","pos":[0,31]}]},{"pos":[10021,10157],"content":"Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.","pos":[0,136]}]},{"pos":[10170,10584],"content":"This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.       The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input. The calling code should not rely on this method to ascertain exactly when the window has become idle.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.       The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input. The calling code should not rely on this method to ascertain exactly when the window has become idle.","pos":[0,412],"nodes":[{"content":"This method is typically used in conjunction with the handling of a &lt;xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent&gt;.","pos":[0,144],"source":"This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>."},{"content":"The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.","pos":[151,310]},{"content":"The calling code should not rely on this method to ascertain exactly when the window has become idle.","pos":[311,412]}]}]},{"pos":[10741,10864],"content":"The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <xref:System.Int32>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <xref:System.Int32>.","pos":[0,123],"nodes":[{"content":"The amount of time, in milliseconds, to wait for the associated process to become idle.","pos":[0,87]},{"content":"The maximum is &lt;xref:System.Int32&gt;.","pos":[88,123],"source":" The maximum is <xref:System.Int32>."}]}]},{"pos":[10923,11113],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the window has entered the idle state; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the timeout occurred.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window has entered the idle state; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the timeout occurred."},{"pos":[11323,11374],"content":"When the parameter passed in is not a valid number.","needQuote":true,"needEscape":true,"nodes":[{"content":"When the parameter passed in is not a valid number.","pos":[0,51]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Automation.Provider.IWindowProvider\n  id: IWindowProvider\n  children:\n  - System.Windows.Automation.Provider.IWindowProvider.Close\n  - System.Windows.Automation.Provider.IWindowProvider.InteractionState\n  - System.Windows.Automation.Provider.IWindowProvider.IsModal\n  - System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n  - System.Windows.Automation.Provider.IWindowProvider.Maximizable\n  - System.Windows.Automation.Provider.IWindowProvider.Minimizable\n  - System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)\n  - System.Windows.Automation.Provider.IWindowProvider.VisualState\n  - System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)\n  langs:\n  - csharp\n  name: IWindowProvider\n  nameWithType: IWindowProvider\n  fullName: System.Windows.Automation.Provider.IWindowProvider\n  type: Interface\n  summary: Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional [!INCLUDE[TLA#tla_gui](~/add/includes/ajax-current-ext-md.md)].\n  remarks: Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      [System.Runtime.InteropServices.Guid(\"987df77b-db06-4d77-8f8a-86a9c3bb90b9\")]\n\n      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]\n\n      public interface IWindowProvider\n  implements: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.Close\n  id: Close\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: IWindowProvider.Close()\n  fullName: System.Windows.Automation.Provider.IWindowProvider.Close()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Attempts to close the window.\n  remarks: \"Close must return immediately without blocking.  \\n  \\n Close raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event. If possible, the event should be raised after the control has completed its associated action.  \\n  \\n When called on a split pane control, this method will close the pane and remove the associated split. This method might also close all other panes, depending on implementation.\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Windows.Automation.Provider.IWindowProvider.Close*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: When the control is unable to perform the requested action.\n  - type: System.Windows.Automation.ElementNotAvailableException\n    commentId: T:System.Windows.Automation.ElementNotAvailableException\n    description: When the target element is no longer available (for example, the window has closed).\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState\n  id: InteractionState\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: InteractionState\n  nameWithType: IWindowProvider.InteractionState\n  fullName: System.Windows.Automation.Provider.IWindowProvider.InteractionState\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets the interaction state of the window.\n  syntax:\n    content: public System.Windows.Automation.WindowInteractionState InteractionState { get; }\n    return:\n      type: System.Windows.Automation.WindowInteractionState\n      description: The <xref href=\"System.Windows.Automation.WindowInteractionState\"></xref> of the control.\n  overload: System.Windows.Automation.Provider.IWindowProvider.InteractionState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal\n  id: IsModal\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: IsModal\n  nameWithType: IWindowProvider.IsModal\n  fullName: System.Windows.Automation.Provider.IWindowProvider.IsModal\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets a value that specifies whether the window is modal.\n  syntax:\n    content: public bool IsModal { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window is modal; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Automation.Provider.IWindowProvider.IsModal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n  id: IsTopmost\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: IsTopmost\n  nameWithType: IWindowProvider.IsTopmost\n  fullName: System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets a value that specifies whether the window is the topmost element in the z-order.\n  syntax:\n    content: public bool IsTopmost { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window is topmost; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Automation.Provider.IWindowProvider.IsTopmost*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable\n  id: Maximizable\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: Maximizable\n  nameWithType: IWindowProvider.Maximizable\n  fullName: System.Windows.Automation.Provider.IWindowProvider.Maximizable\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets a value that specifies whether the window can be maximized.\n  syntax:\n    content: public bool Maximizable { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window can be maximized; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Automation.Provider.IWindowProvider.Maximizable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable\n  id: Minimizable\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: Minimizable\n  nameWithType: IWindowProvider.Minimizable\n  fullName: System.Windows.Automation.Provider.IWindowProvider.Minimizable\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets a value that specifies whether the window can be minimized.\n  syntax:\n    content: public bool Minimizable { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window can be minimized; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Automation.Provider.IWindowProvider.Minimizable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)\n  id: SetVisualState(System.Windows.Automation.WindowVisualState)\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: SetVisualState(WindowVisualState)\n  nameWithType: IWindowProvider.SetVisualState(WindowVisualState)\n  fullName: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(WindowVisualState)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Changes the visual state of the window. For example, minimizes or maximizes it.\n  syntax:\n    content: public void SetVisualState (System.Windows.Automation.WindowVisualState state);\n    parameters:\n    - id: state\n      type: System.Windows.Automation.WindowVisualState\n      description: The requested visual state of the window.\n  overload: System.Windows.Automation.Provider.IWindowProvider.SetVisualState*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: When the control does not support the requested behavior.\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState\n  id: VisualState\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: VisualState\n  nameWithType: IWindowProvider.VisualState\n  fullName: System.Windows.Automation.Provider.IWindowProvider.VisualState\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets the visual state of the window.\n  syntax:\n    content: public System.Windows.Automation.WindowVisualState VisualState { get; }\n    return:\n      type: System.Windows.Automation.WindowVisualState\n      description: The visual state of the window.\n  overload: System.Windows.Automation.Provider.IWindowProvider.VisualState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)\n  id: WaitForInputIdle(System.Int32)\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: WaitForInputIdle(Int32)\n  nameWithType: IWindowProvider.WaitForInputIdle(Int32)\n  fullName: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(Int32)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.\n  remarks: \"This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.  \\n  \\n The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input. The calling code should not rely on this method to ascertain exactly when the window has become idle.\"\n  syntax:\n    content: public bool WaitForInputIdle (int milliseconds);\n    parameters:\n    - id: milliseconds\n      type: System.Int32\n      description: The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <xref:System.Int32>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the window has entered the idle state; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the timeout occurred.\n  overload: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: When the parameter passed in is not a valid number.\n  platform:\n  - net462\nreferences:\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.Automation.ElementNotAvailableException\n  parent: System.Windows.Automation\n  isExternal: false\n  name: ElementNotAvailableException\n  nameWithType: ElementNotAvailableException\n  fullName: System.Windows.Automation.ElementNotAvailableException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Windows.Automation.Provider.IWindowProvider.Close\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Close()\n  nameWithType: IWindowProvider.Close()\n  fullName: System.Windows.Automation.Provider.IWindowProvider.Close()\n- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: InteractionState\n  nameWithType: IWindowProvider.InteractionState\n  fullName: System.Windows.Automation.Provider.IWindowProvider.InteractionState\n- uid: System.Windows.Automation.WindowInteractionState\n  parent: System.Windows.Automation\n  isExternal: false\n  name: WindowInteractionState\n  nameWithType: WindowInteractionState\n  fullName: System.Windows.Automation.WindowInteractionState\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: IsModal\n  nameWithType: IWindowProvider.IsModal\n  fullName: System.Windows.Automation.Provider.IWindowProvider.IsModal\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: IsTopmost\n  nameWithType: IWindowProvider.IsTopmost\n  fullName: System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Maximizable\n  nameWithType: IWindowProvider.Maximizable\n  fullName: System.Windows.Automation.Provider.IWindowProvider.Maximizable\n- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Minimizable\n  nameWithType: IWindowProvider.Minimizable\n  fullName: System.Windows.Automation.Provider.IWindowProvider.Minimizable\n- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: SetVisualState(WindowVisualState)\n  nameWithType: IWindowProvider.SetVisualState(WindowVisualState)\n  fullName: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(WindowVisualState)\n- uid: System.Windows.Automation.WindowVisualState\n  parent: System.Windows.Automation\n  isExternal: false\n  name: WindowVisualState\n  nameWithType: WindowVisualState\n  fullName: System.Windows.Automation.WindowVisualState\n- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: VisualState\n  nameWithType: IWindowProvider.VisualState\n  fullName: System.Windows.Automation.Provider.IWindowProvider.VisualState\n- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: WaitForInputIdle(Int32)\n  nameWithType: IWindowProvider.WaitForInputIdle(Int32)\n  fullName: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Automation.Provider.IWindowProvider.Close*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Close\n  nameWithType: IWindowProvider.Close\n- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: InteractionState\n  nameWithType: IWindowProvider.InteractionState\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: IsModal\n  nameWithType: IWindowProvider.IsModal\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: IsTopmost\n  nameWithType: IWindowProvider.IsTopmost\n- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Maximizable\n  nameWithType: IWindowProvider.Maximizable\n- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Minimizable\n  nameWithType: IWindowProvider.Minimizable\n- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: SetVisualState\n  nameWithType: IWindowProvider.SetVisualState\n- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: VisualState\n  nameWithType: IWindowProvider.VisualState\n- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: WaitForInputIdle\n  nameWithType: IWindowProvider.WaitForInputIdle\n"}