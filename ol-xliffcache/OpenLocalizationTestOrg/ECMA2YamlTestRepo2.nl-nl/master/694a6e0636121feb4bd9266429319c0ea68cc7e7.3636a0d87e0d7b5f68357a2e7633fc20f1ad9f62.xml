{"nodes":[{"pos":[589,625],"content":"Contains the raw data for a counter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains the raw data for a counter.","pos":[0,36]}]},{"pos":[638,879],"content":"The <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName> property returns an instance of this class.       This class provides thread-safe methods for reading and writing counter data.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName> property returns an instance of this class.       This class provides thread-safe methods for reading and writing counter data.","pos":[0,239],"nodes":[{"content":"The &lt;xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName&gt; property returns an instance of this class.","pos":[0,155],"source":"The <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName> property returns an instance of this class."},{"content":"This class provides thread-safe methods for reading and writing counter data.","pos":[162,239]}]}]},{"pos":[1424,1458],"content":"Decrements the counter value by 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decrements the counter value by 1.","pos":[0,34]}]},{"pos":[1471,1863],"content":"This method safely decrements the counter value for multi-threaded applications.       To decrement the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method and set the `value` parameter to a negative number.       To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method safely decrements the counter value for multi-threaded applications.","pos":[0,80]},{"content":"To decrement the counter value by a specific value, call the &lt;xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A&gt; method and set the <ph id=\"ph1\">`value`</ph> parameter to a negative number.","pos":[87,275],"source":"       To decrement the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method and set the `value` parameter to a negative number."},{"content":"To set the counter value, use the &lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt; property.","pos":[282,388],"source":"       To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property."}]},{"pos":[2435,2469],"content":"Increments the counter value by 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"Increments the counter value by 1.","pos":[0,34]}]},{"pos":[2482,2823],"content":"This method safely increments the counter value for multi-threaded applications.       To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.       To increment the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method safely increments the counter value for multi-threaded applications.       To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.       To increment the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.","pos":[0,337],"nodes":[{"content":"This method safely increments the counter value for multi-threaded applications.","pos":[0,80]},{"content":"To set the counter value, use the &lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt; property.","pos":[87,193],"source":"       To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property."},{"content":"To increment the counter value by a specific value, call the &lt;xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A&gt; method.","pos":[200,337],"source":"       To increment the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method."}]}]},{"pos":[3448,3501],"content":"Increments the counter value by the specified amount.","needQuote":true,"needEscape":true,"nodes":[{"content":"Increments the counter value by the specified amount.","pos":[0,53]}]},{"pos":[3514,3838],"content":"This method safely increments the counter value for multi-threaded applications.       To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.       To increment the counter value by 1, call the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method safely increments the counter value for multi-threaded applications.       To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.       To increment the counter value by 1, call the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> method.","pos":[0,320],"nodes":[{"content":"This method safely increments the counter value for multi-threaded applications.","pos":[0,80]},{"content":"To set the counter value, use the &lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt; property.","pos":[87,193],"source":"       To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property."},{"content":"To increment the counter value by 1, call the &lt;xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A&gt; method.","pos":[200,320],"source":"       To increment the counter value by 1, call the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> method."}]}]},{"pos":[3977,4077],"content":"The amount by which to increment the counter value. The increment value can be positive or negative.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount by which to increment the counter value. The increment value can be positive or negative.","pos":[0,100],"nodes":[{"content":"The amount by which to increment the counter value.","pos":[0,51]},{"content":"The increment value can be positive or negative.","pos":[52,100]}]}]},{"pos":[4573,4607],"content":"Sets or gets the raw counter data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets or gets the raw counter data.","pos":[0,34]}]},{"pos":[4619,4831],"content":"This property is not thread safe and is appropriate only for single-threaded access. For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is not thread safe and is appropriate only for single-threaded access. For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","pos":[0,212],"nodes":[{"content":"This property is not thread safe and is appropriate only for single-threaded access.","pos":[0,84]},{"content":"For multi-threaded access to the counter data, use the &lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt; property.","pos":[85,212],"source":" For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property."}]}]},{"pos":[4946,4967],"content":"The raw counter data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The raw counter data.","pos":[0,21]}]},{"pos":[5445,5475],"content":"Sets or gets the counter data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets or gets the counter data.","pos":[0,30]}]},{"pos":[5488,6090],"content":"This property provides safe access to the counter data for multi-threaded applications. If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe.       Note that the Value property is not thread safe in .NET Framework 3.5.       To increment the counter value, consider using the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> or <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property provides safe access to the counter data for multi-threaded applications. If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe.       Note that the Value property is not thread safe in .NET Framework 3.5.       To increment the counter value, consider using the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> or <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.","pos":[0,598],"nodes":[{"content":"This property provides safe access to the counter data for multi-threaded applications.","pos":[0,87]},{"content":"If performance is of primary concern, use the &lt;xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A&gt; property; however, the &lt;xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A&gt; property is not thread safe.","pos":[88,317],"source":" If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe."},{"content":"Note that the Value property is not thread safe in .NET Framework 3.5.","pos":[324,394]},{"content":"To increment the counter value, consider using the &lt;xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A&gt; or &lt;xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A&gt; method.","pos":[401,598],"source":"       To increment the counter value, consider using the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> or <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method."}]}]},{"pos":[6281,6298],"content":"The counter data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The counter data.","pos":[0,17]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.PerformanceData.CounterData\n  id: CounterData\n  children:\n  - System.Diagnostics.PerformanceData.CounterData.Decrement\n  - System.Diagnostics.PerformanceData.CounterData.Increment\n  - System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)\n  - System.Diagnostics.PerformanceData.CounterData.RawValue\n  - System.Diagnostics.PerformanceData.CounterData.Value\n  langs:\n  - csharp\n  name: CounterData\n  nameWithType: CounterData\n  fullName: System.Diagnostics.PerformanceData.CounterData\n  type: Class\n  summary: Contains the raw data for a counter.\n  remarks: \"The <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName> property returns an instance of this class.  \\n  \\n This class provides thread-safe methods for reading and writing counter data.\"\n  syntax:\n    content: public sealed class CounterData\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterData.Decrement\n  id: Decrement\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: Decrement()\n  nameWithType: CounterData.Decrement()\n  fullName: System.Diagnostics.PerformanceData.CounterData.Decrement()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Decrements the counter value by 1.\n  remarks: \"This method safely decrements the counter value for multi-threaded applications.  \\n  \\n To decrement the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method and set the `value` parameter to a negative number.  \\n  \\n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.\"\n  syntax:\n    content: public void Decrement ();\n    parameters: []\n  overload: System.Diagnostics.PerformanceData.CounterData.Decrement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterData.Increment\n  id: Increment\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: Increment()\n  nameWithType: CounterData.Increment()\n  fullName: System.Diagnostics.PerformanceData.CounterData.Increment()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Increments the counter value by 1.\n  remarks: \"This method safely increments the counter value for multi-threaded applications.  \\n  \\n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.  \\n  \\n To increment the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.\"\n  syntax:\n    content: public void Increment ();\n    parameters: []\n  overload: System.Diagnostics.PerformanceData.CounterData.Increment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)\n  id: IncrementBy(System.Int64)\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: IncrementBy(Int64)\n  nameWithType: CounterData.IncrementBy(Int64)\n  fullName: System.Diagnostics.PerformanceData.CounterData.IncrementBy(Int64)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Increments the counter value by the specified amount.\n  remarks: \"This method safely increments the counter value for multi-threaded applications.  \\n  \\n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.  \\n  \\n To increment the counter value by 1, call the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> method.\"\n  syntax:\n    content: public void IncrementBy (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The amount by which to increment the counter value. The increment value can be positive or negative.\n  overload: System.Diagnostics.PerformanceData.CounterData.IncrementBy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterData.RawValue\n  id: RawValue\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: RawValue\n  nameWithType: CounterData.RawValue\n  fullName: System.Diagnostics.PerformanceData.CounterData.RawValue\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Sets or gets the raw counter data.\n  remarks: This property is not thread safe and is appropriate only for single-threaded access. For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.\n  syntax:\n    content: public long RawValue { get; set; }\n    return:\n      type: System.Int64\n      description: The raw counter data.\n  overload: System.Diagnostics.PerformanceData.CounterData.RawValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.PerformanceData.CounterData.Value\n  id: Value\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: Value\n  nameWithType: CounterData.Value\n  fullName: System.Diagnostics.PerformanceData.CounterData.Value\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Sets or gets the counter data.\n  remarks: \"This property provides safe access to the counter data for multi-threaded applications. If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe.  \\n  \\n Note that the Value property is not thread safe in .NET Framework 3.5.  \\n  \\n To increment the counter value, consider using the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> or <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.\"\n  example:\n  - For an example, see <xref:System.Diagnostics.PerformanceData>.\n  syntax:\n    content: public long Value { get; set; }\n    return:\n      type: System.Int64\n      description: The counter data.\n  overload: System.Diagnostics.PerformanceData.CounterData.Value*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Diagnostics.PerformanceData.CounterData.Decrement\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Decrement()\n  nameWithType: CounterData.Decrement()\n  fullName: System.Diagnostics.PerformanceData.CounterData.Decrement()\n- uid: System.Diagnostics.PerformanceData.CounterData.Increment\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Increment()\n  nameWithType: CounterData.Increment()\n  fullName: System.Diagnostics.PerformanceData.CounterData.Increment()\n- uid: System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: IncrementBy(Int64)\n  nameWithType: CounterData.IncrementBy(Int64)\n  fullName: System.Diagnostics.PerformanceData.CounterData.IncrementBy(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.PerformanceData.CounterData.RawValue\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: RawValue\n  nameWithType: CounterData.RawValue\n  fullName: System.Diagnostics.PerformanceData.CounterData.RawValue\n- uid: System.Diagnostics.PerformanceData.CounterData.Value\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Value\n  nameWithType: CounterData.Value\n  fullName: System.Diagnostics.PerformanceData.CounterData.Value\n- uid: System.Diagnostics.PerformanceData.CounterData.Decrement*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Decrement\n  nameWithType: CounterData.Decrement\n- uid: System.Diagnostics.PerformanceData.CounterData.Increment*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Increment\n  nameWithType: CounterData.Increment\n- uid: System.Diagnostics.PerformanceData.CounterData.IncrementBy*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: IncrementBy\n  nameWithType: CounterData.IncrementBy\n- uid: System.Diagnostics.PerformanceData.CounterData.RawValue*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: RawValue\n  nameWithType: CounterData.RawValue\n- uid: System.Diagnostics.PerformanceData.CounterData.Value*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Value\n  nameWithType: CounterData.Value\n"}