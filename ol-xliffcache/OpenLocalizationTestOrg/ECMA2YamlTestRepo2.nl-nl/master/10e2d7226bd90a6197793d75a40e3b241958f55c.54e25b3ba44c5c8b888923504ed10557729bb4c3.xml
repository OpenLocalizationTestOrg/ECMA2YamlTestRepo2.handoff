{"nodes":[{"pos":[842,941],"content":"Represents the base class from which all implementations of asymmetric signature formatters derive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the base class from which all implementations of asymmetric signature formatters derive.","pos":[0,99]}]},{"pos":[953,1121],"content":"Asymmetric signature formatters create digital signatures that are verified using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Asymmetric signature formatters create digital signatures that are verified using implementations of &lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter&gt;.","pos":[0,168],"source":"Asymmetric signature formatters create digital signatures that are verified using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter>."}]},{"pos":[1847,1956],"content":"Initializes a new instance of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref>."},{"pos":[1969,2434],"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.       Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.       Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","pos":[0,463],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code will create a new instance of a derived class.","pos":[52,115]},{"content":"Use implementations of &lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A&gt; and &lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A&gt; to set the key and hash algorithm before calling an implementation of &lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A&gt;.","pos":[122,463],"source":"       Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>."}]}]},{"pos":[3149,3230],"content":"When overridden in a derived class, creates the signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, creates the signature for the specified data.","pos":[0,81]}]},{"pos":[3242,3313],"content":"You must specify a key and a hash algorithm before calling this method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must specify a key and a hash algorithm before calling this method.","pos":[0,71]}]},{"pos":[3473,3495],"content":"The data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to be signed.","pos":[0,22]}]},{"pos":[3553,3614],"content":"The digital signature for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"The digital signature for the <code>rgbHash</code> parameter."},{"pos":[4332,4384],"content":"Creates the signature from the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates the signature from the specified hash value.","pos":[0,52]}]},{"pos":[4396,4505],"content":"This method sets the hash algorithm to be used, then returns the signature of the input hash algorithm value.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method sets the hash algorithm to be used, then returns the signature of the input hash algorithm value.","pos":[0,109]}]},{"pos":[4723,4773],"content":"The hash algorithm to use to create the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to create the signature.","pos":[0,50]}]},{"pos":[4831,4874],"content":"The signature for the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature for the specified hash value.","pos":[0,43]}]},{"pos":[5078,5174],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>hash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5714,5808],"content":"When overridden in a derived class, sets the hash algorithm to use for creating the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, sets the hash algorithm to use for creating the signature.","pos":[0,94]}]},{"pos":[5820,5970],"content":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must set a hash algorithm before calling an implementation of &lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A&gt;.","pos":[0,150],"source":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>."}]},{"pos":[6129,6194],"content":"The name of the hash algorithm to use for creating the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the hash algorithm to use for creating the signature.","pos":[0,65]}]},{"pos":[6898,6995],"content":"When overridden in a derived class, sets the asymmetric algorithm to use to create the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, sets the asymmetric algorithm to use to create the signature.","pos":[0,97]}]},{"pos":[7007,7146],"content":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must set a key before calling an implementation of &lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A&gt;.","pos":[0,139],"source":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>."}]},{"pos":[7364,7503],"content":"The instance of the implementation of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use to create the signature.","needQuote":true,"needEscape":true,"source":"The instance of the implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> to use to create the signature."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter\n  id: AsymmetricSignatureFormatter\n  children:\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  langs:\n  - csharp\n  name: AsymmetricSignatureFormatter\n  nameWithType: AsymmetricSignatureFormatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter\n  type: Class\n  summary: Represents the base class from which all implementations of asymmetric signature formatters derive.\n  remarks: Asymmetric signature formatters create digital signatures that are verified using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class AsymmetricSignatureFormatter\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: AsymmetricSignatureFormatter()\n  nameWithType: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter()\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.AsymmetricSignatureFormatter()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureFormatter\"></xref>.\n  remarks: \"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \\n  \\n Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.\"\n  syntax:\n    content: protected AsymmetricSignatureFormatter ();\n    parameters: []\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, creates the signature for the specified data.\n  remarks: You must specify a key and a hash algorithm before calling this method.\n  syntax:\n    content: public abstract byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data to be signed.\n    return:\n      type: System.Byte[]\n      description: The digital signature for the <code>rgbHash</code> parameter.\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  id: CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: CreateSignature(HashAlgorithm)\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates the signature from the specified hash value.\n  remarks: This method sets the hash algorithm to be used, then returns the signature of the input hash algorithm value.\n  syntax:\n    content: public virtual byte[] CreateSignature (System.Security.Cryptography.HashAlgorithm hash);\n    parameters:\n    - id: hash\n      type: System.Security.Cryptography.HashAlgorithm\n      description: The hash algorithm to use to create the signature.\n    return:\n      type: System.Byte[]\n      description: The signature for the specified hash value.\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hash</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)\n  id: SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: SetHashAlgorithm(String)\n  nameWithType: AsymmetricSignatureFormatter.SetHashAlgorithm(String)\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, sets the hash algorithm to use for creating the signature.\n  remarks: You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.\n  syntax:\n    content: public abstract void SetHashAlgorithm (string strName);\n    parameters:\n    - id: strName\n      type: System.String\n      description: The name of the hash algorithm to use for creating the signature.\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  langs:\n  - csharp\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: AsymmetricSignatureFormatter.SetKey(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(AsymmetricAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, sets the asymmetric algorithm to use to create the signature.\n  remarks: You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A>.\n  syntax:\n    content: public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: The instance of the implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> to use to create the signature.\n  overload: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: AsymmetricSignatureFormatter()\n  nameWithType: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter()\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.AsymmetricSignatureFormatter()\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: CreateSignature(HashAlgorithm)\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: SetHashAlgorithm(String)\n  nameWithType: AsymmetricSignatureFormatter.SetHashAlgorithm(String)\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: AsymmetricSignatureFormatter.SetKey(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(AsymmetricAlgorithm)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor*\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: AsymmetricSignatureFormatter\n  nameWithType: AsymmetricSignatureFormatter.AsymmetricSignatureFormatter\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature*\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: CreateSignature\n  nameWithType: AsymmetricSignatureFormatter.CreateSignature\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm*\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: SetHashAlgorithm\n  nameWithType: AsymmetricSignatureFormatter.SetHashAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey*\n  parent: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: SetKey\n  nameWithType: AsymmetricSignatureFormatter.SetKey\n"}