{"nodes":[{"pos":[4598,4610],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5335,5347],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6120,6132],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7434,7446],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7505,7517],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8219,8231],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8290,8302],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9061,9073],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9148,9160],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9235,9247],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10022,10034],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10091,10103],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10970,10982],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11054,11066],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11123,11135],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11841,11853],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12605,12617],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12674,12686],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13380,13392],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13449,13461],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14151,14163],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14236,14248],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14937,14949],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15022,15034],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15652,15664],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16407,16419],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17088,17100],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17802,17814],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18663,18675],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18739,18751],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19547,19559],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19616,19628],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20458,20470],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21204,21216],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.Control.ControlCollection\n  id: Control.ControlCollection\n  children:\n  - System.Windows.Forms.Control.ControlCollection.#ctor(System.Windows.Forms.Control)\n  - System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)\n  - System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])\n  - System.Windows.Forms.Control.ControlCollection.Clear\n  - System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)\n  - System.Windows.Forms.Control.ControlCollection.ContainsKey(System.String)\n  - System.Windows.Forms.Control.ControlCollection.Find(System.String,System.Boolean)\n  - System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control)\n  - System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control,System.Boolean)\n  - System.Windows.Forms.Control.ControlCollection.GetEnumerator\n  - System.Windows.Forms.Control.ControlCollection.IndexOf(System.Windows.Forms.Control)\n  - System.Windows.Forms.Control.ControlCollection.IndexOfKey(System.String)\n  - System.Windows.Forms.Control.ControlCollection.Item(System.Int32)\n  - System.Windows.Forms.Control.ControlCollection.Item(System.String)\n  - System.Windows.Forms.Control.ControlCollection.Owner\n  - System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)\n  - System.Windows.Forms.Control.ControlCollection.RemoveAt(System.Int32)\n  - System.Windows.Forms.Control.ControlCollection.RemoveByKey(System.String)\n  - System.Windows.Forms.Control.ControlCollection.SetChildIndex(System.Windows.Forms.Control,System.Int32)\n  - System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Add(System.Object)\n  - System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Remove(System.Object)\n  - System.Windows.Forms.Control.ControlCollection.System#ICloneable#Clone\n  langs:\n  - csharp\n  name: Control+ControlCollection\n  nameWithType: Control+ControlCollection\n  fullName: System.Windows.Forms.Control+ControlCollection\n  type: Class\n  syntax:\n    content: >-\n      [System.ComponentModel.ListBindable(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class Control.ControlCollection : System.Windows.Forms.Layout.ArrangedElementCollection, ICloneable, System.Collections.IList\n  inheritance:\n  - System.Object\n  - System.Windows.Forms.Layout.ArrangedElementCollection\n  implements:\n  - System.Collections.IList\n  - System.ICloneable\n  inheritedMembers:\n  - System.Windows.Forms.Layout.ArrangedElementCollection.CopyTo(System.Array,System.Int32)\n  - System.Windows.Forms.Layout.ArrangedElementCollection.Count\n  - System.Windows.Forms.Layout.ArrangedElementCollection.Equals(System.Object)\n  - System.Windows.Forms.Layout.ArrangedElementCollection.GetHashCode\n  - System.Windows.Forms.Layout.ArrangedElementCollection.IsReadOnly\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#ICollection#IsSynchronized\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#ICollection#SyncRoot\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#IList#Clear\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#IList#Contains(System.Object)\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#IList#IsFixedSize\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#IList#Item(System.Int32)\n  - System.Windows.Forms.Layout.ArrangedElementCollection.System#Collections#IList#RemoveAt(System.Int32)\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.#ctor(System.Windows.Forms.Control)\n  id: '#ctor(System.Windows.Forms.Control)'\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Control+ControlCollection(Control)\n  nameWithType: Control+ControlCollection.Control+ControlCollection(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.Control+ControlCollection(Control)\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public ControlCollection (System.Windows.Forms.Control owner);\n    parameters:\n    - id: owner\n      type: System.Windows.Forms.Control\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)\n  id: Add(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Add(Control)\n  nameWithType: Control+ControlCollection.Add(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.Add(Control)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual void Add (System.Windows.Forms.Control value);\n    parameters:\n    - id: value\n      type: System.Windows.Forms.Control\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])\n  id: AddRange(System.Windows.Forms.Control[])\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: AddRange(Control[])\n  nameWithType: Control+ControlCollection.AddRange(Control[])\n  fullName: System.Windows.Forms.Control+ControlCollection.AddRange(Control[])\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual void AddRange (System.Windows.Forms.Control[] controls);\n    parameters:\n    - id: controls\n      type: System.Windows.Forms.Control[]\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.AddRange*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.Clear\n  id: Clear\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: Control+ControlCollection.Clear()\n  fullName: System.Windows.Forms.Control+ControlCollection.Clear()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual void Clear ();\n    parameters: []\n  overload: System.Windows.Forms.Control.ControlCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)\n  id: Contains(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Contains(Control)\n  nameWithType: Control+ControlCollection.Contains(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.Contains(Control)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public bool Contains (System.Windows.Forms.Control control);\n    parameters:\n    - id: control\n      type: System.Windows.Forms.Control\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.ContainsKey(System.String)\n  id: ContainsKey(System.String)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: ContainsKey(String)\n  nameWithType: Control+ControlCollection.ContainsKey(String)\n  fullName: System.Windows.Forms.Control+ControlCollection.ContainsKey(String)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual bool ContainsKey (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.ContainsKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.Find(System.String,System.Boolean)\n  id: Find(System.String,System.Boolean)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Find(String,Boolean)\n  nameWithType: Control+ControlCollection.Find(String,Boolean)\n  fullName: System.Windows.Forms.Control+ControlCollection.Find(String,Boolean)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public System.Windows.Forms.Control[] Find (string key, bool searchAllChildren);\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    - id: searchAllChildren\n      type: System.Boolean\n      description: To be added.\n    return:\n      type: System.Windows.Forms.Control[]\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.Find*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control)\n  id: GetChildIndex(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: GetChildIndex(Control)\n  nameWithType: Control+ControlCollection.GetChildIndex(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.GetChildIndex(Control)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public int GetChildIndex (System.Windows.Forms.Control child);\n    parameters:\n    - id: child\n      type: System.Windows.Forms.Control\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.GetChildIndex*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control,System.Boolean)\n  id: GetChildIndex(System.Windows.Forms.Control,System.Boolean)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: GetChildIndex(Control,Boolean)\n  nameWithType: Control+ControlCollection.GetChildIndex(Control,Boolean)\n  fullName: System.Windows.Forms.Control+ControlCollection.GetChildIndex(Control,Boolean)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual int GetChildIndex (System.Windows.Forms.Control child, bool throwException);\n    parameters:\n    - id: child\n      type: System.Windows.Forms.Control\n      description: To be added.\n    - id: throwException\n      type: System.Boolean\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.GetChildIndex*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Control+ControlCollection.GetEnumerator()\n  fullName: System.Windows.Forms.Control+ControlCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public override System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.IndexOf(System.Windows.Forms.Control)\n  id: IndexOf(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: IndexOf(Control)\n  nameWithType: Control+ControlCollection.IndexOf(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.IndexOf(Control)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public int IndexOf (System.Windows.Forms.Control control);\n    parameters:\n    - id: control\n      type: System.Windows.Forms.Control\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.IndexOfKey(System.String)\n  id: IndexOfKey(System.String)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: IndexOfKey(String)\n  nameWithType: Control+ControlCollection.IndexOfKey(String)\n  fullName: System.Windows.Forms.Control+ControlCollection.IndexOfKey(String)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual int IndexOfKey (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.IndexOfKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: Control+ControlCollection.Item(Int32)\n  fullName: System.Windows.Forms.Control+ControlCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual System.Windows.Forms.Control this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Windows.Forms.Control\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: Control+ControlCollection.Item(String)\n  fullName: System.Windows.Forms.Control+ControlCollection.Item(String)\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual System.Windows.Forms.Control this[string key] { get; }\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    return:\n      type: System.Windows.Forms.Control\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.Owner\n  id: Owner\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: Control+ControlCollection.Owner\n  fullName: System.Windows.Forms.Control+ControlCollection.Owner\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public System.Windows.Forms.Control Owner { get; }\n    return:\n      type: System.Windows.Forms.Control\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.Owner*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)\n  id: Remove(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: Remove(Control)\n  nameWithType: Control+ControlCollection.Remove(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.Remove(Control)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual void Remove (System.Windows.Forms.Control value);\n    parameters:\n    - id: value\n      type: System.Windows.Forms.Control\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: Control+ControlCollection.RemoveAt(Int32)\n  fullName: System.Windows.Forms.Control+ControlCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.RemoveByKey(System.String)\n  id: RemoveByKey(System.String)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: RemoveByKey(String)\n  nameWithType: Control+ControlCollection.RemoveByKey(String)\n  fullName: System.Windows.Forms.Control+ControlCollection.RemoveByKey(String)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual void RemoveByKey (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.RemoveByKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.SetChildIndex(System.Windows.Forms.Control,System.Int32)\n  id: SetChildIndex(System.Windows.Forms.Control,System.Int32)\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: SetChildIndex(Control,Int32)\n  nameWithType: Control+ControlCollection.SetChildIndex(Control,Int32)\n  fullName: System.Windows.Forms.Control+ControlCollection.SetChildIndex(Control,Int32)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: public virtual void SetChildIndex (System.Windows.Forms.Control child, int newIndex);\n    parameters:\n    - id: child\n      type: System.Windows.Forms.Control\n      description: To be added.\n    - id: newIndex\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.SetChildIndex*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: Control+ControlCollection.System.Collections.IList.Add(Object)\n  fullName: System.Windows.Forms.Control+ControlCollection.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: int IList.Add (object control);\n    parameters:\n    - id: control\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: Control+ControlCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Windows.Forms.Control+ControlCollection.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: void IList.Remove (object control);\n    parameters:\n    - id: control\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Control.ControlCollection.System#ICloneable#Clone\n  id: System#ICloneable#Clone\n  isEii: true\n  parent: System.Windows.Forms.Control.ControlCollection\n  langs:\n  - csharp\n  name: System.ICloneable.Clone()\n  nameWithType: Control+ControlCollection.System.ICloneable.Clone()\n  fullName: System.Windows.Forms.Control+ControlCollection.System.ICloneable.Clone()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  syntax:\n    content: object ICloneable.Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.Forms.Control.ControlCollection.System#ICloneable#Clone*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Forms.Layout.ArrangedElementCollection\n  isExternal: false\n  name: System.Windows.Forms.Layout.ArrangedElementCollection\n- uid: System.Windows.Forms.Control.ControlCollection.#ctor(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Control+ControlCollection(Control)\n  nameWithType: Control+ControlCollection.Control+ControlCollection(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.Control+ControlCollection(Control)\n- uid: System.Windows.Forms.Control\n  parent: System.Windows.Forms\n  isExternal: false\n  name: Control\n  nameWithType: Control\n  fullName: System.Windows.Forms.Control\n- uid: System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Add(Control)\n  nameWithType: Control+ControlCollection.Add(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.Add(Control)\n- uid: System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: AddRange(Control[])\n  nameWithType: Control+ControlCollection.AddRange(Control[])\n  fullName: System.Windows.Forms.Control+ControlCollection.AddRange(Control[])\n- uid: System.Windows.Forms.Control[]\n  parent: System.Windows.Forms\n  isExternal: false\n  name: Control\n  nameWithType: Control\n  fullName: System.Windows.Forms.Control[]\n  spec.csharp:\n  - uid: System.Windows.Forms.Control\n    name: Control\n    nameWithType: Control\n    fullName: Control[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Forms.Control.ControlCollection.Clear\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: Control+ControlCollection.Clear()\n  fullName: System.Windows.Forms.Control+ControlCollection.Clear()\n- uid: System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Contains(Control)\n  nameWithType: Control+ControlCollection.Contains(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.Contains(Control)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Forms.Control.ControlCollection.ContainsKey(System.String)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: ContainsKey(String)\n  nameWithType: Control+ControlCollection.ContainsKey(String)\n  fullName: System.Windows.Forms.Control+ControlCollection.ContainsKey(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Forms.Control.ControlCollection.Find(System.String,System.Boolean)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Find(String,Boolean)\n  nameWithType: Control+ControlCollection.Find(String,Boolean)\n  fullName: System.Windows.Forms.Control+ControlCollection.Find(String,Boolean)\n- uid: System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: GetChildIndex(Control)\n  nameWithType: Control+ControlCollection.GetChildIndex(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.GetChildIndex(Control)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control,System.Boolean)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: GetChildIndex(Control,Boolean)\n  nameWithType: Control+ControlCollection.GetChildIndex(Control,Boolean)\n  fullName: System.Windows.Forms.Control+ControlCollection.GetChildIndex(Control,Boolean)\n- uid: System.Windows.Forms.Control.ControlCollection.GetEnumerator\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Control+ControlCollection.GetEnumerator()\n  fullName: System.Windows.Forms.Control+ControlCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Windows.Forms.Control.ControlCollection.IndexOf(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: IndexOf(Control)\n  nameWithType: Control+ControlCollection.IndexOf(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.IndexOf(Control)\n- uid: System.Windows.Forms.Control.ControlCollection.IndexOfKey(System.String)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: IndexOfKey(String)\n  nameWithType: Control+ControlCollection.IndexOfKey(String)\n  fullName: System.Windows.Forms.Control+ControlCollection.IndexOfKey(String)\n- uid: System.Windows.Forms.Control.ControlCollection.Item(System.Int32)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: Control+ControlCollection.Item(Int32)\n  fullName: System.Windows.Forms.Control+ControlCollection.Item(Int32)\n- uid: System.Windows.Forms.Control.ControlCollection.Item(System.String)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: Control+ControlCollection.Item(String)\n  fullName: System.Windows.Forms.Control+ControlCollection.Item(String)\n- uid: System.Windows.Forms.Control.ControlCollection.Owner\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Owner\n  nameWithType: Control+ControlCollection.Owner\n  fullName: System.Windows.Forms.Control+ControlCollection.Owner\n- uid: System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Remove(Control)\n  nameWithType: Control+ControlCollection.Remove(Control)\n  fullName: System.Windows.Forms.Control+ControlCollection.Remove(Control)\n- uid: System.Windows.Forms.Control.ControlCollection.RemoveAt(System.Int32)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: Control+ControlCollection.RemoveAt(Int32)\n  fullName: System.Windows.Forms.Control+ControlCollection.RemoveAt(Int32)\n- uid: System.Windows.Forms.Control.ControlCollection.RemoveByKey(System.String)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: RemoveByKey(String)\n  nameWithType: Control+ControlCollection.RemoveByKey(String)\n  fullName: System.Windows.Forms.Control+ControlCollection.RemoveByKey(String)\n- uid: System.Windows.Forms.Control.ControlCollection.SetChildIndex(System.Windows.Forms.Control,System.Int32)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: SetChildIndex(Control,Int32)\n  nameWithType: Control+ControlCollection.SetChildIndex(Control,Int32)\n  fullName: System.Windows.Forms.Control+ControlCollection.SetChildIndex(Control,Int32)\n- uid: System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Add(System.Object)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: Control+ControlCollection.System.Collections.IList.Add(Object)\n  fullName: System.Windows.Forms.Control+ControlCollection.System.Collections.IList.Add(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: Control+ControlCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Windows.Forms.Control+ControlCollection.System.Collections.IList.Remove(Object)\n- uid: System.Windows.Forms.Control.ControlCollection.System#ICloneable#Clone\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: System.ICloneable.Clone()\n  nameWithType: Control+ControlCollection.System.ICloneable.Clone()\n  fullName: System.Windows.Forms.Control+ControlCollection.System.ICloneable.Clone()\n- uid: System.Windows.Forms.Control.ControlCollection.#ctor*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Control+ControlCollection\n  nameWithType: Control+ControlCollection.Control+ControlCollection\n- uid: System.Windows.Forms.Control.ControlCollection.Add*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Add\n  nameWithType: Control+ControlCollection.Add\n- uid: System.Windows.Forms.Control.ControlCollection.AddRange*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: AddRange\n  nameWithType: Control+ControlCollection.AddRange\n- uid: System.Windows.Forms.Control.ControlCollection.Clear*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Clear\n  nameWithType: Control+ControlCollection.Clear\n- uid: System.Windows.Forms.Control.ControlCollection.Contains*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Contains\n  nameWithType: Control+ControlCollection.Contains\n- uid: System.Windows.Forms.Control.ControlCollection.ContainsKey*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: ContainsKey\n  nameWithType: Control+ControlCollection.ContainsKey\n- uid: System.Windows.Forms.Control.ControlCollection.Find*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Find\n  nameWithType: Control+ControlCollection.Find\n- uid: System.Windows.Forms.Control.ControlCollection.GetChildIndex*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: GetChildIndex\n  nameWithType: Control+ControlCollection.GetChildIndex\n- uid: System.Windows.Forms.Control.ControlCollection.GetEnumerator*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: Control+ControlCollection.GetEnumerator\n- uid: System.Windows.Forms.Control.ControlCollection.IndexOf*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: Control+ControlCollection.IndexOf\n- uid: System.Windows.Forms.Control.ControlCollection.IndexOfKey*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: IndexOfKey\n  nameWithType: Control+ControlCollection.IndexOfKey\n- uid: System.Windows.Forms.Control.ControlCollection.Item*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Item\n  nameWithType: Control+ControlCollection.Item\n- uid: System.Windows.Forms.Control.ControlCollection.Owner*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Owner\n  nameWithType: Control+ControlCollection.Owner\n- uid: System.Windows.Forms.Control.ControlCollection.Remove*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: Remove\n  nameWithType: Control+ControlCollection.Remove\n- uid: System.Windows.Forms.Control.ControlCollection.RemoveAt*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: Control+ControlCollection.RemoveAt\n- uid: System.Windows.Forms.Control.ControlCollection.RemoveByKey*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: RemoveByKey\n  nameWithType: Control+ControlCollection.RemoveByKey\n- uid: System.Windows.Forms.Control.ControlCollection.SetChildIndex*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: SetChildIndex\n  nameWithType: Control+ControlCollection.SetChildIndex\n- uid: System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Add*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: Control+ControlCollection.System.Collections.IList.Add\n- uid: System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Remove*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: Control+ControlCollection.System.Collections.IList.Remove\n- uid: System.Windows.Forms.Control.ControlCollection.System#ICloneable#Clone*\n  parent: System.Windows.Forms.Control.ControlCollection\n  isExternal: false\n  name: System.ICloneable.Clone\n  nameWithType: Control+ControlCollection.System.ICloneable.Clone\n"}