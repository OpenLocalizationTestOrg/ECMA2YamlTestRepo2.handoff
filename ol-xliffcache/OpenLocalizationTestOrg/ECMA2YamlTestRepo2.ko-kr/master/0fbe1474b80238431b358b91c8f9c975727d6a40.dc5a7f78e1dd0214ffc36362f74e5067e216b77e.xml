{"nodes":[{"pos":[1938,2037],"content":"Exposes SQL Server data that is stored with the FILESTREAM column attribute as a sequence of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Exposes SQL Server data that is stored with the FILESTREAM column attribute as a sequence of bytes.","pos":[0,99]}]},{"pos":[2050,3722],"content":"The SqlFileStream class is used to work with `varbinary(max)` data stored with the FILESTREAM attribute in a SQL Server 2008 database. You must install the .NET Framework 3.5 SP1 (or later) to use <xref:System.Data.SqlTypes.SqlFileStream> to work with FILESTREAM data.       Specifying the FILESTREAM attribute on a `varbinary(max)` column causes SQL Server to store the data in the local NTFS file system instead of in the database file. Transact-SQL statements provide data manipulation capabilities within the server, and Win32 file system interfaces provide streaming access to the data.      > [!NOTE] >  Individual files stored in a FILESTREAM column cannot be opened directly from the NTFS file system. Streaming FILESTREAM data works only in the context of a SQL Server transaction.       The SqlFileStream class is derived from the <xref:System.IO.Stream> class, which represents an abstraction of a sequence of bytes from some arbitrary data source such as a file or a block of memory. You can read from a FILESTREAM by transferring data from a stream into a data structure such as an array of bytes. You can write to a FILESTREAM by transferring the data from a data structure into a stream. You can also seek within the stream, which allows you to query and modify data at the current position within the stream.       For conceptual documentation and code examples, see [FILESTREAM Data](~/add/includes/ajax-current-ext-md.md).       For documentation about setting up and configuring FILESTREAM data on SQL Server,  see [Designing and Implementing FILESTREAM Storage](http://go.microsoft.com/fwlink/?LinkId=121499) in SQL Server 2008 Books Online.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SqlFileStream class is used to work with <ph id=\"ph1\">`varbinary(max)`</ph> data stored with the FILESTREAM attribute in a SQL Server 2008 database.","pos":[0,134],"source":"The SqlFileStream class is used to work with `varbinary(max)` data stored with the FILESTREAM attribute in a SQL Server 2008 database."},{"content":"You must install the .NET Framework 3.5 SP1 (or later) to use &lt;xref:System.Data.SqlTypes.SqlFileStream&gt; to work with FILESTREAM data.","pos":[135,268],"source":" You must install the .NET Framework 3.5 SP1 (or later) to use <xref:System.Data.SqlTypes.SqlFileStream> to work with FILESTREAM data."},{"content":"Specifying the FILESTREAM attribute on a <ph id=\"ph1\">`varbinary(max)`</ph> column causes SQL Server to store the data in the local NTFS file system instead of in the database file.","pos":[275,438],"source":"       Specifying the FILESTREAM attribute on a `varbinary(max)` column causes SQL Server to store the data in the local NTFS file system instead of in the database file."},{"content":"Transact-SQL statements provide data manipulation capabilities within the server, and Win32 file system interfaces provide streaming access to the data.","pos":[439,591]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Individual files stored in a FILESTREAM column cannot be opened directly from the NTFS file system.","pos":[597,709],"source":"      > [!NOTE] >  Individual files stored in a FILESTREAM column cannot be opened directly from the NTFS file system."},{"content":"Streaming FILESTREAM data works only in the context of a SQL Server transaction.","pos":[710,790]},{"content":"The SqlFileStream class is derived from the &lt;xref:System.IO.Stream&gt; class, which represents an abstraction of a sequence of bytes from some arbitrary data source such as a file or a block of memory.","pos":[797,995],"source":"       The SqlFileStream class is derived from the <xref:System.IO.Stream> class, which represents an abstraction of a sequence of bytes from some arbitrary data source such as a file or a block of memory."},{"content":"You can read from a FILESTREAM by transferring data from a stream into a data structure such as an array of bytes.","pos":[996,1110]},{"content":"You can write to a FILESTREAM by transferring the data from a data structure into a stream.","pos":[1111,1202]},{"content":"You can also seek within the stream, which allows you to query and modify data at the current position within the stream.","pos":[1203,1324]},{"content":"For conceptual documentation and code examples, see <bpt id=\"p1\">[</bpt>FILESTREAM Data<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1331,1440],"source":"       For conceptual documentation and code examples, see [FILESTREAM Data](~/add/includes/ajax-current-ext-md.md)."},{"content":"For documentation about setting up and configuring FILESTREAM data on SQL Server,  see <bpt id=\"p1\">[</bpt>Designing and Implementing FILESTREAM Storage<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=121499)</ept> in SQL Server 2008 Books Online.","pos":[1447,1661],"source":"       For documentation about setting up and configuring FILESTREAM data on SQL Server,  see [Designing and Implementing FILESTREAM Storage](http://go.microsoft.com/fwlink/?LinkId=121499) in SQL Server 2008 Books Online."}]},{"pos":[4428,4524],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlTypes.SqlFileStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> class."},{"pos":[4536,4639],"content":"If an exception is thrown, any open transactions should be rolled back. Otherwise, data loss can occur.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If an exception is thrown, any open transactions should be rolled back. Otherwise, data loss can occur.","pos":[0,103],"nodes":[{"content":"If an exception is thrown, any open transactions should be rolled back.","pos":[0,71]},{"content":"Otherwise, data loss can occur.","pos":[72,103]}]}]},{"pos":[4831,4980],"content":"The logical path to the file. The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The logical path to the file. The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.","pos":[0,149],"nodes":[{"content":"The logical path to the file.","pos":[0,29]},{"content":"The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.","pos":[30,149]}]}]},{"pos":[5055,5282],"content":"The transaction context for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object. Applications should return the byte array returned by calling the GET_FILESTREAM_TRANSACTION_CONTEXT method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction context for the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,118],"source":"The transaction context for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object."},{"content":"Applications should return the byte array returned by calling the GET_FILESTREAM_TRANSACTION_CONTEXT method.","pos":[119,227]}]},{"pos":[5353,6749],"content":"The access mode to use when opening the file. Supported <xref href=\"System.IO.FileAccess\"></xref> enumeration values are <xref href=\"System.IO.FileAccess\"></xref>, <xref href=\"System.IO.FileAccess\"></xref>, and <xref href=\"System.IO.FileAccess\"></xref>.       When using <xref uid=\"langword_csharp_FileAccess.Read\" name=\"FileAccess.Read\" href=\"\"></xref>, the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object can be used to read all of the existing data.       When using <xref uid=\"langword_csharp_FileAccess.Write\" name=\"FileAccess.Write\" href=\"\"></xref>, <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> points to a zero byte file. Existing data will be overwritten when the object is closed and the transaction is committed.       When using <xref uid=\"langword_csharp_FileAccess.ReadWrite\" name=\"FileAccess.ReadWrite\" href=\"\"></xref>, the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> points to a file which has all the existing data in it. The handle is positioned at the beginning of the file. You can use one of the <xref uid=\"langword_csharp_System.IO\" name=\"System.IO\" href=\"\"></xref><xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref> methods to move the handle position within the file to write or append new data.","needQuote":false,"needEscape":true,"nodes":[{"content":"The access mode to use when opening the file.","pos":[0,45]},{"content":"Supported <bpt id=\"p1\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values are <bpt id=\"p2\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, and <bpt id=\"p4\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[46,253],"source":" Supported <xref href=\"System.IO.FileAccess\"></xref> enumeration values are <xref href=\"System.IO.FileAccess\"></xref>, <xref href=\"System.IO.FileAccess\"></xref>, and <xref href=\"System.IO.FileAccess\"></xref>."},{"content":"When using <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileAccess.Read\" name=\"FileAccess.Read\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object can be used to read all of the existing data.","pos":[260,490],"source":"       When using <xref uid=\"langword_csharp_FileAccess.Read\" name=\"FileAccess.Read\" href=\"\"></xref>, the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object can be used to read all of the existing data."},{"content":"When using <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileAccess.Write\" name=\"FileAccess.Write\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> points to a zero byte file.","pos":[497,700],"source":"       When using <xref uid=\"langword_csharp_FileAccess.Write\" name=\"FileAccess.Write\" href=\"\"></xref>, <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> points to a zero byte file."},{"content":"Existing data will be overwritten when the object is closed and the transaction is committed.","pos":[701,794]},{"content":"When using <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileAccess.ReadWrite\" name=\"FileAccess.ReadWrite\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> points to a file which has all the existing data in it.","pos":[801,1044],"source":"       When using <xref uid=\"langword_csharp_FileAccess.ReadWrite\" name=\"FileAccess.ReadWrite\" href=\"\"></xref>, the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> points to a file which has all the existing data in it."},{"content":"The handle is positioned at the beginning of the file.","pos":[1045,1099]},{"content":"You can use one of the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.IO\" name=\"System.IO\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> methods to move the handle position within the file to write or append new data.","pos":[1100,1334],"source":" You can use one of the <xref uid=\"langword_csharp_System.IO\" name=\"System.IO\" href=\"\"></xref><xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref> methods to move the handle position within the file to write or append new data."}]},{"pos":[6921,7003],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is a null reference, or <ph id=\"ph2\">&lt;code&gt;transactionContext&lt;/code&gt;</ph> is null.","needQuote":true,"needEscape":true,"source":"<code>path</code> is a null reference, or <code>transactionContext</code> is null."},{"pos":[7592,7617],"content":"The file cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file cannot be found.","pos":[0,25]}]},{"pos":[7706,7728],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[7841,7890],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[8009,8088],"content":"The specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid, such as being on an unmapped drive.","needQuote":true,"needEscape":true,"source":"The specified <code>path</code> is invalid, such as being on an unmapped drive."},{"pos":[8203,8400],"content":"The access requested is not permitted by the operating system for the specified path. This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.","needQuote":true,"needEscape":true,"nodes":[{"content":"The access requested is not permitted by the operating system for the specified path. This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.","pos":[0,197],"nodes":[{"content":"The access requested is not permitted by the operating system for the specified path.","pos":[0,85]},{"content":"This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.","pos":[86,197]}]}]},{"pos":[8511,8577],"content":"NtCreateFile fails with error code set to ERROR_SHARING_VIOLATION.","needQuote":true,"needEscape":true,"nodes":[{"content":"NtCreateFile fails with error code set to ERROR_SHARING_VIOLATION.","pos":[0,66]}]},{"pos":[9252,9348],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlTypes.SqlFileStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> class."},{"pos":[9360,9463],"content":"If an exception is thrown, any open transactions should be rolled back. Otherwise, data loss can occur.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If an exception is thrown, any open transactions should be rolled back. Otherwise, data loss can occur.","pos":[0,103],"nodes":[{"content":"If an exception is thrown, any open transactions should be rolled back.","pos":[0,71]},{"content":"Otherwise, data loss can occur.","pos":[72,103]}]}]},{"pos":[9707,9856],"content":"The logical path to the file. The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The logical path to the file. The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.","pos":[0,149],"nodes":[{"content":"The logical path to the file.","pos":[0,29]},{"content":"The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.","pos":[30,149]}]}]},{"pos":[9931,10308],"content":"The transaction context for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object. When set to null, an implicit transaction will be used for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object. Applications should return the byte array returned by calling the GET_FILESTREAM_TRANSACTION_CONTEXT method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction context for the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,118],"source":"The transaction context for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object."},{"content":"When set to null, an implicit transaction will be used for the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[119,268],"source":" When set to null, an implicit transaction will be used for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object."},{"content":"Applications should return the byte array returned by calling the GET_FILESTREAM_TRANSACTION_CONTEXT method.","pos":[269,377]}]},{"pos":[10379,11775],"content":"The access mode to use when opening the file. Supported <xref href=\"System.IO.FileAccess\"></xref> enumeration values are <xref href=\"System.IO.FileAccess\"></xref>, <xref href=\"System.IO.FileAccess\"></xref>, and <xref href=\"System.IO.FileAccess\"></xref>.       When using <xref uid=\"langword_csharp_FileAccess.Read\" name=\"FileAccess.Read\" href=\"\"></xref>, the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object can be used to read all of the existing data.       When using <xref uid=\"langword_csharp_FileAccess.Write\" name=\"FileAccess.Write\" href=\"\"></xref>, <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> points to a zero byte file. Existing data will be overwritten when the object is closed and the transaction is committed.       When using <xref uid=\"langword_csharp_FileAccess.ReadWrite\" name=\"FileAccess.ReadWrite\" href=\"\"></xref>, the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> points to a file which has all the existing data in it. The handle is positioned at the beginning of the file. You can use one of the <xref uid=\"langword_csharp_System.IO\" name=\"System.IO\" href=\"\"></xref><xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref> methods to move the handle position within the file to write or append new data.","needQuote":false,"needEscape":true,"nodes":[{"content":"The access mode to use when opening the file.","pos":[0,45]},{"content":"Supported <bpt id=\"p1\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values are <bpt id=\"p2\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, and <bpt id=\"p4\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[46,253],"source":" Supported <xref href=\"System.IO.FileAccess\"></xref> enumeration values are <xref href=\"System.IO.FileAccess\"></xref>, <xref href=\"System.IO.FileAccess\"></xref>, and <xref href=\"System.IO.FileAccess\"></xref>."},{"content":"When using <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileAccess.Read\" name=\"FileAccess.Read\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object can be used to read all of the existing data.","pos":[260,490],"source":"       When using <xref uid=\"langword_csharp_FileAccess.Read\" name=\"FileAccess.Read\" href=\"\"></xref>, the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object can be used to read all of the existing data."},{"content":"When using <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileAccess.Write\" name=\"FileAccess.Write\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> points to a zero byte file.","pos":[497,700],"source":"       When using <xref uid=\"langword_csharp_FileAccess.Write\" name=\"FileAccess.Write\" href=\"\"></xref>, <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> points to a zero byte file."},{"content":"Existing data will be overwritten when the object is closed and the transaction is committed.","pos":[701,794]},{"content":"When using <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileAccess.ReadWrite\" name=\"FileAccess.ReadWrite\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> points to a file which has all the existing data in it.","pos":[801,1044],"source":"       When using <xref uid=\"langword_csharp_FileAccess.ReadWrite\" name=\"FileAccess.ReadWrite\" href=\"\"></xref>, the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> points to a file which has all the existing data in it."},{"content":"The handle is positioned at the beginning of the file.","pos":[1045,1099]},{"content":"You can use one of the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_System.IO\" name=\"System.IO\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> methods to move the handle position within the file to write or append new data.","pos":[1100,1334],"source":" You can use one of the <xref uid=\"langword_csharp_System.IO\" name=\"System.IO\" href=\"\"></xref><xref uid=\"langword_csharp_Seek\" name=\"Seek\" href=\"\"></xref> methods to move the handle position within the file to write or append new data."}]},{"pos":[11848,12143],"content":"Specifies the option to use while opening the file. Supported <xref href=\"System.IO.FileOptions\"></xref> values are <xref href=\"System.IO.FileOptions\"></xref>, <xref href=\"System.IO.FileOptions\"></xref>, <xref href=\"System.IO.FileOptions\"></xref>, and <xref href=\"System.IO.FileOptions\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the option to use while opening the file.","pos":[0,51]},{"content":"Supported <bpt id=\"p1\">&lt;xref href=\"System.IO.FileOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values are <bpt id=\"p2\">&lt;xref href=\"System.IO.FileOptions\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.IO.FileOptions\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, <bpt id=\"p4\">&lt;xref href=\"System.IO.FileOptions\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>, and <bpt id=\"p5\">&lt;xref href=\"System.IO.FileOptions\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","pos":[52,295],"source":" Supported <xref href=\"System.IO.FileOptions\"></xref> values are <xref href=\"System.IO.FileOptions\"></xref>, <xref href=\"System.IO.FileOptions\"></xref>, <xref href=\"System.IO.FileOptions\"></xref>, and <xref href=\"System.IO.FileOptions\"></xref>."}]},{"pos":[12213,12302],"content":"The allocation size to use while creating a file. If set to 0, the default value is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"The allocation size to use while creating a file. If set to 0, the default value is used.","pos":[0,89],"nodes":[{"content":"The allocation size to use while creating a file.","pos":[0,49]},{"content":"If set to 0, the default value is used.","pos":[50,89]}]}]},{"pos":[12473,12555],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is a null reference, or <ph id=\"ph2\">&lt;code&gt;transactionContext&lt;/code&gt;</ph> is null.","needQuote":true,"needEscape":true,"source":"<code>path</code> is a null reference, or <code>transactionContext</code> is null."},{"pos":[13140,13165],"content":"The file cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file cannot be found.","pos":[0,25]}]},{"pos":[13254,13276],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[13389,13438],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[13557,13636],"content":"The specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid, such as being on an unmapped drive.","needQuote":true,"needEscape":true,"source":"The specified <code>path</code> is invalid, such as being on an unmapped drive."},{"pos":[13751,13948],"content":"The access requested is not permitted by the operating system for the specified path. This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.","needQuote":true,"needEscape":true,"nodes":[{"content":"The access requested is not permitted by the operating system for the specified path. This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.","pos":[0,197],"nodes":[{"content":"The access requested is not permitted by the operating system for the specified path.","pos":[0,85]},{"content":"This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.","pos":[86,197]}]}]},{"pos":[14059,14125],"content":"NtCreateFile fails with error code set to ERROR_SHARING_VIOLATION.","needQuote":true,"needEscape":true,"nodes":[{"content":"NtCreateFile fails with error code set to ERROR_SHARING_VIOLATION.","pos":[0,66]}]},{"pos":[14762,14800],"content":"Begins an asynchronous read operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous read operation.","pos":[0,38]}]},{"pos":[14812,14941],"content":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A&gt; property to determine whether the current instance supports reading.","pos":[0,129],"source":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading."}]},{"pos":[15160,15193],"content":"The buffer to read the data into.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer to read the data into.","pos":[0,33]}]},{"pos":[15255,15335],"content":"The byte offset in <ph id=\"ph1\">`buffer`</ph> at which to begin writing data read from the stream.","needQuote":true,"needEscape":true,"source":"The byte offset in `buffer` at which to begin writing data read from the stream."},{"pos":[15396,15432],"content":"The maximum number of bytes to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]},{"pos":[15504,15578],"content":"An optional asynchronous callback, to be called when the read is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional asynchronous callback, to be called when the read is complete.","pos":[0,74]}]},{"pos":[15640,15743],"content":"A user-provided object that distinguishes this particular asynchronous read request from other requests","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous read request from other requests","pos":[0,103]}]},{"pos":[15807,15905],"content":"An <xref:System.IAsyncResult> that represents the asynchronous read, which could still be pending.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that represents the asynchronous read, which could still be pending.","pos":[0,98],"source":"An <xref:System.IAsyncResult> that represents the asynchronous read, which could still be pending."}]},{"pos":[16080,16124],"content":"Reading data is not supported on the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reading data is not supported on the stream.","pos":[0,44]}]},{"pos":[16766,16805],"content":"Begins an asynchronous write operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous write operation.","pos":[0,39]}]},{"pos":[16817,16947],"content":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A&gt; property to determine whether the current instance supports writing.","pos":[0,130],"source":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing."}]},{"pos":[17167,17197],"content":"The buffer to write data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]},{"pos":[17259,17315],"content":"The byte offset in <ph id=\"ph1\">`buffer`</ph> from which to begin writing.","needQuote":true,"needEscape":true,"source":"The byte offset in `buffer` from which to begin writing."},{"pos":[17376,17413],"content":"The maximum number of bytes to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]},{"pos":[17485,17560],"content":"An optional asynchronous callback, to be called when the write is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional asynchronous callback, to be called when the write is complete.","pos":[0,75]}]},{"pos":[17622,17727],"content":"A user-provided object that distinguishes this particular asynchronous write request from other requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous write request from other requests.","pos":[0,105]}]},{"pos":[17791,17890],"content":"An <xref:System.IAsyncResult> that represents the asynchronous write, which could still be pending.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that represents the asynchronous write, which could still be pending.","pos":[0,99],"source":"An <xref:System.IAsyncResult> that represents the asynchronous write, which could still be pending."}]},{"pos":[18066,18110],"content":"Writing data is not supported on the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writing data is not supported on the stream.","pos":[0,44]}]},{"pos":[18464,18532],"content":"Gets a value indicating whether the current stream supports reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current stream supports reading.","pos":[0,68]}]},{"pos":[18652,18827],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current stream supports reading; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current stream supports reading; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19254,19322],"content":"Gets a value indicating whether the current stream supports seeking.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current stream supports seeking.","pos":[0,68]}]},{"pos":[19442,19617],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current stream supports seeking; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current stream supports seeking; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20059,20123],"content":"Gets a value indicating whether the current stream can time out.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current stream can time out.","pos":[0,64]}]},{"pos":[20246,20417],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current stream can time out; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current stream can time out; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20852,20920],"content":"Gets a value indicating whether the current stream supports writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current stream supports writing.","pos":[0,68]}]},{"pos":[21041,21216],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current stream supports writing; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current stream supports writing; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[21845,21857],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22366,22418],"content":"Waits for the pending asynchronous read to complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Waits for the pending asynchronous read to complete.","pos":[0,52]}]},{"pos":[22587,22647],"content":"The reference to the pending asynchronous request to finish.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reference to the pending asynchronous request to finish.","pos":[0,60]}]},{"pos":[22704,22923],"content":"The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.","pos":[0,219],"nodes":[{"content":"The number of bytes read from the stream, between zero (0) and the number of bytes you requested.","pos":[0,97]},{"content":"Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.","pos":[98,219]}]}]},{"pos":[23088,23240],"content":"The &lt;xref:System.IAsyncResult&gt; object did not come from the corresponding <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_BeginRead\" name=\"BeginRead\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method.","needQuote":true,"needEscape":true,"source":"The <xref:System.IAsyncResult> object did not come from the corresponding <xref uid=\"langword_csharp_BeginRead\" name=\"BeginRead\" href=\"\"></xref> method."},{"pos":[23681,23718],"content":"Ends an asynchronous write operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous write operation.","pos":[0,37]}]},{"pos":[23889,23945],"content":"A reference to the outstanding asynchronous I/O request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]},{"pos":[24111,24265],"content":"The &lt;xref:System.IAsyncResult&gt; object did not come from the corresponding <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_BeginWrite\" name=\"BeginWrite\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method.","needQuote":true,"needEscape":true,"source":"The <xref:System.IAsyncResult> object did not come from the corresponding <xref uid=\"langword_csharp_BeginWrite\" name=\"BeginWrite\" href=\"\"></xref> method."},{"pos":[24628,24800],"content":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlTypes.SqlFileStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref>."},{"pos":[25283,25386],"content":"clears all buffers for this stream and causes any buffered data to be written to the underlying device.","needQuote":true,"needEscape":true,"nodes":[{"content":"clears all buffers for this stream and causes any buffered data to be written to the underlying device.","pos":[0,103]}]},{"pos":[25879,25945],"content":"Gets a value indicating the length of the current stream in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating the length of the current stream in bytes.","pos":[0,66]}]},{"pos":[26062,26138],"content":"An <xref:System.Int64> indicating the length of the current stream in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int64&gt; indicating the length of the current stream in bytes.","pos":[0,76],"source":"An <xref:System.Int64> indicating the length of the current stream in bytes."}]},{"pos":[26549,26660],"content":"Gets the logical path of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlTypes.SqlFileStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> passed to the constructor.","needQuote":true,"needEscape":true,"source":"Gets the logical path of the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> passed to the constructor."},{"pos":[26769,26867],"content":"A string value indicating the name of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlTypes.SqlFileStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string value indicating the name of the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref>."},{"pos":[27296,27348],"content":"Gets or sets the position within the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the position within the current stream.","pos":[0,52]}]},{"pos":[27472,27560],"content":"The current position within the <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlTypes.SqlFileStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The current position within the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref>."},{"pos":[28113,28235],"content":"Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.","pos":[0,122]}]},{"pos":[28247,28376],"content":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports writing.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A&gt; property to determine whether the current instance supports writing.","pos":[0,129],"source":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports writing."}]},{"pos":[28543,28740],"content":"An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.","pos":[0,197],"nodes":[{"content":"An array of bytes.","pos":[0,18]},{"content":"When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.","pos":[19,197]}]}]},{"pos":[28802,28903],"content":"The zero-based byte offset in buffer at which to begin storing the data read from the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based byte offset in buffer at which to begin storing the data read from the current stream.","pos":[0,101]}]},{"pos":[28964,29027],"content":"The maximum number of bytes to be read from the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of bytes to be read from the current stream.","pos":[0,63]}]},{"pos":[29084,29286],"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","needQuote":true,"needEscape":true,"nodes":[{"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","pos":[0,202],"nodes":[{"content":"The total number of bytes read into the buffer.","pos":[0,47]},{"content":"This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","pos":[48,202]}]}]},{"pos":[29456,29500],"content":"The object does not support reading of data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object does not support reading of data.","pos":[0,44]}]},{"pos":[29863,29991],"content":"Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.","pos":[0,128]}]},{"pos":[30003,30132],"content":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A&gt; property to determine whether the current instance supports reading.","pos":[0,129],"source":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading."}]},{"pos":[30264,30348],"content":"The unsigned byte cast to an <xref:System.Int32>, or -1 if at the end of the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unsigned byte cast to an &lt;xref:System.Int32&gt;, or -1 if at the end of the stream.","pos":[0,84],"source":"The unsigned byte cast to an <xref:System.Int32>, or -1 if at the end of the stream."}]},{"pos":[30522,30566],"content":"The object does not support reading of data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object does not support reading of data.","pos":[0,44]}]},{"pos":[30940,31054],"content":"Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out.","pos":[0,114]}]},{"pos":[31180,31281],"content":"A value, in milliseconds, that determines how long the stream will attempt to read before timing out.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value, in milliseconds, that determines how long the stream will attempt to read before timing out.","pos":[0,101]}]},{"pos":[31819,31863],"content":"Sets the position within the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the position within the current stream.","pos":[0,44]}]},{"pos":[32034,32082],"content":"A byte offset relative to the <ph id=\"ph1\">`origin`</ph> parameter","needQuote":true,"needEscape":true,"source":"A byte offset relative to the `origin` parameter"},{"pos":[32152,32258],"content":"A value of type <xref:System.IO.SeekOrigin> indicating the reference point used to obtain the new position","needQuote":true,"needEscape":true,"nodes":[{"content":"A value of type &lt;xref:System.IO.SeekOrigin&gt; indicating the reference point used to obtain the new position","pos":[0,106],"source":"A value of type <xref:System.IO.SeekOrigin> indicating the reference point used to obtain the new position"}]},{"pos":[32315,32358],"content":"The new position within the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new position within the current stream.","pos":[0,43]}]},{"pos":[32839,32877],"content":"Sets the length of the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the length of the current stream.","pos":[0,38]}]},{"pos":[32889,33018],"content":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A&gt; property to determine whether the current instance supports reading.","pos":[0,129],"source":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading."}]},{"pos":[33163,33213],"content":"The desired length of the current stream in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The desired length of the current stream in bytes.","pos":[0,50]}]},{"pos":[33388,33432],"content":"The object does not support reading of data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object does not support reading of data.","pos":[0,44]}]},{"pos":[33841,33950],"content":"Gets or sets the transaction context for this <bpt id=\"p1\">&lt;xref href=\"System.Data.SqlTypes.SqlFileStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the transaction context for this <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> object."},{"pos":[34073,34222],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionContext</ph><ept id=\"p1\">&lt;/code&gt;</ept> array that was passed to the constructor for this <bpt id=\"p2\">&lt;xref href=\"System.Data.SqlTypes.SqlFileStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <code>transactionContext</code> array that was passed to the constructor for this <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> object."},{"pos":[34790,34923],"content":"Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.","pos":[0,133]}]},{"pos":[34935,35065],"content":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A&gt; property to determine whether the current instance supports writing.","pos":[0,130],"source":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing."}]},{"pos":[35234,35322],"content":"An array of bytes. This method copies `count` bytes from `buffer` to the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of bytes.","pos":[0,18]},{"content":"This method copies <ph id=\"ph1\">`count`</ph> bytes from <ph id=\"ph2\">`buffer`</ph> to the current stream.","pos":[19,88],"source":" This method copies `count` bytes from `buffer` to the current stream."}]},{"pos":[35384,35477],"content":"The zero-based byte offset in <ph id=\"ph1\">`buffer`</ph> at which to begin copying bytes to the current stream.","needQuote":true,"needEscape":true,"source":"The zero-based byte offset in `buffer` at which to begin copying bytes to the current stream."},{"pos":[35538,35594],"content":"The number of bytes to be written to the current stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to be written to the current stream.","pos":[0,56]}]},{"pos":[35765,35809],"content":"The object does not support writing of data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object does not support writing of data.","pos":[0,44]}]},{"pos":[36215,36323],"content":"Writes a byte to the current position in the stream and advances the position within the stream by one byte.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a byte to the current position in the stream and advances the position within the stream by one byte.","pos":[0,108]}]},{"pos":[36335,36465],"content":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A&gt; property to determine whether the current instance supports writing.","pos":[0,130],"source":"Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing."}]},{"pos":[36609,36641],"content":"The byte to write to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte to write to the stream.","pos":[0,32]}]},{"pos":[36816,36860],"content":"The object does not support writing of data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object does not support writing of data.","pos":[0,44]}]},{"pos":[37239,37354],"content":"Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out.","pos":[0,115]}]},{"pos":[37481,37583],"content":"A value, in milliseconds, that determines how long the stream will attempt to write before timing out.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value, in milliseconds, that determines how long the stream will attempt to write before timing out.","pos":[0,102]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.SqlTypes.SqlFileStream\n  id: SqlFileStream\n  children:\n  - System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess)\n  - System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess,System.IO.FileOptions,System.Int64)\n  - System.Data.SqlTypes.SqlFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Data.SqlTypes.SqlFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Data.SqlTypes.SqlFileStream.CanRead\n  - System.Data.SqlTypes.SqlFileStream.CanSeek\n  - System.Data.SqlTypes.SqlFileStream.CanTimeout\n  - System.Data.SqlTypes.SqlFileStream.CanWrite\n  - System.Data.SqlTypes.SqlFileStream.Dispose(System.Boolean)\n  - System.Data.SqlTypes.SqlFileStream.EndRead(System.IAsyncResult)\n  - System.Data.SqlTypes.SqlFileStream.EndWrite(System.IAsyncResult)\n  - System.Data.SqlTypes.SqlFileStream.Finalize\n  - System.Data.SqlTypes.SqlFileStream.Flush\n  - System.Data.SqlTypes.SqlFileStream.Length\n  - System.Data.SqlTypes.SqlFileStream.Name\n  - System.Data.SqlTypes.SqlFileStream.Position\n  - System.Data.SqlTypes.SqlFileStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.Data.SqlTypes.SqlFileStream.ReadByte\n  - System.Data.SqlTypes.SqlFileStream.ReadTimeout\n  - System.Data.SqlTypes.SqlFileStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.Data.SqlTypes.SqlFileStream.SetLength(System.Int64)\n  - System.Data.SqlTypes.SqlFileStream.TransactionContext\n  - System.Data.SqlTypes.SqlFileStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.Data.SqlTypes.SqlFileStream.WriteByte(System.Byte)\n  - System.Data.SqlTypes.SqlFileStream.WriteTimeout\n  langs:\n  - csharp\n  name: SqlFileStream\n  nameWithType: SqlFileStream\n  fullName: System.Data.SqlTypes.SqlFileStream\n  type: Class\n  summary: Exposes SQL Server data that is stored with the FILESTREAM column attribute as a sequence of bytes.\n  remarks: \"The SqlFileStream class is used to work with `varbinary(max)` data stored with the FILESTREAM attribute in a SQL Server 2008 database. You must install the .NET Framework 3.5 SP1 (or later) to use <xref:System.Data.SqlTypes.SqlFileStream> to work with FILESTREAM data.  \\n  \\n Specifying the FILESTREAM attribute on a `varbinary(max)` column causes SQL Server to store the data in the local NTFS file system instead of in the database file. Transact-SQL statements provide data manipulation capabilities within the server, and Win32 file system interfaces provide streaming access to the data.  \\n  \\n> [!NOTE]\\n>  Individual files stored in a FILESTREAM column cannot be opened directly from the NTFS file system. Streaming FILESTREAM data works only in the context of a SQL Server transaction.  \\n  \\n The SqlFileStream class is derived from the <xref:System.IO.Stream> class, which represents an abstraction of a sequence of bytes from some arbitrary data source such as a file or a block of memory. You can read from a FILESTREAM by transferring data from a stream into a data structure such as an array of bytes. You can write to a FILESTREAM by transferring the data from a data structure into a stream. You can also seek within the stream, which allows you to query and modify data at the current position within the stream.  \\n  \\n For conceptual documentation and code examples, see [FILESTREAM Data](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For documentation about setting up and configuring FILESTREAM data on SQL Server,  see [Designing and Implementing FILESTREAM Storage](http://go.microsoft.com/fwlink/?LinkId=121499) in SQL Server 2008 Books Online.\"\n  syntax:\n    content: 'public sealed class SqlFileStream : System.IO.Stream'\n  inheritance:\n  - System.IO.Stream\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess)\n  id: '#ctor(System.String,System.Byte[],System.IO.FileAccess)'\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: SqlFileStream(String,Byte[],FileAccess)\n  nameWithType: SqlFileStream.SqlFileStream(String,Byte[],FileAccess)\n  fullName: System.Data.SqlTypes.SqlFileStream.SqlFileStream(String,Byte[],FileAccess)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> class.\n  remarks: If an exception is thrown, any open transactions should be rolled back. Otherwise, data loss can occur.\n  syntax:\n    content: public SqlFileStream (string path, byte[] transactionContext, System.IO.FileAccess access);\n    parameters:\n    - id: path\n      type: System.String\n      description: The logical path to the file. The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.\n    - id: transactionContext\n      type: System.Byte[]\n      description: The transaction context for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object. Applications should return the byte array returned by calling the GET_FILESTREAM_TRANSACTION_CONTEXT method.\n    - id: access\n      type: System.IO.FileAccess\n      description: \"The access mode to use when opening the file. Supported <xref href=\\\"System.IO.FileAccess\\\"></xref> enumeration values are <xref href=\\\"System.IO.FileAccess\\\"></xref>, <xref href=\\\"System.IO.FileAccess\\\"></xref>, and <xref href=\\\"System.IO.FileAccess\\\"></xref>.  \\n  \\n When using <xref uid=\\\"langword_csharp_FileAccess.Read\\\" name=\\\"FileAccess.Read\\\" href=\\\"\\\"></xref>, the <xref uid=\\\"langword_csharp_SqlFileStream\\\" name=\\\"SqlFileStream\\\" href=\\\"\\\"></xref> object can be used to read all of the existing data.  \\n  \\n When using <xref uid=\\\"langword_csharp_FileAccess.Write\\\" name=\\\"FileAccess.Write\\\" href=\\\"\\\"></xref>, <xref uid=\\\"langword_csharp_SqlFileStream\\\" name=\\\"SqlFileStream\\\" href=\\\"\\\"></xref> points to a zero byte file. Existing data will be overwritten when the object is closed and the transaction is committed.  \\n  \\n When using <xref uid=\\\"langword_csharp_FileAccess.ReadWrite\\\" name=\\\"FileAccess.ReadWrite\\\" href=\\\"\\\"></xref>, the <xref uid=\\\"langword_csharp_SqlFileStream\\\" name=\\\"SqlFileStream\\\" href=\\\"\\\"></xref> points to a file which has all the existing data in it. The handle is positioned at the beginning of the file. You can use one of the <xref uid=\\\"langword_csharp_System.IO\\\" name=\\\"System.IO\\\" href=\\\"\\\"></xref><xref uid=\\\"langword_csharp_Seek\\\" name=\\\"Seek\\\" href=\\\"\\\"></xref> methods to move the handle position within the file to write or append new data.\"\n  overload: System.Data.SqlTypes.SqlFileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is a null reference, or <code>transactionContext</code> is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n <code>path</code> begins with \\\"\\\\\\\\\\\\\\\\.\\\\\\\\\\\", for example \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The handle returned by the call to NTCreateFile is not of type FILE_TYPE_DISK.  \\n  \\n <code>options</code> contains an unsupported value.\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified <code>path</code> is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The access requested is not permitted by the operating system for the specified path. This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: NtCreateFile fails with error code set to ERROR_SHARING_VIOLATION.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess,System.IO.FileOptions,System.Int64)\n  id: '#ctor(System.String,System.Byte[],System.IO.FileAccess,System.IO.FileOptions,System.Int64)'\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: SqlFileStream(String,Byte[],FileAccess,FileOptions,Int64)\n  nameWithType: SqlFileStream.SqlFileStream(String,Byte[],FileAccess,FileOptions,Int64)\n  fullName: System.Data.SqlTypes.SqlFileStream.SqlFileStream(String,Byte[],FileAccess,FileOptions,Int64)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> class.\n  remarks: If an exception is thrown, any open transactions should be rolled back. Otherwise, data loss can occur.\n  syntax:\n    content: public SqlFileStream (string path, byte[] transactionContext, System.IO.FileAccess access, System.IO.FileOptions options, long allocationSize);\n    parameters:\n    - id: path\n      type: System.String\n      description: The logical path to the file. The path can be retrieved by using the Transact-SQL Pathname function on the underlying FILESTREAM column in the table.\n    - id: transactionContext\n      type: System.Byte[]\n      description: The transaction context for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object. When set to null, an implicit transaction will be used for the <xref uid=\"langword_csharp_SqlFileStream\" name=\"SqlFileStream\" href=\"\"></xref> object. Applications should return the byte array returned by calling the GET_FILESTREAM_TRANSACTION_CONTEXT method.\n    - id: access\n      type: System.IO.FileAccess\n      description: \"The access mode to use when opening the file. Supported <xref href=\\\"System.IO.FileAccess\\\"></xref> enumeration values are <xref href=\\\"System.IO.FileAccess\\\"></xref>, <xref href=\\\"System.IO.FileAccess\\\"></xref>, and <xref href=\\\"System.IO.FileAccess\\\"></xref>.  \\n  \\n When using <xref uid=\\\"langword_csharp_FileAccess.Read\\\" name=\\\"FileAccess.Read\\\" href=\\\"\\\"></xref>, the <xref uid=\\\"langword_csharp_SqlFileStream\\\" name=\\\"SqlFileStream\\\" href=\\\"\\\"></xref> object can be used to read all of the existing data.  \\n  \\n When using <xref uid=\\\"langword_csharp_FileAccess.Write\\\" name=\\\"FileAccess.Write\\\" href=\\\"\\\"></xref>, <xref uid=\\\"langword_csharp_SqlFileStream\\\" name=\\\"SqlFileStream\\\" href=\\\"\\\"></xref> points to a zero byte file. Existing data will be overwritten when the object is closed and the transaction is committed.  \\n  \\n When using <xref uid=\\\"langword_csharp_FileAccess.ReadWrite\\\" name=\\\"FileAccess.ReadWrite\\\" href=\\\"\\\"></xref>, the <xref uid=\\\"langword_csharp_SqlFileStream\\\" name=\\\"SqlFileStream\\\" href=\\\"\\\"></xref> points to a file which has all the existing data in it. The handle is positioned at the beginning of the file. You can use one of the <xref uid=\\\"langword_csharp_System.IO\\\" name=\\\"System.IO\\\" href=\\\"\\\"></xref><xref uid=\\\"langword_csharp_Seek\\\" name=\\\"Seek\\\" href=\\\"\\\"></xref> methods to move the handle position within the file to write or append new data.\"\n    - id: options\n      type: System.IO.FileOptions\n      description: Specifies the option to use while opening the file. Supported <xref href=\"System.IO.FileOptions\"></xref> values are <xref href=\"System.IO.FileOptions\"></xref>, <xref href=\"System.IO.FileOptions\"></xref>, <xref href=\"System.IO.FileOptions\"></xref>, and <xref href=\"System.IO.FileOptions\"></xref>.\n    - id: allocationSize\n      type: System.Int64\n      description: The allocation size to use while creating a file. If set to 0, the default value is used.\n  overload: System.Data.SqlTypes.SqlFileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is a null reference, or <code>transactionContext</code> is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n <code>path</code> begins with \\\"\\\\\\\\\\\\\\\\.\\\\\\\\\\\", for example \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The handle returned by call to NTCreateFile is not of type FILE_TYPE_DISK.  \\n  \\n <code>options</code> contains an unsupported value.\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified <code>path</code> is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The access requested is not permitted by the operating system for the specified path. This occurs when Write or ReadWrite access is specified, and the file or directory is set for read-only access.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: NtCreateFile fails with error code set to ERROR_SHARING_VIOLATION.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: SqlFileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Data.SqlTypes.SqlFileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Begins an asynchronous read operation.\n  remarks: Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading.\n  syntax:\n    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to read the data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in `buffer` at which to begin writing data read from the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the read is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous read request from other requests\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that represents the asynchronous read, which could still be pending.\n  overload: System.Data.SqlTypes.SqlFileStream.BeginRead*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Reading data is not supported on the stream.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: SqlFileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Data.SqlTypes.SqlFileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Begins an asynchronous write operation.\n  remarks: Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing.\n  syntax:\n    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in `buffer` from which to begin writing.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the write is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous write request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that represents the asynchronous write, which could still be pending.\n  overload: System.Data.SqlTypes.SqlFileStream.BeginWrite*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Writing data is not supported on the stream.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.CanRead\n  id: CanRead\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: SqlFileStream.CanRead\n  fullName: System.Data.SqlTypes.SqlFileStream.CanRead\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets a value indicating whether the current stream supports reading.\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current stream supports reading; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.SqlTypes.SqlFileStream.CanRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.CanSeek\n  id: CanSeek\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: SqlFileStream.CanSeek\n  fullName: System.Data.SqlTypes.SqlFileStream.CanSeek\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets a value indicating whether the current stream supports seeking.\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current stream supports seeking; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.SqlTypes.SqlFileStream.CanSeek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.CanTimeout\n  id: CanTimeout\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: CanTimeout\n  nameWithType: SqlFileStream.CanTimeout\n  fullName: System.Data.SqlTypes.SqlFileStream.CanTimeout\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets a value indicating whether the current stream can time out.\n  syntax:\n    content: public override bool CanTimeout { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current stream can time out; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.SqlTypes.SqlFileStream.CanTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.CanWrite\n  id: CanWrite\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: SqlFileStream.CanWrite\n  fullName: System.Data.SqlTypes.SqlFileStream.CanWrite\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets a value indicating whether the current stream supports writing.\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current stream supports writing; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.SqlTypes.SqlFileStream.CanWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SqlFileStream.Dispose(Boolean)\n  fullName: System.Data.SqlTypes.SqlFileStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.SqlTypes.SqlFileStream.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.EndRead(System.IAsyncResult)\n  id: EndRead(System.IAsyncResult)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: EndRead(IAsyncResult)\n  nameWithType: SqlFileStream.EndRead(IAsyncResult)\n  fullName: System.Data.SqlTypes.SqlFileStream.EndRead(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Waits for the pending asynchronous read to complete.\n  syntax:\n    content: public override int EndRead (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The reference to the pending asynchronous request to finish.\n    return:\n      type: System.Int32\n      description: The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.\n  overload: System.Data.SqlTypes.SqlFileStream.EndRead*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref:System.IAsyncResult> object did not come from the corresponding <xref uid=\"langword_csharp_BeginRead\" name=\"BeginRead\" href=\"\"></xref> method.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.EndWrite(System.IAsyncResult)\n  id: EndWrite(System.IAsyncResult)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: EndWrite(IAsyncResult)\n  nameWithType: SqlFileStream.EndWrite(IAsyncResult)\n  fullName: System.Data.SqlTypes.SqlFileStream.EndWrite(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Ends an asynchronous write operation.\n  syntax:\n    content: public override void EndWrite (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n  overload: System.Data.SqlTypes.SqlFileStream.EndWrite*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref:System.IAsyncResult> object did not come from the corresponding <xref uid=\"langword_csharp_BeginWrite\" name=\"BeginWrite\" href=\"\"></xref> method.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Finalize\n  id: Finalize\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SqlFileStream.Finalize()\n  fullName: System.Data.SqlTypes.SqlFileStream.Finalize()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref>.\n  syntax:\n    content: ~SqlFileStream ();\n    parameters: []\n  overload: System.Data.SqlTypes.SqlFileStream.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Flush\n  id: Flush\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: SqlFileStream.Flush()\n  fullName: System.Data.SqlTypes.SqlFileStream.Flush()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: clears all buffers for this stream and causes any buffered data to be written to the underlying device.\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.Data.SqlTypes.SqlFileStream.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Length\n  id: Length\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: SqlFileStream.Length\n  fullName: System.Data.SqlTypes.SqlFileStream.Length\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets a value indicating the length of the current stream in bytes.\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: An <xref:System.Int64> indicating the length of the current stream in bytes.\n  overload: System.Data.SqlTypes.SqlFileStream.Length*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Name\n  id: Name\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Name\n  nameWithType: SqlFileStream.Name\n  fullName: System.Data.SqlTypes.SqlFileStream.Name\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets the logical path of the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> passed to the constructor.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: A string value indicating the name of the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref>.\n  overload: System.Data.SqlTypes.SqlFileStream.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Position\n  id: Position\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: SqlFileStream.Position\n  fullName: System.Data.SqlTypes.SqlFileStream.Position\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets or sets the position within the current stream.\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: The current position within the <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref>.\n  overload: System.Data.SqlTypes.SqlFileStream.Position*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: SqlFileStream.Read(Byte[],Int32,Int32)\n  fullName: System.Data.SqlTypes.SqlFileStream.Read(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.\n  remarks: Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports writing.\n  syntax:\n    content: public override int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in buffer at which to begin storing the data read from the current stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to be read from the current stream.\n    return:\n      type: System.Int32\n      description: The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.\n  overload: System.Data.SqlTypes.SqlFileStream.Read*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The object does not support reading of data.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.ReadByte\n  id: ReadByte\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: ReadByte()\n  nameWithType: SqlFileStream.ReadByte()\n  fullName: System.Data.SqlTypes.SqlFileStream.ReadByte()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.\n  remarks: Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading.\n  syntax:\n    content: public override int ReadByte ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The unsigned byte cast to an <xref:System.Int32>, or -1 if at the end of the stream.\n  overload: System.Data.SqlTypes.SqlFileStream.ReadByte*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The object does not support reading of data.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.ReadTimeout\n  id: ReadTimeout\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: ReadTimeout\n  nameWithType: SqlFileStream.ReadTimeout\n  fullName: System.Data.SqlTypes.SqlFileStream.ReadTimeout\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out.\n  syntax:\n    content: public override int ReadTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A value, in milliseconds, that determines how long the stream will attempt to read before timing out.\n  overload: System.Data.SqlTypes.SqlFileStream.ReadTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: SqlFileStream.Seek(Int64,SeekOrigin)\n  fullName: System.Data.SqlTypes.SqlFileStream.Seek(Int64,SeekOrigin)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Sets the position within the current stream.\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: A byte offset relative to the `origin` parameter\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: A value of type <xref:System.IO.SeekOrigin> indicating the reference point used to obtain the new position\n    return:\n      type: System.Int64\n      description: The new position within the current stream.\n  overload: System.Data.SqlTypes.SqlFileStream.Seek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: SqlFileStream.SetLength(Int64)\n  fullName: System.Data.SqlTypes.SqlFileStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Sets the length of the current stream.\n  remarks: Use the <xref:System.Data.SqlTypes.SqlFileStream.CanRead%2A> property to determine whether the current instance supports reading.\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The desired length of the current stream in bytes.\n  overload: System.Data.SqlTypes.SqlFileStream.SetLength*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The object does not support reading of data.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.TransactionContext\n  id: TransactionContext\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: TransactionContext\n  nameWithType: SqlFileStream.TransactionContext\n  fullName: System.Data.SqlTypes.SqlFileStream.TransactionContext\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets or sets the transaction context for this <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> object.\n  syntax:\n    content: public byte[] TransactionContext { get; }\n    return:\n      type: System.Byte[]\n      description: The <code>transactionContext</code> array that was passed to the constructor for this <xref href=\"System.Data.SqlTypes.SqlFileStream\"></xref> object.\n  overload: System.Data.SqlTypes.SqlFileStream.TransactionContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: SqlFileStream.Write(Byte[],Int32,Int32)\n  fullName: System.Data.SqlTypes.SqlFileStream.Write(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.\n  remarks: Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing.\n  syntax:\n    content: public override void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array of bytes. This method copies `count` bytes from `buffer` to the current stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in `buffer` at which to begin copying bytes to the current stream.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to be written to the current stream.\n  overload: System.Data.SqlTypes.SqlFileStream.Write*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The object does not support writing of data.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: WriteByte(Byte)\n  nameWithType: SqlFileStream.WriteByte(Byte)\n  fullName: System.Data.SqlTypes.SqlFileStream.WriteByte(Byte)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Writes a byte to the current position in the stream and advances the position within the stream by one byte.\n  remarks: Use the <xref:System.Data.SqlTypes.SqlFileStream.CanWrite%2A> property to determine whether the current instance supports writing.\n  syntax:\n    content: public override void WriteByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The byte to write to the stream.\n  overload: System.Data.SqlTypes.SqlFileStream.WriteByte*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The object does not support writing of data.\n  platform:\n  - net462\n- uid: System.Data.SqlTypes.SqlFileStream.WriteTimeout\n  id: WriteTimeout\n  parent: System.Data.SqlTypes.SqlFileStream\n  langs:\n  - csharp\n  name: WriteTimeout\n  nameWithType: SqlFileStream.WriteTimeout\n  fullName: System.Data.SqlTypes.SqlFileStream.WriteTimeout\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlTypes\n  summary: Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out.\n  syntax:\n    content: public override int WriteTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A value, in milliseconds, that determines how long the stream will attempt to write before timing out.\n  overload: System.Data.SqlTypes.SqlFileStream.WriteTimeout*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IO.Stream\n  isExternal: false\n  name: System.IO.Stream\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.IO.DirectoryNotFoundException\n  isExternal: true\n  name: System.IO.DirectoryNotFoundException\n- uid: System.UnauthorizedAccessException\n  isExternal: true\n  name: System.UnauthorizedAccessException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: SqlFileStream(String,Byte[],FileAccess)\n  nameWithType: SqlFileStream.SqlFileStream(String,Byte[],FileAccess)\n  fullName: System.Data.SqlTypes.SqlFileStream.SqlFileStream(String,Byte[],FileAccess)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  nameWithType: FileAccess\n  fullName: System.IO.FileAccess\n- uid: System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess,System.IO.FileOptions,System.Int64)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: SqlFileStream(String,Byte[],FileAccess,FileOptions,Int64)\n  nameWithType: SqlFileStream.SqlFileStream(String,Byte[],FileAccess,FileOptions,Int64)\n  fullName: System.Data.SqlTypes.SqlFileStream.SqlFileStream(String,Byte[],FileAccess,FileOptions,Int64)\n- uid: System.IO.FileOptions\n  parent: System.IO\n  isExternal: false\n  name: FileOptions\n  nameWithType: FileOptions\n  fullName: System.IO.FileOptions\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Data.SqlTypes.SqlFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: SqlFileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Data.SqlTypes.SqlFileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.SqlTypes.SqlFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: SqlFileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Data.SqlTypes.SqlFileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n- uid: System.Data.SqlTypes.SqlFileStream.CanRead\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: CanRead\n  nameWithType: SqlFileStream.CanRead\n  fullName: System.Data.SqlTypes.SqlFileStream.CanRead\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.SqlTypes.SqlFileStream.CanSeek\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: SqlFileStream.CanSeek\n  fullName: System.Data.SqlTypes.SqlFileStream.CanSeek\n- uid: System.Data.SqlTypes.SqlFileStream.CanTimeout\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: SqlFileStream.CanTimeout\n  fullName: System.Data.SqlTypes.SqlFileStream.CanTimeout\n- uid: System.Data.SqlTypes.SqlFileStream.CanWrite\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: SqlFileStream.CanWrite\n  fullName: System.Data.SqlTypes.SqlFileStream.CanWrite\n- uid: System.Data.SqlTypes.SqlFileStream.Dispose(System.Boolean)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SqlFileStream.Dispose(Boolean)\n  fullName: System.Data.SqlTypes.SqlFileStream.Dispose(Boolean)\n- uid: System.Data.SqlTypes.SqlFileStream.EndRead(System.IAsyncResult)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: SqlFileStream.EndRead(IAsyncResult)\n  fullName: System.Data.SqlTypes.SqlFileStream.EndRead(IAsyncResult)\n- uid: System.Data.SqlTypes.SqlFileStream.EndWrite(System.IAsyncResult)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: SqlFileStream.EndWrite(IAsyncResult)\n  fullName: System.Data.SqlTypes.SqlFileStream.EndWrite(IAsyncResult)\n- uid: System.Data.SqlTypes.SqlFileStream.Finalize\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Finalize()\n  nameWithType: SqlFileStream.Finalize()\n  fullName: System.Data.SqlTypes.SqlFileStream.Finalize()\n- uid: System.Data.SqlTypes.SqlFileStream.Flush\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Flush()\n  nameWithType: SqlFileStream.Flush()\n  fullName: System.Data.SqlTypes.SqlFileStream.Flush()\n- uid: System.Data.SqlTypes.SqlFileStream.Length\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Length\n  nameWithType: SqlFileStream.Length\n  fullName: System.Data.SqlTypes.SqlFileStream.Length\n- uid: System.Data.SqlTypes.SqlFileStream.Name\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Name\n  nameWithType: SqlFileStream.Name\n  fullName: System.Data.SqlTypes.SqlFileStream.Name\n- uid: System.Data.SqlTypes.SqlFileStream.Position\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Position\n  nameWithType: SqlFileStream.Position\n  fullName: System.Data.SqlTypes.SqlFileStream.Position\n- uid: System.Data.SqlTypes.SqlFileStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: SqlFileStream.Read(Byte[],Int32,Int32)\n  fullName: System.Data.SqlTypes.SqlFileStream.Read(Byte[],Int32,Int32)\n- uid: System.Data.SqlTypes.SqlFileStream.ReadByte\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: SqlFileStream.ReadByte()\n  fullName: System.Data.SqlTypes.SqlFileStream.ReadByte()\n- uid: System.Data.SqlTypes.SqlFileStream.ReadTimeout\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: SqlFileStream.ReadTimeout\n  fullName: System.Data.SqlTypes.SqlFileStream.ReadTimeout\n- uid: System.Data.SqlTypes.SqlFileStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: SqlFileStream.Seek(Int64,SeekOrigin)\n  fullName: System.Data.SqlTypes.SqlFileStream.Seek(Int64,SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: true\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.Data.SqlTypes.SqlFileStream.SetLength(System.Int64)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: SqlFileStream.SetLength(Int64)\n  fullName: System.Data.SqlTypes.SqlFileStream.SetLength(Int64)\n- uid: System.Data.SqlTypes.SqlFileStream.TransactionContext\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: TransactionContext\n  nameWithType: SqlFileStream.TransactionContext\n  fullName: System.Data.SqlTypes.SqlFileStream.TransactionContext\n- uid: System.Data.SqlTypes.SqlFileStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: SqlFileStream.Write(Byte[],Int32,Int32)\n  fullName: System.Data.SqlTypes.SqlFileStream.Write(Byte[],Int32,Int32)\n- uid: System.Data.SqlTypes.SqlFileStream.WriteByte(System.Byte)\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: SqlFileStream.WriteByte(Byte)\n  fullName: System.Data.SqlTypes.SqlFileStream.WriteByte(Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Data.SqlTypes.SqlFileStream.WriteTimeout\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: SqlFileStream.WriteTimeout\n  fullName: System.Data.SqlTypes.SqlFileStream.WriteTimeout\n- uid: System.Data.SqlTypes.SqlFileStream.#ctor*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: SqlFileStream\n  nameWithType: SqlFileStream.SqlFileStream\n- uid: System.Data.SqlTypes.SqlFileStream.BeginRead*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: BeginRead\n  nameWithType: SqlFileStream.BeginRead\n- uid: System.Data.SqlTypes.SqlFileStream.BeginWrite*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: BeginWrite\n  nameWithType: SqlFileStream.BeginWrite\n- uid: System.Data.SqlTypes.SqlFileStream.CanRead*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: CanRead\n  nameWithType: SqlFileStream.CanRead\n- uid: System.Data.SqlTypes.SqlFileStream.CanSeek*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: SqlFileStream.CanSeek\n- uid: System.Data.SqlTypes.SqlFileStream.CanTimeout*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: SqlFileStream.CanTimeout\n- uid: System.Data.SqlTypes.SqlFileStream.CanWrite*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: SqlFileStream.CanWrite\n- uid: System.Data.SqlTypes.SqlFileStream.Dispose*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Dispose\n  nameWithType: SqlFileStream.Dispose\n- uid: System.Data.SqlTypes.SqlFileStream.EndRead*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: EndRead\n  nameWithType: SqlFileStream.EndRead\n- uid: System.Data.SqlTypes.SqlFileStream.EndWrite*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: EndWrite\n  nameWithType: SqlFileStream.EndWrite\n- uid: System.Data.SqlTypes.SqlFileStream.Finalize*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Finalize\n  nameWithType: SqlFileStream.Finalize\n- uid: System.Data.SqlTypes.SqlFileStream.Flush*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Flush\n  nameWithType: SqlFileStream.Flush\n- uid: System.Data.SqlTypes.SqlFileStream.Length*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Length\n  nameWithType: SqlFileStream.Length\n- uid: System.Data.SqlTypes.SqlFileStream.Name*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Name\n  nameWithType: SqlFileStream.Name\n- uid: System.Data.SqlTypes.SqlFileStream.Position*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Position\n  nameWithType: SqlFileStream.Position\n- uid: System.Data.SqlTypes.SqlFileStream.Read*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Read\n  nameWithType: SqlFileStream.Read\n- uid: System.Data.SqlTypes.SqlFileStream.ReadByte*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: ReadByte\n  nameWithType: SqlFileStream.ReadByte\n- uid: System.Data.SqlTypes.SqlFileStream.ReadTimeout*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: SqlFileStream.ReadTimeout\n- uid: System.Data.SqlTypes.SqlFileStream.Seek*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Seek\n  nameWithType: SqlFileStream.Seek\n- uid: System.Data.SqlTypes.SqlFileStream.SetLength*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: SetLength\n  nameWithType: SqlFileStream.SetLength\n- uid: System.Data.SqlTypes.SqlFileStream.TransactionContext*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: TransactionContext\n  nameWithType: SqlFileStream.TransactionContext\n- uid: System.Data.SqlTypes.SqlFileStream.Write*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: Write\n  nameWithType: SqlFileStream.Write\n- uid: System.Data.SqlTypes.SqlFileStream.WriteByte*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: WriteByte\n  nameWithType: SqlFileStream.WriteByte\n- uid: System.Data.SqlTypes.SqlFileStream.WriteTimeout*\n  parent: System.Data.SqlTypes.SqlFileStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: SqlFileStream.WriteTimeout\n"}