{"nodes":[{"pos":[1037,1094],"content":"Represents an X.509 token used as the signing credential.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an X.509 token used as the signing credential.","pos":[0,57]}]},{"pos":[2251,2404],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class based on the specified X.509 certificate.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate."},{"pos":[2416,2559],"content":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, this constructor uses an &lt;xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause&gt; to generate the security key identifier.","pos":[0,143],"source":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier."}]},{"pos":[2823,2845],"content":"The X.509 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]},{"pos":[3753,3934],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class based on the specified X.509 certificate and security key identifier.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate and security key identifier."},{"pos":[3946,4623],"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an &lt;xref:System.IdentityModel.Tokens.X509SecurityToken&gt; are &lt;xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause&gt;, &lt;xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause&gt;, &lt;xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause&gt;, and &lt;xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause&gt;.","pos":[0,474],"source":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>."},{"content":"However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the <ph id=\"ph1\">`ski`</ph> parameter.","pos":[475,677],"source":" However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter."}]},{"pos":[4942,4964],"content":"The X.509 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]},{"pos":[5060,5088],"content":"The security key identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security key identifier.","pos":[0,28]}]},{"pos":[5928,6124],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class based on the specified X.509 certificate, signature algorithm, and digest algorithm.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, signature algorithm, and digest algorithm."},{"pos":[6136,6279],"content":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, this constructor uses an &lt;xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause&gt; to generate the security key identifier.","pos":[0,143],"source":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier."}]},{"pos":[6594,6616],"content":"The X.509 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]},{"pos":[6691,6715],"content":"The signature algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature algorithm.","pos":[0,24]}]},{"pos":[6787,6808],"content":"The digest algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The digest algorithm.","pos":[0,21]}]},{"pos":[7814,8035],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm."},{"pos":[8047,8724],"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an &lt;xref:System.IdentityModel.Tokens.X509SecurityToken&gt; are &lt;xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause&gt;, &lt;xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause&gt;, &lt;xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause&gt;, and &lt;xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause&gt;.","pos":[0,474],"source":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>."},{"content":"However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the <ph id=\"ph1\">`ski`</ph> parameter.","pos":[475,677],"source":" However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter."}]},{"pos":[9094,9116],"content":"The X.509 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]},{"pos":[9212,9240],"content":"The security key identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security key identifier.","pos":[0,28]}]},{"pos":[9315,9339],"content":"The signature algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature algorithm.","pos":[0,24]}]},{"pos":[9411,9432],"content":"The digest algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The digest algorithm.","pos":[0,21]}]},{"pos":[9966,9993],"content":"Gets the X.509 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the X.509 certificate.","pos":[0,27]}]},{"pos":[10214,10236],"content":"The X.509 certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.X509SigningCredentials\n  id: X509SigningCredentials\n  children:\n  - System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  - System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)\n  - System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)\n  - System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n  langs:\n  - csharp\n  name: X509SigningCredentials\n  nameWithType: X509SigningCredentials\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials\n  type: Class\n  summary: Represents an X.509 token used as the signing credential.\n  syntax:\n    content: 'public class X509SigningCredentials : System.IdentityModel.Tokens.SigningCredentials'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SigningCredentials\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm\n  - System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm\n  - System.IdentityModel.Tokens.SigningCredentials.SigningKey\n  - System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)'\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: X509SigningCredentials(X509Certificate2)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2)\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.X509SigningCredentials(X509Certificate2)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate.\n  remarks: By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.\n  syntax:\n    content: public X509SigningCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)'\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier)\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate and security key identifier.\n  remarks: The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.\n  syntax:\n    content: public X509SigningCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.IdentityModel.Tokens.SecurityKeyIdentifier ski);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n    - id: ski\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: The security key identifier.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)'\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: X509SigningCredentials(X509Certificate2,String,String)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2,String,String)\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.X509SigningCredentials(X509Certificate2,String,String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, signature algorithm, and digest algorithm.\n  remarks: By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.\n  syntax:\n    content: public X509SigningCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, string signatureAlgorithm, string digestAlgorithm);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n    - id: signatureAlgorithm\n      type: System.String\n      description: The signature algorithm.\n    - id: digestAlgorithm\n      type: System.String\n      description: The digest algorithm.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)'\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier,String,String)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier,String,String)\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier,String,String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm.\n  remarks: The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.\n  syntax:\n    content: public X509SigningCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.IdentityModel.Tokens.SecurityKeyIdentifier ski, string signatureAlgorithm, string digestAlgorithm);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n    - id: ski\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: The security key identifier.\n    - id: signatureAlgorithm\n      type: System.String\n      description: The signature algorithm.\n    - id: digestAlgorithm\n      type: System.String\n      description: The digest algorithm.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n  id: Certificate\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: Certificate\n  nameWithType: X509SigningCredentials.Certificate\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the X.509 certificate.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.Certificate*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.SigningCredentials\n  isExternal: false\n  name: System.IdentityModel.Tokens.SigningCredentials\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials(X509Certificate2)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2)\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.X509SigningCredentials(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier)\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifier\n  nameWithType: SecurityKeyIdentifier\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials(X509Certificate2,String,String)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2,String,String)\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.X509SigningCredentials(X509Certificate2,String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier,String,String)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier,String,String)\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.X509SigningCredentials(X509Certificate2,SecurityKeyIdentifier,String,String)\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: Certificate\n  nameWithType: X509SigningCredentials.Certificate\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials\n  nameWithType: X509SigningCredentials.X509SigningCredentials\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.Certificate*\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: Certificate\n  nameWithType: X509SigningCredentials.Certificate\n"}