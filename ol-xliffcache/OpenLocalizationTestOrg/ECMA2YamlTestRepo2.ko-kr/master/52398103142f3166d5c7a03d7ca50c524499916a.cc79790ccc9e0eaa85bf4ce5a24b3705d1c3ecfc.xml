{"nodes":[{"pos":[691,942],"content":"Provides extension methods for retrieving <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDsa\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementations for the     public and private keys of a <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> certificate.","needQuote":true,"needEscape":true,"source":"Provides extension methods for retrieving <xref href=\"System.Security.Cryptography.ECDsa\"></xref> implementations for the     public and private keys of a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate."},{"pos":[1828,2010],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDsa\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> private key from the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> certificate.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> private key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate."},{"pos":[2317,2333],"content":"The certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The certificate.","pos":[0,16]}]},{"pos":[2412,2547],"content":"The private key, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the certificate does not have an ECDsa private key.","needQuote":true,"needEscape":true,"source":"The private key, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the certificate does not have an ECDsa private key."},{"pos":[2769,2858],"content":"<ph id=\"ph1\">&lt;code&gt;certificate&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>certificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[3596,3777],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDsa\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> public key from the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> certificate.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> public key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate."},{"pos":[4083,4099],"content":"The certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The certificate.","pos":[0,16]}]},{"pos":[4178,4311],"content":"The public key, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the certificate does not have an ECDsa public key.","needQuote":true,"needEscape":true,"source":"The public key, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the certificate does not have an ECDsa public key."},{"pos":[4532,4621],"content":"<ph id=\"ph1\">&lt;code&gt;certificate&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>certificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4770,4792],"content":"The handle is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle is invalid.","pos":[0,22]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  id: ECDsaCertificateExtensions\n  children:\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  langs:\n  - csharp\n  name: ECDsaCertificateExtensions\n  nameWithType: ECDsaCertificateExtensions\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  type: Class\n  summary: Provides extension methods for retrieving <xref href=\"System.Security.Cryptography.ECDsa\"></xref> implementations for the     public and private keys of a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.\n  syntax:\n    content: public static class ECDsaCertificateExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  id: GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  name: GetECDsaPrivateKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> private key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa GetECDsaPrivateKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The certificate.\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: The private key, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the certificate does not have an ECDsa private key.\n  overload: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>certificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  id: GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  name: GetECDsaPublicKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> public key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa GetECDsaPublicKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The certificate.\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: The public key, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the certificate does not have an ECDsa public key.\n  overload: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>certificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The handle is invalid.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPrivateKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPublicKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey*\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPrivateKey\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey*\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPublicKey\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey\n"}