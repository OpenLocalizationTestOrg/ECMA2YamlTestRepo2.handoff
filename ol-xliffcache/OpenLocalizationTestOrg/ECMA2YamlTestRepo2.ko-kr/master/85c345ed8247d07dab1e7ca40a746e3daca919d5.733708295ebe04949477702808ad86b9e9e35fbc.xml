{"nodes":[{"pos":[1251,1340],"content":"Contains the extension methods for the &lt;xref:System.Data.TypedTableBase%601&gt; class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains the extension methods for the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Data.TypedTableBase%601<ph id=\"ph2\">&amp;gt;</ph> class.","pos":[0,89],"source":"Contains the extension methods for the &lt;xref:System.Data.TypedTableBase%601&gt; class."}]},{"pos":[1353,1573],"content":"The class contains static extension methods that define the <xref:System.Data.TypedTableBaseExtensions.AsEnumerable%2A> method and standard query operations for typed data sets.       This class cannot be instantiated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The class contains static extension methods that define the <xref:System.Data.TypedTableBaseExtensions.AsEnumerable%2A> method and standard query operations for typed data sets.       This class cannot be instantiated.","pos":[0,218],"nodes":[{"content":"The class contains static extension methods that define the &lt;xref:System.Data.TypedTableBaseExtensions.AsEnumerable%2A&gt; method and standard query operations for typed data sets.","pos":[0,177],"source":"The class contains static extension methods that define the <xref:System.Data.TypedTableBaseExtensions.AsEnumerable%2A> method and standard query operations for typed data sets."},{"content":"This class cannot be instantiated.","pos":[184,218]}]}]},{"pos":[2525,2537],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2619,2631],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3581,3593],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3654,3666],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3715,3727],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4730,4742],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4819,4831],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4920,4932],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6114,6126],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6203,6215],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6309,6321],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6410,6422],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7479,7491],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7568,7580],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7669,7681],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8933,8945],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9022,9034],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9128,9140],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9229,9241],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10222,10234],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10305,10317],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10400,10412],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11410,11422],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11507,11519],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11601,11613],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.TypedTableBaseExtensions\n  id: TypedTableBaseExtensions\n  children:\n  - System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0}@)\n  - System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0}@,System.Int32)\n  - System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1})\n  - System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1})\n  - System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Data.TypedTableBaseExtensions.Select``2(``1ystem.Data.TypedTableBase{``0}@,``1ystem.Func{``0,``1})\n  - System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0}@,System.Func{``0,System.Boolean})\n  langs:\n  - csharp\n  name: TypedTableBaseExtensions\n  nameWithType: TypedTableBaseExtensions\n  fullName: System.Data.TypedTableBaseExtensions\n  type: Class\n  summary: Contains the extension methods for the &lt;xref:System.Data.TypedTableBase%601&gt; class.\n  remarks: \"The class contains static extension methods that define the <xref:System.Data.TypedTableBaseExtensions.AsEnumerable%2A> method and standard query operations for typed data sets.  \\n  \\n This class cannot be instantiated.\"\n  syntax:\n    content: public static class TypedTableBaseExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0}@)\n  id: AsEnumerable``1(System.Data.TypedTableBase{``0}@)\n  parent: System.Data.TypedTableBaseExtensions\n  langs:\n  - csharp\n  name: AsEnumerable(TypedTableBase<TRow>)\n  nameWithType: TypedTableBaseExtensions.AsEnumerable(TypedTableBase<TRow>)\n  fullName: System.Data.TypedTableBaseExtensions.AsEnumerable(TypedTableBase<TRow>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.EnumerableRowCollection<TRow> AsEnumerable<TRow> (this System.Data.TypedTableBase<TRow> source) where TRow : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.TypedTableBase{TRow}\n      description: To be added.\n    return:\n      type: System.Data.EnumerableRowCollection`1\n      description: To be added.\n  overload: System.Data.TypedTableBaseExtensions.AsEnumerable<TRow>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0}@,System.Int32)\n  id: ElementAtOrDefault``1(System.Data.TypedTableBase{``0}@,System.Int32)\n  parent: System.Data.TypedTableBaseExtensions\n  langs:\n  - csharp\n  name: ElementAtOrDefault(TypedTableBase<TRow>,Int32)\n  nameWithType: TypedTableBaseExtensions.ElementAtOrDefault(TypedTableBase<TRow>,Int32)\n  fullName: System.Data.TypedTableBaseExtensions.ElementAtOrDefault(TypedTableBase<TRow>,Int32)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static TRow ElementAtOrDefault<TRow> (this System.Data.TypedTableBase<TRow> source, int index) where TRow : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.TypedTableBase{TRow}\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: TRow\n      description: To be added.\n  overload: System.Data.TypedTableBaseExtensions.ElementAtOrDefault<TRow>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1})\n  id: OrderBy``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1})\n  parent: System.Data.TypedTableBaseExtensions\n  langs:\n  - csharp\n  name: OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>)\n  nameWithType: TypedTableBaseExtensions.OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>)\n  fullName: System.Data.TypedTableBaseExtensions.OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow,TKey> (this System.Data.TypedTableBase<TRow> source, Func<TRow,TKey> keySelector) where TRow : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.TypedTableBase{TRow}\n      description: To be added.\n    - id: keySelector\n      type: System.Func{TRow,TKey}\n      description: To be added.\n    return:\n      type: System.Data.OrderedEnumerableRowCollection`1\n      description: To be added.\n  overload: System.Data.TypedTableBaseExtensions.OrderBy<TRow,TKey>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: OrderBy``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Data.TypedTableBaseExtensions\n  langs:\n  - csharp\n  name: OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  nameWithType: TypedTableBaseExtensions.OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  fullName: System.Data.TypedTableBaseExtensions.OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.OrderedEnumerableRowCollection<TRow> OrderBy<TRow,TKey> (this System.Data.TypedTableBase<TRow> source, Func<TRow,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) where TRow : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.TypedTableBase{TRow}\n      description: To be added.\n    - id: keySelector\n      type: System.Func{TRow,TKey}\n      description: To be added.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: To be added.\n    return:\n      type: System.Data.OrderedEnumerableRowCollection`1\n      description: To be added.\n  overload: System.Data.TypedTableBaseExtensions.OrderBy<TRow,TKey>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1})\n  id: OrderByDescending``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1})\n  parent: System.Data.TypedTableBaseExtensions\n  langs:\n  - csharp\n  name: OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>)\n  nameWithType: TypedTableBaseExtensions.OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>)\n  fullName: System.Data.TypedTableBaseExtensions.OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow,TKey> (this System.Data.TypedTableBase<TRow> source, Func<TRow,TKey> keySelector) where TRow : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.TypedTableBase{TRow}\n      description: To be added.\n    - id: keySelector\n      type: System.Func{TRow,TKey}\n      description: To be added.\n    return:\n      type: System.Data.OrderedEnumerableRowCollection`1\n      description: To be added.\n  overload: System.Data.TypedTableBaseExtensions.OrderByDescending<TRow,TKey>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: OrderByDescending``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Data.TypedTableBaseExtensions\n  langs:\n  - csharp\n  name: OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  nameWithType: TypedTableBaseExtensions.OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  fullName: System.Data.TypedTableBaseExtensions.OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.OrderedEnumerableRowCollection<TRow> OrderByDescending<TRow,TKey> (this System.Data.TypedTableBase<TRow> source, Func<TRow,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) where TRow : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.TypedTableBase{TRow}\n      description: To be added.\n    - id: keySelector\n      type: System.Func{TRow,TKey}\n      description: To be added.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: To be added.\n    return:\n      type: System.Data.OrderedEnumerableRowCollection`1\n      description: To be added.\n  overload: System.Data.TypedTableBaseExtensions.OrderByDescending<TRow,TKey>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.TypedTableBaseExtensions.Select``2(``1ystem.Data.TypedTableBase{``0}@,``1ystem.Func{``0,``1})\n  id: Select``2(``1ystem.Data.TypedTableBase{``0}@,``1ystem.Func{``0,``1})\n  parent: System.Data.TypedTableBaseExtensions\n  langs:\n  - csharp\n  name: Select(TypedTableBase<TRow>,Func<TRow,S>)\n  nameWithType: TypedTableBaseExtensions.Select(TypedTableBase<TRow>,Func<TRow,S>)\n  fullName: System.Data.TypedTableBaseExtensions.Select(TypedTableBase<TRow>,Func<TRow,S>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.EnumerableRowCollection<S> Select<TRow,S> (this System.Data.TypedTableBase<TRow> source, Func<TRow,S> selector) where TRow : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.TypedTableBase{TRow}\n      description: To be added.\n    - id: selector\n      type: System.Func{TRow,S}\n      description: To be added.\n    return:\n      type: System.Data.EnumerableRowCollection{S}\n      description: To be added.\n  overload: System.Data.TypedTableBaseExtensions.Select<TRow,S>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0}@,System.Func{``0,System.Boolean})\n  id: Where``1(System.Data.TypedTableBase{``0}@,System.Func{``0,System.Boolean})\n  parent: System.Data.TypedTableBaseExtensions\n  langs:\n  - csharp\n  name: Where(TypedTableBase<TRow>,Func<TRow,Boolean>)\n  nameWithType: TypedTableBaseExtensions.Where(TypedTableBase<TRow>,Func<TRow,Boolean>)\n  fullName: System.Data.TypedTableBaseExtensions.Where(TypedTableBase<TRow>,Func<TRow,Boolean>)\n  type: Method\n  assemblies:\n  - System.Data.DataSetExtensions\n  namespace: System.Data\n  syntax:\n    content: 'public static System.Data.EnumerableRowCollection<TRow> Where<TRow> (this System.Data.TypedTableBase<TRow> source, Func<TRow,bool> predicate) where TRow : System.Data.DataRow;'\n    parameters:\n    - id: source\n      type: System.Data.TypedTableBase{TRow}\n      description: To be added.\n    - id: predicate\n      type: System.Func{TRow,System.Boolean}\n      description: To be added.\n    return:\n      type: System.Data.EnumerableRowCollection`1\n      description: To be added.\n  overload: System.Data.TypedTableBaseExtensions.Where<TRow>*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0}@)\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: AsEnumerable(TypedTableBase<TRow>)\n  nameWithType: TypedTableBaseExtensions.AsEnumerable(TypedTableBase<TRow>)\n  fullName: System.Data.TypedTableBaseExtensions.AsEnumerable(TypedTableBase<TRow>)\n- uid: System.Data.EnumerableRowCollection`1\n  parent: System.Data\n  isExternal: false\n  name: EnumerableRowCollection<TRow>\n  nameWithType: EnumerableRowCollection<TRow>\n  fullName: System.Data.EnumerableRowCollection<TRow>\n- uid: System.Data.TypedTableBase{TRow}\n  parent: System.Data\n  isExternal: false\n  name: TypedTableBase<TRow>\n  nameWithType: TypedTableBase<TRow>\n  fullName: System.Data.TypedTableBase<TRow>\n  spec.csharp:\n  - uid: System.Data.TypedTableBase`1\n    name: TypedTableBase\n    nameWithType: TypedTableBase\n    fullName: TypedTableBase<TRow>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TRow\n    name: TRow\n    nameWithType: TRow\n    fullName: TRow\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0}@,System.Int32)\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: ElementAtOrDefault(TypedTableBase<TRow>,Int32)\n  nameWithType: TypedTableBaseExtensions.ElementAtOrDefault(TypedTableBase<TRow>,Int32)\n  fullName: System.Data.TypedTableBaseExtensions.ElementAtOrDefault(TypedTableBase<TRow>,Int32)\n- uid: TRow\n  isExternal: true\n  name: TRow\n  nameWithType: TRow\n  fullName: TRow\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1})\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>)\n  nameWithType: TypedTableBaseExtensions.OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>)\n  fullName: System.Data.TypedTableBaseExtensions.OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>)\n- uid: System.Data.OrderedEnumerableRowCollection`1\n  parent: System.Data\n  isExternal: false\n  name: OrderedEnumerableRowCollection<TRow>\n  nameWithType: OrderedEnumerableRowCollection<TRow>\n  fullName: System.Data.OrderedEnumerableRowCollection<TRow>\n- uid: System.Func{TRow,TKey}\n  parent: System\n  isExternal: true\n  name: Func<TRow,TKey>\n  nameWithType: Func<TRow,TKey>\n  fullName: System.Func<TRow,TKey>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<TRow,TKey>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TRow\n    name: TRow\n    nameWithType: TRow\n    fullName: TRow\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  nameWithType: TypedTableBaseExtensions.OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  fullName: System.Data.TypedTableBaseExtensions.OrderBy(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n- uid: System.Collections.Generic.IComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IComparer<TKey>\n  nameWithType: IComparer<TKey>\n  fullName: System.Collections.Generic.IComparer<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    nameWithType: IComparer\n    fullName: IComparer<TKey>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1})\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>)\n  nameWithType: TypedTableBaseExtensions.OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>)\n  fullName: System.Data.TypedTableBaseExtensions.OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>)\n- uid: System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0}@,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  nameWithType: TypedTableBaseExtensions.OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n  fullName: System.Data.TypedTableBaseExtensions.OrderByDescending(TypedTableBase<TRow>,Func<TRow,TKey>,IComparer<TKey>)\n- uid: System.Data.TypedTableBaseExtensions.Select``2(``1ystem.Data.TypedTableBase{``0}@,``1ystem.Func{``0,``1})\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: Select(TypedTableBase<TRow>,Func<TRow,S>)\n  nameWithType: TypedTableBaseExtensions.Select(TypedTableBase<TRow>,Func<TRow,S>)\n  fullName: System.Data.TypedTableBaseExtensions.Select(TypedTableBase<TRow>,Func<TRow,S>)\n- uid: System.Data.EnumerableRowCollection{S}\n  parent: System.Data\n  isExternal: false\n  name: EnumerableRowCollection<S>\n  nameWithType: EnumerableRowCollection<S>\n  fullName: System.Data.EnumerableRowCollection<S>\n  spec.csharp:\n  - uid: System.Data.EnumerableRowCollection`1\n    name: EnumerableRowCollection\n    nameWithType: EnumerableRowCollection\n    fullName: EnumerableRowCollection<S>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: S\n    name: S\n    nameWithType: S\n    fullName: S\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{TRow,S}\n  parent: System\n  isExternal: true\n  name: Func<TRow,S>\n  nameWithType: Func<TRow,S>\n  fullName: System.Func<TRow,S>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<TRow,S>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TRow\n    name: TRow\n    nameWithType: TRow\n    fullName: TRow\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: S\n    name: S\n    nameWithType: S\n    fullName: S\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0}@,System.Func{``0,System.Boolean})\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: Where(TypedTableBase<TRow>,Func<TRow,Boolean>)\n  nameWithType: TypedTableBaseExtensions.Where(TypedTableBase<TRow>,Func<TRow,Boolean>)\n  fullName: System.Data.TypedTableBaseExtensions.Where(TypedTableBase<TRow>,Func<TRow,Boolean>)\n- uid: System.Func{TRow,System.Boolean}\n  parent: System\n  isExternal: true\n  name: Func<TRow,Boolean>\n  nameWithType: Func<TRow,Boolean>\n  fullName: System.Func<TRow,System.Boolean>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<TRow,System.Boolean>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TRow\n    name: TRow\n    nameWithType: TRow\n    fullName: TRow\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.TypedTableBaseExtensions.AsEnumerable<TRow>*\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: AsEnumerable<TRow>\n  nameWithType: TypedTableBaseExtensions.AsEnumerable<TRow>\n- uid: System.Data.TypedTableBaseExtensions.ElementAtOrDefault<TRow>*\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: ElementAtOrDefault<TRow>\n  nameWithType: TypedTableBaseExtensions.ElementAtOrDefault<TRow>\n- uid: System.Data.TypedTableBaseExtensions.OrderBy<TRow,TKey>*\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: OrderBy<TRow,TKey>\n  nameWithType: TypedTableBaseExtensions.OrderBy<TRow,TKey>\n- uid: System.Data.TypedTableBaseExtensions.OrderByDescending<TRow,TKey>*\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: OrderByDescending<TRow,TKey>\n  nameWithType: TypedTableBaseExtensions.OrderByDescending<TRow,TKey>\n- uid: System.Data.TypedTableBaseExtensions.Select<TRow,S>*\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: Select<TRow,S>\n  nameWithType: TypedTableBaseExtensions.Select<TRow,S>\n- uid: System.Data.TypedTableBaseExtensions.Where<TRow>*\n  parent: System.Data.TypedTableBaseExtensions\n  isExternal: false\n  name: Where<TRow>\n  nameWithType: TypedTableBaseExtensions.Where<TRow>\n"}