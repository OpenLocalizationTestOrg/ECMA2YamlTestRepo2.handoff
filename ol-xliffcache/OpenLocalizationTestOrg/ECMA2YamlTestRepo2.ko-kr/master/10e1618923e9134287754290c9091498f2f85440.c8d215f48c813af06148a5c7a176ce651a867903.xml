{"nodes":[{"pos":[2931,3023],"content":"Allows an application to determine whether a remote computer is accessible over the network.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows an application to determine whether a remote computer is accessible over the network.","pos":[0,92]}]},{"pos":[3036,9016],"content":"Applications use the Ping class to detect whether a remote computer is reachable.       Network topology can determine whether Ping can successfully contact a remote host. The presence and configuration of proxies, network address translation (NAT) equipment, or firewalls can prevent Ping from succeeding. A successful Ping indicates only that the remote host can be reached on the network; the presence of higher level services (such as a Web server) on the remote host is not guaranteed.       This class provides functionality similar to the Ping.exe command line tool. The <xref:System.Net.NetworkInformation.Ping.Send%2A> and <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods send an Internet Control Message Protocol (ICMP) echo request message to a remote computer and waits for an ICMP echo reply message from that computer. For a detailed description of ICMP messages, see RFC 792, available at [http://www.ietf.org](http://www.ietf.org/).       The following types are used with the Ping class and are described in detail below.      |**Type name**|**Description**|   |-------------------|---------------------|   |<xref:System.Net.NetworkInformation.IPStatus>|Defines status codes that describe the outcome of an ICMP echo request message.|   |<xref:System.Net.NetworkInformation.PingOptions>|Allows you to configure or retrieve the settings that control how many times the request packet can be forwarded (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>), and whether it can be fragmented (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|   |<xref:System.Net.NetworkInformation.PingReply>|Contains the results of an ICMP echo request.|   |<xref:System.Net.NetworkInformation.PingException>|Thrown if an unrecoverable error occurs.|   |<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Contains the data associated with <xref:System.Net.NetworkInformation.Ping.PingCompleted> events, which are raised when a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call completes or is canceled.|   |<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|The delegate that provides the callback method invoked when a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call completes or is canceled.|       The <xref:System.Net.NetworkInformation.Ping.Send%2A> and <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods return the reply in a <xref:System.Net.NetworkInformation.PingReply> object. The <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=fullName> property returns an <xref:System.Net.NetworkInformation.IPStatus> value to indicate the outcome of the request.       When sending the request, you must specify the remote computer. You can do this by providing a host name string, an IP address in string format, or an <xref:System.Net.IPAddress> object.       You can also specify any of the following types of information:      -   Data to accompany the request. Specifying `buffer` allows you to learn the amount of time required for a packet of a particular size to travel to and from the remote host and the maximum transmission unit of the network path. (See the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take a `buffer` parameter.)      -   Whether the ICMP Echo packet can be fragmented in transit. (See the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property and the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take an `options` parameter.)      -   How many times routing nodes, such as routers or gateways, can forward the packet before it either reaches the destination computer or is discarded. (See <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> and the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take an `options` parameter.)      -   The time limit within which the reply must be received. (See the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take a `timeout` parameter.       The Ping class offers both synchronous and asynchronous methods for sending the request. If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous. If your application should not block, use the asynchronous <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods. A call to <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> executes in its own thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called for <xref:System.Net.NetworkInformation.Ping.PingCompleted> events. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.       You cannot use the same instance of the Ping class to generate multiple simultaneous ICMP Echo requests. Calling <xref:System.Net.NetworkInformation.Ping.Send%2A> while a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call is in progress or calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> multiple times before all previous calls have completed causes an <xref:System.InvalidOperationException>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Applications use the Ping class to detect whether a remote computer is reachable.","pos":[0,81]},{"content":"Network topology can determine whether Ping can successfully contact a remote host.","pos":[88,171]},{"content":"The presence and configuration of proxies, network address translation (NAT) equipment, or firewalls can prevent Ping from succeeding.","pos":[172,306]},{"content":"A successful Ping indicates only that the remote host can be reached on the network; the presence of higher level services (such as a Web server) on the remote host is not guaranteed.","pos":[307,490]},{"content":"This class provides functionality similar to the Ping.exe command line tool.","pos":[497,573]},{"content":"The &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; and &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods send an Internet Control Message Protocol (ICMP) echo request message to a remote computer and waits for an ICMP echo reply message from that computer.","pos":[574,846],"source":" The <xref:System.Net.NetworkInformation.Ping.Send%2A> and <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods send an Internet Control Message Protocol (ICMP) echo request message to a remote computer and waits for an ICMP echo reply message from that computer."},{"content":"For a detailed description of ICMP messages, see RFC 792, available at <bpt id=\"p1\">[</bpt>http://www.ietf.org<ept id=\"p1\">](http://www.ietf.org/)</ept>.","pos":[847,962],"source":" For a detailed description of ICMP messages, see RFC 792, available at [http://www.ietf.org](http://www.ietf.org/)."},{"content":"The following types are used with the Ping class and are described in detail below.","pos":[969,1052]},{"content":"|<bpt id=\"p1\">**</bpt>Type name<ept id=\"p1\">**</ept><ph id=\"ph1\">|</ph><bpt id=\"p2\">**</bpt>Description<ept id=\"p2\">**</ept>|   |-------------------|---------------------|   |&lt;xref:System.Net.NetworkInformation.IPStatus&gt;|Defines status codes that describe the outcome of an ICMP echo request message.|   |&lt;xref:System.Net.NetworkInformation.PingOptions&gt;|Allows you to configure or retrieve the settings that control how many times the request packet can be forwarded (&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;), and whether it can be fragmented (&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; ).|   |&lt;xref:System.Net.NetworkInformation.PingReply&gt;|Contains the results of an ICMP echo request.|   |&lt;xref:System.Net.NetworkInformation.PingException&gt;|Thrown if an unrecoverable error occurs.|   |&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;|Contains the data associated with &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; events, which are raised when a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call completes or is canceled.|   |&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;|The delegate that provides the callback method invoked when a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call completes or is canceled.|       The &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; and &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods return the reply in a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object.","pos":[1058,2476],"source":"      |**Type name**|**Description**|   |-------------------|---------------------|   |<xref:System.Net.NetworkInformation.IPStatus>|Defines status codes that describe the outcome of an ICMP echo request message.|   |<xref:System.Net.NetworkInformation.PingOptions>|Allows you to configure or retrieve the settings that control how many times the request packet can be forwarded (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>), and whether it can be fragmented (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|   |<xref:System.Net.NetworkInformation.PingReply>|Contains the results of an ICMP echo request.|   |<xref:System.Net.NetworkInformation.PingException>|Thrown if an unrecoverable error occurs.|   |<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Contains the data associated with <xref:System.Net.NetworkInformation.Ping.PingCompleted> events, which are raised when a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call completes or is canceled.|   |<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|The delegate that provides the callback method invoked when a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call completes or is canceled.|       The <xref:System.Net.NetworkInformation.Ping.Send%2A> and <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods return the reply in a <xref:System.Net.NetworkInformation.PingReply> object."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=fullName&gt; property returns an &lt;xref:System.Net.NetworkInformation.IPStatus&gt; value to indicate the outcome of the request.","pos":[2477,2674],"source":" The <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=fullName> property returns an <xref:System.Net.NetworkInformation.IPStatus> value to indicate the outcome of the request."},{"content":"When sending the request, you must specify the remote computer.","pos":[2681,2744]},{"content":"You can do this by providing a host name string, an IP address in string format, or an &lt;xref:System.Net.IPAddress&gt; object.","pos":[2745,2867],"source":" You can do this by providing a host name string, an IP address in string format, or an <xref:System.Net.IPAddress> object."},{"content":"You can also specify any of the following types of information:      -   Data to accompany the request.","pos":[2874,2977]},{"content":"Specifying <ph id=\"ph1\">`buffer`</ph> allows you to learn the amount of time required for a packet of a particular size to travel to and from the remote host and the maximum transmission unit of the network path.","pos":[2978,3172],"source":" Specifying `buffer` allows you to learn the amount of time required for a packet of a particular size to travel to and from the remote host and the maximum transmission unit of the network path."},{"content":"(See the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; or &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overloads that take a <ph id=\"ph1\">`buffer`</ph> parameter.)      -   Whether the ICMP Echo packet can be fragmented in transit.","pos":[3173,3400],"source":" (See the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take a `buffer` parameter.)      -   Whether the ICMP Echo packet can be fragmented in transit."},{"content":"(See the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property and the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; or &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overloads that take an <ph id=\"ph1\">`options`</ph> parameter.)      -   How many times routing nodes, such as routers or gateways, can forward the packet before it either reaches the destination computer or is discarded.","pos":[3401,3802],"source":" (See the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property and the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take an `options` parameter.)      -   How many times routing nodes, such as routers or gateways, can forward the packet before it either reaches the destination computer or is discarded."},{"content":"(See &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; and the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; or &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overloads that take an <ph id=\"ph1\">`options`</ph> parameter.)      -   The time limit within which the reply must be received.","pos":[3803,4089],"source":" (See <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> and the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take an `options` parameter.)      -   The time limit within which the reply must be received."},{"content":"(See the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; or &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overloads that take a <ph id=\"ph1\">`timeout`</ph> parameter.","pos":[4090,4249],"source":" (See the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take a `timeout` parameter."},{"content":"The Ping class offers both synchronous and asynchronous methods for sending the request.","pos":[4256,4344]},{"content":"If your application should block while waiting for a reply, use the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[4345,4502],"source":" If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"If your application should not block, use the asynchronous &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods.","pos":[4503,4625],"source":" If your application should not block, use the asynchronous <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods."},{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; executes in its own thread that is automatically allocated from the thread pool.","pos":[4626,4771],"source":" A call to <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> executes in its own thread that is automatically allocated from the thread pool."},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[4772,4891],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"Applications use a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to specify the method that is called for &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; events.","pos":[4892,5087],"source":" Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called for <xref:System.Net.NetworkInformation.Ping.PingCompleted> events."},{"content":"You must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[5088,5258],"source":" You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object that contains a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[5259,5522],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"You cannot use the same instance of the Ping class to generate multiple simultaneous ICMP Echo requests.","pos":[5529,5633]},{"content":"Calling &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; while a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call is in progress or calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; multiple times before all previous calls have completed causes an &lt;xref:System.InvalidOperationException&gt;.","pos":[5634,5947],"source":" Calling <xref:System.Net.NetworkInformation.Ping.Send%2A> while a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call is in progress or calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> multiple times before all previous calls have completed causes an <xref:System.InvalidOperationException>."}]},{"pos":[10756,10852],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.Ping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.Ping\"></xref> class."},{"pos":[11799,11957],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.Ping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object, and optionally disposes of the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.NetworkInformation.Ping\"></xref> object, and optionally disposes of the managed resources."},{"pos":[11970,12560],"content":"This method is called by the public `Dispose()` method and the <xref:System.ComponentModel.Component.Finalize%2A> method. The public `Dispose()` method invokes the protected Dispose method with the `disposing` parameter set to `true`. <xref:System.ComponentModel.Component.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.NetworkInformation.Ping> object references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the &lt;xref:System.ComponentModel.Component.Finalize%2A&gt; method.","pos":[0,121],"source":"This method is called by the public `Dispose()` method and the <xref:System.ComponentModel.Component.Finalize%2A> method."},{"content":"The public <ph id=\"ph1\">`Dispose()`</ph> method invokes the protected Dispose method with the <ph id=\"ph2\">`disposing`</ph> parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[122,234],"source":" The public `Dispose()` method invokes the protected Dispose method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.ComponentModel.Component.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[235,336],"source":" <xref:System.ComponentModel.Component.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Net.NetworkInformation.Ping&gt; object references.","pos":[343,518],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.NetworkInformation.Ping> object references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[519,588],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[12717,12927],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to releases only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to releases only unmanaged resources."},{"pos":[13567,13654],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.Ping.PingCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Net.NetworkInformation.Ping.PingCompleted\"></xref> event."},{"pos":[13667,14235],"content":"Classes that inherit from the <xref:System.Net.NetworkInformation.Ping> class can override this method to perform additional tasks, such as logging the data contained in the `e` parameter.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnPingCompleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Classes that inherit from the &lt;xref:System.Net.NetworkInformation.Ping&gt; class can override this method to perform additional tasks, such as logging the data contained in the <ph id=\"ph1\">`e`</ph> parameter.","pos":[0,188],"source":"Classes that inherit from the <xref:System.Net.NetworkInformation.Ping> class can override this method to perform additional tasks, such as logging the data contained in the `e` parameter."},{"content":"Raising an event invokes the event handler through a delegate.","pos":[195,257]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[258,378],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."},{"content":"The OnPingCompleted method also allows derived classes to handle the event without attaching a delegate.","pos":[385,489]},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[490,564]}]},{"pos":[14461,14569],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingCompletedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingCompletedEventArgs\"></xref> object that contains event data."},{"pos":[15026,15208],"content":"Occurs when an asynchronous operation to send an Internet Control Message Protocol (ICMP) echo message and receive the corresponding ICMP echo reply message completes or is canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when an asynchronous operation to send an Internet Control Message Protocol (ICMP) echo message and receive the corresponding ICMP echo reply message completes or is canceled.","pos":[0,182]}]},{"pos":[15220,15607],"content":"Applications use the PingCompleted event to get information about the completion status and data collected by a call to one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods. The <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate provides the call back method invoked when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises this event.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Applications use the PingCompleted event to get information about the completion status and data collected by a call to one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods. The <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate provides the call back method invoked when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises this event.","pos":[0,387],"nodes":[{"content":"Applications use the PingCompleted event to get information about the completion status and data collected by a call to one of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods.","pos":[0,194],"source":"Applications use the PingCompleted event to get information about the completion status and data collected by a call to one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate provides the call back method invoked when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises this event.","pos":[195,387],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate provides the call back method invoked when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises this event."}]}]},{"pos":[16203,16215],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16641,16854],"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,213],"source":"Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer."}]},{"pos":[16867,18822],"content":"This method sends to the host that is specified by `address` a 32 <xref:System.Byte> data buffer with the ICMP echo message. The method waits five seconds for an ICMP echo reply message. If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method sends to the host that is specified by <ph id=\"ph1\">`address`</ph> a 32 &lt;xref:System.Byte&gt; data buffer with the ICMP echo message.","pos":[0,124],"source":"This method sends to the host that is specified by `address` a 32 <xref:System.Byte> data buffer with the ICMP echo message."},{"content":"The method waits five seconds for an ICMP echo reply message.","pos":[125,186]},{"content":"If it does not receive a reply in that time, the method returns and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[187,381],"source":" If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[388,471]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[472,696]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[697,927],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[928,1186],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1187,1323],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.","pos":[1324,1438]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[1439,1661],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[1662,1816]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1817,1953],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[19278,19388],"content":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,110],"source":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message."}]},{"pos":[19472,19691],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingReply\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides information about the ICMP echo reply message, if one was received, or describes the reason for the failure if no message was received.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or describes the reason for the failure if no message was received."},{"pos":[19861,19946],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,85],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[20057,20135],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[20238,20358],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[20491,20625],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[20732,20762],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[21148,21320],"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,172]}]},{"pos":[21333,23245],"content":"This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message. The method waits five seconds for an ICMP echo reply message. If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method sends a 32 &lt;xref:System.Byte&gt; data buffer with the ICMP echo message.","pos":[0,81],"source":"This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message."},{"content":"The method waits five seconds for an ICMP echo reply message.","pos":[82,143]},{"content":"If it does not receive a reply in that time, the method returns and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[144,338],"source":" If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[345,428]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[429,653]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[654,884],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[885,1143],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1144,1280],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.","pos":[1281,1395]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[1396,1618],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[1619,1773]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1774,1910],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[23700,23905],"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,205],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,102],"source":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[103,205]}]}]},{"pos":[23989,24208],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingReply\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received."},{"pos":[24378,24500],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is an empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\")."},{"pos":[24611,24689],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[24792,24912],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[25045,25179],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[25286,25316],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[25769,26083],"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.","pos":[0,314],"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,244],"source":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer."},{"content":"This method allows you to specify a time-out value for the operation.","pos":[245,314]}]}]},{"pos":[26096,28061],"content":"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the ICMP echo reply message is not received within the time specified in the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[0,252],"source":"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[258,396],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[403,486]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[487,711]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[712,942],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[943,1201],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1202,1338],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.","pos":[1345,1443]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[1444,1666],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[1667,1821]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1822,1958],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[28451,28561],"content":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,110],"source":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message."}]},{"pos":[28624,28776],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[28860,29077],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingReply\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received."},{"pos":[29247,29332],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,85],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[29447,29486],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[29597,29675],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[29778,29898],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[30031,30165],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[30272,30302],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[30732,30974],"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.","pos":[0,242],"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,172]},{"content":"This method allows you to specify a time-out value for the operation.","pos":[173,242]}]}]},{"pos":[30987,32960],"content":"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the ICMP echo reply message is not received within the time specified in the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[0,252],"source":"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[258,396],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[403,486]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[487,711]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[712,942],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[943,1201],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1202,1338],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.","pos":[1339,1453]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[1454,1676],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[1677,1831]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1832,1968],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[33349,33554],"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,205],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,102],"source":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[103,205]}]}]},{"pos":[33617,33769],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[33853,34070],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingReply\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received."},{"pos":[34240,34362],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is an empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\")."},{"pos":[34477,34516],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[34627,34705],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[34838,34972],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[35079,35109],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[35611,35927],"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","pos":[0,316],"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,244],"source":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer."},{"content":"This overload allows you to specify a time-out value for the operation.","pos":[245,316]}]}]},{"pos":[35940,37905],"content":"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the ICMP echo reply message is not received within the time specified in the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[0,252],"source":"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[258,396],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[403,486]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[487,711]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[712,942],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[943,1201],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1202,1338],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.","pos":[1345,1443]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[1444,1666],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[1667,1821]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1822,1958],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[38389,38499],"content":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,110],"source":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message."}]},{"pos":[38562,38714],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[38777,38954],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[39038,39399],"content":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <xref href=\"System.Net.NetworkInformation.IPStatus\"></xref> if the packet exceeds the Maximum Transmission Unit (MTU).","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingReply\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.","pos":[0,219],"source":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received."},{"content":"The method will return <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.IPStatus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the packet exceeds the Maximum Transmission Unit (MTU).","pos":[220,361],"source":" The method will return <xref href=\"System.Net.NetworkInformation.IPStatus\"></xref> if the packet exceeds the Maximum Transmission Unit (MTU)."}]},{"pos":[39561,39613],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65500 bytes."},{"pos":[39717,39981],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.","pos":[20,248],"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[1,65],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or the <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph> size is greater than 65500 bytes.","pos":[72,228],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes."}]}]},{"pos":[40097,40136],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[40247,40325],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[40428,40548],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[40681,40815],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[40922,40952],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[41431,41706],"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","pos":[0,275],"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,203]},{"content":"This overload allows you to specify a time-out value for the operation.","pos":[204,275]}]}]},{"pos":[41719,43684],"content":"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the ICMP echo reply message is not received within the time specified in the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[0,252],"source":"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[258,396],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[403,486]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[487,711]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[712,942],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[943,1201],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1202,1338],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.","pos":[1345,1443]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[1444,1666],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[1667,1821]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1822,1958],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[44094,44299],"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,205],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,102],"source":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[103,205]}]}]},{"pos":[44362,44514],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[44577,44754],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[44838,45055],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingReply\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received."},{"pos":[45217,45269],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65500 bytes."},{"pos":[45373,45676],"content":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is an empty string (\"\").","pos":[0,122],"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\")."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or the <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph> size is greater than 65500 bytes.","pos":[129,285],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes."}]},{"pos":[45792,45831],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[45942,46020],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[46153,46287],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[46394,46424],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[47046,47444],"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress> and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress> and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.","pos":[0,398],"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt; and receive a corresponding ICMP echo reply message from that computer.","pos":[0,243],"source":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress> and receive a corresponding ICMP echo reply message from that computer."},{"content":"This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.","pos":[244,398]}]}]},{"pos":[47457,48755],"content":"If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the ICMP echo reply message is not received within the time specified by the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[0,252],"source":"If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[258,396],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"If the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[403,672],"source":"       If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[673,809],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"Use the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination.","pos":[816,999],"source":"       Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[1000,1154]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1155,1291],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[49290,49400],"content":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,110],"source":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message."}]},{"pos":[49463,49615],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[49678,49855],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[49947,50106],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet."},{"pos":[50190,50551],"content":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <xref href=\"System.Net.NetworkInformation.IPStatus\"></xref> if the packet exceeds the Maximum Transmission Unit (MTU).","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingReply\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.","pos":[0,219],"source":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received."},{"content":"The method will return <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.IPStatus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the packet exceeds the Maximum Transmission Unit (MTU).","pos":[220,361],"source":" The method will return <xref href=\"System.Net.NetworkInformation.IPStatus\"></xref> if the packet exceeds the Maximum Transmission Unit (MTU)."}]},{"pos":[50713,50765],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65500 bytes."},{"pos":[50869,51133],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.","pos":[20,248],"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[1,65],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or the <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph> size is greater than 65500 bytes.","pos":[72,228],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes."}]}]},{"pos":[51249,51288],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[51399,51477],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[51580,51700],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[51833,51967],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[52074,52104],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[52703,53048],"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.","pos":[0,345],"nodes":[{"content":"Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,203]},{"content":"This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.","pos":[204,345]}]}]},{"pos":[53061,54359],"content":"If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the ICMP echo reply message is not received within the time specified by the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[0,252],"source":"If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[258,396],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"If the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[403,672],"source":"       If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[673,809],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"Use the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination.","pos":[816,999],"source":"       Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[1000,1154]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1155,1291],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[54893,55098],"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,205],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,102],"source":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[103,205]}]}]},{"pos":[55161,55313],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[55376,55553],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[55645,55804],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet."},{"pos":[55888,56105],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingReply\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received."},{"pos":[56267,56319],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65500 bytes."},{"pos":[56423,56724],"content":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is a zero length string.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is a zero length string.","pos":[0,122],"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is a zero length string."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or the <ph id=\"ph2\">&lt;code&gt;buffer&lt;/code&gt;</ph> size is greater than 65500 bytes.","pos":[129,285],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes."}]},{"pos":[56840,56879],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[56990,57068],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[57171,57291],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[57424,57558],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[57665,57695],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[58178,58406],"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,228],"source":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer."}]},{"pos":[58419,61912],"content":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call to this method executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.      > [!NOTE] >  If your application should block while waiting for a reply, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.       This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message. The method waits five seconds for an ICMP echo reply message. If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.","pos":[0,211],"source":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application."},{"content":"Call the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method when your application should not block.","pos":[212,322],"source":" Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block."},{"content":"Each call to this method executes in a separate thread that is automatically allocated from the thread pool.","pos":[323,431]},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[432,551],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"To specify the method that is called when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises the event, you must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[552,837],"source":" To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object that contains a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[838,1101],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object inherits the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt; property.","pos":[1102,1261],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"This property contains the <ph id=\"ph1\">`userToken`</ph> object passed into the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[1262,1384],"source":" This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If your application should block while waiting for a reply, use one of the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[1390,1567],"source":"      > [!NOTE] >  If your application should block while waiting for a reply, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"This method sends a 32 &lt;xref:System.Byte&gt; data buffer with the ICMP echo message.","pos":[1574,1655],"source":"       This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message."},{"content":"The method waits five seconds for an ICMP echo reply message.","pos":[1656,1717]},{"content":"If it does not receive a reply in that time, the method returns and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1718,1912],"source":" If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[1919,2002]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[2003,2227]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[2228,2463],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[2464,2722],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2723,2859],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.","pos":[2866,2964]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[2965,3192],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[3193,3347]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[3348,3484],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[62286,62396],"content":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,110],"source":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message."}]},{"pos":[62462,62551],"content":"An object that is passed to the method invoked when the asynchronous operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,89]}]},{"pos":[62726,62811],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,85],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[62922,63011],"content":"A call to the <xref:System.Net.NetworkInformation.Ping.SendAsync*> method is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; method is in progress.","pos":[0,89],"source":"A call to the <xref:System.Net.NetworkInformation.Ping.SendAsync*> method is in progress."}]},{"pos":[63114,63234],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[63367,63501],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[63616,63663],"content":"<code>address</code> is not a valid IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"is not a valid IP address.","pos":[21,47]}]},{"pos":[63770,63800],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[64260,64447],"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,187]}]},{"pos":[64460,67855],"content":"The SendAsync method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the SendAsync method when your application should not block. Each call to this method executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.      > [!NOTE] >  If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.       This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message. The method waits five seconds for an ICMP echo reply message. If it does not receive a reply in that time the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SendAsync method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.","pos":[0,166]},{"content":"Call the SendAsync method when your application should not block.","pos":[167,232]},{"content":"Each call to this method executes in a separate thread that is automatically allocated from the thread pool.","pos":[233,341]},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[342,461],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"To specify the method that is called when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises the event, you must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[462,747],"source":" To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object that contains a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[748,1011],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object inherits the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt; property.","pos":[1012,1171],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"This property contains the <ph id=\"ph1\">`userToken`</ph> object passed into the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[1172,1294],"source":" This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If your application should block while waiting for a reply, use the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[1300,1470],"source":"      > [!NOTE] >  If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"This method sends a 32 &lt;xref:System.Byte&gt; data buffer with the ICMP echo message.","pos":[1477,1558],"source":"       This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message."},{"content":"The method waits five seconds for an ICMP echo reply message.","pos":[1559,1620]},{"content":"If it does not receive a reply in that time the method returns and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1621,1814],"source":" If it does not receive a reply in that time the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[1821,1904]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[1905,2129]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[2130,2365],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[2366,2624],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2625,2761],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.","pos":[2768,2866]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[2867,3094],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[3095,3249]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[3250,3386],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[68230,68435],"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,205],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,102],"source":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[103,205]}]}]},{"pos":[68501,68590],"content":"An object that is passed to the method invoked when the asynchronous operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,89]}]},{"pos":[68765,68887],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is an empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\")."},{"pos":[68998,69040],"content":"A call to SendAsync method is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to SendAsync method is in progress.","pos":[0,42]}]},{"pos":[69143,69263],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[69396,69530],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[69645,69720],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> could not be resolved to a valid IP address.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> could not be resolved to a valid IP address."},{"pos":[69827,69857],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[70384,70684],"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","pos":[0,300],"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,228],"source":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer."},{"content":"This overload allows you to specify a time-out value for the operation.","pos":[229,300]}]}]},{"pos":[70697,74315],"content":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.       If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.","pos":[0,211],"source":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application."},{"content":"Call the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method when your application should not block.","pos":[212,322],"source":" Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block."},{"content":"Each call executes in a separate thread that is automatically allocated from the thread pool.","pos":[323,416]},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[417,536],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"Applications use a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to specify the method that is called when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises the event.","pos":[537,742],"source":" Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event."},{"content":"You must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[743,913],"source":" You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object that contains a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[914,1177],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object inherits the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt; property.","pos":[1178,1337],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"This property contains the <ph id=\"ph1\">`userToken`</ph> object passed into the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[1338,1460],"source":" This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"If your application should block while waiting for a reply, use the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[1467,1624],"source":"       If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"If the ICMP echo reply message is not received within the time specified by the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1631,1883],"source":"       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[1889,2027],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[2034,2117]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[2118,2342]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[2343,2578],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[2579,2837],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2838,2974],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.","pos":[2975,3089]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[3090,3317],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[3318,3472]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[3473,3609],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[74704,74814],"content":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,110],"source":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message."}]},{"pos":[74877,75029],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[75095,75184],"content":"An object that is passed to the method invoked when the asynchronous operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,89]}]},{"pos":[75359,75444],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,85],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[75559,75598],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[75709,75794],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> method is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; method is in progress.","pos":[0,85],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> method is in progress."}]},{"pos":[75897,76017],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[76150,76284],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[76399,76446],"content":"<code>address</code> is not a valid IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"is not a valid IP address.","pos":[21,47]}]},{"pos":[76553,76583],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[77087,77346],"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","pos":[0,259],"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,187]},{"content":"This overload allows you to specify a time-out value for the operation.","pos":[188,259]}]}]},{"pos":[77359,80977],"content":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.       If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.","pos":[0,211],"source":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application."},{"content":"Call the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method when your application should not block.","pos":[212,322],"source":" Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block."},{"content":"Each call executes in a separate thread that is automatically allocated from the thread pool.","pos":[323,416]},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[417,536],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"Applications use a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to specify the method that is called when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises the event.","pos":[537,742],"source":" Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event."},{"content":"You must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[743,913],"source":" You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object that contains a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[914,1177],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object inherits the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt; property.","pos":[1178,1337],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"This property contains the <ph id=\"ph1\">`userToken`</ph> object passed into the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[1338,1460],"source":" This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"If your application should block while waiting for a reply, use the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[1467,1624],"source":"       If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"If the ICMP echo reply message is not received within the time specified by the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1631,1883],"source":"       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[1889,2027],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[2034,2117]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[2118,2342]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[2343,2578],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[2579,2837],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2838,2974],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.","pos":[2975,3089]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[3090,3317],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[3318,3472]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[3473,3609],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[81365,81570],"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,205],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,102],"source":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[103,205]}]}]},{"pos":[81633,81785],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[81851,81940],"content":"An object that is passed to the method invoked when the asynchronous operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,89]}]},{"pos":[82115,82237],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is an empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\")."},{"pos":[82352,82391],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[82502,82580],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[82683,82813],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000."},{"pos":[82946,83080],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[83195,83270],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> could not be resolved to a valid IP address.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> could not be resolved to a valid IP address."},{"pos":[83377,83407],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[83983,84314],"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","pos":[0,331],"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,259],"source":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer."},{"content":"This overload allows you to specify a time-out value for the operation.","pos":[260,331]}]}]},{"pos":[84327,87807],"content":"This method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.      > [!NOTE] >  If your application blocks while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.","pos":[0,157]},{"content":"Call the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method when your application should not block.","pos":[158,268],"source":" Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block."},{"content":"Each call executes in a separate thread that is automatically allocated from the thread pool.","pos":[269,362]},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[363,482],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"To specify the method that is called when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises the event, you must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[483,768],"source":" To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object that contains a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[769,1032],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object inherits the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt; property.","pos":[1033,1192],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"This property contains the <ph id=\"ph1\">`userToken`</ph> object passed into the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[1193,1315],"source":" This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If your application blocks while waiting for a reply, use the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[1321,1485],"source":"      > [!NOTE] >  If your application blocks while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"If the ICMP echo reply message is not received within the time specified by the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1492,1744],"source":"       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[1750,1888],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[1895,1978]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[1979,2203]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[2204,2439],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[2440,2698],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2699,2835],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.","pos":[2836,2950]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[2951,3178],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[3179,3333]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[3334,3470],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[88211,88321],"content":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,110],"source":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message."}]},{"pos":[88384,88536],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[88599,88776],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[88842,88931],"content":"An object that is passed to the method invoked when the asynchronous operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,89]}]},{"pos":[89107,89310],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","pos":[20,187],"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[1,65],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,167],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}]},{"pos":[89426,89465],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[89576,89654],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[89757,89877],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[90010,90144],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[90259,90306],"content":"<code>address</code> is not a valid IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"is not a valid IP address.","pos":[21,47]}]},{"pos":[90413,90443],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[90538,90590],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65500 bytes."},{"pos":[91143,91433],"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.","pos":[0,290],"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,218]},{"content":"This overload allows you to specify a time-out value for the operation.","pos":[219,290]}]}]},{"pos":[91446,95061],"content":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object containing a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.       If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.","pos":[0,211],"source":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application."},{"content":"Call the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method when your application should not block.","pos":[212,322],"source":" Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block."},{"content":"Each call executes in a separate thread that is automatically allocated from the thread pool.","pos":[323,416]},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[417,536],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"Applications use a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to specify the method that is called when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises the event.","pos":[537,742],"source":" Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event."},{"content":"You must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[743,913],"source":" You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object containing a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[914,1174],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object containing a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object inherits the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt; property.","pos":[1175,1334],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"This property contains the <ph id=\"ph1\">`userToken`</ph> object passed into the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[1335,1457],"source":" This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"If your application should block while waiting for a reply, use the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[1464,1621],"source":"       If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"If the ICMP echo reply message is not received within the time specified by the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1628,1880],"source":"       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[1886,2024],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"This overload uses default settings for packet fragmentation and packet forwarding.","pos":[2031,2114]},{"content":"The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.","pos":[2115,2339]},{"content":"To prevent fragmentation, use one of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; methods that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property to <ph id=\"ph2\">`true`</ph>.","pos":[2340,2575],"source":" To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`."},{"content":"When &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[2576,2834],"source":" When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2835,2971],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.","pos":[2972,3086]},{"content":"To change this setting, use a &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; overload that takes an <ph id=\"ph1\">`options`</ph> parameter, and set the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to the desired value.","pos":[3087,3314],"source":" To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[3315,3469]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[3470,3606],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[95471,95676],"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,205],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,102],"source":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[103,205]}]}]},{"pos":[95739,95891],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[95954,96131],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[96197,96286],"content":"An object that is passed to the method invoked when the asynchronous operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,89]}]},{"pos":[96462,96704],"content":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is an empty string (\"\").","pos":[0,122],"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\")."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[129,224],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[96820,96859],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[96970,97048],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[97151,97281],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000."},{"pos":[97414,97548],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[97663,97738],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> could not be resolved to a valid IP address.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> could not be resolved to a valid IP address."},{"pos":[97845,97875],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[97970,98022],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65500 bytes."},{"pos":[98718,99132],"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.","pos":[0,414],"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,259],"source":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer."},{"content":"This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.","pos":[260,414]}]}]},{"pos":[99145,102070],"content":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application must not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.       If your application blocks while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.","pos":[0,211],"source":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application."},{"content":"Call the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method when your application must not block.","pos":[212,320],"source":" Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application must not block."},{"content":"Each call executes in a separate thread that is automatically allocated from the thread pool.","pos":[321,414]},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[415,534],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"Applications use a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to specify the method that is called when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises the event.","pos":[535,740],"source":" Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event."},{"content":"You must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[741,911],"source":" You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object that contains a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[912,1175],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object inherits the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt; property.","pos":[1176,1335],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"This property contains the <ph id=\"ph1\">`userToken`</ph> object passed into the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[1336,1458],"source":" This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"If your application blocks while waiting for a reply, use the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[1465,1616],"source":"       If your application blocks while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"If the ICMP echo reply message is not received within the time specified by the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1623,1875],"source":"       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[1881,2019],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"If the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[2026,2295],"source":"       If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2296,2432],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"Use the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination.","pos":[2439,2622],"source":"       Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[2623,2777]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2778,2914],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[103062,103172],"content":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,110],"source":"An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message."}]},{"pos":[103235,103387],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[103450,103627],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[103719,103878],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet."},{"pos":[103944,104033],"content":"An object that is passed to the method invoked when the asynchronous operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,89]}]},{"pos":[104209,104412],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","pos":[20,187],"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[1,65],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,167],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}]},{"pos":[104528,104567],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[104678,104756],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[104859,104979],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[105112,105246],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[105361,105408],"content":"<code>address</code> is not a valid IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"is not a valid IP address.","pos":[21,47]}]},{"pos":[105515,105545],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[105640,105692],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65500 bytes."},{"pos":[106365,106725],"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.","pos":[0,360],"nodes":[{"content":"Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer.","pos":[0,218]},{"content":"This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.","pos":[219,360]}]}]},{"pos":[106738,109669],"content":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application must not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.       If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.       If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.       Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.","pos":[0,211],"source":"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application."},{"content":"Call the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; method when your application must not block.","pos":[212,320],"source":" Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application must not block."},{"content":"Each call executes in a separate thread that is automatically allocated from the thread pool.","pos":[321,414]},{"content":"When the asynchronous operation completes, it raises the &lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt; event.","pos":[415,534],"source":" When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event."},{"content":"Applications use a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to specify the method that is called when &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; raises the event.","pos":[535,740],"source":" Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event."},{"content":"You must add a &lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt; delegate to the event before calling &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;.","pos":[741,911],"source":" You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>."},{"content":"The delegate's method receives a &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object that contains a &lt;xref:System.Net.NetworkInformation.PingReply&gt; object that describes the result of the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[912,1175],"source":" The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"The &lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt; object inherits the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt; property.","pos":[1176,1335],"source":" The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"This property contains the <ph id=\"ph1\">`userToken`</ph> object passed into the &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; call.","pos":[1336,1458],"source":" This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call."},{"content":"If your application should block while waiting for a reply, use the &lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt; methods; these methods are synchronous.","pos":[1465,1622],"source":"       If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous."},{"content":"If the ICMP echo reply message is not received within the time specified by the <ph id=\"ph1\">`timeout`</ph> parameter, the ICMP echo fails, and the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; property is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[1629,1881],"source":"       If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When specifying very small numbers for <ph id=\"ph2\">`timeout`</ph>, the Ping reply can be received even if <ph id=\"ph3\">`timeout`</ph> milliseconds have elapsed.","pos":[1887,2025],"source":"      > [!NOTE] >  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed."},{"content":"If the &lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt; property is <ph id=\"ph1\">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.","pos":[2032,2301],"source":"       If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails."},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2302,2438],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."},{"content":"Use the &lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt; property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination.","pos":[2445,2628],"source":"       Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination."},{"content":"If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.","pos":[2629,2783]},{"content":"When this happens, the &lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt; is set to &lt;xref:System.Net.NetworkInformation.IPStatus&gt;.","pos":[2784,2920],"source":" When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>."}]},{"pos":[110187,110392],"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,205],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the computer that is the destination for the ICMP echo message.","pos":[0,102],"source":"A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[103,205]}]}]},{"pos":[110455,110632],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[110695,110847],"content":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,152],"source":"An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message."}]},{"pos":[110939,111098],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet."},{"pos":[111164,111253],"content":"An object that is passed to the method invoked when the asynchronous operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is passed to the method invoked when the asynchronous operation completes.","pos":[0,89]}]},{"pos":[111429,111671],"content":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is an empty string (\"\").","pos":[0,122],"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\")."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[129,224],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[111787,111826],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[111937,112015],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync*&gt; is in progress.","pos":[0,78],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress."}]},{"pos":[112118,112238],"content":"<code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.","pos":[21,120]}]},{"pos":[112371,112505],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[112620,112695],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> could not be resolved to a valid IP address.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> could not be resolved to a valid IP address."},{"pos":[112802,112832],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[112927,112979],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65500 bytes."},{"pos":[113372,113532],"content":"Cancels all pending asynchronous requests to send an Internet Control Message Protocol (ICMP) echo message and receives a corresponding ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels all pending asynchronous requests to send an Internet Control Message Protocol (ICMP) echo message and receives a corresponding ICMP echo reply message.","pos":[0,160]}]},{"pos":[113544,113666],"content":"Call this method to terminate any calls to <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> that have not completed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method to terminate any calls to &lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt; that have not completed.","pos":[0,122],"source":"Call this method to terminate any calls to <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> that have not completed."}]},{"pos":[114275,114537],"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.","pos":[0,262],"source":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation."}]},{"pos":[114549,114725],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","pos":[0,176],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the ICMP packet has been sent and the response has been received.","pos":[31,176],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received."}]}]},{"pos":[114957,115050],"content":"An IP address that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An IP address that identifies the computer that is the destination for the ICMP echo message.","pos":[0,93]}]},{"pos":[115164,115282],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[115462,115547],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,85],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[115658,115740],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendPingAsync*&gt; is in progress.","pos":[0,82],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress."}]},{"pos":[115873,116007],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[116122,116169],"content":"<code>address</code> is not a valid IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"is not a valid IP address.","pos":[21,47]}]},{"pos":[116276,116306],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[116737,116958],"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.","pos":[0,221]}]},{"pos":[116970,117146],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","pos":[0,176],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the ICMP packet has been sent and the response has been received.","pos":[31,176],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received."}]}]},{"pos":[117377,117543],"content":"The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,166],"nodes":[{"content":"The computer that is the destination for the ICMP echo message.","pos":[0,63]},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[64,166]}]}]},{"pos":[117657,117775],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[118353,118687],"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.","pos":[0,334],"nodes":[{"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.","pos":[0,262],"source":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation."},{"content":"This overload allows you to specify a time-out value for the operation.","pos":[263,334]}]}]},{"pos":[118699,118875],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","pos":[0,176],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the ICMP packet has been sent and the response has been received.","pos":[31,176],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received."}]}]},{"pos":[119120,119213],"content":"An IP address that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An IP address that identifies the computer that is the destination for the ICMP echo message.","pos":[0,93]}]},{"pos":[119276,119384],"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,108]}]},{"pos":[119498,119616],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[120171,120464],"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.","pos":[0,293],"nodes":[{"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.","pos":[0,221]},{"content":"This overload allows you to specify a time-out value for the operation.","pos":[222,293]}]}]},{"pos":[120476,120652],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","pos":[0,176],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the ICMP packet has been sent and the response has been received.","pos":[31,176],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received."}]}]},{"pos":[120896,121062],"content":"The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,166],"nodes":[{"content":"The computer that is the destination for the ICMP echo message.","pos":[0,63]},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[64,166]}]}]},{"pos":[121125,121233],"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,108]}]},{"pos":[121347,121465],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[122092,122467],"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.","pos":[0,375],"nodes":[{"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.","pos":[0,262],"source":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation."},{"content":"This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.","pos":[263,375]}]}]},{"pos":[122479,122655],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","pos":[0,176],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the ICMP packet has been sent and the response has been received.","pos":[31,176],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received."}]}]},{"pos":[122915,123008],"content":"An IP address that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An IP address that identifies the computer that is the destination for the ICMP echo message.","pos":[0,93]}]},{"pos":[123071,123179],"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,108]}]},{"pos":[123242,123419],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[123533,123651],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[123832,124035],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","pos":[20,187],"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[1,65],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,167],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}]},{"pos":[124151,124190],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[124301,124383],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendPingAsync*&gt; is in progress.","pos":[0,82],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress."}]},{"pos":[124516,124650],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[124765,124812],"content":"<code>address</code> is not a valid IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"is not a valid IP address.","pos":[21,47]}]},{"pos":[124919,124949],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[125044,125097],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65,500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65,500 bytes."},{"pos":[125621,125955],"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.","pos":[0,334],"nodes":[{"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.","pos":[0,221]},{"content":"This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.","pos":[222,334]}]}]},{"pos":[125967,126143],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","pos":[0,176],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the ICMP packet has been sent and the response has been received.","pos":[31,176],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received."}]}]},{"pos":[126402,126568],"content":"The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,166],"nodes":[{"content":"The computer that is the destination for the ICMP echo message.","pos":[0,63]},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[64,166]}]}]},{"pos":[126631,126739],"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,108]}]},{"pos":[126802,126979],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[127093,127211],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[127958,128414],"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"nodes":[{"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.","pos":[0,456],"nodes":[{"content":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified &lt;xref:System.Net.IPAddress&gt;, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.","pos":[0,262],"source":"Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation."},{"content":"This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.","pos":[263,456]}]}]},{"pos":[128426,128602],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","pos":[0,176],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the ICMP packet has been sent and the response has been received.","pos":[31,176],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received."}]}]},{"pos":[128913,129006],"content":"An IP address that identifies the computer that is the destination for the ICMP echo message.","needQuote":true,"needEscape":true,"nodes":[{"content":"An IP address that identifies the computer that is the destination for the ICMP echo message.","pos":[0,93]}]},{"pos":[129069,129177],"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,108]}]},{"pos":[129240,129417],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[129509,129668],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet."},{"pos":[129782,129900],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[130081,130284],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","pos":[20,187],"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[1,65],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,167],"source":"       -or-       <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]}]},{"pos":[130400,130439],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>timeout</code> is less than zero."},{"pos":[130550,130632],"content":"A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A call to &lt;xref:System.Net.NetworkInformation.Ping.SendPingAsync*&gt; is in progress.","pos":[0,82],"source":"A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress."}]},{"pos":[130765,130899],"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.","pos":[0,134],"nodes":[{"content":"An exception was thrown while sending or receiving the ICMP messages.","pos":[0,69]},{"content":"See the inner exception for the exact exception that was thrown.","pos":[70,134]}]}]},{"pos":[131014,131061],"content":"<code>address</code> is not a valid IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"is not a valid IP address.","pos":[21,47]}]},{"pos":[131168,131198],"content":"This object has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been disposed.","pos":[0,30]}]},{"pos":[131293,131346],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 65,500 bytes.","needQuote":true,"needEscape":true,"source":"The size of <code>buffer</code> exceeds 65,500 bytes."},{"pos":[131990,132405],"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.","pos":[0,415],"nodes":[{"content":"Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.","pos":[0,221]},{"content":"This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.","pos":[222,415]}]}]},{"pos":[132417,132593],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.","pos":[0,176],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the ICMP packet has been sent and the response has been received.","pos":[31,176],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received."}]}]},{"pos":[132903,133069],"content":"The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[0,166],"nodes":[{"content":"The computer that is the destination for the ICMP echo message.","pos":[0,63]},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.","pos":[64,166]}]}]},{"pos":[133132,133240],"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.","pos":[0,108]}]},{"pos":[133303,133480],"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.","pos":[0,177],"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.","pos":[0,128],"source":"A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message."},{"content":"The array cannot contain more than 65,500 bytes.","pos":[129,177]}]}]},{"pos":[133572,133731],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkInformation.PingOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet."},{"pos":[133845,133963],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.NetworkInformation.Ping\n  id: Ping\n  children:\n  - System.Net.NetworkInformation.Ping.#ctor\n  - System.Net.NetworkInformation.Ping.Dispose(System.Boolean)\n  - System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)\n  - System.Net.NetworkInformation.Ping.PingCompleted\n  - System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)\n  - System.Net.NetworkInformation.Ping.Send(System.String)\n  - System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)\n  - System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)\n  - System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])\n  - System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])\n  - System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  - System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  - System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)\n  - System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)\n  - System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)\n  - System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)\n  - System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)\n  - System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)\n  - System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)\n  - System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)\n  - System.Net.NetworkInformation.Ping.SendAsyncCancel\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  langs:\n  - csharp\n  name: Ping\n  nameWithType: Ping\n  fullName: System.Net.NetworkInformation.Ping\n  type: Class\n  summary: Allows an application to determine whether a remote computer is accessible over the network.\n  remarks: \"Applications use the Ping class to detect whether a remote computer is reachable.  \\n  \\n Network topology can determine whether Ping can successfully contact a remote host. The presence and configuration of proxies, network address translation (NAT) equipment, or firewalls can prevent Ping from succeeding. A successful Ping indicates only that the remote host can be reached on the network; the presence of higher level services (such as a Web server) on the remote host is not guaranteed.  \\n  \\n This class provides functionality similar to the Ping.exe command line tool. The <xref:System.Net.NetworkInformation.Ping.Send%2A> and <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods send an Internet Control Message Protocol (ICMP) echo request message to a remote computer and waits for an ICMP echo reply message from that computer. For a detailed description of ICMP messages, see RFC 792, available at [http://www.ietf.org](http://www.ietf.org/).  \\n  \\n The following types are used with the Ping class and are described in detail below.  \\n  \\n|**Type name**|**Description**|  \\n|-------------------|---------------------|  \\n|<xref:System.Net.NetworkInformation.IPStatus>|Defines status codes that describe the outcome of an ICMP echo request message.|  \\n|<xref:System.Net.NetworkInformation.PingOptions>|Allows you to configure or retrieve the settings that control how many times the request packet can be forwarded (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>), and whether it can be fragmented (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|  \\n|<xref:System.Net.NetworkInformation.PingReply>|Contains the results of an ICMP echo request.|  \\n|<xref:System.Net.NetworkInformation.PingException>|Thrown if an unrecoverable error occurs.|  \\n|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Contains the data associated with <xref:System.Net.NetworkInformation.Ping.PingCompleted> events, which are raised when a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call completes or is canceled.|  \\n|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|The delegate that provides the callback method invoked when a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call completes or is canceled.|  \\n  \\n The <xref:System.Net.NetworkInformation.Ping.Send%2A> and <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods return the reply in a <xref:System.Net.NetworkInformation.PingReply> object. The <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=fullName> property returns an <xref:System.Net.NetworkInformation.IPStatus> value to indicate the outcome of the request.  \\n  \\n When sending the request, you must specify the remote computer. You can do this by providing a host name string, an IP address in string format, or an <xref:System.Net.IPAddress> object.  \\n  \\n You can also specify any of the following types of information:  \\n  \\n-   Data to accompany the request. Specifying `buffer` allows you to learn the amount of time required for a packet of a particular size to travel to and from the remote host and the maximum transmission unit of the network path. (See the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take a `buffer` parameter.)  \\n  \\n-   Whether the ICMP Echo packet can be fragmented in transit. (See the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property and the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take an `options` parameter.)  \\n  \\n-   How many times routing nodes, such as routers or gateways, can forward the packet before it either reaches the destination computer or is discarded. (See <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> and the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take an `options` parameter.)  \\n  \\n-   The time limit within which the reply must be received. (See the <xref:System.Net.NetworkInformation.Ping.Send%2A> or <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads that take a `timeout` parameter.  \\n  \\n The Ping class offers both synchronous and asynchronous methods for sending the request. If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous. If your application should not block, use the asynchronous <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods. A call to <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> executes in its own thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called for <xref:System.Net.NetworkInformation.Ping.PingCompleted> events. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n You cannot use the same instance of the Ping class to generate multiple simultaneous ICMP Echo requests. Calling <xref:System.Net.NetworkInformation.Ping.Send%2A> while a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call is in progress or calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> multiple times before all previous calls have completed causes an <xref:System.InvalidOperationException>.\"\n  example:\n  - \"The following code example demonstrates using the Ping class synchronously.  \\n  \\n [!code-cs[NCLPingSync#1](~/add/codesnippet/csharp/t-system.net.networkinfo_4_1.cs)]\\n [!code-cpp[NCLPingSync#1](~/add/codesnippet/cpp/t-system.net.networkinfo_4_1.cpp)]  \\n  \\n The following code example demonstrates using the Ping class asynchronously.  \\n  \\n [!code-cpp[NCLPingASync#1](~/add/codesnippet/cpp/t-system.net.networkinfo_4_2.cpp)]\\n [!code-cs[NCLPingASync#1](~/add/codesnippet/csharp/t-system.net.networkinfo_4_2.cs)]\"\n  syntax:\n    content: 'public class Ping : System.ComponentModel.Component'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Ping()\n  nameWithType: Ping.Ping()\n  fullName: System.Net.NetworkInformation.Ping.Ping()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.Ping\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates creating a <xref:System.Net.NetworkInformation.Ping> instance. The complete example is available in the <xref:System.Net.NetworkInformation.Ping> class overview.  \\n  \\n [!code-cpp[NCLPingAsync#2](~/add/codesnippet/cpp/m-system.net.networkinfo_4_1.cpp)]\\n [!code-cs[NCLPingAsync#2](~/add/codesnippet/csharp/m-system.net.networkinfo_4_1.cs)]\"\n  syntax:\n    content: public Ping ();\n    parameters: []\n  overload: System.Net.NetworkInformation.Ping.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: Ping.Dispose(Boolean)\n  fullName: System.Net.NetworkInformation.Ping.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.NetworkInformation.Ping\"></xref> object, and optionally disposes of the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.ComponentModel.Component.Finalize%2A> method. The public `Dispose()` method invokes the protected Dispose method with the `disposing` parameter set to `true`. <xref:System.ComponentModel.Component.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.NetworkInformation.Ping> object references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to releases only unmanaged resources.\n  overload: System.Net.NetworkInformation.Ping.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)\n  id: OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: OnPingCompleted(PingCompletedEventArgs)\n  nameWithType: Ping.OnPingCompleted(PingCompletedEventArgs)\n  fullName: System.Net.NetworkInformation.Ping.OnPingCompleted(PingCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Raises the <xref href=\"System.Net.NetworkInformation.Ping.PingCompleted\"></xref> event.\n  remarks: \"Classes that inherit from the <xref:System.Net.NetworkInformation.Ping> class can override this method to perform additional tasks, such as logging the data contained in the `e` parameter.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The OnPingCompleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Net.NetworkInformation.PingCompletedEventArgs\n      description: A <xref href=\"System.Net.NetworkInformation.PingCompletedEventArgs\"></xref> object that contains event data.\n  overload: System.Net.NetworkInformation.Ping.OnPingCompleted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.PingCompleted\n  id: PingCompleted\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: PingCompleted\n  nameWithType: Ping.PingCompleted\n  fullName: System.Net.NetworkInformation.Ping.PingCompleted\n  type: Event\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Occurs when an asynchronous operation to send an Internet Control Message Protocol (ICMP) echo message and receive the corresponding ICMP echo reply message completes or is canceled.\n  remarks: Applications use the PingCompleted event to get information about the completion status and data collected by a call to one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods. The <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate provides the call back method invoked when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises this event.\n  example:\n  - \"The following code example demonstrates specifying a callback method for the PingCompleted event. The complete example is available in the <xref:System.Net.NetworkInformation.Ping> class overview.  \\n  \\n [!code-cpp[NCLPingAsync#2](~/add/codesnippet/cpp/e-system.net.networkinfo_1.cpp)]\\n [!code-cs[NCLPingAsync#2](~/add/codesnippet/csharp/e-system.net.networkinfo_1.cs)]\"\n  syntax:\n    content: public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;\n    return:\n      type: System.Net.NetworkInformation.PingCompletedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)\n  id: Send(System.Net.IPAddress)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Send(IPAddress)\n  nameWithType: Ping.Send(IPAddress)\n  fullName: System.Net.NetworkInformation.Ping.Send(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer.\n  remarks: \"This method sends to the host that is specified by `address` a 32 <xref:System.Byte> data buffer with the ICMP echo message. The method waits five seconds for an ICMP echo reply message. If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cs[NCLPingSampler#3](~/add/codesnippet/csharp/m-system.net.networkinfo_5_1.cs)]\\n [!code-cpp[NCLPingSampler#3](~/add/codesnippet/cpp/m-system.net.networkinfo_5_1.cpp)]\"\n  syntax:\n    content: public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.\n    return:\n      type: System.Net.NetworkInformation.PingReply\n      description: A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or describes the reason for the failure if no message was received.\n  overload: System.Net.NetworkInformation.Ping.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Send(System.String)\n  id: Send(System.String)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Send(String)\n  nameWithType: Ping.Send(String)\n  fullName: System.Net.NetworkInformation.Ping.Send(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.\n  remarks: \"This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message. The method waits five seconds for an ICMP echo reply message. If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cs[NCLPingSampler#2](~/add/codesnippet/csharp/m-system.net.networkinfo_2_1.cs)]\\n [!code-cpp[NCLPingSampler#2](~/add/codesnippet/cpp/m-system.net.networkinfo_2_1.cpp)]\"\n  syntax:\n    content: public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    return:\n      type: System.Net.NetworkInformation.PingReply\n      description: A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.\n  overload: System.Net.NetworkInformation.Ping.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)\n  id: Send(System.Net.IPAddress,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Send(IPAddress,Int32)\n  nameWithType: Ping.Send(IPAddress,Int32)\n  fullName: System.Net.NetworkInformation.Ping.Send(IPAddress,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.\n  remarks: \"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - For an example that demonstrates calling a <xref:System.Net.NetworkInformation.Ping.Send%2A> method, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    return:\n      type: System.Net.NetworkInformation.PingReply\n      description: A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.\n  overload: System.Net.NetworkInformation.Ping.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)\n  id: Send(System.String,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Send(String,Int32)\n  nameWithType: Ping.Send(String,Int32)\n  fullName: System.Net.NetworkInformation.Ping.Send(String,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.\n  remarks: \"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - For an example that demonstrates calling a <xref:System.Net.NetworkInformation.Ping.Send%2A> method, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    return:\n      type: System.Net.NetworkInformation.PingReply\n      description: A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.\n  overload: System.Net.NetworkInformation.Ping.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])\n  id: Send(System.Net.IPAddress,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Send(IPAddress,Int32,Byte[])\n  nameWithType: Ping.Send(IPAddress,Int32,Byte[])\n  fullName: System.Net.NetworkInformation.Ping.Send(IPAddress,Int32,Byte[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.\n  remarks: \"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - \"The following code example demonstrates how to call this method.  \\n  \\n [!code-cs[NCLPingSampler#6](~/add/codesnippet/csharp/b44ef8f6-ad7e-49c2-8af4-_1.cs)]\\n [!code-cpp[NCLPingSampler#6](~/add/codesnippet/cpp/b44ef8f6-ad7e-49c2-8af4-_1.cpp)]\"\n  syntax:\n    content: public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    return:\n      type: System.Net.NetworkInformation.PingReply\n      description: A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <xref href=\"System.Net.NetworkInformation.IPStatus\"></xref> if the packet exceeds the Maximum Transmission Unit (MTU).\n  overload: System.Net.NetworkInformation.Ping.Send*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65500 bytes.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>address</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])\n  id: Send(System.String,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Send(String,Int32,Byte[])\n  nameWithType: Ping.Send(String,Int32,Byte[])\n  fullName: System.Net.NetworkInformation.Ping.Send(String,Int32,Byte[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.\n  remarks: \"If the ICMP echo reply message is not received within the time specified in the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - For an example that demonstrates how to call a <xref:System.Net.NetworkInformation.Ping.Send%2A> overload, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    return:\n      type: System.Net.NetworkInformation.PingReply\n      description: A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.\n  overload: System.Net.NetworkInformation.Ping.Send*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65500 bytes.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>hostNameOrAddress</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or is an empty string (\\\"\\\").  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  id: Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Send(IPAddress,Int32,Byte[],PingOptions)\n  nameWithType: Ping.Send(IPAddress,Int32,Byte[],PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.Send(IPAddress,Int32,Byte[],PingOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress> and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.\n  remarks: \"If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - \"The following code example demonstrates how to call this method.  \\n  \\n [!code-cs[NCLPingSampler#5](~/add/codesnippet/csharp/81445dc1-adbd-44fc-b79c-_1.cs)]\\n [!code-cpp[NCLPingSampler#5](~/add/codesnippet/cpp/81445dc1-adbd-44fc-b79c-_1.cpp)]\"\n  syntax:\n    content: public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    - id: options\n      type: System.Net.NetworkInformation.PingOptions\n      description: A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.\n    return:\n      type: System.Net.NetworkInformation.PingReply\n      description: A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <xref href=\"System.Net.NetworkInformation.IPStatus\"></xref> if the packet exceeds the Maximum Transmission Unit (MTU).\n  overload: System.Net.NetworkInformation.Ping.Send*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65500 bytes.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>address</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  id: Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: Send(String,Int32,Byte[],PingOptions)\n  nameWithType: Ping.Send(String,Int32,Byte[],PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.Send(String,Int32,Byte[],PingOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.\n  remarks: \"If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - \"The following code example demonstrates how to call this method.  \\n  \\n [!code-cs[NCLPingSampler#4](~/add/codesnippet/csharp/ce144ae4-a1a7-44f3-ac8a-_1.cs)]\\n [!code-cpp[NCLPingSampler#4](~/add/codesnippet/cpp/ce144ae4-a1a7-44f3-ac8a-_1.cpp)]\"\n  syntax:\n    content: public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    - id: options\n      type: System.Net.NetworkInformation.PingOptions\n      description: A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.\n    return:\n      type: System.Net.NetworkInformation.PingReply\n      description: A <xref href=\"System.Net.NetworkInformation.PingReply\"></xref> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.\n  overload: System.Net.NetworkInformation.Ping.Send*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65500 bytes.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>hostNameOrAddress</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or is a zero length string.  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>, or the <code>buffer</code> size is greater than 65500 bytes.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)\n  id: SendAsync(System.Net.IPAddress,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsync(IPAddress,Object)\n  nameWithType: Ping.SendAsync(IPAddress,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(IPAddress,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer.\n  remarks: \"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call to this method executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n> [!NOTE]\\n>  If your application should block while waiting for a reply, use one of the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.  \\n  \\n This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message. The method waits five seconds for an ICMP echo reply message. If it does not receive a reply in that time, the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - For a code example that demonstrates calling a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public void SendAsync (System.Net.IPAddress address, object userToken);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.\n    - id: userToken\n      type: System.Object\n      description: An object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.NetworkInformation.Ping.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to the <xref:System.Net.NetworkInformation.Ping.SendAsync*> method is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>address</code> is not a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)\n  id: SendAsync(System.String,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsync(String,Object)\n  nameWithType: Ping.SendAsync(String,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(String,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.\n  remarks: \"The SendAsync method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the SendAsync method when your application should not block. Each call to this method executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n> [!NOTE]\\n>  If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.  \\n  \\n This method sends a 32 <xref:System.Byte> data buffer with the ICMP echo message. The method waits five seconds for an ICMP echo reply message. If it does not receive a reply in that time the method returns and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - For a code example that demonstrates calling the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public void SendAsync (string hostNameOrAddress, object userToken);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: userToken\n      type: System.Object\n      description: An object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.NetworkInformation.Ping.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to SendAsync method is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>hostNameOrAddress</code> could not be resolved to a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)\n  id: SendAsync(System.Net.IPAddress,System.Int32,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsync(IPAddress,Int32,Object)\n  nameWithType: Ping.SendAsync(IPAddress,Int32,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(IPAddress,Int32,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.\n  remarks: \"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.  \\n  \\n If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - For a code example that demonstrates calling a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: userToken\n      type: System.Object\n      description: An object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.NetworkInformation.Ping.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> method is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>address</code> is not a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)\n  id: SendAsync(System.String,System.Int32,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsync(String,Int32,Object)\n  nameWithType: Ping.SendAsync(String,Int32,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(String,Int32,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.\n  remarks: \"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.  \\n  \\n If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - For a code example that demonstrates calling the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public void SendAsync (string hostNameOrAddress, int timeout, object userToken);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: userToken\n      type: System.Object\n      description: An object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.NetworkInformation.Ping.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>hostNameOrAddress</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>hostNameOrAddress</code> could not be resolved to a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)\n  id: SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsync(IPAddress,Int32,Byte[],Object)\n  nameWithType: Ping.SendAsync(IPAddress,Int32,Byte[],Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(IPAddress,Int32,Byte[],Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.\n  remarks: \"This method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. To specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event, you must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n> [!NOTE]\\n>  If your application blocks while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.  \\n  \\n If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - For a code example that demonstrates calling a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    - id: userToken\n      type: System.Object\n      description: An object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.NetworkInformation.Ping.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>address</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>address</code> is not a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65500 bytes.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)\n  id: SendAsync(System.String,System.Int32,System.Byte[],System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsync(String,Int32,Byte[],Object)\n  nameWithType: Ping.SendAsync(String,Int32,Byte[],Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(String,Int32,Byte[],Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.\n  remarks: \"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application should not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object containing a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.  \\n  \\n If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n This overload uses default settings for packet fragmentation and packet forwarding. The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers. To prevent fragmentation, use one of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> methods that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property to `true`. When <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>. The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded. To change this setting, use a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload that takes an `options` parameter, and set the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to the desired value. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - The following code example demonstrates how to call a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload, see the <xref:System.Net.NetworkInformation.Ping> class overview.\n  syntax:\n    content: public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    - id: userToken\n      type: System.Object\n      description: An object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.NetworkInformation.Ping.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>hostNameOrAddress</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or is an empty string (\\\"\\\").  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>hostNameOrAddress</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>hostNameOrAddress</code> could not be resolved to a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65500 bytes.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)\n  id: SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsync(IPAddress,Int32,Byte[],PingOptions,Object)\n  nameWithType: Ping.SendAsync(IPAddress,Int32,Byte[],PingOptions,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(IPAddress,Int32,Byte[],PingOptions,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.\n  remarks: \"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application must not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n If your application blocks while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.  \\n  \\n If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - \"The following code example demonstrates how to call this method. For an implementation of the callback method, see the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method overload example section.  \\n  \\n The following code example requires the following namespaces:  \\n  \\n [!code-cs[NCLPingSampler#0](~/add/codesnippet/csharp/cc37a528-8801-4ac0-83d4-_1.cs)]\\n [!code-cpp[NCLPingSampler#0](~/add/codesnippet/cpp/cc37a528-8801-4ac0-83d4-_1.cpp)]  \\n  \\n The following code example sends an ICMP echo message asynchronously.  \\n  \\n [!code-cs[NCLPingSampler#7](~/add/codesnippet/csharp/cc37a528-8801-4ac0-83d4-_2.cs)]\\n [!code-cpp[NCLPingSampler#7](~/add/codesnippet/cpp/cc37a528-8801-4ac0-83d4-_2.cpp)]\"\n  syntax:\n    content: public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    - id: options\n      type: System.Net.NetworkInformation.PingOptions\n      description: A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.\n    - id: userToken\n      type: System.Object\n      description: An object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.NetworkInformation.Ping.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>address</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>address</code> is not a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65500 bytes.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)\n  id: SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsync(String,Int32,Byte[],PingOptions,Object)\n  nameWithType: Ping.SendAsync(String,Int32,Byte[],PingOptions,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(String,Int32,Byte[],PingOptions,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.\n  remarks: \"The <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application. Call the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> method when your application must not block. Each call executes in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes, it raises the <xref:System.Net.NetworkInformation.Ping.PingCompleted> event. Applications use a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to specify the method that is called when <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> raises the event. You must add a <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegate to the event before calling <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. The delegate's method receives a <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object that contains a <xref:System.Net.NetworkInformation.PingReply> object that describes the result of the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call. The <xref:System.Net.NetworkInformation.PingCompletedEventArgs> object inherits the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. This property contains the `userToken` object passed into the <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> call.  \\n  \\n If your application should block while waiting for a reply, use the <xref:System.Net.NetworkInformation.Ping.Send%2A> methods; these methods are synchronous.  \\n  \\n If the ICMP echo reply message is not received within the time specified by the `timeout` parameter, the ICMP echo fails, and the <xref:System.Net.NetworkInformation.PingReply.Status%2A> property is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n> [!NOTE]\\n>  When specifying very small numbers for `timeout`, the Ping reply can be received even if `timeout` milliseconds have elapsed.  \\n  \\n If the <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> property is `true` and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.  \\n  \\n Use the <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination. If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails. When this happens, the <xref:System.Net.NetworkInformation.PingReply.Status%2A> is set to <xref:System.Net.NetworkInformation.IPStatus>.\"\n  example:\n  - \"The following code example demonstrates how to call this method.  \\n  \\n [!code-cpp[NCLPingAsync#1](~/add/codesnippet/cpp/56cfcaea-d9d5-4c26-9eea-_1.cpp)]\\n [!code-cs[NCLPingAsync#1](~/add/codesnippet/csharp/56cfcaea-d9d5-4c26-9eea-_1.cs)]\"\n  syntax:\n    content: public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: A <xref:System.String> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    - id: buffer\n      type: System.Byte[]\n      description: An <xref:System.Int32> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: options\n      type: System.Net.NetworkInformation.PingOptions\n      description: A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.\n    - id: userToken\n      type: System.Object\n      description: An object that is passed to the method invoked when the asynchronous operation completes.\n  overload: System.Net.NetworkInformation.Ping.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>hostNameOrAddress</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or is an empty string (\\\"\\\").  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendAsync*> is in progress.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>address</code> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>hostNameOrAddress</code> could not be resolved to a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65500 bytes.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendAsyncCancel\n  id: SendAsyncCancel\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendAsyncCancel()\n  nameWithType: Ping.SendAsyncCancel()\n  fullName: System.Net.NetworkInformation.Ping.SendAsyncCancel()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Cancels all pending asynchronous requests to send an Internet Control Message Protocol (ICMP) echo message and receives a corresponding ICMP echo reply message.\n  remarks: Call this method to terminate any calls to <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> that have not completed.\n  syntax:\n    content: public void SendAsyncCancel ();\n    parameters: []\n  overload: System.Net.NetworkInformation.Ping.SendAsyncCancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\n  id: SendPingAsync(System.Net.IPAddress)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendPingAsync(IPAddress)\n  nameWithType: Ping.SendPingAsync(IPAddress)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address that identifies the computer that is the destination for the ICMP echo message.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.NetworkInformation.Ping.SendPingAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>address</code> is not a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String)\n  id: SendPingAsync(System.String)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendPingAsync(String)\n  nameWithType: Ping.SendPingAsync(String)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.NetworkInformation.Ping.SendPingAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)\n  id: SendPingAsync(System.Net.IPAddress,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendPingAsync(IPAddress,Int32)\n  nameWithType: Ping.SendPingAsync(IPAddress,Int32)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(IPAddress,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync (System.Net.IPAddress address, int timeout);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.NetworkInformation.Ping.SendPingAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)\n  id: SendPingAsync(System.String,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendPingAsync(String,Int32)\n  nameWithType: Ping.SendPingAsync(String,Int32)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(String,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync (string hostNameOrAddress, int timeout);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.NetworkInformation.Ping.SendPingAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])\n  id: SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendPingAsync(IPAddress,Int32,Byte[])\n  nameWithType: Ping.SendPingAsync(IPAddress,Int32,Byte[])\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(IPAddress,Int32,Byte[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.NetworkInformation.Ping.SendPingAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>address</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>address</code> is not a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65,500 bytes.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])\n  id: SendPingAsync(System.String,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendPingAsync(String,Int32,Byte[])\n  nameWithType: Ping.SendPingAsync(String,Int32,Byte[])\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(String,Int32,Byte[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.NetworkInformation.Ping.SendPingAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  id: SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendPingAsync(IPAddress,Int32,Byte[],PingOptions)\n  nameWithType: Ping.SendPingAsync(IPAddress,Int32,Byte[],PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(IPAddress,Int32,Byte[],PingOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref:System.Net.IPAddress>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address that identifies the computer that is the destination for the ICMP echo message.\n    - id: timeout\n      type: System.Int32\n      description: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    - id: options\n      type: System.Net.NetworkInformation.PingOptions\n      description: A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.NetworkInformation.Ping.SendPingAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>address</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>buffer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A call to <xref:System.Net.NetworkInformation.Ping.SendPingAsync*> is in progress.\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: <code>address</code> is not a valid IP address.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>buffer</code> exceeds 65,500 bytes.\n  platform:\n  - net462\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  id: SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  name: SendPingAsync(String,Int32,Byte[],PingOptions)\n  nameWithType: Ping.SendPingAsync(String,Int32,Byte[],PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(String,Int32,Byte[],PingOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.NetworkInformation\n  summary: Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the ICMP packet has been sent and the response has been received.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.\n    - id: timeout\n      type: System.Int32\n      description: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.\n    - id: options\n      type: System.Net.NetworkInformation.PingOptions\n      description: A <xref href=\"System.Net.NetworkInformation.PingOptions\"></xref> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.NetworkInformation.Ping.SendPingAsync*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Component\n  isExternal: false\n  name: System.ComponentModel.Component\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Net.NetworkInformation.PingException\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PingException\n  nameWithType: PingException\n  fullName: System.Net.NetworkInformation.PingException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Net.Sockets.SocketException\n  isExternal: true\n  name: System.Net.Sockets.SocketException\n- uid: System.Net.NetworkInformation.Ping.#ctor\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Ping()\n  nameWithType: Ping.Ping()\n  fullName: System.Net.NetworkInformation.Ping.Ping()\n- uid: System.Net.NetworkInformation.Ping.Dispose(System.Boolean)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Ping.Dispose(Boolean)\n  fullName: System.Net.NetworkInformation.Ping.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: OnPingCompleted(PingCompletedEventArgs)\n  nameWithType: Ping.OnPingCompleted(PingCompletedEventArgs)\n  fullName: System.Net.NetworkInformation.Ping.OnPingCompleted(PingCompletedEventArgs)\n- uid: System.Net.NetworkInformation.PingCompletedEventArgs\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PingCompletedEventArgs\n  nameWithType: PingCompletedEventArgs\n  fullName: System.Net.NetworkInformation.PingCompletedEventArgs\n- uid: System.Net.NetworkInformation.Ping.PingCompleted\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: PingCompleted\n  nameWithType: Ping.PingCompleted\n  fullName: System.Net.NetworkInformation.Ping.PingCompleted\n- uid: System.Net.NetworkInformation.PingCompletedEventHandler\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PingCompletedEventHandler\n  nameWithType: PingCompletedEventHandler\n  fullName: System.Net.NetworkInformation.PingCompletedEventHandler\n- uid: System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send(IPAddress)\n  nameWithType: Ping.Send(IPAddress)\n  fullName: System.Net.NetworkInformation.Ping.Send(IPAddress)\n- uid: System.Net.NetworkInformation.PingReply\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PingReply\n  nameWithType: PingReply\n  fullName: System.Net.NetworkInformation.PingReply\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: true\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Net.NetworkInformation.Ping.Send(System.String)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send(String)\n  nameWithType: Ping.Send(String)\n  fullName: System.Net.NetworkInformation.Ping.Send(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send(IPAddress,Int32)\n  nameWithType: Ping.Send(IPAddress,Int32)\n  fullName: System.Net.NetworkInformation.Ping.Send(IPAddress,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send(String,Int32)\n  nameWithType: Ping.Send(String,Int32)\n  fullName: System.Net.NetworkInformation.Ping.Send(String,Int32)\n- uid: System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send(IPAddress,Int32,Byte[])\n  nameWithType: Ping.Send(IPAddress,Int32,Byte[])\n  fullName: System.Net.NetworkInformation.Ping.Send(IPAddress,Int32,Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send(String,Int32,Byte[])\n  nameWithType: Ping.Send(String,Int32,Byte[])\n  fullName: System.Net.NetworkInformation.Ping.Send(String,Int32,Byte[])\n- uid: System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send(IPAddress,Int32,Byte[],PingOptions)\n  nameWithType: Ping.Send(IPAddress,Int32,Byte[],PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.Send(IPAddress,Int32,Byte[],PingOptions)\n- uid: System.Net.NetworkInformation.PingOptions\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PingOptions\n  nameWithType: PingOptions\n  fullName: System.Net.NetworkInformation.PingOptions\n- uid: System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send(String,Int32,Byte[],PingOptions)\n  nameWithType: Ping.Send(String,Int32,Byte[],PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.Send(String,Int32,Byte[],PingOptions)\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync(IPAddress,Object)\n  nameWithType: Ping.SendAsync(IPAddress,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(IPAddress,Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync(String,Object)\n  nameWithType: Ping.SendAsync(String,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(String,Object)\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync(IPAddress,Int32,Object)\n  nameWithType: Ping.SendAsync(IPAddress,Int32,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(IPAddress,Int32,Object)\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync(String,Int32,Object)\n  nameWithType: Ping.SendAsync(String,Int32,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(String,Int32,Object)\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync(IPAddress,Int32,Byte[],Object)\n  nameWithType: Ping.SendAsync(IPAddress,Int32,Byte[],Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(IPAddress,Int32,Byte[],Object)\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync(String,Int32,Byte[],Object)\n  nameWithType: Ping.SendAsync(String,Int32,Byte[],Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(String,Int32,Byte[],Object)\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync(IPAddress,Int32,Byte[],PingOptions,Object)\n  nameWithType: Ping.SendAsync(IPAddress,Int32,Byte[],PingOptions,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(IPAddress,Int32,Byte[],PingOptions,Object)\n- uid: System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync(String,Int32,Byte[],PingOptions,Object)\n  nameWithType: Ping.SendAsync(String,Int32,Byte[],PingOptions,Object)\n  fullName: System.Net.NetworkInformation.Ping.SendAsync(String,Int32,Byte[],PingOptions,Object)\n- uid: System.Net.NetworkInformation.Ping.SendAsyncCancel\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsyncCancel()\n  nameWithType: Ping.SendAsyncCancel()\n  fullName: System.Net.NetworkInformation.Ping.SendAsyncCancel()\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync(IPAddress)\n  nameWithType: Ping.SendPingAsync(IPAddress)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(IPAddress)\n- uid: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<PingReply>\n  nameWithType: Task<PingReply>\n  fullName: System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.NetworkInformation.PingReply>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.NetworkInformation.PingReply\n    name: PingReply\n    nameWithType: PingReply\n    fullName: PingReply\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync(String)\n  nameWithType: Ping.SendPingAsync(String)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(String)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync(IPAddress,Int32)\n  nameWithType: Ping.SendPingAsync(IPAddress,Int32)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(IPAddress,Int32)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync(String,Int32)\n  nameWithType: Ping.SendPingAsync(String,Int32)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(String,Int32)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync(IPAddress,Int32,Byte[])\n  nameWithType: Ping.SendPingAsync(IPAddress,Int32,Byte[])\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(IPAddress,Int32,Byte[])\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync(String,Int32,Byte[])\n  nameWithType: Ping.SendPingAsync(String,Int32,Byte[])\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(String,Int32,Byte[])\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync(IPAddress,Int32,Byte[],PingOptions)\n  nameWithType: Ping.SendPingAsync(IPAddress,Int32,Byte[],PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(IPAddress,Int32,Byte[],PingOptions)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync(String,Int32,Byte[],PingOptions)\n  nameWithType: Ping.SendPingAsync(String,Int32,Byte[],PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(String,Int32,Byte[],PingOptions)\n- uid: System.Net.NetworkInformation.Ping.#ctor*\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Ping\n  nameWithType: Ping.Ping\n- uid: System.Net.NetworkInformation.Ping.Dispose*\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Dispose\n  nameWithType: Ping.Dispose\n- uid: System.Net.NetworkInformation.Ping.OnPingCompleted*\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: OnPingCompleted\n  nameWithType: Ping.OnPingCompleted\n- uid: System.Net.NetworkInformation.Ping.Send*\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: Send\n  nameWithType: Ping.Send\n- uid: System.Net.NetworkInformation.Ping.SendAsync*\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsync\n  nameWithType: Ping.SendAsync\n- uid: System.Net.NetworkInformation.Ping.SendAsyncCancel*\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendAsyncCancel\n  nameWithType: Ping.SendAsyncCancel\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync*\n  parent: System.Net.NetworkInformation.Ping\n  isExternal: false\n  name: SendPingAsync\n  nameWithType: Ping.SendPingAsync\n"}