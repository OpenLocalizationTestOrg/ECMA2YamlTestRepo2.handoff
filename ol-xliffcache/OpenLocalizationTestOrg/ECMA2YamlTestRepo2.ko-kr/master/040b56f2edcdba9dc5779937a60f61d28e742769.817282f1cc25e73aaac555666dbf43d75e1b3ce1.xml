{"nodes":[{"pos":[492,543],"content":"The execution context for an asynchronous activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The execution context for an asynchronous activity.","pos":[0,51]}]},{"pos":[555,643],"content":"This is a sealed class and is derived from <xref:System.Activities.CodeActivityContext>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is a sealed class and is derived from &lt;xref:System.Activities.CodeActivityContext&gt;.","pos":[0,88],"source":"This is a sealed class and is derived from <xref:System.Activities.CodeActivityContext>."}]},{"pos":[2773,2908],"content":"Gets a value that indicates whether the currently executing <bpt id=\"p1\">&lt;xref href=\"System.Activities.AsyncCodeActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is to be canceled.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the currently executing <xref href=\"System.Activities.AsyncCodeActivity\"></xref> is to be canceled."},{"pos":[3035,3273],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the currently executing <bpt id=\"p2\">&lt;xref href=\"System.Activities.AsyncCodeActivity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is to be canceled; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the currently executing <xref href=\"System.Activities.AsyncCodeActivity\"></xref> is to be canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3791,3839],"content":"Marks the current activity instance as canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Marks the current activity instance as canceled.","pos":[0,48]}]},{"pos":[4398,4483],"content":"Gets or sets a user-defined object associated with the current asynchronous activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a user-defined object associated with the current asynchronous activity.","pos":[0,85]}]},{"pos":[4602,4626],"content":"The user-defined object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user-defined object.","pos":[0,24]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.AsyncCodeActivityContext\n  id: AsyncCodeActivityContext\n  children:\n  - System.Activities.AsyncCodeActivityContext.IsCancellationRequested\n  - System.Activities.AsyncCodeActivityContext.MarkCanceled\n  - System.Activities.AsyncCodeActivityContext.UserState\n  langs:\n  - csharp\n  name: AsyncCodeActivityContext\n  nameWithType: AsyncCodeActivityContext\n  fullName: System.Activities.AsyncCodeActivityContext\n  type: Class\n  summary: The execution context for an asynchronous activity.\n  remarks: This is a sealed class and is derived from <xref:System.Activities.CodeActivityContext>.\n  syntax:\n    content: 'public sealed class AsyncCodeActivityContext : System.Activities.CodeActivityContext'\n  inheritance:\n  - System.Object\n  - System.Activities.ActivityContext\n  - System.Activities.CodeActivityContext\n  implements: []\n  inheritedMembers:\n  - System.Activities.ActivityContext.ActivityInstanceId\n  - System.Activities.ActivityContext.DataContext\n  - System.Activities.ActivityContext.GetExtension``1\n  - System.Activities.ActivityContext.GetLocation``1(System.Activities.LocationReference)\n  - System.Activities.ActivityContext.GetValue(System.Activities.Argument)\n  - System.Activities.ActivityContext.GetValue(System.Activities.RuntimeArgument)\n  - System.Activities.ActivityContext.GetValue``1(System.Activities.InArgument`1)\n  - System.Activities.ActivityContext.GetValue``1(System.Activities.InOutArgument`1)\n  - System.Activities.ActivityContext.GetValue``1(System.Activities.LocationReference)\n  - System.Activities.ActivityContext.GetValue``1(System.Activities.OutArgument`1)\n  - System.Activities.ActivityContext.SetValue(System.Activities.Argument,System.Object)\n  - System.Activities.ActivityContext.SetValue``1(System.Activities.InArgument`1,``0)\n  - System.Activities.ActivityContext.SetValue``1(System.Activities.InOutArgument`1,``0)\n  - System.Activities.ActivityContext.SetValue``1(System.Activities.LocationReference,``0)\n  - System.Activities.ActivityContext.SetValue``1(System.Activities.OutArgument`1,``0)\n  - System.Activities.ActivityContext.WorkflowInstanceId\n  - System.Activities.CodeActivityContext.GetProperty``1\n  - System.Activities.CodeActivityContext.Track(System.Activities.Tracking.CustomTrackingRecord)\n  platform:\n  - net462\n- uid: System.Activities.AsyncCodeActivityContext.IsCancellationRequested\n  id: IsCancellationRequested\n  parent: System.Activities.AsyncCodeActivityContext\n  langs:\n  - csharp\n  name: IsCancellationRequested\n  nameWithType: AsyncCodeActivityContext.IsCancellationRequested\n  fullName: System.Activities.AsyncCodeActivityContext.IsCancellationRequested\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets a value that indicates whether the currently executing <xref href=\"System.Activities.AsyncCodeActivity\"></xref> is to be canceled.\n  syntax:\n    content: public bool IsCancellationRequested { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the currently executing <xref href=\"System.Activities.AsyncCodeActivity\"></xref> is to be canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.AsyncCodeActivityContext.IsCancellationRequested*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.AsyncCodeActivityContext.MarkCanceled\n  id: MarkCanceled\n  parent: System.Activities.AsyncCodeActivityContext\n  langs:\n  - csharp\n  name: MarkCanceled()\n  nameWithType: AsyncCodeActivityContext.MarkCanceled()\n  fullName: System.Activities.AsyncCodeActivityContext.MarkCanceled()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Marks the current activity instance as canceled.\n  syntax:\n    content: public void MarkCanceled ();\n    parameters: []\n  overload: System.Activities.AsyncCodeActivityContext.MarkCanceled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.AsyncCodeActivityContext.UserState\n  id: UserState\n  parent: System.Activities.AsyncCodeActivityContext\n  langs:\n  - csharp\n  name: UserState\n  nameWithType: AsyncCodeActivityContext.UserState\n  fullName: System.Activities.AsyncCodeActivityContext.UserState\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets or sets a user-defined object associated with the current asynchronous activity.\n  syntax:\n    content: public object UserState { get; set; }\n    return:\n      type: System.Object\n      description: The user-defined object.\n  overload: System.Activities.AsyncCodeActivityContext.UserState*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.CodeActivityContext\n  isExternal: false\n  name: System.Activities.CodeActivityContext\n- uid: System.Activities.AsyncCodeActivityContext.IsCancellationRequested\n  parent: System.Activities.AsyncCodeActivityContext\n  isExternal: false\n  name: IsCancellationRequested\n  nameWithType: AsyncCodeActivityContext.IsCancellationRequested\n  fullName: System.Activities.AsyncCodeActivityContext.IsCancellationRequested\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.AsyncCodeActivityContext.MarkCanceled\n  parent: System.Activities.AsyncCodeActivityContext\n  isExternal: false\n  name: MarkCanceled()\n  nameWithType: AsyncCodeActivityContext.MarkCanceled()\n  fullName: System.Activities.AsyncCodeActivityContext.MarkCanceled()\n- uid: System.Activities.AsyncCodeActivityContext.UserState\n  parent: System.Activities.AsyncCodeActivityContext\n  isExternal: false\n  name: UserState\n  nameWithType: AsyncCodeActivityContext.UserState\n  fullName: System.Activities.AsyncCodeActivityContext.UserState\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Activities.AsyncCodeActivityContext.IsCancellationRequested*\n  parent: System.Activities.AsyncCodeActivityContext\n  isExternal: false\n  name: IsCancellationRequested\n  nameWithType: AsyncCodeActivityContext.IsCancellationRequested\n- uid: System.Activities.AsyncCodeActivityContext.MarkCanceled*\n  parent: System.Activities.AsyncCodeActivityContext\n  isExternal: false\n  name: MarkCanceled\n  nameWithType: AsyncCodeActivityContext.MarkCanceled\n- uid: System.Activities.AsyncCodeActivityContext.UserState*\n  parent: System.Activities.AsyncCodeActivityContext\n  isExternal: false\n  name: UserState\n  nameWithType: AsyncCodeActivityContext.UserState\n"}