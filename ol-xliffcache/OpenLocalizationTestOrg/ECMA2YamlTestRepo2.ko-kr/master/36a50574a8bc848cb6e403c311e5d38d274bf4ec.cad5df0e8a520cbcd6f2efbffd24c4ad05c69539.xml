{"nodes":[{"pos":[4180,4469],"content":"Represents the standard input, output, and error streams for console applications. This class cannot be inherited.       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4).","needQuote":false,"needEscape":true,"nodes":[{"content":"Represents the standard input, output, and error streams for console applications.","pos":[0,82]},{"content":"This class cannot be inherited.","pos":[83,114]},{"content":"To browse the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)</ept>.","pos":[121,287],"source":"       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)."}]},{"pos":[23125,23174],"content":"Gets or sets the background color of the console.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the background color of the console.","pos":[0,49]}]},{"pos":[23187,23900],"content":"A change to the BackgroundColor property affects only output that is written to individual character cells after the background color is changed. To change the background color of the console window as a whole, set the BackgroundColor property and call the <xref:System.Console.Clear%2A> method. The following example provides an illustration.       [!code-vb[System.Console.BackgroundColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)]  [!code-cs[System.Console.BackgroundColor#1](~/add/codesnippet/csharp/p-system.console.backgro_1.cs)]       A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor?displayProperty=fullName>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A change to the BackgroundColor property affects only output that is written to individual character cells after the background color is changed.","pos":[0,145]},{"content":"To change the background color of the console window as a whole, set the BackgroundColor property and call the &lt;xref:System.Console.Clear%2A&gt; method.","pos":[146,295],"source":" To change the background color of the console window as a whole, set the BackgroundColor property and call the <xref:System.Console.Clear%2A> method."},{"content":"The following example provides an illustration.","pos":[296,343]},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Console.BackgroundColor#1<ept id=\"p2\">](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Console.BackgroundColor#1<ept id=\"p4\">](~/add/codesnippet/csharp/p-system.console.backgro_1.cs)</ept><ept id=\"p3\">]</ept>       A get operation for a Windows-based application, in which a console does not exist, returns &lt;xref:System.ConsoleColor?displayProperty=fullName&gt;.","pos":[350,708],"source":"[!code-vb[System.Console.BackgroundColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)]  [!code-cs[System.Console.BackgroundColor#1](~/add/codesnippet/csharp/p-system.console.backgro_1.cs)]       A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor?displayProperty=fullName>."}]},{"pos":[24976,25112],"content":"A value that specifies the background color of the console; that is, the color that appears behind each character. The default is black.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that specifies the background color of the console; that is, the color that appears behind each character. The default is black.","pos":[0,136],"nodes":[{"content":"A value that specifies the background color of the console; that is, the color that appears behind each character.","pos":[0,114]},{"content":"The default is black.","pos":[115,136]}]}]},{"pos":[25265,25370],"content":"The color specified in a set operation is not a valid member of <bpt id=\"p1\">&lt;xref href=\"System.ConsoleColor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The color specified in a set operation is not a valid member of <xref href=\"System.ConsoleColor\"></xref>."},{"pos":[25483,25540],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[25629,25651],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[25911,25965],"content":"Plays the sound of a beep through the console speaker.","needQuote":true,"needEscape":true,"nodes":[{"content":"Plays the sound of a beep through the console speaker.","pos":[0,54]}]},{"pos":[25978,26530],"content":"By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.      > [!NOTE] >  The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP.       Beep wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Whether Beep produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.","pos":[0,90]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Console.Beep%2A&gt; method is not supported on the 64-bit editions of Windows Vista and Windows XP.","pos":[96,222],"source":"      > [!NOTE] >  The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP."},{"content":"Beep wraps a call to the Windows <bpt id=\"p1\">[</bpt>Beep function<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)</ept>.","pos":[229,344],"source":"       Beep wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)."},{"content":"Whether Beep produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip.","pos":[345,482]},{"content":"Starting with Windows 7, it depends on the default sound device.","pos":[483,547]}]},{"pos":[27213,27319],"content":"This method was executed on a server, such as SQL Server, that does not permit access to a user interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method was executed on a server, such as SQL Server, that does not permit access to a user interface.","pos":[0,106]}]},{"pos":[27666,27758],"content":"Plays the sound of a beep of a specified frequency and duration through the console speaker.","needQuote":true,"needEscape":true,"nodes":[{"content":"Plays the sound of a beep of a specified frequency and duration through the console speaker.","pos":[0,92]}]},{"pos":[27771,28274],"content":"<xref:System.Console.Beep%2A> wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Whether <xref:System.Console.Beep%2A> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device.      > [!NOTE] >  The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Console.Beep%2A&gt; wraps a call to the Windows <bpt id=\"p1\">[</bpt>Beep function<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)</ept>.","pos":[0,140],"source":"<xref:System.Console.Beep%2A> wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)."},{"content":"Whether &lt;xref:System.Console.Beep%2A&gt; produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip.","pos":[141,303],"source":" Whether <xref:System.Console.Beep%2A> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip."},{"content":"Starting with Windows 7, it depends on the default sound device.","pos":[304,368]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Console.Beep%2A&gt; method is not supported on the 64-bit editions of Windows Vista and Windows XP.","pos":[374,500],"source":"      > [!NOTE] >  The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP."}]},{"pos":[28831,28889],"content":"The frequency of the beep, ranging from 37 to 32767 hertz.","needQuote":true,"needEscape":true,"nodes":[{"content":"The frequency of the beep, ranging from 37 to 32767 hertz.","pos":[0,58]}]},{"pos":[28953,29003],"content":"The duration of the beep measured in milliseconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The duration of the beep measured in milliseconds.","pos":[0,50]}]},{"pos":[29166,29304],"content":"<code>frequency</code> is less than 37 or more than 32767 hertz.       -or-       <code>duration</code> is less than or equal to zero.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;frequency&lt;/code&gt;</ph> is less than 37 or more than 32767 hertz.","pos":[0,64],"source":"<code>frequency</code> is less than 37 or more than 32767 hertz."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;duration&lt;/code&gt;</ph> is less than or equal to zero.","pos":[71,134],"source":"       -or-       <code>duration</code> is less than or equal to zero."}]},{"pos":[29430,29531],"content":"This method was executed on a server, such as SQL Server, that does not permit access to the console.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method was executed on a server, such as SQL Server, that does not permit access to the console.","pos":[0,101]}]},{"pos":[29827,29870],"content":"Gets or sets the height of the buffer area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the height of the buffer area.","pos":[0,43]}]},{"pos":[29883,30773],"content":"This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window. In contrast, the <xref:System.Console.WindowHeight%2A> property defines the number of rows that are actually displayed in the console window at any particular time. If the number of rows actually written to the buffer exceeds the number of rows defined by the <xref:System.Console.WindowHeight%2A> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <xref:System.Console.WindowHeight%2A> property and are located anywhere in the buffer.       If a set operation decreases the value of the BufferHeight property, the uppermost lines are removed. For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window. In contrast, the <xref:System.Console.WindowHeight%2A> property defines the number of rows that are actually displayed in the console window at any particular time. If the number of rows actually written to the buffer exceeds the number of rows defined by the <xref:System.Console.WindowHeight%2A> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <xref:System.Console.WindowHeight%2A> property and are located anywhere in the buffer.       If a set operation decreases the value of the BufferHeight property, the uppermost lines are removed. For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.","pos":[0,888],"nodes":[{"content":"This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window.","pos":[0,115]},{"content":"In contrast, the &lt;xref:System.Console.WindowHeight%2A&gt; property defines the number of rows that are actually displayed in the console window at any particular time.","pos":[116,280],"source":" In contrast, the <xref:System.Console.WindowHeight%2A> property defines the number of rows that are actually displayed in the console window at any particular time."},{"content":"If the number of rows actually written to the buffer exceeds the number of rows defined by the &lt;xref:System.Console.WindowHeight%2A&gt; property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the &lt;xref:System.Console.WindowHeight%2A&gt; property and are located anywhere in the buffer.","pos":[281,618],"source":" If the number of rows actually written to the buffer exceeds the number of rows defined by the <xref:System.Console.WindowHeight%2A> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <xref:System.Console.WindowHeight%2A> property and are located anywhere in the buffer."},{"content":"If a set operation decreases the value of the BufferHeight property, the uppermost lines are removed.","pos":[625,726]},{"content":"For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.","pos":[727,888]}]}]},{"pos":[31403,31451],"content":"The current height, in rows, of the buffer area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current height, in rows, of the buffer area.","pos":[0,48]}]},{"pos":[31622,31955],"content":"The value in a set operation is less than or equal to zero.       -or-       The value in a set operation is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       -or-       The value in a set operation is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value in a set operation is less than or equal to zero.","pos":[0,59]},{"content":"-or-       The value in a set operation is greater than or equal to <ph id=\"ph1\">&amp;lt;</ph>xref:System.Int16.MaxValue?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[66,194],"source":"       -or-       The value in a set operation is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;."},{"content":"-or-       The value in a set operation is less than &lt;xref:System.Console.WindowTop<bpt id=\"p1\">*</bpt>&gt; + &lt;xref:System.Console.WindowHeight<ept id=\"p1\">*</ept>&gt;.","pos":[201,325],"source":"       -or-       The value in a set operation is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>."}]},{"pos":[32069,32126],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[32215,32237],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[32528,32570],"content":"Gets or sets the width of the buffer area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the width of the buffer area.","pos":[0,42]}]},{"pos":[32582,32795],"content":"If a set operation decreases the value of the BufferWidth property, the rightmost columns are removed. For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a set operation decreases the value of the BufferWidth property, the rightmost columns are removed. For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.","pos":[0,213],"nodes":[{"content":"If a set operation decreases the value of the BufferWidth property, the rightmost columns are removed.","pos":[0,102]},{"content":"For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.","pos":[103,213]}]}]},{"pos":[33423,33473],"content":"The current width, in columns, of the buffer area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current width, in columns, of the buffer area.","pos":[0,50]}]},{"pos":[33643,33976],"content":"The value in a set operation is less than or equal to zero.       -or-       The value in a set operation is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       -or-       The value in a set operation is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value in a set operation is less than or equal to zero.","pos":[0,59]},{"content":"-or-       The value in a set operation is greater than or equal to <ph id=\"ph1\">&amp;lt;</ph>xref:System.Int16.MaxValue?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[66,194],"source":"       -or-       The value in a set operation is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;."},{"content":"-or-       The value in a set operation is less than &lt;xref:System.Console.WindowLeft<bpt id=\"p1\">*</bpt>&gt; + &lt;xref:System.Console.WindowWidth<ept id=\"p1\">*</ept>&gt;.","pos":[201,325],"source":"       -or-       The value in a set operation is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>."}]},{"pos":[34090,34147],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[34236,34258],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[34561,34779],"content":"Occurs when the <bpt id=\"p1\">&lt;xref href=\"System.ConsoleModifiers\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> modifier key (Ctrl) and either the <bpt id=\"p2\">&lt;xref href=\"System.ConsoleKey\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).","needQuote":true,"needEscape":true,"source":"Occurs when the <xref href=\"System.ConsoleModifiers\"></xref> modifier key (Ctrl) and either the <xref href=\"System.ConsoleKey\"></xref> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break)."},{"pos":[34792,36741],"content":"This event is used in conjunction with <xref:System.ConsoleCancelEventHandler?displayProperty=fullName> and <xref:System.ConsoleCancelEventArgs?displayProperty=fullName>. The CancelKeyPress event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate. For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       When the user presses either Ctrl+C or Ctrl+Break, the CancelKeyPress event is fired and the application's <xref:System.ConsoleCancelEventHandler> event handler is executed. The event handler is passed a <xref:System.ConsoleCancelEventArgs> object that has two useful properties:      -   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <xref:System.ConsoleSpecialKey?displayProperty=fullName>) or Ctrl+Break (the property value is <xref:System.ConsoleSpecialKey?displayProperty=fullName>).      -   <xref:System.ConsoleCancelEventArgs.Cancel%2A>, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break. By default, the <xref:System.ConsoleCancelEventArgs.Cancel%2A> property is `false`, which causes program execution to terminate when the event handler exits. Changing its property to `true` specifies that the application should continue to execute.      > [!TIP] >  If your application has simple requirements, you can use the <xref:System.Console.TreatControlCAsInput%2A> property instead of this event. By setting this property to `false`, you can ensure that your application always exits if the user presses Ctrl+C. By setting it to `true`, you can ensure that pressing Ctrl+C will not terminate the application.       The event handler for this event is executed on a thread pool thread.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This event is used in conjunction with &lt;xref:System.ConsoleCancelEventHandler?displayProperty=fullName&gt; and &lt;xref:System.ConsoleCancelEventArgs?displayProperty=fullName&gt;.","pos":[0,170],"source":"This event is used in conjunction with <xref:System.ConsoleCancelEventHandler?displayProperty=fullName> and <xref:System.ConsoleCancelEventArgs?displayProperty=fullName>."},{"content":"The CancelKeyPress event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate.","pos":[171,332]},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>Handling and Raising Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[333,450],"source":" For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."},{"content":"When the user presses either Ctrl+C or Ctrl+Break, the CancelKeyPress event is fired and the application's &lt;xref:System.ConsoleCancelEventHandler&gt; event handler is executed.","pos":[457,630],"source":"       When the user presses either Ctrl+C or Ctrl+Break, the CancelKeyPress event is fired and the application's <xref:System.ConsoleCancelEventHandler> event handler is executed."},{"content":"The event handler is passed a &lt;xref:System.ConsoleCancelEventArgs&gt; object that has two useful properties:      -   &lt;xref:System.ConsoleCancelEventArgs.SpecialKey%2A&gt;, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is &lt;xref:System.ConsoleSpecialKey?displayProperty=fullName&gt;) or Ctrl+Break (the property value is &lt;xref:System.ConsoleSpecialKey?displayProperty=fullName&gt;).","pos":[631,1076],"source":" The event handler is passed a <xref:System.ConsoleCancelEventArgs> object that has two useful properties:      -   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <xref:System.ConsoleSpecialKey?displayProperty=fullName>) or Ctrl+Break (the property value is <xref:System.ConsoleSpecialKey?displayProperty=fullName>)."},{"content":"-   &lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt;, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break.","pos":[1082,1245],"source":"      -   <xref:System.ConsoleCancelEventArgs.Cancel%2A>, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break."},{"content":"By default, the &lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt; property is <ph id=\"ph1\">`false`</ph>, which causes program execution to terminate when the event handler exits.","pos":[1246,1403],"source":" By default, the <xref:System.ConsoleCancelEventArgs.Cancel%2A> property is `false`, which causes program execution to terminate when the event handler exits."},{"content":"Changing its property to <ph id=\"ph1\">`true`</ph> specifies that the application should continue to execute.","pos":[1404,1494],"source":" Changing its property to `true` specifies that the application should continue to execute."},{"content":"&gt; <ph id=\"ph1\">[!TIP]</ph> &gt;  If your application has simple requirements, you can use the &lt;xref:System.Console.TreatControlCAsInput%2A&gt; property instead of this event.","pos":[1500,1650],"source":"      > [!TIP] >  If your application has simple requirements, you can use the <xref:System.Console.TreatControlCAsInput%2A> property instead of this event."},{"content":"By setting this property to <ph id=\"ph1\">`false`</ph>, you can ensure that your application always exits if the user presses Ctrl+C.","pos":[1651,1765],"source":" By setting this property to `false`, you can ensure that your application always exits if the user presses Ctrl+C."},{"content":"By setting it to <ph id=\"ph1\">`true`</ph>, you can ensure that pressing Ctrl+C will not terminate the application.","pos":[1766,1862],"source":" By setting it to `true`, you can ensure that pressing Ctrl+C will not terminate the application."},{"content":"The event handler for this event is executed on a thread pool thread.","pos":[1869,1938]}]},{"pos":[37821,37833],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[38126,38215],"content":"Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.","pos":[0,89]}]},{"pos":[38334,38512],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if CAPS LOCK is turned on; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if CAPS LOCK is turned off.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if CAPS LOCK is turned on; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if CAPS LOCK is turned off."},{"pos":[38831,38913],"content":"Clears the console buffer and corresponding console window of display information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears the console buffer and corresponding console window of display information.","pos":[0,82]}]},{"pos":[38926,39471],"content":"Using the Clear method is equivalent invoking the MS-DOS `cls` command in the command prompt window. When the Clear method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.      > [!NOTE] >  Attempting to call the Clear method when a console application's output is redirected to a file throws a <xref:System.IO.IOException>. To prevent this, always wrap a call to the Clear method in a `try`…`catch` block.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Using the Clear method is equivalent invoking the MS-DOS <ph id=\"ph1\">`cls`</ph> command in the command prompt window.","pos":[0,100],"source":"Using the Clear method is equivalent invoking the MS-DOS `cls` command in the command prompt window."},{"content":"When the Clear method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.","pos":[101,307]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Attempting to call the Clear method when a console application's output is redirected to a file throws a &lt;xref:System.IO.IOException&gt;.","pos":[313,460],"source":"      > [!NOTE] >  Attempting to call the Clear method when a console application's output is redirected to a file throws a <xref:System.IO.IOException>."},{"content":"To prevent this, always wrap a call to the Clear method in a <ph id=\"ph1\">`try`</ph>…<ph id=\"ph2\">`catch`</ph>","pos":[461,535],"source":" To prevent this, always wrap a call to the Clear method in a `try`…`catch`"},{"content":"block.","pos":[536,542]}]},{"pos":[41137,41159],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[41445,41515],"content":"Gets or sets the column position of the cursor within the buffer area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the column position of the cursor within the buffer area.","pos":[0,70]}]},{"pos":[42422,42470],"content":"The current position, in columns, of the cursor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current position, in columns, of the cursor.","pos":[0,48]}]},{"pos":[42639,42800],"content":"The value in a set operation is less than zero.       -or-       The value in a set operation is greater than or equal to <xref:System.Console.BufferWidth*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value in a set operation is less than zero.       -or-       The value in a set operation is greater than or equal to <xref:System.Console.BufferWidth*>.","pos":[0,157],"nodes":[{"content":"The value in a set operation is less than zero.","pos":[0,47]},{"content":"-or-       The value in a set operation is greater than or equal to &lt;xref:System.Console.BufferWidth*&gt;.","pos":[54,157],"source":"       -or-       The value in a set operation is greater than or equal to <xref:System.Console.BufferWidth*>."}]}]},{"pos":[42914,42971],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[43060,43082],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[43368,43430],"content":"Gets or sets the height of the cursor within a character cell.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the height of the cursor within a character cell.","pos":[0,62]}]},{"pos":[43442,43621],"content":"The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.","pos":[0,179]}]},{"pos":[44244,44368],"content":"The size of the cursor expressed as a percentage of the height of a character cell. The property value ranges from 1 to 100.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the cursor expressed as a percentage of the height of a character cell. The property value ranges from 1 to 100.","pos":[0,124],"nodes":[{"content":"The size of the cursor expressed as a percentage of the height of a character cell.","pos":[0,83]},{"content":"The property value ranges from 1 to 100.","pos":[84,124]}]}]},{"pos":[44536,44610],"content":"The value specified in a set operation is less than 1 or greater than 100.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value specified in a set operation is less than 1 or greater than 100.","pos":[0,74]}]},{"pos":[44723,44780],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[44869,44891],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[45172,45239],"content":"Gets or sets the row position of the cursor within the buffer area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the row position of the cursor within the buffer area.","pos":[0,67]}]},{"pos":[46151,46196],"content":"The current position, in rows, of the cursor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current position, in rows, of the cursor.","pos":[0,45]}]},{"pos":[46364,46526],"content":"The value in a set operation is less than zero.       -or-       The value in a set operation is greater than or equal to <xref:System.Console.BufferHeight*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value in a set operation is less than zero.       -or-       The value in a set operation is greater than or equal to <xref:System.Console.BufferHeight*>.","pos":[0,158],"nodes":[{"content":"The value in a set operation is less than zero.","pos":[0,47]},{"content":"-or-       The value in a set operation is greater than or equal to &lt;xref:System.Console.BufferHeight*&gt;.","pos":[54,158],"source":"       -or-       The value in a set operation is greater than or equal to <xref:System.Console.BufferHeight*>."}]}]},{"pos":[46640,46697],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[46786,46808],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[47109,47171],"content":"Gets or sets a value indicating whether the cursor is visible.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the cursor is visible.","pos":[0,62]}]},{"pos":[47796,47957],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the cursor is visible; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the cursor is visible; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[48126,48183],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[48272,48294],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[48555,48593],"content":"Gets the standard error output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the standard error output stream.","pos":[0,38]}]},{"pos":[48606,49638],"content":"This standard error stream is set to the console by default. It can be set to another stream with the <xref:System.Console.SetError%2A> method. After the standard error stream is redirected, it can be reacquired by calling the <xref:System.Console.OpenStandardError%2A> method.       In console applications whose informational output is often redirected to a file, the standard error stream available through the Error property can be used to display information to the console even if output is redirected. The following example displays product tables for 10 numbers at a time starting with 1. After every set of 10 numbers, the Error property is used to ask the user whether to display the next set. If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.       [!code-cs[System.Console.Error#1](~/add/codesnippet/csharp/p-system.console.error_1.cs)]  [!code-vb[System.Console.Error#1](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This standard error stream is set to the console by default.","pos":[0,60]},{"content":"It can be set to another stream with the &lt;xref:System.Console.SetError%2A&gt; method.","pos":[61,143],"source":" It can be set to another stream with the <xref:System.Console.SetError%2A> method."},{"content":"After the standard error stream is redirected, it can be reacquired by calling the &lt;xref:System.Console.OpenStandardError%2A&gt; method.","pos":[144,277],"source":" After the standard error stream is redirected, it can be reacquired by calling the <xref:System.Console.OpenStandardError%2A> method."},{"content":"In console applications whose informational output is often redirected to a file, the standard error stream available through the Error property can be used to display information to the console even if output is redirected.","pos":[284,508]},{"content":"The following example displays product tables for 10 numbers at a time starting with 1.","pos":[509,596]},{"content":"After every set of 10 numbers, the Error property is used to ask the user whether to display the next set.","pos":[597,703]},{"content":"If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.","pos":[704,837]},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Console.Error#1<ept id=\"p2\">](~/add/codesnippet/csharp/p-system.console.error_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Console.Error#1<ept id=\"p4\">](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)</ept><ept id=\"p3\">]</ept>","pos":[844,1027],"source":"[!code-cs[System.Console.Error#1](~/add/codesnippet/csharp/p-system.console.error_1.cs)]  [!code-vb[System.Console.Error#1](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)]"}]},{"pos":[51495,51574],"content":"A <xref:System.IO.TextWriter> that represents the standard error output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.TextWriter&gt; that represents the standard error output stream.","pos":[0,79],"source":"A <xref:System.IO.TextWriter> that represents the standard error output stream."}]},{"pos":[51936,51985],"content":"Gets or sets the foreground color of the console.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the foreground color of the console.","pos":[0,49]}]},{"pos":[51997,52116],"content":"A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A get operation for a Windows-based application, in which a console does not exist, returns &lt;xref:System.ConsoleColor&gt;.","pos":[0,119],"source":"A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor>."}]},{"pos":[53560,53731],"content":"A <xref href=\"System.ConsoleColor\"></xref> that specifies the foreground color of the console; that is, the color of each character that is displayed. The default is gray.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ConsoleColor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the foreground color of the console; that is, the color of each character that is displayed.","pos":[0,150],"source":"A <xref href=\"System.ConsoleColor\"></xref> that specifies the foreground color of the console; that is, the color of each character that is displayed."},{"content":"The default is gray.","pos":[151,171]}]},{"pos":[53884,53989],"content":"The color specified in a set operation is not a valid member of <bpt id=\"p1\">&lt;xref href=\"System.ConsoleColor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The color specified in a set operation is not a valid member of <xref href=\"System.ConsoleColor\"></xref>."},{"pos":[54102,54159],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[54248,54270],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[54516,54547],"content":"Gets the standard input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the standard input stream.","pos":[0,31]}]},{"pos":[54560,55038],"content":"This property is set to the standard input stream by default. This property can be set to another stream with the <xref:System.Console.SetIn%2A> method.       Read operations on the standard input stream execute synchronously. That is, they block until the specified read operation has completed. This is true even if an asynchronous method, such as <xref:System.IO.TextReader.ReadLineAsync%2A>, is called on the <xref:System.IO.TextReader> object returned by the In property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is set to the standard input stream by default. This property can be set to another stream with the <xref:System.Console.SetIn%2A> method.       Read operations on the standard input stream execute synchronously. That is, they block until the specified read operation has completed. This is true even if an asynchronous method, such as <xref:System.IO.TextReader.ReadLineAsync%2A>, is called on the <xref:System.IO.TextReader> object returned by the In property.","pos":[0,476],"nodes":[{"content":"This property is set to the standard input stream by default.","pos":[0,61]},{"content":"This property can be set to another stream with the &lt;xref:System.Console.SetIn%2A&gt; method.","pos":[62,152],"source":" This property can be set to another stream with the <xref:System.Console.SetIn%2A> method."},{"content":"Read operations on the standard input stream execute synchronously.","pos":[159,226]},{"content":"That is, they block until the specified read operation has completed.","pos":[227,296]},{"content":"This is true even if an asynchronous method, such as &lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;, is called on the &lt;xref:System.IO.TextReader&gt; object returned by the In property.","pos":[297,476],"source":" This is true even if an asynchronous method, such as <xref:System.IO.TextReader.ReadLineAsync%2A>, is called on the <xref:System.IO.TextReader> object returned by the In property."}]}]},{"pos":[55495,55567],"content":"A <xref:System.IO.TextReader> that represents the standard input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.TextReader&gt; that represents the standard input stream.","pos":[0,72],"source":"A <xref:System.IO.TextReader> that represents the standard input stream."}]},{"pos":[55916,55973],"content":"Gets or sets the encoding the console uses to read input.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the encoding the console uses to read input.","pos":[0,57]}]},{"pos":[55986,56743],"content":"The console uses the input encoding to translate keyboard input into a corresponding character. The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters. Different code pages include different special characters, typically customized for a language or a group of languages.       Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current input encoding. This can occur if the value of the InputEncoding property is modified by some means other than an assignment to the InputEncoding property, such as calling the Windows `SetConsoleCP` function or using the `chcp` command from a PowerShell script.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The console uses the input encoding to translate keyboard input into a corresponding character.","pos":[0,95]},{"content":"The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters.","pos":[96,204]},{"content":"Different code pages include different special characters, typically customized for a language or a group of languages.","pos":[205,324]},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, a property get operation may return a cached value instead of the console's current input encoding.","pos":[331,509],"source":"       Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current input encoding."},{"content":"This can occur if the value of the InputEncoding property is modified by some means other than an assignment to the InputEncoding property, such as calling the Windows <ph id=\"ph1\">`SetConsoleCP`</ph> function or using the <ph id=\"ph2\">`chcp`</ph> command from a PowerShell script.","pos":[510,755],"source":" This can occur if the value of the InputEncoding property is modified by some means other than an assignment to the InputEncoding property, such as calling the Windows `SetConsoleCP` function or using the `chcp` command from a PowerShell script."}]},{"pos":[56895,56935],"content":"The encoding used to read console input.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encoding used to read console input.","pos":[0,40]}]},{"pos":[57094,57196],"content":"The property value in a set operation is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The property value in a set operation is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[57285,57342],"content":"An error occurred during the execution of this operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the execution of this operation.","pos":[0,57]}]},{"pos":[57455,57523],"content":"Your application does not have permission to perform this operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Your application does not have permission to perform this operation.","pos":[0,68]}]},{"pos":[57844,57955],"content":"Gets a value that indicates whether the error output stream has been redirected from the standard error stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the error output stream has been redirected from the standard error stream.","pos":[0,111]}]},{"pos":[58083,58249],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if error output is redirected; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if error output is redirected; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[58633,58726],"content":"Gets a value that indicates whether input has been redirected from the standard input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether input has been redirected from the standard input stream.","pos":[0,93]}]},{"pos":[58854,59013],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if input is redirected; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if input is redirected; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[59402,59497],"content":"Gets a value that indicates whether output has been redirected from the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether output has been redirected from the standard output stream.","pos":[0,95]}]},{"pos":[59626,59786],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if output is redirected; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if output is redirected; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[60146,60223],"content":"Gets a value indicating whether a key press is available in the input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether a key press is available in the input stream.","pos":[0,77]}]},{"pos":[60236,60559],"content":"The property value is returned immediately; that is, the KeyAvailable property does not block input until a key press is available.       Use the KeyAvailable property in conjunction with only the <xref:System.Console.ReadKey%2A> method, not the <xref:System.Console.Read%2A> or <xref:System.Console.ReadLine%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The property value is returned immediately; that is, the KeyAvailable property does not block input until a key press is available.       Use the KeyAvailable property in conjunction with only the <xref:System.Console.ReadKey%2A> method, not the <xref:System.Console.Read%2A> or <xref:System.Console.ReadLine%2A> methods.","pos":[0,321],"nodes":[{"content":"The property value is returned immediately; that is, the KeyAvailable property does not block input until a key press is available.","pos":[0,131]},{"content":"Use the KeyAvailable property in conjunction with only the &lt;xref:System.Console.ReadKey%2A&gt; method, not the &lt;xref:System.Console.Read%2A&gt; or &lt;xref:System.Console.ReadLine%2A&gt; methods.","pos":[138,321],"source":"       Use the KeyAvailable property in conjunction with only the <xref:System.Console.ReadKey%2A> method, not the <xref:System.Console.Read%2A> or <xref:System.Console.ReadLine%2A> methods."}]}]},{"pos":[61112,61276],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a key press is available; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a key press is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[61420,61442],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[61553,61616],"content":"Standard input is redirected to a file instead of the keyboard.","needQuote":true,"needEscape":true,"nodes":[{"content":"Standard input is redirected to a file instead of the keyboard.","pos":[0,63]}]},{"pos":[61947,62052],"content":"Gets the largest possible number of console window rows, based on the current font and screen resolution.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the largest possible number of console window rows, based on the current font and screen resolution.","pos":[0,105]}]},{"pos":[62179,62246],"content":"The height of the largest possible console window measured in rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the largest possible console window measured in rows.","pos":[0,67]}]},{"pos":[62637,62745],"content":"Gets the largest possible number of console window columns, based on the current font and screen resolution.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the largest possible number of console window columns, based on the current font and screen resolution.","pos":[0,108]}]},{"pos":[62871,62940],"content":"The width of the largest possible console window measured in columns.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the largest possible console window measured in columns.","pos":[0,69]}]},{"pos":[63577,63661],"content":"Copies a specified source area of the screen buffer to a specified destination area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies a specified source area of the screen buffer to a specified destination area.","pos":[0,84]}]},{"pos":[63674,64250],"content":"If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.       The MoveBufferArea method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors. Otherwise, the intersected portion of the source area is not filled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.       The MoveBufferArea method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors. Otherwise, the intersected portion of the source area is not filled.","pos":[0,574],"nodes":[{"content":"If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied.","pos":[0,205]},{"content":"That is, the source area is clipped to fit the current screen buffer.","pos":[206,275]},{"content":"The MoveBufferArea method copies the source area to the destination area.","pos":[282,355]},{"content":"If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors.","pos":[356,505]},{"content":"Otherwise, the intersected portion of the source area is not filled.","pos":[506,574]}]}]},{"pos":[64489,64528],"content":"The leftmost column of the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The leftmost column of the source area.","pos":[0,39]}]},{"pos":[64593,64628],"content":"The topmost row of the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The topmost row of the source area.","pos":[0,35]}]},{"pos":[64695,64736],"content":"The number of columns in the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of columns in the source area.","pos":[0,41]}]},{"pos":[64804,64842],"content":"The number of rows in the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows in the source area.","pos":[0,38]}]},{"pos":[64908,64952],"content":"The leftmost column of the destination area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The leftmost column of the destination area.","pos":[0,44]}]},{"pos":[65017,65057],"content":"The topmost row of the destination area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The topmost row of the destination area.","pos":[0,40]}]},{"pos":[65230,65822],"content":"One or more of the parameters is less than zero.       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <xref:System.Console.BufferWidth*>.       -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <xref:System.Console.BufferHeight*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <xref:System.Console.BufferHeight*>.       -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <xref:System.Console.BufferWidth*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One or more of the parameters is less than zero.","pos":[0,48]},{"content":"-or-       <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sourceLeft</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">targetLeft</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than or equal to &lt;xref:System.Console.BufferWidth<bpt id=\"p3\">*</bpt>&gt;.       -or-       <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">sourceTop</ph><ept id=\"p4\">&lt;/code&gt;</ept> or <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph4\">targetTop</ph><ept id=\"p5\">&lt;/code&gt;</ept> is greater than or equal to &lt;xref:System.Console.BufferHeight<ept id=\"p3\">*</ept>&gt;.","pos":[55,311],"source":"       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <xref:System.Console.BufferWidth*>.       -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <xref:System.Console.BufferHeight*>."},{"content":"-or-       <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sourceTop</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">sourceHeight</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than or equal to &lt;xref:System.Console.BufferHeight<bpt id=\"p3\">*</bpt>&gt;.       -or-       <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">sourceLeft</ph><ept id=\"p4\">&lt;/code&gt;</ept><ph id=\"ph5\"> + </ph><bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">sourceWidth</ph><ept id=\"p5\">&lt;/code&gt;</ept> is greater than or equal to &lt;xref:System.Console.BufferWidth<ept id=\"p3\">*</ept>&gt;.","pos":[318,576],"source":"       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <xref:System.Console.BufferHeight*>.       -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <xref:System.Console.BufferWidth*>."}]},{"pos":[65936,65993],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[66082,66104],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[66874,66958],"content":"Copies a specified source area of the screen buffer to a specified destination area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies a specified source area of the screen buffer to a specified destination area.","pos":[0,84]}]},{"pos":[66971,67749],"content":"If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.       The <xref:System.Console.MoveBufferArea%2A> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with the character specified by `sourceChar`, using the colors specified by `sourceForeColor` and `sourceBackColor`. Otherwise, the intersected portion of the source area is not filled.       The <xref:System.Console.MoveBufferArea%2A> method performs no operation if `sourceWidth` or `sourceHeight` is zero.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied.","pos":[0,204]},{"content":"That is, the source area is clipped to fit the current screen buffer.","pos":[205,274]},{"content":"The &lt;xref:System.Console.MoveBufferArea%2A&gt; method copies the source area to the destination area.","pos":[281,379],"source":"       The <xref:System.Console.MoveBufferArea%2A> method copies the source area to the destination area."},{"content":"If the destination area does not intersect the source area, the source area is filled with the character specified by <ph id=\"ph1\">`sourceChar`</ph>, using the colors specified by <ph id=\"ph2\">`sourceForeColor`</ph> and <ph id=\"ph3\">`sourceBackColor`</ph>.","pos":[380,582],"source":" If the destination area does not intersect the source area, the source area is filled with the character specified by `sourceChar`, using the colors specified by `sourceForeColor` and `sourceBackColor`."},{"content":"Otherwise, the intersected portion of the source area is not filled.","pos":[583,651]},{"content":"The &lt;xref:System.Console.MoveBufferArea%2A&gt; method performs no operation if <ph id=\"ph1\">`sourceWidth`</ph> or <ph id=\"ph2\">`sourceHeight`</ph> is zero.","pos":[658,774],"source":"       The <xref:System.Console.MoveBufferArea%2A> method performs no operation if `sourceWidth` or `sourceHeight` is zero."}]},{"pos":[68065,68104],"content":"The leftmost column of the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The leftmost column of the source area.","pos":[0,39]}]},{"pos":[68169,68204],"content":"The topmost row of the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The topmost row of the source area.","pos":[0,35]}]},{"pos":[68271,68312],"content":"The number of columns in the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of columns in the source area.","pos":[0,41]}]},{"pos":[68380,68418],"content":"The number of rows in the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows in the source area.","pos":[0,38]}]},{"pos":[68484,68528],"content":"The leftmost column of the destination area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The leftmost column of the destination area.","pos":[0,44]}]},{"pos":[68593,68633],"content":"The topmost row of the destination area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The topmost row of the destination area.","pos":[0,40]}]},{"pos":[68698,68741],"content":"The character used to fill the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character used to fill the source area.","pos":[0,43]}]},{"pos":[68819,68869],"content":"The foreground color used to fill the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The foreground color used to fill the source area.","pos":[0,50]}]},{"pos":[68947,68997],"content":"The background color used to fill the source area.","needQuote":true,"needEscape":true,"nodes":[{"content":"The background color used to fill the source area.","pos":[0,50]}]},{"pos":[69170,69762],"content":"One or more of the parameters is less than zero.       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <xref:System.Console.BufferWidth*>.       -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <xref:System.Console.BufferHeight*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <xref:System.Console.BufferHeight*>.       -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <xref:System.Console.BufferWidth*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One or more of the parameters is less than zero.","pos":[0,48]},{"content":"-or-       <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sourceLeft</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">targetLeft</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than or equal to &lt;xref:System.Console.BufferWidth<bpt id=\"p3\">*</bpt>&gt;.       -or-       <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">sourceTop</ph><ept id=\"p4\">&lt;/code&gt;</ept> or <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph4\">targetTop</ph><ept id=\"p5\">&lt;/code&gt;</ept> is greater than or equal to &lt;xref:System.Console.BufferHeight<ept id=\"p3\">*</ept>&gt;.","pos":[55,311],"source":"       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <xref:System.Console.BufferWidth*>.       -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <xref:System.Console.BufferHeight*>."},{"content":"-or-       <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sourceTop</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> + </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">sourceHeight</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than or equal to &lt;xref:System.Console.BufferHeight<bpt id=\"p3\">*</bpt>&gt;.       -or-       <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">sourceLeft</ph><ept id=\"p4\">&lt;/code&gt;</ept><ph id=\"ph5\"> + </ph><bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">sourceWidth</ph><ept id=\"p5\">&lt;/code&gt;</ept> is greater than or equal to &lt;xref:System.Console.BufferWidth<ept id=\"p3\">*</ept>&gt;.","pos":[318,576],"source":"       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <xref:System.Console.BufferHeight*>.       -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <xref:System.Console.BufferWidth*>."}]},{"pos":[69858,69970],"content":"One or both of the color parameters is not a member of the <bpt id=\"p1\">&lt;xref href=\"System.ConsoleColor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"One or both of the color parameters is not a member of the <xref href=\"System.ConsoleColor\"></xref> enumeration."},{"pos":[70083,70140],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[70229,70251],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[70537,70625],"content":"Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.","pos":[0,88]}]},{"pos":[70746,70922],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if NUM LOCK is turned on; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if NUM LOCK is turned off.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if NUM LOCK is turned on; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if NUM LOCK is turned off."},{"pos":[71303,71338],"content":"Acquires the standard error stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Acquires the standard error stream.","pos":[0,35]}]},{"pos":[71350,71487],"content":"This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to reacquire the standard error stream after it has been changed by the &lt;xref:System.Console.SetError%2A&gt; method.","pos":[0,137],"source":"This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method."}]},{"pos":[72604,72630],"content":"The standard error stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The standard error stream.","pos":[0,26]}]},{"pos":[73061,73137],"content":"Acquires the standard error stream, which is set to a specified buffer size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Acquires the standard error stream, which is set to a specified buffer size.","pos":[0,76]}]},{"pos":[73149,73286],"content":"This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to reacquire the standard error stream after it has been changed by the &lt;xref:System.Console.SetError%2A&gt; method.","pos":[0,137],"source":"This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method."}]},{"pos":[73458,73490],"content":"The internal stream buffer size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The internal stream buffer size.","pos":[0,32]}]},{"pos":[73551,73577],"content":"The standard error stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The standard error stream.","pos":[0,26]}]},{"pos":[73752,73806],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"<code>bufferSize</code> is less than or equal to zero."},{"pos":[74131,74166],"content":"Acquires the standard input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Acquires the standard input stream.","pos":[0,35]}]},{"pos":[74178,74312],"content":"This method can be used to reacquire the standard input stream after it has been changed by the <xref:System.Console.SetIn%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to reacquire the standard input stream after it has been changed by the &lt;xref:System.Console.SetIn%2A&gt; method.","pos":[0,134],"source":"This method can be used to reacquire the standard input stream after it has been changed by the <xref:System.Console.SetIn%2A> method."}]},{"pos":[74895,74921],"content":"The standard input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The standard input stream.","pos":[0,26]}]},{"pos":[75352,75428],"content":"Acquires the standard input stream, which is set to a specified buffer size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Acquires the standard input stream, which is set to a specified buffer size.","pos":[0,76]}]},{"pos":[75440,75575],"content":"This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetIn%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to reacquire the standard output stream after it has been changed by the &lt;xref:System.Console.SetIn%2A&gt; method.","pos":[0,135],"source":"This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetIn%2A> method."}]},{"pos":[76174,76206],"content":"The internal stream buffer size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The internal stream buffer size.","pos":[0,32]}]},{"pos":[76267,76293],"content":"The standard input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The standard input stream.","pos":[0,26]}]},{"pos":[76468,76522],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"<code>bufferSize</code> is less than or equal to zero."},{"pos":[76852,76888],"content":"Acquires the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Acquires the standard output stream.","pos":[0,36]}]},{"pos":[76900,77036],"content":"This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to reacquire the standard output stream after it has been changed by the &lt;xref:System.Console.SetOut%2A&gt; method.","pos":[0,136],"source":"This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method."}]},{"pos":[77968,77995],"content":"The standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The standard output stream.","pos":[0,27]}]},{"pos":[78432,78509],"content":"Acquires the standard output stream, which is set to a specified buffer size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Acquires the standard output stream, which is set to a specified buffer size.","pos":[0,77]}]},{"pos":[78521,78657],"content":"This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be used to reacquire the standard output stream after it has been changed by the &lt;xref:System.Console.SetOut%2A&gt; method.","pos":[0,136],"source":"This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method."}]},{"pos":[79605,79637],"content":"The internal stream buffer size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The internal stream buffer size.","pos":[0,32]}]},{"pos":[79698,79725],"content":"The standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The standard output stream.","pos":[0,27]}]},{"pos":[79901,79955],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than or equal to zero.","needQuote":true,"needEscape":true,"source":"<code>bufferSize</code> is less than or equal to zero."},{"pos":[80206,80238],"content":"Gets the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the standard output stream.","pos":[0,32]}]},{"pos":[80251,80553],"content":"This property is set to the standard output stream by default. This property can be set to another stream with the <xref:System.Console.SetOut%2A> method.       Note that calls to `Console.Out.WriteLine` methods are equivalent to calls to the corresponding <xref:System.Console.WriteLine%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is set to the standard output stream by default.","pos":[0,62]},{"content":"This property can be set to another stream with the &lt;xref:System.Console.SetOut%2A&gt; method.","pos":[63,154],"source":" This property can be set to another stream with the <xref:System.Console.SetOut%2A> method."},{"content":"Note that calls to <ph id=\"ph1\">`Console.Out.WriteLine`</ph> methods are equivalent to calls to the corresponding &lt;xref:System.Console.WriteLine%2A&gt; methods.","pos":[161,300],"source":"       Note that calls to `Console.Out.WriteLine` methods are equivalent to calls to the corresponding <xref:System.Console.WriteLine%2A> methods."}]},{"pos":[81284,81357],"content":"A <xref:System.IO.TextWriter> that represents the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.TextWriter&gt; that represents the standard output stream.","pos":[0,73],"source":"A <xref:System.IO.TextWriter> that represents the standard output stream."}]},{"pos":[81712,81771],"content":"Gets or sets the encoding the console uses to write output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the encoding the console uses to write output.","pos":[0,59]}]},{"pos":[81784,82386],"content":"The console uses the output encoding to translate characters written by an application into corresponding console display characters. The default code page that the console uses is determined by the system locale.       Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current output encoding. This can occur if the value of the OutputEncoding property is modified by some means other than an assignment to the OutputEncoding property, such as calling the Windows `SetConsoleOutputCP` function.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The console uses the output encoding to translate characters written by an application into corresponding console display characters.","pos":[0,133]},{"content":"The default code page that the console uses is determined by the system locale.","pos":[134,213]},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, a property get operation may return a cached value instead of the console's current output encoding.","pos":[220,399],"source":"       Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current output encoding."},{"content":"This can occur if the value of the OutputEncoding property is modified by some means other than an assignment to the OutputEncoding property, such as calling the Windows <ph id=\"ph1\">`SetConsoleOutputCP`</ph> function.","pos":[400,600],"source":" This can occur if the value of the OutputEncoding property is modified by some means other than an assignment to the OutputEncoding property, such as calling the Windows `SetConsoleOutputCP` function."}]},{"pos":[82539,82581],"content":"The encoding used to write console output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encoding used to write console output.","pos":[0,42]}]},{"pos":[82741,82843],"content":"The property value in a set operation is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The property value in a set operation is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[82932,82989],"content":"An error occurred during the execution of this operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the execution of this operation.","pos":[0,57]}]},{"pos":[83102,83170],"content":"Your application does not have permission to perform this operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Your application does not have permission to perform this operation.","pos":[0,68]}]},{"pos":[83430,83486],"content":"Reads the next character from the standard input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the next character from the standard input stream.","pos":[0,56]}]},{"pos":[83499,84661],"content":"The Read method blocks its return while you type input characters; it terminates when you press the <xref:System.ConsoleKey> key. Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence). Subsequent calls to the Read method retrieve your input one character at a time. After the final character is retrieved, Read blocks its return again and the cycle repeats.      > [!IMPORTANT] >  The <xref:System.Console.ReadLine%2A> method, or the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method are preferable to using the Read method.       Note that the method does not return -1 unless you perform one of the following actions:      -   Simultaneously press the <xref:System.ConsoleModifiers> modifier key and <xref:System.ConsoleKey> console key (Ctrl+Z), which signals the end-of-file condition.      -   Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows.      -   Redirect the input stream to a source, such as a text file, that has an actual end-of-file character.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Read method blocks its return while you type input characters; it terminates when you press the &lt;xref:System.ConsoleKey&gt; key.","pos":[0,129],"source":"The Read method blocks its return while you type input characters; it terminates when you press the <xref:System.ConsoleKey> key."},{"content":"Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence).","pos":[130,281]},{"content":"Subsequent calls to the Read method retrieve your input one character at a time.","pos":[282,362]},{"content":"After the final character is retrieved, Read blocks its return again and the cycle repeats.","pos":[363,454]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Console.ReadLine%2A&gt; method, or the &lt;xref:System.Console.KeyAvailable%2A&gt; property and &lt;xref:System.Console.ReadKey%2A&gt; method are preferable to using the Read method.","pos":[460,662],"source":"      > [!IMPORTANT] >  The <xref:System.Console.ReadLine%2A> method, or the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method are preferable to using the Read method."},{"content":"Note that the method does not return -1 unless you perform one of the following actions:      -   Simultaneously press the &lt;xref:System.ConsoleModifiers&gt; modifier key and &lt;xref:System.ConsoleKey&gt; console key (Ctrl+Z), which signals the end-of-file condition.","pos":[669,927],"source":"       Note that the method does not return -1 unless you perform one of the following actions:      -   Simultaneously press the <xref:System.ConsoleModifiers> modifier key and <xref:System.ConsoleKey> console key (Ctrl+Z), which signals the end-of-file condition."},{"content":"-   Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows.","pos":[933,1040]},{"content":"-   Redirect the input stream to a source, such as a text file, that has an actual end-of-file character.","pos":[1046,1151]}]},{"pos":[85113,85229],"content":"The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.","pos":[0,116]}]},{"pos":[85365,85387],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[85662,85777],"content":"Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.","pos":[0,115],"nodes":[{"content":"Obtains the next character or function key pressed by the user.","pos":[0,63]},{"content":"The pressed key is displayed in the console window.","pos":[64,115]}]}]},{"pos":[85790,86419],"content":"The ReadKey method waits, that is, blocks on the thread issuing the ReadKey method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the ReadKey method to return.       Depending on your application, you might want to use the ReadKey method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.       The ReadKey method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ReadKey method waits, that is, blocks on the thread issuing the ReadKey method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the ReadKey method to return.       Depending on your application, you might want to use the ReadKey method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.       The ReadKey method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.","pos":[0,625],"nodes":[{"content":"The ReadKey method waits, that is, blocks on the thread issuing the ReadKey method, until a character or function key is pressed.","pos":[0,129]},{"content":"A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys.","pos":[130,239]},{"content":"However, pressing a modifier key by itself will not cause the ReadKey method to return.","pos":[240,327]},{"content":"Depending on your application, you might want to use the ReadKey method in conjunction with the &lt;xref:System.Console.KeyAvailable%2A&gt; property.","pos":[334,477],"source":"       Depending on your application, you might want to use the ReadKey method in conjunction with the <xref:System.Console.KeyAvailable%2A> property."},{"content":"The ReadKey method reads from the keyboard even if the standard input is redirected to a file with the &lt;xref:System.Console.SetIn%2A&gt; method.","pos":[484,625],"source":"       The ReadKey method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method."}]}]},{"pos":[87746,88151],"content":"An object that describes the <xref href=\"System.ConsoleKey\"></xref> constant and Unicode character, if any, that correspond to the pressed console key. The <xref href=\"System.ConsoleKeyInfo\"></xref> object also describes, in a bitwise combination of <xref href=\"System.ConsoleModifiers\"></xref> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that describes the <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> constant and Unicode character, if any, that correspond to the pressed console key.","pos":[0,151],"source":"An object that describes the <xref href=\"System.ConsoleKey\"></xref> constant and Unicode character, if any, that correspond to the pressed console key."},{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object also describes, in a bitwise combination of <bpt id=\"p2\">&lt;xref href=\"System.ConsoleModifiers\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.","pos":[152,405],"source":" The <xref href=\"System.ConsoleKeyInfo\"></xref> object also describes, in a bitwise combination of <xref href=\"System.ConsoleModifiers\"></xref> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key."}]},{"pos":[88312,88405],"content":"The <xref:System.Console.In*> property is redirected from some stream other than the console.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Console.In*&gt; property is redirected from some stream other than the console.","pos":[0,93],"source":"The <xref:System.Console.In*> property is redirected from some stream other than the console."}]},{"pos":[88733,88859],"content":"Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.","pos":[0,126],"nodes":[{"content":"Obtains the next character or function key pressed by the user.","pos":[0,63]},{"content":"The pressed key is optionally displayed in the console window.","pos":[64,126]}]}]},{"pos":[88872,89787],"content":"The <xref:System.Console.ReadKey%2A> method waits, that is, blocks on the thread issuing the <xref:System.Console.ReadKey%2A> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the <xref:System.Console.ReadKey%2A> method to return.       If the `intercept` parameter is `true`, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.       Depending on your application, you might want to use the <xref:System.Console.ReadKey%2A> method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.       The <xref:System.Console.ReadKey%2A> method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Console.ReadKey%2A&gt; method waits, that is, blocks on the thread issuing the &lt;xref:System.Console.ReadKey%2A&gt; method, until a character or function key is pressed.","pos":[0,179],"source":"The <xref:System.Console.ReadKey%2A> method waits, that is, blocks on the thread issuing the <xref:System.Console.ReadKey%2A> method, until a character or function key is pressed."},{"content":"A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys.","pos":[180,289]},{"content":"However, pressing a modifier key by itself will not cause the &lt;xref:System.Console.ReadKey%2A&gt; method to return.","pos":[290,402],"source":" However, pressing a modifier key by itself will not cause the <xref:System.Console.ReadKey%2A> method to return."},{"content":"If the <ph id=\"ph1\">`intercept`</ph> parameter is <ph id=\"ph2\">`true`</ph>, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.","pos":[409,561],"source":"       If the `intercept` parameter is `true`, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed."},{"content":"Depending on your application, you might want to use the &lt;xref:System.Console.ReadKey%2A&gt; method in conjunction with the &lt;xref:System.Console.KeyAvailable%2A&gt; property.","pos":[568,736],"source":"       Depending on your application, you might want to use the <xref:System.Console.ReadKey%2A> method in conjunction with the <xref:System.Console.KeyAvailable%2A> property."},{"content":"The &lt;xref:System.Console.ReadKey%2A&gt; method reads from the keyboard even if the standard input is redirected to a file with the &lt;xref:System.Console.SetIn%2A&gt; method.","pos":[743,909],"source":"       The <xref:System.Console.ReadKey%2A> method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method."}]},{"pos":[91004,91240],"content":"Determines whether to display the pressed key in the console window. <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to not display the pressed key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether to display the pressed key in the console window.","pos":[0,68]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to not display the pressed key; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[69,236],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to not display the pressed key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[91306,91711],"content":"An object that describes the <xref href=\"System.ConsoleKey\"></xref> constant and Unicode character, if any, that correspond to the pressed console key. The <xref href=\"System.ConsoleKeyInfo\"></xref> object also describes, in a bitwise combination of <xref href=\"System.ConsoleModifiers\"></xref> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that describes the <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> constant and Unicode character, if any, that correspond to the pressed console key.","pos":[0,151],"source":"An object that describes the <xref href=\"System.ConsoleKey\"></xref> constant and Unicode character, if any, that correspond to the pressed console key."},{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object also describes, in a bitwise combination of <bpt id=\"p2\">&lt;xref href=\"System.ConsoleModifiers\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.","pos":[152,405],"source":" The <xref href=\"System.ConsoleKeyInfo\"></xref> object also describes, in a bitwise combination of <xref href=\"System.ConsoleModifiers\"></xref> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key."}]},{"pos":[91872,91965],"content":"The <xref:System.Console.In*> property is redirected from some stream other than the console.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Console.In*&gt; property is redirected from some stream other than the console.","pos":[0,93],"source":"The <xref:System.Console.In*> property is redirected from some stream other than the console."}]},{"pos":[92245,92310],"content":"Reads the next line of characters from the standard input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the next line of characters from the standard input stream.","pos":[0,65]}]},{"pos":[92323,97030],"content":"The ReadLine method reads a line from the standard input stream. (For the definition of a line, see the paragraph after the following list.) This means that:      -   If the standard input device is the keyboard, the ReadLine method blocks until the user presses the **Enter** key.           One of the most common uses of the ReadLine method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application. The following example illustrates this.           [!code-cpp[System.Console.ReadLine#6](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)]      [!code-vb[System.Console.ReadLine#6](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)]      [!code-cs[System.Console.ReadLine#6](~/add/codesnippet/csharp/m-system.console.readline_1.cs)]      -   If standard input is redirected to a file, the ReadLine method reads a line of text from a file. For example, the following is a text file named ReadLine1.txt:          ```          This is the first line.       This is the second line.       This is the third line.       This is the fourth line.          ```           The following example uses the ReadLine method to read input that is redirected from a file. The read operation terminates when the  method returns `null`, which indicates that no lines remain to be read.           [!code-cs[System.Console.ReadLine#3](~/add/codesnippet/csharp/m-system.console.readline_2.cs)]      [!code-vb[System.Console.ReadLine#3](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb)]           After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax          ```       ReadLine1 < ReadLine1.txt       ```           to read the contents of the file and display them to the console.       A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property. The returned string does not contain the terminating character(s). By default, the method reads input from a 256-character input buffer. Because this includes the <xref:System.Environment.NewLine%2A?displayProperty=fullName> character(s), the method can read lines that contain up to 254 characters. To read longer lines, call the <xref:System.Console.OpenStandardInput%28System.Int32%29> method.       The ReadLine method executes synchronously. That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed. The <xref:System.Console.In%2A> property returns a <xref:System.IO.TextReader> object that represents the standard input stream and that has both a synchronous <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method and an asynchronous <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> method. However, when used as the console's standard input stream, the <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> executes synchronously rather than asynchronously and returns a `Task<String>` only after the read operation has completed.       If this method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> object is advanced by the number of characters the method was able to read, but the characters already read into the internal ReadLine buffer are discarded. Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.TextReader>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized. To avoid such a situation and to produce robust code, you should use the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method and store the read characters in a pre-allocated buffer.       If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns `null`. This enables the user to prevent further keyboard input when the ReadLine method is called in a loop. The following example illustrates this scenario.       [!code-cpp[System.Console.ReadLine#1](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)]  [!code-cs[System.Console.ReadLine#1](~/add/codesnippet/csharp/m-system.console.readline_3.cs)]  [!code-vb[System.Console.ReadLine#1](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ReadLine method reads a line from the standard input stream.","pos":[0,64]},{"content":"(For the definition of a line, see the paragraph after the following list.) This means that:      -   If the standard input device is the keyboard, the ReadLine method blocks until the user presses the <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept> key.","pos":[65,281],"source":" (For the definition of a line, see the paragraph after the following list.) This means that:      -   If the standard input device is the keyboard, the ReadLine method blocks until the user presses the **Enter** key."},{"content":"One of the most common uses of the ReadLine method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application.","pos":[292,519]},{"content":"The following example illustrates this.","pos":[520,559]},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Console.ReadLine#6<ept id=\"p2\">](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)</ept><ept id=\"p1\">]</ept>      <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Console.ReadLine#6<ept id=\"p4\">](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)</ept><ept id=\"p3\">]</ept>      <bpt id=\"p5\">[!code-cs</bpt><bpt id=\"p6\">[</bpt>System.Console.ReadLine#6<ept id=\"p6\">](~/add/codesnippet/csharp/m-system.console.readline_1.cs)</ept><ept id=\"p5\">]</ept>      -   If standard input is redirected to a file, the ReadLine method reads a line of text from a file.","pos":[570,974],"source":"[!code-cpp[System.Console.ReadLine#6](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)]      [!code-vb[System.Console.ReadLine#6](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)]      [!code-cs[System.Console.ReadLine#6](~/add/codesnippet/csharp/m-system.console.readline_1.cs)]      -   If standard input is redirected to a file, the ReadLine method reads a line of text from a file."},{"content":"For example, the following is a text file named ReadLine1.txt:          <ph id=\"ph1\">```          This is the first line.       This is the second line.       This is the third line.       This is the fourth line.          ```</ph>           The following example uses the ReadLine method to read input that is redirected from a file.","pos":[975,1291],"source":" For example, the following is a text file named ReadLine1.txt:          ```          This is the first line.       This is the second line.       This is the third line.       This is the fourth line.          ```           The following example uses the ReadLine method to read input that is redirected from a file."},{"content":"The read operation terminates when the  method returns <ph id=\"ph1\">`null`</ph>, which indicates that no lines remain to be read.","pos":[1292,1403],"source":" The read operation terminates when the  method returns `null`, which indicates that no lines remain to be read."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Console.ReadLine#3<ept id=\"p2\">](~/add/codesnippet/csharp/m-system.console.readline_2.cs)</ept><ept id=\"p1\">]</ept>      <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Console.ReadLine#3<ept id=\"p4\">](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb)</ept><ept id=\"p3\">]</ept>           After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax          <ph id=\"ph1\">```       ReadLine1 &lt; ReadLine1.txt       ```</ph>           to read the contents of the file and display them to the console.","pos":[1414,1873],"source":"[!code-cs[System.Console.ReadLine#3](~/add/codesnippet/csharp/m-system.console.readline_2.cs)]      [!code-vb[System.Console.ReadLine#3](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb)]           After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax          ```       ReadLine1 < ReadLine1.txt       ```           to read the contents of the file and display them to the console."},{"content":"A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the &lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt; property.","pos":[1880,2103],"source":"       A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property."},{"content":"The returned string does not contain the terminating character(s).","pos":[2104,2170]},{"content":"By default, the method reads input from a 256-character input buffer.","pos":[2171,2240]},{"content":"Because this includes the &lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt; character(s), the method can read lines that contain up to 254 characters.","pos":[2241,2403],"source":" Because this includes the <xref:System.Environment.NewLine%2A?displayProperty=fullName> character(s), the method can read lines that contain up to 254 characters."},{"content":"To read longer lines, call the &lt;xref:System.Console.OpenStandardInput%28System.Int32%29&gt; method.","pos":[2404,2500],"source":" To read longer lines, call the <xref:System.Console.OpenStandardInput%28System.Int32%29> method."},{"content":"The ReadLine method executes synchronously.","pos":[2507,2550]},{"content":"That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed.","pos":[2551,2637]},{"content":"The &lt;xref:System.Console.In%2A&gt; property returns a &lt;xref:System.IO.TextReader&gt; object that represents the standard input stream and that has both a synchronous &lt;xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName&gt; method and an asynchronous &lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName&gt; method.","pos":[2638,2967],"source":" The <xref:System.Console.In%2A> property returns a <xref:System.IO.TextReader> object that represents the standard input stream and that has both a synchronous <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method and an asynchronous <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> method."},{"content":"However, when used as the console's standard input stream, the &lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName&gt; executes synchronously rather than asynchronously and returns a <ph id=\"ph1\">`Task&lt;String&gt;`</ph> only after the read operation has completed.","pos":[2968,3224],"source":" However, when used as the console's standard input stream, the <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> executes synchronously rather than asynchronously and returns a `Task<String>` only after the read operation has completed."},{"content":"If this method throws an &lt;xref:System.OutOfMemoryException&gt; exception, the reader's position in the underlying &lt;xref:System.IO.Stream&gt; object is advanced by the number of characters the method was able to read, but the characters already read into the internal ReadLine buffer are discarded.","pos":[3231,3522],"source":"       If this method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> object is advanced by the number of characters the method was able to read, but the characters already read into the internal ReadLine buffer are discarded."},{"content":"Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the &lt;xref:System.IO.TextReader&gt;.","pos":[3523,3711],"source":" Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.TextReader>."},{"content":"If the initial position within the stream is unknown or the stream does not support seeking, the underlying &lt;xref:System.IO.Stream&gt; also needs to be reinitialized.","pos":[3712,3875],"source":" If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized."},{"content":"To avoid such a situation and to produce robust code, you should use the &lt;xref:System.Console.KeyAvailable%2A&gt; property and &lt;xref:System.Console.ReadKey%2A&gt; method and store the read characters in a pre-allocated buffer.","pos":[3876,4096],"source":" To avoid such a situation and to produce robust code, you should use the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method and store the read characters in a pre-allocated buffer."},{"content":"If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns <ph id=\"ph1\">`null`</ph>.","pos":[4103,4215],"source":"       If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns `null`."},{"content":"This enables the user to prevent further keyboard input when the ReadLine method is called in a loop.","pos":[4216,4317]},{"content":"The following example illustrates this scenario.","pos":[4318,4366]},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Console.ReadLine#1<ept id=\"p2\">](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Console.ReadLine#1<ept id=\"p4\">](~/add/codesnippet/csharp/m-system.console.readline_3.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Console.ReadLine#1<ept id=\"p6\">](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)</ept><ept id=\"p5\">]</ept>","pos":[4373,4663],"source":"[!code-cpp[System.Console.ReadLine#1](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)]  [!code-cs[System.Console.ReadLine#1](~/add/codesnippet/csharp/m-system.console.readline_3.cs)]  [!code-vb[System.Console.ReadLine#1](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)]"}]},{"pos":[98047,98193],"content":"The next line of characters from the input stream, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no more lines are available.","needQuote":true,"needEscape":true,"source":"The next line of characters from the input stream, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no more lines are available."},{"pos":[98333,98355],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[98456,98530],"content":"There is insufficient memory to allocate a buffer for the returned string.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is insufficient memory to allocate a buffer for the returned string.","pos":[0,74]}]},{"pos":[98645,98777],"content":"The number of characters in the next line of characters is greater than &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of characters in the next line of characters is greater than <ph id=\"ph1\">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,132],"source":"The number of characters in the next line of characters is greater than &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."}]},{"pos":[99067,99135],"content":"Sets the foreground and background console colors to their defaults.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the foreground and background console colors to their defaults.","pos":[0,68]}]},{"pos":[99147,99383],"content":"The foreground and background colors are restored to the colors that existed when the current process began. For more information, see the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The foreground and background colors are restored to the colors that existed when the current process began. For more information, see the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties.","pos":[0,236],"nodes":[{"content":"The foreground and background colors are restored to the colors that existed when the current process began.","pos":[0,108]},{"content":"For more information, see the &lt;xref:System.Console.ForegroundColor%2A&gt; and &lt;xref:System.Console.BackgroundColor%2A&gt; properties.","pos":[109,236],"source":" For more information, see the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties."}]}]},{"pos":[100556,100613],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[100702,100724],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[101116,101192],"content":"Sets the height and width of the screen buffer area to the specified values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the height and width of the screen buffer area to the specified values.","pos":[0,76]}]},{"pos":[102421,102470],"content":"The width of the buffer area measured in columns.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the buffer area measured in columns.","pos":[0,49]}]},{"pos":[102532,102579],"content":"The height of the buffer area measured in rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the buffer area measured in rows.","pos":[0,47]}]},{"pos":[102751,103226],"content":"<code>height</code> or <code>width</code> is less than or equal to zero.       -or-       <code>height</code> or <code>width</code> is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       -or-       <code>width</code> is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>.       -or-       <code>height</code> is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;height&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;width&lt;/code&gt;</ph> is less than or equal to zero.","pos":[0,72],"source":"<code>height</code> or <code>width</code> is less than or equal to zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;height&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;width&lt;/code&gt;</ph> is greater than or equal to <ph id=\"ph3\">&amp;lt;</ph>xref:System.Int16.MaxValue?displayProperty=fullName<ph id=\"ph4\">&amp;gt;</ph>.","pos":[79,220],"source":"       -or-       <code>height</code> or <code>width</code> is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;width&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref:System.Console.WindowLeft*&gt;</ph><ph id=\"ph3\"> + &lt;xref:System.Console.WindowWidth*&gt;</ph>.","pos":[227,341],"source":"       -or-       <code>width</code> is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;height&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref:System.Console.WindowTop*&gt;</ph><ph id=\"ph3\"> + &lt;xref:System.Console.WindowHeight*&gt;</ph>.","pos":[348,463],"source":"       -or-       <code>height</code> is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>."}]},{"pos":[103340,103397],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[103486,103508],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[103920,103952],"content":"Sets the position of the cursor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the position of the cursor.","pos":[0,32]}]},{"pos":[103965,104752],"content":"Use the SetCursorPosition method to specify where the next write operation in the console window is to begin. If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.       The cursor automatically moves to the next character position each time a character is written to the console window. If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible. If you want to write a character to the bottom right character position without causing the console window to scroll, use the <xref:System.Console.MoveBufferArea%2A> method to move a character to that position.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the SetCursorPosition method to specify where the next write operation in the console window is to begin. If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.       The cursor automatically moves to the next character position each time a character is written to the console window. If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible. If you want to write a character to the bottom right character position without causing the console window to scroll, use the <xref:System.Console.MoveBufferArea%2A> method to move a character to that position.","pos":[0,785],"nodes":[{"content":"Use the SetCursorPosition method to specify where the next write operation in the console window is to begin.","pos":[0,109]},{"content":"If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.","pos":[110,279]},{"content":"The cursor automatically moves to the next character position each time a character is written to the console window.","pos":[286,403]},{"content":"If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible.","pos":[404,574]},{"content":"If you want to write a character to the bottom right character position without causing the console window to scroll, use the &lt;xref:System.Console.MoveBufferArea%2A&gt; method to move a character to that position.","pos":[575,785],"source":" If you want to write a character to the bottom right character position without causing the console window to scroll, use the <xref:System.Console.MoveBufferArea%2A> method to move a character to that position."}]}]},{"pos":[105680,105769],"content":"The column position of the cursor. Columns are numbered from left to right starting at 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The column position of the cursor. Columns are numbered from left to right starting at 0.","pos":[0,89],"nodes":[{"content":"The column position of the cursor.","pos":[0,34]},{"content":"Columns are numbered from left to right starting at 0.","pos":[35,89]}]}]},{"pos":[105828,105911],"content":"The row position of the cursor. Rows are numbered from top to bottom starting at 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The row position of the cursor. Rows are numbered from top to bottom starting at 0.","pos":[0,83],"nodes":[{"content":"The row position of the cursor.","pos":[0,31]},{"content":"Rows are numbered from top to bottom starting at 0.","pos":[32,83]}]}]},{"pos":[106087,106349],"content":"<code>left</code> or <code>top</code> is less than zero.       -or-       <code>left</code> is greater than or equal to <xref:System.Console.BufferWidth*>.       -or-       <code>top</code> is greater than or equal to <xref:System.Console.BufferHeight*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;top&lt;/code&gt;</ph> is less than zero.","pos":[0,56],"source":"<code>left</code> or <code>top</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> is greater than or equal to <ph id=\"ph2\">&lt;xref:System.Console.BufferWidth*&gt;</ph>.","pos":[63,155],"source":"       -or-       <code>left</code> is greater than or equal to <xref:System.Console.BufferWidth*>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;top&lt;/code&gt;</ph> is greater than or equal to <ph id=\"ph2\">&lt;xref:System.Console.BufferHeight*&gt;</ph>.","pos":[162,254],"source":"       -or-       <code>top</code> is greater than or equal to <xref:System.Console.BufferHeight*>."}]},{"pos":[106463,106520],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[106609,106631],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[106985,107084],"content":"Sets the <xref:System.Console.Error*> property to the specified <xref:System.IO.TextWriter> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the &lt;xref:System.Console.Error*&gt; property to the specified &lt;xref:System.IO.TextWriter&gt; object.","pos":[0,99],"source":"Sets the <xref:System.Console.Error*> property to the specified <xref:System.IO.TextWriter> object."}]},{"pos":[107097,107330],"content":"By default, the <xref:System.Console.Error%2A> property is set to the standard error output stream.       A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send error messages to a file.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, the <xref:System.Console.Error%2A> property is set to the standard error output stream.       A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send error messages to a file.","pos":[0,231],"nodes":[{"content":"By default, the &lt;xref:System.Console.Error%2A&gt; property is set to the standard error output stream.","pos":[0,99],"source":"By default, the <xref:System.Console.Error%2A> property is set to the standard error output stream."},{"content":"A &lt;xref:System.IO.StreamWriter&gt; that encapsulates a &lt;xref:System.IO.FileStream&gt; can be used to send error messages to a file.","pos":[106,231],"source":"       A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send error messages to a file."}]}]},{"pos":[107899,107946],"content":"A stream that is the new standard error output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A stream that is the new standard error output.","pos":[0,47]}]},{"pos":[108100,108186],"content":"<ph id=\"ph1\">&lt;code&gt;newError&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>newError</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[108299,108348],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[108687,108783],"content":"Sets the <xref:System.Console.In*> property to the specified <xref:System.IO.TextReader> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the &lt;xref:System.Console.In*&gt; property to the specified &lt;xref:System.IO.TextReader&gt; object.","pos":[0,96],"source":"Sets the <xref:System.Console.In*> property to the specified <xref:System.IO.TextReader> object."}]},{"pos":[108796,109015],"content":"By default, the <xref:System.Console.In%2A> property is set to the standard input stream.       A <xref:System.IO.StreamReader> that encapsulates a <xref:System.IO.FileStream> can be used to receive input from a file.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, the <xref:System.Console.In%2A> property is set to the standard input stream.       A <xref:System.IO.StreamReader> that encapsulates a <xref:System.IO.FileStream> can be used to receive input from a file.","pos":[0,217],"nodes":[{"content":"By default, the &lt;xref:System.Console.In%2A&gt; property is set to the standard input stream.","pos":[0,89],"source":"By default, the <xref:System.Console.In%2A> property is set to the standard input stream."},{"content":"A &lt;xref:System.IO.StreamReader&gt; that encapsulates a &lt;xref:System.IO.FileStream&gt; can be used to receive input from a file.","pos":[96,217],"source":"       A <xref:System.IO.StreamReader> that encapsulates a <xref:System.IO.FileStream> can be used to receive input from a file."}]}]},{"pos":[109935,109975],"content":"A stream that is the new standard input.","needQuote":true,"needEscape":true,"nodes":[{"content":"A stream that is the new standard input.","pos":[0,40]}]},{"pos":[110126,110209],"content":"<ph id=\"ph1\">&lt;code&gt;newIn&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>newIn</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[110322,110371],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[110715,110812],"content":"Sets the <xref:System.Console.Out*> property to the specified <xref:System.IO.TextWriter> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the &lt;xref:System.Console.Out*&gt; property to the specified &lt;xref:System.IO.TextWriter&gt; object.","pos":[0,97],"source":"Sets the <xref:System.Console.Out*> property to the specified <xref:System.IO.TextWriter> object."}]},{"pos":[110825,111347],"content":"By default, the <xref:System.Console.Out%2A> property is set to the standard output stream.       A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send output to a file. For example:       [!code-cs[System.Console.SetOut#1](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)]  [!code-vb[System.Console.SetOut#1](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)]  [!code-cpp[System.Console.SetOut#1](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, the &lt;xref:System.Console.Out%2A&gt; property is set to the standard output stream.","pos":[0,91],"source":"By default, the <xref:System.Console.Out%2A> property is set to the standard output stream."},{"content":"A &lt;xref:System.IO.StreamWriter&gt; that encapsulates a &lt;xref:System.IO.FileStream&gt; can be used to send output to a file.","pos":[98,215],"source":"       A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send output to a file."},{"content":"For example:       <bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Console.SetOut#1<ept id=\"p2\">](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Console.SetOut#1<ept id=\"p4\">](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-cpp</bpt><bpt id=\"p6\">[</bpt>System.Console.SetOut#1<ept id=\"p6\">](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)</ept><ept id=\"p5\">]</ept>","pos":[216,516],"source":" For example:       [!code-cs[System.Console.SetOut#1](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)]  [!code-vb[System.Console.SetOut#1](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)]  [!code-cpp[System.Console.SetOut#1](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)]"}]},{"pos":[112271,112312],"content":"A stream that is the new standard output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A stream that is the new standard output.","pos":[0,41]}]},{"pos":[112464,112548],"content":"<ph id=\"ph1\">&lt;code&gt;newOut&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>newOut</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[112661,112710],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[113122,113192],"content":"Sets the position of the console window relative to the screen buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the position of the console window relative to the screen buffer.","pos":[0,70]}]},{"pos":[113205,114022],"content":"The operating system window displays the console window, and the console window displays a portion of the screen buffer. The SetWindowPosition method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.       The console and operating system windows generally do not affect each other. However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window. In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the SetWindowPosition method affects the position of the operating system window scroll bars.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The operating system window displays the console window, and the console window displays a portion of the screen buffer. The SetWindowPosition method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.       The console and operating system windows generally do not affect each other. However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window. In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the SetWindowPosition method affects the position of the operating system window scroll bars.","pos":[0,815],"nodes":[{"content":"The operating system window displays the console window, and the console window displays a portion of the screen buffer.","pos":[0,120]},{"content":"The SetWindowPosition method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.","pos":[121,312]},{"content":"The console and operating system windows generally do not affect each other.","pos":[319,395]},{"content":"However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window.","pos":[396,581]},{"content":"In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the SetWindowPosition method affects the position of the operating system window scroll bars.","pos":[582,815]}]}]},{"pos":[115243,115311],"content":"The column position of the upper left  corner of the console window.","needQuote":true,"needEscape":true,"nodes":[{"content":"The column position of the upper left  corner of the console window.","pos":[0,68]}]},{"pos":[115370,115434],"content":"The row position of the upper left corner of the console window.","needQuote":true,"needEscape":true,"nodes":[{"content":"The row position of the upper left corner of the console window.","pos":[0,64]}]},{"pos":[115610,115923],"content":"<code>left</code> or <code>top</code> is less than zero.       -or-       <code>left</code> + <xref:System.Console.WindowWidth*> is greater than <xref:System.Console.BufferWidth*>.       -or-       <code>top</code> + <xref:System.Console.WindowHeight*> is greater than <xref:System.Console.BufferHeight*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;top&lt;/code&gt;</ph> is less than zero.","pos":[0,56],"source":"<code>left</code> or <code>top</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;xref:System.Console.WindowWidth*&gt;</ph> is greater than <ph id=\"ph3\">&lt;xref:System.Console.BufferWidth*&gt;</ph>.","pos":[63,180],"source":"       -or-       <code>left</code> + <xref:System.Console.WindowWidth*> is greater than <xref:System.Console.BufferWidth*>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;top&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;xref:System.Console.WindowHeight*&gt;</ph> is greater than <ph id=\"ph3\">&lt;xref:System.Console.BufferHeight*&gt;</ph>.","pos":[187,305],"source":"       -or-       <code>top</code> + <xref:System.Console.WindowHeight*> is greater than <xref:System.Console.BufferHeight*>."}]},{"pos":[116037,116094],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[116183,116205],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[116597,116669],"content":"Sets the height and width of the console window to the specified values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the height and width of the console window to the specified values.","pos":[0,72]}]},{"pos":[117794,117846],"content":"The width of the console window measured in columns.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the console window measured in columns.","pos":[0,52]}]},{"pos":[117908,117958],"content":"The height of the console window measured in rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the console window measured in rows.","pos":[0,50]}]},{"pos":[118130,118606],"content":"<code>width</code> or <code>height</code> is less than or equal to zero.       -or-       <code>width</code> plus <xref:System.Console.WindowLeft*> or <code>height</code> plus <xref:System.Console.WindowTop*> is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       -or-       <code>width</code> or <code>height</code> is greater than the largest possible window width or height for the current screen resolution and console font.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;width&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;height&lt;/code&gt;</ph> is less than or equal to zero.","pos":[0,72],"source":"<code>width</code> or <code>height</code> is less than or equal to zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;width&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;xref:System.Console.WindowLeft*&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;height&lt;/code&gt;</ph> plus <ph id=\"ph4\">&lt;xref:System.Console.WindowTop*&gt;</ph> is greater than or equal to <ph id=\"ph5\">&amp;lt;</ph>xref:System.Int16.MaxValue?displayProperty=fullName<ph id=\"ph6\">&amp;gt;</ph>.","pos":[79,297],"source":"       -or-       <code>width</code> plus <xref:System.Console.WindowLeft*> or <code>height</code> plus <xref:System.Console.WindowTop*> is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;width&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;height&lt;/code&gt;</ph> is greater than the largest possible window width or height for the current screen resolution and console font.","pos":[304,468],"source":"       -or-       <code>width</code> or <code>height</code> is greater than the largest possible window width or height for the current screen resolution and console font."}]},{"pos":[118720,118777],"content":"The user does not have permission to perform this action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user does not have permission to perform this action.","pos":[0,57]}]},{"pos":[118866,118888],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[119149,119208],"content":"Gets or sets the title to display in the console title bar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the title to display in the console title bar.","pos":[0,59]}]},{"pos":[119790,119909],"content":"The string to be displayed in the title bar of the console. The maximum length of the title string is 24500 characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to be displayed in the title bar of the console. The maximum length of the title string is 24500 characters.","pos":[0,119],"nodes":[{"content":"The string to be displayed in the title bar of the console.","pos":[0,59]},{"content":"The maximum length of the title string is 24500 characters.","pos":[60,119]}]}]},{"pos":[120068,120140],"content":"In a get operation, the retrieved title is longer than 24500 characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"In a get operation, the retrieved title is longer than 24500 characters.","pos":[0,72]}]},{"pos":[120255,120327],"content":"In a set operation, the specified title is longer than 24500 characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"In a set operation, the specified title is longer than 24500 characters.","pos":[0,72]}]},{"pos":[120430,120534],"content":"In a set operation, the specified title is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"In a set operation, the specified title is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[120623,120645],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[120981,121257],"content":"Gets or sets a value indicating whether the combination of the <bpt id=\"p1\">&lt;xref href=\"System.ConsoleModifiers\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> modifier key and <bpt id=\"p2\">&lt;xref href=\"System.ConsoleKey\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.","needQuote":true,"needEscape":true,"source":"Gets or sets a value indicating whether the combination of the <xref href=\"System.ConsoleModifiers\"></xref> modifier key and <xref href=\"System.ConsoleKey\"></xref> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system."},{"pos":[121270,121823],"content":"If the value of the TreatControlCAsInput property is `false` and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process. This is the default value.      > [!CAUTION] >  Use this property judiciously because setting it to `true` has such a dramatic effect. Most users expect Ctrl+C to terminate a console application. If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of the TreatControlCAsInput property is <ph id=\"ph1\">`false`</ph> and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process.","pos":[0,204],"source":"If the value of the TreatControlCAsInput property is `false` and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process."},{"content":"This is the default value.","pos":[205,231]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Use this property judiciously because setting it to <ph id=\"ph2\">`true`</ph> has such a dramatic effect.","pos":[237,339],"source":"      > [!CAUTION] >  Use this property judiciously because setting it to `true` has such a dramatic effect."},{"content":"Most users expect Ctrl+C to terminate a console application.","pos":[340,400]},{"content":"If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination.","pos":[401,550]}]},{"pos":[122324,122499],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if Ctrl+C is treated as ordinary input; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if Ctrl+C is treated as ordinary input; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[122651,122715],"content":"Unable to get or set the input mode of the console input buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unable to get or set the input mode of the console input buffer.","pos":[0,64]}]},{"pos":[123011,123062],"content":"Gets or sets the height of the console window area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the height of the console window area.","pos":[0,51]}]},{"pos":[123074,123407],"content":"Attempting to set the value of the WindowHeight property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception. To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Attempting to set the value of the WindowHeight property when output is redirected throws either an &lt;xref:System.ArgumentOutOfRangeException&gt; or an &lt;xref:System.IO.IOException&gt; exception.","pos":[0,187],"source":"Attempting to set the value of the WindowHeight property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception."},{"content":"To prevent an exception, you can set the value of this property only if the &lt;xref:System.Console.IsOutputRedirected%2A&gt; property returns <ph id=\"ph1\">`false`</ph>.","pos":[188,333],"source":" To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`."}]},{"pos":[124470,124520],"content":"The height of the console window measured in rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the console window measured in rows.","pos":[0,50]}]},{"pos":[124691,125270],"content":"The value of the <xref:System.Console.WindowWidth*> property or the value of the WindowHeight property is less than or equal to 0.       -or-       The value of the WindowHeight property plus the value of the <xref:System.Console.WindowTop*> property is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       -or-       The value of the <xref:System.Console.WindowWidth*> property or the value of the WindowHeight property is greater than the largest possible window width or height for the current screen resolution and console font.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value of the &lt;xref:System.Console.WindowWidth<bpt id=\"p1\">*</bpt>&gt; property or the value of the WindowHeight property is less than or equal to 0.       -or-       The value of the WindowHeight property plus the value of the &lt;xref:System.Console.WindowTop<ept id=\"p1\">*</ept>&gt; property is greater than or equal to <ph id=\"ph1\">&amp;lt;</ph>xref:System.Int16.MaxValue?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,339],"source":"The value of the <xref:System.Console.WindowWidth*> property or the value of the WindowHeight property is less than or equal to 0.       -or-       The value of the WindowHeight property plus the value of the <xref:System.Console.WindowTop*> property is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;."},{"content":"-or-       The value of the &lt;xref:System.Console.WindowWidth*&gt; property or the value of the WindowHeight property is greater than the largest possible window width or height for the current screen resolution and console font.","pos":[346,571],"source":"       -or-       The value of the <xref:System.Console.WindowWidth*> property or the value of the WindowHeight property is greater than the largest possible window width or height for the current screen resolution and console font."}]},{"pos":[125360,125397],"content":"Error reading or writing information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Error reading or writing information.","pos":[0,37]}]},{"pos":[125683,125775],"content":"Gets or sets the leftmost position of the console window area relative to the screen buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the leftmost position of the console window area relative to the screen buffer.","pos":[0,92]}]},{"pos":[125788,127637],"content":"The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties. The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties. The WindowLeft property determines which column of the buffer area is displayed in the first column of the console window. The value of the WindowLeft property can range from 0 to <xref:System.Console.BufferWidth%2A> - <xref:System.Console.WindowWidth%2A>. Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>.       When a console window first opens, the default value of the WindowLeft property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area. The default width of both the console window and the buffer area is 80 columns. This means that the WindowLeft property can be modified only if the console window is made narrower or the buffer area is made wider.       Note that if the width of the buffer area exceeds the width of the console window, the value of the WindowLeft property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.       Attempting to set the value of the WindowLeft property when output is redirected throws an <xref:System.IO.IOException> exception. To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The console represents a rectangular window into a larger rectangular buffer area.","pos":[0,82]},{"content":"Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns.","pos":[83,206]},{"content":"The dimensions of the buffer area are defined by the &lt;xref:System.Console.BufferHeight%2A&gt; and &lt;xref:System.Console.BufferWidth%2A&gt; properties.","pos":[207,350],"source":" The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties."},{"content":"The dimensions of the console area are defined by the &lt;xref:System.Console.WindowHeight%2A&gt; and &lt;xref:System.Console.WindowWidth%2A&gt; properties.","pos":[351,495],"source":" The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties."},{"content":"The WindowLeft property determines which column of the buffer area is displayed in the first column of the console window.","pos":[496,618]},{"content":"The value of the WindowLeft property can range from 0 to &lt;xref:System.Console.BufferWidth%2A&gt; - &lt;xref:System.Console.WindowWidth%2A&gt;.","pos":[619,752],"source":" The value of the WindowLeft property can range from 0 to <xref:System.Console.BufferWidth%2A> - <xref:System.Console.WindowWidth%2A>."},{"content":"Attempting to set it to a value outside that range throws an &lt;xref:System.ArgumentOutOfRangeException&gt;.","pos":[753,856],"source":" Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>."},{"content":"When a console window first opens, the default value of the WindowLeft property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area.","pos":[863,1092]},{"content":"The default width of both the console window and the buffer area is 80 columns.","pos":[1093,1172]},{"content":"This means that the WindowLeft property can be modified only if the console window is made narrower or the buffer area is made wider.","pos":[1173,1306]},{"content":"Note that if the width of the buffer area exceeds the width of the console window, the value of the WindowLeft property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.","pos":[1313,1559]},{"content":"Attempting to set the value of the WindowLeft property when output is redirected throws an &lt;xref:System.IO.IOException&gt; exception.","pos":[1566,1696],"source":"       Attempting to set the value of the WindowLeft property when output is redirected throws an <xref:System.IO.IOException> exception."},{"content":"To prevent the exception, you can set the value of this property only if the &lt;xref:System.Console.IsOutputRedirected%2A&gt; property returns <ph id=\"ph1\">`false`</ph>.","pos":[1697,1843],"source":" To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`."}]},{"pos":[128892,128949],"content":"The leftmost console window position measured in columns.","needQuote":true,"needEscape":true,"nodes":[{"content":"The leftmost console window position measured in columns.","pos":[0,57]}]},{"pos":[129118,129333],"content":"In a set operation, the value to be assigned is less than zero.       -or-       As a result of the assignment, WindowLeft plus <xref:System.Console.WindowWidth*> would exceed <xref:System.Console.BufferWidth*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"In a set operation, the value to be assigned is less than zero.","pos":[0,63]},{"content":"-or-       As a result of the assignment, WindowLeft plus &lt;xref:System.Console.WindowWidth<bpt id=\"p1\">*</bpt>&gt; would exceed &lt;xref:System.Console.BufferWidth<ept id=\"p1\">*</ept>&gt;.","pos":[70,211],"source":"       -or-       As a result of the assignment, WindowLeft plus <xref:System.Console.WindowWidth*> would exceed <xref:System.Console.BufferWidth*>."}]},{"pos":[129423,129460],"content":"Error reading or writing information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Error reading or writing information.","pos":[0,37]}]},{"pos":[129741,129828],"content":"Gets or sets the top position of the console window area relative to the screen buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the top position of the console window area relative to the screen buffer.","pos":[0,87]}]},{"pos":[129841,130979],"content":"The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties. The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties. The WindowTop property determines which row of the buffer area is displayed in the first column of the console window. The value of the WindowTop property can range from 0 to <xref:System.Console.BufferHeight%2A> - <xref:System.Console.WindowHeight%2A>. Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>.       Attempting to set the value of the WindowTop property when output is redirected throws an <xref:System.IO.IOException> exception. To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The console represents a rectangular window into a larger rectangular buffer area.","pos":[0,82]},{"content":"Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns.","pos":[83,206]},{"content":"The dimensions of the buffer area are defined by the &lt;xref:System.Console.BufferHeight%2A&gt; and &lt;xref:System.Console.BufferWidth%2A&gt; properties.","pos":[207,350],"source":" The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties."},{"content":"The dimensions of the console area are defined by the &lt;xref:System.Console.WindowHeight%2A&gt; and &lt;xref:System.Console.WindowWidth%2A&gt; properties.","pos":[351,495],"source":" The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties."},{"content":"The WindowTop property determines which row of the buffer area is displayed in the first column of the console window.","pos":[496,614]},{"content":"The value of the WindowTop property can range from 0 to &lt;xref:System.Console.BufferHeight%2A&gt; - &lt;xref:System.Console.WindowHeight%2A&gt;.","pos":[615,749],"source":" The value of the WindowTop property can range from 0 to <xref:System.Console.BufferHeight%2A> - <xref:System.Console.WindowHeight%2A>."},{"content":"Attempting to set it to a value outside that range throws an &lt;xref:System.ArgumentOutOfRangeException&gt;.","pos":[750,853],"source":" Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>."},{"content":"Attempting to set the value of the WindowTop property when output is redirected throws an &lt;xref:System.IO.IOException&gt; exception.","pos":[860,989],"source":"       Attempting to set the value of the WindowTop property when output is redirected throws an <xref:System.IO.IOException> exception."},{"content":"To prevent the exception, you can set the value of this property only if the &lt;xref:System.Console.IsOutputRedirected%2A&gt; property returns <ph id=\"ph1\">`false`</ph>.","pos":[990,1136],"source":" To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`."}]},{"pos":[132165,132220],"content":"The uppermost console window position measured in rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The uppermost console window position measured in rows.","pos":[0,55]}]},{"pos":[132388,132604],"content":"In a set operation, the value to be assigned is less than zero.       -or-       As a result of the assignment, WindowTop plus <xref:System.Console.WindowHeight*> would exceed <xref:System.Console.BufferHeight*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"In a set operation, the value to be assigned is less than zero.","pos":[0,63]},{"content":"-or-       As a result of the assignment, WindowTop plus &lt;xref:System.Console.WindowHeight<bpt id=\"p1\">*</bpt>&gt; would exceed &lt;xref:System.Console.BufferHeight<ept id=\"p1\">*</ept>&gt;.","pos":[70,212],"source":"       -or-       As a result of the assignment, WindowTop plus <xref:System.Console.WindowHeight*> would exceed <xref:System.Console.BufferHeight*>."}]},{"pos":[132694,132731],"content":"Error reading or writing information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Error reading or writing information.","pos":[0,37]}]},{"pos":[133022,133067],"content":"Gets or sets the width of the console window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the width of the console window.","pos":[0,45]}]},{"pos":[133079,133411],"content":"Attempting to set the value of the WindowWidth property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception. To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Attempting to set the value of the WindowWidth property when output is redirected throws either an &lt;xref:System.ArgumentOutOfRangeException&gt; or an &lt;xref:System.IO.IOException&gt; exception.","pos":[0,186],"source":"Attempting to set the value of the WindowWidth property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception."},{"content":"To prevent an exception, you can set the value of this property only if the &lt;xref:System.Console.IsOutputRedirected%2A&gt; property returns <ph id=\"ph1\">`false`</ph>.","pos":[187,332],"source":" To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`."}]},{"pos":[134473,134525],"content":"The width of the console window measured in columns.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the console window measured in columns.","pos":[0,52]}]},{"pos":[134695,135297],"content":"The value of the WindowWidth property or the value of the &lt;xref:System.Console.WindowHeight<bpt id=\"p1\">*</bpt>&gt; property is less than or equal to 0.       -or-       The value of the &lt;xref:System.Console.WindowHeight<ept id=\"p1\">*</ept>&gt; property plus the value of the &lt;xref:System.Console.WindowTop<bpt id=\"p2\">*</bpt>&gt; property is greater than or equal to <ph id=\"ph1\">&amp;lt;</ph>xref:System.Int16.MaxValue?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.       -or-       The value of the WindowWidth property or the value of the &lt;xref:System.Console.WindowHeight<ept id=\"p2\">*</ept>&gt; property is greater than the largest possible window width or height for the current screen resolution and console font.","needQuote":false,"needEscape":true,"source":"The value of the WindowWidth property or the value of the <xref:System.Console.WindowHeight*> property is less than or equal to 0.       -or-       The value of the <xref:System.Console.WindowHeight*> property plus the value of the <xref:System.Console.WindowTop*> property is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.       -or-       The value of the WindowWidth property or the value of the <xref:System.Console.WindowHeight*> property is greater than the largest possible window width or height for the current screen resolution and console font."},{"pos":[135387,135424],"content":"Error reading or writing information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Error reading or writing information.","pos":[0,37]}]},{"pos":[135742,135834],"content":"Writes the text representation of the specified Boolean value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified Boolean value to the standard output stream.","pos":[0,92]}]},{"pos":[135846,136105],"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling &lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;, which outputs either &lt;xref:System.Boolean.TrueString?displayProperty=fullName&gt; or &lt;xref:System.Boolean.FalseString?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The text representation of `value` is produced by calling <xref:System.Boolean.ToString%2A?displayProperty=fullName>, which outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>."},{"pos":[136632,136651],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[136788,136810],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[137113,137188],"content":"Writes the specified Unicode character value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified Unicode character value to the standard output stream.","pos":[0,75]}]},{"pos":[137726,137745],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[137882,137904],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[138217,138296],"content":"Writes the specified array of Unicode characters to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified array of Unicode characters to the standard output stream.","pos":[0,79]}]},{"pos":[138440,138466],"content":"A Unicode character array.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Unicode character array.","pos":[0,26]}]},{"pos":[138603,138625],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[138943,139049],"content":"Writes the text representation of the specified <xref:System.Decimal> value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified &lt;xref:System.Decimal&gt; value to the standard output stream.","pos":[0,106],"source":"Writes the text representation of the specified <xref:System.Decimal> value to the standard output stream."}]},{"pos":[139061,139178],"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling &lt;xref:System.Decimal.ToString%2A?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The text representation of `value` is produced by calling <xref:System.Decimal.ToString%2A?displayProperty=fullName>."},{"pos":[139711,139730],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[139867,139889],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[140202,140318],"content":"Writes the text representation of the specified double-precision floating-point value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified double-precision floating-point value to the standard output stream.","pos":[0,116]}]},{"pos":[140330,140457],"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Double.ToString%2A?displayProperty=fullName&gt; method.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method."},{"pos":[140985,141004],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[141141,141163],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[141471,141577],"content":"Writes the text representation of the specified 32-bit signed integer value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified 32-bit signed integer value to the standard output stream.","pos":[0,106]}]},{"pos":[141589,141715],"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt; method.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method."},{"pos":[142242,142261],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[142398,142420],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[142728,142834],"content":"Writes the text representation of the specified 64-bit signed integer value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified 64-bit signed integer value to the standard output stream.","pos":[0,106]}]},{"pos":[142846,142972],"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt; method.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method."},{"pos":[143497,143516],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[143653,143675],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[143988,144073],"content":"Writes the text representation of the specified object to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified object to the standard output stream.","pos":[0,85]}]},{"pos":[144085,144312],"content":"If `value` is `null`, nothing is written and no exception is thrown. Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, nothing is written and no exception is thrown.","pos":[0,68],"source":"If `value` is `null`, nothing is written and no exception is thrown."},{"content":"Otherwise, the <ph id=\"ph1\">`ToString`</ph> method of <ph id=\"ph2\">`value`</ph> is called to produce its string representation, and the resulting string is written to the standard output stream.","pos":[69,227],"source":" Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream."}]},{"pos":[144840,144924],"content":"The value to write, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value to write, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[145061,145083],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[145396,145512],"content":"Writes the text representation of the specified single-precision floating-point value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified single-precision floating-point value to the standard output stream.","pos":[0,116]}]},{"pos":[145524,145651],"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt; method.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method."},{"pos":[146178,146197],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[146334,146356],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[146669,146733],"content":"Writes the specified string value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified string value to the standard output stream.","pos":[0,64]}]},{"pos":[146745,146814],"content":"If value is <ph id=\"ph1\">`null`</ph>, nothing is written to the standard output stream.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If value is `null`, nothing is written to the standard output stream."},{"pos":[147342,147361],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[147498,147520],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[147833,147941],"content":"Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.","pos":[0,108]}]},{"pos":[147953,148080],"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt; method.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method."},{"pos":[148606,148625],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[148762,148784],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[149097,149205],"content":"Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.","pos":[0,108]}]},{"pos":[149217,149344],"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt; method.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method."},{"pos":[149871,149890],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[150027,150049],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[150411,150535],"content":"Writes the text representation of the specified object to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified object to the standard output stream using the specified format information.","pos":[0,124]}]},{"pos":[150548,152601],"content":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.       The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.","pos":[0,216],"source":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string."},{"content":"The resulting string is written to the output stream.","pos":[217,270]},{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[277,476],"source":"       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the text representation of the value of the corresponding object.","pos":[477,596]},{"content":"The syntax of a format item is <ph id=\"ph1\">`{`</ph><bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[<ph id=\"ph2\">`,`</ph><bpt id=\"p2\">*</bpt>alignment<ept id=\"p2\">*</ept>][<ph id=\"ph3\">`:`</ph><bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]<ph id=\"ph4\">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.","pos":[603,897],"source":"       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted."},{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.","pos":[904,1034]},{"content":"-   For more information about the composite formatting feature supported by methods such as &lt;xref:System.String.Format%2A&gt;, &lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;, and some overloads of &lt;xref:System.Console.WriteLine%2A&gt;, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../Topic/Composite%20Formatting.md)</ept>.","pos":[1040,1336],"source":"      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md)."},{"content":"-   For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1342,1552],"source":"      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1558,1786],"source":"      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1792,1926],"source":"      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1932,2037],"source":"      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[153587,153627],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[153688,153722],"content":"An object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"An object to write using `format`."},{"pos":[153859,153881],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[153984,154068],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[154159,154218],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[154590,154724],"content":"Writes the text representation of the specified array of objects to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified array of objects to the standard output stream using the specified format information.","pos":[0,134]}]},{"pos":[154737,156984],"content":"This method uses the  [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.       The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).       The `arg` parameter is a parameter array. Arguments  can be passed to the method either as an array or as list of five or more items. The examples illustrate both forms of method call.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method uses the  <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.","pos":[0,217],"source":"This method uses the  [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string."},{"content":"The resulting string is written to the output stream.","pos":[218,271]},{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[278,477],"source":"       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the text representation of the value of the corresponding object.","pos":[478,597]},{"content":"The syntax of a format item is <ph id=\"ph1\">`{`</ph><bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[<ph id=\"ph2\">`,`</ph><bpt id=\"p2\">*</bpt>alignment<ept id=\"p2\">*</ept>][<ph id=\"ph3\">`:`</ph><bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]<ph id=\"ph4\">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.","pos":[604,898],"source":"       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted."},{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.","pos":[905,1035]},{"content":"-   For more information about the composite formatting feature supported by methods such as &lt;xref:System.String.Format%2A&gt;, &lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;, and some overloads of &lt;xref:System.Console.WriteLine%2A&gt;, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../Topic/Composite%20Formatting.md)</ept>.","pos":[1041,1337],"source":"      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md)."},{"content":"-   For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1343,1553],"source":"      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1559,1787],"source":"      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1793,1927],"source":"      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1933,2038],"source":"      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."},{"content":"The <ph id=\"ph1\">`arg`</ph> parameter is a parameter array.","pos":[2045,2086],"source":"       The `arg` parameter is a parameter array."},{"content":"Arguments  can be passed to the method either as an array or as list of five or more items.","pos":[2087,2178]},{"content":"The examples illustrate both forms of method call.","pos":[2179,2229]}]},{"pos":[158660,158700],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[158762,158806],"content":"An array of objects to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"An array of objects to write using `format`."},{"pos":[158943,158965],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[159068,159172],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;arg&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> or <code>arg</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[159263,159322],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[159723,159805],"content":"Writes the specified subarray of Unicode characters to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified subarray of Unicode characters to the standard output stream.","pos":[0,82]}]},{"pos":[159817,159926],"content":"This method writes <ph id=\"ph1\">`count`</ph> characters starting at position <ph id=\"ph2\">`index`</ph> of <ph id=\"ph3\">`buffer`</ph> to the standard output stream.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method writes `count` characters starting at position `index` of `buffer` to the standard output stream."},{"pos":[160092,160123],"content":"An array of Unicode characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of Unicode characters.","pos":[0,31]}]},{"pos":[160184,160218],"content":"The starting position in <ph id=\"ph1\">`buffer`</ph>.","needQuote":true,"needEscape":true,"source":"The starting position in `buffer`."},{"pos":[160279,160313],"content":"The number of characters to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of characters to write.","pos":[0,34]}]},{"pos":[160464,160548],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[160663,160722],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[160817,160918],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> specify a position that is not within <ph id=\"ph3\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>index</code> plus <code>count</code> specify a position that is not within <code>buffer</code>."},{"pos":[161007,161029],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[161440,161565],"content":"Writes the text representation of the specified objects to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified objects to the standard output stream using the specified format information.","pos":[0,125]}]},{"pos":[161578,163631],"content":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.       The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.","pos":[0,216],"source":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string."},{"content":"The resulting string is written to the output stream.","pos":[217,270]},{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[277,476],"source":"       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the text representation of the value of the corresponding object.","pos":[477,596]},{"content":"The syntax of a format item is <ph id=\"ph1\">`{`</ph><bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[<ph id=\"ph2\">`,`</ph><bpt id=\"p2\">*</bpt>alignment<ept id=\"p2\">*</ept>][<ph id=\"ph3\">`:`</ph><bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]<ph id=\"ph4\">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.","pos":[603,897],"source":"       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted."},{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.","pos":[904,1034]},{"content":"-   For more information about the composite formatting feature supported by methods such as &lt;xref:System.String.Format%2A&gt;, &lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;, and some overloads of &lt;xref:System.Console.WriteLine%2A&gt;, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../Topic/Composite%20Formatting.md)</ept>.","pos":[1040,1336],"source":"      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md)."},{"content":"-   For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1342,1552],"source":"      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1558,1786],"source":"      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1792,1926],"source":"      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1932,2037],"source":"      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[164638,164678],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[164739,164780],"content":"The first object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The first object to write using `format`."},{"pos":[164841,164883],"content":"The second object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The second object to write using `format`."},{"pos":[165020,165042],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[165145,165229],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[165320,165379],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[165839,165964],"content":"Writes the text representation of the specified objects to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified objects to the standard output stream using the specified format information.","pos":[0,125]}]},{"pos":[165977,168030],"content":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.       The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.","pos":[0,216],"source":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string."},{"content":"The resulting string is written to the output stream.","pos":[217,270]},{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[277,476],"source":"       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the text representation of the value of the corresponding object.","pos":[477,596]},{"content":"The syntax of a format item is <ph id=\"ph1\">`{`</ph><bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[<ph id=\"ph2\">`,`</ph><bpt id=\"p2\">*</bpt>alignment<ept id=\"p2\">*</ept>][<ph id=\"ph3\">`:`</ph><bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]<ph id=\"ph4\">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.","pos":[603,897],"source":"       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted."},{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.","pos":[904,1034]},{"content":"-   For more information about the composite formatting feature supported by methods such as &lt;xref:System.String.Format%2A&gt;, &lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;, and some overloads of &lt;xref:System.Console.WriteLine%2A&gt;, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../Topic/Composite%20Formatting.md)</ept>.","pos":[1040,1336],"source":"      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md)."},{"content":"-   For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1342,1552],"source":"      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1558,1786],"source":"      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1792,1926],"source":"      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1932,2037],"source":"      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[169050,169090],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[169151,169192],"content":"The first object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The first object to write using `format`."},{"pos":[169253,169295],"content":"The second object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The second object to write using `format`."},{"pos":[169356,169397],"content":"The third object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The third object to write using `format`."},{"pos":[169534,169556],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[169659,169743],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[169834,169893],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[170402,170562],"content":"Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.","pos":[0,160]}]},{"pos":[173560,173600],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[173661,173702],"content":"The first object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The first object to write using `format`."},{"pos":[173763,173805],"content":"The second object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The second object to write using `format`."},{"pos":[173866,173907],"content":"The third object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The third object to write using `format`."},{"pos":[173968,174010],"content":"The fourth object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The fourth object to write using `format`."},{"pos":[174147,174169],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[174272,174356],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[174447,174506],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[174791,174856],"content":"Writes the current line terminator to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the current line terminator to the standard output stream.","pos":[0,65]}]},{"pos":[174868,175234],"content":"The default line terminator is a string whose value is a carriage return followed by a line feed (\"\\r \" in C#, or `vbCrLf` in Visual Basic). You can change the line terminator by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> property to another string. The example provides an illustration.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default line terminator is a string whose value is a carriage return followed by a line feed (\"\\r \" in C#, or <ph id=\"ph1\">`vbCrLf`</ph> in Visual Basic).","pos":[0,140],"source":"The default line terminator is a string whose value is a carriage return followed by a line feed (\"\\r \" in C#, or `vbCrLf` in Visual Basic)."},{"content":"You can change the line terminator by setting the &lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName&gt; property of the &lt;xref:System.Console.Out%2A&gt; property to another string.","pos":[141,327],"source":" You can change the line terminator by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> property to another string."},{"content":"The example provides an illustration.","pos":[328,365]}]},{"pos":[176032,176054],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[176392,176526],"content":"Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.","pos":[0,134]}]},{"pos":[176539,176822],"content":"The text representation of `value` is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt; method.","pos":[0,128],"source":"The text representation of `value` is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[135,281],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[177409,177428],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[177569,177591],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[177914,178031],"content":"Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.","pos":[0,117]}]},{"pos":[178043,178189],"content":"For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[0,146],"source":"For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[178882,178901],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[179042,179064],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[179397,179518],"content":"Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.","pos":[0,121]}]},{"pos":[179530,179676],"content":"For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[0,146],"source":"For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[179824,179850],"content":"A Unicode character array.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Unicode character array.","pos":[0,26]}]},{"pos":[179991,180013],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[180351,180499],"content":"Writes the text representation of the specified <xref:System.Decimal> value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified &lt;xref:System.Decimal&gt; value, followed by the current line terminator, to the standard output stream.","pos":[0,148],"source":"Writes the text representation of the specified <xref:System.Decimal> value, followed by the current line terminator, to the standard output stream."}]},{"pos":[180512,180795],"content":"The text representation of `value` is produced by calling the <xref:System.Decimal.ToString%2A?displayProperty=fullName> method.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Decimal.ToString%2A?displayProperty=fullName&gt; method.","pos":[0,128],"source":"The text representation of `value` is produced by calling the <xref:System.Decimal.ToString%2A?displayProperty=fullName> method."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[135,281],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[181518,181537],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[181678,181700],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[182033,182191],"content":"Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.","pos":[0,158]}]},{"pos":[182204,182486],"content":"The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Double.ToString%2A?displayProperty=fullName&gt; method.","pos":[0,127],"source":"The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[134,280],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[183207,183226],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[183367,183389],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[183717,183865],"content":"Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.","pos":[0,148]}]},{"pos":[183878,184159],"content":"The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt; method.","pos":[0,126],"source":"The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[133,279],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[184876,184895],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[185036,185058],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[185386,185534],"content":"Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.","pos":[0,148]}]},{"pos":[185547,185828],"content":"The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt; method.","pos":[0,126],"source":"The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[133,279],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[186548,186567],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[186708,186730],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[187063,187190],"content":"Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.","pos":[0,127]}]},{"pos":[187203,187575],"content":"If `value` is `null`, only the line terminator is written. Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, only the line terminator is written.","pos":[0,58],"source":"If `value` is `null`, only the line terminator is written."},{"content":"Otherwise, the <ph id=\"ph1\">`ToString`</ph> method of <ph id=\"ph2\">`value`</ph> is called to produce its string representation, and the resulting string is written to the standard output stream.","pos":[59,217],"source":" Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[224,370],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[188249,188268],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[188409,188431],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[188764,188922],"content":"Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.","pos":[0,158]}]},{"pos":[188935,189217],"content":"The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt; method.","pos":[0,127],"source":"The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[134,280],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[189937,189956],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[190097,190119],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[190452,190558],"content":"Writes the specified string value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified string value, followed by the current line terminator, to the standard output stream.","pos":[0,106]}]},{"pos":[190571,190784],"content":"If value is `null`, only the line terminator is written to the standard output stream.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If value is <ph id=\"ph1\">`null`</ph>, only the line terminator is written to the standard output stream.","pos":[0,86],"source":"If value is `null`, only the line terminator is written to the standard output stream."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine&gt; method.","pos":[93,211],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine> method."}]},{"pos":[191494,191513],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[191654,191676],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[192009,192159],"content":"Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.","pos":[0,150]}]},{"pos":[192172,192454],"content":"The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt; method.","pos":[0,127],"source":"The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[134,280],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[193173,193192],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[193333,193355],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[193688,193838],"content":"Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.","pos":[0,150]}]},{"pos":[193851,194133],"content":"The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text representation of <ph id=\"ph1\">`value`</ph> is produced by calling the &lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt; method.","pos":[0,127],"source":"The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[134,280],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[194855,194874],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[195015,195037],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[195419,195585],"content":"Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.","pos":[0,166]}]},{"pos":[195598,197806],"content":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.       The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.","pos":[0,216],"source":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string."},{"content":"The resulting string is written to the output stream.","pos":[217,270]},{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[277,476],"source":"       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the text representation of the value of the corresponding object.","pos":[477,596]},{"content":"The syntax of a format item is <ph id=\"ph1\">`{`</ph><bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[<ph id=\"ph2\">`,`</ph><bpt id=\"p2\">*</bpt>alignment<ept id=\"p2\">*</ept>][<ph id=\"ph3\">`:`</ph><bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]<ph id=\"ph4\">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.","pos":[603,897],"source":"       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted."},{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.","pos":[904,1034]},{"content":"-   For more information about the composite formatting feature supported by methods such as &lt;xref:System.String.Format%2A&gt;, &lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;, and some overloads of &lt;xref:System.Console.WriteLine%2A&gt;, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../Topic/Composite%20Formatting.md)</ept>.","pos":[1040,1336],"source":"      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md)."},{"content":"-   For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1342,1552],"source":"      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1558,1786],"source":"      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1792,1926],"source":"      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1932,2037],"source":"      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[2044,2190],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[198839,198879],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[198940,198974],"content":"An object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"An object to write using `format`."},{"pos":[199115,199137],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[199240,199324],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[199415,199474],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[199866,200042],"content":"Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.","pos":[0,176]}]},{"pos":[200055,202264],"content":"This method uses the  [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.       The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method uses the  <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.","pos":[0,217],"source":"This method uses the  [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string."},{"content":"The resulting string is written to the output stream.","pos":[218,271]},{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[278,477],"source":"       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the text representation of the value of the corresponding object.","pos":[478,597]},{"content":"The syntax of a format item is <ph id=\"ph1\">`{`</ph><bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[<ph id=\"ph2\">`,`</ph><bpt id=\"p2\">*</bpt>alignment<ept id=\"p2\">*</ept>][<ph id=\"ph3\">`:`</ph><bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]<ph id=\"ph4\">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.","pos":[604,898],"source":"       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted."},{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.","pos":[905,1035]},{"content":"-   For more information about the composite formatting feature supported by methods such as &lt;xref:System.String.Format%2A&gt;, &lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;, and some overloads of &lt;xref:System.Console.WriteLine%2A&gt;, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../Topic/Composite%20Formatting.md)</ept>.","pos":[1041,1337],"source":"      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md)."},{"content":"-   For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1343,1553],"source":"      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1559,1787],"source":"      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1793,1927],"source":"      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1933,2038],"source":"      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[2045,2191],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[203420,203460],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[203522,203566],"content":"An array of objects to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"An array of objects to write using `format`."},{"pos":[203707,203729],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[203832,203936],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;arg&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> or <code>arg</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[204027,204086],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[204507,204631],"content":"Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.","pos":[0,124]}]},{"pos":[204644,204908],"content":"This method writes `count` characters starting at position `index` of `buffer` to the standard output stream.       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method writes <ph id=\"ph1\">`count`</ph> characters starting at position <ph id=\"ph2\">`index`</ph> of <ph id=\"ph3\">`buffer`</ph> to the standard output stream.","pos":[0,109],"source":"This method writes `count` characters starting at position `index` of `buffer` to the standard output stream."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[116,262],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[205079,205110],"content":"An array of Unicode characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of Unicode characters.","pos":[0,31]}]},{"pos":[205171,205205],"content":"The starting position in <ph id=\"ph1\">`buffer`</ph>.","needQuote":true,"needEscape":true,"source":"The starting position in `buffer`."},{"pos":[205266,205300],"content":"The number of characters to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of characters to write.","pos":[0,34]}]},{"pos":[205455,205539],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[205654,205713],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[205808,205909],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> specify a position that is not within <ph id=\"ph3\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>index</code> plus <code>count</code> specify a position that is not within <code>buffer</code>."},{"pos":[205998,206020],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[206451,206618],"content":"Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.","pos":[0,167]}]},{"pos":[206631,208839],"content":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.       The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.","pos":[0,216],"source":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string."},{"content":"The resulting string is written to the output stream.","pos":[217,270]},{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[277,476],"source":"       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the text representation of the value of the corresponding object.","pos":[477,596]},{"content":"The syntax of a format item is <ph id=\"ph1\">`{`</ph><bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[<ph id=\"ph2\">`,`</ph><bpt id=\"p2\">*</bpt>alignment<ept id=\"p2\">*</ept>][<ph id=\"ph3\">`:`</ph><bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]<ph id=\"ph4\">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.","pos":[603,897],"source":"       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted."},{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.","pos":[904,1034]},{"content":"-   For more information about the composite formatting feature supported by methods such as &lt;xref:System.String.Format%2A&gt;, &lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;, and some overloads of &lt;xref:System.Console.WriteLine%2A&gt;, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../Topic/Composite%20Formatting.md)</ept>.","pos":[1040,1336],"source":"      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md)."},{"content":"-   For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1342,1552],"source":"      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1558,1786],"source":"      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1792,1926],"source":"      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1932,2037],"source":"      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[2044,2190],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[210002,210042],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[210103,210144],"content":"The first object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The first object to write using `format`."},{"pos":[210205,210247],"content":"The second object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The second object to write using `format`."},{"pos":[210388,210410],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[210513,210597],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[210688,210747],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[211227,211394],"content":"Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.","pos":[0,167]}]},{"pos":[211407,213615],"content":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.       The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.","pos":[0,216],"source":"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string."},{"content":"The resulting string is written to the output stream.","pos":[217,270]},{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.","pos":[277,476],"source":"       The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the text representation of the value of the corresponding object.","pos":[477,596]},{"content":"The syntax of a format item is <ph id=\"ph1\">`{`</ph><bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[<ph id=\"ph2\">`,`</ph><bpt id=\"p2\">*</bpt>alignment<ept id=\"p2\">*</ept>][<ph id=\"ph3\">`:`</ph><bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]<ph id=\"ph4\">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.","pos":[603,897],"source":"       The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted."},{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.","pos":[904,1034]},{"content":"-   For more information about the composite formatting feature supported by methods such as &lt;xref:System.String.Format%2A&gt;, &lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;, and some overloads of &lt;xref:System.Console.WriteLine%2A&gt;, see <bpt id=\"p1\">[</bpt>Composite Formatting<ept id=\"p1\">](../Topic/Composite%20Formatting.md)</ept>.","pos":[1040,1336],"source":"      -   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md)."},{"content":"-   For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1342,1552],"source":"      -   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about date and time format specifiers, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1558,1786],"source":"      -   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about enumeration format specifiers, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1792,1926],"source":"      -   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   For more information about formatting, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1932,2037],"source":"      -   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."},{"content":"For more information about the line terminator, see the Remarks section of the &lt;xref:System.Console.WriteLine%2A&gt; method that takes no parameters.","pos":[2044,2190],"source":"       For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."}]},{"pos":[214781,214821],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[214882,214923],"content":"The first object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The first object to write using `format`."},{"pos":[214984,215026],"content":"The second object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The second object to write using `format`."},{"pos":[215087,215128],"content":"The third object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The third object to write using `format`."},{"pos":[215269,215291],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[215394,215478],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[215569,215628],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."},{"pos":[216157,216359],"content":"Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.","pos":[0,202]}]},{"pos":[219539,219579],"content":"A composite format string (see Remarks).","needQuote":true,"needEscape":true,"nodes":[{"content":"A composite format string (see Remarks).","pos":[0,40]}]},{"pos":[219640,219681],"content":"The first object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The first object to write using `format`."},{"pos":[219742,219784],"content":"The second object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The second object to write using `format`."},{"pos":[219845,219886],"content":"The third object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The third object to write using `format`."},{"pos":[219947,219989],"content":"The fourth object to write using <ph id=\"ph1\">`format`</ph>.","needQuote":true,"needEscape":true,"source":"The fourth object to write using `format`."},{"pos":[220130,220152],"content":"An I/O error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[220255,220339],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[220430,220489],"content":"The format specification in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The format specification in <code>format</code> is invalid."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Console\n  id: Console\n  children:\n  - System.Console.BackgroundColor\n  - System.Console.Beep\n  - System.Console.Beep(System.Int32,System.Int32)\n  - System.Console.BufferHeight\n  - System.Console.BufferWidth\n  - System.Console.CancelKeyPress\n  - System.Console.CapsLock\n  - System.Console.Clear\n  - System.Console.CursorLeft\n  - System.Console.CursorSize\n  - System.Console.CursorTop\n  - System.Console.CursorVisible\n  - System.Console.Error\n  - System.Console.ForegroundColor\n  - System.Console.In\n  - System.Console.InputEncoding\n  - System.Console.IsErrorRedirected\n  - System.Console.IsInputRedirected\n  - System.Console.IsOutputRedirected\n  - System.Console.KeyAvailable\n  - System.Console.LargestWindowHeight\n  - System.Console.LargestWindowWidth\n  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)\n  - System.Console.NumberLock\n  - System.Console.OpenStandardError\n  - System.Console.OpenStandardError(System.Int32)\n  - System.Console.OpenStandardInput\n  - System.Console.OpenStandardInput(System.Int32)\n  - System.Console.OpenStandardOutput\n  - System.Console.OpenStandardOutput(System.Int32)\n  - System.Console.Out\n  - System.Console.OutputEncoding\n  - System.Console.Read\n  - System.Console.ReadKey\n  - System.Console.ReadKey(System.Boolean)\n  - System.Console.ReadLine\n  - System.Console.ResetColor\n  - System.Console.SetBufferSize(System.Int32,System.Int32)\n  - System.Console.SetCursorPosition(System.Int32,System.Int32)\n  - System.Console.SetError(System.IO.TextWriter)\n  - System.Console.SetIn(System.IO.TextReader)\n  - System.Console.SetOut(System.IO.TextWriter)\n  - System.Console.SetWindowPosition(System.Int32,System.Int32)\n  - System.Console.SetWindowSize(System.Int32,System.Int32)\n  - System.Console.Title\n  - System.Console.TreatControlCAsInput\n  - System.Console.WindowHeight\n  - System.Console.WindowLeft\n  - System.Console.WindowTop\n  - System.Console.WindowWidth\n  - System.Console.Write(System.Boolean)\n  - System.Console.Write(System.Char)\n  - System.Console.Write(System.Char[])\n  - System.Console.Write(System.Decimal)\n  - System.Console.Write(System.Double)\n  - System.Console.Write(System.Int32)\n  - System.Console.Write(System.Int64)\n  - System.Console.Write(System.Object)\n  - System.Console.Write(System.Single)\n  - System.Console.Write(System.String)\n  - System.Console.Write(System.UInt32)\n  - System.Console.Write(System.UInt64)\n  - System.Console.Write(System.String,System.Object)\n  - System.Console.Write(System.String,System.Object[])\n  - System.Console.Write(System.Char[],System.Int32,System.Int32)\n  - System.Console.Write(System.String,System.Object,System.Object)\n  - System.Console.Write(System.String,System.Object,System.Object,System.Object)\n  - System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)\n  - System.Console.WriteLine\n  - System.Console.WriteLine(System.Boolean)\n  - System.Console.WriteLine(System.Char)\n  - System.Console.WriteLine(System.Char[])\n  - System.Console.WriteLine(System.Decimal)\n  - System.Console.WriteLine(System.Double)\n  - System.Console.WriteLine(System.Int32)\n  - System.Console.WriteLine(System.Int64)\n  - System.Console.WriteLine(System.Object)\n  - System.Console.WriteLine(System.Single)\n  - System.Console.WriteLine(System.String)\n  - System.Console.WriteLine(System.UInt32)\n  - System.Console.WriteLine(System.UInt64)\n  - System.Console.WriteLine(System.String,System.Object)\n  - System.Console.WriteLine(System.String,System.Object[])\n  - System.Console.WriteLine(System.Char[],System.Int32,System.Int32)\n  - System.Console.WriteLine(System.String,System.Object,System.Object)\n  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)\n  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)\n  langs:\n  - csharp\n  name: Console\n  nameWithType: Console\n  fullName: System.Console\n  type: Class\n  summary: \"Represents the standard input, output, and error streams for console applications. This class cannot be inherited.  \\n  \\n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4).\"\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The Console class provides basic support for applications that read characters from, and write characters to, the console.  \\n  \\n For information about developing with the Console class, see the following sections:  \\n  \\n-   [Console I/O Streams](#Streams)  \\n  \\n-   [Screen Buffer and Console Window](#Buffer)  \\n  \\n-   [Unicode Support for the Console](#Unicode)  \\n  \\n-   [Common Operations](#Operations)  \\n  \\n-   [.NET Core Notes](#Core)  \\n  \\n<a name=\\\"Streams\\\"></a>   \\n## Console I/O Streams  \\n When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <xref:System.Console.In%2A?displayProperty=fullName>, <xref:System.Console.Out%2A?displayProperty=fullName>, and <xref:System.Console.Error%2A?displayProperty=fullName> properties.  \\n  \\n By default, the value of the <xref:System.Console.In%2A> property is a <xref:System.IO.TextReader?displayProperty=fullName> object that represents the keyboard, and the values of the <xref:System.Console.Out%2A> and <xref:System.Console.Error%2A> properties are <xref:System.IO.TextWriter?displayProperty=fullName> objects that represent a console window. However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the <xref:System.Console.SetIn%2A?displayProperty=fullName>, <xref:System.Console.SetOut%2A?displayProperty=fullName>, or <xref:System.Console.SetError%2A?displayProperty=fullName> method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams. This means that methods that are ordinarily asynchronous, such as <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>, execute synchronously if the object represents a console stream.  \\n  \\n> [!NOTE]\\n>  Do not use the Console class to display output in unattended applications, such as server applications. Calls to methods such as <xref:System.Console.Write%2A?displayProperty=fullName> and <xref:System.Console.WriteLine%2A?displayProperty=fullName> have no effect in GUI applications.  \\n  \\n Console class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Program your application to catch <xref:System.IO.IOException?displayProperty=fullName> exceptions if you redirect a standard stream. You can also use the <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, and <xref:System.Console.IsErrorRedirected%2A> properties to determine whether a standard stream is redirected before performing an operation that throws an <xref:System.IO.IOException?displayProperty=fullName> exception.  \\n  \\n It is sometimes useful to explicitly call the members of the stream objects represented by the <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, and <xref:System.Console.Error%2A> properties. For example, by default, the <xref:System.Console.ReadLine%2A?displayProperty=fullName> method reads input from the standard input stream. Similarly, the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed (\\\"\\\\r\\\\n\\\"). However, the Console class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.  \\n  \\n You can solve this problem by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> or <xref:System.Console.Error%2A> property to another line termination string. For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:  \\n  \\n `Console.Error.NewLine = \\\"\\\\r\\\\n\\\\r\\\\n\\\";`  \\n  \\n You can then explicitly call the <xref:System.IO.TextWriter.WriteLine%2A> method of the error output stream object, as in the following C# statement:  \\n  \\n `Console.Error.WriteLine();`  \\n  \\n<a name=\\\"Buffer\\\"></a>   \\n## Screen Buffer and Console Window  \\n Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color, and each character cell has its own background color.  \\n  \\n The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.  \\n  \\n A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.  \\n  \\n The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <xref:System.Int16.MaxValue?displayProperty=fullName>.  \\n  \\n<a name=\\\"Unicode\\\"></a>   \\n## Unicode Support for the Console  \\n In general, the console reads input and writes output by using the current console code page, which the system locale defines by default. A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately. The following example illustrates this problem. It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console. If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.  \\n  \\n [!code-cs[System.Console.Class#1](~/add/codesnippet/csharp/t-system.console_1.cs)]\\n [!code-vb[System.Console.Class#1](~/add/codesnippet/visualbasic/t-system.console_1.vb)]  \\n  \\n In addition to supporting code pages, the Console class supports UTF-8 encoding with the <xref:System.Text.UTF8Encoding> class. Beginning with the .NET Framework 4.5, the Console class also supports UTF-16 encoding with the <xref:System.Text.UnicodeEncoding> class. To display Unicode characters to the console. you set the <xref:System.Console.OutputEncoding%2A> property to either <xref:System.Text.UTF8Encoding> or  <xref:System.Text.UnicodeEncoding>.  \\n  \\n Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character. To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console. The following example shows how you can programmatically change the font from a raster font to Lucida Console.  \\n  \\n [!code-cs[System.Console.Class.Unsafe#3](~/add/codesnippet/csharp/setfont1/setfont1.cs#3)]\\n [!code-vb[System.Console.Class.Unsafe#3](~/add/codesnippet/visualbasic/t-system.console_2.vb)]  \\n  \\n However, TrueType fonts can display only a subset of glyphs. For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02. To see which characters a particular font supports, open the **Fonts** applet in Control Panel, choose the **Find a character** option, and choose the font whose character set you'd like to examine in the **Font** list of the **Character Map** window.  \\n  \\n Windows uses font linking to display glyphs that are not available in a particular font. For information about font linking to display additional character sets, see [Globalization Step-by-Step: Fonts](http://go.microsoft.com/fwlink/?LinkId=229111). Linked fonts are defined in the HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\FontLink\\\\SystemLink subkey of the registry. Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font. Each member of the array defines a linked font and takes the form *font-file-name*,*font-name*. The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.  \\n  \\n [!code-cs[System.Console.Class#2](~/add/codesnippet/csharp/t-system.console_3.cs)]\\n [!code-vb[System.Console.Class#2](~/add/codesnippet/visualbasic/t-system.console_3.vb)]  \\n  \\n Unicode support for the console has the following limitations:  \\n  \\n-   UTF-32 encoding is not supported. The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <xref:System.Text.UTF8Encoding> and <xref:System.Text.UnicodeEncoding> classes, respectively.  \\n  \\n-   Bidirectional output is not supported.  \\n  \\n-   Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.  \\n  \\n-   Display of characters in complex scripts is not supported.  \\n  \\n-   Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters. To work around this limitation, you can normalize the string to be displayed by calling the <xref:System.String.Normalize%2A?displayProperty=fullName> method before sending output to the console. In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <xref:System.String.Normalize%2A?displayProperty=fullName> method is called.  \\n  \\n     [!code-cs[System.Console.Class#5](~/add/codesnippet/csharp/t-system.console_4.cs)]\\n     [!code-vb[System.Console.Class#5](~/add/codesnippet/visualbasic/t-system.console_4.vb)]  \\n  \\n     Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.  \\n  \\n-   If a font provides a glyph for a code point in the private use area, that glyph will be displayed. However, because characters in the private use area are application-specific, this may not be the expected glyph.  \\n  \\n The following example displays a range of Unicode characters to the console. The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (`false`) or UTF-16 encoding (`true`). It assumes that the console is using a TrueType font.  \\n  \\n [!code-cs[System.Console.Class#4](~/add/codesnippet/csharp/t-system.console_5.cs)]\\n [!code-vb[System.Console.Class#4](~/add/codesnippet/visualbasic/t-system.console_5.vb)]  \\n  \\n<a name=\\\"Operations\\\"></a>   \\n## Common Operations  \\n The Console class contains the following methods for reading console input and writing console output:  \\n  \\n-   The overloads of the <xref:System.Console.ReadKey%2A> method read an individual character.  \\n  \\n-   The <xref:System.Console.ReadLine%2A> method reads an entire line of input.  \\n  \\n-   The <xref:System.Console.Write%2A> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.  \\n  \\n-   A parallel set of <xref:System.Console.WriteLine%2A> method overloads output the same string as the <xref:System.Console.Write%2A> overloads but also add a line termination string.  \\n  \\n The Console class also contains methods and properties to perform the following operations:  \\n  \\n-   Get or set the size of the screen buffer. The <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties let you get or set the buffer height and width, respectively, and the <xref:System.Console.SetBufferSize%2A> method lets you set the buffer size in a single method call.  \\n  \\n-   Get or set the size of the console window. The <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties let you get or set the window height and width, respectively, and the <xref:System.Console.SetWindowSize%2A> method lets you set the window size in a single method call.  \\n  \\n-   Get or set the size of the cursor. The <xref:System.Console.CursorSize%2A> property specifies the height of the cursor in a character cell.  \\n  \\n-   Get or set the position of the console window relative to the screen buffer. The <xref:System.Console.WindowTop%2A> and <xref:System.Console.WindowLeft%2A> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <xref:System.Console.SetWindowPosition%2A> method lets you set these values in a single method call.  \\n  \\n-   Get or set the position of the cursor by getting or setting the <xref:System.Console.CursorTop%2A> and <xref:System.Console.CursorLeft%2A> properties, or set the position of the cursor by calling the <xref:System.Console.SetCursorPosition%2A> method.  \\n  \\n-   Move or clear data in the screen buffer by calling the <xref:System.Console.MoveBufferArea%2A> or <xref:System.Console.Clear%2A> method.  \\n  \\n-   Get or set the foreground and background colors by using the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties, or reset the background and foreground to their default colors by calling the <xref:System.Console.ResetColor%2A> method.  \\n  \\n-   Play the sound of a beep through the console speaker by calling the <xref:System.Console.Beep%2A> method.  \\n  \\n<a name=\\\"Core\\\"></a>   \\n## [!INCLUDE[net_core](~/add/includes/net-core-md.md)] Notes  \\n In the .NET Framework on the desktop, the Console class uses the encoding returned by `GetConsoleCP` and `GetConsoleOutputCP`, which typically is a code page encoding. For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default. However, [!INCLUDE[net_core](~/add/includes/net-core-md.md)] may make only a limited subset of these encodings available. Where this is the case, <xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName> is used as the default encoding for the console.  \\n  \\n If your app depends on specific code page encodings, you can still make them available by doing the following *before* you call any Console methods:  \\n  \\n1.  Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.  \\n  \\n2.  Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName> property.  \\n  \\n3.  Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName> method to make the additional encodings supported by the encoding provider available.  \\n  \\n The Console class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Console output methods.\"\n  example:\n  - \"The following example demonstrates how to read data from, and write data to, the standard input and output streams. Note that these streams can be redirected by using the <xref:System.Console.SetIn%2A> and <xref:System.Console.SetOut%2A> methods.  \\n  \\n [!code-cs[Classic Console Example#1](~/add/codesnippet/csharp/t-system.console_6.cs)]\\n [!code-cpp[Classic Console Example#1](~/add/codesnippet/cpp/t-system.console_6.cpp)]\\n [!code-vb[Classic Console Example#1](~/add/codesnippet/visualbasic/t-system.console_6.vb)]\"\n  syntax:\n    content: public static class Console\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Console.BackgroundColor\n  id: BackgroundColor\n  parent: System.Console\n  langs:\n  - csharp\n  name: BackgroundColor\n  nameWithType: Console.BackgroundColor\n  fullName: System.Console.BackgroundColor\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the background color of the console.\n  remarks: \"A change to the BackgroundColor property affects only output that is written to individual character cells after the background color is changed. To change the background color of the console window as a whole, set the BackgroundColor property and call the <xref:System.Console.Clear%2A> method. The following example provides an illustration.  \\n  \\n [!code-vb[System.Console.BackgroundColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)]\\n [!code-cs[System.Console.BackgroundColor#1](~/add/codesnippet/csharp/p-system.console.backgro_1.cs)]  \\n  \\n A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor?displayProperty=fullName>.\"\n  example:\n  - \"The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the BackgroundColor and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \\n  \\n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_2.vb)]\\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.backgro_2.cs)]\"\n  syntax:\n    content: public static ConsoleColor BackgroundColor { get; set; }\n    return:\n      type: System.ConsoleColor\n      description: A value that specifies the background color of the console; that is, the color that appears behind each character. The default is black.\n  overload: System.Console.BackgroundColor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The color specified in a set operation is not a valid member of <xref href=\"System.ConsoleColor\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Beep\n  id: Beep\n  parent: System.Console\n  langs:\n  - csharp\n  name: Beep()\n  nameWithType: Console.Beep()\n  fullName: System.Console.Beep()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Plays the sound of a beep through the console speaker.\n  remarks: \"By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP.  \\n  \\n Beep wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Whether Beep produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device.\"\n  example:\n  - \"The following example demonstrates the Beep method. The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.  \\n  \\n [!code-cs[console.beep#1](~/add/codesnippet/csharp/m-system.console.beep_1.cs)]\\n [!code-cpp[console.beep#1](~/add/codesnippet/cpp/m-system.console.beep_1.cpp)]\\n [!code-vb[console.beep#1](~/add/codesnippet/visualbasic/m-system.console.beep_1.vb)]\"\n  syntax:\n    content: public static void Beep ();\n    parameters: []\n  overload: System.Console.Beep*\n  exceptions:\n  - type: System.Security.HostProtectionException\n    commentId: T:System.Security.HostProtectionException\n    description: This method was executed on a server, such as SQL Server, that does not permit access to a user interface.\n  platform:\n  - net462\n- uid: System.Console.Beep(System.Int32,System.Int32)\n  id: Beep(System.Int32,System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Beep(Int32,Int32)\n  nameWithType: Console.Beep(Int32,Int32)\n  fullName: System.Console.Beep(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Plays the sound of a beep of a specified frequency and duration through the console speaker.\n  remarks: \"<xref:System.Console.Beep%2A> wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Whether <xref:System.Console.Beep%2A> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP.\"\n  example:\n  - \"This example demonstrates the Beep method by playing the first few notes of a song through the console speaker.  \\n  \\n [!code-cpp[console.beep2#1](~/add/codesnippet/cpp/m-system.console.beep-sy_1.cpp)]\\n [!code-vb[console.beep2#1](~/add/codesnippet/visualbasic/m-system.console.beep-sy_1.vb)]\\n [!code-cs[console.beep2#1](~/add/codesnippet/csharp/m-system.console.beep-sy_1.cs)]\"\n  syntax:\n    content: public static void Beep (int frequency, int duration);\n    parameters:\n    - id: frequency\n      type: System.Int32\n      description: The frequency of the beep, ranging from 37 to 32767 hertz.\n    - id: duration\n      type: System.Int32\n      description: The duration of the beep measured in milliseconds.\n  overload: System.Console.Beep*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>frequency</code> is less than 37 or more than 32767 hertz.  \\n  \\n -or-  \\n  \\n <code>duration</code> is less than or equal to zero.\"\n  - type: System.Security.HostProtectionException\n    commentId: T:System.Security.HostProtectionException\n    description: This method was executed on a server, such as SQL Server, that does not permit access to the console.\n  platform:\n  - net462\n- uid: System.Console.BufferHeight\n  id: BufferHeight\n  parent: System.Console\n  langs:\n  - csharp\n  name: BufferHeight\n  nameWithType: Console.BufferHeight\n  fullName: System.Console.BufferHeight\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the height of the buffer area.\n  remarks: \"This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window. In contrast, the <xref:System.Console.WindowHeight%2A> property defines the number of rows that are actually displayed in the console window at any particular time. If the number of rows actually written to the buffer exceeds the number of rows defined by the <xref:System.Console.WindowHeight%2A> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <xref:System.Console.WindowHeight%2A> property and are located anywhere in the buffer.  \\n  \\n If a set operation decreases the value of the BufferHeight property, the uppermost lines are removed. For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.\"\n  example:\n  - \"This example demonstrates the BufferHeight and <xref:System.Console.BufferWidth%2A> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \\n  \\n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferh_1.cs)]\\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferh_1.cpp)]\\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferh_1.vb)]\"\n  syntax:\n    content: public static int BufferHeight { get; set; }\n    return:\n      type: System.Int32\n      description: The current height, in rows, of the buffer area.\n  overload: System.Console.BufferHeight*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value in a set operation is less than or equal to zero.  \\n  \\n -or-  \\n  \\n The value in a set operation is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n The value in a set operation is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.BufferWidth\n  id: BufferWidth\n  parent: System.Console\n  langs:\n  - csharp\n  name: BufferWidth\n  nameWithType: Console.BufferWidth\n  fullName: System.Console.BufferWidth\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the width of the buffer area.\n  remarks: If a set operation decreases the value of the BufferWidth property, the rightmost columns are removed. For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.\n  example:\n  - \"This example demonstrates the <xref:System.Console.BufferHeight%2A> and BufferWidth properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \\n  \\n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferw_1.cs)]\\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferw_1.cpp)]\\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferw_1.vb)]\"\n  syntax:\n    content: public static int BufferWidth { get; set; }\n    return:\n      type: System.Int32\n      description: The current width, in columns, of the buffer area.\n  overload: System.Console.BufferWidth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value in a set operation is less than or equal to zero.  \\n  \\n -or-  \\n  \\n The value in a set operation is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n The value in a set operation is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.CancelKeyPress\n  id: CancelKeyPress\n  parent: System.Console\n  langs:\n  - csharp\n  name: CancelKeyPress\n  nameWithType: Console.CancelKeyPress\n  fullName: System.Console.CancelKeyPress\n  type: Event\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Occurs when the <xref href=\"System.ConsoleModifiers\"></xref> modifier key (Ctrl) and either the <xref href=\"System.ConsoleKey\"></xref> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).\n  remarks: \"This event is used in conjunction with <xref:System.ConsoleCancelEventHandler?displayProperty=fullName> and <xref:System.ConsoleCancelEventArgs?displayProperty=fullName>. The CancelKeyPress event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate. For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When the user presses either Ctrl+C or Ctrl+Break, the CancelKeyPress event is fired and the application's <xref:System.ConsoleCancelEventHandler> event handler is executed. The event handler is passed a <xref:System.ConsoleCancelEventArgs> object that has two useful properties:  \\n  \\n-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <xref:System.ConsoleSpecialKey?displayProperty=fullName>) or Ctrl+Break (the property value is <xref:System.ConsoleSpecialKey?displayProperty=fullName>).  \\n  \\n-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break. By default, the <xref:System.ConsoleCancelEventArgs.Cancel%2A> property is `false`, which causes program execution to terminate when the event handler exits. Changing its property to `true` specifies that the application should continue to execute.  \\n  \\n> [!TIP]\\n>  If your application has simple requirements, you can use the <xref:System.Console.TreatControlCAsInput%2A> property instead of this event. By setting this property to `false`, you can ensure that your application always exits if the user presses Ctrl+C. By setting it to `true`, you can ensure that pressing Ctrl+C will not terminate the application.  \\n  \\n The event handler for this event is executed on a thread pool thread.\"\n  example:\n  - \"The following example demonstrates how the CancelKeyPress event is used. When you press Ctrl+C, the read operation is interrupted and the `myHandler` event handler is invoked. Upon entry to the event handler, the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property is `false`, which means that the current process will terminate when the event handler terminates. However, the event handler sets the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property to `true`, which means that the process will not terminate and the read operation will resume.  \\n  \\n [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/e-system.console.cancelk_1.cs)]\\n [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/e-system.console.cancelk_1.cpp)]\\n [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/e-system.console.cancelk_1.vb)]\"\n  syntax:\n    content: public static event ConsoleCancelEventHandler CancelKeyPress;\n    return:\n      type: System.ConsoleCancelEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.CapsLock\n  id: CapsLock\n  parent: System.Console\n  langs:\n  - csharp\n  name: CapsLock\n  nameWithType: Console.CapsLock\n  fullName: System.Console.CapsLock\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.\n  syntax:\n    content: public static bool CapsLock { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if CAPS LOCK is turned on; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if CAPS LOCK is turned off.\n  overload: System.Console.CapsLock*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.Clear\n  id: Clear\n  parent: System.Console\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: Console.Clear()\n  fullName: System.Console.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Clears the console buffer and corresponding console window of display information.\n  remarks: \"Using the Clear method is equivalent invoking the MS-DOS `cls` command in the command prompt window. When the Clear method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.  \\n  \\n> [!NOTE]\\n>  Attempting to call the Clear method when a console application's output is redirected to a file throws a <xref:System.IO.IOException>. To prevent this, always wrap a call to the Clear method in a `try`…`catch` block.\"\n  example:\n  - \"The following example uses the Clear method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display. If the user chooses not to exit the program, the console's original foreground and background colors are restored and the Clear method is called again before re-executing the loop.  \\n  \\n [!code-vb[System.Console.Clear#1](~/add/codesnippet/visualbasic/m-system.console.clear_1.vb)]\\n [!code-cs[System.Console.Clear#1](~/add/codesnippet/csharp/m-system.console.clear_1.cs)]  \\n  \\n The example relies on a `GetKeyPress` method to validate the user's selection of a foreground and background color.  \\n  \\n This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and Clear methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \\\"+\\\", \\\"&#124;\\\", and \\\"-\\\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \\n  \\n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.clear_2.cs)]\\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.clear_2.cpp)]\\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.clear_2.vb)]\"\n  syntax:\n    content: public static void Clear ();\n    parameters: []\n  overload: System.Console.Clear*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.CursorLeft\n  id: CursorLeft\n  parent: System.Console\n  langs:\n  - csharp\n  name: CursorLeft\n  nameWithType: Console.CursorLeft\n  fullName: System.Console.CursorLeft\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the column position of the cursor within the buffer area.\n  remarks: ''\n  example:\n  - \"This example demonstrates the CursorLeft and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \\\"+\\\", \\\"&#124;\\\", and \\\"-\\\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \\n  \\n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursorl_1.cs)]\\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursorl_1.cpp)]\\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursorl_1.vb)]\"\n  syntax:\n    content: public static int CursorLeft { get; set; }\n    return:\n      type: System.Int32\n      description: The current position, in columns, of the cursor.\n  overload: System.Console.CursorLeft*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value in a set operation is less than zero.  \\n  \\n -or-  \\n  \\n The value in a set operation is greater than or equal to <xref:System.Console.BufferWidth*>.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.CursorSize\n  id: CursorSize\n  parent: System.Console\n  langs:\n  - csharp\n  name: CursorSize\n  nameWithType: Console.CursorSize\n  fullName: System.Console.CursorSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the height of the cursor within a character cell.\n  remarks: The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.\n  example:\n  - \"This example demonstrates the CursorSize property. The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.  \\n  \\n [!code-cs[console.cursorsize#1](~/add/codesnippet/csharp/p-system.console.cursors_1.cs)]\\n [!code-cpp[console.cursorsize#1](~/add/codesnippet/cpp/p-system.console.cursors_1.cpp)]\\n [!code-vb[console.cursorsize#1](~/add/codesnippet/visualbasic/p-system.console.cursors_1.vb)]\"\n  syntax:\n    content: public static int CursorSize { get; set; }\n    return:\n      type: System.Int32\n      description: The size of the cursor expressed as a percentage of the height of a character cell. The property value ranges from 1 to 100.\n  overload: System.Console.CursorSize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value specified in a set operation is less than 1 or greater than 100.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.CursorTop\n  id: CursorTop\n  parent: System.Console\n  langs:\n  - csharp\n  name: CursorTop\n  nameWithType: Console.CursorTop\n  fullName: System.Console.CursorTop\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the row position of the cursor within the buffer area.\n  remarks: ''\n  example:\n  - \"This example demonstrates the <xref:System.Console.CursorLeft%2A> and CursorTop properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \\\"+\\\", \\\"&#124;\\\", and \\\"-\\\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \\n  \\n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursortop_1.cs)]\\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursortop_1.cpp)]\\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursortop_1.vb)]\"\n  syntax:\n    content: public static int CursorTop { get; set; }\n    return:\n      type: System.Int32\n      description: The current position, in rows, of the cursor.\n  overload: System.Console.CursorTop*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value in a set operation is less than zero.  \\n  \\n -or-  \\n  \\n The value in a set operation is greater than or equal to <xref:System.Console.BufferHeight*>.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.CursorVisible\n  id: CursorVisible\n  parent: System.Console\n  langs:\n  - csharp\n  name: CursorVisible\n  nameWithType: Console.CursorVisible\n  fullName: System.Console.CursorVisible\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a value indicating whether the cursor is visible.\n  remarks: ''\n  example:\n  - \"This example demonstrates the CursorVisible property. The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.  \\n  \\n [!code-cs[console.cursorvis#1](~/add/codesnippet/csharp/p-system.console.cursorv_1.cs)]\\n [!code-vb[console.cursorvis#1](~/add/codesnippet/visualbasic/p-system.console.cursorv_1.vb)]\\n [!code-cpp[console.cursorvis#1](~/add/codesnippet/cpp/p-system.console.cursorv_1.cpp)]\"\n  syntax:\n    content: public static bool CursorVisible { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the cursor is visible; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Console.CursorVisible*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Error\n  id: Error\n  parent: System.Console\n  langs:\n  - csharp\n  name: Error\n  nameWithType: Console.Error\n  fullName: System.Console.Error\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the standard error output stream.\n  remarks: \"This standard error stream is set to the console by default. It can be set to another stream with the <xref:System.Console.SetError%2A> method. After the standard error stream is redirected, it can be reacquired by calling the <xref:System.Console.OpenStandardError%2A> method.  \\n  \\n In console applications whose informational output is often redirected to a file, the standard error stream available through the Error property can be used to display information to the console even if output is redirected. The following example displays product tables for 10 numbers at a time starting with 1. After every set of 10 numbers, the Error property is used to ask the user whether to display the next set. If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.  \\n  \\n [!code-cs[System.Console.Error#1](~/add/codesnippet/csharp/p-system.console.error_1.cs)]\\n [!code-vb[System.Console.Error#1](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)]\"\n  example:\n  - \"The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the `tabSize` variable. It redirects the standard input and output streams to files, but uses the Error property to write the standard error stream to the console. It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.  \\n  \\n [!code-cpp[Console-EXPANDTABSEX#1](~/add/codesnippet/cpp/p-system.console.error_2.cpp)]\\n [!code-cs[Console-EXPANDTABSEX#1](~/add/codesnippet/csharp/p-system.console.error_2.cs)]\\n [!code-vb[Console-EXPANDTABSEX#1](~/add/codesnippet/visualbasic/p-system.console.error_2.vb)]  \\n  \\n The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \\n  \\n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/p-system.console.error_3.cs)]\\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/p-system.console.error_3.vb)]  \\n  \\n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered.\"\n  syntax:\n    content: public static System.IO.TextWriter Error { get; }\n    return:\n      type: System.IO.TextWriter\n      description: A <xref:System.IO.TextWriter> that represents the standard error output stream.\n  overload: System.Console.Error*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.ForegroundColor\n  id: ForegroundColor\n  parent: System.Console\n  langs:\n  - csharp\n  name: ForegroundColor\n  nameWithType: Console.ForegroundColor\n  fullName: System.Console.ForegroundColor\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the foreground color of the console.\n  remarks: A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor>.\n  example:\n  - \"The following example checks whether the console's background color is black and, if it is, it changes the background color to red and the foreground color to black.  \\n  \\n [!code-cs[System.ConsoleColor#2](~/add/codesnippet/csharp/p-system.console.foregro_1.cs)]\\n [!code-vb[System.ConsoleColor#2](~/add/codesnippet/visualbasic/p-system.console.foregro_1.vb)]  \\n  \\n The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and ForegroundColor properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \\n  \\n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.foregro_2.vb)]\\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.foregro_2.cs)]\"\n  syntax:\n    content: public static ConsoleColor ForegroundColor { get; set; }\n    return:\n      type: System.ConsoleColor\n      description: A <xref href=\"System.ConsoleColor\"></xref> that specifies the foreground color of the console; that is, the color of each character that is displayed. The default is gray.\n  overload: System.Console.ForegroundColor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The color specified in a set operation is not a valid member of <xref href=\"System.ConsoleColor\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.In\n  id: In\n  parent: System.Console\n  langs:\n  - csharp\n  name: In\n  nameWithType: Console.In\n  fullName: System.Console.In\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the standard input stream.\n  remarks: \"This property is set to the standard input stream by default. This property can be set to another stream with the <xref:System.Console.SetIn%2A> method.  \\n  \\n Read operations on the standard input stream execute synchronously. That is, they block until the specified read operation has completed. This is true even if an asynchronous method, such as <xref:System.IO.TextReader.ReadLineAsync%2A>, is called on the <xref:System.IO.TextReader> object returned by the In property.\"\n  example:\n  - \"The following sample illustrates the use of the `In` property.  \\n  \\n [!code-cpp[consolein#1](~/add/codesnippet/cpp/p-system.console.in_1.cpp)]\\n [!code-cs[consolein#1](~/add/codesnippet/csharp/p-system.console.in_1.cs)]\\n [!code-vb[consolein#1](~/add/codesnippet/visualbasic/p-system.console.in_1.vb)]\"\n  syntax:\n    content: public static System.IO.TextReader In { get; }\n    return:\n      type: System.IO.TextReader\n      description: A <xref:System.IO.TextReader> that represents the standard input stream.\n  overload: System.Console.In*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.InputEncoding\n  id: InputEncoding\n  parent: System.Console\n  langs:\n  - csharp\n  name: InputEncoding\n  nameWithType: Console.InputEncoding\n  fullName: System.Console.InputEncoding\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the encoding the console uses to read input.\n  remarks: \"The console uses the input encoding to translate keyboard input into a corresponding character. The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters. Different code pages include different special characters, typically customized for a language or a group of languages.  \\n  \\n Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current input encoding. This can occur if the value of the InputEncoding property is modified by some means other than an assignment to the InputEncoding property, such as calling the Windows `SetConsoleCP` function or using the `chcp` command from a PowerShell script.\"\n  syntax:\n    content: public static System.Text.Encoding InputEncoding { get; set; }\n    return:\n      type: System.Text.Encoding\n      description: The encoding used to read console input.\n  overload: System.Console.InputEncoding*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The property value in a set operation is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An error occurred during the execution of this operation.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Your application does not have permission to perform this operation.\n  platform:\n  - net462\n- uid: System.Console.IsErrorRedirected\n  id: IsErrorRedirected\n  parent: System.Console\n  langs:\n  - csharp\n  name: IsErrorRedirected\n  nameWithType: Console.IsErrorRedirected\n  fullName: System.Console.IsErrorRedirected\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a value that indicates whether the error output stream has been redirected from the standard error stream.\n  syntax:\n    content: public static bool IsErrorRedirected { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if error output is redirected; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Console.IsErrorRedirected*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.IsInputRedirected\n  id: IsInputRedirected\n  parent: System.Console\n  langs:\n  - csharp\n  name: IsInputRedirected\n  nameWithType: Console.IsInputRedirected\n  fullName: System.Console.IsInputRedirected\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a value that indicates whether input has been redirected from the standard input stream.\n  syntax:\n    content: public static bool IsInputRedirected { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if input is redirected; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Console.IsInputRedirected*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.IsOutputRedirected\n  id: IsOutputRedirected\n  parent: System.Console\n  langs:\n  - csharp\n  name: IsOutputRedirected\n  nameWithType: Console.IsOutputRedirected\n  fullName: System.Console.IsOutputRedirected\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a value that indicates whether output has been redirected from the standard output stream.\n  syntax:\n    content: public static bool IsOutputRedirected { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if output is redirected; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Console.IsOutputRedirected*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.KeyAvailable\n  id: KeyAvailable\n  parent: System.Console\n  langs:\n  - csharp\n  name: KeyAvailable\n  nameWithType: Console.KeyAvailable\n  fullName: System.Console.KeyAvailable\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a value indicating whether a key press is available in the input stream.\n  remarks: \"The property value is returned immediately; that is, the KeyAvailable property does not block input until a key press is available.  \\n  \\n Use the KeyAvailable property in conjunction with only the <xref:System.Console.ReadKey%2A> method, not the <xref:System.Console.Read%2A> or <xref:System.Console.ReadLine%2A> methods.\"\n  example:\n  - \"The following example demonstrates how to use the KeyAvailable property to create a loop that runs until a key is pressed.  \\n  \\n [!code-cs[console.keyavailable#1](~/add/codesnippet/csharp/p-system.console.keyavai_1.cs)]\\n [!code-cpp[console.keyavailable#1](~/add/codesnippet/cpp/p-system.console.keyavai_1.cpp)]\\n [!code-vb[console.keyavailable#1](~/add/codesnippet/visualbasic/p-system.console.keyavai_1.vb)]\"\n  syntax:\n    content: public static bool KeyAvailable { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a key press is available; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Console.KeyAvailable*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Standard input is redirected to a file instead of the keyboard.\n  platform:\n  - net462\n- uid: System.Console.LargestWindowHeight\n  id: LargestWindowHeight\n  parent: System.Console\n  langs:\n  - csharp\n  name: LargestWindowHeight\n  nameWithType: Console.LargestWindowHeight\n  fullName: System.Console.LargestWindowHeight\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the largest possible number of console window rows, based on the current font and screen resolution.\n  syntax:\n    content: public static int LargestWindowHeight { get; }\n    return:\n      type: System.Int32\n      description: The height of the largest possible console window measured in rows.\n  overload: System.Console.LargestWindowHeight*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.LargestWindowWidth\n  id: LargestWindowWidth\n  parent: System.Console\n  langs:\n  - csharp\n  name: LargestWindowWidth\n  nameWithType: Console.LargestWindowWidth\n  fullName: System.Console.LargestWindowWidth\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the largest possible number of console window columns, based on the current font and screen resolution.\n  syntax:\n    content: public static int LargestWindowWidth { get; }\n    return:\n      type: System.Int32\n      description: The width of the largest possible console window measured in columns.\n  overload: System.Console.LargestWindowWidth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Copies a specified source area of the screen buffer to a specified destination area.\n  remarks: \"If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.  \\n  \\n The MoveBufferArea method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors. Otherwise, the intersected portion of the source area is not filled.\"\n  syntax:\n    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);\n    parameters:\n    - id: sourceLeft\n      type: System.Int32\n      description: The leftmost column of the source area.\n    - id: sourceTop\n      type: System.Int32\n      description: The topmost row of the source area.\n    - id: sourceWidth\n      type: System.Int32\n      description: The number of columns in the source area.\n    - id: sourceHeight\n      type: System.Int32\n      description: The number of rows in the source area.\n    - id: targetLeft\n      type: System.Int32\n      description: The leftmost column of the destination area.\n    - id: targetTop\n      type: System.Int32\n      description: The topmost row of the destination area.\n  overload: System.Console.MoveBufferArea*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"One or more of the parameters is less than zero.  \\n  \\n -or-  \\n  \\n <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <xref:System.Console.BufferWidth*>.  \\n  \\n -or-  \\n  \\n <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <xref:System.Console.BufferHeight*>.  \\n  \\n -or-  \\n  \\n <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <xref:System.Console.BufferHeight*>.  \\n  \\n -or-  \\n  \\n <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <xref:System.Console.BufferWidth*>.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)\n  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)\n  parent: System.Console\n  langs:\n  - csharp\n  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)\n  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)\n  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Copies a specified source area of the screen buffer to a specified destination area.\n  remarks: \"If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.  \\n  \\n The <xref:System.Console.MoveBufferArea%2A> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with the character specified by `sourceChar`, using the colors specified by `sourceForeColor` and `sourceBackColor`. Otherwise, the intersected portion of the source area is not filled.  \\n  \\n The <xref:System.Console.MoveBufferArea%2A> method performs no operation if `sourceWidth` or `sourceHeight` is zero.\"\n  syntax:\n    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);\n    parameters:\n    - id: sourceLeft\n      type: System.Int32\n      description: The leftmost column of the source area.\n    - id: sourceTop\n      type: System.Int32\n      description: The topmost row of the source area.\n    - id: sourceWidth\n      type: System.Int32\n      description: The number of columns in the source area.\n    - id: sourceHeight\n      type: System.Int32\n      description: The number of rows in the source area.\n    - id: targetLeft\n      type: System.Int32\n      description: The leftmost column of the destination area.\n    - id: targetTop\n      type: System.Int32\n      description: The topmost row of the destination area.\n    - id: sourceChar\n      type: System.Char\n      description: The character used to fill the source area.\n    - id: sourceForeColor\n      type: System.ConsoleColor\n      description: The foreground color used to fill the source area.\n    - id: sourceBackColor\n      type: System.ConsoleColor\n      description: The background color used to fill the source area.\n  overload: System.Console.MoveBufferArea*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"One or more of the parameters is less than zero.  \\n  \\n -or-  \\n  \\n <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <xref:System.Console.BufferWidth*>.  \\n  \\n -or-  \\n  \\n <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <xref:System.Console.BufferHeight*>.  \\n  \\n -or-  \\n  \\n <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <xref:System.Console.BufferHeight*>.  \\n  \\n -or-  \\n  \\n <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <xref:System.Console.BufferWidth*>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or both of the color parameters is not a member of the <xref href=\"System.ConsoleColor\"></xref> enumeration.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.NumberLock\n  id: NumberLock\n  parent: System.Console\n  langs:\n  - csharp\n  name: NumberLock\n  nameWithType: Console.NumberLock\n  fullName: System.Console.NumberLock\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.\n  syntax:\n    content: public static bool NumberLock { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if NUM LOCK is turned on; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if NUM LOCK is turned off.\n  overload: System.Console.NumberLock*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.OpenStandardError\n  id: OpenStandardError\n  parent: System.Console\n  langs:\n  - csharp\n  name: OpenStandardError()\n  nameWithType: Console.OpenStandardError()\n  fullName: System.Console.OpenStandardError()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Acquires the standard error stream.\n  remarks: This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method.\n  example:\n  - \"The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the OpenStandardError method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \\n  \\n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/m-system.console.opensta_4_1.cs)]\\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/m-system.console.opensta_4_1.vb)]  \\n  \\n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered.\"\n  syntax:\n    content: public static System.IO.Stream OpenStandardError ();\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: The standard error stream.\n  overload: System.Console.OpenStandardError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.OpenStandardError(System.Int32)\n  id: OpenStandardError(System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: OpenStandardError(Int32)\n  nameWithType: Console.OpenStandardError(Int32)\n  fullName: System.Console.OpenStandardError(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Acquires the standard error stream, which is set to a specified buffer size.\n  remarks: This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method.\n  syntax:\n    content: public static System.IO.Stream OpenStandardError (int bufferSize);\n    parameters:\n    - id: bufferSize\n      type: System.Int32\n      description: The internal stream buffer size.\n    return:\n      type: System.IO.Stream\n      description: The standard error stream.\n  overload: System.Console.OpenStandardError*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>bufferSize</code> is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.Console.OpenStandardInput\n  id: OpenStandardInput\n  parent: System.Console\n  langs:\n  - csharp\n  name: OpenStandardInput()\n  nameWithType: Console.OpenStandardInput()\n  fullName: System.Console.OpenStandardInput()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Acquires the standard input stream.\n  remarks: This method can be used to reacquire the standard input stream after it has been changed by the <xref:System.Console.SetIn%2A> method.\n  example:\n  - \"The following example illustrates the use of the `OpenStandardInput` property.  \\n  \\n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_3_1.cs)]\\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_3_1.vb)]\\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_3_1.cpp)]\"\n  syntax:\n    content: public static System.IO.Stream OpenStandardInput ();\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: The standard input stream.\n  overload: System.Console.OpenStandardInput*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.OpenStandardInput(System.Int32)\n  id: OpenStandardInput(System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: OpenStandardInput(Int32)\n  nameWithType: Console.OpenStandardInput(Int32)\n  fullName: System.Console.OpenStandardInput(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Acquires the standard input stream, which is set to a specified buffer size.\n  remarks: This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetIn%2A> method.\n  example:\n  - \"The following example illustrates the use of the `OpenStandardInput` property.  \\n  \\n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_2_1.cs)]\\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_2_1.vb)]\\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_2_1.cpp)]\"\n  syntax:\n    content: public static System.IO.Stream OpenStandardInput (int bufferSize);\n    parameters:\n    - id: bufferSize\n      type: System.Int32\n      description: The internal stream buffer size.\n    return:\n      type: System.IO.Stream\n      description: The standard input stream.\n  overload: System.Console.OpenStandardInput*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>bufferSize</code> is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.Console.OpenStandardOutput\n  id: OpenStandardOutput\n  parent: System.Console\n  langs:\n  - csharp\n  name: OpenStandardOutput()\n  nameWithType: Console.OpenStandardOutput()\n  fullName: System.Console.OpenStandardOutput()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Acquires the standard output stream.\n  remarks: This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method.\n  example:\n  - \"The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command-line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \\n  \\n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_0_1.cpp)]\\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_0_1.vb)]\\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_0_1.cs)]\"\n  syntax:\n    content: public static System.IO.Stream OpenStandardOutput ();\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: The standard output stream.\n  overload: System.Console.OpenStandardOutput*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.OpenStandardOutput(System.Int32)\n  id: OpenStandardOutput(System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: OpenStandardOutput(Int32)\n  nameWithType: Console.OpenStandardOutput(Int32)\n  fullName: System.Console.OpenStandardOutput(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Acquires the standard output stream, which is set to a specified buffer size.\n  remarks: This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method.\n  example:\n  - \"The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \\n  \\n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_1_1.cpp)]\\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_1_1.vb)]\\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_1_1.cs)]\"\n  syntax:\n    content: public static System.IO.Stream OpenStandardOutput (int bufferSize);\n    parameters:\n    - id: bufferSize\n      type: System.Int32\n      description: The internal stream buffer size.\n    return:\n      type: System.IO.Stream\n      description: The standard output stream.\n  overload: System.Console.OpenStandardOutput*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>bufferSize</code> is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.Console.Out\n  id: Out\n  parent: System.Console\n  langs:\n  - csharp\n  name: Out\n  nameWithType: Console.Out\n  fullName: System.Console.Out\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the standard output stream.\n  remarks: \"This property is set to the standard output stream by default. This property can be set to another stream with the <xref:System.Console.SetOut%2A> method.  \\n  \\n Note that calls to `Console.Out.WriteLine` methods are equivalent to calls to the corresponding <xref:System.Console.WriteLine%2A> methods.\"\n  example:\n  - \"The following example uses the Out property to display an array containing the names of files in the application's current directory to the standard output device. It then sets the standard output to a file named Files.txt and lists the array elements to the file. Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.  \\n  \\n [!code-cs[System.Console.Out#1](~/add/codesnippet/csharp/p-system.console.out_1.cs)]\\n [!code-vb[System.Console.Out#1](~/add/codesnippet/visualbasic/p-system.console.out_1.vb)]\"\n  syntax:\n    content: public static System.IO.TextWriter Out { get; }\n    return:\n      type: System.IO.TextWriter\n      description: A <xref:System.IO.TextWriter> that represents the standard output stream.\n  overload: System.Console.Out*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Console.OutputEncoding\n  id: OutputEncoding\n  parent: System.Console\n  langs:\n  - csharp\n  name: OutputEncoding\n  nameWithType: Console.OutputEncoding\n  fullName: System.Console.OutputEncoding\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the encoding the console uses to write output.\n  remarks: \"The console uses the output encoding to translate characters written by an application into corresponding console display characters. The default code page that the console uses is determined by the system locale.  \\n  \\n Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current output encoding. This can occur if the value of the OutputEncoding property is modified by some means other than an assignment to the OutputEncoding property, such as calling the Windows `SetConsoleOutputCP` function.\"\n  syntax:\n    content: public static System.Text.Encoding OutputEncoding { get; set; }\n    return:\n      type: System.Text.Encoding\n      description: The encoding used to write console output.\n  overload: System.Console.OutputEncoding*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The property value in a set operation is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An error occurred during the execution of this operation.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Your application does not have permission to perform this operation.\n  platform:\n  - net462\n- uid: System.Console.Read\n  id: Read\n  parent: System.Console\n  langs:\n  - csharp\n  name: Read()\n  nameWithType: Console.Read()\n  fullName: System.Console.Read()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Reads the next character from the standard input stream.\n  remarks: \"The Read method blocks its return while you type input characters; it terminates when you press the <xref:System.ConsoleKey> key. Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence). Subsequent calls to the Read method retrieve your input one character at a time. After the final character is retrieved, Read blocks its return again and the cycle repeats.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.Console.ReadLine%2A> method, or the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method are preferable to using the Read method.  \\n  \\n Note that the method does not return -1 unless you perform one of the following actions:  \\n  \\n-   Simultaneously press the <xref:System.ConsoleModifiers> modifier key and <xref:System.ConsoleKey> console key (Ctrl+Z), which signals the end-of-file condition.  \\n  \\n-   Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows.  \\n  \\n-   Redirect the input stream to a source, such as a text file, that has an actual end-of-file character.\"\n  example:\n  - \"The following example demonstrates the Read method.  \\n  \\n [!code-cpp[console.read#1](~/add/codesnippet/cpp/m-system.console.read_1.cpp)]\\n [!code-cs[console.read#1](~/add/codesnippet/csharp/m-system.console.read_1.cs)]\\n [!code-vb[console.read#1](~/add/codesnippet/visualbasic/m-system.console.read_1.vb)]\"\n  syntax:\n    content: public static int Read ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.\n  overload: System.Console.Read*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.ReadKey\n  id: ReadKey\n  parent: System.Console\n  langs:\n  - csharp\n  name: ReadKey()\n  nameWithType: Console.ReadKey()\n  fullName: System.Console.ReadKey()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.\n  remarks: \"The ReadKey method waits, that is, blocks on the thread issuing the ReadKey method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the ReadKey method to return.  \\n  \\n Depending on your application, you might want to use the ReadKey method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.  \\n  \\n The ReadKey method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.\"\n  example:\n  - \"One of the most common uses of the ReadKey method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app.  \\n  \\n [!code-cs[System.Console.ReadKey#1](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]\\n [!code-vb[System.Console.ReadKey#1](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]  \\n  \\n Note that this overload of the <xref:System.Console.ReadKey%2A> method by default echoes any displayable keys that the user presses to the console. To suppress them, call the  <xref:System.Console.ReadKey%2A> method with an `intercept` argument of `true`.  \\n  \\n The following example uses the ReadKey method to display information about which key the user pressed..  \\n  \\n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]\"\n  syntax:\n    content: public static ConsoleKeyInfo ReadKey ();\n    parameters: []\n    return:\n      type: System.ConsoleKeyInfo\n      description: An object that describes the <xref href=\"System.ConsoleKey\"></xref> constant and Unicode character, if any, that correspond to the pressed console key. The <xref href=\"System.ConsoleKeyInfo\"></xref> object also describes, in a bitwise combination of <xref href=\"System.ConsoleModifiers\"></xref> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.\n  overload: System.Console.ReadKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref:System.Console.In*> property is redirected from some stream other than the console.\n  platform:\n  - net462\n- uid: System.Console.ReadKey(System.Boolean)\n  id: ReadKey(System.Boolean)\n  parent: System.Console\n  langs:\n  - csharp\n  name: ReadKey(Boolean)\n  nameWithType: Console.ReadKey(Boolean)\n  fullName: System.Console.ReadKey(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.\n  remarks: \"The <xref:System.Console.ReadKey%2A> method waits, that is, blocks on the thread issuing the <xref:System.Console.ReadKey%2A> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the <xref:System.Console.ReadKey%2A> method to return.  \\n  \\n If the `intercept` parameter is `true`, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.  \\n  \\n Depending on your application, you might want to use the <xref:System.Console.ReadKey%2A> method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.  \\n  \\n The <xref:System.Console.ReadKey%2A> method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.\"\n  example:\n  - \"One of the most common uses of the <xref:System.Console.ReadKey%2A> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app. Note that, if the user presses any other key, it is not echoed to the console.  \\n  \\n [!code-vb[System.Console.ReadKey#2](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]\\n [!code-cs[System.Console.ReadKey#2](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]  \\n  \\n The following example uses the ReadKey method to display information about the key pressed by a user without echoing that key to the console.  \\n  \\n [!code-cs[console.readkey2#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\\n [!code-cpp[console.readkey2#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\\n [!code-vb[console.readkey2#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]\"\n  syntax:\n    content: public static ConsoleKeyInfo ReadKey (bool intercept);\n    parameters:\n    - id: intercept\n      type: System.Boolean\n      description: Determines whether to display the pressed key in the console window. <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to not display the pressed key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.ConsoleKeyInfo\n      description: An object that describes the <xref href=\"System.ConsoleKey\"></xref> constant and Unicode character, if any, that correspond to the pressed console key. The <xref href=\"System.ConsoleKeyInfo\"></xref> object also describes, in a bitwise combination of <xref href=\"System.ConsoleModifiers\"></xref> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.\n  overload: System.Console.ReadKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref:System.Console.In*> property is redirected from some stream other than the console.\n  platform:\n  - net462\n- uid: System.Console.ReadLine\n  id: ReadLine\n  parent: System.Console\n  langs:\n  - csharp\n  name: ReadLine()\n  nameWithType: Console.ReadLine()\n  fullName: System.Console.ReadLine()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Reads the next line of characters from the standard input stream.\n  remarks: \"The ReadLine method reads a line from the standard input stream. (For the definition of a line, see the paragraph after the following list.) This means that:  \\n  \\n-   If the standard input device is the keyboard, the ReadLine method blocks until the user presses the **Enter** key.  \\n  \\n     One of the most common uses of the ReadLine method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application. The following example illustrates this.  \\n  \\n     [!code-cpp[System.Console.ReadLine#6](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)]\\n     [!code-vb[System.Console.ReadLine#6](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)]\\n     [!code-cs[System.Console.ReadLine#6](~/add/codesnippet/csharp/m-system.console.readline_1.cs)]  \\n  \\n-   If standard input is redirected to a file, the ReadLine method reads a line of text from a file. For example, the following is a text file named ReadLine1.txt:  \\n  \\n    ```  \\n  \\n    This is the first line.  \\n    This is the second line.  \\n    This is the third line.  \\n    This is the fourth line.  \\n  \\n    ```  \\n  \\n     The following example uses the ReadLine method to read input that is redirected from a file. The read operation terminates when the  method returns `null`, which indicates that no lines remain to be read.  \\n  \\n     [!code-cs[System.Console.ReadLine#3](~/add/codesnippet/csharp/m-system.console.readline_2.cs)]\\n     [!code-vb[System.Console.ReadLine#3](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb)]  \\n  \\n     After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax  \\n  \\n    ```  \\n    ReadLine1 < ReadLine1.txt  \\n    ```  \\n  \\n     to read the contents of the file and display them to the console.  \\n  \\n A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property. The returned string does not contain the terminating character(s). By default, the method reads input from a 256-character input buffer. Because this includes the <xref:System.Environment.NewLine%2A?displayProperty=fullName> character(s), the method can read lines that contain up to 254 characters. To read longer lines, call the <xref:System.Console.OpenStandardInput%28System.Int32%29> method.  \\n  \\n The ReadLine method executes synchronously. That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed. The <xref:System.Console.In%2A> property returns a <xref:System.IO.TextReader> object that represents the standard input stream and that has both a synchronous <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method and an asynchronous <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> method. However, when used as the console's standard input stream, the <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> executes synchronously rather than asynchronously and returns a `Task<String>` only after the read operation has completed.  \\n  \\n If this method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> object is advanced by the number of characters the method was able to read, but the characters already read into the internal ReadLine buffer are discarded. Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.TextReader>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized. To avoid such a situation and to produce robust code, you should use the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method and store the read characters in a pre-allocated buffer.  \\n  \\n If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns `null`. This enables the user to prevent further keyboard input when the ReadLine method is called in a loop. The following example illustrates this scenario.  \\n  \\n [!code-cpp[System.Console.ReadLine#1](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)]\\n [!code-cs[System.Console.ReadLine#1](~/add/codesnippet/csharp/m-system.console.readline_3.cs)]\\n [!code-vb[System.Console.ReadLine#1](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)]\"\n  example:\n  - \"The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to. It opens the existing text file and redirects the standard input from the keyboard to that file. It also redirects the standard output from the console to the output file. It then uses the ReadLine method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method to write the result to the output file.  \\n  \\n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.readline_4.cpp)]\\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.readline_4.vb)]\\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.readline_4.cs)]\"\n  syntax:\n    content: public static string ReadLine ();\n    parameters: []\n    return:\n      type: System.String\n      description: The next line of characters from the input stream, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no more lines are available.\n  overload: System.Console.ReadLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to allocate a buffer for the returned string.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The number of characters in the next line of characters is greater than &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Console.ResetColor\n  id: ResetColor\n  parent: System.Console\n  langs:\n  - csharp\n  name: ResetColor()\n  nameWithType: Console.ResetColor()\n  fullName: System.Console.ResetColor()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the foreground and background console colors to their defaults.\n  remarks: The foreground and background colors are restored to the colors that existed when the current process began. For more information, see the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties.\n  example:\n  - \"The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the ResetColor method to restore the original console colors.  \\n  \\n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/m-system.console.resetco_1.vb)]\\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/m-system.console.resetco_1.cs)]\"\n  syntax:\n    content: public static void ResetColor ();\n    parameters: []\n  overload: System.Console.ResetColor*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.SetBufferSize(System.Int32,System.Int32)\n  id: SetBufferSize(System.Int32,System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: SetBufferSize(Int32,Int32)\n  nameWithType: Console.SetBufferSize(Int32,Int32)\n  fullName: System.Console.SetBufferSize(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the height and width of the screen buffer area to the specified values.\n  remarks: ''\n  example:\n  - \"The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, SetBufferSize, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \\n  \\n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setbuff_1.cpp)]\\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setbuff_1.vb)]\\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setbuff_1.cs)]\"\n  syntax:\n    content: public static void SetBufferSize (int width, int height);\n    parameters:\n    - id: width\n      type: System.Int32\n      description: The width of the buffer area measured in columns.\n    - id: height\n      type: System.Int32\n      description: The height of the buffer area measured in rows.\n  overload: System.Console.SetBufferSize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>height</code> or <code>width</code> is less than or equal to zero.  \\n  \\n -or-  \\n  \\n <code>height</code> or <code>width</code> is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n <code>width</code> is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>.  \\n  \\n -or-  \\n  \\n <code>height</code> is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)\n  id: SetCursorPosition(System.Int32,System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: SetCursorPosition(Int32,Int32)\n  nameWithType: Console.SetCursorPosition(Int32,Int32)\n  fullName: System.Console.SetCursorPosition(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the position of the cursor.\n  remarks: \"Use the SetCursorPosition method to specify where the next write operation in the console window is to begin. If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.  \\n  \\n The cursor automatically moves to the next character position each time a character is written to the console window. If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible. If you want to write a character to the bottom right character position without causing the console window to scroll, use the <xref:System.Console.MoveBufferArea%2A> method to move a character to that position.\"\n  example:\n  - \"This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the SetCursorPosition and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \\\"+\\\", \\\"&#124;\\\", and \\\"-\\\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \\n  \\n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.setcurs_1.cs)]\\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.setcurs_1.cpp)]\\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.setcurs_1.vb)]\"\n  syntax:\n    content: public static void SetCursorPosition (int left, int top);\n    parameters:\n    - id: left\n      type: System.Int32\n      description: The column position of the cursor. Columns are numbered from left to right starting at 0.\n    - id: top\n      type: System.Int32\n      description: The row position of the cursor. Rows are numbered from top to bottom starting at 0.\n  overload: System.Console.SetCursorPosition*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>left</code> or <code>top</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>left</code> is greater than or equal to <xref:System.Console.BufferWidth*>.  \\n  \\n -or-  \\n  \\n <code>top</code> is greater than or equal to <xref:System.Console.BufferHeight*>.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.SetError(System.IO.TextWriter)\n  id: SetError(System.IO.TextWriter)\n  parent: System.Console\n  langs:\n  - csharp\n  name: SetError(TextWriter)\n  nameWithType: Console.SetError(TextWriter)\n  fullName: System.Console.SetError(TextWriter)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the <xref:System.Console.Error*> property to the specified <xref:System.IO.TextWriter> object.\n  remarks: \"By default, the <xref:System.Console.Error%2A> property is set to the standard error output stream.  \\n  \\n A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send error messages to a file.\"\n  example:\n  - \"The following example shows how to redirect the standard error stream to a file.  \\n  \\n [!code-vb[System.Console.SetError#1](~/add/codesnippet/visualbasic/m-system.console.seterro_1.vb)]\\n [!code-cs[System.Console.SetError#1](~/add/codesnippet/csharp/m-system.console.seterro_1.cs)]\\n [!code-cpp[System.Console.SetError#1](~/add/codesnippet/cpp/m-system.console.seterro_1.cpp)]\"\n  syntax:\n    content: public static void SetError (System.IO.TextWriter newError);\n    parameters:\n    - id: newError\n      type: System.IO.TextWriter\n      description: A stream that is the new standard error output.\n  overload: System.Console.SetError*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>newError</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.Console.SetIn(System.IO.TextReader)\n  id: SetIn(System.IO.TextReader)\n  parent: System.Console\n  langs:\n  - csharp\n  name: SetIn(TextReader)\n  nameWithType: Console.SetIn(TextReader)\n  fullName: System.Console.SetIn(TextReader)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the <xref:System.Console.In*> property to the specified <xref:System.IO.TextReader> object.\n  remarks: \"By default, the <xref:System.Console.In%2A> property is set to the standard input stream.  \\n  \\n A <xref:System.IO.StreamReader> that encapsulates a <xref:System.IO.FileStream> can be used to receive input from a file.\"\n  example:\n  - \"The following example illustrates the use of the SetIn method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \\n  \\n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setin-s_1.cpp)]\\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setin-s_1.vb)]\\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setin-s_1.cs)]\"\n  syntax:\n    content: public static void SetIn (System.IO.TextReader newIn);\n    parameters:\n    - id: newIn\n      type: System.IO.TextReader\n      description: A stream that is the new standard input.\n  overload: System.Console.SetIn*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>newIn</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.Console.SetOut(System.IO.TextWriter)\n  id: SetOut(System.IO.TextWriter)\n  parent: System.Console\n  langs:\n  - csharp\n  name: SetOut(TextWriter)\n  nameWithType: Console.SetOut(TextWriter)\n  fullName: System.Console.SetOut(TextWriter)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the <xref:System.Console.Out*> property to the specified <xref:System.IO.TextWriter> object.\n  remarks: \"By default, the <xref:System.Console.Out%2A> property is set to the standard output stream.  \\n  \\n A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send output to a file. For example:  \\n  \\n [!code-cs[System.Console.SetOut#1](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)]\\n [!code-vb[System.Console.SetOut#1](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)]\\n [!code-cpp[System.Console.SetOut#1](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)]\"\n  example:\n  - \"The following example illustrates the use of the SetOut method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \\n  \\n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setout-_2.cpp)]\\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setout-_2.vb)]\\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setout-_2.cs)]\"\n  syntax:\n    content: public static void SetOut (System.IO.TextWriter newOut);\n    parameters:\n    - id: newOut\n      type: System.IO.TextWriter\n      description: A stream that is the new standard output.\n  overload: System.Console.SetOut*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>newOut</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)\n  id: SetWindowPosition(System.Int32,System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: SetWindowPosition(Int32,Int32)\n  nameWithType: Console.SetWindowPosition(Int32,Int32)\n  fullName: System.Console.SetWindowPosition(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the position of the console window relative to the screen buffer.\n  remarks: \"The operating system window displays the console window, and the console window displays a portion of the screen buffer. The SetWindowPosition method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.  \\n  \\n The console and operating system windows generally do not affect each other. However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window. In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the SetWindowPosition method affects the position of the operating system window scroll bars.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the SetWindowPosition, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \\n  \\n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setwind_0_1.cpp)]\\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setwind_0_1.vb)]\\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setwind_0_1.cs)]\"\n  syntax:\n    content: public static void SetWindowPosition (int left, int top);\n    parameters:\n    - id: left\n      type: System.Int32\n      description: The column position of the upper left  corner of the console window.\n    - id: top\n      type: System.Int32\n      description: The row position of the upper left corner of the console window.\n  overload: System.Console.SetWindowPosition*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>left</code> or <code>top</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>left</code> + <xref:System.Console.WindowWidth*> is greater than <xref:System.Console.BufferWidth*>.  \\n  \\n -or-  \\n  \\n <code>top</code> + <xref:System.Console.WindowHeight*> is greater than <xref:System.Console.BufferHeight*>.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.SetWindowSize(System.Int32,System.Int32)\n  id: SetWindowSize(System.Int32,System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: SetWindowSize(Int32,Int32)\n  nameWithType: Console.SetWindowSize(Int32,Int32)\n  fullName: System.Console.SetWindowSize(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the height and width of the console window to the specified values.\n  remarks: ''\n  example:\n  - \"This example demonstrates the SetWindowSize method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \\n  \\n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.  \\n  \\n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/m-system.console.setwind_1_1.cpp)]\\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/m-system.console.setwind_1_1.vb)]\\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/m-system.console.setwind_1_1.cs)]\"\n  syntax:\n    content: public static void SetWindowSize (int width, int height);\n    parameters:\n    - id: width\n      type: System.Int32\n      description: The width of the console window measured in columns.\n    - id: height\n      type: System.Int32\n      description: The height of the console window measured in rows.\n  overload: System.Console.SetWindowSize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>width</code> or <code>height</code> is less than or equal to zero.  \\n  \\n -or-  \\n  \\n <code>width</code> plus <xref:System.Console.WindowLeft*> or <code>height</code> plus <xref:System.Console.WindowTop*> is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n <code>width</code> or <code>height</code> is greater than the largest possible window width or height for the current screen resolution and console font.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have permission to perform this action.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Title\n  id: Title\n  parent: System.Console\n  langs:\n  - csharp\n  name: Title\n  nameWithType: Console.Title\n  fullName: System.Console.Title\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the title to display in the console title bar.\n  remarks: ''\n  example:\n  - \"This example demonstrates the Title property. The example displays the current title of the operating system window, waits for a key press, then displays a new title.  \\n  \\n [!code-cs[console.title#1](~/add/codesnippet/csharp/p-system.console.title_1.cs)]\\n [!code-cpp[console.title#1](~/add/codesnippet/cpp/p-system.console.title_1.cpp)]\\n [!code-vb[console.title#1](~/add/codesnippet/visualbasic/p-system.console.title_1.vb)]\"\n  syntax:\n    content: public static string Title { get; set; }\n    return:\n      type: System.String\n      description: The string to be displayed in the title bar of the console. The maximum length of the title string is 24500 characters.\n  overload: System.Console.Title*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In a get operation, the retrieved title is longer than 24500 characters.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: In a set operation, the specified title is longer than 24500 characters.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: In a set operation, the specified title is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.TreatControlCAsInput\n  id: TreatControlCAsInput\n  parent: System.Console\n  langs:\n  - csharp\n  name: TreatControlCAsInput\n  nameWithType: Console.TreatControlCAsInput\n  fullName: System.Console.TreatControlCAsInput\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a value indicating whether the combination of the <xref href=\"System.ConsoleModifiers\"></xref> modifier key and <xref href=\"System.ConsoleKey\"></xref> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.\n  remarks: \"If the value of the TreatControlCAsInput property is `false` and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process. This is the default value.  \\n  \\n> [!CAUTION]\\n>  Use this property judiciously because setting it to `true` has such a dramatic effect. Most users expect Ctrl+C to terminate a console application. If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination.\"\n  example:\n  - \"The following example demonstrates the TreatControlCAsInput property.  \\n  \\n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/p-system.console.treatco_1.cs)]\\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/p-system.console.treatco_1.cpp)]\\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/p-system.console.treatco_1.vb)]\"\n  syntax:\n    content: public static bool TreatControlCAsInput { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if Ctrl+C is treated as ordinary input; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Console.TreatControlCAsInput*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Unable to get or set the input mode of the console input buffer.\n  platform:\n  - net462\n- uid: System.Console.WindowHeight\n  id: WindowHeight\n  parent: System.Console\n  langs:\n  - csharp\n  name: WindowHeight\n  nameWithType: Console.WindowHeight\n  fullName: System.Console.WindowHeight\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the height of the console window area.\n  remarks: Attempting to set the value of the WindowHeight property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception. To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.\n  example:\n  - \"This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and WindowHeight properties. You must run the example to see the full effect of changing the console window size.  \\n  \\n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \\n  \\n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windowh_1.cpp)]\\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windowh_1.vb)]\\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windowh_1.cs)]\"\n  syntax:\n    content: public static int WindowHeight { get; set; }\n    return:\n      type: System.Int32\n      description: The height of the console window measured in rows.\n  overload: System.Console.WindowHeight*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value of the <xref:System.Console.WindowWidth*> property or the value of the WindowHeight property is less than or equal to 0.  \\n  \\n -or-  \\n  \\n The value of the WindowHeight property plus the value of the <xref:System.Console.WindowTop*> property is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n The value of the <xref:System.Console.WindowWidth*> property or the value of the WindowHeight property is greater than the largest possible window width or height for the current screen resolution and console font.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Error reading or writing information.\n  platform:\n  - net462\n- uid: System.Console.WindowLeft\n  id: WindowLeft\n  parent: System.Console\n  langs:\n  - csharp\n  name: WindowLeft\n  nameWithType: Console.WindowLeft\n  fullName: System.Console.WindowLeft\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the leftmost position of the console window area relative to the screen buffer.\n  remarks: \"The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties. The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties. The WindowLeft property determines which column of the buffer area is displayed in the first column of the console window. The value of the WindowLeft property can range from 0 to <xref:System.Console.BufferWidth%2A> - <xref:System.Console.WindowWidth%2A>. Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>.  \\n  \\n When a console window first opens, the default value of the WindowLeft property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area. The default width of both the console window and the buffer area is 80 columns. This means that the WindowLeft property can be modified only if the console window is made narrower or the buffer area is made wider.  \\n  \\n Note that if the width of the buffer area exceeds the width of the console window, the value of the WindowLeft property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.  \\n  \\n Attempting to set the value of the WindowLeft property when output is redirected throws an <xref:System.IO.IOException> exception. To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.\"\n  example:\n  - \"The following example opens an 80-column console window and defines a buffer area that is 120 columns wide. It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key. In the former case, it decrements the value of the WindowLeft property by one if the result is a legal value. In the latter case, it increases the value of the WindowLeft property by one if the result would be legal. Note that the example does not have to handle an <xref:System.ArgumentOutOfRangeException>, because it checks that the value to be assigned to the WindowLeft property is not negative and does not cause the sum of the WindowLeft and <xref:System.Console.WindowWidth%2A> properties to exceed the <xref:System.Console.BufferWidth%2A> property value.  \\n  \\n [!code-vb[System.Console.WindowLeft#1](~/add/codesnippet/visualbasic/p-system.console.windowl_1.vb)]\\n [!code-cs[System.Console.WindowLeft#1](~/add/codesnippet/csharp/p-system.console.windowl_1.cs)]\\n [!code-cpp[System.Console.WindowLeft#1](~/add/codesnippet/cpp/p-system.console.windowl_1.cpp)]\"\n  syntax:\n    content: public static int WindowLeft { get; set; }\n    return:\n      type: System.Int32\n      description: The leftmost console window position measured in columns.\n  overload: System.Console.WindowLeft*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"In a set operation, the value to be assigned is less than zero.  \\n  \\n -or-  \\n  \\n As a result of the assignment, WindowLeft plus <xref:System.Console.WindowWidth*> would exceed <xref:System.Console.BufferWidth*>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Error reading or writing information.\n  platform:\n  - net462\n- uid: System.Console.WindowTop\n  id: WindowTop\n  parent: System.Console\n  langs:\n  - csharp\n  name: WindowTop\n  nameWithType: Console.WindowTop\n  fullName: System.Console.WindowTop\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the top position of the console window area relative to the screen buffer.\n  remarks: \"The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties. The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties. The WindowTop property determines which row of the buffer area is displayed in the first column of the console window. The value of the WindowTop property can range from 0 to <xref:System.Console.BufferHeight%2A> - <xref:System.Console.WindowHeight%2A>. Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>.  \\n  \\n Attempting to set the value of the WindowTop property when output is redirected throws an <xref:System.IO.IOException> exception. To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Console.WindowLeft%2A>, WindowTop, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \\n  \\n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/p-system.console.windowtop_1.cpp)]\\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/p-system.console.windowtop_1.vb)]\\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/p-system.console.windowtop_1.cs)]\"\n  syntax:\n    content: public static int WindowTop { get; set; }\n    return:\n      type: System.Int32\n      description: The uppermost console window position measured in rows.\n  overload: System.Console.WindowTop*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"In a set operation, the value to be assigned is less than zero.  \\n  \\n -or-  \\n  \\n As a result of the assignment, WindowTop plus <xref:System.Console.WindowHeight*> would exceed <xref:System.Console.BufferHeight*>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Error reading or writing information.\n  platform:\n  - net462\n- uid: System.Console.WindowWidth\n  id: WindowWidth\n  parent: System.Console\n  langs:\n  - csharp\n  name: WindowWidth\n  nameWithType: Console.WindowWidth\n  fullName: System.Console.WindowWidth\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the width of the console window.\n  remarks: Attempting to set the value of the WindowWidth property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception. To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.\n  example:\n  - \"This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the WindowWidth and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \\n  \\n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \\n  \\n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windoww_1.cpp)]\\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windoww_1.vb)]\\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windoww_1.cs)]\"\n  syntax:\n    content: public static int WindowWidth { get; set; }\n    return:\n      type: System.Int32\n      description: The width of the console window measured in columns.\n  overload: System.Console.WindowWidth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value of the WindowWidth property or the value of the <xref:System.Console.WindowHeight*> property is less than or equal to 0.  \\n  \\n -or-  \\n  \\n The value of the <xref:System.Console.WindowHeight*> property plus the value of the <xref:System.Console.WindowTop*> property is greater than or equal to &lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;.  \\n  \\n -or-  \\n  \\n The value of the WindowWidth property or the value of the <xref:System.Console.WindowHeight*> property is greater than the largest possible window width or height for the current screen resolution and console font.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Error reading or writing information.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Boolean)\n  id: Write(System.Boolean)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Boolean)\n  nameWithType: Console.Write(Boolean)\n  fullName: System.Console.Write(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified Boolean value to the standard output stream.\n  remarks: The text representation of `value` is produced by calling <xref:System.Boolean.ToString%2A?displayProperty=fullName>, which outputs either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_8_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_8_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_8_1.cpp)]\"\n  syntax:\n    content: public static void Write (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Char)\n  id: Write(System.Char)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Char)\n  nameWithType: Console.Write(Char)\n  fullName: System.Console.Write(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the specified Unicode character value to the standard output stream.\n  remarks: ''\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_9_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_9_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_9_1.cpp)]\"\n  syntax:\n    content: public static void Write (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Char[])\n  id: Write(System.Char[])\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Char[])\n  nameWithType: Console.Write(Char[])\n  fullName: System.Console.Write(Char[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the specified array of Unicode characters to the standard output stream.\n  syntax:\n    content: public static void Write (char[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: A Unicode character array.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Decimal)\n  id: Write(System.Decimal)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Decimal)\n  nameWithType: Console.Write(Decimal)\n  fullName: System.Console.Write(Decimal)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified <xref:System.Decimal> value to the standard output stream.\n  remarks: The text representation of `value` is produced by calling <xref:System.Decimal.ToString%2A?displayProperty=fullName>.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_12_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_12_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_12_1.cpp)]\"\n  syntax:\n    content: public static void Write (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Double)\n  id: Write(System.Double)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Double)\n  nameWithType: Console.Write(Double)\n  fullName: System.Console.Write(Double)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified double-precision floating-point value to the standard output stream.\n  remarks: The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_6_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_6_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_6_1.cpp)]\"\n  syntax:\n    content: public static void Write (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Int32)\n  id: Write(System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Int32)\n  nameWithType: Console.Write(Int32)\n  fullName: System.Console.Write(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified 32-bit signed integer value to the standard output stream.\n  remarks: The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_10_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_10_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_10_1.cpp)]\"\n  syntax:\n    content: public static void Write (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Int64)\n  id: Write(System.Int64)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Int64)\n  nameWithType: Console.Write(Int64)\n  fullName: System.Console.Write(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified 64-bit signed integer value to the standard output stream.\n  remarks: The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_0_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_0_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_0_1.cpp)]\"\n  syntax:\n    content: public static void Write (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Object)\n  nameWithType: Console.Write(Object)\n  fullName: System.Console.Write(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified object to the standard output stream.\n  remarks: If `value` is `null`, nothing is written and no exception is thrown. Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_3_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_3_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_3_1.cpp)]\"\n  syntax:\n    content: public static void Write (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to write, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Single)\n  id: Write(System.Single)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Single)\n  nameWithType: Console.Write(Single)\n  fullName: System.Console.Write(Single)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified single-precision floating-point value to the standard output stream.\n  remarks: The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_1_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_1_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_1_1.cpp)]\"\n  syntax:\n    content: public static void Write (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.String)\n  id: Write(System.String)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: Console.Write(String)\n  fullName: System.Console.Write(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the specified string value to the standard output stream.\n  remarks: If value is `null`, nothing is written to the standard output stream.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_5_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_5_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_5_1.cpp)]\"\n  syntax:\n    content: public static void Write (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.UInt32)\n  id: Write(System.UInt32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(UInt32)\n  nameWithType: Console.Write(UInt32)\n  fullName: System.Console.Write(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.\n  remarks: The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_7_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_7_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_7_1.cpp)]\"\n  syntax:\n    content: public static void Write (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.UInt64)\n  id: Write(System.UInt64)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(UInt64)\n  nameWithType: Console.Write(UInt64)\n  fullName: System.Console.Write(UInt64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.\n  remarks: The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method.\n  example:\n  - \"The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_4_1.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_4_1.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_4_1.cpp)]\"\n  syntax:\n    content: public static void Write (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The value to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.String,System.Object)\n  id: Write(System.String,System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(String,Object)\n  nameWithType: Console.Write(String,Object)\n  fullName: System.Console.Write(String,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified object to the standard output stream using the specified format information.\n  remarks: \"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \\n  \\n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_2_1.cpp)]\\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_2_1.cs)]\\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_1.vb)]  \\n  \\n The following example illustrates the use of the Write method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_2.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_2_2.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_2_2.cpp)]\"\n  syntax:\n    content: public static void Write (string format, object arg0);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg0\n      type: System.Object\n      description: An object to write using `format`.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.Write(System.String,System.Object[])\n  id: Write(System.String,System.Object[])\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(String,Object[])\n  nameWithType: Console.Write(String,Object[])\n  fullName: System.Console.Write(String,Object[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified array of objects to the standard output stream using the specified format information.\n  remarks: \"This method uses the  [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The `arg` parameter is a parameter array. Arguments  can be passed to the method either as an array or as list of five or more items. The examples illustrate both forms of method call.\"\n  example:\n  - \"The following example defines a `Person` class with a number of properties that provide information about a person. Its `GetDescription` method returns an array that contains all of the property values except one. The example then uses the array returned by the  `GetDescription` method  to display the values of the Person object.  \\n  \\n [!code-cs[System.Console.Write#1](~/add/codesnippet/csharp/m-system.console.write-s_13_1.cs)]\\n [!code-vb[System.Console.Write#1](~/add/codesnippet/visualbasic/m-system.console.write-s_13_1.vb)]  \\n  \\n Note that the example calls the Write method rather than the [WriteLine(String, Object\\\\[\\\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method because it attempts to display the value of the `Person.Remarks` property on the same line. To do this, it examines the value of the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to determine whether there is enough space for the remark to fit.  If there is, it displays the line. If not, it writes a line, indents three spaces, and displays the remark.  \\n  \\n The following example is identical to the first, except that it supplies a five-item list as the `arg` argument instead of a parameter array.  \\n  \\n [!code-vb[System.Console.Write#2](~/add/codesnippet/visualbasic/m-system.console.write-s_13_2.vb)]\\n [!code-cs[System.Console.Write#2](~/add/codesnippet/csharp/m-system.console.write-s_13_2.cs)]\"\n  syntax:\n    content: public static void Write (string format, object[] arg);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg\n      type: System.Object[]\n      description: An array of objects to write using `format`.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> or <code>arg</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)\n  id: Write(System.Char[],System.Int32,System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(Char[],Int32,Int32)\n  nameWithType: Console.Write(Char[],Int32,Int32)\n  fullName: System.Console.Write(Char[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the specified subarray of Unicode characters to the standard output stream.\n  remarks: This method writes `count` characters starting at position `index` of `buffer` to the standard output stream.\n  syntax:\n    content: public static void Write (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: An array of Unicode characters.\n    - id: index\n      type: System.Int32\n      description: The starting position in `buffer`.\n    - id: count\n      type: System.Int32\n      description: The number of characters to write.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> plus <code>count</code> specify a position that is not within <code>buffer</code>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.Write(System.String,System.Object,System.Object)\n  id: Write(System.String,System.Object,System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(String,Object,Object)\n  nameWithType: Console.Write(String,Object,Object)\n  fullName: System.Console.Write(String,Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified objects to the standard output stream using the specified format information.\n  remarks: \"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \\n  \\n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_14_1.cpp)]\\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_14_1.cs)]\\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_1.vb)]  \\n  \\n The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_2.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_14_2.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_14_2.cpp)]\"\n  syntax:\n    content: public static void Write (string format, object arg0, object arg1);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg0\n      type: System.Object\n      description: The first object to write using `format`.\n    - id: arg1\n      type: System.Object\n      description: The second object to write using `format`.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)\n  id: Write(System.String,System.Object,System.Object,System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(String,Object,Object,Object)\n  nameWithType: Console.Write(String,Object,Object,Object)\n  fullName: System.Console.Write(String,Object,Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified objects to the standard output stream using the specified format information.\n  remarks: \"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \\n  \\n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_11_1.cpp)]\\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_11_1.cs)]\\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_1.vb)]  \\n  \\n The following example illustrates the use of the `Write` method.  \\n  \\n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_2.vb)]\\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_11_2.cs)]\\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_11_2.cpp)]\"\n  syntax:\n    content: public static void Write (string format, object arg0, object arg1, object arg2);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg0\n      type: System.Object\n      description: The first object to write using `format`.\n    - id: arg1\n      type: System.Object\n      description: The second object to write using `format`.\n    - id: arg2\n      type: System.Object\n      description: The third object to write using `format`.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)\n  id: Write(System.String,System.Object,System.Object,System.Object,System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: Write(String,Object,Object,Object,Object)\n  nameWithType: Console.Write(String,Object,Object,Object,Object)\n  fullName: System.Console.Write(String,Object,Object,Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.\n  remarks: \"> [!NOTE]\\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.Write(String, Object\\\\[\\\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.Write(String, Object\\\\[\\\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \\n  \\n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example illustrates the use of variable parameters with the Write method. The method is called with a composite format string and five format items.  \\n  \\n [!code-cpp[System.Console.Write#3](~/add/codesnippet/cpp/04cf3884-a7cc-4915-bdb2-_1.cpp)]\"\n  syntax:\n    content: public static void Write (string format, object arg0, object arg1, object arg2, object arg3);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg0\n      type: System.Object\n      description: The first object to write using `format`.\n    - id: arg1\n      type: System.Object\n      description: The second object to write using `format`.\n    - id: arg2\n      type: System.Object\n      description: The third object to write using `format`.\n    - id: arg3\n      type: System.Object\n      description: The fourth object to write using `format`.\n  overload: System.Console.Write*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.WriteLine\n  id: WriteLine\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine()\n  nameWithType: Console.WriteLine()\n  fullName: System.Console.WriteLine()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the current line terminator to the standard output stream.\n  remarks: The default line terminator is a string whose value is a carriage return followed by a line feed (\"\\r\\n\" in C#, or `vbCrLf` in Visual Basic). You can change the line terminator by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> property to another string. The example provides an illustration.\n  example:\n  - \"The example changes the line terminator from its default value of \\\"\\\\r\\\\n\\\" or `vbCrLf` to \\\"\\\\r\\\\n\\\\r\\\\n\\\" or `vbCrLf` + `vbCrLf`. It then calls the WriteLine and <xref:System.Console.WriteLine%28System.String%29> methods to display output to the console.  \\n  \\n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeline_1.cpp)]\\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeline_1.cs)]\\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeline_1.vb)]\"\n  syntax:\n    content: public static void WriteLine ();\n    parameters: []\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Boolean)\n  id: WriteLine(System.Boolean)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Boolean)\n  nameWithType: Console.WriteLine(Boolean)\n  fullName: System.Console.WriteLine(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.\n  remarks: \"The text representation of `value` is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=fullName> method.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example generates ten random integers and uses the WriteLine method to indicate whether they are even.  \\n  \\n [!code-cpp[System.Console.WriteLine#4](~/add/codesnippet/cpp/m-system.console.writeli_5_1.cpp)]\\n [!code-cs[System.Console.WriteLine#4](~/add/codesnippet/csharp/m-system.console.writeli_5_1.cs)]\\n [!code-vb[System.Console.WriteLine#4](~/add/codesnippet/visualbasic/m-system.console.writeli_5_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Char)\n  id: WriteLine(System.Char)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Char)\n  nameWithType: Console.WriteLine(Char)\n  fullName: System.Console.WriteLine(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.\n  remarks: For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\n  example:\n  - \"The following example is a tip calculator that calculates an 18% tip and uses the WriteLine method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_13_1.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_13_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Char[])\n  id: WriteLine(System.Char[])\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Char[])\n  nameWithType: Console.WriteLine(Char[])\n  fullName: System.Console.WriteLine(Char[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.\n  remarks: For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\n  syntax:\n    content: public static void WriteLine (char[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: A Unicode character array.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Decimal)\n  id: WriteLine(System.Decimal)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Decimal)\n  nameWithType: Console.WriteLine(Decimal)\n  fullName: System.Console.WriteLine(Decimal)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified <xref:System.Decimal> value, followed by the current line terminator, to the standard output stream.\n  remarks: \"The text representation of `value` is produced by calling the <xref:System.Decimal.ToString%2A?displayProperty=fullName> method.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_3_1.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_3_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Double)\n  id: WriteLine(System.Double)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Double)\n  nameWithType: Console.WriteLine(Double)\n  fullName: System.Console.WriteLine(Double)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.\n  remarks: \"The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_2_1.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_2_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Int32)\n  id: WriteLine(System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Int32)\n  nameWithType: Console.WriteLine(Int32)\n  fullName: System.Console.WriteLine(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.\n  remarks: \"The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=fullName> method.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_1_1.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_1_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Int64)\n  id: WriteLine(System.Int64)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Int64)\n  nameWithType: Console.WriteLine(Int64)\n  fullName: System.Console.WriteLine(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.\n  remarks: \"The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=fullName> method.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_10_1.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_10_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Object)\n  nameWithType: Console.WriteLine(Object)\n  fullName: System.Console.WriteLine(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.\n  remarks: \"If `value` is `null`, only the line terminator is written. Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example uses the WriteLine method to display each value in an object array to the console.  \\n  \\n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\\n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\\n [!code-cs[System.Console.WriteLine#3](~/add/codesnippet/csharp/m-system.console.writeli_6_1.cs)]\\n [!code-vb[System.Console.WriteLine#3](~/add/codesnippet/visualbasic/m-system.console.writeli_6_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Single)\n  id: WriteLine(System.Single)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Single)\n  nameWithType: Console.WriteLine(Single)\n  fullName: System.Console.WriteLine(Single)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.\n  remarks: \"The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=fullName> method.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_4_1.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_4_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: Console.WriteLine(String)\n  fullName: System.Console.WriteLine(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the specified string value, followed by the current line terminator, to the standard output stream.\n  remarks: \"If value is `null`, only the line terminator is written to the standard output stream.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine> method.\"\n  example:\n  - \"The example changes the line terminator from its default value of \\\"\\\\r\\\\n\\\" or `vbCrLf` to \\\"\\\\r\\\\n\\\\r\\\\n\\\" or `vbCrLf` + `vbCrLf`. It then calls the <xref:System.Console.WriteLine> and WriteLine methods to display output to the console.  \\n  \\n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeli_0_1.cpp)]\\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeli_0_1.cs)]\\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeli_0_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.UInt32)\n  id: WriteLine(System.UInt32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(UInt32)\n  nameWithType: Console.WriteLine(UInt32)\n  fullName: System.Console.WriteLine(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.\n  remarks: \"The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_8_1.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_8_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.UInt64)\n  id: WriteLine(System.UInt64)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(UInt64)\n  nameWithType: Console.WriteLine(UInt64)\n  fullName: System.Console.WriteLine(UInt64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.\n  remarks: \"The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=fullName> method.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_12_1.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_12_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The value to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.String,System.Object)\n  id: WriteLine(System.String,System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(String,Object)\n  nameWithType: Console.WriteLine(String,Object)\n  fullName: System.Console.WriteLine(String,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.\n  remarks: \"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example calls the WriteLine method to display five randomly generated <xref:System.Boolean> values.  \\n  \\n [!code-vb[System.Console.WriteLine#6](~/add/codesnippet/visualbasic/m-system.console.writeli_9_1.vb)]\\n [!code-cs[System.Console.WriteLine#6](~/add/codesnippet/csharp/m-system.console.writeli_9_1.cs)]  \\n  \\n The following example calls the WriteLine method to display the current date.   Note that the format item in the `format` argument uses the \\\"D\\\" [standard date and time format string](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) to display the date in the long date format of the current culture.  \\n  \\n [!code-vb[System.Console.WriteLine#7](~/add/codesnippet/visualbasic/m-system.console.writeli_9_2.vb)]\\n [!code-cs[System.Console.WriteLine#7](~/add/codesnippet/csharp/m-system.console.writeli_9_2.cs)]\"\n  syntax:\n    content: public static void WriteLine (string format, object arg0);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg0\n      type: System.Object\n      description: An object to write using `format`.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.String,System.Object[])\n  id: WriteLine(System.String,System.Object[])\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(String,Object[])\n  nameWithType: Console.WriteLine(String,Object[])\n  fullName: System.Console.WriteLine(String,Object[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.\n  remarks: \"This method uses the  [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \\n  \\n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_11_1.cpp)]\\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_11_1.cs)]\\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_1.vb)]  \\n  \\n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_11_2.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_2.vb)]\"\n  syntax:\n    content: public static void WriteLine (string format, object[] arg);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg\n      type: System.Object[]\n      description: An array of objects to write using `format`.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> or <code>arg</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)\n  id: WriteLine(System.Char[],System.Int32,System.Int32)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(Char[],Int32,Int32)\n  nameWithType: Console.WriteLine(Char[],Int32,Int32)\n  fullName: System.Console.WriteLine(Char[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.\n  remarks: \"This method writes `count` characters starting at position `index` of `buffer` to the standard output stream.  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  syntax:\n    content: public static void WriteLine (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: An array of Unicode characters.\n    - id: index\n      type: System.Int32\n      description: The starting position in `buffer`.\n    - id: count\n      type: System.Int32\n      description: The number of characters to write.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>index</code> plus <code>count</code> specify a position that is not within <code>buffer</code>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.String,System.Object,System.Object)\n  id: WriteLine(System.String,System.Object,System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(String,Object,Object)\n  nameWithType: Console.WriteLine(String,Object,Object)\n  fullName: System.Console.WriteLine(String,Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.\n  remarks: \"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \\n  \\n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_7_1.cpp)]\\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_7_1.cs)]\\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_1.vb)]  \\n  \\n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_7_2.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_2.vb)]\"\n  syntax:\n    content: public static void WriteLine (string format, object arg0, object arg1);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg0\n      type: System.Object\n      description: The first object to write using `format`.\n    - id: arg1\n      type: System.Object\n      description: The second object to write using `format`.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)\n  id: WriteLine(System.String,System.Object,System.Object,System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(String,Object,Object,Object)\n  nameWithType: Console.WriteLine(String,Object,Object,Object)\n  fullName: System.Console.WriteLine(String,Object,Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.\n  remarks: \"This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \\n  \\n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/ecdde448-c375-4488-93b7-_1.cpp)]\\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_1.cs)]\\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_1.vb)]  \\n  \\n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \\n  \\n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_2.cs)]\\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_2.vb)]\"\n  syntax:\n    content: public static void WriteLine (string format, object arg0, object arg1, object arg2);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg0\n      type: System.Object\n      description: The first object to write using `format`.\n    - id: arg1\n      type: System.Object\n      description: The second object to write using `format`.\n    - id: arg2\n      type: System.Object\n      description: The third object to write using `format`.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\n- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)\n  id: WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)\n  parent: System.Console\n  langs:\n  - csharp\n  name: WriteLine(String,Object,Object,Object,Object)\n  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)\n  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.\n  remarks: \"> [!NOTE]\\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.WriteLine(String, Object\\\\[\\\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.WriteLine(String, Object\\\\[\\\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \\n  \\n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \\n  \\n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \\n  \\n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.\"\n  example:\n  - \"The following example illustrates the use of variable arguments with the WriteLine method. The method is called with a composite format string and five format items.  \\n  \\n [!code-cpp[System.Console.WriteLine#5](~/add/codesnippet/cpp/b0d255a7-f5e0-4135-8d9b-_1.cpp)]\"\n  syntax:\n    content: public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string (see Remarks).\n    - id: arg0\n      type: System.Object\n      description: The first object to write using `format`.\n    - id: arg1\n      type: System.Object\n      description: The second object to write using `format`.\n    - id: arg2\n      type: System.Object\n      description: The third object to write using `format`.\n    - id: arg3\n      type: System.Object\n      description: The fourth object to write using `format`.\n  overload: System.Console.WriteLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The format specification in <code>format</code> is invalid.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.Security.HostProtectionException\n  parent: System.Security\n  isExternal: false\n  name: HostProtectionException\n  nameWithType: HostProtectionException\n  fullName: System.Security.HostProtectionException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.FormatException\n  isExternal: true\n  name: System.FormatException\n- uid: System.Console.BackgroundColor\n  parent: System.Console\n  isExternal: false\n  name: BackgroundColor\n  nameWithType: Console.BackgroundColor\n  fullName: System.Console.BackgroundColor\n- uid: System.ConsoleColor\n  parent: System\n  isExternal: false\n  name: ConsoleColor\n  nameWithType: ConsoleColor\n  fullName: System.ConsoleColor\n- uid: System.Console.Beep\n  parent: System.Console\n  isExternal: false\n  name: Beep()\n  nameWithType: Console.Beep()\n  fullName: System.Console.Beep()\n- uid: System.Console.Beep(System.Int32,System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: Beep(Int32,Int32)\n  nameWithType: Console.Beep(Int32,Int32)\n  fullName: System.Console.Beep(Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Console.BufferHeight\n  parent: System.Console\n  isExternal: false\n  name: BufferHeight\n  nameWithType: Console.BufferHeight\n  fullName: System.Console.BufferHeight\n- uid: System.Console.BufferWidth\n  parent: System.Console\n  isExternal: false\n  name: BufferWidth\n  nameWithType: Console.BufferWidth\n  fullName: System.Console.BufferWidth\n- uid: System.Console.CancelKeyPress\n  parent: System.Console\n  isExternal: false\n  name: CancelKeyPress\n  nameWithType: Console.CancelKeyPress\n  fullName: System.Console.CancelKeyPress\n- uid: System.ConsoleCancelEventHandler\n  parent: System\n  isExternal: false\n  name: ConsoleCancelEventHandler\n  nameWithType: ConsoleCancelEventHandler\n  fullName: System.ConsoleCancelEventHandler\n- uid: System.Console.CapsLock\n  parent: System.Console\n  isExternal: false\n  name: CapsLock\n  nameWithType: Console.CapsLock\n  fullName: System.Console.CapsLock\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Console.Clear\n  parent: System.Console\n  isExternal: false\n  name: Clear()\n  nameWithType: Console.Clear()\n  fullName: System.Console.Clear()\n- uid: System.Console.CursorLeft\n  parent: System.Console\n  isExternal: false\n  name: CursorLeft\n  nameWithType: Console.CursorLeft\n  fullName: System.Console.CursorLeft\n- uid: System.Console.CursorSize\n  parent: System.Console\n  isExternal: false\n  name: CursorSize\n  nameWithType: Console.CursorSize\n  fullName: System.Console.CursorSize\n- uid: System.Console.CursorTop\n  parent: System.Console\n  isExternal: false\n  name: CursorTop\n  nameWithType: Console.CursorTop\n  fullName: System.Console.CursorTop\n- uid: System.Console.CursorVisible\n  parent: System.Console\n  isExternal: false\n  name: CursorVisible\n  nameWithType: Console.CursorVisible\n  fullName: System.Console.CursorVisible\n- uid: System.Console.Error\n  parent: System.Console\n  isExternal: false\n  name: Error\n  nameWithType: Console.Error\n  fullName: System.Console.Error\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: true\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Console.ForegroundColor\n  parent: System.Console\n  isExternal: false\n  name: ForegroundColor\n  nameWithType: Console.ForegroundColor\n  fullName: System.Console.ForegroundColor\n- uid: System.Console.In\n  parent: System.Console\n  isExternal: false\n  name: In\n  nameWithType: Console.In\n  fullName: System.Console.In\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: true\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.Console.InputEncoding\n  parent: System.Console\n  isExternal: false\n  name: InputEncoding\n  nameWithType: Console.InputEncoding\n  fullName: System.Console.InputEncoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: true\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.Console.IsErrorRedirected\n  parent: System.Console\n  isExternal: false\n  name: IsErrorRedirected\n  nameWithType: Console.IsErrorRedirected\n  fullName: System.Console.IsErrorRedirected\n- uid: System.Console.IsInputRedirected\n  parent: System.Console\n  isExternal: false\n  name: IsInputRedirected\n  nameWithType: Console.IsInputRedirected\n  fullName: System.Console.IsInputRedirected\n- uid: System.Console.IsOutputRedirected\n  parent: System.Console\n  isExternal: false\n  name: IsOutputRedirected\n  nameWithType: Console.IsOutputRedirected\n  fullName: System.Console.IsOutputRedirected\n- uid: System.Console.KeyAvailable\n  parent: System.Console\n  isExternal: false\n  name: KeyAvailable\n  nameWithType: Console.KeyAvailable\n  fullName: System.Console.KeyAvailable\n- uid: System.Console.LargestWindowHeight\n  parent: System.Console\n  isExternal: false\n  name: LargestWindowHeight\n  nameWithType: Console.LargestWindowHeight\n  fullName: System.Console.LargestWindowHeight\n- uid: System.Console.LargestWindowWidth\n  parent: System.Console\n  isExternal: false\n  name: LargestWindowWidth\n  nameWithType: Console.LargestWindowWidth\n  fullName: System.Console.LargestWindowWidth\n- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)\n  parent: System.Console\n  isExternal: false\n  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)\n  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)\n  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Console.NumberLock\n  parent: System.Console\n  isExternal: false\n  name: NumberLock\n  nameWithType: Console.NumberLock\n  fullName: System.Console.NumberLock\n- uid: System.Console.OpenStandardError\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardError()\n  nameWithType: Console.OpenStandardError()\n  fullName: System.Console.OpenStandardError()\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Console.OpenStandardError(System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardError(Int32)\n  nameWithType: Console.OpenStandardError(Int32)\n  fullName: System.Console.OpenStandardError(Int32)\n- uid: System.Console.OpenStandardInput\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardInput()\n  nameWithType: Console.OpenStandardInput()\n  fullName: System.Console.OpenStandardInput()\n- uid: System.Console.OpenStandardInput(System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardInput(Int32)\n  nameWithType: Console.OpenStandardInput(Int32)\n  fullName: System.Console.OpenStandardInput(Int32)\n- uid: System.Console.OpenStandardOutput\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardOutput()\n  nameWithType: Console.OpenStandardOutput()\n  fullName: System.Console.OpenStandardOutput()\n- uid: System.Console.OpenStandardOutput(System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardOutput(Int32)\n  nameWithType: Console.OpenStandardOutput(Int32)\n  fullName: System.Console.OpenStandardOutput(Int32)\n- uid: System.Console.Out\n  parent: System.Console\n  isExternal: false\n  name: Out\n  nameWithType: Console.Out\n  fullName: System.Console.Out\n- uid: System.Console.OutputEncoding\n  parent: System.Console\n  isExternal: false\n  name: OutputEncoding\n  nameWithType: Console.OutputEncoding\n  fullName: System.Console.OutputEncoding\n- uid: System.Console.Read\n  parent: System.Console\n  isExternal: false\n  name: Read()\n  nameWithType: Console.Read()\n  fullName: System.Console.Read()\n- uid: System.Console.ReadKey\n  parent: System.Console\n  isExternal: false\n  name: ReadKey()\n  nameWithType: Console.ReadKey()\n  fullName: System.Console.ReadKey()\n- uid: System.ConsoleKeyInfo\n  parent: System\n  isExternal: false\n  name: ConsoleKeyInfo\n  nameWithType: ConsoleKeyInfo\n  fullName: System.ConsoleKeyInfo\n- uid: System.Console.ReadKey(System.Boolean)\n  parent: System.Console\n  isExternal: false\n  name: ReadKey(Boolean)\n  nameWithType: Console.ReadKey(Boolean)\n  fullName: System.Console.ReadKey(Boolean)\n- uid: System.Console.ReadLine\n  parent: System.Console\n  isExternal: false\n  name: ReadLine()\n  nameWithType: Console.ReadLine()\n  fullName: System.Console.ReadLine()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Console.ResetColor\n  parent: System.Console\n  isExternal: false\n  name: ResetColor()\n  nameWithType: Console.ResetColor()\n  fullName: System.Console.ResetColor()\n- uid: System.Console.SetBufferSize(System.Int32,System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: SetBufferSize(Int32,Int32)\n  nameWithType: Console.SetBufferSize(Int32,Int32)\n  fullName: System.Console.SetBufferSize(Int32,Int32)\n- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: SetCursorPosition(Int32,Int32)\n  nameWithType: Console.SetCursorPosition(Int32,Int32)\n  fullName: System.Console.SetCursorPosition(Int32,Int32)\n- uid: System.Console.SetError(System.IO.TextWriter)\n  parent: System.Console\n  isExternal: false\n  name: SetError(TextWriter)\n  nameWithType: Console.SetError(TextWriter)\n  fullName: System.Console.SetError(TextWriter)\n- uid: System.Console.SetIn(System.IO.TextReader)\n  parent: System.Console\n  isExternal: false\n  name: SetIn(TextReader)\n  nameWithType: Console.SetIn(TextReader)\n  fullName: System.Console.SetIn(TextReader)\n- uid: System.Console.SetOut(System.IO.TextWriter)\n  parent: System.Console\n  isExternal: false\n  name: SetOut(TextWriter)\n  nameWithType: Console.SetOut(TextWriter)\n  fullName: System.Console.SetOut(TextWriter)\n- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: SetWindowPosition(Int32,Int32)\n  nameWithType: Console.SetWindowPosition(Int32,Int32)\n  fullName: System.Console.SetWindowPosition(Int32,Int32)\n- uid: System.Console.SetWindowSize(System.Int32,System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: SetWindowSize(Int32,Int32)\n  nameWithType: Console.SetWindowSize(Int32,Int32)\n  fullName: System.Console.SetWindowSize(Int32,Int32)\n- uid: System.Console.Title\n  parent: System.Console\n  isExternal: false\n  name: Title\n  nameWithType: Console.Title\n  fullName: System.Console.Title\n- uid: System.Console.TreatControlCAsInput\n  parent: System.Console\n  isExternal: false\n  name: TreatControlCAsInput\n  nameWithType: Console.TreatControlCAsInput\n  fullName: System.Console.TreatControlCAsInput\n- uid: System.Console.WindowHeight\n  parent: System.Console\n  isExternal: false\n  name: WindowHeight\n  nameWithType: Console.WindowHeight\n  fullName: System.Console.WindowHeight\n- uid: System.Console.WindowLeft\n  parent: System.Console\n  isExternal: false\n  name: WindowLeft\n  nameWithType: Console.WindowLeft\n  fullName: System.Console.WindowLeft\n- uid: System.Console.WindowTop\n  parent: System.Console\n  isExternal: false\n  name: WindowTop\n  nameWithType: Console.WindowTop\n  fullName: System.Console.WindowTop\n- uid: System.Console.WindowWidth\n  parent: System.Console\n  isExternal: false\n  name: WindowWidth\n  nameWithType: Console.WindowWidth\n  fullName: System.Console.WindowWidth\n- uid: System.Console.Write(System.Boolean)\n  parent: System.Console\n  isExternal: false\n  name: Write(Boolean)\n  nameWithType: Console.Write(Boolean)\n  fullName: System.Console.Write(Boolean)\n- uid: System.Console.Write(System.Char)\n  parent: System.Console\n  isExternal: false\n  name: Write(Char)\n  nameWithType: Console.Write(Char)\n  fullName: System.Console.Write(Char)\n- uid: System.Console.Write(System.Char[])\n  parent: System.Console\n  isExternal: false\n  name: Write(Char[])\n  nameWithType: Console.Write(Char[])\n  fullName: System.Console.Write(Char[])\n- uid: System.Char[]\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: Char[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Console.Write(System.Decimal)\n  parent: System.Console\n  isExternal: false\n  name: Write(Decimal)\n  nameWithType: Console.Write(Decimal)\n  fullName: System.Console.Write(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: true\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Console.Write(System.Double)\n  parent: System.Console\n  isExternal: false\n  name: Write(Double)\n  nameWithType: Console.Write(Double)\n  fullName: System.Console.Write(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Console.Write(System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: Write(Int32)\n  nameWithType: Console.Write(Int32)\n  fullName: System.Console.Write(Int32)\n- uid: System.Console.Write(System.Int64)\n  parent: System.Console\n  isExternal: false\n  name: Write(Int64)\n  nameWithType: Console.Write(Int64)\n  fullName: System.Console.Write(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Console.Write(System.Object)\n  parent: System.Console\n  isExternal: false\n  name: Write(Object)\n  nameWithType: Console.Write(Object)\n  fullName: System.Console.Write(Object)\n- uid: System.Console.Write(System.Single)\n  parent: System.Console\n  isExternal: false\n  name: Write(Single)\n  nameWithType: Console.Write(Single)\n  fullName: System.Console.Write(Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Console.Write(System.String)\n  parent: System.Console\n  isExternal: false\n  name: Write(String)\n  nameWithType: Console.Write(String)\n  fullName: System.Console.Write(String)\n- uid: System.Console.Write(System.UInt32)\n  parent: System.Console\n  isExternal: false\n  name: Write(UInt32)\n  nameWithType: Console.Write(UInt32)\n  fullName: System.Console.Write(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: true\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Console.Write(System.UInt64)\n  parent: System.Console\n  isExternal: false\n  name: Write(UInt64)\n  nameWithType: Console.Write(UInt64)\n  fullName: System.Console.Write(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: true\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Console.Write(System.String,System.Object)\n  parent: System.Console\n  isExternal: false\n  name: Write(String,Object)\n  nameWithType: Console.Write(String,Object)\n  fullName: System.Console.Write(String,Object)\n- uid: System.Console.Write(System.String,System.Object[])\n  parent: System.Console\n  isExternal: false\n  name: Write(String,Object[])\n  nameWithType: Console.Write(String,Object[])\n  fullName: System.Console.Write(String,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: Write(Char[],Int32,Int32)\n  nameWithType: Console.Write(Char[],Int32,Int32)\n  fullName: System.Console.Write(Char[],Int32,Int32)\n- uid: System.Console.Write(System.String,System.Object,System.Object)\n  parent: System.Console\n  isExternal: false\n  name: Write(String,Object,Object)\n  nameWithType: Console.Write(String,Object,Object)\n  fullName: System.Console.Write(String,Object,Object)\n- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)\n  parent: System.Console\n  isExternal: false\n  name: Write(String,Object,Object,Object)\n  nameWithType: Console.Write(String,Object,Object,Object)\n  fullName: System.Console.Write(String,Object,Object,Object)\n- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)\n  parent: System.Console\n  isExternal: false\n  name: Write(String,Object,Object,Object,Object)\n  nameWithType: Console.Write(String,Object,Object,Object,Object)\n  fullName: System.Console.Write(String,Object,Object,Object,Object)\n- uid: System.Console.WriteLine\n  parent: System.Console\n  isExternal: false\n  name: WriteLine()\n  nameWithType: Console.WriteLine()\n  fullName: System.Console.WriteLine()\n- uid: System.Console.WriteLine(System.Boolean)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Boolean)\n  nameWithType: Console.WriteLine(Boolean)\n  fullName: System.Console.WriteLine(Boolean)\n- uid: System.Console.WriteLine(System.Char)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Char)\n  nameWithType: Console.WriteLine(Char)\n  fullName: System.Console.WriteLine(Char)\n- uid: System.Console.WriteLine(System.Char[])\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Char[])\n  nameWithType: Console.WriteLine(Char[])\n  fullName: System.Console.WriteLine(Char[])\n- uid: System.Console.WriteLine(System.Decimal)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Decimal)\n  nameWithType: Console.WriteLine(Decimal)\n  fullName: System.Console.WriteLine(Decimal)\n- uid: System.Console.WriteLine(System.Double)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Double)\n  nameWithType: Console.WriteLine(Double)\n  fullName: System.Console.WriteLine(Double)\n- uid: System.Console.WriteLine(System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Int32)\n  nameWithType: Console.WriteLine(Int32)\n  fullName: System.Console.WriteLine(Int32)\n- uid: System.Console.WriteLine(System.Int64)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Int64)\n  nameWithType: Console.WriteLine(Int64)\n  fullName: System.Console.WriteLine(Int64)\n- uid: System.Console.WriteLine(System.Object)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: Console.WriteLine(Object)\n  fullName: System.Console.WriteLine(Object)\n- uid: System.Console.WriteLine(System.Single)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Single)\n  nameWithType: Console.WriteLine(Single)\n  fullName: System.Console.WriteLine(Single)\n- uid: System.Console.WriteLine(System.String)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: Console.WriteLine(String)\n  fullName: System.Console.WriteLine(String)\n- uid: System.Console.WriteLine(System.UInt32)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(UInt32)\n  nameWithType: Console.WriteLine(UInt32)\n  fullName: System.Console.WriteLine(UInt32)\n- uid: System.Console.WriteLine(System.UInt64)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(UInt64)\n  nameWithType: Console.WriteLine(UInt64)\n  fullName: System.Console.WriteLine(UInt64)\n- uid: System.Console.WriteLine(System.String,System.Object)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(String,Object)\n  nameWithType: Console.WriteLine(String,Object)\n  fullName: System.Console.WriteLine(String,Object)\n- uid: System.Console.WriteLine(System.String,System.Object[])\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(String,Object[])\n  nameWithType: Console.WriteLine(String,Object[])\n  fullName: System.Console.WriteLine(String,Object[])\n- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(Char[],Int32,Int32)\n  nameWithType: Console.WriteLine(Char[],Int32,Int32)\n  fullName: System.Console.WriteLine(Char[],Int32,Int32)\n- uid: System.Console.WriteLine(System.String,System.Object,System.Object)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(String,Object,Object)\n  nameWithType: Console.WriteLine(String,Object,Object)\n  fullName: System.Console.WriteLine(String,Object,Object)\n- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(String,Object,Object,Object)\n  nameWithType: Console.WriteLine(String,Object,Object,Object)\n  fullName: System.Console.WriteLine(String,Object,Object,Object)\n- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)\n  parent: System.Console\n  isExternal: false\n  name: WriteLine(String,Object,Object,Object,Object)\n  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)\n  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)\n- uid: System.Console.BackgroundColor*\n  parent: System.Console\n  isExternal: false\n  name: BackgroundColor\n  nameWithType: Console.BackgroundColor\n- uid: System.Console.Beep*\n  parent: System.Console\n  isExternal: false\n  name: Beep\n  nameWithType: Console.Beep\n- uid: System.Console.BufferHeight*\n  parent: System.Console\n  isExternal: false\n  name: BufferHeight\n  nameWithType: Console.BufferHeight\n- uid: System.Console.BufferWidth*\n  parent: System.Console\n  isExternal: false\n  name: BufferWidth\n  nameWithType: Console.BufferWidth\n- uid: System.Console.CapsLock*\n  parent: System.Console\n  isExternal: false\n  name: CapsLock\n  nameWithType: Console.CapsLock\n- uid: System.Console.Clear*\n  parent: System.Console\n  isExternal: false\n  name: Clear\n  nameWithType: Console.Clear\n- uid: System.Console.CursorLeft*\n  parent: System.Console\n  isExternal: false\n  name: CursorLeft\n  nameWithType: Console.CursorLeft\n- uid: System.Console.CursorSize*\n  parent: System.Console\n  isExternal: false\n  name: CursorSize\n  nameWithType: Console.CursorSize\n- uid: System.Console.CursorTop*\n  parent: System.Console\n  isExternal: false\n  name: CursorTop\n  nameWithType: Console.CursorTop\n- uid: System.Console.CursorVisible*\n  parent: System.Console\n  isExternal: false\n  name: CursorVisible\n  nameWithType: Console.CursorVisible\n- uid: System.Console.Error*\n  parent: System.Console\n  isExternal: false\n  name: Error\n  nameWithType: Console.Error\n- uid: System.Console.ForegroundColor*\n  parent: System.Console\n  isExternal: false\n  name: ForegroundColor\n  nameWithType: Console.ForegroundColor\n- uid: System.Console.In*\n  parent: System.Console\n  isExternal: false\n  name: In\n  nameWithType: Console.In\n- uid: System.Console.InputEncoding*\n  parent: System.Console\n  isExternal: false\n  name: InputEncoding\n  nameWithType: Console.InputEncoding\n- uid: System.Console.IsErrorRedirected*\n  parent: System.Console\n  isExternal: false\n  name: IsErrorRedirected\n  nameWithType: Console.IsErrorRedirected\n- uid: System.Console.IsInputRedirected*\n  parent: System.Console\n  isExternal: false\n  name: IsInputRedirected\n  nameWithType: Console.IsInputRedirected\n- uid: System.Console.IsOutputRedirected*\n  parent: System.Console\n  isExternal: false\n  name: IsOutputRedirected\n  nameWithType: Console.IsOutputRedirected\n- uid: System.Console.KeyAvailable*\n  parent: System.Console\n  isExternal: false\n  name: KeyAvailable\n  nameWithType: Console.KeyAvailable\n- uid: System.Console.LargestWindowHeight*\n  parent: System.Console\n  isExternal: false\n  name: LargestWindowHeight\n  nameWithType: Console.LargestWindowHeight\n- uid: System.Console.LargestWindowWidth*\n  parent: System.Console\n  isExternal: false\n  name: LargestWindowWidth\n  nameWithType: Console.LargestWindowWidth\n- uid: System.Console.MoveBufferArea*\n  parent: System.Console\n  isExternal: false\n  name: MoveBufferArea\n  nameWithType: Console.MoveBufferArea\n- uid: System.Console.NumberLock*\n  parent: System.Console\n  isExternal: false\n  name: NumberLock\n  nameWithType: Console.NumberLock\n- uid: System.Console.OpenStandardError*\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardError\n  nameWithType: Console.OpenStandardError\n- uid: System.Console.OpenStandardInput*\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardInput\n  nameWithType: Console.OpenStandardInput\n- uid: System.Console.OpenStandardOutput*\n  parent: System.Console\n  isExternal: false\n  name: OpenStandardOutput\n  nameWithType: Console.OpenStandardOutput\n- uid: System.Console.Out*\n  parent: System.Console\n  isExternal: false\n  name: Out\n  nameWithType: Console.Out\n- uid: System.Console.OutputEncoding*\n  parent: System.Console\n  isExternal: false\n  name: OutputEncoding\n  nameWithType: Console.OutputEncoding\n- uid: System.Console.Read*\n  parent: System.Console\n  isExternal: false\n  name: Read\n  nameWithType: Console.Read\n- uid: System.Console.ReadKey*\n  parent: System.Console\n  isExternal: false\n  name: ReadKey\n  nameWithType: Console.ReadKey\n- uid: System.Console.ReadLine*\n  parent: System.Console\n  isExternal: false\n  name: ReadLine\n  nameWithType: Console.ReadLine\n- uid: System.Console.ResetColor*\n  parent: System.Console\n  isExternal: false\n  name: ResetColor\n  nameWithType: Console.ResetColor\n- uid: System.Console.SetBufferSize*\n  parent: System.Console\n  isExternal: false\n  name: SetBufferSize\n  nameWithType: Console.SetBufferSize\n- uid: System.Console.SetCursorPosition*\n  parent: System.Console\n  isExternal: false\n  name: SetCursorPosition\n  nameWithType: Console.SetCursorPosition\n- uid: System.Console.SetError*\n  parent: System.Console\n  isExternal: false\n  name: SetError\n  nameWithType: Console.SetError\n- uid: System.Console.SetIn*\n  parent: System.Console\n  isExternal: false\n  name: SetIn\n  nameWithType: Console.SetIn\n- uid: System.Console.SetOut*\n  parent: System.Console\n  isExternal: false\n  name: SetOut\n  nameWithType: Console.SetOut\n- uid: System.Console.SetWindowPosition*\n  parent: System.Console\n  isExternal: false\n  name: SetWindowPosition\n  nameWithType: Console.SetWindowPosition\n- uid: System.Console.SetWindowSize*\n  parent: System.Console\n  isExternal: false\n  name: SetWindowSize\n  nameWithType: Console.SetWindowSize\n- uid: System.Console.Title*\n  parent: System.Console\n  isExternal: false\n  name: Title\n  nameWithType: Console.Title\n- uid: System.Console.TreatControlCAsInput*\n  parent: System.Console\n  isExternal: false\n  name: TreatControlCAsInput\n  nameWithType: Console.TreatControlCAsInput\n- uid: System.Console.WindowHeight*\n  parent: System.Console\n  isExternal: false\n  name: WindowHeight\n  nameWithType: Console.WindowHeight\n- uid: System.Console.WindowLeft*\n  parent: System.Console\n  isExternal: false\n  name: WindowLeft\n  nameWithType: Console.WindowLeft\n- uid: System.Console.WindowTop*\n  parent: System.Console\n  isExternal: false\n  name: WindowTop\n  nameWithType: Console.WindowTop\n- uid: System.Console.WindowWidth*\n  parent: System.Console\n  isExternal: false\n  name: WindowWidth\n  nameWithType: Console.WindowWidth\n- uid: System.Console.Write*\n  parent: System.Console\n  isExternal: false\n  name: Write\n  nameWithType: Console.Write\n- uid: System.Console.WriteLine*\n  parent: System.Console\n  isExternal: false\n  name: WriteLine\n  nameWithType: Console.WriteLine\n"}