{"nodes":[{"pos":[471,557],"content":"Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.","pos":[0,86]}]},{"pos":[1452,1558],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptHandle\"></xref> class."},{"pos":[2140,2210],"content":"Releases a handle used by a Cryptography Next Generation (CNG) object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases a handle used by a Cryptography Next Generation (CNG) object.","pos":[0,70]}]},{"pos":[2353,2528],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the handle is released successfully; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is released successfully; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3075,3152],"content":"Releases a native handle used by a Cryptography Next Generation (CNG) object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases a native handle used by a Cryptography Next Generation (CNG) object.","pos":[0,77]}]},{"pos":[3301,3476],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the handle is released successfully; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is released successfully; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  id: SafeNCryptHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle\n  langs:\n  - csharp\n  name: SafeNCryptHandle\n  nameWithType: SafeNCryptHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  type: Class\n  summary: Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]\n\n      public abstract class SafeNCryptHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  implements: []\n  inheritedMembers:\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor\n  id: '#ctor'\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  langs:\n  - csharp\n  name: SafeNCryptHandle()\n  nameWithType: SafeNCryptHandle.SafeNCryptHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.SafeNCryptHandle()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptHandle\"></xref> class.\n  syntax:\n    content: protected SafeNCryptHandle ();\n    parameters: []\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeNCryptHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Releases a handle used by a Cryptography Next Generation (CNG) object.\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is released successfully; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle\n  id: ReleaseNativeHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  langs:\n  - csharp\n  name: ReleaseNativeHandle()\n  nameWithType: SafeNCryptHandle.ReleaseNativeHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Releases a native handle used by a Cryptography Next Generation (CNG) object.\n  syntax:\n    content: protected abstract bool ReleaseNativeHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is released successfully; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: SafeNCryptHandle()\n  nameWithType: SafeNCryptHandle.SafeNCryptHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.SafeNCryptHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeNCryptHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: ReleaseNativeHandle()\n  nameWithType: SafeNCryptHandle.ReleaseNativeHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: SafeNCryptHandle\n  nameWithType: SafeNCryptHandle.SafeNCryptHandle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeNCryptHandle.ReleaseHandle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: ReleaseNativeHandle\n  nameWithType: SafeNCryptHandle.ReleaseNativeHandle\n"}