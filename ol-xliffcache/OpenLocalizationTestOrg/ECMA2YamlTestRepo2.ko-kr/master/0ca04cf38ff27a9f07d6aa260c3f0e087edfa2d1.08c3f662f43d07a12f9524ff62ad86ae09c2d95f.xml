{"nodes":[{"pos":[838,931],"content":"Contains a list of access control entries, specifying access rights for one or more trustees.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains a list of access control entries, specifying access rights for one or more trustees.","pos":[0,93]}]},{"pos":[944,2588],"content":"Use the AccessControlList class to specify multiple trustees and access rights to add with a single call when setting permissions. Construct your access control list by adding an access control entry for each trustee and access rights combination.       A AccessControlList identifies the trustees that are allowed or denied access to a securable object. When a process tries to access a securable object, the system checks the access control entries in the object's access control list to determine whether to grant access to it. If the object does not have an access control list, the system grants full access to everything. If the object's access control list has no entries, the system denies all attempts to access the object.       The system checks the access control entries in sequence until it finds one or more that allow all the requested access rights or until any of the requested access rights are denied.       The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:      -   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.      -   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.      -   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the AccessControlList class to specify multiple trustees and access rights to add with a single call when setting permissions. Construct your access control list by adding an access control entry for each trustee and access rights combination.       A AccessControlList identifies the trustees that are allowed or denied access to a securable object. When a process tries to access a securable object, the system checks the access control entries in the object's access control list to determine whether to grant access to it. If the object does not have an access control list, the system grants full access to everything. If the object's access control list has no entries, the system denies all attempts to access the object.       The system checks the access control entries in sequence until it finds one or more that allow all the requested access rights or until any of the requested access rights are denied.       The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:      -   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.      -   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.      -   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","pos":[0,1632],"nodes":[{"content":"Use the AccessControlList class to specify multiple trustees and access rights to add with a single call when setting permissions.","pos":[0,130]},{"content":"Construct your access control list by adding an access control entry for each trustee and access rights combination.","pos":[131,247]},{"content":"A AccessControlList identifies the trustees that are allowed or denied access to a securable object.","pos":[254,354]},{"content":"When a process tries to access a securable object, the system checks the access control entries in the object's access control list to determine whether to grant access to it.","pos":[355,530]},{"content":"If the object does not have an access control list, the system grants full access to everything.","pos":[531,627]},{"content":"If the object's access control list has no entries, the system denies all attempts to access the object.","pos":[628,732]},{"content":"The system checks the access control entries in sequence until it finds one or more that allow all the requested access rights or until any of the requested access rights are denied.","pos":[739,921]},{"content":"The system examines each &lt;xref:System.Messaging.AccessControlEntry&gt; in sequence until one of the following events occurs:      -   An access-denied &lt;xref:System.Messaging.AccessControlEntry&gt; explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","pos":[928,1231],"source":"       The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:      -   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token."},{"content":"-   One or more access-allowed &lt;xref:System.Messaging.AccessControlEntry&gt; items for trustees listed in the thread's access token explicitly grant all the requested access rights.","pos":[1237,1415],"source":"      -   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights."},{"content":"-   All &lt;xref:System.Messaging.AccessControlEntry&gt; items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","pos":[1421,1632],"source":"      -   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied."}]}]},{"pos":[5118,5214],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.AccessControlList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Messaging.AccessControlList\"></xref> class."},{"pos":[5827,5886],"content":"Appends an access control entry to the access control list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Appends an access control entry to the access control list.","pos":[0,59]}]},{"pos":[6069,6176],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Messaging.AccessControlEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to append to the end of the access control list.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Messaging.AccessControlEntry\"></xref> to append to the end of the access control list."},{"pos":[6233,6299],"content":"The position into which the new access control entry was inserted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position into which the new access control entry was inserted.","pos":[0,66]}]},{"pos":[6468,6565],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">entry</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>entry</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7061,7145],"content":"Determines whether the access control list contains a specific access control entry.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the access control list contains a specific access control entry.","pos":[0,84]}]},{"pos":[7334,7432],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.AccessControlEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to locate in the access control list.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Messaging.AccessControlEntry\"></xref> to locate in the access control list."},{"pos":[7491,7691],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the access control entry is found in the access control list; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the access control entry is found in the access control list; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8305,8460],"content":"Copies the entire access control list to a compatible one-dimensional array of access control entries, starting at the specified index of the target array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the entire access control list to a compatible one-dimensional array of access control entries, starting at the specified index of the target array.","pos":[0,155]}]},{"pos":[8662,8833],"content":"An array of type <xref href=\"System.Messaging.AccessControlEntry\"></xref> to which the access control list entries will be copied. The array must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.Messaging.AccessControlEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to which the access control list entries will be copied.","pos":[0,130],"source":"An array of type <xref href=\"System.Messaging.AccessControlEntry\"></xref> to which the access control list entries will be copied."},{"content":"The array must have zero-based indexing.","pos":[131,171]}]},{"pos":[8894,8975],"content":"The index in the array at which to begin copying the access control list entries.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index in the array at which to begin copying the access control list entries.","pos":[0,81]}]},{"pos":[9147,9244],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>array</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9359,9410],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","needQuote":true,"needEscape":true,"source":"The <code>index</code> parameter is less than zero."},{"pos":[9506,9815],"content":"The <code>index</code> parameter is greater than or equal to the length of the <code>array</code> parameter.       -or-       The number of elements in the source access control list is greater than the available space from <code>index</code> to the end of the destination array of access control entries.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than or equal to the length of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[0,108],"source":"The <code>index</code> parameter is greater than or equal to the length of the <code>array</code> parameter."},{"content":"-or-       The number of elements in the source access control list is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination array of access control entries.","pos":[115,305],"source":"       -or-       The number of elements in the source access control list is greater than the available space from <code>index</code> to the end of the destination array of access control entries."}]},{"pos":[10307,10391],"content":"Determines the specific index of an access control entry in the access control list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines the specific index of an access control entry in the access control list.","pos":[0,84]}]},{"pos":[10578,10676],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.AccessControlEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to locate in the access control list.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Messaging.AccessControlEntry\"></xref> to locate in the access control list."},{"pos":[10733,10798],"content":"The index of the entry if it was found in the list; otherwise, -1","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the entry if it was found in the list; otherwise, -1","pos":[0,65]}]},{"pos":[11401,11488],"content":"Inserts an access control entry into the access control list at the specified position.","needQuote":true,"needEscape":true,"nodes":[{"content":"Inserts an access control entry into the access control list at the specified position.","pos":[0,87]}]},{"pos":[11500,11718],"content":"If the `index` parameter equals the number of items in the access control list, then the entry is appended to the end. Otherwise, the entries after the insertion point move down to accommodate the new item in the list.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the <ph id=\"ph1\">`index`</ph> parameter equals the number of items in the access control list, then the entry is appended to the end.","pos":[0,118],"source":"If the `index` parameter equals the number of items in the access control list, then the entry is appended to the end."},{"content":"Otherwise, the entries after the insertion point move down to accommodate the new item in the list.","pos":[119,218]}]},{"pos":[11893,11967],"content":"The zero-based index at which the access control entry should be inserted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index at which the access control entry should be inserted.","pos":[0,74]}]},{"pos":[12051,12149],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Messaging.AccessControlEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to insert into the access control list.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Messaging.AccessControlEntry\"></xref> to insert into the access control list."},{"pos":[12333,12415],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid index in this access control list.","needQuote":true,"needEscape":true,"source":"The <code>index</code> parameter is not a valid index in this access control list."},{"pos":[12518,12615],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">entry</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>entry</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13101,13194],"content":"Removes the first occurrence of a specific access control entry from the access control list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the first occurrence of a specific access control entry from the access control list.","pos":[0,93]}]},{"pos":[13206,13297],"content":"The access control entries that follow the removed item move up to occupy the vacated spot.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The access control entries that follow the removed item move up to occupy the vacated spot.","pos":[0,91]}]},{"pos":[13484,13584],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.AccessControlEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove from the access control list.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Messaging.AccessControlEntry\"></xref> to remove from the access control list."},{"pos":[13756,13853],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">entry</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>entry</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.AccessControlList\n  id: AccessControlList\n  children:\n  - System.Messaging.AccessControlList.#ctor\n  - System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)\n  - System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)\n  - System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)\n  - System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)\n  - System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)\n  - System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)\n  langs:\n  - csharp\n  name: AccessControlList\n  nameWithType: AccessControlList\n  fullName: System.Messaging.AccessControlList\n  type: Class\n  summary: Contains a list of access control entries, specifying access rights for one or more trustees.\n  remarks: \"Use the AccessControlList class to specify multiple trustees and access rights to add with a single call when setting permissions. Construct your access control list by adding an access control entry for each trustee and access rights combination.  \\n  \\n A AccessControlList identifies the trustees that are allowed or denied access to a securable object. When a process tries to access a securable object, the system checks the access control entries in the object's access control list to determine whether to grant access to it. If the object does not have an access control list, the system grants full access to everything. If the object's access control list has no entries, the system denies all attempts to access the object.  \\n  \\n The system checks the access control entries in sequence until it finds one or more that allow all the requested access rights or until any of the requested access rights are denied.  \\n  \\n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \\n  \\n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \\n  \\n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \\n  \\n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.\"\n  syntax:\n    content: 'public class AccessControlList : System.Collections.CollectionBase'\n  inheritance:\n  - System.Object\n  - System.Collections.CollectionBase\n  implements: []\n  inheritedMembers:\n  - System.Collections.CollectionBase.Capacity\n  - System.Collections.CollectionBase.Clear\n  - System.Collections.CollectionBase.Count\n  - System.Collections.CollectionBase.GetEnumerator\n  - System.Collections.CollectionBase.InnerList\n  - System.Collections.CollectionBase.List\n  - System.Collections.CollectionBase.OnClear\n  - System.Collections.CollectionBase.OnClearComplete\n  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  - System.Collections.CollectionBase.OnValidate(System.Object)\n  - System.Collections.CollectionBase.RemoveAt(System.Int32)\n  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot\n  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize\n  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly\n  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)\n  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)\n  platform:\n  - net462\n- uid: System.Messaging.AccessControlList.#ctor\n  id: '#ctor'\n  parent: System.Messaging.AccessControlList\n  langs:\n  - csharp\n  name: AccessControlList()\n  nameWithType: AccessControlList.AccessControlList()\n  fullName: System.Messaging.AccessControlList.AccessControlList()\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.AccessControlList\"></xref> class.\n  syntax:\n    content: public AccessControlList ();\n    parameters: []\n  overload: System.Messaging.AccessControlList.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)\n  id: Add(System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  langs:\n  - csharp\n  name: Add(AccessControlEntry)\n  nameWithType: AccessControlList.Add(AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.Add(AccessControlEntry)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Appends an access control entry to the access control list.\n  syntax:\n    content: public int Add (System.Messaging.AccessControlEntry entry);\n    parameters:\n    - id: entry\n      type: System.Messaging.AccessControlEntry\n      description: A <xref href=\"System.Messaging.AccessControlEntry\"></xref> to append to the end of the access control list.\n    return:\n      type: System.Int32\n      description: The position into which the new access control entry was inserted.\n  overload: System.Messaging.AccessControlList.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>entry</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)\n  id: Contains(System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  langs:\n  - csharp\n  name: Contains(AccessControlEntry)\n  nameWithType: AccessControlList.Contains(AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.Contains(AccessControlEntry)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Determines whether the access control list contains a specific access control entry.\n  syntax:\n    content: public bool Contains (System.Messaging.AccessControlEntry entry);\n    parameters:\n    - id: entry\n      type: System.Messaging.AccessControlEntry\n      description: The <xref href=\"System.Messaging.AccessControlEntry\"></xref> to locate in the access control list.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the access control entry is found in the access control list; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.AccessControlList.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)\n  id: CopyTo(System.Messaging.AccessControlEntry[],System.Int32)\n  parent: System.Messaging.AccessControlList\n  langs:\n  - csharp\n  name: CopyTo(AccessControlEntry[],Int32)\n  nameWithType: AccessControlList.CopyTo(AccessControlEntry[],Int32)\n  fullName: System.Messaging.AccessControlList.CopyTo(AccessControlEntry[],Int32)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Copies the entire access control list to a compatible one-dimensional array of access control entries, starting at the specified index of the target array.\n  syntax:\n    content: public void CopyTo (System.Messaging.AccessControlEntry[] array, int index);\n    parameters:\n    - id: array\n      type: System.Messaging.AccessControlEntry[]\n      description: An array of type <xref href=\"System.Messaging.AccessControlEntry\"></xref> to which the access control list entries will be copied. The array must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The index in the array at which to begin copying the access control list entries.\n  overload: System.Messaging.AccessControlList.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>array</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>index</code> parameter is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>index</code> parameter is greater than or equal to the length of the <code>array</code> parameter.  \\n  \\n -or-  \\n  \\n The number of elements in the source access control list is greater than the available space from <code>index</code> to the end of the destination array of access control entries.\"\n  platform:\n  - net462\n- uid: System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)\n  id: IndexOf(System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  langs:\n  - csharp\n  name: IndexOf(AccessControlEntry)\n  nameWithType: AccessControlList.IndexOf(AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.IndexOf(AccessControlEntry)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Determines the specific index of an access control entry in the access control list.\n  syntax:\n    content: public int IndexOf (System.Messaging.AccessControlEntry entry);\n    parameters:\n    - id: entry\n      type: System.Messaging.AccessControlEntry\n      description: The <xref href=\"System.Messaging.AccessControlEntry\"></xref> to locate in the access control list.\n    return:\n      type: System.Int32\n      description: The index of the entry if it was found in the list; otherwise, -1\n  overload: System.Messaging.AccessControlList.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)\n  id: Insert(System.Int32,System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  langs:\n  - csharp\n  name: Insert(Int32,AccessControlEntry)\n  nameWithType: AccessControlList.Insert(Int32,AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.Insert(Int32,AccessControlEntry)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Inserts an access control entry into the access control list at the specified position.\n  remarks: If the `index` parameter equals the number of items in the access control list, then the entry is appended to the end. Otherwise, the entries after the insertion point move down to accommodate the new item in the list.\n  syntax:\n    content: public void Insert (int index, System.Messaging.AccessControlEntry entry);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which the access control entry should be inserted.\n    - id: entry\n      type: System.Messaging.AccessControlEntry\n      description: A <xref href=\"System.Messaging.AccessControlEntry\"></xref> to insert into the access control list.\n  overload: System.Messaging.AccessControlList.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>index</code> parameter is not a valid index in this access control list.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>entry</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)\n  id: Remove(System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  langs:\n  - csharp\n  name: Remove(AccessControlEntry)\n  nameWithType: AccessControlList.Remove(AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.Remove(AccessControlEntry)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Removes the first occurrence of a specific access control entry from the access control list.\n  remarks: The access control entries that follow the removed item move up to occupy the vacated spot.\n  syntax:\n    content: public void Remove (System.Messaging.AccessControlEntry entry);\n    parameters:\n    - id: entry\n      type: System.Messaging.AccessControlEntry\n      description: The <xref href=\"System.Messaging.AccessControlEntry\"></xref> to remove from the access control list.\n  overload: System.Messaging.AccessControlList.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>entry</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Collections.CollectionBase\n  isExternal: false\n  name: System.Collections.CollectionBase\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Messaging.AccessControlList.#ctor\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: AccessControlList()\n  nameWithType: AccessControlList.AccessControlList()\n  fullName: System.Messaging.AccessControlList.AccessControlList()\n- uid: System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: Add(AccessControlEntry)\n  nameWithType: AccessControlList.Add(AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.Add(AccessControlEntry)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Messaging.AccessControlEntry\n  parent: System.Messaging\n  isExternal: false\n  name: AccessControlEntry\n  nameWithType: AccessControlEntry\n  fullName: System.Messaging.AccessControlEntry\n- uid: System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: Contains(AccessControlEntry)\n  nameWithType: AccessControlList.Contains(AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.Contains(AccessControlEntry)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: CopyTo(AccessControlEntry[],Int32)\n  nameWithType: AccessControlList.CopyTo(AccessControlEntry[],Int32)\n  fullName: System.Messaging.AccessControlList.CopyTo(AccessControlEntry[],Int32)\n- uid: System.Messaging.AccessControlEntry[]\n  parent: System.Messaging\n  isExternal: false\n  name: AccessControlEntry\n  nameWithType: AccessControlEntry\n  fullName: System.Messaging.AccessControlEntry[]\n  spec.csharp:\n  - uid: System.Messaging.AccessControlEntry\n    name: AccessControlEntry\n    nameWithType: AccessControlEntry\n    fullName: AccessControlEntry[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: IndexOf(AccessControlEntry)\n  nameWithType: AccessControlList.IndexOf(AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.IndexOf(AccessControlEntry)\n- uid: System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: Insert(Int32,AccessControlEntry)\n  nameWithType: AccessControlList.Insert(Int32,AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.Insert(Int32,AccessControlEntry)\n- uid: System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: Remove(AccessControlEntry)\n  nameWithType: AccessControlList.Remove(AccessControlEntry)\n  fullName: System.Messaging.AccessControlList.Remove(AccessControlEntry)\n- uid: System.Messaging.AccessControlList.#ctor*\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: AccessControlList\n  nameWithType: AccessControlList.AccessControlList\n- uid: System.Messaging.AccessControlList.Add*\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: Add\n  nameWithType: AccessControlList.Add\n- uid: System.Messaging.AccessControlList.Contains*\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: Contains\n  nameWithType: AccessControlList.Contains\n- uid: System.Messaging.AccessControlList.CopyTo*\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: CopyTo\n  nameWithType: AccessControlList.CopyTo\n- uid: System.Messaging.AccessControlList.IndexOf*\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: IndexOf\n  nameWithType: AccessControlList.IndexOf\n- uid: System.Messaging.AccessControlList.Insert*\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: Insert\n  nameWithType: AccessControlList.Insert\n- uid: System.Messaging.AccessControlList.Remove*\n  parent: System.Messaging.AccessControlList\n  isExternal: false\n  name: Remove\n  nameWithType: AccessControlList.Remove\n"}