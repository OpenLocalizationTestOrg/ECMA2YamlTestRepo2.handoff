{"nodes":[{"pos":[1284,1296],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3510,3522],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4248,4260],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5262,5274],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6116,6128],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6789,6801],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7387,7399],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8198,8210],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8825,8837],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9995,10007],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10093,10105],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Statements.Switch`1\n  id: Switch`1\n  children:\n  - System.Activities.Statements.Switch`1.#ctor\n  - System.Activities.Statements.Switch`1.#ctor(System.Activities.Activity{`0})\n  - System.Activities.Statements.Switch`1.#ctor(System.Activities.InArgument`1)\n  - System.Activities.Statements.Switch`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})\n  - System.Activities.Statements.Switch`1.CacheMetadata(System.Activities.NativeActivityMetadata)\n  - System.Activities.Statements.Switch`1.Cases\n  - System.Activities.Statements.Switch`1.Default\n  - System.Activities.Statements.Switch`1.Execute(System.Activities.NativeActivityContext)\n  - System.Activities.Statements.Switch`1.Expression\n  - System.Activities.Statements.Switch`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  langs:\n  - csharp\n  name: Switch<T>\n  nameWithType: Switch<T>\n  fullName: System.Activities.Statements.Switch<T>\n  type: Class\n  syntax:\n    content: >-\n      [System.Windows.Markup.ContentProperty(\"Cases\")]\n\n      public sealed class Switch<T> : System.Activities.NativeActivity\n    typeParameters:\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Object\n  - System.Activities.Activity\n  - System.Activities.NativeActivity\n  implements: []\n  inheritedMembers:\n  - System.Activities.Activity.CacheId\n  - System.Activities.Activity.Constraints\n  - System.Activities.Activity.DisplayName\n  - System.Activities.Activity.Id\n  - System.Activities.Activity.ShouldSerializeDisplayName\n  - System.Activities.Activity.ToString\n  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)\n  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)\n  - System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)\n  - System.Activities.NativeActivity.CanInduceIdle\n  - System.Activities.NativeActivity.Implementation\n  - System.Activities.NativeActivity.ImplementationVersion\n  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.#ctor\n  id: '#ctor'\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: Switch()\n  nameWithType: Switch<T>.Switch()\n  fullName: System.Activities.Statements.Switch<T>.Switch()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public Switch ();\n    parameters: []\n  overload: System.Activities.Statements.Switch`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.#ctor(System.Activities.Activity{`0})\n  id: '#ctor(System.Activities.Activity{`0})'\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: Switch(Activity<T>)\n  nameWithType: Switch<T>.Switch(Activity<T>)\n  fullName: System.Activities.Statements.Switch<T>.Switch(Activity<T>)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public Switch (System.Activities.Activity<T> expression);\n    parameters:\n    - id: expression\n      type: System.Activities.Activity{T}\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.#ctor(System.Activities.InArgument`1)\n  id: '#ctor(System.Activities.InArgument`1)'\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: Switch(InArgument<T>)\n  nameWithType: Switch<T>.Switch(InArgument<T>)\n  fullName: System.Activities.Statements.Switch<T>.Switch(InArgument<T>)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public Switch (System.Activities.InArgument<T> expression);\n    parameters:\n    - id: expression\n      type: System.Activities.InArgument`1\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})\n  id: '#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})'\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: Switch(Expression<Func<ActivityContext,T>>)\n  nameWithType: Switch<T>.Switch(Expression<Func<ActivityContext,T>>)\n  fullName: System.Activities.Statements.Switch<T>.Switch(Expression<Func<ActivityContext,T>>)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public Switch (System.Linq.Expressions.Expression<Func<System.Activities.ActivityContext,T>> expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,T}}\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.CacheMetadata(System.Activities.NativeActivityMetadata)\n  id: CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: Switch<T>.CacheMetadata(NativeActivityMetadata)\n  fullName: System.Activities.Statements.Switch<T>.CacheMetadata(NativeActivityMetadata)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);\n    parameters:\n    - id: metadata\n      type: System.Activities.NativeActivityMetadata\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.CacheMetadata*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.Cases\n  id: Cases\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: Cases\n  nameWithType: Switch<T>.Cases\n  fullName: System.Activities.Statements.Switch<T>.Cases\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Collections.Generic.IDictionary<T,System.Activities.Activity> Cases { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{T,System.Activities.Activity}\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.Cases*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.Default\n  id: Default\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: Default\n  nameWithType: Switch<T>.Default\n  fullName: System.Activities.Statements.Switch<T>.Default\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Activities.Activity Default { get; set; }\n    return:\n      type: System.Activities.Activity\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.Default*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.Execute(System.Activities.NativeActivityContext)\n  id: Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: Execute(NativeActivityContext)\n  nameWithType: Switch<T>.Execute(NativeActivityContext)\n  fullName: System.Activities.Statements.Switch<T>.Execute(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void Execute (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.Expression\n  id: Expression\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: Expression\n  nameWithType: Switch<T>.Expression\n  fullName: System.Activities.Statements.Switch<T>.Expression\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Activities.InArgument<T> Expression { get; set; }\n    return:\n      type: System.Activities.InArgument`1\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.Expression*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.Switch`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.Statements.Switch`1\n  langs:\n  - csharp\n  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  nameWithType: Switch<T>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  fullName: System.Activities.Statements.Switch<T>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata metadata, System.Activities.Activity originalActivity);\n    parameters:\n    - id: metadata\n      type: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n      description: To be added.\n    - id: originalActivity\n      type: System.Activities.Activity\n      description: To be added.\n  overload: System.Activities.Statements.Switch`1.OnCreateDynamicUpdateMap*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.NativeActivity\n  isExternal: false\n  name: System.Activities.NativeActivity\n- uid: System.Activities.Statements.Switch`1.#ctor\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Switch()\n  nameWithType: Switch<T>.Switch()\n  fullName: System.Activities.Statements.Switch<T>.Switch()\n- uid: System.Activities.Statements.Switch`1.#ctor(System.Activities.Activity{`0})\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Switch(Activity<T>)\n  nameWithType: Switch<T>.Switch(Activity<T>)\n  fullName: System.Activities.Statements.Switch<T>.Switch(Activity<T>)\n- uid: System.Activities.Activity{T}\n  parent: System.Activities\n  isExternal: false\n  name: Activity<T>\n  nameWithType: Activity<T>\n  fullName: System.Activities.Activity<T>\n  spec.csharp:\n  - uid: System.Activities.Activity`1\n    name: Activity\n    nameWithType: Activity\n    fullName: Activity<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.Switch`1.#ctor(System.Activities.InArgument`1)\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Switch(InArgument<T>)\n  nameWithType: Switch<T>.Switch(InArgument<T>)\n  fullName: System.Activities.Statements.Switch<T>.Switch(InArgument<T>)\n- uid: System.Activities.InArgument`1\n  parent: System.Activities\n  isExternal: false\n  name: InArgument<T>\n  nameWithType: InArgument<T>\n  fullName: System.Activities.InArgument<T>\n- uid: System.Activities.Statements.Switch`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Switch(Expression<Func<ActivityContext,T>>)\n  nameWithType: Switch<T>.Switch(Expression<Func<ActivityContext,T>>)\n  fullName: System.Activities.Statements.Switch<T>.Switch(Expression<Func<ActivityContext,T>>)\n- uid: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,T}}\n  parent: System.Linq.Expressions\n  isExternal: true\n  name: Expression<Func<ActivityContext,T>>\n  nameWithType: Expression<Func<ActivityContext,T>>\n  fullName: System.Linq.Expressions.Expression<System.Func<System.Activities.ActivityContext,T>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: Expression<System.Func<System.Activities.ActivityContext,T>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<System.Activities.ActivityContext,T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.ActivityContext\n    name: ActivityContext\n    nameWithType: ActivityContext\n    fullName: ActivityContext\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.Switch`1.CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: Switch<T>.CacheMetadata(NativeActivityMetadata)\n  fullName: System.Activities.Statements.Switch<T>.CacheMetadata(NativeActivityMetadata)\n- uid: System.Activities.NativeActivityMetadata\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityMetadata\n  nameWithType: NativeActivityMetadata\n  fullName: System.Activities.NativeActivityMetadata\n- uid: System.Activities.Statements.Switch`1.Cases\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Cases\n  nameWithType: Switch<T>.Cases\n  fullName: System.Activities.Statements.Switch<T>.Cases\n- uid: System.Collections.Generic.IDictionary{T,System.Activities.Activity}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<T,Activity>\n  nameWithType: IDictionary<T,Activity>\n  fullName: System.Collections.Generic.IDictionary<T,System.Activities.Activity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<T,System.Activities.Activity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Activities.Activity\n    name: Activity\n    nameWithType: Activity\n    fullName: Activity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.Switch`1.Default\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Default\n  nameWithType: Switch<T>.Default\n  fullName: System.Activities.Statements.Switch<T>.Default\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.Activities.Statements.Switch`1.Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Execute(NativeActivityContext)\n  nameWithType: Switch<T>.Execute(NativeActivityContext)\n  fullName: System.Activities.Statements.Switch<T>.Execute(NativeActivityContext)\n- uid: System.Activities.NativeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityContext\n  nameWithType: NativeActivityContext\n  fullName: System.Activities.NativeActivityContext\n- uid: System.Activities.Statements.Switch`1.Expression\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Expression\n  nameWithType: Switch<T>.Expression\n  fullName: System.Activities.Statements.Switch<T>.Expression\n- uid: System.Activities.Statements.Switch`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  nameWithType: Switch<T>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  fullName: System.Activities.Statements.Switch<T>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n- uid: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n  parent: System.Activities.DynamicUpdate\n  isExternal: false\n  name: NativeActivityUpdateMapMetadata\n  nameWithType: NativeActivityUpdateMapMetadata\n  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n- uid: System.Activities.Statements.Switch`1.#ctor*\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Switch<T>\n  nameWithType: Switch<T>.Switch<T>\n- uid: System.Activities.Statements.Switch`1.CacheMetadata*\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: CacheMetadata\n  nameWithType: Switch<T>.CacheMetadata\n- uid: System.Activities.Statements.Switch`1.Cases*\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Cases\n  nameWithType: Switch<T>.Cases\n- uid: System.Activities.Statements.Switch`1.Default*\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Default\n  nameWithType: Switch<T>.Default\n- uid: System.Activities.Statements.Switch`1.Execute*\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Execute\n  nameWithType: Switch<T>.Execute\n- uid: System.Activities.Statements.Switch`1.Expression*\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: Expression\n  nameWithType: Switch<T>.Expression\n- uid: System.Activities.Statements.Switch`1.OnCreateDynamicUpdateMap*\n  parent: System.Activities.Statements.Switch`1\n  isExternal: false\n  name: OnCreateDynamicUpdateMap\n  nameWithType: Switch<T>.OnCreateDynamicUpdateMap\n"}