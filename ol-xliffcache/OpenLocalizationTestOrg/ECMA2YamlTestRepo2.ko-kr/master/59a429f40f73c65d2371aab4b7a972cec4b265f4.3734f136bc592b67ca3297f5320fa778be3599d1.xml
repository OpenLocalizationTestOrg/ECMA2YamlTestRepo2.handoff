{"nodes":[{"pos":[684,772],"content":"Contains a single configuration tag remapping statement. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains a single configuration tag remapping statement. This class cannot be inherited.","pos":[0,88],"nodes":[{"content":"Contains a single configuration tag remapping statement.","pos":[0,56]},{"content":"This class cannot be inherited.","pos":[57,88]}]}]},{"pos":[785,1516],"content":"The TagMapInfo class allows you to remap the types of tags at compile time. This remapping causes the mapped type to be used in place of the original tag type for all pages and controls in the ASP.NET application in the scope of the configuration file.       The <xref:System.Web.Configuration.TagMapCollection> class allows you to programmatically access and modify the `tagMapping` subsection of the `pages` section of a configuration file. Within the `tagMappings` subsection, you can add and remove mappings between tag types by specifying the fully qualified strong names of the types.      > [!NOTE] >  Unlike other attributes and collections in the `pages` section, tag remapping has no matching ASP.NET page directive.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TagMapInfo class allows you to remap the types of tags at compile time.","pos":[0,75]},{"content":"This remapping causes the mapped type to be used in place of the original tag type for all pages and controls in the ASP.NET application in the scope of the configuration file.","pos":[76,252]},{"content":"The &lt;xref:System.Web.Configuration.TagMapCollection&gt; class allows you to programmatically access and modify the <ph id=\"ph1\">`tagMapping`</ph> subsection of the <ph id=\"ph2\">`pages`</ph> section of a configuration file.","pos":[259,442],"source":"       The <xref:System.Web.Configuration.TagMapCollection> class allows you to programmatically access and modify the `tagMapping` subsection of the `pages` section of a configuration file."},{"content":"Within the <ph id=\"ph1\">`tagMappings`</ph> subsection, you can add and remove mappings between tag types by specifying the fully qualified strong names of the types.","pos":[443,590],"source":" Within the `tagMappings` subsection, you can add and remove mappings between tag types by specifying the fully qualified strong names of the types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Unlike other attributes and collections in the <ph id=\"ph2\">`pages`</ph> section, tag remapping has no matching ASP.NET page directive.","pos":[596,726],"source":"      > [!NOTE] >  Unlike other attributes and collections in the `pages` section, tag remapping has no matching ASP.NET page directive."}]},{"pos":[5699,5832],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.TagMapInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class based on the passed property values.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Configuration.TagMapInfo\"></xref> class based on the passed property values."},{"pos":[6462,6534],"content":"The fully qualified name of the type for the tag that is being remapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified name of the type for the tag that is being remapped.","pos":[0,72]}]},{"pos":[6608,6693],"content":"The name of the type to which the tag is remapped, along with the supporting details.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the type to which the tag is remapped, along with the supporting details.","pos":[0,85]}]},{"pos":[7169,7210],"content":"Compares this instance to another object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares this instance to another object.","pos":[0,41]}]},{"pos":[7347,7365],"content":"Object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"Object to compare.","pos":[0,18]}]},{"pos":[7424,7589],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the objects are identical; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the objects are identical; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8043,8089],"content":"Returns a hash value for the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a hash value for the current instance.","pos":[0,46]}]},{"pos":[8224,8262],"content":"A hash value for the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A hash value for the current instance.","pos":[0,38]}]},{"pos":[8727,8790],"content":"Gets or sets the name of the type to which the tag is remapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the type to which the tag is remapped.","pos":[0,63]}]},{"pos":[8803,9291],"content":"Tag remapping occurs at compile time. This remapping causes the mapped type (specified by the MappedTagType property) to be used in place of the original tag type (specified by the <xref:System.Web.Configuration.TagMapInfo.TagType%2A> property) for all pages and controls in the ASP.NET application in the scope of the configuration file.      > [!NOTE] >  An empty string value for this property will cause the configuration system to throw an exception when the object is serialized.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Tag remapping occurs at compile time.","pos":[0,37]},{"content":"This remapping causes the mapped type (specified by the MappedTagType property) to be used in place of the original tag type (specified by the &lt;xref:System.Web.Configuration.TagMapInfo.TagType%2A&gt; property) for all pages and controls in the ASP.NET application in the scope of the configuration file.","pos":[38,338],"source":" This remapping causes the mapped type (specified by the MappedTagType property) to be used in place of the original tag type (specified by the <xref:System.Web.Configuration.TagMapInfo.TagType%2A> property) for all pages and controls in the ASP.NET application in the scope of the configuration file."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An empty string value for this property will cause the configuration system to throw an exception when the object is serialized.","pos":[344,485],"source":"      > [!NOTE] >  An empty string value for this property will cause the configuration system to throw an exception when the object is serialized."}]},{"pos":[9719,9801],"content":"The name of the type to which the tag is remapped. The default is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the type to which the tag is remapped. The default is an empty string.","pos":[0,82],"nodes":[{"content":"The name of the type to which the tag is remapped.","pos":[0,50]},{"content":"The default is an empty string.","pos":[51,82]}]}]},{"pos":[10453,10465],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11271,11283],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11363,11375],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11434,11446],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11886,11964],"content":"Gets or sets the name of the original type for the tag that is being remapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the original type for the tag that is being remapped.","pos":[0,78]}]},{"pos":[11977,12465],"content":"Tag remapping occurs at compile time. This remapping causes the mapped type (specified by the <xref:System.Web.Configuration.TagMapInfo.MappedTagType%2A> property) to be used in place of the original tag type (specified by the TagType property) for all pages and controls in the ASP.NET application in the scope of the configuration file.      > [!NOTE] >  An empty string value for this property will cause the configuration system to throw an exception when the object is serialized.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Tag remapping occurs at compile time.","pos":[0,37]},{"content":"This remapping causes the mapped type (specified by the &lt;xref:System.Web.Configuration.TagMapInfo.MappedTagType%2A&gt; property) to be used in place of the original tag type (specified by the TagType property) for all pages and controls in the ASP.NET application in the scope of the configuration file.","pos":[38,338],"source":" This remapping causes the mapped type (specified by the <xref:System.Web.Configuration.TagMapInfo.MappedTagType%2A> property) to be used in place of the original tag type (specified by the TagType property) for all pages and controls in the ASP.NET application in the scope of the configuration file."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An empty string value for this property will cause the configuration system to throw an exception when the object is serialized.","pos":[344,485],"source":"      > [!NOTE] >  An empty string value for this property will cause the configuration system to throw an exception when the object is serialized."}]},{"pos":[12906,12971],"content":"The name of the original type for the tag that is being remapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the original type for the tag that is being remapped.","pos":[0,65]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Configuration.TagMapInfo\n  id: TagMapInfo\n  children:\n  - System.Web.Configuration.TagMapInfo.#ctor(System.String,System.String)\n  - System.Web.Configuration.TagMapInfo.Equals(System.Object)\n  - System.Web.Configuration.TagMapInfo.GetHashCode\n  - System.Web.Configuration.TagMapInfo.MappedTagType\n  - System.Web.Configuration.TagMapInfo.Properties\n  - System.Web.Configuration.TagMapInfo.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Web.Configuration.TagMapInfo.TagType\n  langs:\n  - csharp\n  name: TagMapInfo\n  nameWithType: TagMapInfo\n  fullName: System.Web.Configuration.TagMapInfo\n  type: Class\n  summary: Contains a single configuration tag remapping statement. This class cannot be inherited.\n  remarks: \"The TagMapInfo class allows you to remap the types of tags at compile time. This remapping causes the mapped type to be used in place of the original tag type for all pages and controls in the ASP.NET application in the scope of the configuration file.  \\n  \\n The <xref:System.Web.Configuration.TagMapCollection> class allows you to programmatically access and modify the `tagMapping` subsection of the `pages` section of a configuration file. Within the `tagMappings` subsection, you can add and remove mappings between tag types by specifying the fully qualified strong names of the types.  \\n  \\n> [!NOTE]\\n>  Unlike other attributes and collections in the `pages` section, tag remapping has no matching ASP.NET page directive.\"\n  example:\n  - \"The following configuration file excerpt shows how to declaratively specify values for several properties of the TagMapInfo class.  \\n  \\n```  \\n<system.web>  \\n  <pages>  \\n    <tagMapping>  \\n      <add  \\n        tagType=  \\n          \\\"System.Web.UI.WebControls.WebParts.WebPartManager\\\"  \\n        mappedTagType=  \\n          \\\"Microsoft.Sharepoint.WebPartPartManager,   \\n           MSPS.Web.dll, Version='2.0.0.0'\\\"   \\n      />  \\n    </tagMapping>  \\n  </pages>  \\n</system.web>  \\n```  \\n  \\n The following code example shows how to use the <xref:System.Web.Configuration.TagMapCollection> class to programmatically modify tag-mapping settings. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  \\n  \\n [!code-cs[System.Web.Configuration.PagesSection#17](~/add/codesnippet/csharp/t-system.web.configurati_73_1.cs)]\\n [!code-vb[System.Web.Configuration.PagesSection#17](~/add/codesnippet/visualbasic/t-system.web.configurati_73_1.vb)]\"\n  syntax:\n    content: 'public sealed class TagMapInfo : System.Configuration.ConfigurationElement'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsModified\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElement.ResetModified\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  platform:\n  - net462\n- uid: System.Web.Configuration.TagMapInfo.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Web.Configuration.TagMapInfo\n  langs:\n  - csharp\n  name: TagMapInfo(String,String)\n  nameWithType: TagMapInfo.TagMapInfo(String,String)\n  fullName: System.Web.Configuration.TagMapInfo.TagMapInfo(String,String)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.Web.Configuration.TagMapInfo\"></xref> class based on the passed property values.\n  remarks: ''\n  example:\n  - \"The following code example shows how to use the TagMapInfo constructor. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  \\n  \\n [!code-cs[System.Web.Configuration.PagesSection#42](~/add/codesnippet/csharp/m-system.web.configurati_25_1.cs)]\\n [!code-vb[System.Web.Configuration.PagesSection#42](~/add/codesnippet/visualbasic/m-system.web.configurati_25_1.vb)]\"\n  syntax:\n    content: public TagMapInfo (string tagTypeName, string mappedTagTypeName);\n    parameters:\n    - id: tagTypeName\n      type: System.String\n      description: The fully qualified name of the type for the tag that is being remapped.\n    - id: mappedTagTypeName\n      type: System.String\n      description: The name of the type to which the tag is remapped, along with the supporting details.\n  overload: System.Web.Configuration.TagMapInfo.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.TagMapInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Web.Configuration.TagMapInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: TagMapInfo.Equals(Object)\n  fullName: System.Web.Configuration.TagMapInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Compares this instance to another object.\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: Object to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the objects are identical; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Configuration.TagMapInfo.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.TagMapInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Web.Configuration.TagMapInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: TagMapInfo.GetHashCode()\n  fullName: System.Web.Configuration.TagMapInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Returns a hash value for the current instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash value for the current instance.\n  overload: System.Web.Configuration.TagMapInfo.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.TagMapInfo.MappedTagType\n  id: MappedTagType\n  parent: System.Web.Configuration.TagMapInfo\n  langs:\n  - csharp\n  name: MappedTagType\n  nameWithType: TagMapInfo.MappedTagType\n  fullName: System.Web.Configuration.TagMapInfo.MappedTagType\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets the name of the type to which the tag is remapped.\n  remarks: \"Tag remapping occurs at compile time. This remapping causes the mapped type (specified by the MappedTagType property) to be used in place of the original tag type (specified by the <xref:System.Web.Configuration.TagMapInfo.TagType%2A> property) for all pages and controls in the ASP.NET application in the scope of the configuration file.  \\n  \\n> [!NOTE]\\n>  An empty string value for this property will cause the configuration system to throw an exception when the object is serialized.\"\n  example:\n  - \"The following code example shows how to use the MappedTagType property. It is part of a larger example for the <xref:System.Web.Configuration.PagesSection> type.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public string MappedTagType { get; set; }\n    return:\n      type: System.String\n      description: The name of the type to which the tag is remapped. The default is an empty string.\n  overload: System.Web.Configuration.TagMapInfo.MappedTagType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.TagMapInfo.Properties\n  id: Properties\n  parent: System.Web.Configuration.TagMapInfo\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: TagMapInfo.Properties\n  fullName: System.Web.Configuration.TagMapInfo.Properties\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: To be added.\n  overload: System.Web.Configuration.TagMapInfo.Properties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.TagMapInfo.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  id: SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Web.Configuration.TagMapInfo\n  langs:\n  - csharp\n  name: SerializeElement(XmlWriter,Boolean)\n  nameWithType: TagMapInfo.SerializeElement(XmlWriter,Boolean)\n  fullName: System.Web.Configuration.TagMapInfo.SerializeElement(XmlWriter,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  syntax:\n    content: protected override bool SerializeElement (System.Xml.XmlWriter writer, bool serializeCollectionKey);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: To be added.\n    - id: serializeCollectionKey\n      type: System.Boolean\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Web.Configuration.TagMapInfo.SerializeElement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Configuration.TagMapInfo.TagType\n  id: TagType\n  parent: System.Web.Configuration.TagMapInfo\n  langs:\n  - csharp\n  name: TagType\n  nameWithType: TagMapInfo.TagType\n  fullName: System.Web.Configuration.TagMapInfo.TagType\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Configuration\n  summary: Gets or sets the name of the original type for the tag that is being remapped.\n  remarks: \"Tag remapping occurs at compile time. This remapping causes the mapped type (specified by the <xref:System.Web.Configuration.TagMapInfo.MappedTagType%2A> property) to be used in place of the original tag type (specified by the TagType property) for all pages and controls in the ASP.NET application in the scope of the configuration file.  \\n  \\n> [!NOTE]\\n>  An empty string value for this property will cause the configuration system to throw an exception when the object is serialized.\"\n  example:\n  - \"The following code example shows how to use the TagType property. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: public string TagType { get; set; }\n    return:\n      type: System.String\n      description: The name of the original type for the tag that is being remapped.\n  overload: System.Web.Configuration.TagMapInfo.TagType*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: System.Configuration.ConfigurationElement\n- uid: System.Web.Configuration.TagMapInfo.#ctor(System.String,System.String)\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: TagMapInfo(String,String)\n  nameWithType: TagMapInfo.TagMapInfo(String,String)\n  fullName: System.Web.Configuration.TagMapInfo.TagMapInfo(String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Configuration.TagMapInfo.Equals(System.Object)\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: TagMapInfo.Equals(Object)\n  fullName: System.Web.Configuration.TagMapInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.Configuration.TagMapInfo.GetHashCode\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: TagMapInfo.GetHashCode()\n  fullName: System.Web.Configuration.TagMapInfo.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Configuration.TagMapInfo.MappedTagType\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: MappedTagType\n  nameWithType: TagMapInfo.MappedTagType\n  fullName: System.Web.Configuration.TagMapInfo.MappedTagType\n- uid: System.Web.Configuration.TagMapInfo.Properties\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: Properties\n  nameWithType: TagMapInfo.Properties\n  fullName: System.Web.Configuration.TagMapInfo.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.Web.Configuration.TagMapInfo.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: SerializeElement(XmlWriter,Boolean)\n  nameWithType: TagMapInfo.SerializeElement(XmlWriter,Boolean)\n  fullName: System.Web.Configuration.TagMapInfo.SerializeElement(XmlWriter,Boolean)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: true\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Web.Configuration.TagMapInfo.TagType\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: TagType\n  nameWithType: TagMapInfo.TagType\n  fullName: System.Web.Configuration.TagMapInfo.TagType\n- uid: System.Web.Configuration.TagMapInfo.#ctor*\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: TagMapInfo\n  nameWithType: TagMapInfo.TagMapInfo\n- uid: System.Web.Configuration.TagMapInfo.Equals*\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: Equals\n  nameWithType: TagMapInfo.Equals\n- uid: System.Web.Configuration.TagMapInfo.GetHashCode*\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: TagMapInfo.GetHashCode\n- uid: System.Web.Configuration.TagMapInfo.MappedTagType*\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: MappedTagType\n  nameWithType: TagMapInfo.MappedTagType\n- uid: System.Web.Configuration.TagMapInfo.Properties*\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: Properties\n  nameWithType: TagMapInfo.Properties\n- uid: System.Web.Configuration.TagMapInfo.SerializeElement*\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: SerializeElement\n  nameWithType: TagMapInfo.SerializeElement\n- uid: System.Web.Configuration.TagMapInfo.TagType*\n  parent: System.Web.Configuration.TagMapInfo\n  isExternal: false\n  name: TagType\n  nameWithType: TagMapInfo.TagType\n"}