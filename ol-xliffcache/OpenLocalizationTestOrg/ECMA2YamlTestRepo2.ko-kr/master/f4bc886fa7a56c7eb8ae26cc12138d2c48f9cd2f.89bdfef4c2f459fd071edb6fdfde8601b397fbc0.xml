{"nodes":[{"pos":[625,677],"content":"Represents an indexed collection of key/value pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an indexed collection of key/value pairs.","pos":[0,52]}]},{"pos":[690,2104],"content":"IOrderedDictionary elements can be accessed either with the key or with the index.       Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> structure.       Each pair must have a unique key that is not `null`, but the value can be `null` and does not have to be unique. The IOrderedDictionary interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.       The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Because each element of the <xref:System.Collections.IDictionary> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>, as the following example shows.       [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)]  [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)]  [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb)]       The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"IOrderedDictionary elements can be accessed either with the key or with the index.","pos":[0,82]},{"content":"Each element is a key/value pair stored in a &lt;xref:System.Collections.DictionaryEntry&gt; structure.","pos":[89,186],"source":"       Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> structure."},{"content":"Each pair must have a unique key that is not <ph id=\"ph1\">`null`</ph>, but the value can be <ph id=\"ph2\">`null`</ph> and does not have to be unique.","pos":[193,305],"source":"       Each pair must have a unique key that is not `null`, but the value can be `null` and does not have to be unique."},{"content":"The IOrderedDictionary interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.","pos":[306,442]},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.","pos":[449,585],"source":"       The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection."},{"content":"Because each element of the &lt;xref:System.Collections.IDictionary&gt; is a key/value pair, the element type is not the type of the key or the type of the value.","pos":[586,742],"source":" Because each element of the <xref:System.Collections.IDictionary> is a key/value pair, the element type is not the type of the key or the type of the value."},{"content":"Instead, the element type is &lt;xref:System.Collections.DictionaryEntry&gt;, as the following example shows.","pos":[743,846],"source":" Instead, the element type is <xref:System.Collections.DictionaryEntry>, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cpp</bpt><bpt id=\"p4\">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id=\"p4\">](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id=\"p6\">](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb)</ept><ept id=\"p5\">]</ept>       The <ph id=\"ph1\">`foreach`</ph> statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.","pos":[853,1402],"source":"[!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)]  [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)]  [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb)]       The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection."}]},{"pos":[3439,3569],"content":"Returns an enumerator that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection."},{"pos":[3582,6162],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended instead of directly manipulating the enumerator.","pos":[139,229],"source":"  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[236,356]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[363,446]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[447,543],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, the &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property is undefined.","pos":[545,638],"source":"  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[639,856],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[863,1059],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1060,1184],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1191,1418],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1419,1550],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[1551,1701],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1702,1926],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1933,2005]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[2006,2168]},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2175,2329]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[2331,2436]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[2438,2566]}]},{"pos":[7307,7455],"content":"An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for the entire <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IDictionaryEnumerator> for the entire <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection."},{"pos":[8098,8166],"content":"Inserts a key/value pair into the collection at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Inserts a key/value pair into the collection at the specified index.","pos":[0,68]}]},{"pos":[8179,8865],"content":"<xref:System.Collections.Specialized.IOrderedDictionary> accepts `null` as a valid value and allows duplicate elements.       If the `index` parameter is equal to <xref:System.Collections.ICollection.Count%2A>, the `value` parameter is added to the end of the <xref:System.Collections.Specialized.IOrderedDictionary> collection.       In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Collections.Specialized.IOrderedDictionary&gt; accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[0,119],"source":"<xref:System.Collections.Specialized.IOrderedDictionary> accepts `null` as a valid value and allows duplicate elements."},{"content":"If the <ph id=\"ph1\">`index`</ph> parameter is equal to &lt;xref:System.Collections.ICollection.Count%2A&gt;, the <ph id=\"ph2\">`value`</ph> parameter is added to the end of the &lt;xref:System.Collections.Specialized.IOrderedDictionary&gt; collection.","pos":[126,328],"source":"       If the `index` parameter is equal to <xref:System.Collections.ICollection.Count%2A>, the `value` parameter is added to the end of the <xref:System.Collections.Specialized.IOrderedDictionary> collection."},{"content":"In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.","pos":[335,475]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[476,566]},{"content":"This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.","pos":[567,682]}]},{"pos":[9966,10034],"content":"The zero-based index at which the key/value pair should be inserted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index at which the key/value pair should be inserted.","pos":[0,68]}]},{"pos":[10094,10145],"content":"The object to use as the key of the element to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to use as the key of the element to add.","pos":[0,51]}]},{"pos":[10207,10340],"content":"The object to use as the value of the element to add.  The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to use as the value of the element to add.","pos":[0,53]},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[55,133],"source":"  The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[10540,10676],"content":"<code>index</code> is less than 0.       -or-       <code>index</code> is greater than <xref:System.Collections.ICollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","pos":[0,34],"source":"<code>index</code> is less than 0."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>.","pos":[41,132],"source":"       -or-       <code>index</code> is greater than <xref:System.Collections.ICollection.Count*>."}]},{"pos":[10780,10861],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10956,11089],"content":"An element with the same key already exists in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"An element with the same key already exists in the <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection."},{"pos":[11193,11421],"content":"The <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection is read-only.       -or-       The <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection is read-only.","pos":[0,99],"source":"The <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection has a fixed size.","pos":[106,220],"source":"       -or-       The <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection has a fixed size."}]},{"pos":[11865,11913],"content":"Gets or sets the element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the element at the specified index.","pos":[0,48]}]},{"pos":[11926,12797],"content":"<xref:System.Collections.Specialized.IOrderedDictionary> accepts `null` as a valid value and allows duplicate elements.       The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.       This property allows you to access a specific element in the collection by using the following syntax:       [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)]  [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)]  [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Collections.Specialized.IOrderedDictionary&gt; accepts <ph id=\"ph1\">`null`</ph> as a valid value and allows duplicate elements.","pos":[0,119],"source":"<xref:System.Collections.Specialized.IOrderedDictionary> accepts `null` as a valid value and allows duplicate elements."},{"content":"The C# language uses the  keyword to define the indexers instead of implementing the Item property.","pos":[126,225]},{"content":"Visual Basic implements Item as a default property, which provides the same indexing functionality.","pos":[226,325]},{"content":"This property allows you to access a specific element in the collection by using the following syntax:       <bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04<ept id=\"p2\">](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cpp</bpt><bpt id=\"p4\">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04<ept id=\"p4\">](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04<ept id=\"p6\">](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)</ept><ept id=\"p5\">]</ept>","pos":[332,863],"source":"       This property allows you to access a specific element in the collection by using the following syntax:       [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)]  [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)]  [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)]"}]},{"pos":[13893,13943],"content":"The zero-based index of the element to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the element to get or set.","pos":[0,50]}]},{"pos":[14001,14036],"content":"The element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element at the specified index.","pos":[0,35]}]},{"pos":[14234,14382],"content":"<code>index</code> is less than 0.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.ICollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","pos":[0,34],"source":"<code>index</code> is less than 0."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>.","pos":[41,144],"source":"       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.ICollection.Count*>."}]},{"pos":[14844,14887],"content":"Removes the element at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the element at the specified index.","pos":[0,43]}]},{"pos":[14899,15240],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.","pos":[0,341],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]},{"content":"This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.","pos":[226,341]}]}]},{"pos":[16325,16371],"content":"The zero-based index of the element to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the element to remove.","pos":[0,46]}]},{"pos":[16573,16721],"content":"<code>index</code> is less than 0.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.ICollection.Count*>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.","pos":[0,34],"source":"<code>index</code> is less than 0."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>.","pos":[41,144],"source":"       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.ICollection.Count*>."}]},{"pos":[16826,17054],"content":"The <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection is read-only.       -or-       The <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection is read-only.","pos":[0,99],"source":"The <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection has a fixed size.","pos":[106,220],"source":"       -or-       The <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection has a fixed size."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Specialized.IOrderedDictionary\n  id: IOrderedDictionary\n  children:\n  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n  langs:\n  - csharp\n  name: IOrderedDictionary\n  nameWithType: IOrderedDictionary\n  fullName: System.Collections.Specialized.IOrderedDictionary\n  type: Interface\n  summary: Represents an indexed collection of key/value pairs.\n  remarks: \"IOrderedDictionary elements can be accessed either with the key or with the index.  \\n  \\n Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> structure.  \\n  \\n Each pair must have a unique key that is not `null`, but the value can be `null` and does not have to be unique. The IOrderedDictionary interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.  \\n  \\n The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Because each element of the <xref:System.Collections.IDictionary> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>, as the following example shows.  \\n  \\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)]\\n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)]\\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb)]  \\n  \\n The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.\"\n  example:\n  - \"The following code example demonstrates the implementation of a simple IOrderedDictionary based on the <xref:System.Collections.ArrayList> class. The implemented IOrderedDictionary stores first names as the keys and last names as the values, with the added requirement that each first name is unique.  \\n  \\n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/cpp/t-system.collections.spe_7_2.cpp)]\\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/csharp/t-system.collections.spe_7_2.cs)]\\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/visualbasic/t-system.collections.spe_7_2.vb)]\"\n  syntax:\n    content: 'public interface IOrderedDictionary : System.Collections.IDictionary'\n  implements:\n  - System.Collections.IDictionary\n  platform:\n  - net462\n- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Specialized.IOrderedDictionary\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: IOrderedDictionary.GetEnumerator()\n  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.\"\n  example:\n  - \"The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \\n  \\n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_15_1.cpp)]\\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_15_1.cs)]\\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_15_1.vb)]\"\n  syntax:\n    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref:System.Collections.IDictionaryEnumerator> for the entire <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection.\n  overload: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n  id: Insert(System.Int32,System.Object,System.Object)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  langs:\n  - csharp\n  name: Insert(Int32,Object,Object)\n  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)\n  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Inserts a key/value pair into the collection at the specified index.\n  remarks: \"<xref:System.Collections.Specialized.IOrderedDictionary> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n If the `index` parameter is equal to <xref:System.Collections.ICollection.Count%2A>, the `value` parameter is added to the end of the <xref:System.Collections.Specialized.IOrderedDictionary> collection.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.\"\n  example:\n  - \"The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \\n  \\n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/36355794-2a11-4b04-824e-_1.cpp)]\\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/36355794-2a11-4b04-824e-_1.cs)]\\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/36355794-2a11-4b04-824e-_1.vb)]\"\n  syntax:\n    content: public void Insert (int index, object key, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which the key/value pair should be inserted.\n    - id: key\n      type: System.Object\n      description: The object to use as the key of the element to add.\n    - id: value\n      type: System.Object\n      description: The object to use as the value of the element to add.  The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Specialized.IOrderedDictionary.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than <xref:System.Collections.ICollection.Count*>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An element with the same key already exists in the <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> collection.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.Specialized.IOrderedDictionary\\\"></xref> collection is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Specialized.IOrderedDictionary\\\"></xref> collection has a fixed size.\"\n  platform:\n  - net462\n- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: IOrderedDictionary.Item(Int32)\n  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets or sets the element at the specified index.\n  remarks: \"<xref:System.Collections.Specialized.IOrderedDictionary> accepts `null` as a valid value and allows duplicate elements.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \\n  \\n This property allows you to access a specific element in the collection by using the following syntax:  \\n  \\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)]\\n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)]\\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)]\"\n  example:\n  - \"The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \\n  \\n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/p-system.collections.spe_12_2.cpp)]\\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/p-system.collections.spe_12_2.cs)]\\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/p-system.collections.spe_12_2.vb)]\"\n  syntax:\n    content: public object this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to get or set.\n    return:\n      type: System.Object\n      description: The element at the specified index.\n  overload: System.Collections.Specialized.IOrderedDictionary.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref:System.Collections.ICollection.Count*>.\"\n  platform:\n  - net462\n- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: IOrderedDictionary.RemoveAt(Int32)\n  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Removes the element at the specified index.\n  remarks: In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.\n  example:\n  - \"The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \\n  \\n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_23_1.cpp)]\\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_23_1.cs)]\\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_23_1.vb)]\"\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to remove.\n  overload: System.Collections.Specialized.IOrderedDictionary.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref:System.Collections.ICollection.Count*>.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.Specialized.IOrderedDictionary\\\"></xref> collection is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Specialized.IOrderedDictionary\\\"></xref> collection has a fixed size.\"\n  platform:\n  - net462\nreferences:\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: IOrderedDictionary.GetEnumerator()\n  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: Insert(Int32,Object,Object)\n  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)\n  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: IOrderedDictionary.Item(Int32)\n  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)\n- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: IOrderedDictionary.RemoveAt(Int32)\n  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)\n- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: IOrderedDictionary.GetEnumerator\n- uid: System.Collections.Specialized.IOrderedDictionary.Insert*\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: Insert\n  nameWithType: IOrderedDictionary.Insert\n- uid: System.Collections.Specialized.IOrderedDictionary.Item*\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: Item\n  nameWithType: IOrderedDictionary.Item\n- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt*\n  parent: System.Collections.Specialized.IOrderedDictionary\n  isExternal: false\n  name: RemoveAt\n  nameWithType: IOrderedDictionary.RemoveAt\n"}