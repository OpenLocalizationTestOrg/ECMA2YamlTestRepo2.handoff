{"nodes":[{"pos":[573,620],"content":"Identifies kinds of exception-handling clauses.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies kinds of exception-handling clauses.","pos":[0,47]}]},{"pos":[633,1657],"content":"To examine the exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> object and call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain the method body. Use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.      > [!NOTE] >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To examine the exception-handling clauses in a method, obtain a &lt;xref:System.Reflection.MethodInfo&gt; object and call the &lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt; method to obtain the method body.","pos":[0,206],"source":"To examine the exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> object and call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain the method body."},{"content":"Use the &lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt; property to obtain a list of &lt;xref:System.Reflection.ExceptionHandlingClause&gt; objects.","pos":[207,365],"source":" Use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.","pos":[371,533],"source":"      > [!NOTE] >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats."},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[534,720]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[721,1017],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[4142,4210],"content":"The clause accepts all exceptions that derive from a specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The clause accepts all exceptions that derive from a specified type.","pos":[0,68]}]},{"pos":[4333,4345],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4756,4848],"content":"The clause is executed if an exception occurs, but not on completion of normal control flow.","needQuote":true,"needEscape":true,"nodes":[{"content":"The clause is executed if an exception occurs, but not on completion of normal control flow.","pos":[0,92]}]},{"pos":[4970,4982],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5398,5625],"content":"The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.","pos":[0,227]}]},{"pos":[5748,5760],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6181,6307],"content":"The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.","pos":[0,126]}]},{"pos":[6431,6443],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.ExceptionHandlingClauseOptions\n  id: ExceptionHandlingClauseOptions\n  children:\n  - System.Reflection.ExceptionHandlingClauseOptions.Clause\n  - System.Reflection.ExceptionHandlingClauseOptions.Fault\n  - System.Reflection.ExceptionHandlingClauseOptions.Filter\n  - System.Reflection.ExceptionHandlingClauseOptions.Finally\n  langs:\n  - csharp\n  name: ExceptionHandlingClauseOptions\n  nameWithType: ExceptionHandlingClauseOptions\n  fullName: System.Reflection.ExceptionHandlingClauseOptions\n  type: Enum\n  summary: Identifies kinds of exception-handling clauses.\n  remarks: \"To examine the exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> object and call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain the method body. Use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \\n  \\n> [!NOTE]\\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate Filter clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/t-system.reflection.exce_1_1.cpp)]\\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_1.vb)]\\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/t-system.reflection.exce_1_1.cs)]  \\n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/t-system.reflection.exce_1_2.cpp)]\\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_2.vb)]\\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/t-system.reflection.exce_1_2.cs)]  \\n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/t-system.reflection.exce_1_3.cpp)]\\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_3.vb)]\\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/t-system.reflection.exce_1_3.cs)]  \\n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/t-system.reflection.exce_1_4.cpp)]\\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_4.vb)]\\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/t-system.reflection.exce_1_4.cs)]\"\n  syntax:\n    content: >-\n      [System.Flags]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum ExceptionHandlingClauseOptions\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Reflection.ExceptionHandlingClauseOptions.Clause\n  id: Clause\n  parent: System.Reflection.ExceptionHandlingClauseOptions\n  langs:\n  - csharp\n  name: Clause\n  nameWithType: ExceptionHandlingClauseOptions.Clause\n  fullName: System.Reflection.ExceptionHandlingClauseOptions.Clause\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: The clause accepts all exceptions that derive from a specified type.\n  syntax:\n    content: Clause\n    return:\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.ExceptionHandlingClauseOptions.Fault\n  id: Fault\n  parent: System.Reflection.ExceptionHandlingClauseOptions\n  langs:\n  - csharp\n  name: Fault\n  nameWithType: ExceptionHandlingClauseOptions.Fault\n  fullName: System.Reflection.ExceptionHandlingClauseOptions.Fault\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: The clause is executed if an exception occurs, but not on completion of normal control flow.\n  syntax:\n    content: Fault\n    return:\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.ExceptionHandlingClauseOptions.Filter\n  id: Filter\n  parent: System.Reflection.ExceptionHandlingClauseOptions\n  langs:\n  - csharp\n  name: Filter\n  nameWithType: ExceptionHandlingClauseOptions.Filter\n  fullName: System.Reflection.ExceptionHandlingClauseOptions.Filter\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.\n  syntax:\n    content: Filter\n    return:\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.ExceptionHandlingClauseOptions.Finally\n  id: Finally\n  parent: System.Reflection.ExceptionHandlingClauseOptions\n  langs:\n  - csharp\n  name: Finally\n  nameWithType: ExceptionHandlingClauseOptions.Finally\n  fullName: System.Reflection.ExceptionHandlingClauseOptions.Finally\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.\n  syntax:\n    content: Finally\n    return:\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Reflection.ExceptionHandlingClauseOptions.Clause\n  parent: System.Reflection.ExceptionHandlingClauseOptions\n  isExternal: false\n  name: Clause\n  nameWithType: ExceptionHandlingClauseOptions.Clause\n  fullName: System.Reflection.ExceptionHandlingClauseOptions.Clause\n- uid: System.Reflection.ExceptionHandlingClauseOptions\n  parent: System.Reflection\n  isExternal: false\n  name: ExceptionHandlingClauseOptions\n  nameWithType: ExceptionHandlingClauseOptions\n  fullName: System.Reflection.ExceptionHandlingClauseOptions\n- uid: System.Reflection.ExceptionHandlingClauseOptions.Fault\n  parent: System.Reflection.ExceptionHandlingClauseOptions\n  isExternal: false\n  name: Fault\n  nameWithType: ExceptionHandlingClauseOptions.Fault\n  fullName: System.Reflection.ExceptionHandlingClauseOptions.Fault\n- uid: System.Reflection.ExceptionHandlingClauseOptions.Filter\n  parent: System.Reflection.ExceptionHandlingClauseOptions\n  isExternal: false\n  name: Filter\n  nameWithType: ExceptionHandlingClauseOptions.Filter\n  fullName: System.Reflection.ExceptionHandlingClauseOptions.Filter\n- uid: System.Reflection.ExceptionHandlingClauseOptions.Finally\n  parent: System.Reflection.ExceptionHandlingClauseOptions\n  isExternal: false\n  name: Finally\n  nameWithType: ExceptionHandlingClauseOptions.Finally\n  fullName: System.Reflection.ExceptionHandlingClauseOptions.Finally\n"}