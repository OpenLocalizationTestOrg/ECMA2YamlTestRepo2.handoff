{"nodes":[{"pos":[1053,1065],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1098,1110],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1143,1155],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3455,3467],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4122,4134],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4792,4804],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5462,5474],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6319,6331],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7530,7542],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7628,7640],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Statements.InvokeAction`3\n  id: InvokeAction`3\n  children:\n  - System.Activities.Statements.InvokeAction`3.#ctor\n  - System.Activities.Statements.InvokeAction`3.Action\n  - System.Activities.Statements.InvokeAction`3.Argument1\n  - System.Activities.Statements.InvokeAction`3.Argument2\n  - System.Activities.Statements.InvokeAction`3.Argument3\n  - System.Activities.Statements.InvokeAction`3.Execute(System.Activities.NativeActivityContext)\n  - System.Activities.Statements.InvokeAction`3.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  langs:\n  - csharp\n  name: InvokeAction<T1,T2,T3>\n  nameWithType: InvokeAction<T1,T2,T3>\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>\n  type: Class\n  syntax:\n    content: >-\n      [System.Windows.Markup.ContentProperty(\"Action\")]\n\n      public sealed class InvokeAction<T1,T2,T3> : System.Activities.NativeActivity\n    typeParameters:\n    - id: T1\n      description: To be added.\n    - id: T2\n      description: To be added.\n    - id: T3\n      description: To be added.\n  inheritance:\n  - System.Object\n  - System.Activities.Activity\n  - System.Activities.NativeActivity\n  implements: []\n  inheritedMembers:\n  - System.Activities.Activity.CacheId\n  - System.Activities.Activity.Constraints\n  - System.Activities.Activity.DisplayName\n  - System.Activities.Activity.Id\n  - System.Activities.Activity.ShouldSerializeDisplayName\n  - System.Activities.Activity.ToString\n  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)\n  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)\n  - System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)\n  - System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)\n  - System.Activities.NativeActivity.CanInduceIdle\n  - System.Activities.NativeActivity.Implementation\n  - System.Activities.NativeActivity.ImplementationVersion\n  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)\n  platform:\n  - net462\n- uid: System.Activities.Statements.InvokeAction`3.#ctor\n  id: '#ctor'\n  parent: System.Activities.Statements.InvokeAction`3\n  langs:\n  - csharp\n  name: InvokeAction()\n  nameWithType: InvokeAction<T1,T2,T3>.InvokeAction()\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.InvokeAction()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public InvokeAction ();\n    parameters: []\n  overload: System.Activities.Statements.InvokeAction`3.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.InvokeAction`3.Action\n  id: Action\n  parent: System.Activities.Statements.InvokeAction`3\n  langs:\n  - csharp\n  name: Action\n  nameWithType: InvokeAction<T1,T2,T3>.Action\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Action\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Activities.ActivityAction<T1,T2,T3> Action { get; set; }\n    return:\n      type: System.Activities.ActivityAction`3\n      description: To be added.\n  overload: System.Activities.Statements.InvokeAction`3.Action*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.InvokeAction`3.Argument1\n  id: Argument1\n  parent: System.Activities.Statements.InvokeAction`3\n  langs:\n  - csharp\n  name: Argument1\n  nameWithType: InvokeAction<T1,T2,T3>.Argument1\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Argument1\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Activities.InArgument<T1> Argument1 { get; set; }\n    return:\n      type: System.Activities.InArgument{T1}\n      description: To be added.\n  overload: System.Activities.Statements.InvokeAction`3.Argument1*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.InvokeAction`3.Argument2\n  id: Argument2\n  parent: System.Activities.Statements.InvokeAction`3\n  langs:\n  - csharp\n  name: Argument2\n  nameWithType: InvokeAction<T1,T2,T3>.Argument2\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Argument2\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Activities.InArgument<T2> Argument2 { get; set; }\n    return:\n      type: System.Activities.InArgument{T2}\n      description: To be added.\n  overload: System.Activities.Statements.InvokeAction`3.Argument2*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.InvokeAction`3.Argument3\n  id: Argument3\n  parent: System.Activities.Statements.InvokeAction`3\n  langs:\n  - csharp\n  name: Argument3\n  nameWithType: InvokeAction<T1,T2,T3>.Argument3\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Argument3\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Activities.InArgument<T3> Argument3 { get; set; }\n    return:\n      type: System.Activities.InArgument{T3}\n      description: To be added.\n  overload: System.Activities.Statements.InvokeAction`3.Argument3*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.InvokeAction`3.Execute(System.Activities.NativeActivityContext)\n  id: Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.InvokeAction`3\n  langs:\n  - csharp\n  name: Execute(NativeActivityContext)\n  nameWithType: InvokeAction<T1,T2,T3>.Execute(NativeActivityContext)\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Execute(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void Execute (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: To be added.\n  overload: System.Activities.Statements.InvokeAction`3.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.InvokeAction`3.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.Statements.InvokeAction`3\n  langs:\n  - csharp\n  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  nameWithType: InvokeAction<T1,T2,T3>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata metadata, System.Activities.Activity originalActivity);\n    parameters:\n    - id: metadata\n      type: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n      description: To be added.\n    - id: originalActivity\n      type: System.Activities.Activity\n      description: To be added.\n  overload: System.Activities.Statements.InvokeAction`3.OnCreateDynamicUpdateMap*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.NativeActivity\n  isExternal: false\n  name: System.Activities.NativeActivity\n- uid: System.Activities.Statements.InvokeAction`3.#ctor\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: InvokeAction()\n  nameWithType: InvokeAction<T1,T2,T3>.InvokeAction()\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.InvokeAction()\n- uid: System.Activities.Statements.InvokeAction`3.Action\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Action\n  nameWithType: InvokeAction<T1,T2,T3>.Action\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Action\n- uid: System.Activities.ActivityAction`3\n  parent: System.Activities\n  isExternal: false\n  name: ActivityAction<T1,T2,T3>\n  nameWithType: ActivityAction<T1,T2,T3>\n  fullName: System.Activities.ActivityAction<T1,T2,T3>\n- uid: System.Activities.Statements.InvokeAction`3.Argument1\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Argument1\n  nameWithType: InvokeAction<T1,T2,T3>.Argument1\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Argument1\n- uid: System.Activities.InArgument{T1}\n  parent: System.Activities\n  isExternal: false\n  name: InArgument<T1>\n  nameWithType: InArgument<T1>\n  fullName: System.Activities.InArgument<T1>\n  spec.csharp:\n  - uid: System.Activities.InArgument`1\n    name: InArgument\n    nameWithType: InArgument\n    fullName: InArgument<T1>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T1\n    name: T1\n    nameWithType: T1\n    fullName: T1\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.InvokeAction`3.Argument2\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Argument2\n  nameWithType: InvokeAction<T1,T2,T3>.Argument2\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Argument2\n- uid: System.Activities.InArgument{T2}\n  parent: System.Activities\n  isExternal: false\n  name: InArgument<T2>\n  nameWithType: InArgument<T2>\n  fullName: System.Activities.InArgument<T2>\n  spec.csharp:\n  - uid: System.Activities.InArgument`1\n    name: InArgument\n    nameWithType: InArgument\n    fullName: InArgument<T2>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T2\n    name: T2\n    nameWithType: T2\n    fullName: T2\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.InvokeAction`3.Argument3\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Argument3\n  nameWithType: InvokeAction<T1,T2,T3>.Argument3\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Argument3\n- uid: System.Activities.InArgument{T3}\n  parent: System.Activities\n  isExternal: false\n  name: InArgument<T3>\n  nameWithType: InArgument<T3>\n  fullName: System.Activities.InArgument<T3>\n  spec.csharp:\n  - uid: System.Activities.InArgument`1\n    name: InArgument\n    nameWithType: InArgument\n    fullName: InArgument<T3>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T3\n    name: T3\n    nameWithType: T3\n    fullName: T3\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.InvokeAction`3.Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Execute(NativeActivityContext)\n  nameWithType: InvokeAction<T1,T2,T3>.Execute(NativeActivityContext)\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.Execute(NativeActivityContext)\n- uid: System.Activities.NativeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityContext\n  nameWithType: NativeActivityContext\n  fullName: System.Activities.NativeActivityContext\n- uid: System.Activities.Statements.InvokeAction`3.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  nameWithType: InvokeAction<T1,T2,T3>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  fullName: System.Activities.Statements.InvokeAction<T1,T2,T3>.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n- uid: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n  parent: System.Activities.DynamicUpdate\n  isExternal: false\n  name: NativeActivityUpdateMapMetadata\n  nameWithType: NativeActivityUpdateMapMetadata\n  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.Activities.Statements.InvokeAction`3.#ctor*\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: InvokeAction<T1,T2,T3>\n  nameWithType: InvokeAction<T1,T2,T3>.InvokeAction<T1,T2,T3>\n- uid: System.Activities.Statements.InvokeAction`3.Action*\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Action\n  nameWithType: InvokeAction<T1,T2,T3>.Action\n- uid: System.Activities.Statements.InvokeAction`3.Argument1*\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Argument1\n  nameWithType: InvokeAction<T1,T2,T3>.Argument1\n- uid: System.Activities.Statements.InvokeAction`3.Argument2*\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Argument2\n  nameWithType: InvokeAction<T1,T2,T3>.Argument2\n- uid: System.Activities.Statements.InvokeAction`3.Argument3*\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Argument3\n  nameWithType: InvokeAction<T1,T2,T3>.Argument3\n- uid: System.Activities.Statements.InvokeAction`3.Execute*\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: Execute\n  nameWithType: InvokeAction<T1,T2,T3>.Execute\n- uid: System.Activities.Statements.InvokeAction`3.OnCreateDynamicUpdateMap*\n  parent: System.Activities.Statements.InvokeAction`3\n  isExternal: false\n  name: OnCreateDynamicUpdateMap\n  nameWithType: InvokeAction<T1,T2,T3>.OnCreateDynamicUpdateMap\n"}