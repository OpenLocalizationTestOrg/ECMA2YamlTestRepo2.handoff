{"nodes":[{"pos":[2492,2646],"content":"Provides application-management functions and application services to a managed application within its application domain. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides application-management functions and application services to a managed application within its application domain. This class cannot be inherited.","pos":[0,154],"nodes":[{"content":"Provides application-management functions and application services to a managed application within its application domain.","pos":[0,122]},{"content":"This class cannot be inherited.","pos":[123,154]}]}]},{"pos":[2658,2833],"content":"Each managed application domain contains a static instance of the HostingEnvironment class, which provides access to application-management functions and application services.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Each managed application domain contains a static instance of the HostingEnvironment class, which provides access to application-management functions and application services.","pos":[0,175]}]},{"pos":[3970,4069],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.HostingEnvironment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> class."},{"pos":[4081,4449],"content":"The HostingEnvironment constructor initializes the <xref:System.Web.Hosting.HostingEnvironment> object. The HostingEnvironment constructor is called only once by the application's <xref:System.Web.Hosting.ApplicationManager> object. Calling the HostingEnvironment constructor more than once will cause an <xref:System.InvalidOperationException> exception to be thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The HostingEnvironment constructor initializes the <xref:System.Web.Hosting.HostingEnvironment> object. The HostingEnvironment constructor is called only once by the application's <xref:System.Web.Hosting.ApplicationManager> object. Calling the HostingEnvironment constructor more than once will cause an <xref:System.InvalidOperationException> exception to be thrown.","pos":[0,368],"nodes":[{"content":"The HostingEnvironment constructor initializes the &lt;xref:System.Web.Hosting.HostingEnvironment&gt; object.","pos":[0,103],"source":"The HostingEnvironment constructor initializes the <xref:System.Web.Hosting.HostingEnvironment> object."},{"content":"The HostingEnvironment constructor is called only once by the application's &lt;xref:System.Web.Hosting.ApplicationManager&gt; object.","pos":[104,232],"source":" The HostingEnvironment constructor is called only once by the application's <xref:System.Web.Hosting.ApplicationManager> object."},{"content":"Calling the HostingEnvironment constructor more than once will cause an &lt;xref:System.InvalidOperationException&gt; exception to be thrown.","pos":[233,368],"source":" Calling the HostingEnvironment constructor more than once will cause an <xref:System.InvalidOperationException> exception to be thrown."}]}]},{"pos":[4703,4763],"content":"The HostingEnvironment constructor is called more than once.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HostingEnvironment constructor is called more than once.","pos":[0,60]}]},{"pos":[5168,5317],"content":"This property supports the <ph id=\"ph1\">[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]</ph> infrastructure and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"source":"This property supports the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] infrastructure and is not intended to be used directly from your code."},{"pos":[5495,5558],"content":"An object that contains information about the application host.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains information about the application host.","pos":[0,63]}]},{"pos":[6037,6083],"content":"Gets the unique identifier of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the unique identifier of the application.","pos":[0,46]}]},{"pos":[6095,6234],"content":"The application must be running with <xref:System.Web.AspNetHostingPermissionLevel> set to high trust to access the ApplicationID property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The application must be running with &lt;xref:System.Web.AspNetHostingPermissionLevel&gt; set to high trust to access the ApplicationID property.","pos":[0,139],"source":"The application must be running with <xref:System.Web.AspNetHostingPermissionLevel> set to high trust to access the ApplicationID property."}]},{"pos":[6359,6400],"content":"The unique identifier of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unique identifier of the application.","pos":[0,41]}]},{"pos":[6927,6989],"content":"Gets the physical path on disk to the application's directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the physical path on disk to the application's directory.","pos":[0,62]}]},{"pos":[7681,7738],"content":"The physical path on disk to the application's directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"The physical path on disk to the application's directory.","pos":[0,57]}]},{"pos":[8270,8316],"content":"Gets the root virtual path of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the root virtual path of the application.","pos":[0,46]}]},{"pos":[8328,8520],"content":"The ApplicationVirtualPath property always returns \"`/\"` as the first character of the returned value. If the application is located in the root of the website, the return value is just \"`/\"`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ApplicationVirtualPath property always returns \"<ph id=\"ph1\">`/\"`</ph> as the first character of the returned value.","pos":[0,102],"source":"The ApplicationVirtualPath property always returns \"`/\"` as the first character of the returned value."},{"content":"If the application is located in the root of the website, the return value is just \"<ph id=\"ph1\">`/\"`</ph>.","pos":[103,192],"source":" If the application is located in the root of the website, the return value is just \"`/\"`."}]},{"pos":[8654,8722],"content":"The root virtual path of the application with no trailing slash (/).","needQuote":true,"needEscape":true,"nodes":[{"content":"The root virtual path of the application with no trailing slash (/).","pos":[0,68]}]},{"pos":[9168,9260],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Web.Caching.Cache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance for the current application.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Web.Caching.Cache\"></xref> instance for the current application."},{"pos":[9406,9473],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Web.Caching.Cache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Web.Caching.Cache\"></xref> instance."},{"pos":[9971,10038],"content":"Reduces the count of busy objects in the hosted environment by one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reduces the count of busy objects in the hosted environment by one.","pos":[0,67]}]},{"pos":[10051,10572],"content":"When a busy registered object finishes its work, it calls the DecrementBusyCount method to signal the <xref:System.Web.Hosting.HostingEnvironment> object that it has completed processing and to reduce the count of busy objects by one.       If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.       There must be a call to the DecrementBusyCount method for each call to the <xref:System.Web.Hosting.HostingEnvironment.IncrementBusyCount%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a busy registered object finishes its work, it calls the DecrementBusyCount method to signal the <xref:System.Web.Hosting.HostingEnvironment> object that it has completed processing and to reduce the count of busy objects by one.       If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.       There must be a call to the DecrementBusyCount method for each call to the <xref:System.Web.Hosting.HostingEnvironment.IncrementBusyCount%2A> method.","pos":[0,517],"nodes":[{"content":"When a busy registered object finishes its work, it calls the DecrementBusyCount method to signal the &lt;xref:System.Web.Hosting.HostingEnvironment&gt; object that it has completed processing and to reduce the count of busy objects by one.","pos":[0,234],"source":"When a busy registered object finishes its work, it calls the DecrementBusyCount method to signal the <xref:System.Web.Hosting.HostingEnvironment> object that it has completed processing and to reduce the count of busy objects by one."},{"content":"If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.","pos":[241,361]},{"content":"There must be a call to the DecrementBusyCount method for each call to the &lt;xref:System.Web.Hosting.HostingEnvironment.IncrementBusyCount%2A&gt; method.","pos":[368,517],"source":"       There must be a call to the DecrementBusyCount method for each call to the <xref:System.Web.Hosting.HostingEnvironment.IncrementBusyCount%2A> method."}]}]},{"pos":[11133,11195],"content":"Impersonates the user represented by the application identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Impersonates the user represented by the application identity.","pos":[0,62]}]},{"pos":[11342,11500],"content":"An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IDisposable&gt; object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.","pos":[0,158],"source":"An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context."}]},{"pos":[11672,11703],"content":"The process cannot impersonate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The process cannot impersonate.","pos":[0,31]}]},{"pos":[12140,12202],"content":"Impersonates the user represented by the specified user token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Impersonates the user represented by the specified user token.","pos":[0,62]}]},{"pos":[12357,12395],"content":"The handle of a Windows account token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle of a Windows account token.","pos":[0,38]}]},{"pos":[12458,12616],"content":"An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IDisposable&gt; object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.","pos":[0,158],"source":"An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context."}]},{"pos":[12788,12819],"content":"The process cannot impersonate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The process cannot impersonate.","pos":[0,31]}]},{"pos":[13305,13427],"content":"Impersonates the user specified by the configuration settings for the specified virtual path, or the specified user token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Impersonates the user specified by the configuration settings for the specified virtual path, or the specified user token.","pos":[0,122]}]},{"pos":[13439,13724],"content":"The Impersonate method impersonates the user that results after applying all  elements in the configuration settings affecting the specified virtual path. If an `identity` element is not specified for the virtual path, the Impersonate method impersonates the specified Windows account.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Impersonate method impersonates the user that results after applying all  elements in the configuration settings affecting the specified virtual path.","pos":[0,154]},{"content":"If an <ph id=\"ph1\">`identity`</ph> element is not specified for the virtual path, the Impersonate method impersonates the specified Windows account.","pos":[155,285],"source":" If an `identity` element is not specified for the virtual path, the Impersonate method impersonates the specified Windows account."}]},{"pos":[13907,13945],"content":"The handle of a Windows account token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle of a Windows account token.","pos":[0,38]}]},{"pos":[14013,14048],"content":"The path to the requested resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path to the requested resource.","pos":[0,35]}]},{"pos":[14111,14269],"content":"An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IDisposable&gt; object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.","pos":[0,158],"source":"An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context."}]},{"pos":[14441,14472],"content":"The process cannot impersonate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The process cannot impersonate.","pos":[0,31]}]},{"pos":[14902,15001],"content":"Gets a value that indicates whether the hosting environment has access to the ASP.NET build system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the hosting environment has access to the ASP.NET build system.","pos":[0,99]}]},{"pos":[15132,15442],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the application domain is the ASP.NET hosted application domain used in <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_ClientBuildManager\" name=\"ClientBuildManager\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> scenarios; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the application domain is the ASP.NET hosted application domain used in <xref uid=\"langword_csharp_ClientBuildManager\" name=\"ClientBuildManager\" href=\"\"></xref> scenarios; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15955,16024],"content":"Increases the count of busy objects in the hosted environment by one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Increases the count of busy objects in the hosted environment by one.","pos":[0,69]}]},{"pos":[16037,16474],"content":"Registered objects signal the <xref:System.Web.Hosting.HostingEnvironment> object that it is running and to increase the count of busy objects by one.       If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.       There must be a call to the <xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A> method for each call to the IncrementBusyCount method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Registered objects signal the <xref:System.Web.Hosting.HostingEnvironment> object that it is running and to increase the count of busy objects by one.       If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.       There must be a call to the <xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A> method for each call to the IncrementBusyCount method.","pos":[0,433],"nodes":[{"content":"Registered objects signal the &lt;xref:System.Web.Hosting.HostingEnvironment&gt; object that it is running and to increase the count of busy objects by one.","pos":[0,150],"source":"Registered objects signal the <xref:System.Web.Hosting.HostingEnvironment> object that it is running and to increase the count of busy objects by one."},{"content":"If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.","pos":[157,277]},{"content":"There must be a call to the &lt;xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A&gt; method for each call to the IncrementBusyCount method.","pos":[284,433],"source":"       There must be a call to the <xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A> method for each call to the IncrementBusyCount method."}]}]},{"pos":[17091,17212],"content":"Gets any exception thrown during initialization of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.HostingEnvironment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets any exception thrown during initialization of the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> object."},{"pos":[17353,17567],"content":"The exception thrown during initialization of the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> object. If no exception was thrown, returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception thrown during initialization of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.HostingEnvironment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,116],"source":"The exception thrown during initialization of the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> object."},{"content":"If no exception was thrown, returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[117,214],"source":" If no exception was thrown, returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[18118,18256],"content":"Gives the <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.HostingEnvironment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object an infinite lifetime by preventing a lease from being created.","needQuote":true,"needEscape":true,"source":"Gives the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> object an infinite lifetime by preventing a lease from being created."},{"pos":[18268,18531],"content":"This method overrides the <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> method in its base class. It always returns `null` and prevents a lease from being created that would limit the <xref:System.Web.Hosting.HostingEnvironment> object's lifetime.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method overrides the &lt;xref:System.MarshalByRefObject.InitializeLifetimeService%2A&gt; method in its base class.","pos":[0,113],"source":"This method overrides the <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> method in its base class."},{"content":"It always returns <ph id=\"ph1\">`null`</ph> and prevents a lease from being created that would limit the &lt;xref:System.Web.Hosting.HostingEnvironment&gt; object's lifetime.","pos":[114,263],"source":" It always returns `null` and prevents a lease from being created that would limit the <xref:System.Web.Hosting.HostingEnvironment> object's lifetime."}]},{"pos":[18684,18752],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19260,19374],"content":"Starts shutting down the web application associated with this host and removes registered objects from the system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts shutting down the web application associated with this host and removes registered objects from the system.","pos":[0,114]}]},{"pos":[19387,20267],"content":"Use the InitiateShutdown method to stop a web application domain and remove any objects registered with the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A> method. This method returns immediately, before the shutdown is complete.       The <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method is called on each registered object with the passed parameter set to `false` to allow each registered object to shut down asynchronously. After waiting for the amount of time specified in the `shutdownTimeout` attribute of the  configuration element, the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method is called again with the passed parameter set to `true` for each registered object remaining.       Once all registered objects have finished shutting down, the <xref:System.Web.Hosting.HostingEnvironment> objects shuts down the application domain.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the InitiateShutdown method to stop a web application domain and remove any objects registered with the &lt;xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A&gt; method.","pos":[0,178],"source":"Use the InitiateShutdown method to stop a web application domain and remove any objects registered with the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A> method."},{"content":"This method returns immediately, before the shutdown is complete.","pos":[179,244]},{"content":"The &lt;xref:System.Web.Hosting.IRegisteredObject.Stop%2A&gt; method is called on each registered object with the passed parameter set to <ph id=\"ph1\">`false`</ph> to allow each registered object to shut down asynchronously.","pos":[251,451],"source":"       The <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method is called on each registered object with the passed parameter set to `false` to allow each registered object to shut down asynchronously."},{"content":"After waiting for the amount of time specified in the <ph id=\"ph1\">`shutdownTimeout`</ph> attribute of the  configuration element, the &lt;xref:System.Web.Hosting.IRegisteredObject.Stop%2A&gt; method is called again with the passed parameter set to <ph id=\"ph2\">`true`</ph> for each registered object remaining.","pos":[452,721],"source":" After waiting for the amount of time specified in the `shutdownTimeout` attribute of the  configuration element, the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method is called again with the passed parameter set to `true` for each registered object remaining."},{"content":"Once all registered objects have finished shutting down, the &lt;xref:System.Web.Hosting.HostingEnvironment&gt; objects shuts down the application domain.","pos":[728,876],"source":"       Once all registered objects have finished shutting down, the <xref:System.Web.Hosting.HostingEnvironment> objects shuts down the application domain."}]},{"pos":[20885,20976],"content":"Gets a value that indicats whether the current application is in a development environment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicats whether the current application is in a development environment.","pos":[0,91]}]},{"pos":[21111,21298],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the application is in a development environment; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the application is in a development environment; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[21761,21912],"content":"Gets a value indicating whether the current application domain is being hosted by an <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.ApplicationManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the current application domain is being hosted by an <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> object."},{"pos":[22031,22275],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the application domain is hosted by an <bpt id=\"p2\">&lt;xref href=\"System.Web.Hosting.ApplicationManager\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the application domain is hosted by an <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22769,22822],"content":"Maps a virtual path to a physical path on the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps a virtual path to a physical path on the server.","pos":[0,53]}]},{"pos":[22980,23020],"content":"The virtual path (absolute or relative).","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path (absolute or relative).","pos":[0,40]}]},{"pos":[23078,23148],"content":"The physical path on the server specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">virtualPath</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The physical path on the server specified by <code>virtualPath</code>."},{"pos":[23689,23742],"content":"Gets or sets the maximum concurrent requests per CPU.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum concurrent requests per CPU.","pos":[0,53]}]},{"pos":[23882,23922],"content":"The maximum concurrent requests per CPU.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum concurrent requests per CPU.","pos":[0,40]}]},{"pos":[24478,24530],"content":"Gets or sets the maximum concurrent threads per CPU.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum concurrent threads per CPU.","pos":[0,52]}]},{"pos":[24669,24708],"content":"The maximum concurrent threads per CPU.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum concurrent threads per CPU.","pos":[0,39]}]},{"pos":[25212,25359],"content":"This method supports the <ph id=\"ph1\">[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]</ph> infrastructure and is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"source":"This method supports the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] infrastructure and is not intended to be used directly from your code."},{"pos":[26151,26295],"content":"[Supported in the .NET Framework 4.5.2 and later versions]       Schedules a task which can run in the background, independent of any request.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Supported in the .NET Framework 4.5.2 and later versions]       Schedules a task which can run in the background, independent of any request.","pos":[0,142]}]},{"pos":[26309,26853],"content":"Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing. This API cannot be called outside of an ASP.NET-managed AppDomain. The provided CancellationToken will be signaled when the application is shutting down.       QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the callback returns.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing. This API cannot be called outside of an ASP.NET-managed AppDomain. The provided CancellationToken will be signaled when the application is shutting down.       QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the callback returns.","pos":[0,542],"nodes":[{"content":"Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing.","pos":[0,256]},{"content":"This API cannot be called outside of an ASP.NET-managed AppDomain.","pos":[257,323]},{"content":"The provided CancellationToken will be signaled when the application is shutting down.","pos":[324,410]},{"content":"QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the callback returns.","pos":[417,542]}]}]},{"pos":[27092,27112],"content":"A unit of execution.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unit of execution.","pos":[0,20]}]},{"pos":[27892,28036],"content":"[Supported in the .NET Framework 4.5.2 and later versions]       Schedules a task which can run in the background, independent of any request.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Supported in the .NET Framework 4.5.2 and later versions]       Schedules a task which can run in the background, independent of any request.","pos":[0,142]}]},{"pos":[28050,28623],"content":"Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing. This API cannot be called outside of an ASP.NET-managed AppDomain. The provided CancellationToken will be signaled when the application is shutting down.       QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the returned Task transitions to a terminal state.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing. This API cannot be called outside of an ASP.NET-managed AppDomain. The provided CancellationToken will be signaled when the application is shutting down.       QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the returned Task transitions to a terminal state.","pos":[0,571],"nodes":[{"content":"Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing.","pos":[0,256]},{"content":"This API cannot be called outside of an ASP.NET-managed AppDomain.","pos":[257,323]},{"content":"The provided CancellationToken will be signaled when the application is shutting down.","pos":[324,410]},{"content":"QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the returned Task transitions to a terminal state.","pos":[417,571]}]}]},{"pos":[28914,28934],"content":"A unit of execution.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unit of execution.","pos":[0,20]}]},{"pos":[29557,29628],"content":"Places an object in the list of registered objects for the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Places an object in the list of registered objects for the application.","pos":[0,71]}]},{"pos":[29641,31167],"content":"The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain. The RegisterObject method is used to register previously created objects with the hosting environment. Objects registered with the RegisterObject method must implement the <xref:System.Web.Hosting.IRegisteredObject> interface.       To use a registered object, follow these steps:      1.  Create a new instance of your registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method.      2.  Call a type-specific method to initialize your new object. In the initialization method, call the RegisterObject method to add the object to the list of registered objects.      3.  Call the <xref:System.Web.Hosting.ApplicationManager.GetObject%2A?displayProperty=fullName> method to return the registered object when required.      4.  When you wish to stop your object, call the <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method. The <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method in turn calls the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method.      5.  In the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method, have your object call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain. The RegisterObject method is used to register previously created objects with the hosting environment. Objects registered with the RegisterObject method must implement the <xref:System.Web.Hosting.IRegisteredObject> interface.       To use a registered object, follow these steps:      1.  Create a new instance of your registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method.      2.  Call a type-specific method to initialize your new object. In the initialization method, call the RegisterObject method to add the object to the list of registered objects.      3.  Call the <xref:System.Web.Hosting.ApplicationManager.GetObject%2A?displayProperty=fullName> method to return the registered object when required.      4.  When you wish to stop your object, call the <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method. The <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method in turn calls the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method.      5.  In the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method, have your object call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method.","pos":[0,1514],"nodes":[{"content":"The &lt;xref:System.Web.Hosting.ApplicationManager&gt; class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain.","pos":[0,187],"source":"The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain."},{"content":"The RegisterObject method is used to register previously created objects with the hosting environment.","pos":[188,290]},{"content":"Objects registered with the RegisterObject method must implement the &lt;xref:System.Web.Hosting.IRegisteredObject&gt; interface.","pos":[291,414],"source":" Objects registered with the RegisterObject method must implement the <xref:System.Web.Hosting.IRegisteredObject> interface."},{"content":"To use a registered object, follow these steps:      1.","pos":[421,476]},{"content":"Create a new instance of your registered object by calling the &lt;xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName&gt; method.","pos":[478,634],"source":"  Create a new instance of your registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method."},{"content":"2.","pos":[640,642]},{"content":"Call a type-specific method to initialize your new object.","pos":[644,702]},{"content":"In the initialization method, call the RegisterObject method to add the object to the list of registered objects.","pos":[703,816]},{"content":"3.","pos":[822,824]},{"content":"Call the &lt;xref:System.Web.Hosting.ApplicationManager.GetObject%2A?displayProperty=fullName&gt; method to return the registered object when required.","pos":[826,971],"source":"  Call the <xref:System.Web.Hosting.ApplicationManager.GetObject%2A?displayProperty=fullName> method to return the registered object when required."},{"content":"4.","pos":[977,979]},{"content":"When you wish to stop your object, call the &lt;xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName&gt; method.","pos":[981,1116],"source":"  When you wish to stop your object, call the <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method."},{"content":"The &lt;xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName&gt; method in turn calls the &lt;xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName&gt; method.","pos":[1117,1314],"source":" The <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method in turn calls the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method."},{"content":"5.","pos":[1320,1322]},{"content":"In the &lt;xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName&gt; method, have your object call the &lt;xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A&gt; method.","pos":[1324,1514],"source":"  In the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method, have your object call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method."}]}]},{"pos":[31857,31880],"content":"The object to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to register.","pos":[0,23]}]},{"pos":[32569,32690],"content":"Registers a new <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.VirtualPathProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance with the ASP.NET compilation system.","needQuote":true,"needEscape":true,"source":"Registers a new <xref href=\"System.Web.Hosting.VirtualPathProvider\"></xref> instance with the ASP.NET compilation system."},{"pos":[32703,32968],"content":"The RegisterVirtualPathProvider method adds the specified <xref:System.Web.Hosting.VirtualPathProvider> instance to the application's list of virtual-path providers.       For more information, see the <xref:System.Web.Hosting.VirtualPathProvider> class overview.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The RegisterVirtualPathProvider method adds the specified <xref:System.Web.Hosting.VirtualPathProvider> instance to the application's list of virtual-path providers.       For more information, see the <xref:System.Web.Hosting.VirtualPathProvider> class overview.","pos":[0,263],"nodes":[{"content":"The RegisterVirtualPathProvider method adds the specified &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; instance to the application's list of virtual-path providers.","pos":[0,165],"source":"The RegisterVirtualPathProvider method adds the specified <xref:System.Web.Hosting.VirtualPathProvider> instance to the application's list of virtual-path providers."},{"content":"For more information, see the &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; class overview.","pos":[172,263],"source":"       For more information, see the <xref:System.Web.Hosting.VirtualPathProvider> class overview."}]}]},{"pos":[33792,33902],"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.VirtualPathProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance to add to the compilation system.","needQuote":true,"needEscape":true,"source":"The new <xref href=\"System.Web.Hosting.VirtualPathProvider\"></xref> instance to add to the compilation system."},{"pos":[34387,34474],"content":"Sets the current thread to the culture specified in the application configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the current thread to the culture specified in the application configuration file.","pos":[0,87]}]},{"pos":[34486,34733],"content":"The SetCultures method sets the current thread to the culture specified in the <bpt id=\"p1\">[</bpt>globalization Element (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7)</ept> element in the application's configuration file.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The SetCultures method sets the current thread to the culture specified in the [globalization Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7) element in the application's configuration file."},{"pos":[34880,35021],"content":"An <xref:System.IDisposable> object that represents the culture prior to changing; this object can be used to revert to the previous culture.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IDisposable&gt; object that represents the culture prior to changing; this object can be used to revert to the previous culture.","pos":[0,141],"source":"An <xref:System.IDisposable> object that represents the culture prior to changing; this object can be used to revert to the previous culture."}]},{"pos":[35538,35607],"content":"Sets the current thread to the culture of the specified virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the current thread to the culture of the specified virtual path.","pos":[0,69]}]},{"pos":[35619,35787],"content":"The SetCultures method sets the current thread to the culture that results after applying all  elements in the configuration files affecting the specified virtual path.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SetCultures method sets the current thread to the culture that results after applying all  elements in the configuration files affecting the specified virtual path.","pos":[0,168]}]},{"pos":[35954,36001],"content":"The path that contains the culture information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path that contains the culture information.","pos":[0,47]}]},{"pos":[36064,36205],"content":"An <xref:System.IDisposable> object that represents the culture prior to changing; this object can be used to revert to the previous culture.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IDisposable&gt; object that represents the culture prior to changing; this object can be used to revert to the previous culture.","pos":[0,141],"source":"An <xref:System.IDisposable> object that represents the culture prior to changing; this object can be used to revert to the previous culture."}]},{"pos":[36685,36759],"content":"Returns an enumerated value that indicates why the application terminated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerated value that indicates why the application terminated.","pos":[0,74]}]},{"pos":[36938,37014],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Web.ApplicationShutdownReason\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Web.ApplicationShutdownReason\"></xref> values."},{"pos":[37467,37493],"content":"Gets the name of the site.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the site.","pos":[0,26]}]},{"pos":[37613,37634],"content":"The name of the site.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the site.","pos":[0,21]}]},{"pos":[38104,38303],"content":"[Supported in the .NET Framework 4.5.1 only]       Occurs when the worker process or application pool associated with this host has stopped listening for new requests and will eventually shut down.","needQuote":false,"needEscape":true,"nodes":[{"content":"[Supported in the .NET Framework 4.5.1 only]       Occurs when the worker process or application pool associated with this host has stopped listening for new requests and will eventually shut down.","pos":[0,197]}]},{"pos":[38317,40057],"content":"When an application pool and its associated worker processes are being shut down by IIS, for example when an application pool has reached a scheduled recycle interval, IIS notifies the ASP.NET runtime that the application is shutting down and the worker process for the application pool stops listening for new requests. Applications that use long-running requests, for example [SignalR](http://go.microsoft.com/fwlink/?LinkID=285432) applications, can listen for the StopListening event and gracefully shut down their long-running operations when IIS has initiated the shutdown of an application pool and its associated worker processes.      > [!WARNING] >  There are several design considerations that a developer must consider when implementing the StopListening event:   >    >  1.  The StopListening event is only available for applications that are configured to use the IIS integrated pipeline.   > 2.  Developers must not throw errors from their StopListening implementations; throwing errors will have unpredictable results.   > 3.  Due to the concurrent nature of operations within ASP.NET, there is no guarantee that ASP.NET will call a StopListening event once it has been implemented by a developer.   > 4.  The StopListening event can execute concurrently with other <xref:System.Web.Hosting.IRegisteredObject> notifications.   > 5.  Developers need to be aware that ASP.NET may shut down the application domain while their StopListening event is executing and design their implementations to handle that possibility.   > 6.  StopListening event handlers must not block; blocking implementations will result in deadlocks, and IIS will terminate the worker process when the rapid fail protection interval is reached.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When an application pool and its associated worker processes are being shut down by IIS, for example when an application pool has reached a scheduled recycle interval, IIS notifies the ASP.NET runtime that the application is shutting down and the worker process for the application pool stops listening for new requests.","pos":[0,320]},{"content":"Applications that use long-running requests, for example <bpt id=\"p1\">[</bpt>SignalR<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=285432)</ept> applications, can listen for the StopListening event and gracefully shut down their long-running operations when IIS has initiated the shutdown of an application pool and its associated worker processes.","pos":[321,638],"source":" Applications that use long-running requests, for example [SignalR](http://go.microsoft.com/fwlink/?LinkID=285432) applications, can listen for the StopListening event and gracefully shut down their long-running operations when IIS has initiated the shutdown of an application pool and its associated worker processes."},{"content":"&gt; <ph id=\"ph1\">[!WARNING]</ph> &gt;  There are several design considerations that a developer must consider when implementing the StopListening event:   &gt;    &gt;  1.","pos":[644,786],"source":"      > [!WARNING] >  There are several design considerations that a developer must consider when implementing the StopListening event:   >    >  1."},{"content":"The StopListening event is only available for applications that are configured to use the IIS integrated pipeline.","pos":[788,902]},{"content":"&gt; 2.","pos":[905,909],"source":"   > 2."},{"content":"Developers must not throw errors from their StopListening implementations; throwing errors will have unpredictable results.","pos":[911,1034]},{"content":"&gt; 3.","pos":[1037,1041],"source":"   > 3."},{"content":"Due to the concurrent nature of operations within ASP.NET, there is no guarantee that ASP.NET will call a StopListening event once it has been implemented by a developer.","pos":[1043,1213]},{"content":"&gt; 4.","pos":[1216,1220],"source":"   > 4."},{"content":"The StopListening event can execute concurrently with other &lt;xref:System.Web.Hosting.IRegisteredObject&gt; notifications.","pos":[1222,1340],"source":"  The StopListening event can execute concurrently with other <xref:System.Web.Hosting.IRegisteredObject> notifications."},{"content":"&gt; 5.","pos":[1343,1347],"source":"   > 5."},{"content":"Developers need to be aware that ASP.NET may shut down the application domain while their StopListening event is executing and design their implementations to handle that possibility.","pos":[1349,1532]},{"content":"&gt; 6.","pos":[1535,1539],"source":"   > 6."},{"content":"StopListening event handlers must not block; blocking implementations will result in deadlocks, and IIS will terminate the worker process when the rapid fail protection interval is reached.","pos":[1541,1730]}]},{"pos":[40193,40205],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[40763,40837],"content":"Removes an object from the list of registered objects for the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes an object from the list of registered objects for the application.","pos":[0,74]}]},{"pos":[40849,41142],"content":"The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain. The UnregisterObject method is used to remove previously registered objects from the hosting environment.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain. The UnregisterObject method is used to remove previously registered objects from the hosting environment.","pos":[0,293],"nodes":[{"content":"The &lt;xref:System.Web.Hosting.ApplicationManager&gt; class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain.","pos":[0,187],"source":"The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain."},{"content":"The UnregisterObject method is used to remove previously registered objects from the hosting environment.","pos":[188,293]}]}]},{"pos":[41858,41879],"content":"The object to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to remove.","pos":[0,21]}]},{"pos":[42389,42441],"content":"Gets the virtual path provider for this application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the virtual path provider for this application.","pos":[0,52]}]},{"pos":[42453,42694],"content":"When more than one <xref:System.Web.Hosting.VirtualPathProvider> instance is registered, the <xref:System.Web.Hosting.HostingEnvironment> object manages the call chain. You cannot control the order in which virtual path providers are called.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When more than one <xref:System.Web.Hosting.VirtualPathProvider> instance is registered, the <xref:System.Web.Hosting.HostingEnvironment> object manages the call chain. You cannot control the order in which virtual path providers are called.","pos":[0,241],"nodes":[{"content":"When more than one &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; instance is registered, the &lt;xref:System.Web.Hosting.HostingEnvironment&gt; object manages the call chain.","pos":[0,168],"source":"When more than one <xref:System.Web.Hosting.VirtualPathProvider> instance is registered, the <xref:System.Web.Hosting.HostingEnvironment> object manages the call chain."},{"content":"You cannot control the order in which virtual path providers are called.","pos":[169,241]}]}]},{"pos":[42882,42976],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Hosting.VirtualPathProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance for this application.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Hosting.VirtualPathProvider\"></xref> instance for this application."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Hosting.HostingEnvironment\n  id: HostingEnvironment\n  children:\n  - System.Web.Hosting.HostingEnvironment.#ctor\n  - System.Web.Hosting.HostingEnvironment.ApplicationHost\n  - System.Web.Hosting.HostingEnvironment.ApplicationID\n  - System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath\n  - System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath\n  - System.Web.Hosting.HostingEnvironment.Cache\n  - System.Web.Hosting.HostingEnvironment.DecrementBusyCount\n  - System.Web.Hosting.HostingEnvironment.Impersonate\n  - System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr)\n  - System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr,System.String)\n  - System.Web.Hosting.HostingEnvironment.InClientBuildManager\n  - System.Web.Hosting.HostingEnvironment.IncrementBusyCount\n  - System.Web.Hosting.HostingEnvironment.InitializationException\n  - System.Web.Hosting.HostingEnvironment.InitializeLifetimeService\n  - System.Web.Hosting.HostingEnvironment.InitiateShutdown\n  - System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment\n  - System.Web.Hosting.HostingEnvironment.IsHosted\n  - System.Web.Hosting.HostingEnvironment.MapPath(System.String)\n  - System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU\n  - System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU\n  - System.Web.Hosting.HostingEnvironment.MessageReceived\n  - System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})\n  - System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})\n  - System.Web.Hosting.HostingEnvironment.RegisterObject(System.Web.Hosting.IRegisteredObject)\n  - System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)\n  - System.Web.Hosting.HostingEnvironment.SetCultures\n  - System.Web.Hosting.HostingEnvironment.SetCultures(System.String)\n  - System.Web.Hosting.HostingEnvironment.ShutdownReason\n  - System.Web.Hosting.HostingEnvironment.SiteName\n  - System.Web.Hosting.HostingEnvironment.StopListening\n  - System.Web.Hosting.HostingEnvironment.UnregisterObject(System.Web.Hosting.IRegisteredObject)\n  - System.Web.Hosting.HostingEnvironment.VirtualPathProvider\n  langs:\n  - csharp\n  name: HostingEnvironment\n  nameWithType: HostingEnvironment\n  fullName: System.Web.Hosting.HostingEnvironment\n  type: Class\n  summary: Provides application-management functions and application services to a managed application within its application domain. This class cannot be inherited.\n  remarks: Each managed application domain contains a static instance of the HostingEnvironment class, which provides access to application-management functions and application services.\n  example:\n  - \"The following code example is a webpage that displays the application information available from the HostingEnvironment object.  \\n  \\n [!code-vb[System.Web.Hosting.HostingEnvironment#1](~/add/codesnippet/visualbasic/t-system.web.hosting.hos_1.aspx)]\\n [!code-cs[System.Web.Hosting.HostingEnvironment#1](~/add/codesnippet/csharp/t-system.web.hosting.hos_1.aspx)]\"\n  syntax:\n    content: 'public sealed class HostingEnvironment : MarshalByRefObject'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.#ctor\n  id: '#ctor'\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: HostingEnvironment()\n  nameWithType: HostingEnvironment.HostingEnvironment()\n  fullName: System.Web.Hosting.HostingEnvironment.HostingEnvironment()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> class.\n  remarks: The HostingEnvironment constructor initializes the <xref:System.Web.Hosting.HostingEnvironment> object. The HostingEnvironment constructor is called only once by the application's <xref:System.Web.Hosting.ApplicationManager> object. Calling the HostingEnvironment constructor more than once will cause an <xref:System.InvalidOperationException> exception to be thrown.\n  syntax:\n    content: public HostingEnvironment ();\n    parameters: []\n  overload: System.Web.Hosting.HostingEnvironment.#ctor*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The HostingEnvironment constructor is called more than once.\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationHost\n  id: ApplicationHost\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: ApplicationHost\n  nameWithType: HostingEnvironment.ApplicationHost\n  fullName: System.Web.Hosting.HostingEnvironment.ApplicationHost\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: This property supports the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] infrastructure and is not intended to be used directly from your code.\n  syntax:\n    content: public static System.Web.Hosting.IApplicationHost ApplicationHost { get; }\n    return:\n      type: System.Web.Hosting.IApplicationHost\n      description: An object that contains information about the application host.\n  overload: System.Web.Hosting.HostingEnvironment.ApplicationHost*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationID\n  id: ApplicationID\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: ApplicationID\n  nameWithType: HostingEnvironment.ApplicationID\n  fullName: System.Web.Hosting.HostingEnvironment.ApplicationID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets the unique identifier of the application.\n  remarks: The application must be running with <xref:System.Web.AspNetHostingPermissionLevel> set to high trust to access the ApplicationID property.\n  syntax:\n    content: public static string ApplicationID { get; }\n    return:\n      type: System.String\n      description: The unique identifier of the application.\n  overload: System.Web.Hosting.HostingEnvironment.ApplicationID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath\n  id: ApplicationPhysicalPath\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: ApplicationPhysicalPath\n  nameWithType: HostingEnvironment.ApplicationPhysicalPath\n  fullName: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets the physical path on disk to the application's directory.\n  remarks: ''\n  example:\n  - \"The following code example uses the ApplicationPhysicalPath property to construct a path to a data file in the application's App_Data directory. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \\n  \\n [!code-cs[System.Web.Hosting.VirtualPathProvider#27](~/add/codesnippet/csharp/p-system.web.hosting.hos_1.cs)]\\n [!code-vb[System.Web.Hosting.VirtualPathProvider#27](~/add/codesnippet/visualbasic/p-system.web.hosting.hos_1.vb)]\"\n  syntax:\n    content: public static string ApplicationPhysicalPath { get; }\n    return:\n      type: System.String\n      description: The physical path on disk to the application's directory.\n  overload: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath\n  id: ApplicationVirtualPath\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: ApplicationVirtualPath\n  nameWithType: HostingEnvironment.ApplicationVirtualPath\n  fullName: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets the root virtual path of the application.\n  remarks: The ApplicationVirtualPath property always returns \"`/\"` as the first character of the returned value. If the application is located in the root of the website, the return value is just \"`/\"`.\n  syntax:\n    content: public static string ApplicationVirtualPath { get; }\n    return:\n      type: System.String\n      description: The root virtual path of the application with no trailing slash (/).\n  overload: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.Cache\n  id: Cache\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: Cache\n  nameWithType: HostingEnvironment.Cache\n  fullName: System.Web.Hosting.HostingEnvironment.Cache\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets the <xref href=\"System.Web.Caching.Cache\"></xref> instance for the current application.\n  syntax:\n    content: public static System.Web.Caching.Cache Cache { get; }\n    return:\n      type: System.Web.Caching.Cache\n      description: The current <xref href=\"System.Web.Caching.Cache\"></xref> instance.\n  overload: System.Web.Hosting.HostingEnvironment.Cache*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.DecrementBusyCount\n  id: DecrementBusyCount\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: DecrementBusyCount()\n  nameWithType: HostingEnvironment.DecrementBusyCount()\n  fullName: System.Web.Hosting.HostingEnvironment.DecrementBusyCount()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Reduces the count of busy objects in the hosted environment by one.\n  remarks: \"When a busy registered object finishes its work, it calls the DecrementBusyCount method to signal the <xref:System.Web.Hosting.HostingEnvironment> object that it has completed processing and to reduce the count of busy objects by one.  \\n  \\n If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.  \\n  \\n There must be a call to the DecrementBusyCount method for each call to the <xref:System.Web.Hosting.HostingEnvironment.IncrementBusyCount%2A> method.\"\n  syntax:\n    content: public static void DecrementBusyCount ();\n    parameters: []\n  overload: System.Web.Hosting.HostingEnvironment.DecrementBusyCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.Impersonate\n  id: Impersonate\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: Impersonate()\n  nameWithType: HostingEnvironment.Impersonate()\n  fullName: System.Web.Hosting.HostingEnvironment.Impersonate()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Impersonates the user represented by the application identity.\n  syntax:\n    content: public static IDisposable Impersonate ();\n    parameters: []\n    return:\n      type: System.IDisposable\n      description: An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.\n  overload: System.Web.Hosting.HostingEnvironment.Impersonate*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The process cannot impersonate.\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr)\n  id: Impersonate(System.IntPtr)\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: Impersonate(IntPtr)\n  nameWithType: HostingEnvironment.Impersonate(IntPtr)\n  fullName: System.Web.Hosting.HostingEnvironment.Impersonate(IntPtr)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Impersonates the user represented by the specified user token.\n  syntax:\n    content: public static IDisposable Impersonate (IntPtr token);\n    parameters:\n    - id: token\n      type: System.IntPtr\n      description: The handle of a Windows account token.\n    return:\n      type: System.IDisposable\n      description: An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.\n  overload: System.Web.Hosting.HostingEnvironment.Impersonate*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The process cannot impersonate.\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr,System.String)\n  id: Impersonate(System.IntPtr,System.String)\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: Impersonate(IntPtr,String)\n  nameWithType: HostingEnvironment.Impersonate(IntPtr,String)\n  fullName: System.Web.Hosting.HostingEnvironment.Impersonate(IntPtr,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Impersonates the user specified by the configuration settings for the specified virtual path, or the specified user token.\n  remarks: The Impersonate method impersonates the user that results after applying all  elements in the configuration settings affecting the specified virtual path. If an `identity` element is not specified for the virtual path, the Impersonate method impersonates the specified Windows account.\n  syntax:\n    content: public static IDisposable Impersonate (IntPtr userToken, string virtualPath);\n    parameters:\n    - id: userToken\n      type: System.IntPtr\n      description: The handle of a Windows account token.\n    - id: virtualPath\n      type: System.String\n      description: The path to the requested resource.\n    return:\n      type: System.IDisposable\n      description: An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.\n  overload: System.Web.Hosting.HostingEnvironment.Impersonate*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The process cannot impersonate.\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.InClientBuildManager\n  id: InClientBuildManager\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: InClientBuildManager\n  nameWithType: HostingEnvironment.InClientBuildManager\n  fullName: System.Web.Hosting.HostingEnvironment.InClientBuildManager\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets a value that indicates whether the hosting environment has access to the ASP.NET build system.\n  syntax:\n    content: public static bool InClientBuildManager { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the application domain is the ASP.NET hosted application domain used in <xref uid=\"langword_csharp_ClientBuildManager\" name=\"ClientBuildManager\" href=\"\"></xref> scenarios; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Hosting.HostingEnvironment.InClientBuildManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.IncrementBusyCount\n  id: IncrementBusyCount\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: IncrementBusyCount()\n  nameWithType: HostingEnvironment.IncrementBusyCount()\n  fullName: System.Web.Hosting.HostingEnvironment.IncrementBusyCount()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Increases the count of busy objects in the hosted environment by one.\n  remarks: \"Registered objects signal the <xref:System.Web.Hosting.HostingEnvironment> object that it is running and to increase the count of busy objects by one.  \\n  \\n If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.  \\n  \\n There must be a call to the <xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A> method for each call to the IncrementBusyCount method.\"\n  syntax:\n    content: public static void IncrementBusyCount ();\n    parameters: []\n  overload: System.Web.Hosting.HostingEnvironment.IncrementBusyCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.InitializationException\n  id: InitializationException\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: InitializationException\n  nameWithType: HostingEnvironment.InitializationException\n  fullName: System.Web.Hosting.HostingEnvironment.InitializationException\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets any exception thrown during initialization of the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> object.\n  syntax:\n    content: public static Exception InitializationException { get; }\n    return:\n      type: System.Exception\n      description: The exception thrown during initialization of the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> object. If no exception was thrown, returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Web.Hosting.HostingEnvironment.InitializationException*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService\n  id: InitializeLifetimeService\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: InitializeLifetimeService()\n  nameWithType: HostingEnvironment.InitializeLifetimeService()\n  fullName: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gives the <xref href=\"System.Web.Hosting.HostingEnvironment\"></xref> object an infinite lifetime by preventing a lease from being created.\n  remarks: This method overrides the <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> method in its base class. It always returns `null` and prevents a lease from being created that would limit the <xref:System.Web.Hosting.HostingEnvironment> object's lifetime.\n  syntax:\n    content: public override object InitializeLifetimeService ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.InitiateShutdown\n  id: InitiateShutdown\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: InitiateShutdown()\n  nameWithType: HostingEnvironment.InitiateShutdown()\n  fullName: System.Web.Hosting.HostingEnvironment.InitiateShutdown()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Starts shutting down the web application associated with this host and removes registered objects from the system.\n  remarks: \"Use the InitiateShutdown method to stop a web application domain and remove any objects registered with the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A> method. This method returns immediately, before the shutdown is complete.  \\n  \\n The <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method is called on each registered object with the passed parameter set to `false` to allow each registered object to shut down asynchronously. After waiting for the amount of time specified in the `shutdownTimeout` attribute of the  configuration element, the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method is called again with the passed parameter set to `true` for each registered object remaining.  \\n  \\n Once all registered objects have finished shutting down, the <xref:System.Web.Hosting.HostingEnvironment> objects shuts down the application domain.\"\n  syntax:\n    content: public static void InitiateShutdown ();\n    parameters: []\n  overload: System.Web.Hosting.HostingEnvironment.InitiateShutdown*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment\n  id: IsDevelopmentEnvironment\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: IsDevelopmentEnvironment\n  nameWithType: HostingEnvironment.IsDevelopmentEnvironment\n  fullName: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets a value that indicats whether the current application is in a development environment.\n  syntax:\n    content: public static bool IsDevelopmentEnvironment { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the application is in a development environment; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.IsHosted\n  id: IsHosted\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: IsHosted\n  nameWithType: HostingEnvironment.IsHosted\n  fullName: System.Web.Hosting.HostingEnvironment.IsHosted\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets a value indicating whether the current application domain is being hosted by an <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> object.\n  syntax:\n    content: public static bool IsHosted { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the application domain is hosted by an <xref href=\"System.Web.Hosting.ApplicationManager\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Hosting.HostingEnvironment.IsHosted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.MapPath(System.String)\n  id: MapPath(System.String)\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: MapPath(String)\n  nameWithType: HostingEnvironment.MapPath(String)\n  fullName: System.Web.Hosting.HostingEnvironment.MapPath(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Maps a virtual path to a physical path on the server.\n  syntax:\n    content: public static string MapPath (string virtualPath);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The virtual path (absolute or relative).\n    return:\n      type: System.String\n      description: The physical path on the server specified by <code>virtualPath</code>.\n  overload: System.Web.Hosting.HostingEnvironment.MapPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU\n  id: MaxConcurrentRequestsPerCPU\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: MaxConcurrentRequestsPerCPU\n  nameWithType: HostingEnvironment.MaxConcurrentRequestsPerCPU\n  fullName: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets or sets the maximum concurrent requests per CPU.\n  syntax:\n    content: public static int MaxConcurrentRequestsPerCPU { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum concurrent requests per CPU.\n  overload: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU\n  id: MaxConcurrentThreadsPerCPU\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: MaxConcurrentThreadsPerCPU\n  nameWithType: HostingEnvironment.MaxConcurrentThreadsPerCPU\n  fullName: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets or sets the maximum concurrent threads per CPU.\n  syntax:\n    content: public static int MaxConcurrentThreadsPerCPU { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum concurrent threads per CPU.\n  overload: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.MessageReceived\n  id: MessageReceived\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: MessageReceived()\n  nameWithType: HostingEnvironment.MessageReceived()\n  fullName: System.Web.Hosting.HostingEnvironment.MessageReceived()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: This method supports the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] infrastructure and is not intended to be used directly from your code.\n  syntax:\n    content: public static void MessageReceived ();\n    parameters: []\n  overload: System.Web.Hosting.HostingEnvironment.MessageReceived*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})\n  id: QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: QueueBackgroundWorkItem(Action<CancellationToken>)\n  nameWithType: HostingEnvironment.QueueBackgroundWorkItem(Action<CancellationToken>)\n  fullName: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(Action<CancellationToken>)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: \"[Supported in the .NET Framework 4.5.2 and later versions]  \\n  \\n Schedules a task which can run in the background, independent of any request.\"\n  remarks: \"Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing. This API cannot be called outside of an ASP.NET-managed AppDomain. The provided CancellationToken will be signaled when the application is shutting down.  \\n  \\n QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the callback returns.\"\n  syntax:\n    content: public static void QueueBackgroundWorkItem (Action<System.Threading.CancellationToken> workItem);\n    parameters:\n    - id: workItem\n      type: System.Action{System.Threading.CancellationToken}\n      description: A unit of execution.\n  overload: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})\n  id: QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: QueueBackgroundWorkItem(Func<CancellationToken,Task>)\n  nameWithType: HostingEnvironment.QueueBackgroundWorkItem(Func<CancellationToken,Task>)\n  fullName: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(Func<CancellationToken,Task>)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: \"[Supported in the .NET Framework 4.5.2 and later versions]  \\n  \\n Schedules a task which can run in the background, independent of any request.\"\n  remarks: \"Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing. This API cannot be called outside of an ASP.NET-managed AppDomain. The provided CancellationToken will be signaled when the application is shutting down.  \\n  \\n QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the returned Task transitions to a terminal state.\"\n  syntax:\n    content: public static void QueueBackgroundWorkItem (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> workItem);\n    parameters:\n    - id: workItem\n      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}\n      description: A unit of execution.\n  overload: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.RegisterObject(System.Web.Hosting.IRegisteredObject)\n  id: RegisterObject(System.Web.Hosting.IRegisteredObject)\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: RegisterObject(IRegisteredObject)\n  nameWithType: HostingEnvironment.RegisterObject(IRegisteredObject)\n  fullName: System.Web.Hosting.HostingEnvironment.RegisterObject(IRegisteredObject)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Places an object in the list of registered objects for the application.\n  remarks: \"The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain. The RegisterObject method is used to register previously created objects with the hosting environment. Objects registered with the RegisterObject method must implement the <xref:System.Web.Hosting.IRegisteredObject> interface.  \\n  \\n To use a registered object, follow these steps:  \\n  \\n1.  Create a new instance of your registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method.  \\n  \\n2.  Call a type-specific method to initialize your new object. In the initialization method, call the RegisterObject method to add the object to the list of registered objects.  \\n  \\n3.  Call the <xref:System.Web.Hosting.ApplicationManager.GetObject%2A?displayProperty=fullName> method to return the registered object when required.  \\n  \\n4.  When you wish to stop your object, call the <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method. The <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method in turn calls the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method.  \\n  \\n5.  In the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method, have your object call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method.\"\n  example:\n  - \"The following code example is an implementation of a `Start` method for a registered object. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.IRegisteredObject> interface overview topic.  \\n  \\n [!code-cs[System.Web.Hosting.ApplicationManager#2](~/add/codesnippet/csharp/2fd0c065-ec76-48c8-bbb1-_1.cs)]\\n [!code-vb[System.Web.Hosting.ApplicationManager#2](~/add/codesnippet/visualbasic/2fd0c065-ec76-48c8-bbb1-_1.vb)]\"\n  syntax:\n    content: public static void RegisterObject (System.Web.Hosting.IRegisteredObject obj);\n    parameters:\n    - id: obj\n      type: System.Web.Hosting.IRegisteredObject\n      description: The object to register.\n  overload: System.Web.Hosting.HostingEnvironment.RegisterObject*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)\n  id: RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: RegisterVirtualPathProvider(VirtualPathProvider)\n  nameWithType: HostingEnvironment.RegisterVirtualPathProvider(VirtualPathProvider)\n  fullName: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(VirtualPathProvider)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Registers a new <xref href=\"System.Web.Hosting.VirtualPathProvider\"></xref> instance with the ASP.NET compilation system.\n  remarks: \"The RegisterVirtualPathProvider method adds the specified <xref:System.Web.Hosting.VirtualPathProvider> instance to the application's list of virtual-path providers.  \\n  \\n For more information, see the <xref:System.Web.Hosting.VirtualPathProvider> class overview.\"\n  example:\n  - \"The following code example is part of an application startup method that registers a custom <xref:System.Web.Hosting.VirtualPathProvider> instance with the compilation system. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \\n  \\n [!code-vb[System.Web.Hosting.VirtualPathProvider#11](~/add/codesnippet/visualbasic/6c4fefcc-d45a-4168-86ab-_1.vb)]\\n [!code-cs[System.Web.Hosting.VirtualPathProvider#11](~/add/codesnippet/csharp/6c4fefcc-d45a-4168-86ab-_1.cs)]\"\n  syntax:\n    content: public static void RegisterVirtualPathProvider (System.Web.Hosting.VirtualPathProvider virtualPathProvider);\n    parameters:\n    - id: virtualPathProvider\n      type: System.Web.Hosting.VirtualPathProvider\n      description: The new <xref href=\"System.Web.Hosting.VirtualPathProvider\"></xref> instance to add to the compilation system.\n  overload: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.SetCultures\n  id: SetCultures\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: SetCultures()\n  nameWithType: HostingEnvironment.SetCultures()\n  fullName: System.Web.Hosting.HostingEnvironment.SetCultures()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Sets the current thread to the culture specified in the application configuration file.\n  remarks: The SetCultures method sets the current thread to the culture specified in the [globalization Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7) element in the application's configuration file.\n  syntax:\n    content: public static IDisposable SetCultures ();\n    parameters: []\n    return:\n      type: System.IDisposable\n      description: An <xref:System.IDisposable> object that represents the culture prior to changing; this object can be used to revert to the previous culture.\n  overload: System.Web.Hosting.HostingEnvironment.SetCultures*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.SetCultures(System.String)\n  id: SetCultures(System.String)\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: SetCultures(String)\n  nameWithType: HostingEnvironment.SetCultures(String)\n  fullName: System.Web.Hosting.HostingEnvironment.SetCultures(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Sets the current thread to the culture of the specified virtual path.\n  remarks: The SetCultures method sets the current thread to the culture that results after applying all  elements in the configuration files affecting the specified virtual path.\n  syntax:\n    content: public static IDisposable SetCultures (string virtualPath);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The path that contains the culture information.\n    return:\n      type: System.IDisposable\n      description: An <xref:System.IDisposable> object that represents the culture prior to changing; this object can be used to revert to the previous culture.\n  overload: System.Web.Hosting.HostingEnvironment.SetCultures*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.ShutdownReason\n  id: ShutdownReason\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: ShutdownReason\n  nameWithType: HostingEnvironment.ShutdownReason\n  fullName: System.Web.Hosting.HostingEnvironment.ShutdownReason\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Returns an enumerated value that indicates why the application terminated.\n  syntax:\n    content: public static System.Web.ApplicationShutdownReason ShutdownReason { get; }\n    return:\n      type: System.Web.ApplicationShutdownReason\n      description: One of the <xref href=\"System.Web.ApplicationShutdownReason\"></xref> values.\n  overload: System.Web.Hosting.HostingEnvironment.ShutdownReason*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.SiteName\n  id: SiteName\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: SiteName\n  nameWithType: HostingEnvironment.SiteName\n  fullName: System.Web.Hosting.HostingEnvironment.SiteName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets the name of the site.\n  syntax:\n    content: public static string SiteName { get; }\n    return:\n      type: System.String\n      description: The name of the site.\n  overload: System.Web.Hosting.HostingEnvironment.SiteName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.StopListening\n  id: StopListening\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: StopListening\n  nameWithType: HostingEnvironment.StopListening\n  fullName: System.Web.Hosting.HostingEnvironment.StopListening\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: \"[Supported in the .NET Framework 4.5.1 only]  \\n  \\n Occurs when the worker process or application pool associated with this host has stopped listening for new requests and will eventually shut down.\"\n  remarks: \"When an application pool and its associated worker processes are being shut down by IIS, for example when an application pool has reached a scheduled recycle interval, IIS notifies the ASP.NET runtime that the application is shutting down and the worker process for the application pool stops listening for new requests. Applications that use long-running requests, for example [SignalR](http://go.microsoft.com/fwlink/?LinkID=285432) applications, can listen for the StopListening event and gracefully shut down their long-running operations when IIS has initiated the shutdown of an application pool and its associated worker processes.  \\n  \\n> [!WARNING]\\n>  There are several design considerations that a developer must consider when implementing the StopListening event:  \\n>   \\n>  1.  The StopListening event is only available for applications that are configured to use the IIS integrated pipeline.  \\n> 2.  Developers must not throw errors from their StopListening implementations; throwing errors will have unpredictable results.  \\n> 3.  Due to the concurrent nature of operations within ASP.NET, there is no guarantee that ASP.NET will call a StopListening event once it has been implemented by a developer.  \\n> 4.  The StopListening event can execute concurrently with other <xref:System.Web.Hosting.IRegisteredObject> notifications.  \\n> 5.  Developers need to be aware that ASP.NET may shut down the application domain while their StopListening event is executing and design their implementations to handle that possibility.  \\n> 6.  StopListening event handlers must not block; blocking implementations will result in deadlocks, and IIS will terminate the worker process when the rapid fail protection interval is reached.\"\n  syntax:\n    content: public static event EventHandler StopListening;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.UnregisterObject(System.Web.Hosting.IRegisteredObject)\n  id: UnregisterObject(System.Web.Hosting.IRegisteredObject)\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: UnregisterObject(IRegisteredObject)\n  nameWithType: HostingEnvironment.UnregisterObject(IRegisteredObject)\n  fullName: System.Web.Hosting.HostingEnvironment.UnregisterObject(IRegisteredObject)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Removes an object from the list of registered objects for the application.\n  remarks: The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain. The UnregisterObject method is used to remove previously registered objects from the hosting environment.\n  example:\n  - \"The following code example is the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method for a registered object. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.IRegisteredObject> interface overview topic.  \\n  \\n [!code-cs[System.Web.Hosting.ApplicationManager#3](~/add/codesnippet/csharp/0c500c41-6bed-4c83-8364-_1.cs)]\\n [!code-vb[System.Web.Hosting.ApplicationManager#3](~/add/codesnippet/visualbasic/0c500c41-6bed-4c83-8364-_1.vb)]\"\n  syntax:\n    content: public static void UnregisterObject (System.Web.Hosting.IRegisteredObject obj);\n    parameters:\n    - id: obj\n      type: System.Web.Hosting.IRegisteredObject\n      description: The object to remove.\n  overload: System.Web.Hosting.HostingEnvironment.UnregisterObject*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Hosting.HostingEnvironment.VirtualPathProvider\n  id: VirtualPathProvider\n  parent: System.Web.Hosting.HostingEnvironment\n  langs:\n  - csharp\n  name: VirtualPathProvider\n  nameWithType: HostingEnvironment.VirtualPathProvider\n  fullName: System.Web.Hosting.HostingEnvironment.VirtualPathProvider\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets the virtual path provider for this application.\n  remarks: When more than one <xref:System.Web.Hosting.VirtualPathProvider> instance is registered, the <xref:System.Web.Hosting.HostingEnvironment> object manages the call chain. You cannot control the order in which virtual path providers are called.\n  syntax:\n    content: public static System.Web.Hosting.VirtualPathProvider VirtualPathProvider { get; }\n    return:\n      type: System.Web.Hosting.VirtualPathProvider\n      description: The <xref href=\"System.Web.Hosting.VirtualPathProvider\"></xref> instance for this application.\n  overload: System.Web.Hosting.HostingEnvironment.VirtualPathProvider*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Web.HttpException\n  parent: System.Web\n  isExternal: false\n  name: HttpException\n  nameWithType: HttpException\n  fullName: System.Web.HttpException\n- uid: System.Web.Hosting.HostingEnvironment.#ctor\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: HostingEnvironment()\n  nameWithType: HostingEnvironment.HostingEnvironment()\n  fullName: System.Web.Hosting.HostingEnvironment.HostingEnvironment()\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationHost\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ApplicationHost\n  nameWithType: HostingEnvironment.ApplicationHost\n  fullName: System.Web.Hosting.HostingEnvironment.ApplicationHost\n- uid: System.Web.Hosting.IApplicationHost\n  parent: System.Web.Hosting\n  isExternal: false\n  name: IApplicationHost\n  nameWithType: IApplicationHost\n  fullName: System.Web.Hosting.IApplicationHost\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationID\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ApplicationID\n  nameWithType: HostingEnvironment.ApplicationID\n  fullName: System.Web.Hosting.HostingEnvironment.ApplicationID\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ApplicationPhysicalPath\n  nameWithType: HostingEnvironment.ApplicationPhysicalPath\n  fullName: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ApplicationVirtualPath\n  nameWithType: HostingEnvironment.ApplicationVirtualPath\n  fullName: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath\n- uid: System.Web.Hosting.HostingEnvironment.Cache\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: Cache\n  nameWithType: HostingEnvironment.Cache\n  fullName: System.Web.Hosting.HostingEnvironment.Cache\n- uid: System.Web.Caching.Cache\n  parent: System.Web.Caching\n  isExternal: false\n  name: Cache\n  nameWithType: Cache\n  fullName: System.Web.Caching.Cache\n- uid: System.Web.Hosting.HostingEnvironment.DecrementBusyCount\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: DecrementBusyCount()\n  nameWithType: HostingEnvironment.DecrementBusyCount()\n  fullName: System.Web.Hosting.HostingEnvironment.DecrementBusyCount()\n- uid: System.Web.Hosting.HostingEnvironment.Impersonate\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: Impersonate()\n  nameWithType: HostingEnvironment.Impersonate()\n  fullName: System.Web.Hosting.HostingEnvironment.Impersonate()\n- uid: System.IDisposable\n  parent: System\n  isExternal: true\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr)\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: Impersonate(IntPtr)\n  nameWithType: HostingEnvironment.Impersonate(IntPtr)\n  fullName: System.Web.Hosting.HostingEnvironment.Impersonate(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr,System.String)\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: Impersonate(IntPtr,String)\n  nameWithType: HostingEnvironment.Impersonate(IntPtr,String)\n  fullName: System.Web.Hosting.HostingEnvironment.Impersonate(IntPtr,String)\n- uid: System.Web.Hosting.HostingEnvironment.InClientBuildManager\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: InClientBuildManager\n  nameWithType: HostingEnvironment.InClientBuildManager\n  fullName: System.Web.Hosting.HostingEnvironment.InClientBuildManager\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Hosting.HostingEnvironment.IncrementBusyCount\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: IncrementBusyCount()\n  nameWithType: HostingEnvironment.IncrementBusyCount()\n  fullName: System.Web.Hosting.HostingEnvironment.IncrementBusyCount()\n- uid: System.Web.Hosting.HostingEnvironment.InitializationException\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: InitializationException\n  nameWithType: HostingEnvironment.InitializationException\n  fullName: System.Web.Hosting.HostingEnvironment.InitializationException\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: HostingEnvironment.InitializeLifetimeService()\n  fullName: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.Hosting.HostingEnvironment.InitiateShutdown\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: InitiateShutdown()\n  nameWithType: HostingEnvironment.InitiateShutdown()\n  fullName: System.Web.Hosting.HostingEnvironment.InitiateShutdown()\n- uid: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: IsDevelopmentEnvironment\n  nameWithType: HostingEnvironment.IsDevelopmentEnvironment\n  fullName: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment\n- uid: System.Web.Hosting.HostingEnvironment.IsHosted\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: IsHosted\n  nameWithType: HostingEnvironment.IsHosted\n  fullName: System.Web.Hosting.HostingEnvironment.IsHosted\n- uid: System.Web.Hosting.HostingEnvironment.MapPath(System.String)\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: MapPath(String)\n  nameWithType: HostingEnvironment.MapPath(String)\n  fullName: System.Web.Hosting.HostingEnvironment.MapPath(String)\n- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: MaxConcurrentRequestsPerCPU\n  nameWithType: HostingEnvironment.MaxConcurrentRequestsPerCPU\n  fullName: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: MaxConcurrentThreadsPerCPU\n  nameWithType: HostingEnvironment.MaxConcurrentThreadsPerCPU\n  fullName: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU\n- uid: System.Web.Hosting.HostingEnvironment.MessageReceived\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: MessageReceived()\n  nameWithType: HostingEnvironment.MessageReceived()\n  fullName: System.Web.Hosting.HostingEnvironment.MessageReceived()\n- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: QueueBackgroundWorkItem(Action<CancellationToken>)\n  nameWithType: HostingEnvironment.QueueBackgroundWorkItem(Action<CancellationToken>)\n  fullName: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(Action<CancellationToken>)\n- uid: System.Action{System.Threading.CancellationToken}\n  parent: System\n  isExternal: true\n  name: Action<CancellationToken>\n  nameWithType: Action<CancellationToken>\n  fullName: System.Action<System.Threading.CancellationToken>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: Action<System.Threading.CancellationToken>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    nameWithType: CancellationToken\n    fullName: CancellationToken\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: QueueBackgroundWorkItem(Func<CancellationToken,Task>)\n  nameWithType: HostingEnvironment.QueueBackgroundWorkItem(Func<CancellationToken,Task>)\n  fullName: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(Func<CancellationToken,Task>)\n- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}\n  parent: System\n  isExternal: true\n  name: Func<CancellationToken,Task>\n  nameWithType: Func<CancellationToken,Task>\n  fullName: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    nameWithType: CancellationToken\n    fullName: CancellationToken\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Web.Hosting.HostingEnvironment.RegisterObject(System.Web.Hosting.IRegisteredObject)\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: RegisterObject(IRegisteredObject)\n  nameWithType: HostingEnvironment.RegisterObject(IRegisteredObject)\n  fullName: System.Web.Hosting.HostingEnvironment.RegisterObject(IRegisteredObject)\n- uid: System.Web.Hosting.IRegisteredObject\n  parent: System.Web.Hosting\n  isExternal: false\n  name: IRegisteredObject\n  nameWithType: IRegisteredObject\n  fullName: System.Web.Hosting.IRegisteredObject\n- uid: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: RegisterVirtualPathProvider(VirtualPathProvider)\n  nameWithType: HostingEnvironment.RegisterVirtualPathProvider(VirtualPathProvider)\n  fullName: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(VirtualPathProvider)\n- uid: System.Web.Hosting.VirtualPathProvider\n  parent: System.Web.Hosting\n  isExternal: false\n  name: VirtualPathProvider\n  nameWithType: VirtualPathProvider\n  fullName: System.Web.Hosting.VirtualPathProvider\n- uid: System.Web.Hosting.HostingEnvironment.SetCultures\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: SetCultures()\n  nameWithType: HostingEnvironment.SetCultures()\n  fullName: System.Web.Hosting.HostingEnvironment.SetCultures()\n- uid: System.Web.Hosting.HostingEnvironment.SetCultures(System.String)\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: SetCultures(String)\n  nameWithType: HostingEnvironment.SetCultures(String)\n  fullName: System.Web.Hosting.HostingEnvironment.SetCultures(String)\n- uid: System.Web.Hosting.HostingEnvironment.ShutdownReason\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ShutdownReason\n  nameWithType: HostingEnvironment.ShutdownReason\n  fullName: System.Web.Hosting.HostingEnvironment.ShutdownReason\n- uid: System.Web.ApplicationShutdownReason\n  parent: System.Web\n  isExternal: false\n  name: ApplicationShutdownReason\n  nameWithType: ApplicationShutdownReason\n  fullName: System.Web.ApplicationShutdownReason\n- uid: System.Web.Hosting.HostingEnvironment.SiteName\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: SiteName\n  nameWithType: HostingEnvironment.SiteName\n  fullName: System.Web.Hosting.HostingEnvironment.SiteName\n- uid: System.Web.Hosting.HostingEnvironment.StopListening\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: StopListening\n  nameWithType: HostingEnvironment.StopListening\n  fullName: System.Web.Hosting.HostingEnvironment.StopListening\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Web.Hosting.HostingEnvironment.UnregisterObject(System.Web.Hosting.IRegisteredObject)\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: UnregisterObject(IRegisteredObject)\n  nameWithType: HostingEnvironment.UnregisterObject(IRegisteredObject)\n  fullName: System.Web.Hosting.HostingEnvironment.UnregisterObject(IRegisteredObject)\n- uid: System.Web.Hosting.HostingEnvironment.VirtualPathProvider\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: VirtualPathProvider\n  nameWithType: HostingEnvironment.VirtualPathProvider\n  fullName: System.Web.Hosting.HostingEnvironment.VirtualPathProvider\n- uid: System.Web.Hosting.HostingEnvironment.#ctor*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: HostingEnvironment\n  nameWithType: HostingEnvironment.HostingEnvironment\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationHost*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ApplicationHost\n  nameWithType: HostingEnvironment.ApplicationHost\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationID*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ApplicationID\n  nameWithType: HostingEnvironment.ApplicationID\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ApplicationPhysicalPath\n  nameWithType: HostingEnvironment.ApplicationPhysicalPath\n- uid: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ApplicationVirtualPath\n  nameWithType: HostingEnvironment.ApplicationVirtualPath\n- uid: System.Web.Hosting.HostingEnvironment.Cache*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: Cache\n  nameWithType: HostingEnvironment.Cache\n- uid: System.Web.Hosting.HostingEnvironment.DecrementBusyCount*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: DecrementBusyCount\n  nameWithType: HostingEnvironment.DecrementBusyCount\n- uid: System.Web.Hosting.HostingEnvironment.Impersonate*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: Impersonate\n  nameWithType: HostingEnvironment.Impersonate\n- uid: System.Web.Hosting.HostingEnvironment.InClientBuildManager*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: InClientBuildManager\n  nameWithType: HostingEnvironment.InClientBuildManager\n- uid: System.Web.Hosting.HostingEnvironment.IncrementBusyCount*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: IncrementBusyCount\n  nameWithType: HostingEnvironment.IncrementBusyCount\n- uid: System.Web.Hosting.HostingEnvironment.InitializationException*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: InitializationException\n  nameWithType: HostingEnvironment.InitializationException\n- uid: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: InitializeLifetimeService\n  nameWithType: HostingEnvironment.InitializeLifetimeService\n- uid: System.Web.Hosting.HostingEnvironment.InitiateShutdown*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: InitiateShutdown\n  nameWithType: HostingEnvironment.InitiateShutdown\n- uid: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: IsDevelopmentEnvironment\n  nameWithType: HostingEnvironment.IsDevelopmentEnvironment\n- uid: System.Web.Hosting.HostingEnvironment.IsHosted*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: IsHosted\n  nameWithType: HostingEnvironment.IsHosted\n- uid: System.Web.Hosting.HostingEnvironment.MapPath*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: MapPath\n  nameWithType: HostingEnvironment.MapPath\n- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: MaxConcurrentRequestsPerCPU\n  nameWithType: HostingEnvironment.MaxConcurrentRequestsPerCPU\n- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: MaxConcurrentThreadsPerCPU\n  nameWithType: HostingEnvironment.MaxConcurrentThreadsPerCPU\n- uid: System.Web.Hosting.HostingEnvironment.MessageReceived*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: MessageReceived\n  nameWithType: HostingEnvironment.MessageReceived\n- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: QueueBackgroundWorkItem\n  nameWithType: HostingEnvironment.QueueBackgroundWorkItem\n- uid: System.Web.Hosting.HostingEnvironment.RegisterObject*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: RegisterObject\n  nameWithType: HostingEnvironment.RegisterObject\n- uid: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: RegisterVirtualPathProvider\n  nameWithType: HostingEnvironment.RegisterVirtualPathProvider\n- uid: System.Web.Hosting.HostingEnvironment.SetCultures*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: SetCultures\n  nameWithType: HostingEnvironment.SetCultures\n- uid: System.Web.Hosting.HostingEnvironment.ShutdownReason*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: ShutdownReason\n  nameWithType: HostingEnvironment.ShutdownReason\n- uid: System.Web.Hosting.HostingEnvironment.SiteName*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: SiteName\n  nameWithType: HostingEnvironment.SiteName\n- uid: System.Web.Hosting.HostingEnvironment.UnregisterObject*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: UnregisterObject\n  nameWithType: HostingEnvironment.UnregisterObject\n- uid: System.Web.Hosting.HostingEnvironment.VirtualPathProvider*\n  parent: System.Web.Hosting.HostingEnvironment\n  isExternal: false\n  name: VirtualPathProvider\n  nameWithType: HostingEnvironment.VirtualPathProvider\n"}