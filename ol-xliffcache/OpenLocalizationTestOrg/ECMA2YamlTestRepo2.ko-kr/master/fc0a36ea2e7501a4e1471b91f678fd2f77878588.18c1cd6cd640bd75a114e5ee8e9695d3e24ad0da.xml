{"nodes":[{"pos":[776,935],"content":"Presents the packet information from a call to &lt;xref:System.Net.Sockets.Socket.ReceiveMessageFrom<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:System.Net.Sockets.Socket.EndReceiveMessageFrom<ept id=\"p1\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"Presents the packet information from a call to <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*>."},{"pos":[1410,1623],"content":"Gets the origin information of the packet that was received as a result of calling the &lt;xref:System.Net.Sockets.Socket.ReceiveMessageFrom<bpt id=\"p1\">*</bpt>&gt; method or &lt;xref:System.Net.Sockets.Socket.EndReceiveMessageFrom<ept id=\"p1\">*</ept>&gt; method.","needQuote":true,"needEscape":true,"source":"Gets the origin information of the packet that was received as a result of calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> method or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*> method."},{"pos":[1756,2266],"content":"An <xref:System.Net.IPAddress> that indicates the origin information of the packet that was received as a result of calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> method or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*> method. For packets that were sent from a unicast address, the Address property will return the <xref:System.Net.IPAddress> of the sender; for multicast or broadcast packets, the Address property will return the multicast or broadcast <xref:System.Net.IPAddress>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that indicates the origin information of the packet that was received as a result of calling the &lt;xref:System.Net.Sockets.Socket.ReceiveMessageFrom<bpt id=\"p1\">*</bpt>&gt; method or &lt;xref:System.Net.Sockets.Socket.EndReceiveMessageFrom<ept id=\"p1\">*</ept>&gt; method.","pos":[0,254],"source":"An <xref:System.Net.IPAddress> that indicates the origin information of the packet that was received as a result of calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> method or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*> method."},{"content":"For packets that were sent from a unicast address, the Address property will return the &lt;xref:System.Net.IPAddress&gt; of the sender; for multicast or broadcast packets, the Address property will return the multicast or broadcast &lt;xref:System.Net.IPAddress&gt;.","pos":[255,510],"source":" For packets that were sent from a unicast address, the Address property will return the <xref:System.Net.IPAddress> of the sender; for multicast or broadcast packets, the Address property will return the multicast or broadcast <xref:System.Net.IPAddress>."}]},{"pos":[2755,2839],"content":"Returns a value that indicates whether this instance is equal to a specified object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]},{"pos":[2992,3033],"content":"The object to compare with this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare with this instance.","pos":[0,41]}]},{"pos":[3092,3369],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">comparand</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an instance of <bpt id=\"p3\">&lt;xref href=\"System.Net.Sockets.IPPacketInformation\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and equals the value of the instance; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>comparand</code> is an instance of <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> and equals the value of the instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3834,3874],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[3886,4069],"content":"The hash code is constructed from the values of the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> properties.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The hash code is constructed from the values of the &lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt; and &lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt; properties.","pos":[0,183],"source":"The hash code is constructed from the values of the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> properties."}]},{"pos":[4204,4223],"content":"An Int32 hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"An Int32 hash code.","pos":[0,19]}]},{"pos":[4679,4864],"content":"Gets the network interface information that is associated with a call to &lt;xref:System.Net.Sockets.Socket.ReceiveMessageFrom<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:System.Net.Sockets.Socket.EndReceiveMessageFrom<ept id=\"p1\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"Gets the network interface information that is associated with a call to <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*>."},{"pos":[4974,5217],"content":"An <xref:System.Int32> value, which represents the index of the network interface. You can use this index with <xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*> to get more information about the relevant interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <xref:System.Int32> value, which represents the index of the network interface. You can use this index with <xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*> to get more information about the relevant interface.","pos":[0,243],"nodes":[{"content":"An &lt;xref:System.Int32&gt; value, which represents the index of the network interface.","pos":[0,82],"source":"An <xref:System.Int32> value, which represents the index of the network interface."},{"content":"You can use this index with &lt;xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*&gt; to get more information about the relevant interface.","pos":[83,243],"source":" You can use this index with <xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*> to get more information about the relevant interface."}]}]},{"pos":[5962,6075],"content":"Tests whether two specified <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.IPPacketInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances are equivalent.","needQuote":true,"needEscape":true,"source":"Tests whether two specified <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instances are equivalent."},{"pos":[6087,6262],"content":"This operator tests both the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> values for both arguments.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operator tests both the &lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt; and &lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt; values for both arguments.","pos":[0,175],"source":"This operator tests both the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> values for both arguments."}]},{"pos":[6552,6670],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.IPPacketInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is to the left of the equality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instance that is to the left of the equality operator."},{"pos":[6770,6889],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.IPPacketInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is to the right of the equality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instance that is to the right of the equality operator."},{"pos":[6948,7165],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">packetInformation1</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">packetInformation2</ph><ept id=\"p3\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>packetInformation1</code> and <code>packetInformation2</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7922,8034],"content":"Tests whether two specified <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.IPPacketInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances are not equal.","needQuote":true,"needEscape":true,"source":"Tests whether two specified <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instances are not equal."},{"pos":[8046,8221],"content":"This operator tests both the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> values for both arguments.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operator tests both the &lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt; and &lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt; values for both arguments.","pos":[0,175],"source":"This operator tests both the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> values for both arguments."}]},{"pos":[8513,8633],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.IPPacketInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is to the left of the inequality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instance that is to the left of the inequality operator."},{"pos":[8733,8854],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.IPPacketInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is to the right of the inequality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instance that is to the right of the inequality operator."},{"pos":[8913,9132],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">packetInformation1</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">packetInformation2</ph><ept id=\"p3\">&lt;/code&gt;</ept> are unequal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>packetInformation1</code> and <code>packetInformation2</code> are unequal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Sockets.IPPacketInformation\n  id: IPPacketInformation\n  children:\n  - System.Net.Sockets.IPPacketInformation.Address\n  - System.Net.Sockets.IPPacketInformation.Equals(System.Object)\n  - System.Net.Sockets.IPPacketInformation.GetHashCode\n  - System.Net.Sockets.IPPacketInformation.Interface\n  - System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  - System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  langs:\n  - csharp\n  name: IPPacketInformation\n  nameWithType: IPPacketInformation\n  fullName: System.Net.Sockets.IPPacketInformation\n  type: Struct\n  summary: Presents the packet information from a call to <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*>.\n  syntax:\n    content: public struct IPPacketInformation\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.IPPacketInformation.Address\n  id: Address\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  name: Address\n  nameWithType: IPPacketInformation.Address\n  fullName: System.Net.Sockets.IPPacketInformation.Address\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets the origin information of the packet that was received as a result of calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> method or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*> method.\n  syntax:\n    content: public System.Net.IPAddress Address { get; }\n    return:\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that indicates the origin information of the packet that was received as a result of calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> method or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*> method. For packets that were sent from a unicast address, the Address property will return the <xref:System.Net.IPAddress> of the sender; for multicast or broadcast packets, the Address property will return the multicast or broadcast <xref:System.Net.IPAddress>.\n  overload: System.Net.Sockets.IPPacketInformation.Address*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: IPPacketInformation.Equals(Object)\n  fullName: System.Net.Sockets.IPPacketInformation.Equals(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object comparand);\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: The object to compare with this instance.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>comparand</code> is an instance of <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> and equals the value of the instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.IPPacketInformation.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.IPPacketInformation.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: IPPacketInformation.GetHashCode()\n  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Returns the hash code for this instance.\n  remarks: The hash code is constructed from the values of the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> properties.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: An Int32 hash code.\n  overload: System.Net.Sockets.IPPacketInformation.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.IPPacketInformation.Interface\n  id: Interface\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  name: Interface\n  nameWithType: IPPacketInformation.Interface\n  fullName: System.Net.Sockets.IPPacketInformation.Interface\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets the network interface information that is associated with a call to <xref:System.Net.Sockets.Socket.ReceiveMessageFrom*> or <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom*>.\n  syntax:\n    content: public int Interface { get; }\n    return:\n      type: System.Int32\n      description: An <xref:System.Int32> value, which represents the index of the network interface. You can use this index with <xref:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces*> to get more information about the relevant interface.\n  overload: System.Net.Sockets.IPPacketInformation.Interface*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  id: op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  name: op_Equality(IPPacketInformation,IPPacketInformation)\n  nameWithType: IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)\n  fullName: System.Net.Sockets.IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)\n  type: Operator\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Tests whether two specified <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instances are equivalent.\n  remarks: This operator tests both the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> values for both arguments.\n  syntax:\n    content: public static bool op_Equality (System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2);\n    parameters:\n    - id: packetInformation1\n      type: System.Net.Sockets.IPPacketInformation\n      description: The <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instance that is to the left of the equality operator.\n    - id: packetInformation2\n      type: System.Net.Sockets.IPPacketInformation\n      description: The <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instance that is to the right of the equality operator.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>packetInformation1</code> and <code>packetInformation2</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.IPPacketInformation.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  id: op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  name: op_Inequality(IPPacketInformation,IPPacketInformation)\n  nameWithType: IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)\n  fullName: System.Net.Sockets.IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)\n  type: Operator\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Tests whether two specified <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instances are not equal.\n  remarks: This operator tests both the <xref:System.Net.Sockets.IPPacketInformation.Address%2A> and <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> values for both arguments.\n  syntax:\n    content: public static bool op_Inequality (System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2);\n    parameters:\n    - id: packetInformation1\n      type: System.Net.Sockets.IPPacketInformation\n      description: The <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instance that is to the left of the inequality operator.\n    - id: packetInformation2\n      type: System.Net.Sockets.IPPacketInformation\n      description: The <xref href=\"System.Net.Sockets.IPPacketInformation\"></xref> instance that is to the right of the inequality operator.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>packetInformation1</code> and <code>packetInformation2</code> are unequal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.IPPacketInformation.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Net.Sockets.IPPacketInformation.Address\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: Address\n  nameWithType: IPPacketInformation.Address\n  fullName: System.Net.Sockets.IPPacketInformation.Address\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: true\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: IPPacketInformation.Equals(Object)\n  fullName: System.Net.Sockets.IPPacketInformation.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.Sockets.IPPacketInformation.GetHashCode\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: IPPacketInformation.GetHashCode()\n  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Sockets.IPPacketInformation.Interface\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: Interface\n  nameWithType: IPPacketInformation.Interface\n  fullName: System.Net.Sockets.IPPacketInformation.Interface\n- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: op_Equality(IPPacketInformation,IPPacketInformation)\n  nameWithType: IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)\n  fullName: System.Net.Sockets.IPPacketInformation.op_Equality(IPPacketInformation,IPPacketInformation)\n- uid: System.Net.Sockets.IPPacketInformation\n  parent: System.Net.Sockets\n  isExternal: false\n  name: IPPacketInformation\n  nameWithType: IPPacketInformation\n  fullName: System.Net.Sockets.IPPacketInformation\n- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: op_Inequality(IPPacketInformation,IPPacketInformation)\n  nameWithType: IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)\n  fullName: System.Net.Sockets.IPPacketInformation.op_Inequality(IPPacketInformation,IPPacketInformation)\n- uid: System.Net.Sockets.IPPacketInformation.Address*\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: Address\n  nameWithType: IPPacketInformation.Address\n- uid: System.Net.Sockets.IPPacketInformation.Equals*\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: Equals\n  nameWithType: IPPacketInformation.Equals\n- uid: System.Net.Sockets.IPPacketInformation.GetHashCode*\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: GetHashCode\n  nameWithType: IPPacketInformation.GetHashCode\n- uid: System.Net.Sockets.IPPacketInformation.Interface*\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: Interface\n  nameWithType: IPPacketInformation.Interface\n- uid: System.Net.Sockets.IPPacketInformation.op_Equality*\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: op_Equality\n  nameWithType: IPPacketInformation.op_Equality\n- uid: System.Net.Sockets.IPPacketInformation.op_Inequality*\n  parent: System.Net.Sockets.IPPacketInformation\n  isExternal: false\n  name: op_Inequality\n  nameWithType: IPPacketInformation.op_Inequality\n"}