{"nodes":[{"pos":[3174,3200],"content":"Represents a Windows user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a Windows user.","pos":[0,26]}]},{"pos":[3213,3897],"content":"Call the <xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A> method to create a WindowsIdentity object that represents the current user.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call the &lt;xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A&gt; method to create a WindowsIdentity object that represents the current user.","pos":[0,147],"source":"Call the <xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A> method to create a WindowsIdentity object that represents the current user."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[153,232],"source":"      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[233,327]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[328,439],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[440,547],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[548,681],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."}]},{"pos":[7322,7489],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the user represented by the specified Windows account token.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified Windows account token."},{"pos":[7502,8276],"content":"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>|`Negotiate`|   |<xref:System.Security.Principal.WindowsAccountType>|`Normal`|   |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|      > [!NOTE] >  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function. Always release `userToken` by calling the Win32 API `CloseHandle` function. For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following table shows initial property values for an instance of &lt;xref:System.Security.Principal.WindowsIdentity&gt;.","pos":[0,118],"source":"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>."},{"content":"|Property|Initial value|   |--------------|-------------------|   |&lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt;|<ph id=\"ph1\">`Negotiate`</ph>|   |&lt;xref:System.Security.Principal.WindowsAccountType&gt;|<ph id=\"ph2\">`Normal`</ph>|   |&lt;xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A&gt;|<ph id=\"ph3\">`false`</ph>|      &gt; <ph id=\"ph4\">[!NOTE]</ph> &gt;  You can retrieve the token represented by <ph id=\"ph5\">`userToken`</ph> by calling unmanaged code such as the Win32 API <ph id=\"ph6\">`LogonUser`</ph> function.","pos":[124,561],"source":"      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>|`Negotiate`|   |<xref:System.Security.Principal.WindowsAccountType>|`Normal`|   |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|      > [!NOTE] >  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function."},{"content":"Always release <ph id=\"ph1\">`userToken`</ph> by calling the Win32 API <ph id=\"ph2\">`CloseHandle`</ph> function.","pos":[562,637],"source":" Always release `userToken` by calling the Win32 API `CloseHandle` function."},{"content":"For more information on calling unmanaged code, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[638,765],"source":" For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[8425,8492],"content":"The account token for the user on whose behalf the code is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"The account token for the user on whose behalf the code is running.","pos":[0,67]}]},{"pos":[8663,8780],"content":"<code>userToken</code> is 0.       -or-       <code>userToken</code> is duplicated and invalid for impersonation.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;userToken&lt;/code&gt;</ph> is 0.","pos":[0,28],"source":"<code>userToken</code> is 0."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;userToken&lt;/code&gt;</ph> is duplicated and invalid for impersonation.","pos":[35,113],"source":"       -or-       <code>userToken</code> is duplicated and invalid for impersonation."}]},{"pos":[8895,8989],"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","pos":[0,90],"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]},{"content":"-or-       A Win32 error occurred.","pos":[56,90]}]}]},{"pos":[9531,9727],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class by using the specified <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object."},{"pos":[9939,10057],"content":"The object from which to construct the new instance of <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object from which to construct the new instance of <xref href=\"System.Security.Principal.WindowsIdentity\"></xref>."},{"pos":[10593,10764],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the user represented by the specified User Principal Name (UPN).","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified User Principal Name (UPN)."},{"pos":[10777,11493],"content":"A UPN has the format *username*@*domainname*.com, in other words, an email address. The UPN identified in `sUserPrincipalName` is used to retrieve a token for that user through the Win32 API `LsaLogonUser` function. In turn that token is used to identify the user. An exception might be returned due to the inability to log on using the supplied UPN.      > [!NOTE] >  This constructor is intended for use only on computers joined to Windows Server 2003 or later domains. An exception is thrown for earlier domain types. This restriction is due to the fact that this constructor uses the [KERB_S4U_LOGON structure](http://go.microsoft.com/fwlink/?LinkId=143533), which was first introduced in Windows Server 2003.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A UPN has the format <bpt id=\"p1\">*</bpt>username<ept id=\"p1\">*</ept><ph id=\"ph1\">@</ph><bpt id=\"p2\">*</bpt>domainname<ept id=\"p2\">*</ept>.com, in other words, an email address.","pos":[0,83],"source":"A UPN has the format *username*@*domainname*.com, in other words, an email address."},{"content":"The UPN identified in <ph id=\"ph1\">`sUserPrincipalName`</ph> is used to retrieve a token for that user through the Win32 API <ph id=\"ph2\">`LsaLogonUser`</ph> function.","pos":[84,215],"source":" The UPN identified in `sUserPrincipalName` is used to retrieve a token for that user through the Win32 API `LsaLogonUser` function."},{"content":"In turn that token is used to identify the user.","pos":[216,264]},{"content":"An exception might be returned due to the inability to log on using the supplied UPN.","pos":[265,350]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This constructor is intended for use only on computers joined to Windows Server 2003 or later domains.","pos":[356,471],"source":"      > [!NOTE] >  This constructor is intended for use only on computers joined to Windows Server 2003 or later domains."},{"content":"An exception is thrown for earlier domain types.","pos":[472,520]},{"content":"This restriction is due to the fact that this constructor uses the <bpt id=\"p1\">[</bpt>KERB_S4U_LOGON structure<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=143533)</ept>, which was first introduced in Windows Server 2003.","pos":[521,713],"source":" This restriction is due to the fact that this constructor uses the [KERB_S4U_LOGON structure](http://go.microsoft.com/fwlink/?LinkId=143533), which was first introduced in Windows Server 2003."}]},{"pos":[11660,11717],"content":"The UPN for the user on whose behalf the code is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"The UPN for the user on whose behalf the code is running.","pos":[0,57]}]},{"pos":[11907,11972],"content":"Windows returned the Windows NT status code STATUS_ACCESS_DENIED.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows returned the Windows NT status code STATUS_ACCESS_DENIED.","pos":[0,65]}]},{"pos":[12073,12112],"content":"There is insufficient memory available.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]},{"pos":[12226,12521],"content":"The caller does not have the correct permissions.       -or-       The computer is not attached to a Windows 2003 or later domain.       -or-       The computer is not running Windows 2003 or later.       -or-       The user is not a member of the domain the computer is attached to.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.       -or-       The computer is not attached to a Windows 2003 or later domain.       -or-       The computer is not running Windows 2003 or later.       -or-       The user is not a member of the domain the computer is attached to.","pos":[0,283],"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]},{"content":"-or-       The computer is not attached to a Windows 2003 or later domain.","pos":[56,130]},{"content":"-or-       The computer is not running Windows 2003 or later.","pos":[137,198]},{"content":"-or-       The user is not a member of the domain the computer is attached to.","pos":[205,283]}]}]},{"pos":[13029,13234],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the user represented by the specified Windows account token and the specified authentication type.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified Windows account token and the specified authentication type."},{"pos":[13247,14427],"content":"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Security.Principal.WindowsAccountType>|`Normal`|   |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|       The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter. If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.      > [!NOTE] >  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function. Always release `userToken` by calling the Win32 API `CloseHandle` function. For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following table shows initial property values for an instance of &lt;xref:System.Security.Principal.WindowsIdentity&gt;.","pos":[0,118],"source":"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>."},{"content":"|Property|Initial value|   |--------------|-------------------|   |&lt;xref:System.Security.Principal.WindowsAccountType&gt;|<ph id=\"ph1\">`Normal`</ph>|   |&lt;xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A&gt;|<ph id=\"ph2\">`false`</ph>|       The value of the <ph id=\"ph3\">`type`</ph> parameter is used to set the &lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt; parameter.","pos":[124,473],"source":"      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Security.Principal.WindowsAccountType>|`Normal`|   |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|       The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter."},{"content":"If <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">`null`</ph>, the security system sets &lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt; to <ph id=\"ph3\">`Negotiate`</ph> on Windows Vista and later versions of the Windows operating system, and to <ph id=\"ph4\">`Kerberos`</ph> on earlier versions of the Windows operating system.","pos":[474,745],"source":" If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system."},{"content":"The security system does not use this value; it is for informational use only.","pos":[746,824]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can retrieve the token represented by <ph id=\"ph2\">`userToken`</ph> by calling unmanaged code such as the Win32 API <ph id=\"ph3\">`LogonUser`</ph> function.","pos":[830,966],"source":"      > [!NOTE] >  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function."},{"content":"Always release <ph id=\"ph1\">`userToken`</ph> by calling the Win32 API <ph id=\"ph2\">`CloseHandle`</ph> function.","pos":[967,1042],"source":" Always release `userToken` by calling the Win32 API `CloseHandle` function."},{"content":"For more information on calling unmanaged code, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1043,1170],"source":" For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[15413,15480],"content":"The account token for the user on whose behalf the code is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"The account token for the user on whose behalf the code is running.","pos":[0,67]}]},{"pos":[15541,15655],"content":"(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.","needQuote":true,"needEscape":true,"nodes":[{"content":"(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.","pos":[0,114],"nodes":[{"content":"(Informational use only.) The type of authentication used to identify the user.","pos":[0,79]},{"content":"For more information, see Remarks.","pos":[80,114]}]}]},{"pos":[15826,15943],"content":"<code>userToken</code> is 0.       -or-       <code>userToken</code> is duplicated and invalid for impersonation.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;userToken&lt;/code&gt;</ph> is 0.","pos":[0,28],"source":"<code>userToken</code> is 0."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;userToken&lt;/code&gt;</ph> is duplicated and invalid for impersonation.","pos":[35,113],"source":"       -or-       <code>userToken</code> is duplicated and invalid for impersonation."}]},{"pos":[16058,16152],"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","pos":[0,90],"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]},{"content":"-or-       A Win32 error occurred.","pos":[56,90]}]}]},{"pos":[16853,17076],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the user represented by information in a <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> stream.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by information in a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> stream."},{"pos":[17590,17649],"content":"The object containing the account information for the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object containing the account information for the user.","pos":[0,59]}]},{"pos":[17745,17797],"content":"An object that indicates the stream characteristics.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that indicates the stream characteristics.","pos":[0,52]}]},{"pos":[17975,18078],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be serialized across processes.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> cannot be serialized across processes."},{"pos":[18192,18286],"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","pos":[0,90],"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]},{"content":"-or-       A Win32 error occurred.","pos":[56,90]}]}]},{"pos":[18794,19003],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the user represented by the specified User Principal Name (UPN) and the specified authentication type.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified User Principal Name (UPN) and the specified authentication type."},{"pos":[19016,20142],"content":"The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter. If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.       The UPN identified in `sUserPrincipalName` is used to retrieve a token for that user through the Win32 API `LsaLogonUser` function. In turn that token is used to identify the user. An exception might be returned due to the inability to log on using the supplied UPN.      > [!NOTE] >  This constructor is intended for use only on computers joined to Windows Server 2003 or later domains. An exception is thrown for earlier domain types. This restriction is due to the fact that this constructor uses the [KERB_S4U_LOGON structure](http://go.microsoft.com/fwlink/?LinkId=143533), which was first introduced in Windows Server 2003.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of the <ph id=\"ph1\">`type`</ph> parameter is used to set the &lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt; parameter.","pos":[0,134],"source":"The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter."},{"content":"If <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">`null`</ph>, the security system sets &lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt; to <ph id=\"ph3\">`Negotiate`</ph> on Windows Vista and later versions of the Windows operating system, and to <ph id=\"ph4\">`Kerberos`</ph> on earlier versions of the Windows operating system.","pos":[135,406],"source":" If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system."},{"content":"The security system does not use this value; it is for informational use only.","pos":[407,485]},{"content":"The UPN identified in <ph id=\"ph1\">`sUserPrincipalName`</ph> is used to retrieve a token for that user through the Win32 API <ph id=\"ph2\">`LsaLogonUser`</ph> function.","pos":[492,623],"source":"       The UPN identified in `sUserPrincipalName` is used to retrieve a token for that user through the Win32 API `LsaLogonUser` function."},{"content":"In turn that token is used to identify the user.","pos":[624,672]},{"content":"An exception might be returned due to the inability to log on using the supplied UPN.","pos":[673,758]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This constructor is intended for use only on computers joined to Windows Server 2003 or later domains.","pos":[764,879],"source":"      > [!NOTE] >  This constructor is intended for use only on computers joined to Windows Server 2003 or later domains."},{"content":"An exception is thrown for earlier domain types.","pos":[880,928]},{"content":"This restriction is due to the fact that this constructor uses the <bpt id=\"p1\">[</bpt>KERB_S4U_LOGON structure<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=143533)</ept>, which was first introduced in Windows Server 2003.","pos":[929,1121],"source":" This restriction is due to the fact that this constructor uses the [KERB_S4U_LOGON structure](http://go.microsoft.com/fwlink/?LinkId=143533), which was first introduced in Windows Server 2003."}]},{"pos":[20322,20379],"content":"The UPN for the user on whose behalf the code is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"The UPN for the user on whose behalf the code is running.","pos":[0,57]}]},{"pos":[20440,20554],"content":"(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.","needQuote":true,"needEscape":true,"nodes":[{"content":"(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.","pos":[0,114],"nodes":[{"content":"(Informational use only.) The type of authentication used to identify the user.","pos":[0,79]},{"content":"For more information, see Remarks.","pos":[80,114]}]}]},{"pos":[20744,20809],"content":"Windows returned the Windows NT status code STATUS_ACCESS_DENIED.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows returned the Windows NT status code STATUS_ACCESS_DENIED.","pos":[0,65]}]},{"pos":[20910,20949],"content":"There is insufficient memory available.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]},{"pos":[21063,21358],"content":"The caller does not have the correct permissions.       -or-       The computer is not attached to a Windows 2003 or later domain.       -or-       The computer is not running Windows 2003 or later.       -or-       The user is not a member of the domain the computer is attached to.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.       -or-       The computer is not attached to a Windows 2003 or later domain.       -or-       The computer is not running Windows 2003 or later.       -or-       The user is not a member of the domain the computer is attached to.","pos":[0,283],"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]},{"content":"-or-       The computer is not attached to a Windows 2003 or later domain.","pos":[56,130]},{"content":"-or-       The computer is not running Windows 2003 or later.","pos":[137,198]},{"content":"-or-       The user is not a member of the domain the computer is attached to.","pos":[205,283]}]}]},{"pos":[22013,22255],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type."},{"pos":[22268,23382],"content":"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.      |Property|Initial Value|   |--------------|-------------------|   |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|       The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter. If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.      > [!NOTE] >  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function. Always release `userToken` by calling the Win32 API `CloseHandle` function. For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following table shows initial property values for an instance of &lt;xref:System.Security.Principal.WindowsIdentity&gt;.","pos":[0,118],"source":"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>."},{"content":"|Property|Initial Value|   |--------------|-------------------|   |&lt;xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A&gt;|<ph id=\"ph1\">`false`</ph>|       The value of the <ph id=\"ph2\">`type`</ph> parameter is used to set the &lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt; parameter.","pos":[124,408],"source":"      |Property|Initial Value|   |--------------|-------------------|   |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|       The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter."},{"content":"If <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">`null`</ph>, the security system sets &lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt; to <ph id=\"ph3\">`Negotiate`</ph> on Windows Vista and later versions of the Windows operating system, and to <ph id=\"ph4\">`Kerberos`</ph> on earlier versions of the Windows operating system.","pos":[409,680],"source":" If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system."},{"content":"The security system does not use this value; it is for informational use only.","pos":[681,759]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can retrieve the token represented by <ph id=\"ph2\">`userToken`</ph> by calling unmanaged code such as the Win32 API <ph id=\"ph3\">`LogonUser`</ph> function.","pos":[765,901],"source":"      > [!NOTE] >  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function."},{"content":"Always release <ph id=\"ph1\">`userToken`</ph> by calling the Win32 API <ph id=\"ph2\">`CloseHandle`</ph> function.","pos":[902,977],"source":" Always release `userToken` by calling the Win32 API `CloseHandle` function."},{"content":"For more information on calling unmanaged code, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[978,1105],"source":" For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[24415,24482],"content":"The account token for the user on whose behalf the code is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"The account token for the user on whose behalf the code is running.","pos":[0,67]}]},{"pos":[24543,24657],"content":"(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.","needQuote":true,"needEscape":true,"nodes":[{"content":"(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.","pos":[0,114],"nodes":[{"content":"(Informational use only.) The type of authentication used to identify the user.","pos":[0,79]},{"content":"For more information, see Remarks.","pos":[80,114]}]}]},{"pos":[24753,24783],"content":"One of the enumeration values.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values.","pos":[0,30]}]},{"pos":[24954,25071],"content":"<code>userToken</code> is 0.       -or-       <code>userToken</code> is duplicated and invalid for impersonation.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;userToken&lt;/code&gt;</ph> is 0.","pos":[0,28],"source":"<code>userToken</code> is 0."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;userToken&lt;/code&gt;</ph> is duplicated and invalid for impersonation.","pos":[35,113],"source":"       -or-       <code>userToken</code> is duplicated and invalid for impersonation."}]},{"pos":[25186,25280],"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","pos":[0,90],"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]},{"content":"-or-       A Win32 error occurred.","pos":[56,90]}]}]},{"pos":[25989,26268],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status."},{"pos":[26281,27102],"content":"The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter. If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.       You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function. Always release `userToken` by calling the Win32 API `CloseHandle` function. For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of the <ph id=\"ph1\">`type`</ph> parameter is used to set the &lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt; parameter.","pos":[0,134],"source":"The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter."},{"content":"If <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">`null`</ph>, the security system sets &lt;xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A&gt; to <ph id=\"ph3\">`Negotiate`</ph> on Windows Vista and later versions of the Windows operating system, and to <ph id=\"ph4\">`Kerberos`</ph> on earlier versions of the Windows operating system.","pos":[135,406],"source":" If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system."},{"content":"The security system does not use this value; it is for informational use only.","pos":[407,485]},{"content":"You can retrieve the token represented by <ph id=\"ph1\">`userToken`</ph> by calling unmanaged code such as the Win32 API <ph id=\"ph2\">`LogonUser`</ph> function.","pos":[492,615],"source":"       You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function."},{"content":"Always release <ph id=\"ph1\">`userToken`</ph> by calling the Win32 API <ph id=\"ph2\">`CloseHandle`</ph> function.","pos":[616,691],"source":" Always release `userToken` by calling the Win32 API `CloseHandle` function."},{"content":"For more information on calling unmanaged code, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[692,819],"source":" For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[28197,28264],"content":"The account token for the user on whose behalf the code is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"The account token for the user on whose behalf the code is running.","pos":[0,67]}]},{"pos":[28325,28439],"content":"(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.","needQuote":true,"needEscape":true,"nodes":[{"content":"(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.","pos":[0,114],"nodes":[{"content":"(Informational use only.) The type of authentication used to identify the user.","pos":[0,79]},{"content":"For more information, see Remarks.","pos":[80,114]}]}]},{"pos":[28535,28565],"content":"One of the enumeration values.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values.","pos":[0,30]}]},{"pos":[28638,28817],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that the user is authenticated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the user is authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[28988,29105],"content":"<code>userToken</code> is 0.       -or-       <code>userToken</code> is duplicated and invalid for impersonation.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;userToken&lt;/code&gt;</ph> is 0.","pos":[0,28],"source":"<code>userToken</code> is 0."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;userToken&lt;/code&gt;</ph> is duplicated and invalid for impersonation.","pos":[35,113],"source":"       -or-       <code>userToken</code> is duplicated and invalid for impersonation."}]},{"pos":[29220,29314],"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.       -or-       A Win32 error occurred.","pos":[0,90],"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]},{"content":"-or-       A Win32 error occurred.","pos":[56,90]}]}]},{"pos":[29714,29876],"content":"Gets this <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for this <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets this <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> for this <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> instance."},{"pos":[30071,30152],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref>."},{"pos":[30670,30728],"content":"Gets the type of authentication used to identify the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the type of authentication used to identify the user.","pos":[0,58]}]},{"pos":[30740,31127],"content":"This property is informational; it is not used by the security system. On Windows Vista and later versions of the Windows operating system, the default value for this property is `Negotiate`, which chooses the best security support provider (SSP) based on customer-configured security policy. The default property value for earlier versions of the Windows operating system is `Kerberos`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is informational; it is not used by the security system.","pos":[0,70]},{"content":"On Windows Vista and later versions of the Windows operating system, the default value for this property is <ph id=\"ph1\">`Negotiate`</ph>, which chooses the best security support provider (SSP) based on customer-configured security policy.","pos":[71,292],"source":" On Windows Vista and later versions of the Windows operating system, the default value for this property is `Negotiate`, which chooses the best security support provider (SSP) based on customer-configured security policy."},{"content":"The default property value for earlier versions of the Windows operating system is <ph id=\"ph1\">`Kerberos`</ph>.","pos":[293,387],"source":" The default property value for earlier versions of the Windows operating system is `Kerberos`."}]},{"pos":[31266,31319],"content":"The type of authentication used to identify the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of authentication used to identify the user.","pos":[0,53]}]},{"pos":[31522,31587],"content":"Windows returned the Windows NT status code STATUS_ACCESS_DENIED.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows returned the Windows NT status code STATUS_ACCESS_DENIED.","pos":[0,65]}]},{"pos":[31688,31727],"content":"There is insufficient memory available.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]},{"pos":[31841,32136],"content":"The caller does not have the correct permissions.       -or-       The computer is not attached to a Windows 2003 or later domain.       -or-       The computer is not running Windows 2003 or later.       -or-       The user is not a member of the domain the computer is attached to.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.       -or-       The computer is not attached to a Windows 2003 or later domain.       -or-       The computer is not running Windows 2003 or later.       -or-       The user is not a member of the domain the computer is attached to.","pos":[0,283],"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]},{"content":"-or-       The computer is not attached to a Windows 2003 or later domain.","pos":[56,130]},{"content":"-or-       The computer is not running Windows 2003 or later.","pos":[137,198]},{"content":"-or-       The user is not a member of the domain the computer is attached to.","pos":[205,283]}]}]},{"pos":[32511,32577],"content":"Gets all claims for the user represented by this Windows identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets all claims for the user represented by this Windows identity.","pos":[0,66]}]},{"pos":[32814,32916],"content":"A collection of claims for this <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A collection of claims for this <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object."},{"pos":[33368,33429],"content":"Creates a new  object that is a copy of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new  object that is a copy of the current instance.","pos":[0,61]}]},{"pos":[33617,33648],"content":"A copy of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the current instance.","pos":[0,31]}]},{"pos":[34132,34233],"content":"Identifies the name of the default <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> issuer.","needQuote":true,"needEscape":true,"source":"Identifies the name of the default <xref href=\"System.Security.Claims.ClaimsIdentity\"></xref> issuer."},{"pos":[34349,34361],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[34782,34895],"content":"Gets claims that have the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimTypes.WindowsDeviceClaim\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property key.","needQuote":true,"needEscape":true,"source":"Gets claims that have the <xref href=\"System.Security.Claims.ClaimTypes.WindowsDeviceClaim\"></xref> property key."},{"pos":[35137,35261],"content":"A collection of claims that have the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimTypes.WindowsDeviceClaim\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property key.","needQuote":true,"needEscape":true,"source":"A collection of claims that have the <xref href=\"System.Security.Claims.ClaimTypes.WindowsDeviceClaim\"></xref> property key."},{"pos":[35729,35827],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref>."},{"pos":[35840,36749],"content":"Call Dispose when you are finished using the <xref:System.Security.Principal.WindowsIdentity>. The Dispose method leaves the <xref:System.Security.Principal.WindowsIdentity> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Security.Principal.WindowsIdentity> so the garbage collector can reclaim the memory that the <xref:System.Security.Principal.WindowsIdentity> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.Security.Principal.WindowsIdentity>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Principal.WindowsIdentity> object's `Finalize` method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call Dispose when you are finished using the &lt;xref:System.Security.Principal.WindowsIdentity&gt;.","pos":[0,94],"source":"Call Dispose when you are finished using the <xref:System.Security.Principal.WindowsIdentity>."},{"content":"The Dispose method leaves the &lt;xref:System.Security.Principal.WindowsIdentity&gt; in an unusable state.","pos":[95,195],"source":" The Dispose method leaves the <xref:System.Security.Principal.WindowsIdentity> in an unusable state."},{"content":"After calling Dispose, you must release all references to the &lt;xref:System.Security.Principal.WindowsIdentity&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Principal.WindowsIdentity&gt; was occupying.","pos":[196,427],"source":" After calling Dispose, you must release all references to the <xref:System.Security.Principal.WindowsIdentity> so the garbage collector can reclaim the memory that the <xref:System.Security.Principal.WindowsIdentity> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[428,602],"source":" For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.Security.Principal.WindowsIdentity&gt;.","pos":[608,736],"source":"      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.Security.Principal.WindowsIdentity>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Principal.WindowsIdentity&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[737,906],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Principal.WindowsIdentity> object's `Finalize` method."}]},{"pos":[37332,37486],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> and optionally releases the managed resources."},{"pos":[37499,38045],"content":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Principal.WindowsIdentity> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,102],"source":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[103,208],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[209,292],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Principal.WindowsIdentity&gt; references.","pos":[299,474],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Principal.WindowsIdentity> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[475,544],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[38201,38410],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[38898,39167],"content":"Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that you can use as a sentinel value in your code to represent an anonymous user. The property value does not represent the built-in anonymous identity used by the Windows operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that you can use as a sentinel value in your code to represent an anonymous user.","pos":[0,161],"source":"Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that you can use as a sentinel value in your code to represent an anonymous user."},{"content":"The property value does not represent the built-in anonymous identity used by the Windows operating system.","pos":[162,269]}]},{"pos":[39180,40034],"content":"This property returns an empty <xref:System.Security.Principal.WindowsIdentity> object that enables you to treat operations as anonymous. The property value does not correspond to a Windows anonymous user and cannot be used for impersonation. Also, note that the identity returned by this property is not static; each call to GetAnonymous returns a different anonymous identity.       You can use the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property to detect the return value from GetAnonymous. However, <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> detects both the Windows anonymous identity and the anonymous identity returned by this method. To use the latter identity, cache the GetAnonymous return value instead of relying on the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property returns an empty <xref:System.Security.Principal.WindowsIdentity> object that enables you to treat operations as anonymous. The property value does not correspond to a Windows anonymous user and cannot be used for impersonation. Also, note that the identity returned by this property is not static; each call to GetAnonymous returns a different anonymous identity.       You can use the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property to detect the return value from GetAnonymous. However, <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> detects both the Windows anonymous identity and the anonymous identity returned by this method. To use the latter identity, cache the GetAnonymous return value instead of relying on the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property.","pos":[0,852],"nodes":[{"content":"This property returns an empty &lt;xref:System.Security.Principal.WindowsIdentity&gt; object that enables you to treat operations as anonymous.","pos":[0,137],"source":"This property returns an empty <xref:System.Security.Principal.WindowsIdentity> object that enables you to treat operations as anonymous."},{"content":"The property value does not correspond to a Windows anonymous user and cannot be used for impersonation.","pos":[138,242]},{"content":"Also, note that the identity returned by this property is not static; each call to GetAnonymous returns a different anonymous identity.","pos":[243,378]},{"content":"You can use the &lt;xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A&gt; property to detect the return value from GetAnonymous.","pos":[385,519],"source":"       You can use the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property to detect the return value from GetAnonymous."},{"content":"However, &lt;xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A&gt; detects both the Windows anonymous identity and the anonymous identity returned by this method.","pos":[520,688],"source":" However, <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> detects both the Windows anonymous identity and the anonymous identity returned by this method."},{"content":"To use the latter identity, cache the GetAnonymous return value instead of relying on the &lt;xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A&gt; property.","pos":[689,852],"source":" To use the latter identity, cache the GetAnonymous return value instead of relying on the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property."}]}]},{"pos":[40937,40981],"content":"An object that represents an anonymous user.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents an anonymous user.","pos":[0,44]}]},{"pos":[41464,41585],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the current Windows user.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that represents the current Windows user."},{"pos":[42496,42539],"content":"An object that represents the current user.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the current user.","pos":[0,43]}]},{"pos":[42732,42781],"content":"The caller does not have the correct permissions.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]}]},{"pos":[43232,43456],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the Windows identity for either the thread or the process, depending on the value of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">ifImpersonating</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that represents the Windows identity for either the thread or the process, depending on the value of the <code>ifImpersonating</code> parameter."},{"pos":[43468,43917],"content":"If `ifImpersonating` is `true` and the thread is not impersonating, the returned <xref:System.Security.Principal.WindowsIdentity> object has no value.  If `ifImpersonating` is `false` and the thread is impersonating, the <xref:System.Security.Principal.WindowsIdentity> for the thread is returned.  If `ifImpersonating` is `false` and the thread is not impersonating, the <xref:System.Security.Principal.WindowsIdentity> for the process is returned.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`ifImpersonating`</ph> is <ph id=\"ph2\">`true`</ph> and the thread is not impersonating, the returned &lt;xref:System.Security.Principal.WindowsIdentity&gt; object has no value.","pos":[0,150],"source":"If `ifImpersonating` is `true` and the thread is not impersonating, the returned <xref:System.Security.Principal.WindowsIdentity> object has no value."},{"content":"If <ph id=\"ph1\">`ifImpersonating`</ph> is <ph id=\"ph2\">`false`</ph> and the thread is impersonating, the &lt;xref:System.Security.Principal.WindowsIdentity&gt; for the thread is returned.","pos":[152,297],"source":"  If `ifImpersonating` is `false` and the thread is impersonating, the <xref:System.Security.Principal.WindowsIdentity> for the thread is returned."},{"content":"If <ph id=\"ph1\">`ifImpersonating`</ph> is <ph id=\"ph2\">`false`</ph> and the thread is not impersonating, the &lt;xref:System.Security.Principal.WindowsIdentity&gt; for the process is returned.","pos":[299,449],"source":"  If `ifImpersonating` is `false` and the thread is not impersonating, the <xref:System.Security.Principal.WindowsIdentity> for the process is returned."}]},{"pos":[44120,44612],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to return the <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> only if the thread is currently impersonating; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to return the <bpt id=\"p4\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> of the thread if it is impersonating or the <bpt id=\"p5\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept> of the process if the thread is not currently impersonating.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to return the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> only if the thread is currently impersonating; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to return the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> of the thread if it is impersonating or the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> of the process if the thread is not currently impersonating."},{"pos":[44698,44739],"content":"An object that represents a Windows user.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents a Windows user.","pos":[0,41]}]},{"pos":[45361,45530],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the current Windows user, using the specified desired token access level.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that represents the current Windows user, using the specified desired token access level."},{"pos":[45542,45821],"content":"The `desiredAccess` parameter specifies an access mask that identifies the requested types of access to the access token. These requested access types are compared with the token's discretionary access control list (DACL) to determine which types of access are granted or denied.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`desiredAccess`</ph> parameter specifies an access mask that identifies the requested types of access to the access token.","pos":[0,121],"source":"The `desiredAccess` parameter specifies an access mask that identifies the requested types of access to the access token."},{"content":"These requested access types are compared with the token's discretionary access control list (DACL) to determine which types of access are granted or denied.","pos":[122,279]}]},{"pos":[46088,46136],"content":"A bitwise combination of the enumeration values.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values.","pos":[0,48]}]},{"pos":[46222,46265],"content":"An object that represents the current user.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the current user.","pos":[0,43]}]},{"pos":[46722,46774],"content":"Gets the groups the current Windows user belongs to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the groups the current Windows user belongs to.","pos":[0,52]}]},{"pos":[47533,47603],"content":"An object representing the groups the current Windows user belongs to.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the groups the current Windows user belongs to.","pos":[0,70]}]},{"pos":[48085,48196],"content":"Impersonates the user represented by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Impersonates the user represented by the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object."},{"pos":[48208,48301],"content":"On Windows NT platforms, the current user must have sufficient rights to allow impersonation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"On Windows NT platforms, the current user must have sufficient rights to allow impersonation.","pos":[0,93]}]},{"pos":[49087,49212],"content":"An object that represents the Windows user prior to impersonation; this can be used to revert to the original user's context.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the Windows user prior to impersonation; this can be used to revert to the original user's context.","pos":[0,125]}]},{"pos":[49404,49464],"content":"An anonymous identity attempted to perform an impersonation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An anonymous identity attempted to perform an impersonation.","pos":[0,60]}]},{"pos":[49577,49600],"content":"A Win32 error occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Win32 error occurred.","pos":[0,23]}]},{"pos":[50051,50113],"content":"Impersonates the user represented by the specified user token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Impersonates the user represented by the specified user token.","pos":[0,62]}]},{"pos":[50126,50607],"content":"On Windows NT platforms, the current user must have sufficient rights to allow impersonation.      > [!NOTE] >  Calling the Impersonate method with a `userToken` value of <xref:System.IntPtr> is equivalent to calling the Win32 `RevertToSelf` function. If another user is currently being impersonated, control reverts to the original user.       For more information about calls to unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"On Windows NT platforms, the current user must have sufficient rights to allow impersonation.","pos":[0,93]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Calling the Impersonate method with a <ph id=\"ph2\">`userToken`</ph> value of &lt;xref:System.IntPtr&gt; is equivalent to calling the Win32 <ph id=\"ph3\">`RevertToSelf`</ph> function.","pos":[99,251],"source":"      > [!NOTE] >  Calling the Impersonate method with a `userToken` value of <xref:System.IntPtr> is equivalent to calling the Win32 `RevertToSelf` function."},{"content":"If another user is currently being impersonated, control reverts to the original user.","pos":[252,338]},{"content":"For more information about calls to unmanaged code, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[345,476],"source":"       For more information about calls to unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[51273,51490],"content":"The handle of a Windows account token. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API <xref uid=\"langword_csharp_LogonUser\" name=\"LogonUser\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle of a Windows account token.","pos":[0,38]},{"content":"This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LogonUser\" name=\"LogonUser\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function.","pos":[39,217],"source":" This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API <xref uid=\"langword_csharp_LogonUser\" name=\"LogonUser\" href=\"\"></xref> function."}]},{"pos":[51588,51720],"content":"An object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.","pos":[0,132]}]},{"pos":[51916,51981],"content":"Windows returned the Windows NT status code STATUS_ACCESS_DENIED.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows returned the Windows NT status code STATUS_ACCESS_DENIED.","pos":[0,65]}]},{"pos":[52082,52121],"content":"There is insufficient memory available.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]},{"pos":[52234,52283],"content":"The caller does not have the correct permissions.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the correct permissions.","pos":[0,49]}]},{"pos":[52717,52759],"content":"Gets the impersonation level for the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the impersonation level for the user.","pos":[0,42]}]},{"pos":[52771,52834],"content":"Describes the impersonation level to be used to connect to WMI.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Describes the impersonation level to be used to connect to WMI.","pos":[0,63]}]},{"pos":[53572,53641],"content":"One of the enumeration values that specifies the impersonation level.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the impersonation level.","pos":[0,69]}]},{"pos":[54131,54236],"content":"Gets a value that indicates whether the user account is identified as an anonymous account by the system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the user account is identified as an anonymous account by the system.","pos":[0,105]}]},{"pos":[54249,54616],"content":"The IsAnonymous property detects both the Windows anonymous identity and the anonymous identity that is returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method.       Anonymous accounts are typically only encountered only from within ASP.NET-based applications when anonymous access is allowed by Internet Information Services (IIS).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The IsAnonymous property detects both the Windows anonymous identity and the anonymous identity that is returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method.       Anonymous accounts are typically only encountered only from within ASP.NET-based applications when anonymous access is allowed by Internet Information Services (IIS).","pos":[0,365],"nodes":[{"content":"The IsAnonymous property detects both the Windows anonymous identity and the anonymous identity that is returned by the &lt;xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A&gt; method.","pos":[0,192],"source":"The IsAnonymous property detects both the Windows anonymous identity and the anonymous identity that is returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method."},{"content":"Anonymous accounts are typically only encountered only from within ASP.NET-based applications when anonymous access is allowed by Internet Information Services (IIS).","pos":[199,365]}]}]},{"pos":[55416,55596],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the user account is an anonymous account; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user account is an anonymous account; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[56099,56174],"content":"Gets a value indicating whether the user has been authenticated by Windows.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the user has been authenticated by Windows.","pos":[0,75]}]},{"pos":[56302,56468],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the user was authenticated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user was authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[56935,57091],"content":"Gets a value indicating whether the user account is identified as a <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsAccountType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> account by the system.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType\"></xref> account by the system."},{"pos":[57962,58197],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the user account is a <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.WindowsAccountType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> account; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user account is a <xref href=\"System.Security.Principal.WindowsAccountType\"></xref> account; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[58661,58817],"content":"Gets a value indicating whether the user account is identified as a <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsAccountType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> account by the system.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType\"></xref> account by the system."},{"pos":[59687,59922],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the user account is a <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.WindowsAccountType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> account; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user account is a <xref href=\"System.Security.Principal.WindowsAccountType\"></xref> account; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[60367,60402],"content":"Gets the user's Windows logon name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the user's Windows logon name.","pos":[0,35]}]},{"pos":[60414,60460],"content":"The logon name is in the form DOMAIN\\USERNAME.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The logon name is in the form DOMAIN\\USERNAME.","pos":[0,46]}]},{"pos":[61197,61270],"content":"The Windows logon name of the user on whose behalf the code is being run.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Windows logon name of the user on whose behalf the code is being run.","pos":[0,73]}]},{"pos":[61716,61771],"content":"Gets the security identifier (SID) for the token owner.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the security identifier (SID) for the token owner.","pos":[0,55]}]},{"pos":[61783,61959],"content":"The SID uniquely identifies a user or group on all Windows NT implementations.  The returned SID identifies the default owner SID that will be applied to newly created objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SID uniquely identifies a user or group on all Windows NT implementations.  The returned SID identifies the default owner SID that will be applied to newly created objects.","pos":[0,176],"nodes":[{"content":"The SID uniquely identifies a user or group on all Windows NT implementations.","pos":[0,78]},{"content":"The returned SID identifies the default owner SID that will be applied to newly created objects.","pos":[80,176]}]}]},{"pos":[62660,62690],"content":"An object for the token owner.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object for the token owner.","pos":[0,30]}]},{"pos":[63405,63697],"content":"Runs the specified action as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href=\"System.Security.Principal.WindowsImpersonationContext\"></xref>, you can use RunImpersonated and provide your function directly as a parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Runs the specified action as the impersonated Windows identity.","pos":[0,63]},{"content":"Instead of using an impersonated method call and running your function in <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsImpersonationContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, you can use RunImpersonated and provide your function directly as a parameter.","pos":[64,292],"source":" Instead of using an impersonated method call and running your function in <xref href=\"System.Security.Principal.WindowsImpersonationContext\"></xref>, you can use RunImpersonated and provide your function directly as a parameter."}]},{"pos":[67467,67530],"content":"The SafeAccessTokenHandle of the impersonated Windows identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SafeAccessTokenHandle of the impersonated Windows identity.","pos":[0,63]}]},{"pos":[67593,67618],"content":"The System.Action to run.","needQuote":true,"needEscape":true,"nodes":[{"content":"The System.Action to run.","pos":[0,25]}]},{"pos":[68627,68639],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[68701,68713],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[68759,68771],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[69627,69797],"content":"Implements the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and is called back by the deserialization event when deserialization is complete.","needQuote":true,"needEscape":true,"source":"Implements the <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> interface and is called back by the deserialization event when deserialization is complete."},{"pos":[69964,70004],"content":"The source of the deserialization event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source of the deserialization event.","pos":[0,40]}]},{"pos":[71080,71258],"content":"Sets the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object with the logical context information needed to recreate an instance of this execution context.","needQuote":true,"needEscape":true,"source":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the logical context information needed to recreate an instance of this execution context."},{"pos":[71271,71637],"content":"This method sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.       For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.       For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.","pos":[0,364],"nodes":[{"content":"This method sets a &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; with the logical call context information.","pos":[0,115],"source":"This method sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information."},{"content":"During deserialization, the execution context object is reconstituted from the &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; transmitted over the stream.","pos":[116,277],"source":" During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream."},{"content":"For more information, see &lt;xref:System.Runtime.Serialization.SerializationInfo&gt;.","pos":[284,364],"source":"       For more information, see <xref:System.Runtime.Serialization.SerializationInfo>."}]}]},{"pos":[71914,72027],"content":"An object containing the information required to serialize the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object containing the information required to serialize the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[72123,72266],"content":"An object containing the source and destination of the serialized stream associated with the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object containing the source and destination of the serialized stream associated with the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[72764,72808],"content":"Gets the Windows account token for the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the Windows account token for the user.","pos":[0,44]}]},{"pos":[72821,73692],"content":"Do not explicitly release the account token that is returned by the Token property. The token is released by the <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> method, which you can call in code. <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> is also automatically called by the garbage collector.      > [!NOTE] >  The account token that is returned by the Token property is a duplicate of the Windows token that is used to create the <xref:System.Security.Principal.WindowsIdentity> object and is automatically released by the .NET Framework. This is different from the account token (the `userToken` parameter for the constructor), which is used to create the <xref:System.Security.Principal.WindowsIdentity> object. `userToken` is a Windows account token that is created by a call to `LogonUser` and must be closed to avoid a memory leak.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Do not explicitly release the account token that is returned by the Token property.","pos":[0,83]},{"content":"The token is released by the &lt;xref:System.Security.Principal.WindowsIdentity.Dispose%2A&gt; method, which you can call in code.","pos":[84,208],"source":" The token is released by the <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> method, which you can call in code."},{"content":"&lt;xref:System.Security.Principal.WindowsIdentity.Dispose%2A&gt; is also automatically called by the garbage collector.","pos":[209,323],"source":" <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> is also automatically called by the garbage collector."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The account token that is returned by the Token property is a duplicate of the Windows token that is used to create the &lt;xref:System.Security.Principal.WindowsIdentity&gt; object and is automatically released by the .NET Framework.","pos":[329,570],"source":"      > [!NOTE] >  The account token that is returned by the Token property is a duplicate of the Windows token that is used to create the <xref:System.Security.Principal.WindowsIdentity> object and is automatically released by the .NET Framework."},{"content":"This is different from the account token (the <ph id=\"ph1\">`userToken`</ph> parameter for the constructor), which is used to create the &lt;xref:System.Security.Principal.WindowsIdentity&gt; object.","pos":[571,745],"source":" This is different from the account token (the `userToken` parameter for the constructor), which is used to create the <xref:System.Security.Principal.WindowsIdentity> object."},{"content":"<ph id=\"ph1\">`userToken`</ph> is a Windows account token that is created by a call to <ph id=\"ph2\">`LogonUser`</ph> and must be closed to avoid a memory leak.","pos":[746,868],"source":"`userToken` is a Windows account token that is created by a call to `LogonUser` and must be closed to avoid a memory leak."}]},{"pos":[74498,74574],"content":"The handle of the access token associated with the current execution thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle of the access token associated with the current execution thread.","pos":[0,76]}]},{"pos":[75016,75064],"content":"Gets the security identifier (SID) for the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the security identifier (SID) for the user.","pos":[0,48]}]},{"pos":[75077,75647],"content":"The SID uniquely identifies a user or group on all Windows NT implementations.      > [!NOTE] >  The <xref:System.Security.Principal.WindowsIdentity> object returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method is not the same as the Windows anonymous user. This property gets `null` for an anonymous user represented by the <xref:System.Security.Principal.WindowsIdentity> object returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method; it does not get the SID representing an anonymous Windows user.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SID uniquely identifies a user or group on all Windows NT implementations.","pos":[0,78]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Security.Principal.WindowsIdentity&gt; object returned by the &lt;xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A&gt; method is not the same as the Windows anonymous user.","pos":[84,291],"source":"      > [!NOTE] >  The <xref:System.Security.Principal.WindowsIdentity> object returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method is not the same as the Windows anonymous user."},{"content":"This property gets <ph id=\"ph1\">`null`</ph> for an anonymous user represented by the &lt;xref:System.Security.Principal.WindowsIdentity&gt; object returned by the &lt;xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A&gt; method; it does not get the SID representing an anonymous Windows user.","pos":[292,567],"source":" This property gets `null` for an anonymous user represented by the <xref:System.Security.Principal.WindowsIdentity> object returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method; it does not get the SID representing an anonymous Windows user."}]},{"pos":[75826,75849],"content":"An object for the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object for the user.","pos":[0,23]}]},{"pos":[76320,76431],"content":"Gets claims that have the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimTypes.WindowsUserClaim\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property key.","needQuote":true,"needEscape":true,"source":"Gets claims that have the <xref href=\"System.Security.Claims.ClaimTypes.WindowsUserClaim\"></xref> property key."},{"pos":[76671,76793],"content":"A collection of claims that have the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimTypes.WindowsUserClaim\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> property key.","needQuote":true,"needEscape":true,"source":"A collection of claims that have the <xref href=\"System.Security.Claims.ClaimTypes.WindowsUserClaim\"></xref> property key."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Principal.WindowsIdentity\n  id: WindowsIdentity\n  children:\n  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.String)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)\n  - System.Security.Principal.WindowsIdentity.AccessToken\n  - System.Security.Principal.WindowsIdentity.AuthenticationType\n  - System.Security.Principal.WindowsIdentity.Claims\n  - System.Security.Principal.WindowsIdentity.Clone\n  - System.Security.Principal.WindowsIdentity.DefaultIssuer\n  - System.Security.Principal.WindowsIdentity.DeviceClaims\n  - System.Security.Principal.WindowsIdentity.Dispose\n  - System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)\n  - System.Security.Principal.WindowsIdentity.GetAnonymous\n  - System.Security.Principal.WindowsIdentity.GetCurrent\n  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)\n  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)\n  - System.Security.Principal.WindowsIdentity.Groups\n  - System.Security.Principal.WindowsIdentity.Impersonate\n  - System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)\n  - System.Security.Principal.WindowsIdentity.ImpersonationLevel\n  - System.Security.Principal.WindowsIdentity.IsAnonymous\n  - System.Security.Principal.WindowsIdentity.IsAuthenticated\n  - System.Security.Principal.WindowsIdentity.IsGuest\n  - System.Security.Principal.WindowsIdentity.IsSystem\n  - System.Security.Principal.WindowsIdentity.Name\n  - System.Security.Principal.WindowsIdentity.Owner\n  - System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\n  - System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})\n  - System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  - System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Principal.WindowsIdentity.Token\n  - System.Security.Principal.WindowsIdentity.User\n  - System.Security.Principal.WindowsIdentity.UserClaims\n  langs:\n  - csharp\n  name: WindowsIdentity\n  nameWithType: WindowsIdentity\n  fullName: System.Security.Principal.WindowsIdentity\n  type: Class\n  summary: Represents a Windows user.\n  remarks: \"Call the <xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A> method to create a WindowsIdentity object that represents the current user.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  example:\n  - \"The following example shows the use of members of WindowsIdentity class.  For an example showing how to obtain a Windows account token through a call to the unmanaged Win32 `LogonUser` function, and use that token to impersonate another user, see the <xref:System.Security.Principal.WindowsImpersonationContext> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/csharp/t-system.security.princi_5_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/cpp/t-system.security.princi_5_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/visualbasic/t-system.security.princi_5_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class WindowsIdentity : System.Security.Claims.ClaimsIdentity, IDisposable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  - System.Security.Claims.ClaimsIdentity\n  implements:\n  - System.IDisposable\n  - System.Runtime.Serialization.IDeserializationCallback\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Security.Claims.ClaimsIdentity.Actor\n  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.BootstrapContext\n  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n  - System.Security.Claims.ClaimsIdentity.Label\n  - System.Security.Claims.ClaimsIdentity.NameClaimType\n  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.RoleClaimType\n  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: WindowsIdentity(IntPtr)\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified Windows account token.\n  remarks: \"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>|`Negotiate`|  \\n|<xref:System.Security.Principal.WindowsAccountType>|`Normal`|  \\n|<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|  \\n  \\n> [!NOTE]\\n>  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function. Always release `userToken` by calling the Win32 API `CloseHandle` function. For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public WindowsIdentity (IntPtr userToken);\n    parameters:\n    - id: userToken\n      type: System.IntPtr\n      description: The account token for the user on whose behalf the code is running.\n  overload: System.Security.Principal.WindowsIdentity.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userToken</code> is 0.  \\n  \\n -or-  \\n  \\n <code>userToken</code> is duplicated and invalid for impersonation.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have the correct permissions.  \\n  \\n -or-  \\n  \\n A Win32 error occurred.\"\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)\n  id: '#ctor(System.Security.Principal.WindowsIdentity)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: WindowsIdentity(WindowsIdentity)\n  nameWithType: WindowsIdentity.WindowsIdentity(WindowsIdentity)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(WindowsIdentity)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class by using the specified <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object.\n  syntax:\n    content: protected WindowsIdentity (System.Security.Principal.WindowsIdentity identity);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.WindowsIdentity\n      description: The object from which to construct the new instance of <xref href=\"System.Security.Principal.WindowsIdentity\"></xref>.\n  overload: System.Security.Principal.WindowsIdentity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: WindowsIdentity(String)\n  nameWithType: WindowsIdentity.WindowsIdentity(String)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified User Principal Name (UPN).\n  remarks: \"A UPN has the format *username*@*domainname*.com, in other words, an email address. The UPN identified in `sUserPrincipalName` is used to retrieve a token for that user through the Win32 API `LsaLogonUser` function. In turn that token is used to identify the user. An exception might be returned due to the inability to log on using the supplied UPN.  \\n  \\n> [!NOTE]\\n>  This constructor is intended for use only on computers joined to Windows Server 2003 or later domains. An exception is thrown for earlier domain types. This restriction is due to the fact that this constructor uses the [KERB_S4U_LOGON structure](http://go.microsoft.com/fwlink/?LinkId=143533), which was first introduced in Windows Server 2003.\"\n  syntax:\n    content: public WindowsIdentity (string sUserPrincipalName);\n    parameters:\n    - id: sUserPrincipalName\n      type: System.String\n      description: The UPN for the user on whose behalf the code is running.\n  overload: System.Security.Principal.WindowsIdentity.#ctor*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Windows returned the Windows NT status code STATUS_ACCESS_DENIED.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have the correct permissions.  \\n  \\n -or-  \\n  \\n The computer is not attached to a Windows 2003 or later domain.  \\n  \\n -or-  \\n  \\n The computer is not running Windows 2003 or later.  \\n  \\n -or-  \\n  \\n The user is not a member of the domain the computer is attached to.\"\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)\n  id: '#ctor(System.IntPtr,System.String)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: WindowsIdentity(IntPtr,String)\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified Windows account token and the specified authentication type.\n  remarks: \"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Security.Principal.WindowsAccountType>|`Normal`|  \\n|<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|  \\n  \\n The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter. If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.  \\n  \\n> [!NOTE]\\n>  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function. Always release `userToken` by calling the Win32 API `CloseHandle` function. For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.%23ctor%2A> constructor to create a new instance of the  <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token and the specified authentication type. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/csharp/dc54fc11-729f-4337-b932-_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/cpp/dc54fc11-729f-4337-b932-_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/visualbasic/dc54fc11-729f-4337-b932-_1.vb)]\"\n  syntax:\n    content: public WindowsIdentity (IntPtr userToken, string type);\n    parameters:\n    - id: userToken\n      type: System.IntPtr\n      description: The account token for the user on whose behalf the code is running.\n    - id: type\n      type: System.String\n      description: (Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.\n  overload: System.Security.Principal.WindowsIdentity.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userToken</code> is 0.  \\n  \\n -or-  \\n  \\n <code>userToken</code> is duplicated and invalid for impersonation.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have the correct permissions.  \\n  \\n -or-  \\n  \\n A Win32 error occurred.\"\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: WindowsIdentity(SerializationInfo,StreamingContext)\n  nameWithType: WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by information in a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> stream.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).\n  syntax:\n    content: public WindowsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object containing the account information for the user.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: An object that indicates the stream characteristics.\n  overload: System.Security.Principal.WindowsIdentity.#ctor*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> cannot be serialized across processes.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have the correct permissions.  \\n  \\n -or-  \\n  \\n A Win32 error occurred.\"\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: WindowsIdentity(String,String)\n  nameWithType: WindowsIdentity.WindowsIdentity(String,String)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified User Principal Name (UPN) and the specified authentication type.\n  remarks: \"The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter. If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.  \\n  \\n The UPN identified in `sUserPrincipalName` is used to retrieve a token for that user through the Win32 API `LsaLogonUser` function. In turn that token is used to identify the user. An exception might be returned due to the inability to log on using the supplied UPN.  \\n  \\n> [!NOTE]\\n>  This constructor is intended for use only on computers joined to Windows Server 2003 or later domains. An exception is thrown for earlier domain types. This restriction is due to the fact that this constructor uses the [KERB_S4U_LOGON structure](http://go.microsoft.com/fwlink/?LinkId=143533), which was first introduced in Windows Server 2003.\"\n  syntax:\n    content: public WindowsIdentity (string sUserPrincipalName, string type);\n    parameters:\n    - id: sUserPrincipalName\n      type: System.String\n      description: The UPN for the user on whose behalf the code is running.\n    - id: type\n      type: System.String\n      description: (Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.\n  overload: System.Security.Principal.WindowsIdentity.#ctor*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Windows returned the Windows NT status code STATUS_ACCESS_DENIED.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have the correct permissions.  \\n  \\n -or-  \\n  \\n The computer is not attached to a Windows 2003 or later domain.  \\n  \\n -or-  \\n  \\n The computer is not running Windows 2003 or later.  \\n  \\n -or-  \\n  \\n The user is not a member of the domain the computer is attached to.\"\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)\n  id: '#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: WindowsIdentity(IntPtr,String,WindowsAccountType)\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type.\n  remarks: \"The following table shows initial property values for an instance of <xref:System.Security.Principal.WindowsIdentity>.  \\n  \\n|Property|Initial Value|  \\n|--------------|-------------------|  \\n|<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|  \\n  \\n The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter. If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.  \\n  \\n> [!NOTE]\\n>  You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function. Always release `userToken` by calling the Win32 API `CloseHandle` function. For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code shows the use of the WindowsIdentity constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/csharp/6cec7b3f-80c5-417d-99d8-_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/cpp/6cec7b3f-80c5-417d-99d8-_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/visualbasic/6cec7b3f-80c5-417d-99d8-_1.vb)]\"\n  syntax:\n    content: public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType);\n    parameters:\n    - id: userToken\n      type: System.IntPtr\n      description: The account token for the user on whose behalf the code is running.\n    - id: type\n      type: System.String\n      description: (Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.\n    - id: acctType\n      type: System.Security.Principal.WindowsAccountType\n      description: One of the enumeration values.\n  overload: System.Security.Principal.WindowsIdentity.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userToken</code> is 0.  \\n  \\n -or-  \\n  \\n <code>userToken</code> is duplicated and invalid for impersonation.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have the correct permissions.  \\n  \\n -or-  \\n  \\n A Win32 error occurred.\"\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)\n  id: '#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status.\n  remarks: \"The value of the `type` parameter is used to set the <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> parameter. If `type` is `null`, the security system sets <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> to `Negotiate` on Windows Vista and later versions of the Windows operating system, and to `Kerberos` on earlier versions of the Windows operating system. The security system does not use this value; it is for informational use only.  \\n  \\n You can retrieve the token represented by `userToken` by calling unmanaged code such as the Win32 API `LogonUser` function. Always release `userToken` by calling the Win32 API `CloseHandle` function. For more information on calling unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code shows the use of the WindowsIdentity constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/csharp/851e6c2b-b248-45b7-9cd4-_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/cpp/851e6c2b-b248-45b7-9cd4-_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/visualbasic/851e6c2b-b248-45b7-9cd4-_1.vb)]\"\n  syntax:\n    content: public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);\n    parameters:\n    - id: userToken\n      type: System.IntPtr\n      description: The account token for the user on whose behalf the code is running.\n    - id: type\n      type: System.String\n      description: (Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.\n    - id: acctType\n      type: System.Security.Principal.WindowsAccountType\n      description: One of the enumeration values.\n    - id: isAuthenticated\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that the user is authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsIdentity.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userToken</code> is 0.  \\n  \\n -or-  \\n  \\n <code>userToken</code> is duplicated and invalid for impersonation.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have the correct permissions.  \\n  \\n -or-  \\n  \\n A Win32 error occurred.\"\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.AccessToken\n  id: AccessToken\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: AccessToken\n  nameWithType: WindowsIdentity.AccessToken\n  fullName: System.Security.Principal.WindowsIdentity.AccessToken\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets this <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> for this <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> instance.\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafeAccessTokenHandle AccessToken { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n      description: Returns a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref>.\n  overload: System.Security.Principal.WindowsIdentity.AccessToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.AuthenticationType\n  id: AuthenticationType\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: AuthenticationType\n  nameWithType: WindowsIdentity.AuthenticationType\n  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets the type of authentication used to identify the user.\n  remarks: This property is informational; it is not used by the security system. On Windows Vista and later versions of the Windows operating system, the default value for this property is `Negotiate`, which chooses the best security support provider (SSP) based on customer-configured security policy. The default property value for earlier versions of the Windows operating system is `Kerberos`.\n  syntax:\n    content: public override sealed string AuthenticationType { get; }\n    return:\n      type: System.String\n      description: The type of authentication used to identify the user.\n  overload: System.Security.Principal.WindowsIdentity.AuthenticationType*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Windows returned the Windows NT status code STATUS_ACCESS_DENIED.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have the correct permissions.  \\n  \\n -or-  \\n  \\n The computer is not attached to a Windows 2003 or later domain.  \\n  \\n -or-  \\n  \\n The computer is not running Windows 2003 or later.  \\n  \\n -or-  \\n  \\n The user is not a member of the domain the computer is attached to.\"\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Claims\n  id: Claims\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Claims\n  nameWithType: WindowsIdentity.Claims\n  fullName: System.Security.Principal.WindowsIdentity.Claims\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets all claims for the user represented by this Windows identity.\n  syntax:\n    content: public override System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: A collection of claims for this <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object.\n  overload: System.Security.Principal.WindowsIdentity.Claims*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Clone\n  id: Clone\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: WindowsIdentity.Clone()\n  fullName: System.Security.Principal.WindowsIdentity.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Creates a new  object that is a copy of the current instance.\n  syntax:\n    content: public override System.Security.Claims.ClaimsIdentity Clone ();\n    parameters: []\n    return:\n      type: System.Security.Claims.ClaimsIdentity\n      description: A copy of the current instance.\n  overload: System.Security.Principal.WindowsIdentity.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer\n  id: DefaultIssuer\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: DefaultIssuer\n  nameWithType: WindowsIdentity.DefaultIssuer\n  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Identifies the name of the default <xref href=\"System.Security.Claims.ClaimsIdentity\"></xref> issuer.\n  syntax:\n    content: public const string DefaultIssuer;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.DeviceClaims\n  id: DeviceClaims\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: DeviceClaims\n  nameWithType: WindowsIdentity.DeviceClaims\n  fullName: System.Security.Principal.WindowsIdentity.DeviceClaims\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets claims that have the <xref href=\"System.Security.Claims.ClaimTypes.WindowsDeviceClaim\"></xref> property key.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> DeviceClaims { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: A collection of claims that have the <xref href=\"System.Security.Claims.ClaimTypes.WindowsDeviceClaim\"></xref> property key.\n  overload: System.Security.Principal.WindowsIdentity.DeviceClaims*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Dispose\n  id: Dispose\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: WindowsIdentity.Dispose()\n  fullName: System.Security.Principal.WindowsIdentity.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Releases all resources used by the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref>.\n  remarks: \"Call Dispose when you are finished using the <xref:System.Security.Principal.WindowsIdentity>. The Dispose method leaves the <xref:System.Security.Principal.WindowsIdentity> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Security.Principal.WindowsIdentity> so the garbage collector can reclaim the memory that the <xref:System.Security.Principal.WindowsIdentity> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call Dispose before you release your last reference to the <xref:System.Security.Principal.WindowsIdentity>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Principal.WindowsIdentity> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Principal.WindowsIdentity.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: WindowsIdentity.Dispose(Boolean)\n  fullName: System.Security.Principal.WindowsIdentity.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Principal.WindowsIdentity> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Security.Principal.WindowsIdentity.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.GetAnonymous\n  id: GetAnonymous\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: GetAnonymous()\n  nameWithType: WindowsIdentity.GetAnonymous()\n  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that you can use as a sentinel value in your code to represent an anonymous user. The property value does not represent the built-in anonymous identity used by the Windows operating system.\n  remarks: \"This property returns an empty <xref:System.Security.Principal.WindowsIdentity> object that enables you to treat operations as anonymous. The property value does not correspond to a Windows anonymous user and cannot be used for impersonation. Also, note that the identity returned by this property is not static; each call to GetAnonymous returns a different anonymous identity.  \\n  \\n You can use the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property to detect the return value from GetAnonymous. However, <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> detects both the Windows anonymous identity and the anonymous identity returned by this method. To use the latter identity, cache the GetAnonymous return value instead of relying on the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property.\"\n  example:\n  - \"The following code shows the use of the GetAnonymous method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents an anonymous Windows user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/csharp/m-system.security.princi_5_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/cpp/m-system.security.princi_5_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/visualbasic/m-system.security.princi_5_1.vb)]\"\n  syntax:\n    content: public static System.Security.Principal.WindowsIdentity GetAnonymous ();\n    parameters: []\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: An object that represents an anonymous user.\n  overload: System.Security.Principal.WindowsIdentity.GetAnonymous*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent\n  id: GetCurrent\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: GetCurrent()\n  nameWithType: WindowsIdentity.GetCurrent()\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that represents the current Windows user.\n  remarks: ''\n  example:\n  - \"The following code shows the use of the GetCurrent method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents the current Windows user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/csharp/m-system.security.princi_7_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/cpp/m-system.security.princi_7_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/visualbasic/m-system.security.princi_7_1.vb)]\"\n  syntax:\n    content: public static System.Security.Principal.WindowsIdentity GetCurrent ();\n    parameters: []\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: An object that represents the current user.\n  overload: System.Security.Principal.WindowsIdentity.GetCurrent*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the correct permissions.\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)\n  id: GetCurrent(System.Boolean)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: GetCurrent(Boolean)\n  nameWithType: WindowsIdentity.GetCurrent(Boolean)\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that represents the Windows identity for either the thread or the process, depending on the value of the <code>ifImpersonating</code> parameter.\n  remarks: If `ifImpersonating` is `true` and the thread is not impersonating, the returned <xref:System.Security.Principal.WindowsIdentity> object has no value.  If `ifImpersonating` is `false` and the thread is impersonating, the <xref:System.Security.Principal.WindowsIdentity> for the thread is returned.  If `ifImpersonating` is `false` and the thread is not impersonating, the <xref:System.Security.Principal.WindowsIdentity> for the process is returned.\n  syntax:\n    content: public static System.Security.Principal.WindowsIdentity GetCurrent (bool ifImpersonating);\n    parameters:\n    - id: ifImpersonating\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to return the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> only if the thread is currently impersonating; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to return the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> of the thread if it is impersonating or the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> of the process if the thread is not currently impersonating.\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: An object that represents a Windows user.\n  overload: System.Security.Principal.WindowsIdentity.GetCurrent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)\n  id: GetCurrent(System.Security.Principal.TokenAccessLevels)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: GetCurrent(TokenAccessLevels)\n  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(TokenAccessLevels)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Returns a <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object that represents the current Windows user, using the specified desired token access level.\n  remarks: The `desiredAccess` parameter specifies an access mask that identifies the requested types of access to the access token. These requested access types are compared with the token's discretionary access control list (DACL) to determine which types of access are granted or denied.\n  syntax:\n    content: public static System.Security.Principal.WindowsIdentity GetCurrent (System.Security.Principal.TokenAccessLevels desiredAccess);\n    parameters:\n    - id: desiredAccess\n      type: System.Security.Principal.TokenAccessLevels\n      description: A bitwise combination of the enumeration values.\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: An object that represents the current user.\n  overload: System.Security.Principal.WindowsIdentity.GetCurrent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Groups\n  id: Groups\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Groups\n  nameWithType: WindowsIdentity.Groups\n  fullName: System.Security.Principal.WindowsIdentity.Groups\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets the groups the current Windows user belongs to.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the Groups property to display the identity references for the groups the current user belongs to.  This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#20](~/add/codesnippet/csharp/p-system.security.princi_8_1.cs)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#20](~/add/codesnippet/visualbasic/p-system.security.princi_8_1.vb)]\"\n  syntax:\n    content: public System.Security.Principal.IdentityReferenceCollection Groups { get; }\n    return:\n      type: System.Security.Principal.IdentityReferenceCollection\n      description: An object representing the groups the current Windows user belongs to.\n  overload: System.Security.Principal.WindowsIdentity.Groups*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Impersonate\n  id: Impersonate\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Impersonate()\n  nameWithType: WindowsIdentity.Impersonate()\n  fullName: System.Security.Principal.WindowsIdentity.Impersonate()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Impersonates the user represented by the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object.\n  remarks: On Windows NT platforms, the current user must have sufficient rights to allow impersonation.\n  example:\n  - \"The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.  \\n  \\n [!code-cpp[WindowsIdentity Impersonation#1](~/add/codesnippet/cpp/m-system.security.princi_2_1.cpp)]\\n [!code-cs[WindowsIdentity Impersonation#1](~/add/codesnippet/csharp/m-system.security.princi_2_1.cs)]\\n [!code-vb[WindowsIdentity Impersonation#1](~/add/codesnippet/visualbasic/m-system.security.princi_2_1.vb)]\"\n  syntax:\n    content: public virtual System.Security.Principal.WindowsImpersonationContext Impersonate ();\n    parameters: []\n    return:\n      type: System.Security.Principal.WindowsImpersonationContext\n      description: An object that represents the Windows user prior to impersonation; this can be used to revert to the original user's context.\n  overload: System.Security.Principal.WindowsIdentity.Impersonate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An anonymous identity attempted to perform an impersonation.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A Win32 error occurred.\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)\n  id: Impersonate(System.IntPtr)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Impersonate(IntPtr)\n  nameWithType: WindowsIdentity.Impersonate(IntPtr)\n  fullName: System.Security.Principal.WindowsIdentity.Impersonate(IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Impersonates the user represented by the specified user token.\n  remarks: \"On Windows NT platforms, the current user must have sufficient rights to allow impersonation.  \\n  \\n> [!NOTE]\\n>  Calling the Impersonate method with a `userToken` value of <xref:System.IntPtr> is equivalent to calling the Win32 `RevertToSelf` function. If another user is currently being impersonated, control reverts to the original user.  \\n  \\n For more information about calls to unmanaged code, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.  \\n  \\n [!code-vb[WindowsIdentity Impersonation2#1](~/add/codesnippet/visualbasic/m-system.security.princi_3_1.vb)]\\n [!code-cs[WindowsIdentity Impersonation2#1](~/add/codesnippet/csharp/m-system.security.princi_3_1.cs)]\"\n  syntax:\n    content: public static System.Security.Principal.WindowsImpersonationContext Impersonate (IntPtr userToken);\n    parameters:\n    - id: userToken\n      type: System.IntPtr\n      description: The handle of a Windows account token. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API <xref uid=\"langword_csharp_LogonUser\" name=\"LogonUser\" href=\"\"></xref> function.\n    return:\n      type: System.Security.Principal.WindowsImpersonationContext\n      description: An object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.\n  overload: System.Security.Principal.WindowsIdentity.Impersonate*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Windows returned the Windows NT status code STATUS_ACCESS_DENIED.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the correct permissions.\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel\n  id: ImpersonationLevel\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: ImpersonationLevel\n  nameWithType: WindowsIdentity.ImpersonationLevel\n  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets the impersonation level for the user.\n  remarks: Describes the impersonation level to be used to connect to WMI.\n  example:\n  - \"The following code example shows the use of the ImpersonationLevel property to display the impersonation level for the current user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#21](~/add/codesnippet/csharp/p-system.security.princi_3_1.cs)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#21](~/add/codesnippet/visualbasic/p-system.security.princi_3_1.vb)]\"\n  syntax:\n    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }\n    return:\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the enumeration values that specifies the impersonation level.\n  overload: System.Security.Principal.WindowsIdentity.ImpersonationLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.IsAnonymous\n  id: IsAnonymous\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: IsAnonymous\n  nameWithType: WindowsIdentity.IsAnonymous\n  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets a value that indicates whether the user account is identified as an anonymous account by the system.\n  remarks: \"The IsAnonymous property detects both the Windows anonymous identity and the anonymous identity that is returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method.  \\n  \\n Anonymous accounts are typically only encountered only from within ASP.NET-based applications when anonymous access is allowed by Internet Information Services (IIS).\"\n  example:\n  - \"The following code shows the use of the IsAnonymous property to detect whether the user account is identified as an anonymous account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/csharp/p-system.security.princi_4_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/cpp/p-system.security.princi_4_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/visualbasic/p-system.security.princi_4_1.vb)]\"\n  syntax:\n    content: public virtual bool IsAnonymous { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user account is an anonymous account; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsIdentity.IsAnonymous*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: IsAuthenticated\n  nameWithType: WindowsIdentity.IsAuthenticated\n  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets a value indicating whether the user has been authenticated by Windows.\n  syntax:\n    content: public override bool IsAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user was authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsIdentity.IsAuthenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.IsGuest\n  id: IsGuest\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: IsGuest\n  nameWithType: WindowsIdentity.IsGuest\n  fullName: System.Security.Principal.WindowsIdentity.IsGuest\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType\"></xref> account by the system.\n  remarks: ''\n  example:\n  - \"The following code shows the use of the IsGuest property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType> account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/csharp/p-system.security.princi_11_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/cpp/p-system.security.princi_11_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/visualbasic/p-system.security.princi_11_1.vb)]\"\n  syntax:\n    content: public virtual bool IsGuest { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user account is a <xref href=\"System.Security.Principal.WindowsAccountType\"></xref> account; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsIdentity.IsGuest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.IsSystem\n  id: IsSystem\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: IsSystem\n  nameWithType: WindowsIdentity.IsSystem\n  fullName: System.Security.Principal.WindowsIdentity.IsSystem\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType\"></xref> account by the system.\n  remarks: ''\n  example:\n  - \"The following code shows the use of the IsSystem property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType> account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/csharp/p-system.security.princi_9_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/cpp/p-system.security.princi_9_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/visualbasic/p-system.security.princi_9_1.vb)]\"\n  syntax:\n    content: public virtual bool IsSystem { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the user account is a <xref href=\"System.Security.Principal.WindowsAccountType\"></xref> account; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsIdentity.IsSystem*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Name\n  id: Name\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Name\n  nameWithType: WindowsIdentity.Name\n  fullName: System.Security.Principal.WindowsIdentity.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets the user's Windows logon name.\n  remarks: The logon name is in the form DOMAIN\\USERNAME.\n  example:\n  - \"The following code shows the use of the Name property to get the user's Windows logon name. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/csharp/p-system.security.princi_2_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/cpp/p-system.security.princi_2_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/visualbasic/p-system.security.princi_2_1.vb)]\"\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: The Windows logon name of the user on whose behalf the code is being run.\n  overload: System.Security.Principal.WindowsIdentity.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Owner\n  id: Owner\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: WindowsIdentity.Owner\n  fullName: System.Security.Principal.WindowsIdentity.Owner\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets the security identifier (SID) for the token owner.\n  remarks: The SID uniquely identifies a user or group on all Windows NT implementations.  The returned SID identifies the default owner SID that will be applied to newly created objects.\n  example:\n  - \"The following code example shows the use of the Owner property to display the security identifier for the token owner.  This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#19](~/add/codesnippet/csharp/p-system.security.princi_5_1.cs)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#19](~/add/codesnippet/visualbasic/p-system.security.princi_5_1.vb)]\"\n  syntax:\n    content: public System.Security.Principal.SecurityIdentifier Owner { get; }\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: An object for the token owner.\n  overload: System.Security.Principal.WindowsIdentity.Owner*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\n  id: RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: RunImpersonated(SafeAccessTokenHandle,Action)\n  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)\n  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Runs the specified action as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href=\"System.Security.Principal.WindowsImpersonationContext\"></xref>, you can use RunImpersonated and provide your function directly as a parameter.\n  remarks: ''\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Security.Principal.WindowsIdentity> class to impersonate a user.  \\n  \\n> [!WARNING]\\n>  This sample asks the user to enter a password on the console screen. The password will be visible on the screen, because the console window does not support masked input natively.  \\n  \\n```c#  \\n// The following example demonstrates the use of the WindowsIdentity class to impersonate a user.   \\n// IMPORTANT NOTE:   \\n// This sample asks the user to enter a password on the console screen.   \\n// The password will be visible on the screen, because the console window   \\n// does not support masked input natively.  \\n  \\nusing System;  \\nusing System.Runtime.InteropServices;  \\nusing System.Security;  \\nusing System.Security.Principal;  \\nusing Microsoft.Win32.SafeHandles;  \\n  \\npublic class ImpersonationDemo  \\n{  \\n    [DllImport(\\\"advapi32.dll\\\", SetLastError = true, CharSet = CharSet.Unicode)]  \\n    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,  \\n        int dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);  \\n  \\n    public static void Main()  \\n    {  \\n        // Get the user token for the specified user, domain, and password using the   \\n        // unmanaged LogonUser method.   \\n        // The local machine name can be used for the domain name to impersonate a user on this machine.  \\n        Console.Write(\\\"Enter the name of the domain on which to log on: \\\");  \\n        string domainName = Console.ReadLine();  \\n  \\n        Console.Write(\\\"Enter the login of a user on {0} that you wish to impersonate: \\\", domainName);  \\n        string userName = Console.ReadLine();  \\n  \\n        Console.Write(\\\"Enter the password for {0}: \\\", userName);  \\n  \\n        const int LOGON32_PROVIDER_DEFAULT = 0;  \\n        //This parameter causes LogonUser to create a primary token.   \\n        const int LOGON32_LOGON_INTERACTIVE = 2;  \\n  \\n        // Call LogonUser to obtain a handle to an access token.   \\n        SafeAccessTokenHandle safeAccessTokenHandle;  \\n        bool returnValue = LogonUser(userName, domainName, Console.ReadLine(),  \\n            LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,  \\n            out safeAccessTokenHandle);  \\n  \\n        if (false == returnValue)  \\n        {  \\n            int ret = Marshal.GetLastWin32Error();  \\n            Console.WriteLine(\\\"LogonUser failed with error code : {0}\\\", ret);  \\n            throw new System.ComponentModel.Win32Exception(ret);  \\n        }  \\n  \\n        Console.WriteLine(\\\"Did LogonUser Succeed? \\\" + (returnValue ? \\\"Yes\\\" : \\\"No\\\"));  \\n        // Check the identity.  \\n        Console.WriteLine(\\\"Before impersonation: \\\" + WindowsIdentity.GetCurrent().Name);  \\n  \\n        // Note: if you want to run as unimpersonated, pass  \\n        //       'SafeAccessTokenHandle.InvalidHandle' instead of variable 'safeAccessTokenHandle'  \\n        WindowsIdentity.RunImpersonated(  \\n            safeAccessTokenHandle,  \\n            // User action  \\n            () =>  \\n            {  \\n                // Check the identity.  \\n                Console.WriteLine(\\\"During impersonation: \\\" + WindowsIdentity.GetCurrent().Name);  \\n            }  \\n            );  \\n  \\n        // Check the identity again.  \\n        Console.WriteLine(\\\"After impersonation: \\\" + WindowsIdentity.GetCurrent().Name);  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public static void RunImpersonated (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Action action);\n    parameters:\n    - id: safeAccessTokenHandle\n      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n      description: The SafeAccessTokenHandle of the impersonated Windows identity.\n    - id: action\n      type: System.Action\n      description: The System.Action to run.\n  overload: System.Security.Principal.WindowsIdentity.RunImpersonated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})\n  id: RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: RunImpersonated(SafeAccessTokenHandle,Func<T>)\n  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)\n  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  syntax:\n    content: public static T RunImpersonated<T> (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func);\n    parameters:\n    - id: safeAccessTokenHandle\n      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n      description: To be added.\n    - id: func\n      type: System.Func{T}\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Security.Principal.WindowsIdentity.RunImpersonated<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  isEii: true\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Implements the <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> interface and is called back by the deserialization event when deserialization is complete.\n  syntax:\n    content: void IDeserializationCallback.OnDeserialization (object sender);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The source of the deserialization event.\n  overload: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the logical context information needed to recreate an instance of this execution context.\n  remarks: \"This method sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.  \\n  \\n For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.\"\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: An object containing the information required to serialize the <xref href=\"System.Collections.Hashtable\"></xref>.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: An object containing the source and destination of the serialized stream associated with the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.Token\n  id: Token\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: Token\n  nameWithType: WindowsIdentity.Token\n  fullName: System.Security.Principal.WindowsIdentity.Token\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets the Windows account token for the user.\n  remarks: \"Do not explicitly release the account token that is returned by the Token property. The token is released by the <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> method, which you can call in code. <xref:System.Security.Principal.WindowsIdentity.Dispose%2A> is also automatically called by the garbage collector.  \\n  \\n> [!NOTE]\\n>  The account token that is returned by the Token property is a duplicate of the Windows token that is used to create the <xref:System.Security.Principal.WindowsIdentity> object and is automatically released by the .NET Framework. This is different from the account token (the `userToken` parameter for the constructor), which is used to create the <xref:System.Security.Principal.WindowsIdentity> object. `userToken` is a Windows account token that is created by a call to `LogonUser` and must be closed to avoid a memory leak.\"\n  example:\n  - \"The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.IsSystem%2A> property to get the Windows account token for the user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \\n  \\n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/csharp/p-system.security.princi_0_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/cpp/p-system.security.princi_0_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/visualbasic/p-system.security.princi_0_1.vb)]\"\n  syntax:\n    content: public virtual IntPtr Token { get; }\n    return:\n      type: System.IntPtr\n      description: The handle of the access token associated with the current execution thread.\n  overload: System.Security.Principal.WindowsIdentity.Token*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.User\n  id: User\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: User\n  nameWithType: WindowsIdentity.User\n  fullName: System.Security.Principal.WindowsIdentity.User\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets the security identifier (SID) for the user.\n  remarks: \"The SID uniquely identifies a user or group on all Windows NT implementations.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Security.Principal.WindowsIdentity> object returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method is not the same as the Windows anonymous user. This property gets `null` for an anonymous user represented by the <xref:System.Security.Principal.WindowsIdentity> object returned by the <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> method; it does not get the SID representing an anonymous Windows user.\"\n  syntax:\n    content: public System.Security.Principal.SecurityIdentifier User { get; }\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: An object for the user.\n  overload: System.Security.Principal.WindowsIdentity.User*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsIdentity.UserClaims\n  id: UserClaims\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  name: UserClaims\n  nameWithType: WindowsIdentity.UserClaims\n  fullName: System.Security.Principal.WindowsIdentity.UserClaims\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets claims that have the <xref href=\"System.Security.Claims.ClaimTypes.WindowsUserClaim\"></xref> property key.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> UserClaims { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: A collection of claims that have the <xref href=\"System.Security.Claims.ClaimTypes.WindowsUserClaim\"></xref> property key.\n  overload: System.Security.Principal.WindowsIdentity.UserClaims*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: System.Security.Claims.ClaimsIdentity\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.UnauthorizedAccessException\n  isExternal: true\n  name: System.UnauthorizedAccessException\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity(IntPtr)\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity(WindowsIdentity)\n  nameWithType: WindowsIdentity.WindowsIdentity(WindowsIdentity)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(WindowsIdentity)\n- uid: System.Security.Principal.WindowsIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsIdentity\n  nameWithType: WindowsIdentity\n  fullName: System.Security.Principal.WindowsIdentity\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity(String)\n  nameWithType: WindowsIdentity.WindowsIdentity(String)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity(IntPtr,String)\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String)\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity(SerializationInfo,StreamingContext)\n  nameWithType: WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity(String,String)\n  nameWithType: WindowsIdentity.WindowsIdentity(String,String)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String,String)\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity(IntPtr,String,WindowsAccountType)\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)\n- uid: System.Security.Principal.WindowsAccountType\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsAccountType\n  nameWithType: WindowsAccountType\n  fullName: System.Security.Principal.WindowsAccountType\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Principal.WindowsIdentity.AccessToken\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: AccessToken\n  nameWithType: WindowsIdentity.AccessToken\n  fullName: System.Security.Principal.WindowsIdentity.AccessToken\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeAccessTokenHandle\n  nameWithType: SafeAccessTokenHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n- uid: System.Security.Principal.WindowsIdentity.AuthenticationType\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: AuthenticationType\n  nameWithType: WindowsIdentity.AuthenticationType\n  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType\n- uid: System.Security.Principal.WindowsIdentity.Claims\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Claims\n  nameWithType: WindowsIdentity.Claims\n  fullName: System.Security.Principal.WindowsIdentity.Claims\n- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<Claim>\n  nameWithType: IEnumerable<Claim>\n  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Security.Claims.Claim>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    nameWithType: Claim\n    fullName: Claim\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Principal.WindowsIdentity.Clone\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Clone()\n  nameWithType: WindowsIdentity.Clone()\n  fullName: System.Security.Principal.WindowsIdentity.Clone()\n- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: DefaultIssuer\n  nameWithType: WindowsIdentity.DefaultIssuer\n  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer\n- uid: System.Security.Principal.WindowsIdentity.DeviceClaims\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: DeviceClaims\n  nameWithType: WindowsIdentity.DeviceClaims\n  fullName: System.Security.Principal.WindowsIdentity.DeviceClaims\n- uid: System.Security.Principal.WindowsIdentity.Dispose\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Dispose()\n  nameWithType: WindowsIdentity.Dispose()\n  fullName: System.Security.Principal.WindowsIdentity.Dispose()\n- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: WindowsIdentity.Dispose(Boolean)\n  fullName: System.Security.Principal.WindowsIdentity.Dispose(Boolean)\n- uid: System.Security.Principal.WindowsIdentity.GetAnonymous\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: GetAnonymous()\n  nameWithType: WindowsIdentity.GetAnonymous()\n  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: GetCurrent()\n  nameWithType: WindowsIdentity.GetCurrent()\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: GetCurrent(Boolean)\n  nameWithType: WindowsIdentity.GetCurrent(Boolean)\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(Boolean)\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: GetCurrent(TokenAccessLevels)\n  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(TokenAccessLevels)\n- uid: System.Security.Principal.TokenAccessLevels\n  parent: System.Security.Principal\n  isExternal: false\n  name: TokenAccessLevels\n  nameWithType: TokenAccessLevels\n  fullName: System.Security.Principal.TokenAccessLevels\n- uid: System.Security.Principal.WindowsIdentity.Groups\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Groups\n  nameWithType: WindowsIdentity.Groups\n  fullName: System.Security.Principal.WindowsIdentity.Groups\n- uid: System.Security.Principal.IdentityReferenceCollection\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReferenceCollection\n  nameWithType: IdentityReferenceCollection\n  fullName: System.Security.Principal.IdentityReferenceCollection\n- uid: System.Security.Principal.WindowsIdentity.Impersonate\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Impersonate()\n  nameWithType: WindowsIdentity.Impersonate()\n  fullName: System.Security.Principal.WindowsIdentity.Impersonate()\n- uid: System.Security.Principal.WindowsImpersonationContext\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsImpersonationContext\n  nameWithType: WindowsImpersonationContext\n  fullName: System.Security.Principal.WindowsImpersonationContext\n- uid: System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Impersonate(IntPtr)\n  nameWithType: WindowsIdentity.Impersonate(IntPtr)\n  fullName: System.Security.Principal.WindowsIdentity.Impersonate(IntPtr)\n- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: ImpersonationLevel\n  nameWithType: WindowsIdentity.ImpersonationLevel\n  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel\n- uid: System.Security.Principal.TokenImpersonationLevel\n  parent: System.Security.Principal\n  isExternal: true\n  name: TokenImpersonationLevel\n  nameWithType: TokenImpersonationLevel\n  fullName: System.Security.Principal.TokenImpersonationLevel\n- uid: System.Security.Principal.WindowsIdentity.IsAnonymous\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: IsAnonymous\n  nameWithType: WindowsIdentity.IsAnonymous\n  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous\n- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: WindowsIdentity.IsAuthenticated\n  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated\n- uid: System.Security.Principal.WindowsIdentity.IsGuest\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: IsGuest\n  nameWithType: WindowsIdentity.IsGuest\n  fullName: System.Security.Principal.WindowsIdentity.IsGuest\n- uid: System.Security.Principal.WindowsIdentity.IsSystem\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: IsSystem\n  nameWithType: WindowsIdentity.IsSystem\n  fullName: System.Security.Principal.WindowsIdentity.IsSystem\n- uid: System.Security.Principal.WindowsIdentity.Name\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Name\n  nameWithType: WindowsIdentity.Name\n  fullName: System.Security.Principal.WindowsIdentity.Name\n- uid: System.Security.Principal.WindowsIdentity.Owner\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Owner\n  nameWithType: WindowsIdentity.Owner\n  fullName: System.Security.Principal.WindowsIdentity.Owner\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  nameWithType: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: RunImpersonated(SafeAccessTokenHandle,Action)\n  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)\n  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)\n- uid: System.Action\n  parent: System\n  isExternal: true\n  name: Action\n  nameWithType: Action\n  fullName: System.Action\n- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: RunImpersonated(SafeAccessTokenHandle,Func<T>)\n  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)\n  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Func{T}\n  parent: System\n  isExternal: true\n  name: Func<T>\n  nameWithType: Func<T>\n  fullName: System.Func<T>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: Func<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Security.Principal.WindowsIdentity.Token\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Token\n  nameWithType: WindowsIdentity.Token\n  fullName: System.Security.Principal.WindowsIdentity.Token\n- uid: System.Security.Principal.WindowsIdentity.User\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: User\n  nameWithType: WindowsIdentity.User\n  fullName: System.Security.Principal.WindowsIdentity.User\n- uid: System.Security.Principal.WindowsIdentity.UserClaims\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: UserClaims\n  nameWithType: WindowsIdentity.UserClaims\n  fullName: System.Security.Principal.WindowsIdentity.UserClaims\n- uid: System.Security.Principal.WindowsIdentity.#ctor*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: WindowsIdentity\n  nameWithType: WindowsIdentity.WindowsIdentity\n- uid: System.Security.Principal.WindowsIdentity.AccessToken*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: AccessToken\n  nameWithType: WindowsIdentity.AccessToken\n- uid: System.Security.Principal.WindowsIdentity.AuthenticationType*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: AuthenticationType\n  nameWithType: WindowsIdentity.AuthenticationType\n- uid: System.Security.Principal.WindowsIdentity.Claims*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Claims\n  nameWithType: WindowsIdentity.Claims\n- uid: System.Security.Principal.WindowsIdentity.Clone*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Clone\n  nameWithType: WindowsIdentity.Clone\n- uid: System.Security.Principal.WindowsIdentity.DeviceClaims*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: DeviceClaims\n  nameWithType: WindowsIdentity.DeviceClaims\n- uid: System.Security.Principal.WindowsIdentity.Dispose*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Dispose\n  nameWithType: WindowsIdentity.Dispose\n- uid: System.Security.Principal.WindowsIdentity.GetAnonymous*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: GetAnonymous\n  nameWithType: WindowsIdentity.GetAnonymous\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: GetCurrent\n  nameWithType: WindowsIdentity.GetCurrent\n- uid: System.Security.Principal.WindowsIdentity.Groups*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Groups\n  nameWithType: WindowsIdentity.Groups\n- uid: System.Security.Principal.WindowsIdentity.Impersonate*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Impersonate\n  nameWithType: WindowsIdentity.Impersonate\n- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: ImpersonationLevel\n  nameWithType: WindowsIdentity.ImpersonationLevel\n- uid: System.Security.Principal.WindowsIdentity.IsAnonymous*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: IsAnonymous\n  nameWithType: WindowsIdentity.IsAnonymous\n- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: WindowsIdentity.IsAuthenticated\n- uid: System.Security.Principal.WindowsIdentity.IsGuest*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: IsGuest\n  nameWithType: WindowsIdentity.IsGuest\n- uid: System.Security.Principal.WindowsIdentity.IsSystem*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: IsSystem\n  nameWithType: WindowsIdentity.IsSystem\n- uid: System.Security.Principal.WindowsIdentity.Name*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Name\n  nameWithType: WindowsIdentity.Name\n- uid: System.Security.Principal.WindowsIdentity.Owner*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Owner\n  nameWithType: WindowsIdentity.Owner\n- uid: System.Security.Principal.WindowsIdentity.RunImpersonated*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: RunImpersonated\n  nameWithType: WindowsIdentity.RunImpersonated\n- uid: System.Security.Principal.WindowsIdentity.RunImpersonated<T>*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: RunImpersonated<T>\n  nameWithType: WindowsIdentity.RunImpersonated<T>\n- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData\n- uid: System.Security.Principal.WindowsIdentity.Token*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: Token\n  nameWithType: WindowsIdentity.Token\n- uid: System.Security.Principal.WindowsIdentity.User*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: User\n  nameWithType: WindowsIdentity.User\n- uid: System.Security.Principal.WindowsIdentity.UserClaims*\n  parent: System.Security.Principal.WindowsIdentity\n  isExternal: false\n  name: UserClaims\n  nameWithType: WindowsIdentity.UserClaims\n"}