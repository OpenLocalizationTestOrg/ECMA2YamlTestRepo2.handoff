{"nodes":[{"pos":[1072,1317],"content":"Triggers the compensation of a completed child <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that implements the <xref href=\"System.Workflow.ComponentModel.ICompensatableActivity\"></xref> interface. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Triggers the compensation of a completed child <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that implements the <bpt id=\"p2\">&lt;xref href=\"System.Workflow.ComponentModel.ICompensatableActivity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> interface.","pos":[0,213],"source":"Triggers the compensation of a completed child <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that implements the <xref href=\"System.Workflow.ComponentModel.ICompensatableActivity\"></xref> interface."},{"content":"This class cannot be inherited.","pos":[214,245]}]},{"pos":[1330,1821],"content":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       Any <xref:System.Workflow.ComponentModel.Activity> that implements <xref:System.Workflow.ComponentModel.ICompensatableActivity> is compensateable. A compensatable activity is a valid target of a CompensateActivity, as long as that activity is a child <xref:System.Workflow.ComponentModel.Activity> of the <xref:System.Workflow.ComponentModel.CompositeActivity> associated with the CompensateActivity.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       Any &lt;xref:System.Workflow.ComponentModel.Activity&gt; that implements &lt;xref:System.Workflow.ComponentModel.ICompensatableActivity&gt; is compensateable.","pos":[0,234],"source":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       Any <xref:System.Workflow.ComponentModel.Activity> that implements <xref:System.Workflow.ComponentModel.ICompensatableActivity> is compensateable."},{"content":"A compensatable activity is a valid target of a CompensateActivity, as long as that activity is a child &lt;xref:System.Workflow.ComponentModel.Activity&gt; of the &lt;xref:System.Workflow.ComponentModel.CompositeActivity&gt; associated with the CompensateActivity.","pos":[235,488],"source":" A compensatable activity is a valid target of a CompensateActivity, as long as that activity is a child <xref:System.Workflow.ComponentModel.Activity> of the <xref:System.Workflow.ComponentModel.CompositeActivity> associated with the CompensateActivity."}]},{"pos":[9490,9601],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.CompensateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.ComponentModel.CompensateActivity\"></xref> class."},{"pos":[10774,10916],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.CompensateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the name of the activity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.ComponentModel.CompensateActivity\"></xref> class using the name of the activity."},{"pos":[11057,11095],"content":"The user-defined name of the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user-defined name of the activity.","pos":[0,38]}]},{"pos":[12104,12116],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12215,12227],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13031,13043],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14543,14555],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14670,14682],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15384,15488],"content":"Gets or sets the name of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compensate.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to compensate."},{"pos":[16076,16190],"content":"A string that contains the name of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compensate.","needQuote":true,"needEscape":true,"source":"A string that contains the name of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to compensate."},{"pos":[16814,17003],"content":"Represents the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.ComponentModel.DependencyProperty\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that targets the &lt;xref:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*&gt; property.","needQuote":true,"needEscape":true,"source":"Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*> property."},{"pos":[17318,17330],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.ComponentModel.CompensateActivity\n  id: CompensateActivity\n  children:\n  - System.Workflow.ComponentModel.CompensateActivity.#ctor\n  - System.Workflow.ComponentModel.CompensateActivity.#ctor(System.String)\n  - System.Workflow.ComponentModel.CompensateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.ComponentModel.CompensateActivity.Initialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  - System.Workflow.ComponentModel.CompensateActivity.TargetActivityName\n  - System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty\n  langs:\n  - csharp\n  name: CompensateActivity\n  nameWithType: CompensateActivity\n  fullName: System.Workflow.ComponentModel.CompensateActivity\n  type: Class\n  summary: Triggers the compensation of a completed child <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> that implements the <xref href=\"System.Workflow.ComponentModel.ICompensatableActivity\"></xref> interface. This class cannot be inherited.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n Any <xref:System.Workflow.ComponentModel.Activity> that implements <xref:System.Workflow.ComponentModel.ICompensatableActivity> is compensateable. A compensatable activity is a valid target of a CompensateActivity, as long as that activity is a child <xref:System.Workflow.ComponentModel.Activity> of the <xref:System.Workflow.ComponentModel.CompositeActivity> associated with the CompensateActivity.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Designer(typeof(System.Workflow.ComponentModel.CompensateDesigner), typeof(System.ComponentModel.Design.IDesigner))]\n\n      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))]\n\n      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.ComponentModel.CompensateActivity), \"Resources.Compensate.png\")]\n\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.ComponentModel.CompensateValidator))]\n\n      public sealed class CompensateActivity : System.Workflow.ComponentModel.Activity, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>\n  inheritance:\n  - System.Object\n  - System.Workflow.ComponentModel.DependencyObject\n  - System.Workflow.ComponentModel.Activity\n  implements:\n  - System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>\n  inheritedMembers:\n  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  - System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.ComponentModel.Activity.Canceling\n  - System.Workflow.ComponentModel.Activity.CancelingEvent\n  - System.Workflow.ComponentModel.Activity.Clone\n  - System.Workflow.ComponentModel.Activity.Closed\n  - System.Workflow.ComponentModel.Activity.ClosedEvent\n  - System.Workflow.ComponentModel.Activity.Compensating\n  - System.Workflow.ComponentModel.Activity.CompensatingEvent\n  - System.Workflow.ComponentModel.Activity.Description\n  - System.Workflow.ComponentModel.Activity.Enabled\n  - System.Workflow.ComponentModel.Activity.Executing\n  - System.Workflow.ComponentModel.Activity.ExecutingEvent\n  - System.Workflow.ComponentModel.Activity.ExecutionResult\n  - System.Workflow.ComponentModel.Activity.ExecutionStatus\n  - System.Workflow.ComponentModel.Activity.Faulting\n  - System.Workflow.ComponentModel.Activity.FaultingEvent\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  - System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)\n  - System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.Name\n  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.Parent\n  - System.Workflow.ComponentModel.Activity.QualifiedName\n  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.StatusChanged\n  - System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  - System.Workflow.ComponentModel.Activity.ToString\n  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  - System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.DesignMode\n  - System.Workflow.ComponentModel.DependencyObject.Dispose\n  - System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)\n  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties\n  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.Site\n  - System.Workflow.ComponentModel.DependencyObject.UserData\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor\n  id: '#ctor'\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  langs:\n  - csharp\n  name: CompensateActivity()\n  nameWithType: CompensateActivity.CompensateActivity()\n  fullName: System.Workflow.ComponentModel.CompensateActivity.CompensateActivity()\n  type: Constructor\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.ComponentModel.CompensateActivity\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example demonstrates creating a <xref:System.Workflow.ComponentModel.CompensateActivity> object.  This example is from the Compensation SDK sample.  For more information, see [Compensation Sample](http://msdn.microsoft.com/en-us/c847a694-9978-46af-aa80-5bd1833f813b).  \\n  \\n [!code-cs[WF_Samples#144](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#144)]\\n [!code-vb[WF_Samples#144](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#144)]\"\n  syntax:\n    content: public CompensateActivity ();\n    parameters: []\n  overload: System.Workflow.ComponentModel.CompensateActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  langs:\n  - csharp\n  name: CompensateActivity(String)\n  nameWithType: CompensateActivity.CompensateActivity(String)\n  fullName: System.Workflow.ComponentModel.CompensateActivity.CompensateActivity(String)\n  type: Constructor\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.ComponentModel.CompensateActivity\"></xref> class using the name of the activity.\n  syntax:\n    content: public CompensateActivity (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The user-defined name of the activity.\n  overload: System.Workflow.ComponentModel.CompensateActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.CompensateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  langs:\n  - csharp\n  name: Execute(ActivityExecutionContext)\n  nameWithType: CompensateActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.ComponentModel.CompensateActivity.Execute(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: To be added.\n  overload: System.Workflow.ComponentModel.CompensateActivity.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.CompensateActivity.Initialize(System.IServiceProvider)\n  id: Initialize(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  langs:\n  - csharp\n  name: Initialize(IServiceProvider)\n  nameWithType: CompensateActivity.Initialize(IServiceProvider)\n  fullName: System.Workflow.ComponentModel.CompensateActivity.Initialize(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: protected override void Initialize (IServiceProvider provider);\n    parameters:\n    - id: provider\n      type: System.IServiceProvider\n      description: To be added.\n  overload: System.Workflow.ComponentModel.CompensateActivity.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  id: System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  isEii: true\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  langs:\n  - csharp\n  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  nameWithType: CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  fullName: System.Workflow.ComponentModel.CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  syntax:\n    content: void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent (object sender, System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: To be added.\n    - id: e\n      type: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n      description: To be added.\n  overload: System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName\n  id: TargetActivityName\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  langs:\n  - csharp\n  name: TargetActivityName\n  nameWithType: CompensateActivity.TargetActivityName\n  fullName: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Gets or sets the name of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to compensate.\n  remarks: ''\n  example:\n  - \"The following example demonstrates accessing the `TargetActivityName` property. This sample is from the Compensation SDK sample. For more information, see [Compensation Sample](http://msdn.microsoft.com/en-us/c847a694-9978-46af-aa80-5bd1833f813b).  \\n  \\n [!code-cs[WF_Samples#149](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#149)]\\n [!code-vb[WF_Samples#149](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#149)]\"\n  syntax:\n    content: public string TargetActivityName { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the name of the <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> to compensate.\n  overload: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty\n  id: TargetActivityNameProperty\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  langs:\n  - csharp\n  name: TargetActivityNameProperty\n  nameWithType: CompensateActivity.TargetActivityNameProperty\n  fullName: System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty\n  type: Field\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Represents the <xref href=\"System.Workflow.ComponentModel.DependencyProperty\"></xref> that targets the <xref:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*> property.\n  remarks: '[!INCLUDE[DependencyPropertyRemark](~/add/includes/dependencypropertyremark-md.md)]'\n  syntax:\n    content: public static readonly System.Workflow.ComponentModel.DependencyProperty TargetActivityNameProperty;\n    return:\n      type: System.Workflow.ComponentModel.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Workflow.ComponentModel.Activity\n  isExternal: false\n  name: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: CompensateActivity()\n  nameWithType: CompensateActivity.CompensateActivity()\n  fullName: System.Workflow.ComponentModel.CompensateActivity.CompensateActivity()\n- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor(System.String)\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: CompensateActivity(String)\n  nameWithType: CompensateActivity.CompensateActivity(String)\n  fullName: System.Workflow.ComponentModel.CompensateActivity.CompensateActivity(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.ComponentModel.CompensateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: Execute(ActivityExecutionContext)\n  nameWithType: CompensateActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.ComponentModel.CompensateActivity.Execute(ActivityExecutionContext)\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatus\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatus\n  nameWithType: ActivityExecutionStatus\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus\n- uid: System.Workflow.ComponentModel.ActivityExecutionContext\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionContext\n  nameWithType: ActivityExecutionContext\n  fullName: System.Workflow.ComponentModel.ActivityExecutionContext\n- uid: System.Workflow.ComponentModel.CompensateActivity.Initialize(System.IServiceProvider)\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: Initialize(IServiceProvider)\n  nameWithType: CompensateActivity.Initialize(IServiceProvider)\n  fullName: System.Workflow.ComponentModel.CompensateActivity.Initialize(IServiceProvider)\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: true\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  nameWithType: CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  fullName: System.Workflow.ComponentModel.CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatusChangedEventArgs\n  nameWithType: ActivityExecutionStatusChangedEventArgs\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: TargetActivityName\n  nameWithType: CompensateActivity.TargetActivityName\n  fullName: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName\n- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: TargetActivityNameProperty\n  nameWithType: CompensateActivity.TargetActivityNameProperty\n  fullName: System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty\n- uid: System.Workflow.ComponentModel.DependencyProperty\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Workflow.ComponentModel.DependencyProperty\n- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor*\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: CompensateActivity\n  nameWithType: CompensateActivity.CompensateActivity\n- uid: System.Workflow.ComponentModel.CompensateActivity.Execute*\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: Execute\n  nameWithType: CompensateActivity.Execute\n- uid: System.Workflow.ComponentModel.CompensateActivity.Initialize*\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: Initialize\n  nameWithType: CompensateActivity.Initialize\n- uid: System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent\n  nameWithType: CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent\n- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*\n  parent: System.Workflow.ComponentModel.CompensateActivity\n  isExternal: false\n  name: TargetActivityName\n  nameWithType: CompensateActivity.TargetActivityName\n"}