{"nodes":[{"pos":[712,908],"content":"An editing scope represents a collection of changes to the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Presentation.Model.ModelItem\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> tree that can be committed or rolled back as one atomic unit of work.","needQuote":true,"needEscape":true,"source":"An editing scope represents a collection of changes to the <xref href=\"System.Activities.Presentation.Model.ModelItem\"></xref> tree that can be committed or rolled back as one atomic unit of work."},{"pos":[920,1369],"content":"This is useful for batching together a set of changes to multiple <xref:System.Activities.Presentation.Model.ModelItem> objects. As an example, in the messaging activities, the changes made from the raised dialogs will impact multiple property values. However, as all of the changes come from the raised dialog, the changes need to be considered as a batch and undone as a single unit of work. For more details on usage, see the Editing Scope sample","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is useful for batching together a set of changes to multiple <xref:System.Activities.Presentation.Model.ModelItem> objects. As an example, in the messaging activities, the changes made from the raised dialogs will impact multiple property values. However, as all of the changes come from the raised dialog, the changes need to be considered as a batch and undone as a single unit of work. For more details on usage, see the Editing Scope sample","pos":[0,449],"nodes":[{"content":"This is useful for batching together a set of changes to multiple &lt;xref:System.Activities.Presentation.Model.ModelItem&gt; objects.","pos":[0,128],"source":"This is useful for batching together a set of changes to multiple <xref:System.Activities.Presentation.Model.ModelItem> objects."},{"content":"As an example, in the messaging activities, the changes made from the raised dialogs will impact multiple property values.","pos":[129,251]},{"content":"However, as all of the changes come from the raised dialog, the changes need to be considered as a batch and undone as a single unit of work.","pos":[252,393]},{"content":"For more details on usage, see the Editing Scope sample","pos":[394,449]}]}]},{"pos":[2418,2485],"content":"Determines whether the current editing scope instance can complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current editing scope instance can complete.","pos":[0,67]}]},{"pos":[2626,2796],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the editing scope can complete; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the editing scope can complete; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3321,3344],"content":"Gets a list of changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a list of changes.","pos":[0,23]}]},{"pos":[3589,3674],"content":"Returns a &lt;xref:System.Collections.Generic.List%601&gt; that contains the changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.List%601<ph id=\"ph2\">&amp;gt;</ph> that contains the changes.","pos":[0,85],"source":"Returns a &lt;xref:System.Collections.Generic.List%601&gt; that contains the changes."}]},{"pos":[4255,4341],"content":"Gets  a Boolean that specifies whether changes have been applied to the editing scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets  a Boolean that specifies whether changes have been applied to the editing scope.","pos":[0,86]}]},{"pos":[4464,4651],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if changes have been applied to the editing scope; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>..","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if changes have been applied to the editing scope; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.."},{"pos":[5203,5229],"content":"Raises the Complete event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raises the Complete event.","pos":[0,26]}]},{"pos":[5921,5953],"content":"Handles the specified exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handles the specified exception.","pos":[0,32]}]},{"pos":[6104,6128],"content":"The exception to handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception to handle.","pos":[0,24]}]},{"pos":[6187,6351],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the exception is handled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the exception is handled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6938,6962],"content":"Raises the Revert event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raises the Revert event.","pos":[0,24]}]},{"pos":[7121,7153],"content":"Not used in this implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not used in this implementation.","pos":[0,32]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Presentation.Model.EditingScope\n  id: EditingScope\n  children:\n  - System.Activities.Presentation.Model.EditingScope.CanComplete\n  - System.Activities.Presentation.Model.EditingScope.Changes\n  - System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges\n  - System.Activities.Presentation.Model.EditingScope.OnComplete\n  - System.Activities.Presentation.Model.EditingScope.OnException(System.Exception)\n  - System.Activities.Presentation.Model.EditingScope.OnRevert(System.Boolean)\n  langs:\n  - csharp\n  name: EditingScope\n  nameWithType: EditingScope\n  fullName: System.Activities.Presentation.Model.EditingScope\n  type: Class\n  summary: An editing scope represents a collection of changes to the <xref href=\"System.Activities.Presentation.Model.ModelItem\"></xref> tree that can be committed or rolled back as one atomic unit of work.\n  remarks: This is useful for batching together a set of changes to multiple <xref:System.Activities.Presentation.Model.ModelItem> objects. As an example, in the messaging activities, the changes made from the raised dialogs will impact multiple property values. However, as all of the changes come from the raised dialog, the changes need to be considered as a batch and undone as a single unit of work. For more details on usage, see the Editing Scope sample\n  syntax:\n    content: 'public class EditingScope : System.Activities.Presentation.Model.ModelEditingScope'\n  inheritance:\n  - System.Object\n  - System.Activities.Presentation.Model.ModelEditingScope\n  implements: []\n  inheritedMembers:\n  - System.Activities.Presentation.Model.ModelEditingScope.Complete\n  - System.Activities.Presentation.Model.ModelEditingScope.Description\n  - System.Activities.Presentation.Model.ModelEditingScope.Dispose\n  - System.Activities.Presentation.Model.ModelEditingScope.Dispose(System.Boolean)\n  - System.Activities.Presentation.Model.ModelEditingScope.Revert\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Model.EditingScope.CanComplete\n  id: CanComplete\n  parent: System.Activities.Presentation.Model.EditingScope\n  langs:\n  - csharp\n  name: CanComplete()\n  nameWithType: EditingScope.CanComplete()\n  fullName: System.Activities.Presentation.Model.EditingScope.CanComplete()\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Model\n  summary: Determines whether the current editing scope instance can complete.\n  syntax:\n    content: protected override bool CanComplete ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the editing scope can complete; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Presentation.Model.EditingScope.CanComplete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Model.EditingScope.Changes\n  id: Changes\n  parent: System.Activities.Presentation.Model.EditingScope\n  langs:\n  - csharp\n  name: Changes\n  nameWithType: EditingScope.Changes\n  fullName: System.Activities.Presentation.Model.EditingScope.Changes\n  type: Property\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Model\n  summary: Gets a list of changes.\n  syntax:\n    content: public System.Collections.Generic.List<System.Activities.Presentation.Model.Change> Changes { get; }\n    return:\n      type: System.Collections.Generic.List{System.Activities.Presentation.Model.Change}\n      description: Returns a &lt;xref:System.Collections.Generic.List%601&gt; that contains the changes.\n  overload: System.Activities.Presentation.Model.EditingScope.Changes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges\n  id: HasEffectiveChanges\n  parent: System.Activities.Presentation.Model.EditingScope\n  langs:\n  - csharp\n  name: HasEffectiveChanges\n  nameWithType: EditingScope.HasEffectiveChanges\n  fullName: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges\n  type: Property\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Model\n  summary: Gets  a Boolean that specifies whether changes have been applied to the editing scope.\n  syntax:\n    content: public bool HasEffectiveChanges { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if changes have been applied to the editing scope; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>..\n  overload: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Model.EditingScope.OnComplete\n  id: OnComplete\n  parent: System.Activities.Presentation.Model.EditingScope\n  langs:\n  - csharp\n  name: OnComplete()\n  nameWithType: EditingScope.OnComplete()\n  fullName: System.Activities.Presentation.Model.EditingScope.OnComplete()\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Model\n  summary: Raises the Complete event.\n  syntax:\n    content: protected override void OnComplete ();\n    parameters: []\n  overload: System.Activities.Presentation.Model.EditingScope.OnComplete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Model.EditingScope.OnException(System.Exception)\n  id: OnException(System.Exception)\n  parent: System.Activities.Presentation.Model.EditingScope\n  langs:\n  - csharp\n  name: OnException(Exception)\n  nameWithType: EditingScope.OnException(Exception)\n  fullName: System.Activities.Presentation.Model.EditingScope.OnException(Exception)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Model\n  summary: Handles the specified exception.\n  syntax:\n    content: protected override bool OnException (Exception e);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: The exception to handle.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the exception is handled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Presentation.Model.EditingScope.OnException*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Model.EditingScope.OnRevert(System.Boolean)\n  id: OnRevert(System.Boolean)\n  parent: System.Activities.Presentation.Model.EditingScope\n  langs:\n  - csharp\n  name: OnRevert(Boolean)\n  nameWithType: EditingScope.OnRevert(Boolean)\n  fullName: System.Activities.Presentation.Model.EditingScope.OnRevert(Boolean)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Model\n  summary: Raises the Revert event.\n  syntax:\n    content: protected override void OnRevert (bool finalizing);\n    parameters:\n    - id: finalizing\n      type: System.Boolean\n      description: Not used in this implementation.\n  overload: System.Activities.Presentation.Model.EditingScope.OnRevert*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.Presentation.Model.ModelEditingScope\n  isExternal: false\n  name: System.Activities.Presentation.Model.ModelEditingScope\n- uid: System.Activities.Presentation.Model.EditingScope.CanComplete\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: CanComplete()\n  nameWithType: EditingScope.CanComplete()\n  fullName: System.Activities.Presentation.Model.EditingScope.CanComplete()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Presentation.Model.EditingScope.Changes\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: Changes\n  nameWithType: EditingScope.Changes\n  fullName: System.Activities.Presentation.Model.EditingScope.Changes\n- uid: System.Collections.Generic.List{System.Activities.Presentation.Model.Change}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: List<Change>\n  nameWithType: List<Change>\n  fullName: System.Collections.Generic.List<System.Activities.Presentation.Model.Change>\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    nameWithType: List\n    fullName: List<System.Activities.Presentation.Model.Change>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Presentation.Model.Change\n    name: Change\n    nameWithType: Change\n    fullName: Change\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: HasEffectiveChanges\n  nameWithType: EditingScope.HasEffectiveChanges\n  fullName: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges\n- uid: System.Activities.Presentation.Model.EditingScope.OnComplete\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: OnComplete()\n  nameWithType: EditingScope.OnComplete()\n  fullName: System.Activities.Presentation.Model.EditingScope.OnComplete()\n- uid: System.Activities.Presentation.Model.EditingScope.OnException(System.Exception)\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: OnException(Exception)\n  nameWithType: EditingScope.OnException(Exception)\n  fullName: System.Activities.Presentation.Model.EditingScope.OnException(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Activities.Presentation.Model.EditingScope.OnRevert(System.Boolean)\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: OnRevert(Boolean)\n  nameWithType: EditingScope.OnRevert(Boolean)\n  fullName: System.Activities.Presentation.Model.EditingScope.OnRevert(Boolean)\n- uid: System.Activities.Presentation.Model.EditingScope.CanComplete*\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: CanComplete\n  nameWithType: EditingScope.CanComplete\n- uid: System.Activities.Presentation.Model.EditingScope.Changes*\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: Changes\n  nameWithType: EditingScope.Changes\n- uid: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges*\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: HasEffectiveChanges\n  nameWithType: EditingScope.HasEffectiveChanges\n- uid: System.Activities.Presentation.Model.EditingScope.OnComplete*\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: OnComplete\n  nameWithType: EditingScope.OnComplete\n- uid: System.Activities.Presentation.Model.EditingScope.OnException*\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: OnException\n  nameWithType: EditingScope.OnException\n- uid: System.Activities.Presentation.Model.EditingScope.OnRevert*\n  parent: System.Activities.Presentation.Model.EditingScope\n  isExternal: false\n  name: OnRevert\n  nameWithType: EditingScope.OnRevert\n"}