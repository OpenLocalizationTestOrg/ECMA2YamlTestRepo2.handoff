{"nodes":[{"pos":[612,762],"content":"Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.","pos":[0,150]}]},{"pos":[774,898],"content":"This class provides the default LicenseContext. It implements only run-time support and does not support saved license keys.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class provides the default LicenseContext. It implements only run-time support and does not support saved license keys.","pos":[0,124],"nodes":[{"content":"This class provides the default LicenseContext.","pos":[0,47]},{"content":"It implements only run-time support and does not support saved license keys.","pos":[48,124]}]}]},{"pos":[1453,1551],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseContext\"></xref> class."},{"pos":[2227,2352],"content":"When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.","pos":[0,125]}]},{"pos":[2549,2608],"content":"A <xref:System.Type> that represents the type of component.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the type of component.","pos":[0,59],"source":"A <xref:System.Type> that represents the type of component."}]},{"pos":[2694,2752],"content":"An <xref:System.Reflection.Assembly> with the license key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Reflection.Assembly&gt; with the license key.","pos":[0,58],"source":"An <xref:System.Reflection.Assembly> with the license key."}]},{"pos":[2810,2991],"content":"The <xref:System.ComponentModel.License.LicenseKey*> for the specified type. This method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> unless you override it.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ComponentModel.License.LicenseKey*&gt; for the specified type.","pos":[0,76],"source":"The <xref:System.ComponentModel.License.LicenseKey*> for the specified type."},{"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> unless you override it.","pos":[77,181],"source":" This method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> unless you override it."}]},{"pos":[3491,3538],"content":"Gets the requested service, if it is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the requested service, if it is available.","pos":[0,47]}]},{"pos":[3682,3714],"content":"The type of service to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of service to retrieve.","pos":[0,32]}]},{"pos":[3772,3895],"content":"An instance of the service, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the service cannot be found.","needQuote":true,"needEscape":true,"source":"An instance of the service, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the service cannot be found."},{"pos":[4476,4554],"content":"When overridden in a derived class, sets a license key for the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, sets a license key for the specified type.","pos":[0,78]}]},{"pos":[4566,4798],"content":"Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time. You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time. You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support.","pos":[0,232],"nodes":[{"content":"Typically, call this method when you set &lt;xref:System.ComponentModel.LicenseUsageMode&gt; at design time.","pos":[0,102],"source":"Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time."},{"content":"You must override the &lt;xref:System.ComponentModel.LicenseContext.UsageMode%2A&gt; property to implement design-time license support.","pos":[103,232],"source":" You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support."}]}]},{"pos":[4960,5043],"content":"A <xref:System.Type> that represents the component associated with the license key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the component associated with the license key.","pos":[0,83],"source":"A <xref:System.Type> that represents the component associated with the license key."}]},{"pos":[5103,5190],"content":"The <xref:System.ComponentModel.License.LicenseKey*> to save for the type of component.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ComponentModel.License.LicenseKey*&gt; to save for the type of component.","pos":[0,87],"source":"The <xref:System.ComponentModel.License.LicenseKey*> to save for the type of component."}]},{"pos":[5643,5734],"content":"When overridden in a derived class, gets a value that specifies when you can use a license.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a value that specifies when you can use a license.","pos":[0,91]}]},{"pos":[5913,6109],"content":"One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values that specifies when you can use a license. The default is <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseUsageMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specifies when you can use a license.","pos":[0,120],"source":"One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values that specifies when you can use a license."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.LicenseUsageMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[121,196],"source":" The default is <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.LicenseContext\n  id: LicenseContext\n  children:\n  - System.ComponentModel.LicenseContext.#ctor\n  - System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  - System.ComponentModel.LicenseContext.GetService(System.Type)\n  - System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)\n  - System.ComponentModel.LicenseContext.UsageMode\n  langs:\n  - csharp\n  name: LicenseContext\n  nameWithType: LicenseContext\n  fullName: System.ComponentModel.LicenseContext\n  type: Class\n  summary: Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.\n  remarks: This class provides the default LicenseContext. It implements only run-time support and does not support saved license keys.\n  syntax:\n    content: 'public class LicenseContext : IServiceProvider'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IServiceProvider\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseContext.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: LicenseContext()\n  nameWithType: LicenseContext.LicenseContext()\n  fullName: System.ComponentModel.LicenseContext.LicenseContext()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseContext\"></xref> class.\n  syntax:\n    content: public LicenseContext ();\n    parameters: []\n  overload: System.ComponentModel.LicenseContext.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  id: GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: GetSavedLicenseKey(Type,Assembly)\n  nameWithType: LicenseContext.GetSavedLicenseKey(Type,Assembly)\n  fullName: System.ComponentModel.LicenseContext.GetSavedLicenseKey(Type,Assembly)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.\n  syntax:\n    content: public virtual string GetSavedLicenseKey (Type type, System.Reflection.Assembly resourceAssembly);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the type of component.\n    - id: resourceAssembly\n      type: System.Reflection.Assembly\n      description: An <xref:System.Reflection.Assembly> with the license key.\n    return:\n      type: System.String\n      description: The <xref:System.ComponentModel.License.LicenseKey*> for the specified type. This method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> unless you override it.\n  overload: System.ComponentModel.LicenseContext.GetSavedLicenseKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseContext.GetService(System.Type)\n  id: GetService(System.Type)\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: GetService(Type)\n  nameWithType: LicenseContext.GetService(Type)\n  fullName: System.ComponentModel.LicenseContext.GetService(Type)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the requested service, if it is available.\n  syntax:\n    content: public virtual object GetService (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of service to retrieve.\n    return:\n      type: System.Object\n      description: An instance of the service, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the service cannot be found.\n  overload: System.ComponentModel.LicenseContext.GetService*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)\n  id: SetSavedLicenseKey(System.Type,System.String)\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: SetSavedLicenseKey(Type,String)\n  nameWithType: LicenseContext.SetSavedLicenseKey(Type,String)\n  fullName: System.ComponentModel.LicenseContext.SetSavedLicenseKey(Type,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: When overridden in a derived class, sets a license key for the specified type.\n  remarks: Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time. You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support.\n  syntax:\n    content: public virtual void SetSavedLicenseKey (Type type, string key);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the component associated with the license key.\n    - id: key\n      type: System.String\n      description: The <xref:System.ComponentModel.License.LicenseKey*> to save for the type of component.\n  overload: System.ComponentModel.LicenseContext.SetSavedLicenseKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.LicenseContext.UsageMode\n  id: UsageMode\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: UsageMode\n  nameWithType: LicenseContext.UsageMode\n  fullName: System.ComponentModel.LicenseContext.UsageMode\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: When overridden in a derived class, gets a value that specifies when you can use a license.\n  syntax:\n    content: public virtual System.ComponentModel.LicenseUsageMode UsageMode { get; }\n    return:\n      type: System.ComponentModel.LicenseUsageMode\n      description: One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values that specifies when you can use a license. The default is <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref>.\n  overload: System.ComponentModel.LicenseContext.UsageMode*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.LicenseContext.#ctor\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: LicenseContext()\n  nameWithType: LicenseContext.LicenseContext()\n  fullName: System.ComponentModel.LicenseContext.LicenseContext()\n- uid: System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: GetSavedLicenseKey(Type,Assembly)\n  nameWithType: LicenseContext.GetSavedLicenseKey(Type,Assembly)\n  fullName: System.ComponentModel.LicenseContext.GetSavedLicenseKey(Type,Assembly)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: true\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.ComponentModel.LicenseContext.GetService(System.Type)\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: LicenseContext.GetService(Type)\n  fullName: System.ComponentModel.LicenseContext.GetService(Type)\n- uid: System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: SetSavedLicenseKey(Type,String)\n  nameWithType: LicenseContext.SetSavedLicenseKey(Type,String)\n  fullName: System.ComponentModel.LicenseContext.SetSavedLicenseKey(Type,String)\n- uid: System.ComponentModel.LicenseContext.UsageMode\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: UsageMode\n  nameWithType: LicenseContext.UsageMode\n  fullName: System.ComponentModel.LicenseContext.UsageMode\n- uid: System.ComponentModel.LicenseUsageMode\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseUsageMode\n  nameWithType: LicenseUsageMode\n  fullName: System.ComponentModel.LicenseUsageMode\n- uid: System.ComponentModel.LicenseContext.#ctor*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: LicenseContext\n  nameWithType: LicenseContext.LicenseContext\n- uid: System.ComponentModel.LicenseContext.GetSavedLicenseKey*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: GetSavedLicenseKey\n  nameWithType: LicenseContext.GetSavedLicenseKey\n- uid: System.ComponentModel.LicenseContext.GetService*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: GetService\n  nameWithType: LicenseContext.GetService\n- uid: System.ComponentModel.LicenseContext.SetSavedLicenseKey*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: SetSavedLicenseKey\n  nameWithType: LicenseContext.SetSavedLicenseKey\n- uid: System.ComponentModel.LicenseContext.UsageMode*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: UsageMode\n  nameWithType: LicenseContext.UsageMode\n"}