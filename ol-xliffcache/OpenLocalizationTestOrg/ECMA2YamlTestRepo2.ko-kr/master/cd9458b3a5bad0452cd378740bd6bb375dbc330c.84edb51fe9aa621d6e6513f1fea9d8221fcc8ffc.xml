{"nodes":[{"pos":[559,592],"content":"Specifies a reliability contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a reliability contract.","pos":[0,33]}]},{"pos":[604,799],"content":"The Consistency enumeration is used as a parameter to the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to specify the reliability guarantee on a given method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Consistency enumeration is used as a parameter to the &lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt; attribute to specify the reliability guarantee on a given method.","pos":[0,195],"source":"The Consistency enumeration is used as a parameter to the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to specify the reliability guarantee on a given method."}]},{"pos":[1885,2040],"content":"In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.","pos":[0,155]}]},{"pos":[2175,2187],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2659,2773],"content":"In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.","pos":[0,114]}]},{"pos":[2907,2919],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3386,3531],"content":"In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.","pos":[0,145]}]},{"pos":[3664,3676],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4153,4238],"content":"In the face of exceptional conditions, the method is guaranteed not to corrupt state.","needQuote":true,"needEscape":true,"nodes":[{"content":"In the face of exceptional conditions, the method is guaranteed not to corrupt state.","pos":[0,85]}]},{"pos":[4539,4551],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.ConstrainedExecution.Consistency\n  id: Consistency\n  children:\n  - System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n  - System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n  - System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n  - System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n  langs:\n  - csharp\n  name: Consistency\n  nameWithType: Consistency\n  fullName: System.Runtime.ConstrainedExecution.Consistency\n  type: Enum\n  summary: Specifies a reliability contract.\n  remarks: The Consistency enumeration is used as a parameter to the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to specify the reliability guarantee on a given method.\n  example:\n  - \"The following code example demonstrates the use of the Consistency enumeration when specifying a constrained execution region for a method. This code example  is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.  \\n  \\n [!code-vb[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/visualbasic/t-system.runtime.constra_3_1.vb)]\\n [!code-cs[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/csharp/t-system.runtime.constra_3_1.cs)]\"\n  syntax:\n    content: public enum Consistency\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n  id: MayCorruptAppDomain\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  langs:\n  - csharp\n  name: MayCorruptAppDomain\n  nameWithType: Consistency.MayCorruptAppDomain\n  fullName: System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.ConstrainedExecution\n  summary: In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.\n  syntax:\n    content: MayCorruptAppDomain\n    return:\n      type: System.Runtime.ConstrainedExecution.Consistency\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n  id: MayCorruptInstance\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  langs:\n  - csharp\n  name: MayCorruptInstance\n  nameWithType: Consistency.MayCorruptInstance\n  fullName: System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.ConstrainedExecution\n  summary: In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.\n  syntax:\n    content: MayCorruptInstance\n    return:\n      type: System.Runtime.ConstrainedExecution.Consistency\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n  id: MayCorruptProcess\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  langs:\n  - csharp\n  name: MayCorruptProcess\n  nameWithType: Consistency.MayCorruptProcess\n  fullName: System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.ConstrainedExecution\n  summary: In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.\n  syntax:\n    content: MayCorruptProcess\n    return:\n      type: System.Runtime.ConstrainedExecution.Consistency\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n  id: WillNotCorruptState\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  langs:\n  - csharp\n  name: WillNotCorruptState\n  nameWithType: Consistency.WillNotCorruptState\n  fullName: System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.ConstrainedExecution\n  summary: In the face of exceptional conditions, the method is guaranteed not to corrupt state.\n  remarks: >-\n    > [!NOTE]\n\n    >  This does not guarantee that the method will never fail; however, it does guarantee that such a failure will never corrupt state.\n  syntax:\n    content: WillNotCorruptState\n    return:\n      type: System.Runtime.ConstrainedExecution.Consistency\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  isExternal: false\n  name: MayCorruptAppDomain\n  nameWithType: Consistency.MayCorruptAppDomain\n  fullName: System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain\n- uid: System.Runtime.ConstrainedExecution.Consistency\n  parent: System.Runtime.ConstrainedExecution\n  isExternal: false\n  name: Consistency\n  nameWithType: Consistency\n  fullName: System.Runtime.ConstrainedExecution.Consistency\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  isExternal: false\n  name: MayCorruptInstance\n  nameWithType: Consistency.MayCorruptInstance\n  fullName: System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance\n- uid: System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  isExternal: false\n  name: MayCorruptProcess\n  nameWithType: Consistency.MayCorruptProcess\n  fullName: System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess\n- uid: System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n  parent: System.Runtime.ConstrainedExecution.Consistency\n  isExternal: false\n  name: WillNotCorruptState\n  nameWithType: Consistency.WillNotCorruptState\n  fullName: System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState\n"}