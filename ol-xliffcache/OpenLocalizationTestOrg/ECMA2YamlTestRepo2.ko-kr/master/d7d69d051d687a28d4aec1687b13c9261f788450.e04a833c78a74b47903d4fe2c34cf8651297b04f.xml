{"nodes":[{"pos":[3597,3654],"content":"Used to perform late-bound operations on open properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Used to perform late-bound operations on open properties.","pos":[0,57]}]},{"pos":[3666,3793],"content":"This class is used when you implement a custom data service provider for <ph id=\"ph1\">[!INCLUDE[ssAstoria](~/add/includes/ssastoria-md.md)]</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This class is used when you implement a custom data service provider for [!INCLUDE[ssAstoria](~/add/includes/ssastoria-md.md)]."},{"pos":[4417,4433],"content":"Adds two values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds two values.","pos":[0,16]}]},{"pos":[4445,4502],"content":"The Add method adds two values without overflow checking.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Add method adds two values without overflow checking.","pos":[0,57]}]},{"pos":[4656,4675],"content":"First value to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"First value to add.","pos":[0,19]}]},{"pos":[4737,4757],"content":"Second value to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"Second value to add.","pos":[0,20]}]},{"pos":[4815,4854],"content":"The result of the arithmetic operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result of the arithmetic operation.","pos":[0,39]}]},{"pos":[5447,5559],"content":"Performs a logical <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_and\" name=\"and\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operation between two expressions.","needQuote":true,"needEscape":true,"source":"Performs a logical <xref uid=\"langword_csharp_and\" name=\"and\" href=\"\"></xref> operation between two expressions."},{"pos":[5717,5728],"content":"Left value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Left value.","pos":[0,11]}]},{"pos":[5790,5802],"content":"Right value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Right value.","pos":[0,12]}]},{"pos":[5860,5955],"content":"The result of the logical <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_and\" name=\"and\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operation.","needQuote":true,"needEscape":true,"source":"The result of the logical <xref uid=\"langword_csharp_and\" name=\"and\" href=\"\"></xref> operation."},{"pos":[6503,6542],"content":"Returns the ceiling of the given value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the ceiling of the given value.","pos":[0,39]}]},{"pos":[6688,6743],"content":"A <xref:System.Decimal> or <xref:System.Double> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Decimal&gt; or &lt;xref:System.Double&gt; object.","pos":[0,55],"source":"A <xref:System.Decimal> or <xref:System.Double> object."}]},{"pos":[6801,6839],"content":"The ceiling value for the given value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ceiling value for the given value.","pos":[0,38]}]},{"pos":[7431,7462],"content":"Concatenates two string values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Concatenates two string values.","pos":[0,31]}]},{"pos":[7622,7639],"content":"The first string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first string.","pos":[0,17]}]},{"pos":[7702,7720],"content":"The second string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second string.","pos":[0,18]}]},{"pos":[7778,7825],"content":"A new instance that is the concatenated string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new instance that is the concatenated string.","pos":[0,47]}]},{"pos":[8499,8538],"content":"Converts a value to the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts a value to the specified type.","pos":[0,39]}]},{"pos":[8550,8625],"content":"The Convert method is used to perform a type cast on the specified <ph id=\"ph1\">`value`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The Convert method is used to perform a type cast on the specified `value`."},{"pos":[8821,8838],"content":"Value to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value to convert.","pos":[0,17]}]},{"pos":[8929,8962],"content":"Resource type for the conversion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resource type for the conversion.","pos":[0,33]}]},{"pos":[9020,9040],"content":"The converted value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The converted value.","pos":[0,20]}]},{"pos":[9568,9635],"content":"Returns the day value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,67],"source":"Returns the day value of the given <xref:System.DateTime> instance."}]},{"pos":[9783,9815],"content":"A <xref:System.DateTime> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object.","pos":[0,32],"source":"A <xref:System.DateTime> object."}]},{"pos":[9873,9932],"content":"The day value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The day value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,59],"source":"The day value of the given <xref:System.DateTime> instance."}]},{"pos":[10520,10539],"content":"Divides two values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides two values.","pos":[0,19]}]},{"pos":[10696,10723],"content":"The first value (dividend).","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value (dividend).","pos":[0,27]}]},{"pos":[10785,10812],"content":"The second value (divisor).","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value (divisor).","pos":[0,27]}]},{"pos":[10870,10888],"content":"The divided value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The divided value.","pos":[0,18]}]},{"pos":[11489,11553],"content":"Determines whether the end of one string matches another string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the end of one string matches another string.","pos":[0,64]}]},{"pos":[11565,11620],"content":"An error is raised when the parameters are not strings.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An error is raised when the parameters are not strings.","pos":[0,55]}]},{"pos":[11799,11825],"content":"The string being compared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string being compared.","pos":[0,26]}]},{"pos":[11891,11916],"content":"The string to compare to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to compare to.","pos":[0,25]}]},{"pos":[11974,12189],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">targetString</ph><ept id=\"p2\">&lt;/code&gt;</ept> ends with <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">substring</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise returns <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when <code>targetString</code> ends with <code>substring</code>; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12777,12839],"content":"Determines whether the specified objects are considered equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified objects are considered equal.","pos":[0,62]}]},{"pos":[12995,13023],"content":"The first object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first object to compare.","pos":[0,28]}]},{"pos":[13085,13114],"content":"The second object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second object to compare.","pos":[0,29]}]},{"pos":[13172,13368],"content":"A &lt;xref:System.Boolean&gt; value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when both objects are equal; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Boolean> value of <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when both objects are equal; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13904,13941],"content":"Returns the floor of the given value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the floor of the given value.","pos":[0,37]}]},{"pos":[14085,14154],"content":"The <xref:System.Decimal> or <xref:System.Double> object to evaluate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Decimal&gt; or &lt;xref:System.Double&gt; object to evaluate.","pos":[0,69],"source":"The <xref:System.Decimal> or <xref:System.Double> object to evaluate."}]},{"pos":[14212,14257],"content":"Returns the floor value for the given object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the floor value for the given object.","pos":[0,45]}]},{"pos":[14857,14920],"content":"Gets a value from the specified property of a specified object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value from the specified property of a specified object.","pos":[0,63]}]},{"pos":[15088,15132],"content":"Object from which to get the property value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Object from which to get the property value.","pos":[0,44]}]},{"pos":[15201,15246],"content":"Name of property from which to get the value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of property from which to get the value.","pos":[0,45]}]},{"pos":[15304,15420],"content":"The requested value; <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the value cannot be determined.","needQuote":true,"needEscape":true,"source":"The requested value; <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the value cannot be determined."},{"pos":[16038,16112],"content":"Determines whether the value of one object is greater than another object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the value of one object is greater than another object.","pos":[0,74]}]},{"pos":[16274,16290],"content":"The first value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value.","pos":[0,16]}]},{"pos":[16352,16369],"content":"The second value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value.","pos":[0,17]}]},{"pos":[16427,16655],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the value of the first object is greater than that of the second object; otherwise returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value of the first object is greater than that of the second object; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17311,17397],"content":"Determines whether the value of one object is greater than or equal to another object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the value of one object is greater than or equal to another object.","pos":[0,86]}]},{"pos":[17566,17582],"content":"The first value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value.","pos":[0,16]}]},{"pos":[17644,17661],"content":"The second value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value.","pos":[0,17]}]},{"pos":[17719,17959],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the value of the first object is greater than or equal to that of the second object; otherwise returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value of the first object is greater than or equal to that of the second object; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18503,18571],"content":"Returns the hour value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hour value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,68],"source":"Returns the hour value of the given <xref:System.DateTime> instance."}]},{"pos":[18720,18752],"content":"A <xref:System.DateTime> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object.","pos":[0,32],"source":"A <xref:System.DateTime> object."}]},{"pos":[18810,18870],"content":"The hour value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hour value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,60],"source":"The hour value of the given <xref:System.DateTime> instance."}]},{"pos":[19464,19518],"content":"Returns the index of a substring in the target string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the index of a substring in the target string.","pos":[0,54]}]},{"pos":[19530,19621],"content":"The IndexOf method returns a null value when <ph id=\"ph1\">`substring`</ph> cannot be found in <ph id=\"ph2\">`targetString`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The IndexOf method returns a null value when `substring` cannot be found in `targetString`."},{"pos":[19799,19817],"content":"The target string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target string.","pos":[0,18]}]},{"pos":[19883,19905],"content":"The substring to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The substring to find.","pos":[0,22]}]},{"pos":[19963,20056],"content":"Returns the index of the location of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">substring</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">targetString</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the index of the location of <code>substring</code> in the <code>targetString</code>."},{"pos":[20599,20659],"content":"Gets the number of characters in the supplied string object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of characters in the supplied string object.","pos":[0,60]}]},{"pos":[20671,20752],"content":"An error is raised when the supplied <ph id=\"ph1\">`value`</ph> is not of type &lt;xref:System.String&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"An error is raised when the supplied `value` is not of type <xref:System.String>."},{"pos":[20897,20922],"content":"The string to be checked.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to be checked.","pos":[0,25]}]},{"pos":[20980,21011],"content":"The length of the string value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of the string value.","pos":[0,31]}]},{"pos":[21612,21683],"content":"Determines whether the value of one object is less than another object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the value of one object is less than another object.","pos":[0,71]}]},{"pos":[21842,21858],"content":"The first value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value.","pos":[0,16]}]},{"pos":[21920,21937],"content":"The second value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value.","pos":[0,17]}]},{"pos":[21995,22220],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the value of the first object is less than that of the second object; otherwise returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value of the first object is less than that of the second object; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22858,22941],"content":"Determines whether the value of one object is less than or equal to another object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the value of one object is less than or equal to another object.","pos":[0,83]}]},{"pos":[23107,23123],"content":"The first value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value.","pos":[0,16]}]},{"pos":[23185,23202],"content":"The second value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value.","pos":[0,17]}]},{"pos":[23260,23497],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the value of the first object is less than or equal to that of the second object; otherwise returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value of the first object is less than or equal to that of the second object; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24048,24118],"content":"Returns the minute value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the minute value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,70],"source":"Returns the minute value of the given <xref:System.DateTime> instance."}]},{"pos":[24269,24301],"content":"A <xref:System.DateTime> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object.","pos":[0,32],"source":"A <xref:System.DateTime> object."}]},{"pos":[24359,24421],"content":"The minute value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minute value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,62],"source":"The minute value of the given <xref:System.DateTime> instance."}]},{"pos":[25012,25088],"content":"Calculates the arithmetic remainder of dividing one value by a second value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the arithmetic remainder of dividing one value by a second value.","pos":[0,76]}]},{"pos":[25245,25272],"content":"The first value (dividend).","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value (dividend).","pos":[0,27]}]},{"pos":[25334,25361],"content":"The second value (divisor).","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value (divisor).","pos":[0,27]}]},{"pos":[25419,25439],"content":"The remainder value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The remainder value.","pos":[0,20]}]},{"pos":[25976,26045],"content":"Returns the month value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the month value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,69],"source":"Returns the month value of the given <xref:System.DateTime> instance."}]},{"pos":[26195,26227],"content":"A <xref:System.DateTime> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object.","pos":[0,32],"source":"A <xref:System.DateTime> object."}]},{"pos":[26285,26346],"content":"The month value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The month value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,61],"source":"The month value of the given <xref:System.DateTime> instance."}]},{"pos":[26946,26968],"content":"Multiplies two values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies two values.","pos":[0,22]}]},{"pos":[26980,27048],"content":"The Multiply method multiplies two values without overflow checking.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Multiply method multiplies two values without overflow checking.","pos":[0,68]}]},{"pos":[27207,27223],"content":"The first value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value.","pos":[0,16]}]},{"pos":[27285,27302],"content":"The second value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value.","pos":[0,17]}]},{"pos":[27360,27390],"content":"The product of the two values.","needQuote":true,"needEscape":true,"nodes":[{"content":"The product of the two values.","pos":[0,30]}]},{"pos":[27934,28004],"content":"Returns the result of multiplying the specified value by negative one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the result of multiplying the specified value by negative one.","pos":[0,70]}]},{"pos":[28149,28169],"content":"The value to negate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to negate.","pos":[0,20]}]},{"pos":[28227,28288],"content":"The product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> multiplied by negative one.","needQuote":true,"needEscape":true,"source":"The product of <code>value</code> multiplied by negative one."},{"pos":[28815,28887],"content":"Performs a bitwise (logical) complement operation on the supplied value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a bitwise (logical) complement operation on the supplied value.","pos":[0,72]}]},{"pos":[29029,29059],"content":"Value to logically complement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value to logically complement.","pos":[0,30]}]},{"pos":[29117,29160],"content":"A bitwise complement of the supplied value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise complement of the supplied value.","pos":[0,43]}]},{"pos":[29758,29841],"content":"Performs a logical comparison of the two values to determine if they are not equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a logical comparison of the two values to determine if they are not equal.","pos":[0,83]}]},{"pos":[30000,30016],"content":"The first value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value.","pos":[0,16]}]},{"pos":[30078,30095],"content":"The second value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value.","pos":[0,17]}]},{"pos":[30153,30361],"content":"A &lt;xref:System.Boolean&gt; value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when both objects are not equal; otherwise returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Boolean> value of <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when both objects are not equal; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[30954,31054],"content":"Performs a logical <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_OR\" name=\"OR\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operation on two values.","needQuote":true,"needEscape":true,"source":"Performs a logical <xref uid=\"langword_csharp_OR\" name=\"OR\" href=\"\"></xref> operation on two values."},{"pos":[31211,31227],"content":"The first value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first value.","pos":[0,16]}]},{"pos":[31289,31306],"content":"The second value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value.","pos":[0,17]}]},{"pos":[31364,31457],"content":"The result of the logical <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_OR\" name=\"OR\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> operation.","needQuote":true,"needEscape":true,"source":"The result of the logical <xref uid=\"langword_csharp_OR\" name=\"OR\" href=\"\"></xref> operation."},{"pos":[32102,32168],"content":"Replaces one substring with a second substring in a target string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Replaces one substring with a second substring in a target string.","pos":[0,66]}]},{"pos":[32364,32405],"content":"The string with the substring to replace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string with the substring to replace.","pos":[0,41]}]},{"pos":[32471,32500],"content":"The substring to be replaced.","needQuote":true,"needEscape":true,"nodes":[{"content":"The substring to be replaced.","pos":[0,29]}]},{"pos":[32566,32584],"content":"The new substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new substring.","pos":[0,18]}]},{"pos":[32642,32706],"content":"A new string with the substring replaced with the new substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new string with the substring replaced with the new substring.","pos":[0,64]}]},{"pos":[33244,33270],"content":"Rounds the supplied value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rounds the supplied value.","pos":[0,26]}]},{"pos":[33414,33471],"content":"A <xref:System.Decimal> or <xref:System.Double> to round.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Decimal&gt; or &lt;xref:System.Double&gt; to round.","pos":[0,57],"source":"A <xref:System.Decimal> or <xref:System.Double> to round."}]},{"pos":[33529,33547],"content":"The rounded value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rounded value.","pos":[0,18]}]},{"pos":[34088,34158],"content":"Returns the second value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the second value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,70],"source":"Returns the second value of the given <xref:System.DateTime> instance."}]},{"pos":[34309,34341],"content":"A <xref:System.DateTime> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object.","pos":[0,32],"source":"A <xref:System.DateTime> object."}]},{"pos":[34399,34461],"content":"The second value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,62],"source":"The second value of the given <xref:System.DateTime> instance."}]},{"pos":[35072,35131],"content":"Checks whether the target string starts with the substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks whether the target string starts with the substring.","pos":[0,59]}]},{"pos":[35312,35338],"content":"The string being compared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string being compared.","pos":[0,26]}]},{"pos":[35404,35459],"content":"The substring that the <ph id=\"ph1\">`targetString`</ph> might start with.","needQuote":true,"needEscape":true,"source":"The substring that the `targetString` might start with."},{"pos":[35517,35721],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the target string starts with the given substring, otherwise returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the target string starts with the given substring, otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[36331,36397],"content":"Returns the substring after the specified starting index location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the substring after the specified starting index location.","pos":[0,66]}]},{"pos":[36409,36509],"content":"The Substring method returns all characters from <ph id=\"ph1\">`startIndex`</ph> through the end of the <ph id=\"ph2\">`targetString`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The Substring method returns all characters from `startIndex` through the end of the `targetString`."},{"pos":[36690,36736],"content":"The string from which to return the substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string from which to return the substring.","pos":[0,46]}]},{"pos":[36803,36840],"content":"The starting index for the substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting index for the substring.","pos":[0,37]}]},{"pos":[36898,36912],"content":"The substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"The substring.","pos":[0,14]}]},{"pos":[37570,37657],"content":"Returns the substring of a specific length after the specified starting index location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the substring of a specific length after the specified starting index location.","pos":[0,87]}]},{"pos":[37669,37845],"content":"The &lt;xref:System.Data.Services.Providers.OpenTypeMethods.Substring%2A&gt; method returns the <ph id=\"ph1\">`length`</ph> number of characters from <ph id=\"ph2\">`startIndex`</ph> through the end of the <ph id=\"ph3\">`targetString`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The <xref:System.Data.Services.Providers.OpenTypeMethods.Substring%2A> method returns the `length` number of characters from `startIndex` through the end of the `targetString`."},{"pos":[38041,38087],"content":"The string from which to return the substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string from which to return the substring.","pos":[0,46]}]},{"pos":[38154,38191],"content":"The starting index for the substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting index for the substring.","pos":[0,37]}]},{"pos":[38254,38282],"content":"The length of the substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of the substring.","pos":[0,28]}]},{"pos":[38340,38354],"content":"The substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"The substring.","pos":[0,14]}]},{"pos":[38973,39029],"content":"Determines whether a substring occurs in another string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a substring occurs in another string.","pos":[0,56]}]},{"pos":[39208,39232],"content":"The substring to locate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The substring to locate.","pos":[0,24]}]},{"pos":[39301,39322],"content":"The string to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to search.","pos":[0,21]}]},{"pos":[39380,39579],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">substring</ph><ept id=\"p2\">&lt;/code&gt;</ept> occurs in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">targetString</ph><ept id=\"p3\">&lt;/code&gt;</ept>, otherwise <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when <code>substring</code> occurs in <code>targetString</code>, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[40185,40206],"content":"Subtracts two values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts two values.","pos":[0,21]}]},{"pos":[40365,40396],"content":"First value in the subtraction.","needQuote":true,"needEscape":true,"nodes":[{"content":"First value in the subtraction.","pos":[0,31]}]},{"pos":[40458,40490],"content":"Second value in the subtraction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Second value in the subtraction.","pos":[0,32]}]},{"pos":[40548,40587],"content":"The result of the arithmetic operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result of the arithmetic operation.","pos":[0,39]}]},{"pos":[41136,41186],"content":"Returns a copy of a string converted to lowercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a copy of a string converted to lowercase.","pos":[0,50]}]},{"pos":[41346,41368],"content":"The string to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to convert.","pos":[0,22]}]},{"pos":[41426,41465],"content":"A new string value with only lowercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new string value with only lowercase.","pos":[0,39]}]},{"pos":[42013,42063],"content":"Returns a copy of a string converted to uppercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a copy of a string converted to uppercase.","pos":[0,50]}]},{"pos":[42223,42245],"content":"The string to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to convert.","pos":[0,22]}]},{"pos":[42303,42353],"content":"A new string value with only uppercase characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new string value with only uppercase characters.","pos":[0,50]}]},{"pos":[42886,42956],"content":"Removes all leading and trailing white-space characters from a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all leading and trailing white-space characters from a string.","pos":[0,70]}]},{"pos":[43113,43132],"content":"The string to trim.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to trim.","pos":[0,19]}]},{"pos":[43190,43209],"content":"The trimmed string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The trimmed string.","pos":[0,19]}]},{"pos":[43876,43913],"content":"Checks the type of a specified value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks the type of a specified value.","pos":[0,37]}]},{"pos":[44108,44127],"content":"The value to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to check.","pos":[0,19]}]},{"pos":[44218,44251],"content":"Resource type for which to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resource type for which to check.","pos":[0,33]}]},{"pos":[44309,44531],"content":"A &lt;xref:System.Boolean&gt; value that is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the value is of the specified resource type; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Boolean> value that is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value is of the specified resource type; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[45063,45131],"content":"Returns the year value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the year value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,68],"source":"Returns the year value of the given <xref:System.DateTime> instance."}]},{"pos":[45280,45312],"content":"A <xref:System.DateTime> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; object.","pos":[0,32],"source":"A <xref:System.DateTime> object."}]},{"pos":[45370,45430],"content":"The year value of the given <xref:System.DateTime> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The year value of the given &lt;xref:System.DateTime&gt; instance.","pos":[0,60],"source":"The year value of the given <xref:System.DateTime> instance."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Services.Providers.OpenTypeMethods\n  id: OpenTypeMethods\n  children:\n  - System.Data.Services.Providers.OpenTypeMethods.Add(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.AndAlso(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Ceiling(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Concat(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Convert(System.Object,System.Data.Services.Providers.ResourceType)\n  - System.Data.Services.Providers.OpenTypeMethods.Day(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Divide(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.EndsWith(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Equal(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Floor(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.GetValue(System.Object,System.String)\n  - System.Data.Services.Providers.OpenTypeMethods.GreaterThan(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.GreaterThanOrEqual(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Hour(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.IndexOf(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Length(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.LessThan(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.LessThanOrEqual(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Minute(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Modulo(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Month(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Multiply(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Negate(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Not(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.NotEqual(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.OrElse(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Replace(System.Object,System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Round(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Second(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.StartsWith(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Substring(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Substring(System.Object,System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.SubstringOf(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Subtract(System.Object,System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.ToLower(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.ToUpper(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.Trim(System.Object)\n  - System.Data.Services.Providers.OpenTypeMethods.TypeIs(System.Object,System.Data.Services.Providers.ResourceType)\n  - System.Data.Services.Providers.OpenTypeMethods.Year(System.Object)\n  langs:\n  - csharp\n  name: OpenTypeMethods\n  nameWithType: OpenTypeMethods\n  fullName: System.Data.Services.Providers.OpenTypeMethods\n  type: Class\n  summary: Used to perform late-bound operations on open properties.\n  remarks: This class is used when you implement a custom data service provider for [!INCLUDE[ssAstoria](~/add/includes/ssastoria-md.md)].\n  syntax:\n    content: public static class OpenTypeMethods\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Add(Object,Object)\n  nameWithType: OpenTypeMethods.Add(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Add(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Adds two values.\n  remarks: The Add method adds two values without overflow checking.\n  syntax:\n    content: public static object Add (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: First value to add.\n    - id: right\n      type: System.Object\n      description: Second value to add.\n    return:\n      type: System.Object\n      description: The result of the arithmetic operation.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.AndAlso(System.Object,System.Object)\n  id: AndAlso(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: AndAlso(Object,Object)\n  nameWithType: OpenTypeMethods.AndAlso(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.AndAlso(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Performs a logical <xref uid=\"langword_csharp_and\" name=\"and\" href=\"\"></xref> operation between two expressions.\n  syntax:\n    content: public static object AndAlso (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: Left value.\n    - id: right\n      type: System.Object\n      description: Right value.\n    return:\n      type: System.Object\n      description: The result of the logical <xref uid=\"langword_csharp_and\" name=\"and\" href=\"\"></xref> operation.\n  overload: System.Data.Services.Providers.OpenTypeMethods.AndAlso*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Ceiling(System.Object)\n  id: Ceiling(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Ceiling(Object)\n  nameWithType: OpenTypeMethods.Ceiling(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Ceiling(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the ceiling of the given value.\n  syntax:\n    content: public static object Ceiling (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: A <xref:System.Decimal> or <xref:System.Double> object.\n    return:\n      type: System.Object\n      description: The ceiling value for the given value.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Ceiling*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Concat(System.Object,System.Object)\n  id: Concat(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Concat(Object,Object)\n  nameWithType: OpenTypeMethods.Concat(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Concat(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Concatenates two string values.\n  syntax:\n    content: public static object Concat (object first, object second);\n    parameters:\n    - id: first\n      type: System.Object\n      description: The first string.\n    - id: second\n      type: System.Object\n      description: The second string.\n    return:\n      type: System.Object\n      description: A new instance that is the concatenated string.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Concat*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Convert(System.Object,System.Data.Services.Providers.ResourceType)\n  id: Convert(System.Object,System.Data.Services.Providers.ResourceType)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Convert(Object,ResourceType)\n  nameWithType: OpenTypeMethods.Convert(Object,ResourceType)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Convert(Object,ResourceType)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Converts a value to the specified type.\n  remarks: The Convert method is used to perform a type cast on the specified `value`.\n  syntax:\n    content: public static object Convert (object value, System.Data.Services.Providers.ResourceType type);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Value to convert.\n    - id: type\n      type: System.Data.Services.Providers.ResourceType\n      description: Resource type for the conversion.\n    return:\n      type: System.Object\n      description: The converted value.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Convert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Day(System.Object)\n  id: Day(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Day(Object)\n  nameWithType: OpenTypeMethods.Day(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Day(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the day value of the given <xref:System.DateTime> instance.\n  syntax:\n    content: public static object Day (object dateTime);\n    parameters:\n    - id: dateTime\n      type: System.Object\n      description: A <xref:System.DateTime> object.\n    return:\n      type: System.Object\n      description: The day value of the given <xref:System.DateTime> instance.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Day*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Divide(System.Object,System.Object)\n  id: Divide(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Divide(Object,Object)\n  nameWithType: OpenTypeMethods.Divide(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Divide(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Divides two values.\n  syntax:\n    content: public static object Divide (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value (dividend).\n    - id: right\n      type: System.Object\n      description: The second value (divisor).\n    return:\n      type: System.Object\n      description: The divided value.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Divide*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.EndsWith(System.Object,System.Object)\n  id: EndsWith(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: EndsWith(Object,Object)\n  nameWithType: OpenTypeMethods.EndsWith(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.EndsWith(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Determines whether the end of one string matches another string.\n  remarks: An error is raised when the parameters are not strings.\n  syntax:\n    content: public static object EndsWith (object targetString, object substring);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The string being compared.\n    - id: substring\n      type: System.Object\n      description: The string to compare to.\n    return:\n      type: System.Object\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when <code>targetString</code> ends with <code>substring</code>; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.EndsWith*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Equal(System.Object,System.Object)\n  id: Equal(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Equal(Object,Object)\n  nameWithType: OpenTypeMethods.Equal(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Equal(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Determines whether the specified objects are considered equal.\n  syntax:\n    content: public static object Equal (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first object to compare.\n    - id: right\n      type: System.Object\n      description: The second object to compare.\n    return:\n      type: System.Object\n      description: A <xref:System.Boolean> value of <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when both objects are equal; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Equal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Floor(System.Object)\n  id: Floor(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Floor(Object)\n  nameWithType: OpenTypeMethods.Floor(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Floor(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the floor of the given value.\n  syntax:\n    content: public static object Floor (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <xref:System.Decimal> or <xref:System.Double> object to evaluate.\n    return:\n      type: System.Object\n      description: Returns the floor value for the given object.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Floor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.GetValue(System.Object,System.String)\n  id: GetValue(System.Object,System.String)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: GetValue(Object,String)\n  nameWithType: OpenTypeMethods.GetValue(Object,String)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.GetValue(Object,String)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Gets a value from the specified property of a specified object.\n  syntax:\n    content: public static object GetValue (object value, string propertyName);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Object from which to get the property value.\n    - id: propertyName\n      type: System.String\n      description: Name of property from which to get the value.\n    return:\n      type: System.Object\n      description: The requested value; <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the value cannot be determined.\n  overload: System.Data.Services.Providers.OpenTypeMethods.GetValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.GreaterThan(System.Object,System.Object)\n  id: GreaterThan(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: GreaterThan(Object,Object)\n  nameWithType: OpenTypeMethods.GreaterThan(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.GreaterThan(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Determines whether the value of one object is greater than another object.\n  syntax:\n    content: public static object GreaterThan (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value.\n    - id: right\n      type: System.Object\n      description: The second value.\n    return:\n      type: System.Object\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value of the first object is greater than that of the second object; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.GreaterThan*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.GreaterThanOrEqual(System.Object,System.Object)\n  id: GreaterThanOrEqual(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: GreaterThanOrEqual(Object,Object)\n  nameWithType: OpenTypeMethods.GreaterThanOrEqual(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.GreaterThanOrEqual(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Determines whether the value of one object is greater than or equal to another object.\n  syntax:\n    content: public static object GreaterThanOrEqual (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value.\n    - id: right\n      type: System.Object\n      description: The second value.\n    return:\n      type: System.Object\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value of the first object is greater than or equal to that of the second object; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.GreaterThanOrEqual*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Hour(System.Object)\n  id: Hour(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Hour(Object)\n  nameWithType: OpenTypeMethods.Hour(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Hour(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the hour value of the given <xref:System.DateTime> instance.\n  syntax:\n    content: public static object Hour (object dateTime);\n    parameters:\n    - id: dateTime\n      type: System.Object\n      description: A <xref:System.DateTime> object.\n    return:\n      type: System.Object\n      description: The hour value of the given <xref:System.DateTime> instance.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Hour*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.IndexOf(System.Object,System.Object)\n  id: IndexOf(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: IndexOf(Object,Object)\n  nameWithType: OpenTypeMethods.IndexOf(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.IndexOf(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the index of a substring in the target string.\n  remarks: The IndexOf method returns a null value when `substring` cannot be found in `targetString`.\n  syntax:\n    content: public static object IndexOf (object targetString, object substring);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The target string.\n    - id: substring\n      type: System.Object\n      description: The substring to find.\n    return:\n      type: System.Object\n      description: Returns the index of the location of <code>substring</code> in the <code>targetString</code>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Length(System.Object)\n  id: Length(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Length(Object)\n  nameWithType: OpenTypeMethods.Length(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Length(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Gets the number of characters in the supplied string object.\n  remarks: An error is raised when the supplied `value` is not of type <xref:System.String>.\n  syntax:\n    content: public static object Length (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The string to be checked.\n    return:\n      type: System.Object\n      description: The length of the string value.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Length*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.LessThan(System.Object,System.Object)\n  id: LessThan(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: LessThan(Object,Object)\n  nameWithType: OpenTypeMethods.LessThan(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.LessThan(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Determines whether the value of one object is less than another object.\n  syntax:\n    content: public static object LessThan (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value.\n    - id: right\n      type: System.Object\n      description: The second value.\n    return:\n      type: System.Object\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value of the first object is less than that of the second object; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.LessThan*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.LessThanOrEqual(System.Object,System.Object)\n  id: LessThanOrEqual(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: LessThanOrEqual(Object,Object)\n  nameWithType: OpenTypeMethods.LessThanOrEqual(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.LessThanOrEqual(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Determines whether the value of one object is less than or equal to another object.\n  syntax:\n    content: public static object LessThanOrEqual (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value.\n    - id: right\n      type: System.Object\n      description: The second value.\n    return:\n      type: System.Object\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value of the first object is less than or equal to that of the second object; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.LessThanOrEqual*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Minute(System.Object)\n  id: Minute(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Minute(Object)\n  nameWithType: OpenTypeMethods.Minute(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Minute(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the minute value of the given <xref:System.DateTime> instance.\n  syntax:\n    content: public static object Minute (object dateTime);\n    parameters:\n    - id: dateTime\n      type: System.Object\n      description: A <xref:System.DateTime> object.\n    return:\n      type: System.Object\n      description: The minute value of the given <xref:System.DateTime> instance.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Minute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Modulo(System.Object,System.Object)\n  id: Modulo(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Modulo(Object,Object)\n  nameWithType: OpenTypeMethods.Modulo(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Modulo(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Calculates the arithmetic remainder of dividing one value by a second value.\n  syntax:\n    content: public static object Modulo (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value (dividend).\n    - id: right\n      type: System.Object\n      description: The second value (divisor).\n    return:\n      type: System.Object\n      description: The remainder value.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Modulo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Month(System.Object)\n  id: Month(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Month(Object)\n  nameWithType: OpenTypeMethods.Month(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Month(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the month value of the given <xref:System.DateTime> instance.\n  syntax:\n    content: public static object Month (object dateTime);\n    parameters:\n    - id: dateTime\n      type: System.Object\n      description: A <xref:System.DateTime> object.\n    return:\n      type: System.Object\n      description: The month value of the given <xref:System.DateTime> instance.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Month*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Multiply(System.Object,System.Object)\n  id: Multiply(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Multiply(Object,Object)\n  nameWithType: OpenTypeMethods.Multiply(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Multiply(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Multiplies two values.\n  remarks: The Multiply method multiplies two values without overflow checking.\n  syntax:\n    content: public static object Multiply (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value.\n    - id: right\n      type: System.Object\n      description: The second value.\n    return:\n      type: System.Object\n      description: The product of the two values.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Negate(System.Object)\n  id: Negate(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Negate(Object)\n  nameWithType: OpenTypeMethods.Negate(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Negate(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the result of multiplying the specified value by negative one.\n  syntax:\n    content: public static object Negate (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to negate.\n    return:\n      type: System.Object\n      description: The product of <code>value</code> multiplied by negative one.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Negate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Not(System.Object)\n  id: Not(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Not(Object)\n  nameWithType: OpenTypeMethods.Not(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Not(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Performs a bitwise (logical) complement operation on the supplied value.\n  syntax:\n    content: public static object Not (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Value to logically complement.\n    return:\n      type: System.Object\n      description: A bitwise complement of the supplied value.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Not*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.NotEqual(System.Object,System.Object)\n  id: NotEqual(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: NotEqual(Object,Object)\n  nameWithType: OpenTypeMethods.NotEqual(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.NotEqual(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Performs a logical comparison of the two values to determine if they are not equal.\n  syntax:\n    content: public static object NotEqual (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value.\n    - id: right\n      type: System.Object\n      description: The second value.\n    return:\n      type: System.Object\n      description: A <xref:System.Boolean> value of <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when both objects are not equal; otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.NotEqual*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.OrElse(System.Object,System.Object)\n  id: OrElse(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: OrElse(Object,Object)\n  nameWithType: OpenTypeMethods.OrElse(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.OrElse(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Performs a logical <xref uid=\"langword_csharp_OR\" name=\"OR\" href=\"\"></xref> operation on two values.\n  syntax:\n    content: public static object OrElse (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: The first value.\n    - id: right\n      type: System.Object\n      description: The second value.\n    return:\n      type: System.Object\n      description: The result of the logical <xref uid=\"langword_csharp_OR\" name=\"OR\" href=\"\"></xref> operation.\n  overload: System.Data.Services.Providers.OpenTypeMethods.OrElse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Replace(System.Object,System.Object,System.Object)\n  id: Replace(System.Object,System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Replace(Object,Object,Object)\n  nameWithType: OpenTypeMethods.Replace(Object,Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Replace(Object,Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Replaces one substring with a second substring in a target string.\n  syntax:\n    content: public static object Replace (object targetString, object substring, object newString);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The string with the substring to replace.\n    - id: substring\n      type: System.Object\n      description: The substring to be replaced.\n    - id: newString\n      type: System.Object\n      description: The new substring.\n    return:\n      type: System.Object\n      description: A new string with the substring replaced with the new substring.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Replace*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Round(System.Object)\n  id: Round(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Round(Object)\n  nameWithType: OpenTypeMethods.Round(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Round(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Rounds the supplied value.\n  syntax:\n    content: public static object Round (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: A <xref:System.Decimal> or <xref:System.Double> to round.\n    return:\n      type: System.Object\n      description: The rounded value.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Round*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Second(System.Object)\n  id: Second(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Second(Object)\n  nameWithType: OpenTypeMethods.Second(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Second(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the second value of the given <xref:System.DateTime> instance.\n  syntax:\n    content: public static object Second (object dateTime);\n    parameters:\n    - id: dateTime\n      type: System.Object\n      description: A <xref:System.DateTime> object.\n    return:\n      type: System.Object\n      description: The second value of the given <xref:System.DateTime> instance.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Second*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.StartsWith(System.Object,System.Object)\n  id: StartsWith(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: StartsWith(Object,Object)\n  nameWithType: OpenTypeMethods.StartsWith(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.StartsWith(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Checks whether the target string starts with the substring.\n  syntax:\n    content: public static object StartsWith (object targetString, object substring);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The string being compared.\n    - id: substring\n      type: System.Object\n      description: The substring that the `targetString` might start with.\n    return:\n      type: System.Object\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the target string starts with the given substring, otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.StartsWith*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Substring(System.Object,System.Object)\n  id: Substring(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Substring(Object,Object)\n  nameWithType: OpenTypeMethods.Substring(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Substring(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the substring after the specified starting index location.\n  remarks: The Substring method returns all characters from `startIndex` through the end of the `targetString`.\n  syntax:\n    content: public static object Substring (object targetString, object startIndex);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The string from which to return the substring.\n    - id: startIndex\n      type: System.Object\n      description: The starting index for the substring.\n    return:\n      type: System.Object\n      description: The substring.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Substring*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Substring(System.Object,System.Object,System.Object)\n  id: Substring(System.Object,System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Substring(Object,Object,Object)\n  nameWithType: OpenTypeMethods.Substring(Object,Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Substring(Object,Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the substring of a specific length after the specified starting index location.\n  remarks: The <xref:System.Data.Services.Providers.OpenTypeMethods.Substring%2A> method returns the `length` number of characters from `startIndex` through the end of the `targetString`.\n  syntax:\n    content: public static object Substring (object targetString, object startIndex, object length);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The string from which to return the substring.\n    - id: startIndex\n      type: System.Object\n      description: The starting index for the substring.\n    - id: length\n      type: System.Object\n      description: The length of the substring.\n    return:\n      type: System.Object\n      description: The substring.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Substring*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.SubstringOf(System.Object,System.Object)\n  id: SubstringOf(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: SubstringOf(Object,Object)\n  nameWithType: OpenTypeMethods.SubstringOf(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.SubstringOf(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Determines whether a substring occurs in another string.\n  syntax:\n    content: public static object SubstringOf (object substring, object targetString);\n    parameters:\n    - id: substring\n      type: System.Object\n      description: The substring to locate.\n    - id: targetString\n      type: System.Object\n      description: The string to search.\n    return:\n      type: System.Object\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when <code>substring</code> occurs in <code>targetString</code>, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.SubstringOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Subtract(System.Object,System.Object)\n  id: Subtract(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Subtract(Object,Object)\n  nameWithType: OpenTypeMethods.Subtract(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Subtract(Object,Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Subtracts two values.\n  syntax:\n    content: public static object Subtract (object left, object right);\n    parameters:\n    - id: left\n      type: System.Object\n      description: First value in the subtraction.\n    - id: right\n      type: System.Object\n      description: Second value in the subtraction.\n    return:\n      type: System.Object\n      description: The result of the arithmetic operation.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Subtract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.ToLower(System.Object)\n  id: ToLower(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: ToLower(Object)\n  nameWithType: OpenTypeMethods.ToLower(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.ToLower(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns a copy of a string converted to lowercase.\n  syntax:\n    content: public static object ToLower (object targetString);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The string to convert.\n    return:\n      type: System.Object\n      description: A new string value with only lowercase.\n  overload: System.Data.Services.Providers.OpenTypeMethods.ToLower*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.ToUpper(System.Object)\n  id: ToUpper(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: ToUpper(Object)\n  nameWithType: OpenTypeMethods.ToUpper(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.ToUpper(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns a copy of a string converted to uppercase.\n  syntax:\n    content: public static object ToUpper (object targetString);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The string to convert.\n    return:\n      type: System.Object\n      description: A new string value with only uppercase characters.\n  overload: System.Data.Services.Providers.OpenTypeMethods.ToUpper*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Trim(System.Object)\n  id: Trim(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Trim(Object)\n  nameWithType: OpenTypeMethods.Trim(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Trim(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Removes all leading and trailing white-space characters from a string.\n  syntax:\n    content: public static object Trim (object targetString);\n    parameters:\n    - id: targetString\n      type: System.Object\n      description: The string to trim.\n    return:\n      type: System.Object\n      description: The trimmed string.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Trim*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.TypeIs(System.Object,System.Data.Services.Providers.ResourceType)\n  id: TypeIs(System.Object,System.Data.Services.Providers.ResourceType)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: TypeIs(Object,ResourceType)\n  nameWithType: OpenTypeMethods.TypeIs(Object,ResourceType)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.TypeIs(Object,ResourceType)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Checks the type of a specified value.\n  syntax:\n    content: public static object TypeIs (object value, System.Data.Services.Providers.ResourceType type);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to check.\n    - id: type\n      type: System.Data.Services.Providers.ResourceType\n      description: Resource type for which to check.\n    return:\n      type: System.Object\n      description: A <xref:System.Boolean> value that is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the value is of the specified resource type; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Services.Providers.OpenTypeMethods.TypeIs*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Services.Providers.OpenTypeMethods.Year(System.Object)\n  id: Year(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  langs:\n  - csharp\n  name: Year(Object)\n  nameWithType: OpenTypeMethods.Year(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Year(Object)\n  type: Method\n  assemblies:\n  - System.Data.Services\n  namespace: System.Data.Services.Providers\n  summary: Returns the year value of the given <xref:System.DateTime> instance.\n  syntax:\n    content: public static object Year (object dateTime);\n    parameters:\n    - id: dateTime\n      type: System.Object\n      description: A <xref:System.DateTime> object.\n    return:\n      type: System.Object\n      description: The year value of the given <xref:System.DateTime> instance.\n  overload: System.Data.Services.Providers.OpenTypeMethods.Year*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Services.Providers.OpenTypeMethods.Add(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Add(Object,Object)\n  nameWithType: OpenTypeMethods.Add(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Add(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.AndAlso(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: AndAlso(Object,Object)\n  nameWithType: OpenTypeMethods.AndAlso(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.AndAlso(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Ceiling(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Ceiling(Object)\n  nameWithType: OpenTypeMethods.Ceiling(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Ceiling(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Concat(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Concat(Object,Object)\n  nameWithType: OpenTypeMethods.Concat(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Concat(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Convert(System.Object,System.Data.Services.Providers.ResourceType)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Convert(Object,ResourceType)\n  nameWithType: OpenTypeMethods.Convert(Object,ResourceType)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Convert(Object,ResourceType)\n- uid: System.Data.Services.Providers.ResourceType\n  parent: System.Data.Services.Providers\n  isExternal: false\n  name: ResourceType\n  nameWithType: ResourceType\n  fullName: System.Data.Services.Providers.ResourceType\n- uid: System.Data.Services.Providers.OpenTypeMethods.Day(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Day(Object)\n  nameWithType: OpenTypeMethods.Day(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Day(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Divide(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Divide(Object,Object)\n  nameWithType: OpenTypeMethods.Divide(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Divide(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.EndsWith(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: EndsWith(Object,Object)\n  nameWithType: OpenTypeMethods.EndsWith(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.EndsWith(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Equal(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Equal(Object,Object)\n  nameWithType: OpenTypeMethods.Equal(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Equal(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Floor(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Floor(Object)\n  nameWithType: OpenTypeMethods.Floor(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Floor(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.GetValue(System.Object,System.String)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: GetValue(Object,String)\n  nameWithType: OpenTypeMethods.GetValue(Object,String)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.GetValue(Object,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Services.Providers.OpenTypeMethods.GreaterThan(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: GreaterThan(Object,Object)\n  nameWithType: OpenTypeMethods.GreaterThan(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.GreaterThan(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.GreaterThanOrEqual(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: GreaterThanOrEqual(Object,Object)\n  nameWithType: OpenTypeMethods.GreaterThanOrEqual(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.GreaterThanOrEqual(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Hour(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Hour(Object)\n  nameWithType: OpenTypeMethods.Hour(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Hour(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.IndexOf(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: IndexOf(Object,Object)\n  nameWithType: OpenTypeMethods.IndexOf(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.IndexOf(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Length(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Length(Object)\n  nameWithType: OpenTypeMethods.Length(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Length(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.LessThan(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: LessThan(Object,Object)\n  nameWithType: OpenTypeMethods.LessThan(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.LessThan(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.LessThanOrEqual(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: LessThanOrEqual(Object,Object)\n  nameWithType: OpenTypeMethods.LessThanOrEqual(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.LessThanOrEqual(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Minute(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Minute(Object)\n  nameWithType: OpenTypeMethods.Minute(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Minute(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Modulo(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Modulo(Object,Object)\n  nameWithType: OpenTypeMethods.Modulo(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Modulo(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Month(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Month(Object)\n  nameWithType: OpenTypeMethods.Month(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Month(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Multiply(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Multiply(Object,Object)\n  nameWithType: OpenTypeMethods.Multiply(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Multiply(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Negate(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Negate(Object)\n  nameWithType: OpenTypeMethods.Negate(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Negate(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Not(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Not(Object)\n  nameWithType: OpenTypeMethods.Not(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Not(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.NotEqual(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: NotEqual(Object,Object)\n  nameWithType: OpenTypeMethods.NotEqual(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.NotEqual(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.OrElse(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: OrElse(Object,Object)\n  nameWithType: OpenTypeMethods.OrElse(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.OrElse(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Replace(System.Object,System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Replace(Object,Object,Object)\n  nameWithType: OpenTypeMethods.Replace(Object,Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Replace(Object,Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Round(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Round(Object)\n  nameWithType: OpenTypeMethods.Round(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Round(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Second(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Second(Object)\n  nameWithType: OpenTypeMethods.Second(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Second(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.StartsWith(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: StartsWith(Object,Object)\n  nameWithType: OpenTypeMethods.StartsWith(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.StartsWith(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Substring(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Substring(Object,Object)\n  nameWithType: OpenTypeMethods.Substring(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Substring(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Substring(System.Object,System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Substring(Object,Object,Object)\n  nameWithType: OpenTypeMethods.Substring(Object,Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Substring(Object,Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.SubstringOf(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: SubstringOf(Object,Object)\n  nameWithType: OpenTypeMethods.SubstringOf(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.SubstringOf(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Subtract(System.Object,System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Subtract(Object,Object)\n  nameWithType: OpenTypeMethods.Subtract(Object,Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Subtract(Object,Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.ToLower(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: ToLower(Object)\n  nameWithType: OpenTypeMethods.ToLower(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.ToLower(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.ToUpper(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: ToUpper(Object)\n  nameWithType: OpenTypeMethods.ToUpper(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.ToUpper(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Trim(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Trim(Object)\n  nameWithType: OpenTypeMethods.Trim(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Trim(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.TypeIs(System.Object,System.Data.Services.Providers.ResourceType)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: TypeIs(Object,ResourceType)\n  nameWithType: OpenTypeMethods.TypeIs(Object,ResourceType)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.TypeIs(Object,ResourceType)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Year(System.Object)\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Year(Object)\n  nameWithType: OpenTypeMethods.Year(Object)\n  fullName: System.Data.Services.Providers.OpenTypeMethods.Year(Object)\n- uid: System.Data.Services.Providers.OpenTypeMethods.Add*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Add\n  nameWithType: OpenTypeMethods.Add\n- uid: System.Data.Services.Providers.OpenTypeMethods.AndAlso*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: AndAlso\n  nameWithType: OpenTypeMethods.AndAlso\n- uid: System.Data.Services.Providers.OpenTypeMethods.Ceiling*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Ceiling\n  nameWithType: OpenTypeMethods.Ceiling\n- uid: System.Data.Services.Providers.OpenTypeMethods.Concat*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Concat\n  nameWithType: OpenTypeMethods.Concat\n- uid: System.Data.Services.Providers.OpenTypeMethods.Convert*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Convert\n  nameWithType: OpenTypeMethods.Convert\n- uid: System.Data.Services.Providers.OpenTypeMethods.Day*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Day\n  nameWithType: OpenTypeMethods.Day\n- uid: System.Data.Services.Providers.OpenTypeMethods.Divide*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Divide\n  nameWithType: OpenTypeMethods.Divide\n- uid: System.Data.Services.Providers.OpenTypeMethods.EndsWith*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: EndsWith\n  nameWithType: OpenTypeMethods.EndsWith\n- uid: System.Data.Services.Providers.OpenTypeMethods.Equal*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Equal\n  nameWithType: OpenTypeMethods.Equal\n- uid: System.Data.Services.Providers.OpenTypeMethods.Floor*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Floor\n  nameWithType: OpenTypeMethods.Floor\n- uid: System.Data.Services.Providers.OpenTypeMethods.GetValue*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: GetValue\n  nameWithType: OpenTypeMethods.GetValue\n- uid: System.Data.Services.Providers.OpenTypeMethods.GreaterThan*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: GreaterThan\n  nameWithType: OpenTypeMethods.GreaterThan\n- uid: System.Data.Services.Providers.OpenTypeMethods.GreaterThanOrEqual*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: GreaterThanOrEqual\n  nameWithType: OpenTypeMethods.GreaterThanOrEqual\n- uid: System.Data.Services.Providers.OpenTypeMethods.Hour*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Hour\n  nameWithType: OpenTypeMethods.Hour\n- uid: System.Data.Services.Providers.OpenTypeMethods.IndexOf*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: IndexOf\n  nameWithType: OpenTypeMethods.IndexOf\n- uid: System.Data.Services.Providers.OpenTypeMethods.Length*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Length\n  nameWithType: OpenTypeMethods.Length\n- uid: System.Data.Services.Providers.OpenTypeMethods.LessThan*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: LessThan\n  nameWithType: OpenTypeMethods.LessThan\n- uid: System.Data.Services.Providers.OpenTypeMethods.LessThanOrEqual*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: LessThanOrEqual\n  nameWithType: OpenTypeMethods.LessThanOrEqual\n- uid: System.Data.Services.Providers.OpenTypeMethods.Minute*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Minute\n  nameWithType: OpenTypeMethods.Minute\n- uid: System.Data.Services.Providers.OpenTypeMethods.Modulo*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Modulo\n  nameWithType: OpenTypeMethods.Modulo\n- uid: System.Data.Services.Providers.OpenTypeMethods.Month*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Month\n  nameWithType: OpenTypeMethods.Month\n- uid: System.Data.Services.Providers.OpenTypeMethods.Multiply*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Multiply\n  nameWithType: OpenTypeMethods.Multiply\n- uid: System.Data.Services.Providers.OpenTypeMethods.Negate*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Negate\n  nameWithType: OpenTypeMethods.Negate\n- uid: System.Data.Services.Providers.OpenTypeMethods.Not*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Not\n  nameWithType: OpenTypeMethods.Not\n- uid: System.Data.Services.Providers.OpenTypeMethods.NotEqual*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: NotEqual\n  nameWithType: OpenTypeMethods.NotEqual\n- uid: System.Data.Services.Providers.OpenTypeMethods.OrElse*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: OrElse\n  nameWithType: OpenTypeMethods.OrElse\n- uid: System.Data.Services.Providers.OpenTypeMethods.Replace*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Replace\n  nameWithType: OpenTypeMethods.Replace\n- uid: System.Data.Services.Providers.OpenTypeMethods.Round*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Round\n  nameWithType: OpenTypeMethods.Round\n- uid: System.Data.Services.Providers.OpenTypeMethods.Second*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Second\n  nameWithType: OpenTypeMethods.Second\n- uid: System.Data.Services.Providers.OpenTypeMethods.StartsWith*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: StartsWith\n  nameWithType: OpenTypeMethods.StartsWith\n- uid: System.Data.Services.Providers.OpenTypeMethods.Substring*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Substring\n  nameWithType: OpenTypeMethods.Substring\n- uid: System.Data.Services.Providers.OpenTypeMethods.SubstringOf*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: SubstringOf\n  nameWithType: OpenTypeMethods.SubstringOf\n- uid: System.Data.Services.Providers.OpenTypeMethods.Subtract*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Subtract\n  nameWithType: OpenTypeMethods.Subtract\n- uid: System.Data.Services.Providers.OpenTypeMethods.ToLower*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: ToLower\n  nameWithType: OpenTypeMethods.ToLower\n- uid: System.Data.Services.Providers.OpenTypeMethods.ToUpper*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: ToUpper\n  nameWithType: OpenTypeMethods.ToUpper\n- uid: System.Data.Services.Providers.OpenTypeMethods.Trim*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Trim\n  nameWithType: OpenTypeMethods.Trim\n- uid: System.Data.Services.Providers.OpenTypeMethods.TypeIs*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: TypeIs\n  nameWithType: OpenTypeMethods.TypeIs\n- uid: System.Data.Services.Providers.OpenTypeMethods.Year*\n  parent: System.Data.Services.Providers.OpenTypeMethods\n  isExternal: false\n  name: Year\n  nameWithType: OpenTypeMethods.Year\n"}