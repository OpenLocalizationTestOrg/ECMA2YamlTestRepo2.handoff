{"nodes":[{"pos":[270,354],"content":"Indicates that a return type is a user-defined type. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates that a return type is a user-defined type. This class cannot be inherited.","pos":[0,84],"nodes":[{"content":"Indicates that a return type is a user-defined type.","pos":[0,52]},{"content":"This class cannot be inherited.","pos":[53,84]}]}]},{"pos":[367,1766],"content":"The IsUdtReturn modifier is used by the C++ compiler to mark return types of methods that have native C++ object return semantics.  The managed debugger recognizes this modifier to correctly determine that the native calling convention is in use.       Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.       You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.      -   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).      -   Using the unmanaged reflection API.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The IsUdtReturn modifier is used by the C++ compiler to mark return types of methods that have native C++ object return semantics.","pos":[0,130]},{"content":"The managed debugger recognizes this modifier to correctly determine that the native calling convention is in use.","pos":[132,246]},{"content":"Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.","pos":[253,416]},{"content":"When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.","pos":[418,530]},{"content":"Compilers can apply custom modifiers to methods, parameters, and return values.","pos":[532,611]},{"content":"The JIT compiler must respond to required modifiers but can ignore optional modifiers.","pos":[613,699]},{"content":"You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the &lt;xref:System.Reflection.Emit.TypeBuilder&gt; class such as &lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;, and &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;.","pos":[706,1120],"source":"       You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>."},{"content":"-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id=\"ph1\">`modopt`</ph> and <ph id=\"ph2\">`modreq`</ph>, and assembling the file with the <bpt id=\"p1\">[</bpt>Ilasm.exe (IL Assembler)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1126,1344],"source":"      -   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   Using the unmanaged reflection API.","pos":[1350,1389]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.IsUdtReturn\n  id: IsUdtReturn\n  children: []\n  langs:\n  - csharp\n  name: IsUdtReturn\n  nameWithType: IsUdtReturn\n  fullName: System.Runtime.CompilerServices.IsUdtReturn\n  type: Class\n  summary: Indicates that a return type is a user-defined type. This class cannot be inherited.\n  remarks: \"The IsUdtReturn modifier is used by the C++ compiler to mark return types of methods that have native C++ object return semantics.  The managed debugger recognizes this modifier to correctly determine that the native calling convention is in use.  \\n  \\n Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  \\n  \\n You can emit custom modifiers into metadata using one of the following techniques:  \\n  \\n-   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  \\n  \\n-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   Using the unmanaged reflection API.\"\n  example:\n  - \"The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the IsUdtReturn modifier into that assembly.  \\n  \\n [!code-cpp[Runtime.CompilerServices.IsUdtReturn#1](~/add/codesnippet/cpp/t-system.runtime.compile_10_1.cpp)]\"\n  syntax:\n    content: public static class IsUdtReturn\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n"}