{"nodes":[{"pos":[1211,1611],"content":"Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.       **Security Note**: Calling methods in this class with untrusted data is a security risk. Call the methods in the class only with trusted data. For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).","needQuote":false,"needEscape":true,"nodes":[{"content":"Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.","pos":[0,121]},{"content":"<bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept>: Calling methods in this class with untrusted data is a security risk.","pos":[128,216],"source":"**Security Note**: Calling methods in this class with untrusted data is a security risk."},{"content":"Call the methods in the class only with trusted data.","pos":[217,270]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Untrusted Data Security Risks<ept id=\"p1\">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.","pos":[271,398],"source":" For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)."}]},{"pos":[1625,2601],"content":"The ResourceSet class enumerates over an <xref:System.Resources.IResourceReader>, loading every name and value, and storing them in a <xref:System.Collections.Hashtable>. A custom <xref:System.Resources.IResourceReader> can be used.       You can instantiate a ResourceSet object that represents the resources of a specific culture by calling the <xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName> method.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ResourceSet class enumerates over an &lt;xref:System.Resources.IResourceReader&gt;, loading every name and value, and storing them in a &lt;xref:System.Collections.Hashtable&gt;.","pos":[0,170],"source":"The ResourceSet class enumerates over an <xref:System.Resources.IResourceReader>, loading every name and value, and storing them in a <xref:System.Collections.Hashtable>."},{"content":"A custom &lt;xref:System.Resources.IResourceReader&gt; can be used.","pos":[171,232],"source":" A custom <xref:System.Resources.IResourceReader> can be used."},{"content":"You can instantiate a ResourceSet object that represents the resources of a specific culture by calling the &lt;xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName&gt; method.","pos":[239,437],"source":"       You can instantiate a ResourceSet object that represents the resources of a specific culture by calling the <xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName> method."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[443,522],"source":"      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[523,617]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[618,729],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[730,837],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[838,971],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."}]},{"pos":[3236,3350],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with default properties.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Resources.ResourceSet\"></xref> class with default properties."},{"pos":[3883,4090],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the system default <bpt id=\"p2\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that reads resources from the given stream.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Resources.ResourceSet\"></xref> class using the system default <xref href=\"System.Resources.ResourceReader\"></xref> that reads resources from the given stream."},{"pos":[4241,4348],"content":"The <xref:System.IO.Stream> of resources to be read. The stream should refer to an existing resources file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.IO.Stream> of resources to be read. The stream should refer to an existing resources file.","pos":[0,107],"nodes":[{"content":"The &lt;xref:System.IO.Stream&gt; of resources to be read.","pos":[0,52],"source":"The <xref:System.IO.Stream> of resources to be read."},{"content":"The stream should refer to an existing resources file.","pos":[53,107]}]}]},{"pos":[4505,4545],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">stream</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not readable.","needQuote":true,"needEscape":true,"source":"The <code>stream</code> is not readable."},{"pos":[4648,4746],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">stream</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>stream</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5205,5327],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified resource reader.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Resources.ResourceSet\"></xref> class using the specified resource reader."},{"pos":[5339,5465],"content":"You can use this constructor to support custom resource formats using a user-provided <xref:System.Resources.IResourceReader>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use this constructor to support custom resource formats using a user-provided &lt;xref:System.Resources.IResourceReader&gt;.","pos":[0,126],"source":"You can use this constructor to support custom resource formats using a user-provided <xref:System.Resources.IResourceReader>."}]},{"pos":[5648,5677],"content":"The reader that will be used.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reader that will be used.","pos":[0,29]}]},{"pos":[5842,5940],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">reader</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>reader</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6334,6549],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the system default <bpt id=\"p2\">&lt;xref href=\"System.Resources.ResourceReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that opens and reads resources from the given file.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Resources.ResourceSet\"></xref> class using the system default <xref href=\"System.Resources.ResourceReader\"></xref> that opens and reads resources from the given file."},{"pos":[7297,7319],"content":"Resource file to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resource file to read.","pos":[0,22]}]},{"pos":[7484,7584],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>fileName</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7905,8002],"content":"Closes and releases any resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Closes and releases any resources used by this <xref href=\"System.Resources.ResourceSet\"></xref>."},{"pos":[8015,8289],"content":"All calls to methods on the <xref:System.Resources.ResourceSet> after a call to this method might fail.       Close can be safely called multiple times.      > [!NOTE] >  The current implementation of Close calls <xref:System.Resources.ResourceSet.Dispose%2A> (`true`).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"All calls to methods on the &lt;xref:System.Resources.ResourceSet&gt; after a call to this method might fail.","pos":[0,103],"source":"All calls to methods on the <xref:System.Resources.ResourceSet> after a call to this method might fail."},{"content":"Close can be safely called multiple times.","pos":[110,152]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The current implementation of Close calls &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; (<ph id=\"ph2\">`true`</ph>).","pos":[158,269],"source":"      > [!NOTE] >  The current implementation of Close calls <xref:System.Resources.ResourceSet.Dispose%2A> (`true`)."}]},{"pos":[9279,9407],"content":"Disposes of the resources (other than memory) used by the current instance of <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Disposes of the resources (other than memory) used by the current instance of <xref href=\"System.Resources.ResourceSet\"></xref>."},{"pos":[9420,10086],"content":"Call <xref:System.Resources.ResourceSet.Dispose%2A> when you are finished using the <xref:System.Resources.ResourceSet>. The <xref:System.Resources.ResourceSet.Dispose%2A> method leaves the <xref:System.Resources.ResourceSet> in an unusable state. After calling <xref:System.Resources.ResourceSet.Dispose%2A>, you must release all references to the <xref:System.Resources.ResourceSet> so the memory it was occupying can be reclaimed by garbage collection.      > [!NOTE] >  The current method is the implementation of <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>. This implementation calls <xref:System.Resources.ResourceSet.Dispose%2A> (`true`).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; when you are finished using the &lt;xref:System.Resources.ResourceSet&gt;.","pos":[0,120],"source":"Call <xref:System.Resources.ResourceSet.Dispose%2A> when you are finished using the <xref:System.Resources.ResourceSet>."},{"content":"The &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; method leaves the &lt;xref:System.Resources.ResourceSet&gt; in an unusable state.","pos":[121,247],"source":" The <xref:System.Resources.ResourceSet.Dispose%2A> method leaves the <xref:System.Resources.ResourceSet> in an unusable state."},{"content":"After calling &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;, you must release all references to the &lt;xref:System.Resources.ResourceSet&gt; so the memory it was occupying can be reclaimed by garbage collection.","pos":[248,455],"source":" After calling <xref:System.Resources.ResourceSet.Dispose%2A>, you must release all references to the <xref:System.Resources.ResourceSet> so the memory it was occupying can be reclaimed by garbage collection."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The current method is the implementation of &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;.","pos":[461,580],"source":"      > [!NOTE] >  The current method is the implementation of <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>."},{"content":"This implementation calls &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; (<ph id=\"ph1\">`true`</ph>).","pos":[581,663],"source":" This implementation calls <xref:System.Resources.ResourceSet.Dispose%2A> (`true`)."}]},{"pos":[10604,10727],"content":"Releases resources (other than memory) associated with the current instance, closing internal managed objects if requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases resources (other than memory) associated with the current instance, closing internal managed objects if requested.","pos":[0,123]}]},{"pos":[10739,11016],"content":"If the `dispose` parameter is `true`, the current method frees all the resources associated with it as well as with all objects associated with it. If `dispose` is `false`, the current method frees only the resources allocated to it, and ignores any objects associated with it.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the <ph id=\"ph1\">`dispose`</ph> parameter is <ph id=\"ph2\">`true`</ph>, the current method frees all the resources associated with it as well as with all objects associated with it.","pos":[0,147],"source":"If the `dispose` parameter is `true`, the current method frees all the resources associated with it as well as with all objects associated with it."},{"content":"If <ph id=\"ph1\">`dispose`</ph> is <ph id=\"ph2\">`false`</ph>, the current method frees only the resources allocated to it, and ignores any objects associated with it.","pos":[148,277],"source":" If `dispose` is `false`, the current method frees only the resources allocated to it, and ignores any objects associated with it."}]},{"pos":[11171,11263],"content":"Indicates whether the objects contained in the current instance should be explicitly closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the objects contained in the current instance should be explicitly closed.","pos":[0,92]}]},{"pos":[11706,11817],"content":"Returns the preferred resource reader class for this kind of <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the preferred resource reader class for this kind of <xref href=\"System.Resources.ResourceSet\"></xref>."},{"pos":[11956,12088],"content":"Returns the &lt;xref:System.Type&gt; for the preferred resource reader for this kind of <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the <xref:System.Type> for the preferred resource reader for this kind of <xref href=\"System.Resources.ResourceSet\"></xref>."},{"pos":[12540,12651],"content":"Returns the preferred resource writer class for this kind of <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the preferred resource writer class for this kind of <xref href=\"System.Resources.ResourceSet\"></xref>."},{"pos":[12790,12922],"content":"Returns the &lt;xref:System.Type&gt; for the preferred resource writer for this kind of <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the <xref:System.Type> for the preferred resource writer for this kind of <xref href=\"System.Resources.ResourceSet\"></xref>."},{"pos":[13359,13497],"content":"Returns an &lt;xref:System.Collections.IDictionaryEnumerator&gt; that can iterate through the <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an <xref:System.Collections.IDictionaryEnumerator> that can iterate through the <xref href=\"System.Resources.ResourceSet\"></xref>."},{"pos":[13510,16655],"content":"Enumerators only allow reading the data in the collection. Enumerators cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> will return the element that it is set to, even if the enumerator is already invalidated.       You can use the <xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName> property to access the value stored in the current element. Use the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property to access the key of the current element. Use the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property to access the value of the current element.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Enumerators only allow reading the data in the collection.","pos":[0,58]},{"content":"Enumerators cannot be used to modify the underlying collection.","pos":[59,122]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[129,212]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[213,309],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[310,405],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[406,623],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[630,826],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[827,951],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[958,1150],"source":"       After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[1151,1316],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1317,1541],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1548,1620]},{"content":"If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[1621,1923],"source":" If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; will return the element that it is set to, even if the enumerator is already invalidated.","pos":[1924,2204],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> will return the element that it is set to, even if the enumerator is already invalidated."},{"content":"You can use the &lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName&gt; property to access the value stored in the current element.","pos":[2211,2368],"source":"       You can use the <xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName> property to access the value stored in the current element."},{"content":"Use the &lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt; property to access the key of the current element.","pos":[2369,2507],"source":" Use the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property to access the key of the current element."},{"content":"Use the &lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt; property to access the value of the current element.","pos":[2508,2650],"source":" Use the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property to access the value of the current element."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2657,2811]},{"content":"Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.","pos":[2812,2951]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[2952,3133]}]},{"pos":[17584,17694],"content":"An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for this <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IDictionaryEnumerator> for this <xref href=\"System.Resources.ResourceSet\"></xref>."},{"pos":[17871,17916],"content":"The resource set has been closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resource set has been closed or disposed.","pos":[0,45]}]},{"pos":[18305,18360],"content":"Searches for a resource object with the specified name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for a resource object with the specified name.","pos":[0,55]}]},{"pos":[18372,18507],"content":"The name of the resource object is case sensitive. For a case-insensitive search, use <xref:System.Resources.ResourceSet.GetObject%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The name of the resource object is case sensitive. For a case-insensitive search, use <xref:System.Resources.ResourceSet.GetObject%2A>.","pos":[0,135],"nodes":[{"content":"The name of the resource object is case sensitive.","pos":[0,50]},{"content":"For a case-insensitive search, use &lt;xref:System.Resources.ResourceSet.GetObject%2A&gt;.","pos":[51,135],"source":" For a case-insensitive search, use <xref:System.Resources.ResourceSet.GetObject%2A>."}]}]},{"pos":[18654,18704],"content":"Case-sensitive name of the resource to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Case-sensitive name of the resource to search for.","pos":[0,50]}]},{"pos":[18762,18785],"content":"The requested resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested resource.","pos":[0,23]}]},{"pos":[18954,19050],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19157,19196],"content":"The object has been closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has been closed or disposed.","pos":[0,39]}]},{"pos":[19639,19737],"content":"Searches for a resource object with the specified name in a case-insensitive manner, if requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for a resource object with the specified name in a case-insensitive manner, if requested.","pos":[0,98]}]},{"pos":[19750,20939],"content":"If the value of the `ignoreCase` parameter is `true`, a resource with the name \"Resource\" is equivalent to the resource with the name \"resource\". Note, however, that this method always performs case-insensitive string comparisons using <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>. The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture. The disadvantage is that the results are not consistent with the casing rules of all cultures.       For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot. In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131). The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130). According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture \"tr-TR\" (Turkish in Turkey). Using the `GetObject` method with `ignoreCase` set to `true`, this comparison succeeds.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of the <ph id=\"ph1\">`ignoreCase`</ph> parameter is <ph id=\"ph2\">`true`</ph>, a resource with the name \"Resource\" is equivalent to the resource with the name \"resource\".","pos":[0,145],"source":"If the value of the `ignoreCase` parameter is `true`, a resource with the name \"Resource\" is equivalent to the resource with the name \"resource\"."},{"content":"Note, however, that this method always performs case-insensitive string comparisons using &lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;.","pos":[146,321],"source":" Note, however, that this method always performs case-insensitive string comparisons using <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>."},{"content":"The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture.","pos":[322,468]},{"content":"The disadvantage is that the results are not consistent with the casing rules of all cultures.","pos":[469,563]},{"content":"For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.","pos":[570,678]},{"content":"In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).","pos":[679,800]},{"content":"The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).","pos":[801,910]},{"content":"According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture \"tr-TR\" (Turkish in Turkey).","pos":[911,1093]},{"content":"Using the <ph id=\"ph1\">`GetObject`</ph> method with <ph id=\"ph2\">`ignoreCase`</ph> set to <ph id=\"ph3\">`true`</ph>, this comparison succeeds.","pos":[1094,1181],"source":" Using the `GetObject` method with `ignoreCase` set to `true`, this comparison succeeds."}]},{"pos":[21104,21139],"content":"Name of the resource to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the resource to search for.","pos":[0,35]}]},{"pos":[21207,21274],"content":"Indicates whether the case of the specified name should be ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the case of the specified name should be ignored.","pos":[0,67]}]},{"pos":[21332,21355],"content":"The requested resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested resource.","pos":[0,23]}]},{"pos":[21524,21620],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21727,21766],"content":"The object has been closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has been closed or disposed.","pos":[0,39]}]},{"pos":[22155,22224],"content":"Searches for a <xref:System.String> resource with the specified name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for a &lt;xref:System.String&gt; resource with the specified name.","pos":[0,69],"source":"Searches for a <xref:System.String> resource with the specified name."}]},{"pos":[22371,22406],"content":"Name of the resource to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the resource to search for.","pos":[0,35]}]},{"pos":[22464,22528],"content":"The value of a resource, if the value is a <xref:System.String>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of a resource, if the value is a &lt;xref:System.String&gt;.","pos":[0,64],"source":"The value of a resource, if the value is a <xref:System.String>."}]},{"pos":[22697,22793],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22904,22978],"content":"The resource specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a &lt;xref:System.String&gt;.","needQuote":true,"needEscape":true,"source":"The resource specified by <code>name</code> is not a <xref:System.String>."},{"pos":[23085,23124],"content":"The object has been closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has been closed or disposed.","pos":[0,39]}]},{"pos":[23567,23679],"content":"Searches for a <xref:System.String> resource with the specified name in a case-insensitive manner, if requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for a &lt;xref:System.String&gt; resource with the specified name in a case-insensitive manner, if requested.","pos":[0,112],"source":"Searches for a <xref:System.String> resource with the specified name in a case-insensitive manner, if requested."}]},{"pos":[23692,24881],"content":"If the value of the `ignoreCase` parameter is `true`, a resource with the name \"Resource\" is equivalent to the resource with the name \"resource\". Note, however, that this method always performs case-insensitive string comparisons using <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>. The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture. The disadvantage is that the results are not consistent with the casing rules of all cultures.       For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot. In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131). The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130). According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture \"tr-TR\" (Turkish in Turkey). Using the `GetString` method with `ignoreCase` set to `true`, this comparison succeeds.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of the <ph id=\"ph1\">`ignoreCase`</ph> parameter is <ph id=\"ph2\">`true`</ph>, a resource with the name \"Resource\" is equivalent to the resource with the name \"resource\".","pos":[0,145],"source":"If the value of the `ignoreCase` parameter is `true`, a resource with the name \"Resource\" is equivalent to the resource with the name \"resource\"."},{"content":"Note, however, that this method always performs case-insensitive string comparisons using &lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;.","pos":[146,321],"source":" Note, however, that this method always performs case-insensitive string comparisons using <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>."},{"content":"The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture.","pos":[322,468]},{"content":"The disadvantage is that the results are not consistent with the casing rules of all cultures.","pos":[469,563]},{"content":"For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.","pos":[570,678]},{"content":"In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).","pos":[679,800]},{"content":"The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).","pos":[801,910]},{"content":"According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture \"tr-TR\" (Turkish in Turkey).","pos":[911,1093]},{"content":"Using the <ph id=\"ph1\">`GetString`</ph> method with <ph id=\"ph2\">`ignoreCase`</ph> set to <ph id=\"ph3\">`true`</ph>, this comparison succeeds.","pos":[1094,1181],"source":" Using the `GetString` method with `ignoreCase` set to `true`, this comparison succeeds."}]},{"pos":[25046,25081],"content":"Name of the resource to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the resource to search for.","pos":[0,35]}]},{"pos":[25149,25228],"content":"Indicates whether the case of the case of the specified name should be ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the case of the case of the specified name should be ignored.","pos":[0,79]}]},{"pos":[25286,25350],"content":"The value of a resource, if the value is a <xref:System.String>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of a resource, if the value is a &lt;xref:System.String&gt;.","pos":[0,64],"source":"The value of a resource, if the value is a <xref:System.String>."}]},{"pos":[25519,25615],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[25726,25800],"content":"The resource specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a &lt;xref:System.String&gt;.","needQuote":true,"needEscape":true,"source":"The resource specified by <code>name</code> is not a <xref:System.String>."},{"pos":[25907,25946],"content":"The object has been closed or disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has been closed or disposed.","pos":[0,39]}]},{"pos":[26265,26360],"content":"Indicates the <bpt id=\"p1\">&lt;xref href=\"System.Resources.IResourceReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to read the resources.","needQuote":true,"needEscape":true,"source":"Indicates the <xref href=\"System.Resources.IResourceReader\"></xref> used to read the resources."},{"pos":[26511,26523],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26901,27078],"content":"Reads all the resources and stores them in a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicated in the <bpt id=\"p2\">&lt;xref href=\"System.Resources.ResourceSet.Table\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> property.","needQuote":true,"needEscape":true,"source":"Reads all the resources and stores them in a <xref href=\"System.Collections.Hashtable\"></xref> indicated in the <xref href=\"System.Resources.ResourceSet.Table\"></xref> property."},{"pos":[27764,27982],"content":"Returns an <xref:System.Collections.IEnumerator> object to avoid a race condition with <xref uid=\"langword_csharp_Dispose\" name=\"Dispose\" href=\"\"></xref>. This member is not intended to be used directly from your code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.Collections.IEnumerator&gt; object to avoid a race condition with <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Dispose\" name=\"Dispose\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,154],"source":"Returns an <xref:System.Collections.IEnumerator> object to avoid a race condition with <xref uid=\"langword_csharp_Dispose\" name=\"Dispose\" href=\"\"></xref>."},{"content":"This member is not intended to be used directly from your code.","pos":[155,218]}]},{"pos":[28160,28247],"content":"An enumerator for the current <bpt id=\"p1\">&lt;xref href=\"System.Resources.ResourceSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An enumerator for the current <xref href=\"System.Resources.ResourceSet\"></xref> object."},{"pos":[28665,28753],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which the resources are stored.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Hashtable\"></xref> in which the resources are stored."},{"pos":[28895,28907],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Resources.ResourceSet\n  id: ResourceSet\n  children:\n  - System.Resources.ResourceSet.#ctor\n  - System.Resources.ResourceSet.#ctor(System.IO.Stream)\n  - System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)\n  - System.Resources.ResourceSet.#ctor(System.String)\n  - System.Resources.ResourceSet.Close\n  - System.Resources.ResourceSet.Dispose\n  - System.Resources.ResourceSet.Dispose(System.Boolean)\n  - System.Resources.ResourceSet.GetDefaultReader\n  - System.Resources.ResourceSet.GetDefaultWriter\n  - System.Resources.ResourceSet.GetEnumerator\n  - System.Resources.ResourceSet.GetObject(System.String)\n  - System.Resources.ResourceSet.GetObject(System.String,System.Boolean)\n  - System.Resources.ResourceSet.GetString(System.String)\n  - System.Resources.ResourceSet.GetString(System.String,System.Boolean)\n  - System.Resources.ResourceSet.Reader\n  - System.Resources.ResourceSet.ReadResources\n  - System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator\n  - System.Resources.ResourceSet.Table\n  langs:\n  - csharp\n  name: ResourceSet\n  nameWithType: ResourceSet\n  fullName: System.Resources.ResourceSet\n  type: Class\n  summary: \"Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.  \\n  \\n **Security Note**: Calling methods in this class with untrusted data is a security risk. Call the methods in the class only with trusted data. For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).\"\n  remarks: \"The ResourceSet class enumerates over an <xref:System.Resources.IResourceReader>, loading every name and value, and storing them in a <xref:System.Collections.Hashtable>. A custom <xref:System.Resources.IResourceReader> can be used.  \\n  \\n You can instantiate a ResourceSet object that represents the resources of a specific culture by calling the <xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName> method.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ResourceSet : IDisposable, System.Collections.IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.#ctor\n  id: '#ctor'\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: ResourceSet()\n  nameWithType: ResourceSet.ResourceSet()\n  fullName: System.Resources.ResourceSet.ResourceSet()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Initializes a new instance of the <xref href=\"System.Resources.ResourceSet\"></xref> class with default properties.\n  syntax:\n    content: protected ResourceSet ();\n    parameters: []\n  overload: System.Resources.ResourceSet.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: ResourceSet(Stream)\n  nameWithType: ResourceSet.ResourceSet(Stream)\n  fullName: System.Resources.ResourceSet.ResourceSet(Stream)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Creates a new instance of the <xref href=\"System.Resources.ResourceSet\"></xref> class using the system default <xref href=\"System.Resources.ResourceReader\"></xref> that reads resources from the given stream.\n  syntax:\n    content: public ResourceSet (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The <xref:System.IO.Stream> of resources to be read. The stream should refer to an existing resources file.\n  overload: System.Resources.ResourceSet.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>stream</code> is not readable.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>stream</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)\n  id: '#ctor(System.Resources.IResourceReader)'\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: ResourceSet(IResourceReader)\n  nameWithType: ResourceSet.ResourceSet(IResourceReader)\n  fullName: System.Resources.ResourceSet.ResourceSet(IResourceReader)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Creates a new instance of the <xref href=\"System.Resources.ResourceSet\"></xref> class using the specified resource reader.\n  remarks: You can use this constructor to support custom resource formats using a user-provided <xref:System.Resources.IResourceReader>.\n  syntax:\n    content: public ResourceSet (System.Resources.IResourceReader reader);\n    parameters:\n    - id: reader\n      type: System.Resources.IResourceReader\n      description: The reader that will be used.\n  overload: System.Resources.ResourceSet.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>reader</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: ResourceSet(String)\n  nameWithType: ResourceSet.ResourceSet(String)\n  fullName: System.Resources.ResourceSet.ResourceSet(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Creates a new instance of the <xref href=\"System.Resources.ResourceSet\"></xref> class using the system default <xref href=\"System.Resources.ResourceReader\"></xref> that opens and reads resources from the given file.\n  remarks: ''\n  example:\n  - \"The following code example defines a new instance of the <xref:System.Resources.ResourceSet> class for a specific file, iterates through the resources used by that file, and displays their contents to the console.  \\n  \\n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_2_1.cpp)]\\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_2_1.cs)]\\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_2_1.vb)]\"\n  syntax:\n    content: public ResourceSet (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: Resource file to read.\n  overload: System.Resources.ResourceSet.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>fileName</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.Close\n  id: Close\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: ResourceSet.Close()\n  fullName: System.Resources.ResourceSet.Close()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Closes and releases any resources used by this <xref href=\"System.Resources.ResourceSet\"></xref>.\n  remarks: \"All calls to methods on the <xref:System.Resources.ResourceSet> after a call to this method might fail.  \\n  \\n Close can be safely called multiple times.  \\n  \\n> [!NOTE]\\n>  The current implementation of Close calls <xref:System.Resources.ResourceSet.Dispose%2A> (`true`).\"\n  example:\n  - \"The following code example uses the Close method to release all resources used by the calling <xref:System.Resources.ResourceSet> instance.  \\n  \\n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_15_1.cpp)]\\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_15_1.cs)]\\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_15_1.vb)]\"\n  syntax:\n    content: public virtual void Close ();\n    parameters: []\n  overload: System.Resources.ResourceSet.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.Dispose\n  id: Dispose\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ResourceSet.Dispose()\n  fullName: System.Resources.ResourceSet.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Disposes of the resources (other than memory) used by the current instance of <xref href=\"System.Resources.ResourceSet\"></xref>.\n  remarks: \"Call <xref:System.Resources.ResourceSet.Dispose%2A> when you are finished using the <xref:System.Resources.ResourceSet>. The <xref:System.Resources.ResourceSet.Dispose%2A> method leaves the <xref:System.Resources.ResourceSet> in an unusable state. After calling <xref:System.Resources.ResourceSet.Dispose%2A>, you must release all references to the <xref:System.Resources.ResourceSet> so the memory it was occupying can be reclaimed by garbage collection.  \\n  \\n> [!NOTE]\\n>  The current method is the implementation of <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>. This implementation calls <xref:System.Resources.ResourceSet.Dispose%2A> (`true`).\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Resources.ResourceSet.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ResourceSet.Dispose(Boolean)\n  fullName: System.Resources.ResourceSet.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Releases resources (other than memory) associated with the current instance, closing internal managed objects if requested.\n  remarks: If the `dispose` parameter is `true`, the current method frees all the resources associated with it as well as with all objects associated with it. If `dispose` is `false`, the current method frees only the resources allocated to it, and ignores any objects associated with it.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: Indicates whether the objects contained in the current instance should be explicitly closed.\n  overload: System.Resources.ResourceSet.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.GetDefaultReader\n  id: GetDefaultReader\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: GetDefaultReader()\n  nameWithType: ResourceSet.GetDefaultReader()\n  fullName: System.Resources.ResourceSet.GetDefaultReader()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Returns the preferred resource reader class for this kind of <xref href=\"System.Resources.ResourceSet\"></xref>.\n  syntax:\n    content: public virtual Type GetDefaultReader ();\n    parameters: []\n    return:\n      type: System.Type\n      description: Returns the <xref:System.Type> for the preferred resource reader for this kind of <xref href=\"System.Resources.ResourceSet\"></xref>.\n  overload: System.Resources.ResourceSet.GetDefaultReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.GetDefaultWriter\n  id: GetDefaultWriter\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: GetDefaultWriter()\n  nameWithType: ResourceSet.GetDefaultWriter()\n  fullName: System.Resources.ResourceSet.GetDefaultWriter()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Returns the preferred resource writer class for this kind of <xref href=\"System.Resources.ResourceSet\"></xref>.\n  syntax:\n    content: public virtual Type GetDefaultWriter ();\n    parameters: []\n    return:\n      type: System.Type\n      description: Returns the <xref:System.Type> for the preferred resource writer for this kind of <xref href=\"System.Resources.ResourceSet\"></xref>.\n  overload: System.Resources.ResourceSet.GetDefaultWriter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.GetEnumerator\n  id: GetEnumerator\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ResourceSet.GetEnumerator()\n  fullName: System.Resources.ResourceSet.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Returns an <xref:System.Collections.IDictionaryEnumerator> that can iterate through the <xref href=\"System.Resources.ResourceSet\"></xref>.\n  remarks: \"Enumerators only allow reading the data in the collection. Enumerators cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> will return the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n You can use the <xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName> property to access the value stored in the current element. Use the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property to access the key of the current element. Use the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property to access the value of the current element.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Resources.ResourceSet>`rs` for the file `items.resources`. Next, the GetEnumerator method is used to create an <xref:System.Collections.IDictionaryEnumerator> for `rs`. The <xref:System.Collections.IDictionaryEnumerator> iterates through `rs` and displays the contents to the console.  \\n  \\n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_5_1.cpp)]\\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_5_1.cs)]\\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_5_1.vb)]\"\n  syntax:\n    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref:System.Collections.IDictionaryEnumerator> for this <xref href=\"System.Resources.ResourceSet\"></xref>.\n  overload: System.Resources.ResourceSet.GetEnumerator*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The resource set has been closed or disposed.\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.GetObject(System.String)\n  id: GetObject(System.String)\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: GetObject(String)\n  nameWithType: ResourceSet.GetObject(String)\n  fullName: System.Resources.ResourceSet.GetObject(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Searches for a resource object with the specified name.\n  remarks: The name of the resource object is case sensitive. For a case-insensitive search, use <xref:System.Resources.ResourceSet.GetObject%2A>.\n  syntax:\n    content: public virtual object GetObject (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Case-sensitive name of the resource to search for.\n    return:\n      type: System.Object\n      description: The requested resource.\n  overload: System.Resources.ResourceSet.GetObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has been closed or disposed.\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.GetObject(System.String,System.Boolean)\n  id: GetObject(System.String,System.Boolean)\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: GetObject(String,Boolean)\n  nameWithType: ResourceSet.GetObject(String,Boolean)\n  fullName: System.Resources.ResourceSet.GetObject(String,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Searches for a resource object with the specified name in a case-insensitive manner, if requested.\n  remarks: \"If the value of the `ignoreCase` parameter is `true`, a resource with the name \\\"Resource\\\" is equivalent to the resource with the name \\\"resource\\\". Note, however, that this method always performs case-insensitive string comparisons using <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>. The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture. The disadvantage is that the results are not consistent with the casing rules of all cultures.  \\n  \\n For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot. In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131). The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130). According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture \\\"tr-TR\\\" (Turkish in Turkey). Using the `GetObject` method with `ignoreCase` set to `true`, this comparison succeeds.\"\n  syntax:\n    content: public virtual object GetObject (string name, bool ignoreCase);\n    parameters:\n    - id: name\n      type: System.String\n      description: Name of the resource to search for.\n    - id: ignoreCase\n      type: System.Boolean\n      description: Indicates whether the case of the specified name should be ignored.\n    return:\n      type: System.Object\n      description: The requested resource.\n  overload: System.Resources.ResourceSet.GetObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has been closed or disposed.\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.GetString(System.String)\n  id: GetString(System.String)\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: GetString(String)\n  nameWithType: ResourceSet.GetString(String)\n  fullName: System.Resources.ResourceSet.GetString(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Searches for a <xref:System.String> resource with the specified name.\n  syntax:\n    content: public virtual string GetString (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Name of the resource to search for.\n    return:\n      type: System.String\n      description: The value of a resource, if the value is a <xref:System.String>.\n  overload: System.Resources.ResourceSet.GetString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The resource specified by <code>name</code> is not a <xref:System.String>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has been closed or disposed.\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.GetString(System.String,System.Boolean)\n  id: GetString(System.String,System.Boolean)\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: GetString(String,Boolean)\n  nameWithType: ResourceSet.GetString(String,Boolean)\n  fullName: System.Resources.ResourceSet.GetString(String,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Searches for a <xref:System.String> resource with the specified name in a case-insensitive manner, if requested.\n  remarks: \"If the value of the `ignoreCase` parameter is `true`, a resource with the name \\\"Resource\\\" is equivalent to the resource with the name \\\"resource\\\". Note, however, that this method always performs case-insensitive string comparisons using <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>. The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture. The disadvantage is that the results are not consistent with the casing rules of all cultures.  \\n  \\n For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot. In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131). The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130). According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture \\\"tr-TR\\\" (Turkish in Turkey). Using the `GetString` method with `ignoreCase` set to `true`, this comparison succeeds.\"\n  syntax:\n    content: public virtual string GetString (string name, bool ignoreCase);\n    parameters:\n    - id: name\n      type: System.String\n      description: Name of the resource to search for.\n    - id: ignoreCase\n      type: System.Boolean\n      description: Indicates whether the case of the case of the specified name should be ignored.\n    return:\n      type: System.String\n      description: The value of a resource, if the value is a <xref:System.String>.\n  overload: System.Resources.ResourceSet.GetString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The resource specified by <code>name</code> is not a <xref:System.String>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has been closed or disposed.\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.Reader\n  id: Reader\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: Reader\n  nameWithType: ResourceSet.Reader\n  fullName: System.Resources.ResourceSet.Reader\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Indicates the <xref href=\"System.Resources.IResourceReader\"></xref> used to read the resources.\n  syntax:\n    content: protected System.Resources.IResourceReader Reader;\n    return:\n      type: System.Resources.IResourceReader\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.ReadResources\n  id: ReadResources\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: ReadResources()\n  nameWithType: ResourceSet.ReadResources()\n  fullName: System.Resources.ResourceSet.ReadResources()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Reads all the resources and stores them in a <xref href=\"System.Collections.Hashtable\"></xref> indicated in the <xref href=\"System.Resources.ResourceSet.Table\"></xref> property.\n  syntax:\n    content: protected virtual void ReadResources ();\n    parameters: []\n  overload: System.Resources.ResourceSet.ReadResources*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Resources.ResourceSet.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: Returns an <xref:System.Collections.IEnumerator> object to avoid a race condition with <xref uid=\"langword_csharp_Dispose\" name=\"Dispose\" href=\"\"></xref>. This member is not intended to be used directly from your code.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator for the current <xref href=\"System.Resources.ResourceSet\"></xref> object.\n  overload: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Resources.ResourceSet.Table\n  id: Table\n  parent: System.Resources.ResourceSet\n  langs:\n  - csharp\n  name: Table\n  nameWithType: ResourceSet.Table\n  fullName: System.Resources.ResourceSet.Table\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Resources\n  summary: The <xref href=\"System.Collections.Hashtable\"></xref> in which the resources are stored.\n  syntax:\n    content: protected System.Collections.Hashtable Table;\n    return:\n      type: System.Collections.Hashtable\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Resources.ResourceSet.#ctor\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: ResourceSet()\n  nameWithType: ResourceSet.ResourceSet()\n  fullName: System.Resources.ResourceSet.ResourceSet()\n- uid: System.Resources.ResourceSet.#ctor(System.IO.Stream)\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: ResourceSet(Stream)\n  nameWithType: ResourceSet.ResourceSet(Stream)\n  fullName: System.Resources.ResourceSet.ResourceSet(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: ResourceSet(IResourceReader)\n  nameWithType: ResourceSet.ResourceSet(IResourceReader)\n  fullName: System.Resources.ResourceSet.ResourceSet(IResourceReader)\n- uid: System.Resources.IResourceReader\n  parent: System.Resources\n  isExternal: false\n  name: IResourceReader\n  nameWithType: IResourceReader\n  fullName: System.Resources.IResourceReader\n- uid: System.Resources.ResourceSet.#ctor(System.String)\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: ResourceSet(String)\n  nameWithType: ResourceSet.ResourceSet(String)\n  fullName: System.Resources.ResourceSet.ResourceSet(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Resources.ResourceSet.Close\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: Close()\n  nameWithType: ResourceSet.Close()\n  fullName: System.Resources.ResourceSet.Close()\n- uid: System.Resources.ResourceSet.Dispose\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: Dispose()\n  nameWithType: ResourceSet.Dispose()\n  fullName: System.Resources.ResourceSet.Dispose()\n- uid: System.Resources.ResourceSet.Dispose(System.Boolean)\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ResourceSet.Dispose(Boolean)\n  fullName: System.Resources.ResourceSet.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Resources.ResourceSet.GetDefaultReader\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetDefaultReader()\n  nameWithType: ResourceSet.GetDefaultReader()\n  fullName: System.Resources.ResourceSet.GetDefaultReader()\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Resources.ResourceSet.GetDefaultWriter\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetDefaultWriter()\n  nameWithType: ResourceSet.GetDefaultWriter()\n  fullName: System.Resources.ResourceSet.GetDefaultWriter()\n- uid: System.Resources.ResourceSet.GetEnumerator\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ResourceSet.GetEnumerator()\n  fullName: System.Resources.ResourceSet.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Resources.ResourceSet.GetObject(System.String)\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetObject(String)\n  nameWithType: ResourceSet.GetObject(String)\n  fullName: System.Resources.ResourceSet.GetObject(String)\n- uid: System.Resources.ResourceSet.GetObject(System.String,System.Boolean)\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetObject(String,Boolean)\n  nameWithType: ResourceSet.GetObject(String,Boolean)\n  fullName: System.Resources.ResourceSet.GetObject(String,Boolean)\n- uid: System.Resources.ResourceSet.GetString(System.String)\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetString(String)\n  nameWithType: ResourceSet.GetString(String)\n  fullName: System.Resources.ResourceSet.GetString(String)\n- uid: System.Resources.ResourceSet.GetString(System.String,System.Boolean)\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetString(String,Boolean)\n  nameWithType: ResourceSet.GetString(String,Boolean)\n  fullName: System.Resources.ResourceSet.GetString(String,Boolean)\n- uid: System.Resources.ResourceSet.Reader\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: Reader\n  nameWithType: ResourceSet.Reader\n  fullName: System.Resources.ResourceSet.Reader\n- uid: System.Resources.ResourceSet.ReadResources\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: ReadResources()\n  nameWithType: ResourceSet.ReadResources()\n  fullName: System.Resources.ResourceSet.ReadResources()\n- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Resources.ResourceSet.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Resources.ResourceSet.Table\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: Table\n  nameWithType: ResourceSet.Table\n  fullName: System.Resources.ResourceSet.Table\n- uid: System.Collections.Hashtable\n  parent: System.Collections\n  isExternal: false\n  name: Hashtable\n  nameWithType: Hashtable\n  fullName: System.Collections.Hashtable\n- uid: System.Resources.ResourceSet.#ctor*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: ResourceSet\n  nameWithType: ResourceSet.ResourceSet\n- uid: System.Resources.ResourceSet.Close*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: Close\n  nameWithType: ResourceSet.Close\n- uid: System.Resources.ResourceSet.Dispose*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: Dispose\n  nameWithType: ResourceSet.Dispose\n- uid: System.Resources.ResourceSet.GetDefaultReader*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetDefaultReader\n  nameWithType: ResourceSet.GetDefaultReader\n- uid: System.Resources.ResourceSet.GetDefaultWriter*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetDefaultWriter\n  nameWithType: ResourceSet.GetDefaultWriter\n- uid: System.Resources.ResourceSet.GetEnumerator*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ResourceSet.GetEnumerator\n- uid: System.Resources.ResourceSet.GetObject*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetObject\n  nameWithType: ResourceSet.GetObject\n- uid: System.Resources.ResourceSet.GetString*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: GetString\n  nameWithType: ResourceSet.GetString\n- uid: System.Resources.ResourceSet.ReadResources*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: ReadResources\n  nameWithType: ResourceSet.ReadResources\n- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Resources.ResourceSet\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator\n"}