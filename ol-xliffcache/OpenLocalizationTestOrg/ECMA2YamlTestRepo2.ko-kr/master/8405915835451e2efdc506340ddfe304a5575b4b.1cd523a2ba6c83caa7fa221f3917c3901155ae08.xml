{"nodes":[{"pos":[422,568],"content":"Represents a class that is used as an argument to set the state of a <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Represents a class that is used as an argument to set the state of a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>."},{"pos":[581,2071],"content":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application. This enables the host application to override the current state of a state machine. This can be accomplished by enqueuing an instance of the SetStateEventArgs class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity.SetStateQueueName?displayProperty=fullName>.       A simpler way to accomplish this is to use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method in the <xref:System.Workflow.Activities.StateMachineWorkflowInstance> class.       You can use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example.      ```   public void SetState(string targetStateName)   {         if (targetStateName == null)         {               throw new ArgumentNullException(\"targetStateName\");         }         SetStateEventArgs args1 = new SetStateEventArgs(targetStateName);         this.WorkflowInstance.EnqueueItemOnIdle(\"SetStateQueue\", args1, null, null);   }   ```       The state machine workflow uses a special queue called `SetStateQueue` to listen to these special events.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       The &lt;xref:System.Workflow.Activities.StateMachineWorkflowActivity&gt; allows for setting the state from the host application.","pos":[0,210],"source":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application."},{"content":"This enables the host application to override the current state of a state machine.","pos":[211,294]},{"content":"This can be accomplished by enqueuing an instance of the SetStateEventArgs class to the WorkflowQueue named by the constant &lt;xref:System.Workflow.Activities.StateMachineWorkflowActivity.SetStateQueueName?displayProperty=fullName&gt;.","pos":[295,525],"source":" This can be accomplished by enqueuing an instance of the SetStateEventArgs class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity.SetStateQueueName?displayProperty=fullName>."},{"content":"A simpler way to accomplish this is to use the &lt;xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A&gt; method in the &lt;xref:System.Workflow.Activities.StateMachineWorkflowInstance&gt; class.","pos":[532,737],"source":"       A simpler way to accomplish this is to use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method in the <xref:System.Workflow.Activities.StateMachineWorkflowInstance> class."},{"content":"You can use the &lt;xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A&gt; method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example.","pos":[744,1001],"source":"       You can use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example."},{"content":"<ph id=\"ph1\">```   public void SetState(string targetStateName)   {         if (targetStateName == null)         {               throw new ArgumentNullException(\"targetStateName\");         }         SetStateEventArgs args1 = new SetStateEventArgs(targetStateName);         this.WorkflowInstance.EnqueueItemOnIdle(\"SetStateQueue\", args1, null, null);   }   ```</ph>       The state machine workflow uses a special queue called <ph id=\"ph2\">`SetStateQueue`</ph> to listen to these special events.","pos":[1007,1465],"source":"```   public void SetState(string targetStateName)   {         if (targetStateName == null)         {               throw new ArgumentNullException(\"targetStateName\");         }         SetStateEventArgs args1 = new SetStateEventArgs(targetStateName);         this.WorkflowInstance.EnqueueItemOnIdle(\"SetStateQueue\", args1, null, null);   }   ```       The state machine workflow uses a special queue called `SetStateQueue` to listen to these special events."}]},{"pos":[2907,3013],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.SetStateEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.SetStateEventArgs\"></xref> class."},{"pos":[3175,3261],"content":"The state to set the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to.","needQuote":true,"needEscape":true,"source":"The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to."},{"pos":[3791,3882],"content":"Gets the state to set the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to.","needQuote":true,"needEscape":true,"source":"Gets the state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to."},{"pos":[4002,4088],"content":"The state to set the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to.","needQuote":true,"needEscape":true,"source":"The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.SetStateEventArgs\n  id: SetStateEventArgs\n  children:\n  - System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)\n  - System.Workflow.Activities.SetStateEventArgs.TargetStateName\n  langs:\n  - csharp\n  name: SetStateEventArgs\n  nameWithType: SetStateEventArgs\n  fullName: System.Workflow.Activities.SetStateEventArgs\n  type: Class\n  summary: Represents a class that is used as an argument to set the state of a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application. This enables the host application to override the current state of a state machine. This can be accomplished by enqueuing an instance of the SetStateEventArgs class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity.SetStateQueueName?displayProperty=fullName>.  \\n  \\n A simpler way to accomplish this is to use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method in the <xref:System.Workflow.Activities.StateMachineWorkflowInstance> class.  \\n  \\n You can use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example.  \\n  \\n```  \\npublic void SetState(string targetStateName)  \\n{  \\n      if (targetStateName == null)  \\n      {  \\n            throw new ArgumentNullException(\\\"targetStateName\\\");  \\n      }  \\n      SetStateEventArgs args1 = new SetStateEventArgs(targetStateName);  \\n      this.WorkflowInstance.EnqueueItemOnIdle(\\\"SetStateQueue\\\", args1, null, null);  \\n}  \\n```  \\n  \\n The state machine workflow uses a special queue called `SetStateQueue` to listen to these special events.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class SetStateEventArgs : EventArgs\n  inheritance:\n  - System.EventArgs\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.Activities.SetStateEventArgs\n  langs:\n  - csharp\n  name: SetStateEventArgs(String)\n  nameWithType: SetStateEventArgs.SetStateEventArgs(String)\n  fullName: System.Workflow.Activities.SetStateEventArgs.SetStateEventArgs(String)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.SetStateEventArgs\"></xref> class.\n  syntax:\n    content: public SetStateEventArgs (string targetStateName);\n    parameters:\n    - id: targetStateName\n      type: System.String\n      description: The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.\n  overload: System.Workflow.Activities.SetStateEventArgs.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName\n  id: TargetStateName\n  parent: System.Workflow.Activities.SetStateEventArgs\n  langs:\n  - csharp\n  name: TargetStateName\n  nameWithType: SetStateEventArgs.TargetStateName\n  fullName: System.Workflow.Activities.SetStateEventArgs.TargetStateName\n  type: Property\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Gets the state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.\n  syntax:\n    content: public string TargetStateName { get; }\n    return:\n      type: System.String\n      description: The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.\n  overload: System.Workflow.Activities.SetStateEventArgs.TargetStateName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.EventArgs\n  isExternal: false\n  name: System.EventArgs\n- uid: System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)\n  parent: System.Workflow.Activities.SetStateEventArgs\n  isExternal: false\n  name: SetStateEventArgs(String)\n  nameWithType: SetStateEventArgs.SetStateEventArgs(String)\n  fullName: System.Workflow.Activities.SetStateEventArgs.SetStateEventArgs(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName\n  parent: System.Workflow.Activities.SetStateEventArgs\n  isExternal: false\n  name: TargetStateName\n  nameWithType: SetStateEventArgs.TargetStateName\n  fullName: System.Workflow.Activities.SetStateEventArgs.TargetStateName\n- uid: System.Workflow.Activities.SetStateEventArgs.#ctor*\n  parent: System.Workflow.Activities.SetStateEventArgs\n  isExternal: false\n  name: SetStateEventArgs\n  nameWithType: SetStateEventArgs.SetStateEventArgs\n- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName*\n  parent: System.Workflow.Activities.SetStateEventArgs\n  isExternal: false\n  name: TargetStateName\n  nameWithType: SetStateEventArgs.TargetStateName\n"}