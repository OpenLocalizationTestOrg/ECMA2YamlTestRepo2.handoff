{"nodes":[{"pos":[490,563],"content":"Contains information about a speech synthesis voice installed in Windows.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains information about a speech synthesis voice installed in Windows.","pos":[0,73]}]},{"pos":[576,1221],"content":"Use this class to get information about an installed voice, including its culture, name, gender, age, and whether it is enabled.       To perform text-to-speech using the language specified in the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this class to get information about an installed voice, including its culture, name, gender, age, and whether it is enabled.       To perform text-to-speech using the language specified in the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[0,633],"nodes":[{"content":"Use this class to get information about an installed voice, including its culture, name, gender, age, and whether it is enabled.","pos":[0,128]},{"content":"To perform text-to-speech using the language specified in the &lt;xref:System.Speech.Synthesis.PromptBuilder.Culture%2A&gt; property, a speech synthesis engine that supports that language-country code must be installed.","pos":[135,348],"source":"       To perform text-to-speech using the language specified in the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis engine that supports that language-country code must be installed."},{"content":"The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US.","pos":[349,479]},{"content":"English (United States)      -   zh-CN.","pos":[480,519]},{"content":"Chinese (China)      -   zh-TW.","pos":[520,551]},{"content":"Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[552,633]}]}]},{"pos":[4251,4311],"content":"Gets or sets whether a voice can be used to generate speech.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets whether a voice can be used to generate speech.","pos":[0,60]}]},{"pos":[4323,4862],"content":"The value of the Enabled property is `true` by default. When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its Enabled property to `false`. An application cannot select a voice whose Enabled property is `false`. Typically, applications will not set a voice’s Enabled property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of the Enabled property is <ph id=\"ph1\">`true`</ph> by default.","pos":[0,55],"source":"The value of the Enabled property is `true` by default."},{"content":"When an application calls &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt;, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.","pos":[56,254],"source":" When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria."},{"content":"For any voice that fails verification, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; sets its Enabled property to <ph id=\"ph1\">`false`</ph>.","pos":[255,402],"source":" For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its Enabled property to `false`."},{"content":"An application cannot select a voice whose Enabled property is <ph id=\"ph1\">`false`</ph>.","pos":[403,474],"source":" An application cannot select a voice whose Enabled property is `false`."},{"content":"Typically, applications will not set a voice’s Enabled property.","pos":[475,539]}]},{"pos":[4978,5096],"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_bool\" name=\"bool\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the enabled state of the voice.","needQuote":true,"needEscape":true,"source":"Returns a <xref uid=\"langword_csharp_bool\" name=\"bool\" href=\"\"></xref> that represents the enabled state of the voice."},{"pos":[5592,5796],"content":"Determines if a given object is an instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.InstalledVoice\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and equal to the current instance of <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.InstalledVoice\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines if a given object is an instance of <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref> and equal to the current instance of <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref>."},{"pos":[5808,5956],"content":"The method returns false if the &lt;xref:System.Object&gt; provided by the <ph id=\"ph1\">`obj`</ph> argument cannot be cast to &lt;xref:System.Speech.Synthesis.InstalledVoice&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The method returns false if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.Synthesis.InstalledVoice>."},{"pos":[6097,6202],"content":"An object that can be cast to an instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.InstalledVoice\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object that can be cast to an instance of <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref>."},{"pos":[6261,6562],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current instance of <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.InstalledVoice\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and that obtained from the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p3\">&lt;/code&gt;</ept> argument are equal, otherwise returns <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance of <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7034,7086],"content":"Provides a hash code for an <ph id=\"ph1\">`InstalledVoice`</ph> object.","needQuote":true,"needEscape":true,"source":"Provides a hash code for an `InstalledVoice` object."},{"pos":[7221,7316],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.InstalledVoice\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref> object."},{"pos":[7779,7850],"content":"Gets information about a voice, such as culture, name, gender, and age.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets information about a voice, such as culture, name, gender, and age.","pos":[0,71]}]},{"pos":[8011,8052],"content":"The information about an installed voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"The information about an installed voice.","pos":[0,41]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Synthesis.InstalledVoice\n  id: InstalledVoice\n  children:\n  - System.Speech.Synthesis.InstalledVoice.Enabled\n  - System.Speech.Synthesis.InstalledVoice.Equals(System.Object)\n  - System.Speech.Synthesis.InstalledVoice.GetHashCode\n  - System.Speech.Synthesis.InstalledVoice.VoiceInfo\n  langs:\n  - csharp\n  name: InstalledVoice\n  nameWithType: InstalledVoice\n  fullName: System.Speech.Synthesis.InstalledVoice\n  type: Class\n  summary: Contains information about a speech synthesis voice installed in Windows.\n  remarks: \"Use this class to get information about an installed voice, including its culture, name, gender, age, and whether it is enabled.  \\n  \\n To perform text-to-speech using the language specified in the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:  \\n  \\n-   en-US. English (United States)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\" are also permitted.\"\n  example:\n  - \"The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\nusing System.Speech.AudioFormat;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Output information about all of the installed voices.   \\n        Console.WriteLine(\\\"Installed voices -\\\");  \\n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \\n        {  \\n          VoiceInfo info = voice.VoiceInfo;  \\n          string AudioFormats = \\\"\\\";  \\n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \\n          {  \\n            AudioFormats += String.Format(\\\"{0}\\\\n\\\",  \\n            fmt.EncodingFormat.ToString());  \\n          }  \\n  \\n          Console.WriteLine(\\\" Name:          \\\" + info.Name);  \\n          Console.WriteLine(\\\" Culture:       \\\" + info.Culture);  \\n          Console.WriteLine(\\\" Age:           \\\" + info.Age);  \\n          Console.WriteLine(\\\" Gender:        \\\" + info.Gender);  \\n          Console.WriteLine(\\\" Description:   \\\" + info.Description);  \\n          Console.WriteLine(\\\" ID:            \\\" + info.Id);  \\n          Console.WriteLine(\\\" Enabled:       \\\" + voice.Enabled);  \\n          if (info.SupportedAudioFormats.Count != 0)  \\n          {  \\n            Console.WriteLine( \\\" Audio formats: \\\" + AudioFormats);  \\n          }  \\n          else  \\n          {  \\n            Console.WriteLine(\\\" No supported audio formats found\\\");  \\n          }  \\n  \\n          string AdditionalInfo = \\\"\\\";  \\n          foreach (string key in info.AdditionalInfo.Keys)  \\n          {  \\n            AdditionalInfo += String.Format(\\\"  {0}: {1}\\\\n\\\", key, info.AdditionalInfo[key]);  \\n          }  \\n  \\n          Console.WriteLine(\\\" Additional Info - \\\" + AdditionalInfo);  \\n          Console.WriteLine();  \\n        }  \\n      }  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"{VoiceInfo.Name} [{Enabled ? \"Enabled\" : \"Disabled\"}]\")]\n\n      public class InstalledVoice\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.InstalledVoice.Enabled\n  id: Enabled\n  parent: System.Speech.Synthesis.InstalledVoice\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: InstalledVoice.Enabled\n  fullName: System.Speech.Synthesis.InstalledVoice.Enabled\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets or sets whether a voice can be used to generate speech.\n  remarks: The value of the Enabled property is `true` by default. When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its Enabled property to `false`. An application cannot select a voice whose Enabled property is `false`. Typically, applications will not set a voice’s Enabled property.\n  syntax:\n    content: public bool Enabled { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns a <xref uid=\"langword_csharp_bool\" name=\"bool\" href=\"\"></xref> that represents the enabled state of the voice.\n  overload: System.Speech.Synthesis.InstalledVoice.Enabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.InstalledVoice.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Speech.Synthesis.InstalledVoice\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: InstalledVoice.Equals(Object)\n  fullName: System.Speech.Synthesis.InstalledVoice.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Determines if a given object is an instance of <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref> and equal to the current instance of <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref>.\n  remarks: The method returns false if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.Synthesis.InstalledVoice>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object that can be cast to an instance of <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref>.\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance of <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Speech.Synthesis.InstalledVoice.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.InstalledVoice.GetHashCode\n  id: GetHashCode\n  parent: System.Speech.Synthesis.InstalledVoice\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: InstalledVoice.GetHashCode()\n  fullName: System.Speech.Synthesis.InstalledVoice.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Provides a hash code for an `InstalledVoice` object.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Speech.Synthesis.InstalledVoice\"></xref> object.\n  overload: System.Speech.Synthesis.InstalledVoice.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.InstalledVoice.VoiceInfo\n  id: VoiceInfo\n  parent: System.Speech.Synthesis.InstalledVoice\n  langs:\n  - csharp\n  name: VoiceInfo\n  nameWithType: InstalledVoice.VoiceInfo\n  fullName: System.Speech.Synthesis.InstalledVoice.VoiceInfo\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets information about a voice, such as culture, name, gender, and age.\n  syntax:\n    content: public System.Speech.Synthesis.VoiceInfo VoiceInfo { get; }\n    return:\n      type: System.Speech.Synthesis.VoiceInfo\n      description: The information about an installed voice.\n  overload: System.Speech.Synthesis.InstalledVoice.VoiceInfo*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.Synthesis.InstalledVoice.Enabled\n  parent: System.Speech.Synthesis.InstalledVoice\n  isExternal: false\n  name: Enabled\n  nameWithType: InstalledVoice.Enabled\n  fullName: System.Speech.Synthesis.InstalledVoice.Enabled\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Speech.Synthesis.InstalledVoice.Equals(System.Object)\n  parent: System.Speech.Synthesis.InstalledVoice\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: InstalledVoice.Equals(Object)\n  fullName: System.Speech.Synthesis.InstalledVoice.Equals(Object)\n- uid: System.Speech.Synthesis.InstalledVoice.GetHashCode\n  parent: System.Speech.Synthesis.InstalledVoice\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: InstalledVoice.GetHashCode()\n  fullName: System.Speech.Synthesis.InstalledVoice.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Synthesis.InstalledVoice.VoiceInfo\n  parent: System.Speech.Synthesis.InstalledVoice\n  isExternal: false\n  name: VoiceInfo\n  nameWithType: InstalledVoice.VoiceInfo\n  fullName: System.Speech.Synthesis.InstalledVoice.VoiceInfo\n- uid: System.Speech.Synthesis.VoiceInfo\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceInfo\n  nameWithType: VoiceInfo\n  fullName: System.Speech.Synthesis.VoiceInfo\n- uid: System.Speech.Synthesis.InstalledVoice.Enabled*\n  parent: System.Speech.Synthesis.InstalledVoice\n  isExternal: false\n  name: Enabled\n  nameWithType: InstalledVoice.Enabled\n- uid: System.Speech.Synthesis.InstalledVoice.Equals*\n  parent: System.Speech.Synthesis.InstalledVoice\n  isExternal: false\n  name: Equals\n  nameWithType: InstalledVoice.Equals\n- uid: System.Speech.Synthesis.InstalledVoice.GetHashCode*\n  parent: System.Speech.Synthesis.InstalledVoice\n  isExternal: false\n  name: GetHashCode\n  nameWithType: InstalledVoice.GetHashCode\n- uid: System.Speech.Synthesis.InstalledVoice.VoiceInfo*\n  parent: System.Speech.Synthesis.InstalledVoice\n  isExternal: false\n  name: VoiceInfo\n  nameWithType: InstalledVoice.VoiceInfo\n"}