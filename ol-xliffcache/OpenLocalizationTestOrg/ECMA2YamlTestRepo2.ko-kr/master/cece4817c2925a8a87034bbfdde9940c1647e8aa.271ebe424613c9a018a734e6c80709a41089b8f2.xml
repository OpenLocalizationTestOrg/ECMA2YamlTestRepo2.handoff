{"nodes":[{"pos":[1747,1778],"content":"Use this class to write events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this class to write events.","pos":[0,31]}]},{"pos":[1791,2881],"content":"To consume events written using the <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A> and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods, the events must be defined in a manifest; events written using the <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A> method do not require a manifest.       Events can contain the following managed data types:      -   bool      -   Boolean      -   byte      -   char      -   decimal      -   double      -   float      -   Guid      -   int      -   IntPtr      -   long      -   sbyte      -   short      -   string      -   uint      -   UInt64       If an event in your manifest uses the `Boolean` in-type, you cannot write the data element using a `Boolean` data type in your managed code. The `Boolean` in-type in your manifest expects a 4-byte value, and a `Boolean` data type in managed code is 1-byte. Instead, you must use an `int` data type to write the value. If you want to log a `Boolean` value, use the UInt8 in-type in your manifest.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To consume events written using the &lt;xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A&gt; and &lt;xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A&gt; methods, the events must be defined in a manifest; events written using the &lt;xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A&gt; method do not require a manifest.","pos":[0,353],"source":"To consume events written using the <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A> and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods, the events must be defined in a manifest; events written using the <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A> method do not require a manifest."},{"content":"Events can contain the following managed data types:      -   bool      -   Boolean      -   byte      -   char      -   decimal      -   double      -   float      -   Guid      -   int      -   IntPtr      -   long      -   sbyte      -   short      -   string      -   uint      -   UInt64       If an event in your manifest uses the <ph id=\"ph1\">`Boolean`</ph> in-type, you cannot write the data element using a <ph id=\"ph2\">`Boolean`</ph> data type in your managed code.","pos":[360,799],"source":"       Events can contain the following managed data types:      -   bool      -   Boolean      -   byte      -   char      -   decimal      -   double      -   float      -   Guid      -   int      -   IntPtr      -   long      -   sbyte      -   short      -   string      -   uint      -   UInt64       If an event in your manifest uses the `Boolean` in-type, you cannot write the data element using a `Boolean` data type in your managed code."},{"content":"The <ph id=\"ph1\">`Boolean`</ph> in-type in your manifest expects a 4-byte value, and a <ph id=\"ph2\">`Boolean`</ph> data type in managed code is 1-byte.","pos":[800,915],"source":" The `Boolean` in-type in your manifest expects a 4-byte value, and a `Boolean` data type in managed code is 1-byte."},{"content":"Instead, you must use an <ph id=\"ph1\">`int`</ph> data type to write the value.","pos":[916,976],"source":" Instead, you must use an `int` data type to write the value."},{"content":"If you want to log a <ph id=\"ph1\">`Boolean`</ph> value, use the UInt8 in-type in your manifest.","pos":[977,1054],"source":" If you want to log a `Boolean` value, use the UInt8 in-type in your manifest."}]},{"pos":[3486,3589],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.EventProvider\"></xref> class."},{"pos":[3601,3741],"content":"Registers the provider. To remove the registration when finished, call the <xref:System.Diagnostics.Eventing.EventProvider.Close%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Registers the provider. To remove the registration when finished, call the <xref:System.Diagnostics.Eventing.EventProvider.Close%2A> method.","pos":[0,140],"nodes":[{"content":"Registers the provider.","pos":[0,23]},{"content":"To remove the registration when finished, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.Close%2A&gt; method.","pos":[24,140],"source":" To remove the registration when finished, call the <xref:System.Diagnostics.Eventing.EventProvider.Close%2A> method."}]}]},{"pos":[3889,3932],"content":"Guid that uniquely identifies the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid that uniquely identifies the provider.","pos":[0,43]}]},{"pos":[4122,4175],"content":"There is not enough memory to complete the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to complete the operation.","pos":[0,53]}]},{"pos":[4294,4399],"content":"The classes in the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> namespace work only on Windows Vista.","needQuote":true,"needEscape":true,"source":"The classes in the <xref href=\"System.Diagnostics.Eventing\"></xref> namespace work only on Windows Vista."},{"pos":[4494,4549],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">providerGuid</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter cannot be null.","needQuote":true,"needEscape":true,"source":"The <code>providerGuid</code> parameter cannot be null."},{"pos":[4668,4707],"content":"An error returned by the ETW subsystem.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error returned by the ETW subsystem.","pos":[0,39]}]},{"pos":[5083,5179],"content":"Removes the provider's registration from the ETW subsystem and releases all unmanaged resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the provider's registration from the ETW subsystem and releases all unmanaged resources.","pos":[0,96]}]},{"pos":[5191,5295],"content":"You should call this method when finished instead of waiting for the system to dispose of the resources.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You should call this method when finished instead of waiting for the system to dispose of the resources.","pos":[0,104]}]},{"pos":[5561,5600],"content":"An error returned by the ETW subsystem.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error returned by the ETW subsystem.","pos":[0,39]}]},{"pos":[6031,6085],"content":"Creates a unique activity identifier for the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a unique activity identifier for the provider.","pos":[0,54]}]},{"pos":[6097,6121],"content":"This is a static method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is a static method.","pos":[0,24]}]},{"pos":[6259,6422],"content":"A unique Guid that you use when calling the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId*> method to set the activity identifier for the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique Guid that you use when calling the &lt;xref:System.Diagnostics.Eventing.EventProvider.SetActivityId*&gt; method to set the activity identifier for the provider.","pos":[0,163],"source":"A unique Guid that you use when calling the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId*> method to set the activity identifier for the provider."}]},{"pos":[6897,7003],"content":"Releases the resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases the resources used by this <xref href=\"System.Diagnostics.Eventing.EventProvider\"></xref> object."},{"pos":[7588,7694],"content":"Releases the resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases the resources used by this <xref href=\"System.Diagnostics.Eventing.EventProvider\"></xref> object."},{"pos":[7849,7929],"content":"This parameter is ignored by this method since there are no unmanaged resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"This parameter is ignored by this method since there are no unmanaged resources.","pos":[0,80]}]},{"pos":[8400,8501],"content":"Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.","pos":[0,101]}]},{"pos":[9104,9163],"content":"Gets the last error associated with an event write failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the last error associated with an event write failure.","pos":[0,59]}]},{"pos":[9176,9478],"content":"The <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>, <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A>, and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods set this value if they fail to write the event.       This is a static method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>, <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A>, and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods set this value if they fail to write the event.       This is a static method.","pos":[0,300],"nodes":[{"content":"The &lt;xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A&gt;, &lt;xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A&gt;, and &lt;xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A&gt; methods set this value if they fail to write the event.","pos":[0,269],"source":"The <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>, <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A>, and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods set this value if they fail to write the event."},{"content":"This is a static method.","pos":[276,300]}]}]},{"pos":[9730,9793],"content":"Use the value to determine the cause of an event write failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the value to determine the cause of an event write failure.","pos":[0,63]}]},{"pos":[10284,10408],"content":"Determines whether any session enabled the provider, regardless of the level and keyword values used to enable the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether any session enabled the provider, regardless of the level and keyword values used to enable the provider.","pos":[0,124]}]},{"pos":[10420,10813],"content":"Typically, a provider does not call this method to determine whether the provider has been enabled by a session; the provider simply writes the event, and ETW determines whether the event is logged to the session. A provider may want to call this function if the provider needs to perform extra work to generate the event. In this case, calling this function first may save resources and time.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Typically, a provider does not call this method to determine whether the provider has been enabled by a session; the provider simply writes the event, and ETW determines whether the event is logged to the session. A provider may want to call this function if the provider needs to perform extra work to generate the event. In this case, calling this function first may save resources and time.","pos":[0,393],"nodes":[{"content":"Typically, a provider does not call this method to determine whether the provider has been enabled by a session; the provider simply writes the event, and ETW determines whether the event is logged to the session.","pos":[0,213]},{"content":"A provider may want to call this function if the provider needs to perform extra work to generate the event.","pos":[214,322]},{"content":"In this case, calling this function first may save resources and time.","pos":[323,393]}]}]},{"pos":[10940,11121],"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the provider is enabled to any session; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the provider is enabled to any session; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11681,11764],"content":"Determines whether any session is requesting the specified event from the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether any session is requesting the specified event from the provider.","pos":[0,83]}]},{"pos":[11776,12218],"content":"Typically, a provider does not call this method to determine whether a session requested the specified event; the provider simply writes the event, and ETW determines whether the event is logged to a session. A provider may want to call this function if the provider needs to perform extra work to generate the event. In this case, calling this function first to determine if a session requested the event or not, may save resources and time.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Typically, a provider does not call this method to determine whether a session requested the specified event; the provider simply writes the event, and ETW determines whether the event is logged to a session. A provider may want to call this function if the provider needs to perform extra work to generate the event. In this case, calling this function first to determine if a session requested the event or not, may save resources and time.","pos":[0,442],"nodes":[{"content":"Typically, a provider does not call this method to determine whether a session requested the specified event; the provider simply writes the event, and ETW determines whether the event is logged to a session.","pos":[0,208]},{"content":"A provider may want to call this function if the provider needs to perform extra work to generate the event.","pos":[209,317]},{"content":"In this case, calling this function first to determine if a session requested the event or not, may save resources and time.","pos":[318,442]}]}]},{"pos":[12368,12406],"content":"Level of detail included in the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Level of detail included in the event.","pos":[0,38]}]},{"pos":[12470,12602],"content":"Bit mask that specifies the event category. This mask should be the same keyword mask that is defined in the manifest for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Bit mask that specifies the event category. This mask should be the same keyword mask that is defined in the manifest for the event.","pos":[0,132],"nodes":[{"content":"Bit mask that specifies the event category.","pos":[0,43]},{"content":"This mask should be the same keyword mask that is defined in the manifest for the event.","pos":[44,132]}]}]},{"pos":[12661,12849],"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if any session is requesting the specified event; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if any session is requesting the specified event; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13387,13505],"content":"Sets the current activity identifier used by the <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent*> methods.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the current activity identifier used by the &lt;xref:System.Diagnostics.Eventing.EventProvider.WriteEvent*&gt; methods.","pos":[0,118],"source":"Sets the current activity identifier used by the <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent*> methods."}]},{"pos":[13518,13946],"content":"The identifier is stored in the thread context.       Note that in version 3.5 of the .NET framework, you had to set the `id` parameter of this method and the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property value to the same identifier value. However, in version 4.0 of the framework, the SetActivityId method automatically sets the correlation activity identifier for you.       This is a static method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The identifier is stored in the thread context.","pos":[0,47]},{"content":"Note that in version 3.5 of the .NET framework, you had to set the <ph id=\"ph1\">`id`</ph> parameter of this method and the &lt;xref:System.Diagnostics.CorrelationManager.ActivityId%2A&gt; property value to the same identifier value.","pos":[54,262],"source":"       Note that in version 3.5 of the .NET framework, you had to set the `id` parameter of this method and the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property value to the same identifier value."},{"content":"However, in version 4.0 of the framework, the SetActivityId method automatically sets the correlation activity identifier for you.","pos":[263,393]},{"content":"This is a static method.","pos":[400,424]}]},{"pos":[14091,14211],"content":"A unique activity identifier that the <xref:System.Diagnostics.Eventing.EventProvider.CreateActivityId*> method returns.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique activity identifier that the &lt;xref:System.Diagnostics.Eventing.EventProvider.CreateActivityId*&gt; method returns.","pos":[0,120],"source":"A unique activity identifier that the <xref:System.Diagnostics.Eventing.EventProvider.CreateActivityId*> method returns."}]},{"pos":[14894,14962],"content":"Writes an event. The event data is specified as an array of objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an event. The event data is specified as an array of objects.","pos":[0,68],"nodes":[{"content":"Writes an event.","pos":[0,16]},{"content":"The event data is specified as an array of objects.","pos":[17,68]}]}]},{"pos":[14975,15493],"content":"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.       If the object type is not supported, the method writes the value of the object's <xref:System.Object.ToString%2A?displayProperty=fullName> method in the payload. For a list of supported object types, see the Remarks for the <xref:System.Diagnostics.Eventing.EventProvider> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.       If the object type is not supported, the method writes the value of the object's <xref:System.Object.ToString%2A?displayProperty=fullName> method in the payload. For a list of supported object types, see the Remarks for the <xref:System.Diagnostics.Eventing.EventProvider> class.","pos":[0,516],"nodes":[{"content":"If you call the &lt;xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A&gt; method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.","pos":[0,230],"source":"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event."},{"content":"If the object type is not supported, the method writes the value of the object's &lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt; method in the payload.","pos":[237,398],"source":"       If the object type is not supported, the method writes the value of the object's <xref:System.Object.ToString%2A?displayProperty=fullName> method in the payload."},{"content":"For a list of supported object types, see the Remarks for the &lt;xref:System.Diagnostics.Eventing.EventProvider&gt; class.","pos":[399,516],"source":" For a list of supported object types, see the Remarks for the <xref:System.Diagnostics.Eventing.EventProvider> class."}]}]},{"pos":[16710,16825],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that identifies the event to write.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write."},{"pos":[16897,17335],"content":"An array of objects that contain the event data to write. The object must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.       This parameter can be null.","needQuote":false,"needEscape":true,"nodes":[{"content":"An array of objects that contain the event data to write. The object must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.       This parameter can be null.","pos":[0,436],"nodes":[{"content":"An array of objects that contain the event data to write.","pos":[0,57]},{"content":"The object must be in the order specified in the manifest.","pos":[58,116]},{"content":"The array is limited to 32 objects, of which only eight may be strings.","pos":[117,188]},{"content":"The maximum data size for the event is limited to 64 KB minus the size of the event headers.","pos":[189,281]},{"content":"The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[282,402]},{"content":"This parameter can be null.","pos":[409,436]}]}]},{"pos":[17395,17729],"content":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event is written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,163],"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If false, call the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method to determine the cause of the failure.","pos":[164,334],"source":" If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."}]},{"pos":[17904,17981],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">eventPayload</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains too many objects or strings.","needQuote":true,"needEscape":true,"source":"The <code>eventPayload</code> parameter contains too many objects or strings."},{"pos":[18568,18625],"content":"Writes an event. The event data is specified as a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an event. The event data is specified as a string.","pos":[0,57],"nodes":[{"content":"Writes an event.","pos":[0,16]},{"content":"The event data is specified as a string.","pos":[17,57]}]}]},{"pos":[18638,19080],"content":"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.       The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.       The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[0,440],"nodes":[{"content":"If you call the &lt;xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A&gt; method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.","pos":[0,230],"source":"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event."},{"content":"The maximum string length is limited to 64 KB minus the size of the event headers.","pos":[237,319]},{"content":"The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[320,440]}]}]},{"pos":[19891,20006],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that identifies the event to write.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write."},{"pos":[20067,20105],"content":"The string to write as the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to write as the event data.","pos":[0,38]}]},{"pos":[20164,20498],"content":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event is written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,163],"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If false, call the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method to determine the cause of the failure.","pos":[164,334],"source":" If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."}]},{"pos":[20673,20758],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"If <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21389,21455],"content":"Writes an event. The event data is specified as a block of memory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an event. The event data is specified as a block of memory.","pos":[0,66],"nodes":[{"content":"Writes an event.","pos":[0,16]},{"content":"The event data is specified as a block of memory.","pos":[17,66]}]}]},{"pos":[21467,21697],"content":"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you call the &lt;xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A&gt; method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.","pos":[0,230],"source":"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event."}]},{"pos":[21959,22074],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that identifies the event to write.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write."},{"pos":[22139,22405],"content":"Size of the event data to which the `data` parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Size of the event data to which the <ph id=\"ph1\">`data`</ph> parameter points.","pos":[0,60],"source":"Size of the event data to which the `data` parameter points."},{"content":"The maximum event data size is limited to 64 KB minus the size of the event headers.","pos":[61,145]},{"content":"The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[146,266]}]},{"pos":[22466,22501],"content":"Pointer to the event data to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pointer to the event data to write.","pos":[0,35]}]},{"pos":[22560,22894],"content":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event is written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,163],"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If false, call the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method to determine the cause of the failure.","pos":[164,334],"source":" If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."}]},{"pos":[23461,23512],"content":"Writes an event that contains a string as its data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an event that contains a string as its data.","pos":[0,51]}]},{"pos":[23524,23727],"content":"The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[0,203],"nodes":[{"content":"The maximum string length is limited to 64 KB minus the size of the event headers.","pos":[0,82]},{"content":"The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[83,203]}]}]},{"pos":[24037,24071],"content":"String to write as the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to write as the event data.","pos":[0,34]}]},{"pos":[24130,24464],"content":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event is written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,163],"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If false, call the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method to determine the cause of the failure.","pos":[164,334],"source":" If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."}]},{"pos":[24646,24739],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">eventMessage</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"If <code>eventMessage</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[25306,25430],"content":"Writes an event that contains a string as its data if the level and keyword value match the events requested by the session.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an event that contains a string as its data if the level and keyword value match the events requested by the session.","pos":[0,124]}]},{"pos":[25442,25645],"content":"The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[0,203],"nodes":[{"content":"The maximum string length is limited to 64 KB minus the size of the event headers.","pos":[0,82]},{"content":"The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[83,203]}]}]},{"pos":[26416,26450],"content":"String to write as the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to write as the event data.","pos":[0,34]}]},{"pos":[26515,26664],"content":"Level of detail included in the event. If the provider uses a manifest to define the event, set this value to the same level defined in the manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Level of detail included in the event. If the provider uses a manifest to define the event, set this value to the same level defined in the manifest.","pos":[0,149],"nodes":[{"content":"Level of detail included in the event.","pos":[0,38]},{"content":"If the provider uses a manifest to define the event, set this value to the same level defined in the manifest.","pos":[39,149]}]}]},{"pos":[26733,26894],"content":"Bit mask that specifies the event category. If the provider uses a manifest to define the event, set this value to the same keyword mask defined in the manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Bit mask that specifies the event category. If the provider uses a manifest to define the event, set this value to the same keyword mask defined in the manifest.","pos":[0,161],"nodes":[{"content":"Bit mask that specifies the event category.","pos":[0,43]},{"content":"If the provider uses a manifest to define the event, set this value to the same keyword mask defined in the manifest.","pos":[44,161]}]}]},{"pos":[26953,27287],"content":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event is written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,163],"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If false, call the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method to determine the cause of the failure.","pos":[164,334],"source":" If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."}]},{"pos":[27469,27562],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">eventMessage</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"If <code>eventMessage</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[28238,28358],"content":"Links events together when tracing events in an end-to-end scenario. The event data is specified as an array of objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Links events together when tracing events in an end-to-end scenario. The event data is specified as an array of objects.","pos":[0,120],"nodes":[{"content":"Links events together when tracing events in an end-to-end scenario.","pos":[0,68]},{"content":"The event data is specified as an array of objects.","pos":[69,120]}]}]},{"pos":[28371,29107],"content":"The method uses the activity ID set in the thread context to identify this component. To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method.       If you use the <xref:System.Diagnostics.Trace> class, you do not use the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify the activity ID. Instead, access the <xref:System.Diagnostics.Trace.CorrelationManager%2A> property to get the <xref:System.Diagnostics.CorrelationManager> object. Then, set the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property to the activity ID. You must also set the `relatedActivityId` to a <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The method uses the activity ID set in the thread context to identify this component.","pos":[0,85]},{"content":"To set the activity ID, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A&gt; method.","pos":[86,192],"source":" To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method."},{"content":"If you use the &lt;xref:System.Diagnostics.Trace&gt; class, you do not use the &lt;xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A&gt; method to specify the activity ID.","pos":[199,372],"source":"       If you use the <xref:System.Diagnostics.Trace> class, you do not use the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify the activity ID."},{"content":"Instead, access the &lt;xref:System.Diagnostics.Trace.CorrelationManager%2A&gt; property to get the &lt;xref:System.Diagnostics.CorrelationManager&gt; object.","pos":[373,519],"source":" Instead, access the <xref:System.Diagnostics.Trace.CorrelationManager%2A> property to get the <xref:System.Diagnostics.CorrelationManager> object."},{"content":"Then, set the &lt;xref:System.Diagnostics.CorrelationManager.ActivityId%2A&gt; property to the activity ID.","pos":[520,621],"source":" Then, set the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property to the activity ID."},{"content":"You must also set the <ph id=\"ph1\">`relatedActivityId`</ph> to a &lt;xref:System.Diagnostics.CorrelationManager.ActivityId%2A&gt; value.","pos":[622,734],"source":" You must also set the `relatedActivityId` to a <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> value."}]},{"pos":[29394,29509],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that identifies the event to write.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write."},{"pos":[29581,29716],"content":"Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.","pos":[0,135],"nodes":[{"content":"Activity identifier from the previous component.","pos":[0,48]},{"content":"Use this parameter to link your component's events to the previous component's events.","pos":[49,135]}]}]},{"pos":[29787,30187],"content":"An array of objects that contain the event data to write. The data must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of objects that contain the event data to write. The data must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[0,400],"nodes":[{"content":"An array of objects that contain the event data to write.","pos":[0,57]},{"content":"The data must be in the order specified in the manifest.","pos":[58,114]},{"content":"The array is limited to 32 objects, of which only eight may be strings.","pos":[115,186]},{"content":"The maximum data size for the event is limited to 64 KB minus the size of the event headers.","pos":[187,279]},{"content":"The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[280,400]}]}]},{"pos":[30246,30547],"content":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the <xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*> method to determine the cause of the failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event is written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,163],"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*&gt; method to determine the cause of the failure.","pos":[164,301],"source":" If false, call the <xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*> method to determine the cause of the failure."}]},{"pos":[30730,30796],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">eventPayload</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains too many objects or strings.","needQuote":true,"needEscape":true,"source":"If <code>eventPayload</code> contains too many objects or strings."},{"pos":[31506,31624],"content":"Links events together when tracing events in an end-to-end scenario. The event data is specified as a block of memory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Links events together when tracing events in an end-to-end scenario. The event data is specified as a block of memory.","pos":[0,118],"nodes":[{"content":"Links events together when tracing events in an end-to-end scenario.","pos":[0,68]},{"content":"The event data is specified as a block of memory.","pos":[69,118]}]}]},{"pos":[31636,31828],"content":"The method uses the activity ID set in the thread context to identify this component. To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The method uses the activity ID set in the thread context to identify this component. To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method.","pos":[0,192],"nodes":[{"content":"The method uses the activity ID set in the thread context to identify this component.","pos":[0,85]},{"content":"To set the activity ID, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A&gt; method.","pos":[86,192],"source":" To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method."}]}]},{"pos":[32122,32237],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that identifies the event to write.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write."},{"pos":[32309,32444],"content":"Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.","pos":[0,135],"nodes":[{"content":"Activity identifier from the previous component.","pos":[0,48]},{"content":"Use this parameter to link your component's events to the previous component's events.","pos":[49,135]}]}]},{"pos":[32509,32775],"content":"Size of the event data to which the `data` parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Size of the event data to which the <ph id=\"ph1\">`data`</ph> parameter points.","pos":[0,60],"source":"Size of the event data to which the `data` parameter points."},{"content":"The maximum event data size is limited to 64 KB minus the size of the event headers.","pos":[61,145]},{"content":"The event size is less if the session's buffer size is less and the session includes extended data items with the event.","pos":[146,266]}]},{"pos":[32836,32871],"content":"Pointer to the event data to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pointer to the event data to write.","pos":[0,35]}]},{"pos":[32930,33231],"content":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the <xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*> method to determine the cause of the failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event is written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,163],"source":"Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*&gt; method to determine the cause of the failure.","pos":[164,301],"source":" If false, call the <xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*> method to determine the cause of the failure."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Eventing.EventProvider\n  id: EventProvider\n  children:\n  - System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)\n  - System.Diagnostics.Eventing.EventProvider.Close\n  - System.Diagnostics.Eventing.EventProvider.CreateActivityId\n  - System.Diagnostics.Eventing.EventProvider.Dispose\n  - System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)\n  - System.Diagnostics.Eventing.EventProvider.Finalize\n  - System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError\n  - System.Diagnostics.Eventing.EventProvider.IsEnabled\n  - System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)\n  - System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)\n  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])\n  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)\n  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)\n  - System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)\n  - System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)\n  - System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])\n  - System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)\n  langs:\n  - csharp\n  name: EventProvider\n  nameWithType: EventProvider\n  fullName: System.Diagnostics.Eventing.EventProvider\n  type: Class\n  summary: Use this class to write events.\n  remarks: \"To consume events written using the <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A> and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods, the events must be defined in a manifest; events written using the <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A> method do not require a manifest.  \\n  \\n Events can contain the following managed data types:  \\n  \\n-   bool  \\n  \\n-   Boolean  \\n  \\n-   byte  \\n  \\n-   char  \\n  \\n-   decimal  \\n  \\n-   double  \\n  \\n-   float  \\n  \\n-   Guid  \\n  \\n-   int  \\n  \\n-   IntPtr  \\n  \\n-   long  \\n  \\n-   sbyte  \\n  \\n-   short  \\n  \\n-   string  \\n  \\n-   uint  \\n  \\n-   UInt64  \\n  \\n If an event in your manifest uses the `Boolean` in-type, you cannot write the data element using a `Boolean` data type in your managed code. The `Boolean` in-type in your manifest expects a 4-byte value, and a `Boolean` data type in managed code is 1-byte. Instead, you must use an `int` data type to write the value. If you want to log a `Boolean` value, use the UInt8 in-type in your manifest.\"\n  syntax:\n    content: 'public class EventProvider : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)\n  id: '#ctor(System.Guid)'\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: EventProvider(Guid)\n  nameWithType: EventProvider.EventProvider(Guid)\n  fullName: System.Diagnostics.Eventing.EventProvider.EventProvider(Guid)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.EventProvider\"></xref> class.\n  remarks: Registers the provider. To remove the registration when finished, call the <xref:System.Diagnostics.Eventing.EventProvider.Close%2A> method.\n  syntax:\n    content: public EventProvider (Guid providerGuid);\n    parameters:\n    - id: providerGuid\n      type: System.Guid\n      description: Guid that uniquely identifies the provider.\n  overload: System.Diagnostics.Eventing.EventProvider.#ctor*\n  exceptions:\n  - type: System.InsufficientMemoryException\n    commentId: T:System.InsufficientMemoryException\n    description: There is not enough memory to complete the operation.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The classes in the <xref href=\"System.Diagnostics.Eventing\"></xref> namespace work only on Windows Vista.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>providerGuid</code> parameter cannot be null.\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: An error returned by the ETW subsystem.\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.Close\n  id: Close\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: EventProvider.Close()\n  fullName: System.Diagnostics.Eventing.EventProvider.Close()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Removes the provider's registration from the ETW subsystem and releases all unmanaged resources.\n  remarks: You should call this method when finished instead of waiting for the system to dispose of the resources.\n  syntax:\n    content: public virtual void Close ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.EventProvider.Close*\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: An error returned by the ETW subsystem.\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId\n  id: CreateActivityId\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: CreateActivityId()\n  nameWithType: EventProvider.CreateActivityId()\n  fullName: System.Diagnostics.Eventing.EventProvider.CreateActivityId()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Creates a unique activity identifier for the provider.\n  remarks: This is a static method.\n  syntax:\n    content: public static Guid CreateActivityId ();\n    parameters: []\n    return:\n      type: System.Guid\n      description: A unique Guid that you use when calling the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId*> method to set the activity identifier for the provider.\n  overload: System.Diagnostics.Eventing.EventProvider.CreateActivityId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.Dispose\n  id: Dispose\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: EventProvider.Dispose()\n  fullName: System.Diagnostics.Eventing.EventProvider.Dispose()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Releases the resources used by this <xref href=\"System.Diagnostics.Eventing.EventProvider\"></xref> object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.EventProvider.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: EventProvider.Dispose(Boolean)\n  fullName: System.Diagnostics.Eventing.EventProvider.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Releases the resources used by this <xref href=\"System.Diagnostics.Eventing.EventProvider\"></xref> object.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: This parameter is ignored by this method since there are no unmanaged resources.\n  overload: System.Diagnostics.Eventing.EventProvider.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.Finalize\n  id: Finalize\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: EventProvider.Finalize()\n  fullName: System.Diagnostics.Eventing.EventProvider.Finalize()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.\n  syntax:\n    content: ~EventProvider ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.EventProvider.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError\n  id: GetLastWriteEventError\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: GetLastWriteEventError()\n  nameWithType: EventProvider.GetLastWriteEventError()\n  fullName: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Gets the last error associated with an event write failure.\n  remarks: \"The <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>, <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A>, and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods set this value if they fail to write the event.  \\n  \\n This is a static method.\"\n  syntax:\n    content: public static System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode GetLastWriteEventError ();\n    parameters: []\n    return:\n      type: System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode\n      description: Use the value to determine the cause of an event write failure.\n  overload: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled\n  id: IsEnabled\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: IsEnabled()\n  nameWithType: EventProvider.IsEnabled()\n  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Determines whether any session enabled the provider, regardless of the level and keyword values used to enable the provider.\n  remarks: Typically, a provider does not call this method to determine whether the provider has been enabled by a session; the provider simply writes the event, and ETW determines whether the event is logged to the session. A provider may want to call this function if the provider needs to perform extra work to generate the event. In this case, calling this function first may save resources and time.\n  syntax:\n    content: public bool IsEnabled ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the provider is enabled to any session; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.Eventing.EventProvider.IsEnabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)\n  id: IsEnabled(System.Byte,System.Int64)\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: IsEnabled(Byte,Int64)\n  nameWithType: EventProvider.IsEnabled(Byte,Int64)\n  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled(Byte,Int64)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Determines whether any session is requesting the specified event from the provider.\n  remarks: Typically, a provider does not call this method to determine whether a session requested the specified event; the provider simply writes the event, and ETW determines whether the event is logged to a session. A provider may want to call this function if the provider needs to perform extra work to generate the event. In this case, calling this function first to determine if a session requested the event or not, may save resources and time.\n  syntax:\n    content: public bool IsEnabled (byte level, long keywords);\n    parameters:\n    - id: level\n      type: System.Byte\n      description: Level of detail included in the event.\n    - id: keywords\n      type: System.Int64\n      description: Bit mask that specifies the event category. This mask should be the same keyword mask that is defined in the manifest for the event.\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if any session is requesting the specified event; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.Eventing.EventProvider.IsEnabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)\n  id: SetActivityId(System.Guid@)\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: SetActivityId(Guid)\n  nameWithType: EventProvider.SetActivityId(Guid)\n  fullName: System.Diagnostics.Eventing.EventProvider.SetActivityId(Guid)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Sets the current activity identifier used by the <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent*> methods.\n  remarks: \"The identifier is stored in the thread context.  \\n  \\n Note that in version 3.5 of the .NET framework, you had to set the `id` parameter of this method and the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property value to the same identifier value. However, in version 4.0 of the framework, the SetActivityId method automatically sets the correlation activity identifier for you.  \\n  \\n This is a static method.\"\n  syntax:\n    content: public static void SetActivityId (ref Guid id);\n    parameters:\n    - id: id\n      type: System.Guid\n      description: A unique activity identifier that the <xref:System.Diagnostics.Eventing.EventProvider.CreateActivityId*> method returns.\n  overload: System.Diagnostics.Eventing.EventProvider.SetActivityId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])\n  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: WriteEvent(EventDescriptor,Object[])\n  nameWithType: EventProvider.WriteEvent(EventDescriptor,Object[])\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Object[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes an event. The event data is specified as an array of objects.\n  remarks: \"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.  \\n  \\n If the object type is not supported, the method writes the value of the object's <xref:System.Object.ToString%2A?displayProperty=fullName> method in the payload. For a list of supported object types, see the Remarks for the <xref:System.Diagnostics.Eventing.EventProvider> class.\"\n  example:\n  - \"```  \\nprivate static Guid providerId = new Guid(\\\"{FB33FDA8-45FB-4df0-8A55-EEB4BA88E7E7}\\\");  \\n  \\nenum Keyword  \\n{  \\n    Read = 0x1,  \\n    Write = 0x2,  \\n    Local = 0x4,  \\n    Remote = 0x8  \\n}  \\n  \\nenum Level  \\n{  \\n    Critical = 1,  \\n    Error,  \\n    Warning,  \\n    Information,  \\n    Verbose  \\n}  \\n  \\n    EventProvider provider = new EventProvider(providerId);  \\n    EventDescriptor readEvent;  \\n    string path = @\\\"<PATHGOESHERE>\\\";  \\n    UInt64 bytesRead = <ASSIGNVALUE>;  \\n  \\n    if (provider.IsEnabled(Level.Information, (long)Keyword.Read))  \\n    {  \\n        unchecked  \\n        {  \\n            readEvent = new EventDescriptor(0x1, 0x0, 0x10, 0x4, 0x0, 0x0, (long)0x8000000000000005);  \\n        }  \\n  \\n        if (!provider.WriteEvent(ref readEvent, new object[] { path, bytesRead }))  \\n            Console.WriteLine(EventProvider.GetLastWriteEventError());  \\n    }  \\n  \\n    provider.Close();  \\n```\"\n  syntax:\n    content: public bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, object[] eventPayload);\n    parameters:\n    - id: eventDescriptor\n      type: System.Diagnostics.Eventing.EventDescriptor\n      description: An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write.\n    - id: eventPayload\n      type: System.Object[]\n      description: \"An array of objects that contain the event data to write. The object must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.  \\n  \\n This parameter can be null.\"\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.\n  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>eventPayload</code> parameter contains too many objects or strings.\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)\n  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: WriteEvent(EventDescriptor,String)\n  nameWithType: EventProvider.WriteEvent(EventDescriptor,String)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes an event. The event data is specified as a string.\n  remarks: \"If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.  \\n  \\n The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.\"\n  example:\n  - \"```  \\nprivate static Guid providerId = new Guid(\\\"{FB33FDA8-45FB-4df0-8A55-EEB4BA88E7E7}\\\");  \\n  \\nEventProvider provider = new EventProvider(providerId);  \\nEventDescriptor writeEvent;  \\n  \\nif (provider.IsEnabled())  \\n{  \\n     unchecked  \\n     {  \\n          writeEvent = new EventDescriptor(0x2, 0x0, 0x10, 0x3, 0x0, 0x0, (long)0x8000000000000006);  \\n     }  \\n  \\n     if (!provider.WriteEvent(ref writeEvent, \\\"Write event.\\\"))  \\n          Console.WriteLine(EventProvider.GetLastWriteEventError());  \\n}  \\n  \\nprovider.Close();  \\n```\"\n  syntax:\n    content: public bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, string data);\n    parameters:\n    - id: eventDescriptor\n      type: System.Diagnostics.Eventing.EventDescriptor\n      description: An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write.\n    - id: data\n      type: System.String\n      description: The string to write as the event data.\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.\n  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If <code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)\n  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: WriteEvent(EventDescriptor,Int32,IntPtr)\n  nameWithType: EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes an event. The event data is specified as a block of memory.\n  remarks: If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.\n  syntax:\n    content: protected bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, int dataCount, IntPtr data);\n    parameters:\n    - id: eventDescriptor\n      type: System.Diagnostics.Eventing.EventDescriptor\n      description: An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write.\n    - id: dataCount\n      type: System.Int32\n      description: Size of the event data to which the `data` parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.\n    - id: data\n      type: System.IntPtr\n      description: Pointer to the event data to write.\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.\n  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)\n  id: WriteMessageEvent(System.String)\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: WriteMessageEvent(String)\n  nameWithType: EventProvider.WriteMessageEvent(String)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes an event that contains a string as its data.\n  remarks: The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.\n  example:\n  - \"```  \\nif (!provider.WriteMessageEvent(\\\"Event string.\\\"))  \\n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \\n```\"\n  syntax:\n    content: public bool WriteMessageEvent (string eventMessage);\n    parameters:\n    - id: eventMessage\n      type: System.String\n      description: String to write as the event data.\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.\n  overload: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If <code>eventMessage</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)\n  id: WriteMessageEvent(System.String,System.Byte,System.Int64)\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: WriteMessageEvent(String,Byte,Int64)\n  nameWithType: EventProvider.WriteMessageEvent(String,Byte,Int64)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String,Byte,Int64)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes an event that contains a string as its data if the level and keyword value match the events requested by the session.\n  remarks: The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.\n  example:\n  - \"```  \\n// Calling this method with level and keyword set to zero is the same  \\n// as calling WriteMessageEvent(string); the event is always written.  \\nif (!provider.WriteMessageEvent(\\\"Event string.\\\", 0, 0))  \\n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \\n  \\n// Event is written if the level value of the session is less than or equal to 3, and bit 1 of the session  \\n// keyword bit-mask is set.  \\nif (!provider.WriteMessageEvent(\\\"Event string.\\\", 3, 2))  \\n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \\n```\"\n  syntax:\n    content: public bool WriteMessageEvent (string eventMessage, byte eventLevel, long eventKeywords);\n    parameters:\n    - id: eventMessage\n      type: System.String\n      description: String to write as the event data.\n    - id: eventLevel\n      type: System.Byte\n      description: Level of detail included in the event. If the provider uses a manifest to define the event, set this value to the same level defined in the manifest.\n    - id: eventKeywords\n      type: System.Int64\n      description: Bit mask that specifies the event category. If the provider uses a manifest to define the event, set this value to the same keyword mask defined in the manifest.\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure.\n  overload: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If <code>eventMessage</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])\n  id: WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: WriteTransferEvent(EventDescriptor,Guid,Object[])\n  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Links events together when tracing events in an end-to-end scenario. The event data is specified as an array of objects.\n  remarks: \"The method uses the activity ID set in the thread context to identify this component. To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method.  \\n  \\n If you use the <xref:System.Diagnostics.Trace> class, you do not use the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify the activity ID. Instead, access the <xref:System.Diagnostics.Trace.CorrelationManager%2A> property to get the <xref:System.Diagnostics.CorrelationManager> object. Then, set the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property to the activity ID. You must also set the `relatedActivityId` to a <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> value.\"\n  syntax:\n    content: public bool WriteTransferEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, Guid relatedActivityId, object[] eventPayload);\n    parameters:\n    - id: eventDescriptor\n      type: System.Diagnostics.Eventing.EventDescriptor\n      description: An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write.\n    - id: relatedActivityId\n      type: System.Guid\n      description: Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.\n    - id: eventPayload\n      type: System.Object[]\n      description: An array of objects that contain the event data to write. The data must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the <xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*> method to determine the cause of the failure.\n  overload: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: If <code>eventPayload</code> contains too many objects or strings.\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)\n  id: WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)\n  parent: System.Diagnostics.Eventing.EventProvider\n  langs:\n  - csharp\n  name: WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)\n  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Links events together when tracing events in an end-to-end scenario. The event data is specified as a block of memory.\n  remarks: The method uses the activity ID set in the thread context to identify this component. To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method.\n  syntax:\n    content: protected bool WriteTransferEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, Guid relatedActivityId, int dataCount, IntPtr data);\n    parameters:\n    - id: eventDescriptor\n      type: System.Diagnostics.Eventing.EventDescriptor\n      description: An instance of <xref href=\"System.Diagnostics.Eventing.EventDescriptor\"></xref> that identifies the event to write.\n    - id: relatedActivityId\n      type: System.Guid\n      description: Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.\n    - id: dataCount\n      type: System.Int32\n      description: Size of the event data to which the `data` parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.\n    - id: data\n      type: System.IntPtr\n      description: Pointer to the event data to write.\n    return:\n      type: System.Boolean\n      description: Is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event is written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If false, call the <xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*> method to determine the cause of the failure.\n  overload: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InsufficientMemoryException\n  parent: System\n  isExternal: false\n  name: InsufficientMemoryException\n  nameWithType: InsufficientMemoryException\n  fullName: System.InsufficientMemoryException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ComponentModel.Win32Exception\n  parent: System.ComponentModel\n  isExternal: false\n  name: Win32Exception\n  nameWithType: Win32Exception\n  fullName: System.ComponentModel.Win32Exception\n- uid: System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: EventProvider(Guid)\n  nameWithType: EventProvider.EventProvider(Guid)\n  fullName: System.Diagnostics.Eventing.EventProvider.EventProvider(Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.Eventing.EventProvider.Close\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: Close()\n  nameWithType: EventProvider.Close()\n  fullName: System.Diagnostics.Eventing.EventProvider.Close()\n- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: CreateActivityId()\n  nameWithType: EventProvider.CreateActivityId()\n  fullName: System.Diagnostics.Eventing.EventProvider.CreateActivityId()\n- uid: System.Diagnostics.Eventing.EventProvider.Dispose\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: Dispose()\n  nameWithType: EventProvider.Dispose()\n  fullName: System.Diagnostics.Eventing.EventProvider.Dispose()\n- uid: System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: EventProvider.Dispose(Boolean)\n  fullName: System.Diagnostics.Eventing.EventProvider.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Eventing.EventProvider.Finalize\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: Finalize()\n  nameWithType: EventProvider.Finalize()\n  fullName: System.Diagnostics.Eventing.EventProvider.Finalize()\n- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: GetLastWriteEventError()\n  nameWithType: EventProvider.GetLastWriteEventError()\n  fullName: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError()\n- uid: System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode\n  parent: System.Diagnostics.Eventing\n  isExternal: false\n  name: EventProvider+WriteEventErrorCode\n  nameWithType: EventProvider+WriteEventErrorCode\n  fullName: System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode\n- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: IsEnabled()\n  nameWithType: EventProvider.IsEnabled()\n  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled()\n- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: IsEnabled(Byte,Int64)\n  nameWithType: EventProvider.IsEnabled(Byte,Int64)\n  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled(Byte,Int64)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: SetActivityId(Guid)\n  nameWithType: EventProvider.SetActivityId(Guid)\n  fullName: System.Diagnostics.Eventing.EventProvider.SetActivityId(Guid)\n- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteEvent(EventDescriptor,Object[])\n  nameWithType: EventProvider.WriteEvent(EventDescriptor,Object[])\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Object[])\n- uid: System.Diagnostics.Eventing.EventDescriptor\n  parent: System.Diagnostics.Eventing\n  isExternal: false\n  name: EventDescriptor\n  nameWithType: EventDescriptor\n  fullName: System.Diagnostics.Eventing.EventDescriptor\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteEvent(EventDescriptor,String)\n  nameWithType: EventProvider.WriteEvent(EventDescriptor,String)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteEvent(EventDescriptor,Int32,IntPtr)\n  nameWithType: EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteMessageEvent(String)\n  nameWithType: EventProvider.WriteMessageEvent(String)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String)\n- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteMessageEvent(String,Byte,Int64)\n  nameWithType: EventProvider.WriteMessageEvent(String,Byte,Int64)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String,Byte,Int64)\n- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteTransferEvent(EventDescriptor,Guid,Object[])\n  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])\n- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)\n  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)\n  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)\n- uid: System.Diagnostics.Eventing.EventProvider.#ctor*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: EventProvider\n  nameWithType: EventProvider.EventProvider\n- uid: System.Diagnostics.Eventing.EventProvider.Close*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: Close\n  nameWithType: EventProvider.Close\n- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: CreateActivityId\n  nameWithType: EventProvider.CreateActivityId\n- uid: System.Diagnostics.Eventing.EventProvider.Dispose*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: Dispose\n  nameWithType: EventProvider.Dispose\n- uid: System.Diagnostics.Eventing.EventProvider.Finalize*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: Finalize\n  nameWithType: EventProvider.Finalize\n- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: GetLastWriteEventError\n  nameWithType: EventProvider.GetLastWriteEventError\n- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: IsEnabled\n  nameWithType: EventProvider.IsEnabled\n- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: SetActivityId\n  nameWithType: EventProvider.SetActivityId\n- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteEvent\n  nameWithType: EventProvider.WriteEvent\n- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteMessageEvent\n  nameWithType: EventProvider.WriteMessageEvent\n- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*\n  parent: System.Diagnostics.Eventing.EventProvider\n  isExternal: false\n  name: WriteTransferEvent\n  nameWithType: EventProvider.WriteTransferEvent\n"}