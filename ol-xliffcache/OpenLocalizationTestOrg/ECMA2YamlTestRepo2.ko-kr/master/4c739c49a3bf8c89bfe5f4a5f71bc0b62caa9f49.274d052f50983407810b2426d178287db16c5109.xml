{"nodes":[{"pos":[2983,3040],"content":"Describes the width, height, and location of a rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the width, height, and location of a rectangle.","pos":[0,57]}]},{"pos":[3053,3846],"content":"<a name=\"xamlAttributeUsage_Duration\"></a>    ## XAML Attribute Usage      ```   <object property=\"x,y,width,height\"/>   ```      <a name=\"xamlValues_MinWidth\"></a>    ## XAML Values    *x*    <xref:System.Double?displayProperty=fullName>       The x-coordinate location of the left side of the rectangle.       *y*    <xref:System.Double?displayProperty=fullName>       The y-coordinate location of the top side of the rectangle.       *width*    <xref:System.Double?displayProperty=fullName>       A non-negative value that represents the <xref:System.Windows.Rect.Width%2A> of the rectangle.       *height*    <xref:System.Double?displayProperty=fullName>       A non-negative value that represents the <xref:System.Windows.Rect.Height%2A> of the rectangle.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Duration\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"x,y,width,height\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_MinWidth\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>x<ept id=\"p3\">*</ept>    &lt;xref:System.Double?displayProperty=fullName&gt;       The x-coordinate location of the left side of the rectangle.","pos":[0,305],"source":"<a name=\"xamlAttributeUsage_Duration\"></a>    ## XAML Attribute Usage      ```   <object property=\"x,y,width,height\"/>   ```      <a name=\"xamlValues_MinWidth\"></a>    ## XAML Values    *x*    <xref:System.Double?displayProperty=fullName>       The x-coordinate location of the left side of the rectangle."},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>    &lt;xref:System.Double?displayProperty=fullName&gt;       The y-coordinate location of the top side of the rectangle.","pos":[312,430],"source":"*y*    <xref:System.Double?displayProperty=fullName>       The y-coordinate location of the top side of the rectangle."},{"content":"<bpt id=\"p1\">*</bpt>width<ept id=\"p1\">*</ept>    &lt;xref:System.Double?displayProperty=fullName&gt;       A non-negative value that represents the &lt;xref:System.Windows.Rect.Width%2A&gt; of the rectangle.","pos":[437,594],"source":"*width*    <xref:System.Double?displayProperty=fullName>       A non-negative value that represents the <xref:System.Windows.Rect.Width%2A> of the rectangle."},{"content":"<bpt id=\"p1\">*</bpt>height<ept id=\"p1\">*</ept>    &lt;xref:System.Double?displayProperty=fullName&gt;       A non-negative value that represents the &lt;xref:System.Windows.Rect.Height%2A&gt; of the rectangle.","pos":[601,760],"source":"*height*    <xref:System.Double?displayProperty=fullName>       A non-negative value that represents the <xref:System.Windows.Rect.Height%2A> of the rectangle."}]},{"pos":[5605,5744],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that is of the specified size and is located at (0,0).","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that is of the specified size and is located at (0,0)."},{"pos":[6186,6292],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the width and height of the rectangle.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.Size\"></xref> structure that specifies the width and height of the rectangle."},{"pos":[6759,6909],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that is exactly large enough to contain the two specified points.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that is exactly large enough to contain the two specified points."},{"pos":[7386,7438],"content":"The first point that the new rectangle must contain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first point that the new rectangle must contain.","pos":[0,52]}]},{"pos":[7508,7561],"content":"The second point that the new rectangle must contain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second point that the new rectangle must contain.","pos":[0,53]}]},{"pos":[8023,8191],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that has the specified top-left corner location and the specified width and height.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that has the specified top-left corner location and the specified width and height."},{"pos":[8669,8745],"content":"A point that specifies the location of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"A point that specifies the location of the top-left corner of the rectangle.","pos":[0,76]}]},{"pos":[8812,8918],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the width and height of the rectangle.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.Size\"></xref> structure that specifies the width and height of the rectangle."},{"pos":[9390,9595],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector."},{"pos":[10071,10114],"content":"The first point the rectangle must contain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first point the rectangle must contain.","pos":[0,43]}]},{"pos":[10185,10303],"content":"The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.","pos":[0,118],"nodes":[{"content":"The amount to offset the specified point.","pos":[0,41]},{"content":"The resulting rectangle will be exactly large enough to contain both points.","pos":[42,118]}]}]},{"pos":[10846,11000],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that has the specified x-coordinate, y-coordinate, width, and height.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that has the specified x-coordinate, y-coordinate, width, and height."},{"pos":[11013,11277],"content":"The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.       [!code-cs[RectExamples_snip#CreateRectExample6_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample6_csharp)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following example shows how to create a new &lt;xref:System.Windows.Rect&gt; structure by using the Rect constructor.","pos":[0,115],"source":"The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>RectExamples_snip#CreateRectExample6_csharp<ept id=\"p2\">](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample6_csharp)</ept><ept id=\"p1\">]</ept>","pos":[122,262],"source":"[!code-cs[RectExamples_snip#CreateRectExample6_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample6_csharp)]"}]},{"pos":[11438,11495],"content":"The x-coordinate of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the top-left corner of the rectangle.","pos":[0,57]}]},{"pos":[11553,11610],"content":"The y-coordinate of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the top-left corner of the rectangle.","pos":[0,57]}]},{"pos":[11672,11699],"content":"The width of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the rectangle.","pos":[0,27]}]},{"pos":[11762,11790],"content":"The height of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the rectangle.","pos":[0,28]}]},{"pos":[11939,12040],"content":"<code>width</code> is a negative value.       -or-       <code>height</code> is a negative value.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;width&lt;/code&gt;</ph> is a negative value.","pos":[0,39],"source":"<code>width</code> is a negative value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;height&lt;/code&gt;</ph> is a negative value.","pos":[46,97],"source":"       -or-       <code>height</code> is a negative value."}]},{"pos":[12330,12383],"content":"Gets the y-axis value of the bottom of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the y-axis value of the bottom of the rectangle.","pos":[0,53]}]},{"pos":[12395,12554],"content":"The y-axis value of the bottom of the rectangle is equal to the sum of the <xref:System.Windows.Rect.Y%2A> and <xref:System.Windows.Rect.Height%2A> properties.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The y-axis value of the bottom of the rectangle is equal to the sum of the &lt;xref:System.Windows.Rect.Y%2A&gt; and &lt;xref:System.Windows.Rect.Height%2A&gt; properties.","pos":[0,159],"source":"The y-axis value of the bottom of the rectangle is equal to the sum of the <xref:System.Windows.Rect.Y%2A> and <xref:System.Windows.Rect.Height%2A> properties."}]},{"pos":[13110,13221],"content":"The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <xref:System.Double> .","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <xref:System.Double> .","pos":[0,111],"nodes":[{"content":"The y-axis value of the bottom of the rectangle.","pos":[0,48]},{"content":"If the rectangle is empty, the value is &lt;xref:System.Double&gt; .","pos":[49,111],"source":" If the rectangle is empty, the value is <xref:System.Double> ."}]}]},{"pos":[13587,13647],"content":"Gets the position of the bottom-left corner of the rectangle","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the position of the bottom-left corner of the rectangle","pos":[0,60]}]},{"pos":[13659,13833],"content":"The position of the bottom-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The position of the bottom-left corner of the rectangle is equal to (&lt;xref:System.Windows.Rect.X%2A&gt;, &lt;xref:System.Windows.Rect.Y%2A&gt; + &lt;xref:System.Windows.Rect.Height%2A&gt;).","pos":[0,174],"source":"The position of the bottom-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>)."}]},{"pos":[14414,14470],"content":"The position of the bottom-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the bottom-left corner of the rectangle.","pos":[0,56]}]},{"pos":[14845,14907],"content":"Gets the position of the bottom-right corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the position of the bottom-right corner of the rectangle.","pos":[0,62]}]},{"pos":[14919,15132],"content":"The position of the bottom-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The position of the bottom-right corner of the rectangle is equal to (&lt;xref:System.Windows.Rect.X%2A&gt; + &lt;xref:System.Windows.Rect.Width%2A&gt;, &lt;xref:System.Windows.Rect.Y%2A&gt; + &lt;xref:System.Windows.Rect.Height%2A&gt;).","pos":[0,213],"source":"The position of the bottom-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>)."}]},{"pos":[15714,15771],"content":"The position of the bottom-right corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the bottom-right corner of the rectangle.","pos":[0,57]}]},{"pos":[16195,16256],"content":"Indicates whether the rectangle contains the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the rectangle contains the specified point.","pos":[0,61]}]},{"pos":[16732,16751],"content":"The point to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point to check.","pos":[0,19]}]},{"pos":[16810,16992],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangle contains the specified point; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle contains the specified point; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17408,17473],"content":"Indicates whether the rectangle contains the specified rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the rectangle contains the specified rectangle.","pos":[0,65]}]},{"pos":[17928,17951],"content":"The rectangle to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle to check.","pos":[0,23]}]},{"pos":[18010,18206],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">rect</ph><ept id=\"p2\">&lt;/code&gt;</ept> is entirely contained by the rectangle; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>rect</code> is entirely contained by the rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18665,18750],"content":"Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.","pos":[0,85]}]},{"pos":[19228,19267],"content":"The x-coordinate of the point to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to check.","pos":[0,39]}]},{"pos":[19325,19364],"content":"The y-coordinate of the point to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to check.","pos":[0,39]}]},{"pos":[19423,19625],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p3\">&lt;/code&gt;</ept>) is contained by the rectangle; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if (<code>x</code>, <code>y</code>) is contained by the rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19968,20042],"content":"Gets a special value that represents a rectangle with no position or area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a special value that represents a rectangle with no position or area.","pos":[0,74]}]},{"pos":[20054,20355],"content":"Avoid mathematical computations involving empty rectangles. Because both <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> are infinite values, processor operations are severely impaired by these operations. Comparisons involving these values will not affect application performance.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Avoid mathematical computations involving empty rectangles. Because both <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> are infinite values, processor operations are severely impaired by these operations. Comparisons involving these values will not affect application performance.","pos":[0,301],"nodes":[{"content":"Avoid mathematical computations involving empty rectangles.","pos":[0,59]},{"content":"Because both &lt;xref:System.Windows.Rect.X%2A&gt; and &lt;xref:System.Windows.Rect.Y%2A&gt; are infinite values, processor operations are severely impaired by these operations.","pos":[60,225],"source":" Because both <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> are infinite values, processor operations are severely impaired by these operations."},{"content":"Comparisons involving these values will not affect application performance.","pos":[226,301]}]}]},{"pos":[20491,20782],"content":"The empty rectangle, which has &lt;xref:System.Windows.Rect.X<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Y<ept id=\"p1\">*</ept>&gt; property values of &lt;xref:System.Double.PositiveInfinity&gt;, and has &lt;xref:System.Windows.Rect.Width<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Height<ept id=\"p2\">*</ept>&gt; property values of &lt;xref:System.Double.NegativeInfinity&gt;.","needQuote":true,"needEscape":true,"source":"The empty rectangle, which has <xref:System.Windows.Rect.X*> and <xref:System.Windows.Rect.Y*> property values of <xref:System.Double.PositiveInfinity>, and has <xref:System.Windows.Rect.Width*> and <xref:System.Windows.Rect.Height*> property values of <xref:System.Double.NegativeInfinity>."},{"pos":[21179,21252],"content":"Indicates whether the specified object is equal to the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the specified object is equal to the current rectangle.","pos":[0,73]}]},{"pos":[21265,21672],"content":"This operation tests for object equality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation tests for object equality.","pos":[0,41]},{"content":"In this comparison, two instances of &lt;xref:System.Double.NaN?displayProperty=fullName&gt; are considered equal.","pos":[48,156],"source":"       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A rectangle's position and dimensions are described by &lt;xref:System.Double&gt; values.","pos":[162,258],"source":"      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values."},{"content":"Because &lt;xref:System.Double&gt; values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","pos":[259,402],"source":" Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."}]},{"pos":[22085,22132],"content":"The object to compare to the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare to the current rectangle.","pos":[0,47]}]},{"pos":[22191,22514],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">o</ph><ept id=\"p2\">&lt;/code&gt;</ept> is a <bpt id=\"p3\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and has the same &lt;xref:System.Windows.Rect.Location<bpt id=\"p4\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Size<ept id=\"p4\">*</ept>&gt; values as the current rectangle; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>o</code> is a <xref href=\"System.Windows.Rect\"></xref> and has the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values as the current rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22918,22994],"content":"Indicates whether the specified rectangle is equal to the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the specified rectangle is equal to the current rectangle.","pos":[0,76]}]},{"pos":[23007,23414],"content":"This operation tests for object equality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation tests for object equality.","pos":[0,41]},{"content":"In this comparison, two instances of &lt;xref:System.Double.NaN?displayProperty=fullName&gt; are considered equal.","pos":[48,156],"source":"       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A rectangle's position and dimensions are described by &lt;xref:System.Double&gt; values.","pos":[162,258],"source":"      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values."},{"content":"Because &lt;xref:System.Double&gt; values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","pos":[259,402],"source":" Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."}]},{"pos":[23848,23898],"content":"The rectangle to compare to the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle to compare to the current rectangle.","pos":[0,50]}]},{"pos":[23957,24239],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified rectangle has the same &lt;xref:System.Windows.Rect.Location<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Size<ept id=\"p2\">*</ept>&gt; values as the current rectangle; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified rectangle has the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values as the current rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24698,24751],"content":"Indicates whether the specified rectangles are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the specified rectangles are equal.","pos":[0,53]}]},{"pos":[24764,25171],"content":"This operation tests for object equality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation tests for object equality.","pos":[0,41]},{"content":"In this comparison, two instances of &lt;xref:System.Double.NaN?displayProperty=fullName&gt; are considered equal.","pos":[48,156],"source":"       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A rectangle's position and dimensions are described by &lt;xref:System.Double&gt; values.","pos":[162,258],"source":"      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values."},{"content":"Because &lt;xref:System.Double&gt; values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","pos":[259,402],"source":" Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."}]},{"pos":[25627,25658],"content":"The first rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first rectangle to compare.","pos":[0,31]}]},{"pos":[25726,25758],"content":"The second rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second rectangle to compare.","pos":[0,32]}]},{"pos":[25817,26066],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangles have the same &lt;xref:System.Windows.Rect.Location<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Size<ept id=\"p2\">*</ept>&gt; values; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangles have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26441,26479],"content":"Creates a hash code for the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a hash code for the rectangle.","pos":[0,38]}]},{"pos":[26491,26696],"content":"This method creates a hash code by using the <xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>, <xref:System.Windows.Rect.Width%2A>, and <xref:System.Windows.Rect.Height%2A> property values.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method creates a hash code by using the &lt;xref:System.Windows.Rect.X%2A&gt;, &lt;xref:System.Windows.Rect.Y%2A&gt;, &lt;xref:System.Windows.Rect.Width%2A&gt;, and &lt;xref:System.Windows.Rect.Height%2A&gt; property values.","pos":[0,205],"source":"This method creates a hash code by using the <xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>, <xref:System.Windows.Rect.Width%2A>, and <xref:System.Windows.Rect.Height%2A> property values."}]},{"pos":[27113,27192],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.Windows.Rect\"></xref> structure."},{"pos":[27543,27584],"content":"Gets or sets the height of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the height of the rectangle.","pos":[0,41]}]},{"pos":[27596,27798],"content":"The <xref:System.Windows.Rect.Empty%2A> rectangle has a Height of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Height cannot not be changed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Windows.Rect.Empty%2A> rectangle has a Height of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Height cannot not be changed.","pos":[0,202],"nodes":[{"content":"The &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle has a Height of &lt;xref:System.Double.NegativeInfinity&gt;.","pos":[0,104],"source":"The <xref:System.Windows.Rect.Empty%2A> rectangle has a Height of <xref:System.Double.NegativeInfinity>."},{"content":"The &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle is read-only; its Height cannot not be changed.","pos":[105,202],"source":" The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Height cannot not be changed."}]}]},{"pos":[29023,29103],"content":"A positive number that represents the height of the rectangle. The default is 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"A positive number that represents the height of the rectangle. The default is 0.","pos":[0,80],"nodes":[{"content":"A positive number that represents the height of the rectangle.","pos":[0,62]},{"content":"The default is 0.","pos":[63,80]}]}]},{"pos":[29252,29286],"content":"Height is set to a negative value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height is set to a negative value.","pos":[0,34]}]},{"pos":[29397,29461],"content":"Height is set on an <xref:System.Windows.Rect.Empty*> rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height is set on an &lt;xref:System.Windows.Rect.Empty*&gt; rectangle.","pos":[0,64],"source":"Height is set on an <xref:System.Windows.Rect.Empty*> rectangle."}]},{"pos":[29813,29918],"content":"Expands the rectangle by using the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, in all directions.","needQuote":true,"needEscape":true,"source":"Expands the rectangle by using the specified <xref href=\"System.Windows.Size\"></xref>, in all directions."},{"pos":[29930,30378],"content":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.","pos":[0,448],"nodes":[{"content":"The &lt;xref:System.Windows.Rect.Width%2A&gt; of the resulting rectangle is increased by twice the &lt;xref:System.Windows.Size.Width%2A&gt; of the specified &lt;xref:System.Windows.Size&gt; structure, because both the left and right sides of the rectangle are inflated.","pos":[0,252],"source":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated."},{"content":"Likewise, the &lt;xref:System.Windows.Rect.Height%2A&gt; of the resulting rectangle is increased by twice the &lt;xref:System.Windows.Size.Height%2A&gt; of the specified &lt;xref:System.Windows.Size&gt; structure.","pos":[253,448],"source":" Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure."}]}]},{"pos":[30787,31297],"content":"Specifies the amount to expand the rectangle. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Width*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Left*> and <xref:System.Windows.Rect.Right*> properties. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Height*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Top*> and <xref:System.Windows.Rect.Bottom*> properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the amount to expand the rectangle.","pos":[0,45]},{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure's &lt;xref:System.Windows.Size.Width<bpt id=\"p2\">*</bpt>&gt; property specifies the amount to increase the rectangle's &lt;xref:System.Windows.Rect.Left<ept id=\"p2\">*</ept>&gt; and &lt;xref:System.Windows.Rect.Right<bpt id=\"p3\">*</bpt>&gt; properties. The <bpt id=\"p4\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> structure's &lt;xref:System.Windows.Size.Height<ept id=\"p3\">*</ept>&gt; property specifies the amount to increase the rectangle's &lt;xref:System.Windows.Rect.Top<bpt id=\"p5\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Bottom<ept id=\"p5\">*</ept>&gt; properties.","pos":[46,510],"source":" The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Width*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Left*> and <xref:System.Windows.Rect.Right*> properties. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Height*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Top*> and <xref:System.Windows.Rect.Bottom*> properties."}]},{"pos":[31463,31569],"content":"This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called on the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> rectangle.","pos":[0,106],"source":"This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."}]},{"pos":[31964,32064],"content":"Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.","pos":[0,100]}]},{"pos":[32077,32687],"content":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.       If the specified width or height shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>—giving the rectangle a negative area—the rectangle becomes the <xref:System.Windows.Rect.Empty%2A> rectangle.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.       If the specified width or height shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>—giving the rectangle a negative area—the rectangle becomes the <xref:System.Windows.Rect.Empty%2A> rectangle.","pos":[0,608],"nodes":[{"content":"The &lt;xref:System.Windows.Rect.Width%2A&gt; of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle.","pos":[0,202],"source":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle."},{"content":"Likewise, the &lt;xref:System.Windows.Rect.Height%2A&gt; of the resulting rectangle is increased or decreased by twice the specified height.","pos":[203,337],"source":" Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height."},{"content":"If the specified width or height shrink the rectangle by more than its current &lt;xref:System.Windows.Rect.Width%2A&gt; or &lt;xref:System.Windows.Rect.Height%2A&gt;—giving the rectangle a negative area—the rectangle becomes the &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.","pos":[344,608],"source":"       If the specified width or height shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>—giving the rectangle a negative area—the rectangle becomes the <xref:System.Windows.Rect.Empty%2A> rectangle."}]}]},{"pos":[33093,33175],"content":"The amount by which to expand or shrink the left and right sides of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount by which to expand or shrink the left and right sides of the rectangle.","pos":[0,82]}]},{"pos":[33238,33320],"content":"The amount by which to expand or shrink the top and bottom sides of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount by which to expand or shrink the top and bottom sides of the rectangle.","pos":[0,82]}]},{"pos":[33486,33592],"content":"This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called on the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> rectangle.","pos":[0,106],"source":"This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."}]},{"pos":[33999,34150],"content":"Returns the rectangle that results from expanding the specified rectangle by the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, in all directions.","needQuote":true,"needEscape":true,"source":"Returns the rectangle that results from expanding the specified rectangle by the specified <xref href=\"System.Windows.Size\"></xref>, in all directions."},{"pos":[34162,34610],"content":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.","pos":[0,448],"nodes":[{"content":"The &lt;xref:System.Windows.Rect.Width%2A&gt; of the resulting rectangle is increased by twice the &lt;xref:System.Windows.Size.Width%2A&gt; of the specified &lt;xref:System.Windows.Size&gt; structure, because both the left and right sides of the rectangle are inflated.","pos":[0,252],"source":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated."},{"content":"Likewise, the &lt;xref:System.Windows.Rect.Height%2A&gt; of the resulting rectangle is increased by twice the &lt;xref:System.Windows.Size.Height%2A&gt; of the specified &lt;xref:System.Windows.Size&gt; structure.","pos":[253,448],"source":" Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure."}]}]},{"pos":[35065,35130],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to modify.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Rect\"></xref> structure to modify."},{"pos":[35197,35707],"content":"Specifies the amount to expand the rectangle. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Width*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Left*> and <xref:System.Windows.Rect.Right*> properties. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Height*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Top*> and <xref:System.Windows.Rect.Bottom*> properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the amount to expand the rectangle.","pos":[0,45]},{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure's &lt;xref:System.Windows.Size.Width<bpt id=\"p2\">*</bpt>&gt; property specifies the amount to increase the rectangle's &lt;xref:System.Windows.Rect.Left<ept id=\"p2\">*</ept>&gt; and &lt;xref:System.Windows.Rect.Right<bpt id=\"p3\">*</bpt>&gt; properties. The <bpt id=\"p4\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> structure's &lt;xref:System.Windows.Size.Height<ept id=\"p3\">*</ept>&gt; property specifies the amount to increase the rectangle's &lt;xref:System.Windows.Rect.Top<bpt id=\"p5\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Bottom<ept id=\"p5\">*</ept>&gt; properties.","pos":[46,510],"source":" The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Width*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Left*> and <xref:System.Windows.Rect.Right*> properties. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Height*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Top*> and <xref:System.Windows.Rect.Bottom*> properties."}]},{"pos":[35771,35795],"content":"The resulting rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting rectangle.","pos":[0,24]}]},{"pos":[35961,36062],"content":"<ph id=\"ph1\">&lt;code&gt;rect&lt;/code&gt;</ph> is an <ph id=\"ph2\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph> rectangle.","needQuote":true,"needEscape":true,"source":"<code>rect</code> is an &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."},{"pos":[36512,36658],"content":"Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.","pos":[0,146]}]},{"pos":[36671,37300],"content":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.       If the specified width or height modifiers shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>—giving the rectangle a negative area—this method returns <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.       If the specified width or height modifiers shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>—giving the rectangle a negative area—this method returns <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.","pos":[0,627],"nodes":[{"content":"The &lt;xref:System.Windows.Rect.Width%2A&gt; of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle.","pos":[0,202],"source":"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle."},{"content":"Likewise, the &lt;xref:System.Windows.Rect.Height%2A&gt; of the resulting rectangle is increased or decreased by twice the specified height.","pos":[203,337],"source":" Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height."},{"content":"If the specified width or height modifiers shrink the rectangle by more than its current &lt;xref:System.Windows.Rect.Width%2A&gt; or &lt;xref:System.Windows.Rect.Height%2A&gt;—giving the rectangle a negative area—this method returns &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;.","pos":[344,627],"source":"       If the specified width or height modifiers shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>—giving the rectangle a negative area—this method returns <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>."}]}]},{"pos":[37759,37824],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to modify.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Rect\"></xref> structure to modify."},{"pos":[37886,37968],"content":"The amount by which to expand or shrink the left and right sides of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount by which to expand or shrink the left and right sides of the rectangle.","pos":[0,82]}]},{"pos":[38031,38113],"content":"The amount by which to expand or shrink the top and bottom sides of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount by which to expand or shrink the top and bottom sides of the rectangle.","pos":[0,82]}]},{"pos":[38177,38201],"content":"The resulting rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting rectangle.","pos":[0,24]}]},{"pos":[38367,38468],"content":"<ph id=\"ph1\">&lt;code&gt;rect&lt;/code&gt;</ph> is an <ph id=\"ph2\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph> rectangle.","needQuote":true,"needEscape":true,"source":"<code>rect</code> is an &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."},{"pos":[38830,38954],"content":"Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.","pos":[0,124]}]},{"pos":[38966,39084],"content":"If no intersection exists, the current rectangle becomes <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If no intersection exists, the current rectangle becomes &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;.","pos":[0,118],"source":"If no intersection exists, the current rectangle becomes <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>."}]},{"pos":[39544,39598],"content":"The rectangle to intersect with the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle to intersect with the current rectangle.","pos":[0,54]}]},{"pos":[40075,40128],"content":"Returns the intersection of the specified rectangles.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the intersection of the specified rectangles.","pos":[0,53]}]},{"pos":[40141,40391],"content":"The following example shows how to use the Intersect method to find the intersection of two rectangles.       [!code-cs[RectExamples_snip#IntersectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample2_csharp)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following example shows how to use the Intersect method to find the intersection of two rectangles.","pos":[0,103]},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>RectExamples_snip#IntersectExample2_csharp<ept id=\"p2\">](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample2_csharp)</ept><ept id=\"p1\">]</ept>","pos":[110,248],"source":"[!code-cs[RectExamples_snip#IntersectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample2_csharp)]"}]},{"pos":[40599,40630],"content":"The first rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first rectangle to compare.","pos":[0,31]}]},{"pos":[40698,40730],"content":"The second rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second rectangle to compare.","pos":[0,32]}]},{"pos":[40794,40930],"content":"The intersection of the two rectangles, or &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; if no intersection exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The intersection of the two rectangles, or <ph id=\"ph1\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> if no intersection exists.","pos":[0,136],"source":"The intersection of the two rectangles, or &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; if no intersection exists."}]},{"pos":[41377,41457],"content":"Indicates whether the specified rectangle intersects with the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the specified rectangle intersects with the current rectangle.","pos":[0,80]}]},{"pos":[41911,41934],"content":"The rectangle to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle to check.","pos":[0,23]}]},{"pos":[41993,42194],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified rectangle intersects with the current rectangle; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified rectangle intersects with the current rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[42553,42654],"content":"Gets a value that indicates whether the rectangle is the <xref:System.Windows.Rect.Empty*> rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the rectangle is the &lt;xref:System.Windows.Rect.Empty*&gt; rectangle.","pos":[0,101],"source":"Gets a value that indicates whether the rectangle is the <xref:System.Windows.Rect.Empty*> rectangle."}]},{"pos":[42666,42886],"content":"Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <xref:System.Windows.Rect.Empty%2A> rectangle. For more information, see the <xref:System.Windows.Rect.Empty%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <xref:System.Windows.Rect.Empty%2A> rectangle. For more information, see the <xref:System.Windows.Rect.Empty%2A> property.","pos":[0,220],"nodes":[{"content":"Do not use this property to test for zero area; a rectangle with zero area is not necessarily the &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle.","pos":[0,144],"source":"Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <xref:System.Windows.Rect.Empty%2A> rectangle."},{"content":"For more information, see the &lt;xref:System.Windows.Rect.Empty%2A&gt; property.","pos":[145,220],"source":" For more information, see the <xref:System.Windows.Rect.Empty%2A> property."}]}]},{"pos":[42997,43201],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangle is the &lt;xref:System.Windows.Rect.Empty*&gt; rectangle; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle is the <xref:System.Windows.Rect.Empty*> rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[43538,43594],"content":"Gets the x-axis value of the left side of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the x-axis value of the left side of the rectangle.","pos":[0,56]}]},{"pos":[43606,43698],"content":"Getting this property is equivalent to getting the <xref:System.Windows.Rect.X%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Getting this property is equivalent to getting the &lt;xref:System.Windows.Rect.X%2A&gt; property.","pos":[0,92],"source":"Getting this property is equivalent to getting the <xref:System.Windows.Rect.X%2A> property."}]},{"pos":[44252,44303],"content":"The x-axis value of the left side of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-axis value of the left side of the rectangle.","pos":[0,51]}]},{"pos":[44657,44723],"content":"Gets or sets the position of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the position of the top-left corner of the rectangle.","pos":[0,66]}]},{"pos":[44735,44867],"content":"The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The position of the top-left corner of the rectangle is equal to (&lt;xref:System.Windows.Rect.X%2A&gt;, &lt;xref:System.Windows.Rect.Y%2A&gt;).","pos":[0,132],"source":"The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>)."}]},{"pos":[46115,46191],"content":"The position of the top-left corner of the rectangle. The default is (0, 0).","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the top-left corner of the rectangle. The default is (0, 0).","pos":[0,76],"nodes":[{"content":"The position of the top-left corner of the rectangle.","pos":[0,53]},{"content":"The default is (0, 0).","pos":[54,76]}]}]},{"pos":[46358,46424],"content":"Location is set on an <xref:System.Windows.Rect.Empty*> rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Location is set on an &lt;xref:System.Windows.Rect.Empty*&gt; rectangle.","pos":[0,66],"source":"Location is set on an <xref:System.Windows.Rect.Empty*> rectangle."}]},{"pos":[46781,46825],"content":"Moves the rectangle by the specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves the rectangle by the specified vector.","pos":[0,44]}]},{"pos":[46838,47831],"content":"Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.","pos":[0,991],"nodes":[{"content":"Calling this method on an empty rectangle (&lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;) is not allowed.","pos":[0,120],"source":"Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed."},{"content":"Note that calling the Offset method will only have an effect if you can change the &lt;xref:System.Windows.Rect.X%2A&gt; and &lt;xref:System.Windows.Rect.Y%2A&gt; properties directly.","pos":[127,298],"source":"       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly."},{"content":"Because &lt;xref:System.Windows.Rect&gt; is a value type, if you reference a &lt;xref:System.Windows.Rect&gt; object by using a property or indexer, you get a copy of the object, not a reference to the object.","pos":[299,496],"source":" Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object."},{"content":"If you attempt to change &lt;xref:System.Windows.Rect.X%2A&gt; or &lt;xref:System.Windows.Rect.Y%2A&gt; on a property or indexer reference, a compiler error occurs.","pos":[497,649],"source":" If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs."},{"content":"Similarly, calling Offset on the property or indexer will not change the underlying object.","pos":[650,741]},{"content":"If you want to change the value of a &lt;xref:System.Windows.Rect&gt; that is referenced as a property or indexer, create a new &lt;xref:System.Windows.Rect&gt;, modify its fields, and then assign the &lt;xref:System.Windows.Rect&gt; back to the property or indexer.","pos":[743,991],"source":"  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer."}]}]},{"pos":[48259,48341],"content":"A vector that specifies the horizontal and vertical amounts to move the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"A vector that specifies the horizontal and vertical amounts to move the rectangle.","pos":[0,82]}]},{"pos":[48506,48612],"content":"This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called on the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> rectangle.","pos":[0,106],"source":"This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."}]},{"pos":[49002,49071],"content":"Moves the rectangle by the specified horizontal and vertical amounts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Moves the rectangle by the specified horizontal and vertical amounts.","pos":[0,69]}]},{"pos":[49084,50077],"content":"Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.","pos":[0,991],"nodes":[{"content":"Calling this method on an empty rectangle (&lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;) is not allowed.","pos":[0,120],"source":"Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed."},{"content":"Note that calling the Offset method will only have an effect if you can change the &lt;xref:System.Windows.Rect.X%2A&gt; and &lt;xref:System.Windows.Rect.Y%2A&gt; properties directly.","pos":[127,298],"source":"       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly."},{"content":"Because &lt;xref:System.Windows.Rect&gt; is a value type, if you reference a &lt;xref:System.Windows.Rect&gt; object by using a property or indexer, you get a copy of the object, not a reference to the object.","pos":[299,496],"source":" Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object."},{"content":"If you attempt to change &lt;xref:System.Windows.Rect.X%2A&gt; or &lt;xref:System.Windows.Rect.Y%2A&gt; on a property or indexer reference, a compiler error occurs.","pos":[497,649],"source":" If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs."},{"content":"Similarly, calling Offset on the property or indexer will not change the underlying object.","pos":[650,741]},{"content":"If you want to change the value of a &lt;xref:System.Windows.Rect&gt; that is referenced as a property or indexer, create a new &lt;xref:System.Windows.Rect&gt;, modify its fields, and then assign the &lt;xref:System.Windows.Rect&gt; back to the property or indexer.","pos":[743,991],"source":"  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer."}]}]},{"pos":[50488,50534],"content":"The amount to move the rectangle horizontally.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount to move the rectangle horizontally.","pos":[0,46]}]},{"pos":[50598,50642],"content":"The amount to move the rectangle vertically.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount to move the rectangle vertically.","pos":[0,44]}]},{"pos":[50807,50913],"content":"This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is called on the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> rectangle.","pos":[0,106],"source":"This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."}]},{"pos":[51325,51419],"content":"Returns a rectangle that is offset from the specified rectangle by using the specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a rectangle that is offset from the specified rectangle by using the specified vector.","pos":[0,94]}]},{"pos":[51431,51553],"content":"Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling this method with an empty rectangle (&lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;) is not allowed.","pos":[0,122],"source":"Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed."}]},{"pos":[52018,52041],"content":"The original rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The original rectangle.","pos":[0,23]}]},{"pos":[52118,52200],"content":"A vector that specifies the horizontal and vertical offsets for the new rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"A vector that specifies the horizontal and vertical offsets for the new rectangle.","pos":[0,82]}]},{"pos":[52264,52288],"content":"The resulting rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting rectangle.","pos":[0,24]}]},{"pos":[52453,52541],"content":"<ph id=\"ph1\">&lt;code&gt;rect&lt;/code&gt;</ph> is <ph id=\"ph2\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>rect</code> is &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;."},{"pos":[52986,53105],"content":"Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.","pos":[0,119]}]},{"pos":[53117,53239],"content":"Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling this method with an empty rectangle (&lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;) is not allowed.","pos":[0,122],"source":"Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed."}]},{"pos":[53700,53722],"content":"The rectangle to move.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle to move.","pos":[0,22]}]},{"pos":[53786,53830],"content":"The horizontal offset for the new rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The horizontal offset for the new rectangle.","pos":[0,44]}]},{"pos":[53894,53936],"content":"The vertical offset for the new rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vertical offset for the new rectangle.","pos":[0,42]}]},{"pos":[54000,54024],"content":"The resulting rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting rectangle.","pos":[0,24]}]},{"pos":[54189,54277],"content":"<ph id=\"ph1\">&lt;code&gt;rect&lt;/code&gt;</ph> is <ph id=\"ph2\">&amp;lt;</ph>xref:System.Windows.Rect.Empty%2A?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>rect</code> is &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;."},{"pos":[54706,54749],"content":"Compares two rectangles for exact equality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two rectangles for exact equality.","pos":[0,43]}]},{"pos":[54762,55169],"content":"This operation tests for object equality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation tests for object equality.","pos":[0,41]},{"content":"In this comparison, two instances of &lt;xref:System.Double.NaN?displayProperty=fullName&gt; are considered equal.","pos":[48,156],"source":"       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A rectangle's position and dimensions are described by &lt;xref:System.Double&gt; values.","pos":[162,258],"source":"      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values."},{"content":"Because &lt;xref:System.Double&gt; values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","pos":[259,402],"source":" Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."}]},{"pos":[55821,55852],"content":"The first rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first rectangle to compare.","pos":[0,31]}]},{"pos":[55920,55952],"content":"The second rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second rectangle to compare.","pos":[0,32]}]},{"pos":[56011,56260],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangles have the same &lt;xref:System.Windows.Rect.Location<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Size<ept id=\"p2\">*</ept>&gt; values; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangles have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[56761,56800],"content":"Compares two rectangles for inequality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two rectangles for inequality.","pos":[0,39]}]},{"pos":[56813,57222],"content":"This operation tests for object inequality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation tests for object inequality.","pos":[0,43]},{"content":"In this comparison, two instances of &lt;xref:System.Double.NaN?displayProperty=fullName&gt; are considered equal.","pos":[50,158],"source":"       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A rectangle's position and dimensions are described by &lt;xref:System.Double&gt; values.","pos":[164,260],"source":"      > [!NOTE] >  A rectangle's position and dimensions are described by <xref:System.Double> values."},{"content":"Because &lt;xref:System.Double&gt; values can lose precision when operated upon, a comparison between two values that are logically equal might fail.","pos":[261,404],"source":" Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."}]},{"pos":[57890,57921],"content":"The first rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first rectangle to compare.","pos":[0,31]}]},{"pos":[57989,58021],"content":"The second rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second rectangle to compare.","pos":[0,32]}]},{"pos":[58080,58336],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangles do not have the same &lt;xref:System.Windows.Rect.Location<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Rect.Size<ept id=\"p2\">*</ept>&gt; values; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangles do not have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[58736,58801],"content":"Creates a new rectangle from the specified string representation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new rectangle from the specified string representation.","pos":[0,65]}]},{"pos":[59387,59465],"content":"The string representation of the rectangle, in the form \"x, y, width, height\".","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of the rectangle, in the form \"x, y, width, height\".","pos":[0,78]}]},{"pos":[59529,59553],"content":"The resulting rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting rectangle.","pos":[0,24]}]},{"pos":[59893,59950],"content":"Gets the x-axis value of the right side of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the x-axis value of the right side of the rectangle.","pos":[0,57]}]},{"pos":[59962,60124],"content":"The x-axis value of the right side of the rectangle is equal to the sum of the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Width%2A> properties.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The x-axis value of the right side of the rectangle is equal to the sum of the &lt;xref:System.Windows.Rect.X%2A&gt; and &lt;xref:System.Windows.Rect.Width%2A&gt; properties.","pos":[0,162],"source":"The x-axis value of the right side of the rectangle is equal to the sum of the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Width%2A> properties."}]},{"pos":[60679,60731],"content":"The x-axis value of the right side of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-axis value of the right side of the rectangle.","pos":[0,52]}]},{"pos":[61172,61249],"content":"Multiplies the size of the current rectangle by the specified x and y values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies the size of the current rectangle by the specified x and y values.","pos":[0,77]}]},{"pos":[61698,61734],"content":"The scale factor in the x-direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scale factor in the x-direction.","pos":[0,36]}]},{"pos":[61797,61833],"content":"The scale factor in the y-direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scale factor in the y-direction.","pos":[0,36]}]},{"pos":[62168,62219],"content":"Gets or sets the width and height of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the width and height of the rectangle.","pos":[0,51]}]},{"pos":[63475,63581],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.Size\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the width and height of the rectangle.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.Size\"></xref> structure that specifies the width and height of the rectangle."},{"pos":[63744,63806],"content":"Size is set on an <xref:System.Windows.Rect.Empty*> rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Size is set on an &lt;xref:System.Windows.Rect.Empty*&gt; rectangle.","pos":[0,62],"source":"Size is set on an <xref:System.Windows.Rect.Empty*> rectangle."}]},{"pos":[64365,64434],"content":"Formats the value of the current instance using the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Formats the value of the current instance using the specified format.","pos":[0,69]}]},{"pos":[64446,64622],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Rect> instance is cast to an <xref:System.IFormattable> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Rect> instance is cast to an <xref:System.IFormattable> interface.","pos":[0,176],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Windows.Rect&gt; instance is cast to an &lt;xref:System.IFormattable&gt; interface.","pos":[60,176],"source":" It can be used only when the <xref:System.Windows.Rect> instance is cast to an <xref:System.IFormattable> interface."}]}]},{"pos":[64797,65041],"content":"The format to use.       -or-       A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) to use the default format defined for the type of the <xref:System.IFormattable> implementation.","needQuote":false,"needEscape":true,"nodes":[{"content":"The format to use.","pos":[0,18]},{"content":"-or-       A null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic) to use the default format defined for the type of the &lt;xref:System.IFormattable&gt; implementation.","pos":[25,234],"source":"       -or-       A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) to use the default format defined for the type of the <xref:System.IFormattable> implementation."}]},{"pos":[65117,65384],"content":"The provider to use to format the value.       -or-       A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.","needQuote":false,"needEscape":true,"nodes":[{"content":"The provider to use to format the value.","pos":[0,40]},{"content":"-or-       A null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.","pos":[47,257],"source":"       -or-       A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system."}]},{"pos":[65443,65484],"content":"A string representation of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representation of the rectangle.","pos":[0,41]}]},{"pos":[65837,65890],"content":"Gets the y-axis position of the top of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the y-axis position of the top of the rectangle.","pos":[0,53]}]},{"pos":[65902,65994],"content":"Getting this property is equivalent to getting the <xref:System.Windows.Rect.Y%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Getting this property is equivalent to getting the &lt;xref:System.Windows.Rect.Y%2A&gt; property.","pos":[0,92],"source":"Getting this property is equivalent to getting the <xref:System.Windows.Rect.Y%2A> property."}]},{"pos":[66547,66595],"content":"The y-axis position of the top of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-axis position of the top of the rectangle.","pos":[0,48]}]},{"pos":[66943,67001],"content":"Gets the position of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the position of the top-left corner of the rectangle.","pos":[0,58]}]},{"pos":[67013,67145],"content":"The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The position of the top-left corner of the rectangle is equal to (&lt;xref:System.Windows.Rect.X%2A&gt;, &lt;xref:System.Windows.Rect.Y%2A&gt;).","pos":[0,132],"source":"The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>)."}]},{"pos":[67723,67776],"content":"The position of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the top-left corner of the rectangle.","pos":[0,53]}]},{"pos":[68133,68192],"content":"Gets the position of the top-right corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the position of the top-right corner of the rectangle.","pos":[0,59]}]},{"pos":[68204,68375],"content":"The position of the top-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The position of the top-right corner of the rectangle is equal to (&lt;xref:System.Windows.Rect.X%2A&gt; + &lt;xref:System.Windows.Rect.Width%2A&gt;, &lt;xref:System.Windows.Rect.Y%2A&gt;).","pos":[0,171],"source":"The position of the top-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>)."}]},{"pos":[68954,69008],"content":"The position of the top-right corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the top-right corner of the rectangle.","pos":[0,54]}]},{"pos":[69370,69419],"content":"Returns a string representation of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representation of the rectangle.","pos":[0,49]}]},{"pos":[69863,70079],"content":"A string representation of the current rectangle. The string has the following form: \"<xref:System.Windows.Rect.X*>,<xref:System.Windows.Rect.Y*>,<xref:System.Windows.Rect.Width*>,<xref:System.Windows.Rect.Height*>\".","needQuote":false,"needEscape":true,"nodes":[{"content":"A string representation of the current rectangle.","pos":[0,49]},{"content":"The string has the following form: \"&lt;xref:System.Windows.Rect.X<bpt id=\"p1\">*</bpt>&gt;,&lt;xref:System.Windows.Rect.Y<ept id=\"p1\">*</ept>&gt;,&lt;xref:System.Windows.Rect.Width<bpt id=\"p2\">*</bpt>&gt;,&lt;xref:System.Windows.Rect.Height<ept id=\"p2\">*</ept>&gt;\".","pos":[50,216],"source":" The string has the following form: \"<xref:System.Windows.Rect.X*>,<xref:System.Windows.Rect.Y*>,<xref:System.Windows.Rect.Width*>,<xref:System.Windows.Rect.Height*>\"."}]},{"pos":[70535,70623],"content":"Returns a string representation of the rectangle by using the specified format provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representation of the rectangle by using the specified format provider.","pos":[0,88]}]},{"pos":[70787,70827],"content":"Culture-specific formatting information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Culture-specific formatting information.","pos":[0,40]}]},{"pos":[70885,70986],"content":"A string representation of the current rectangle that is determined by the specified format provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representation of the current rectangle that is determined by the specified format provider.","pos":[0,101]}]},{"pos":[71429,71487],"content":"Transforms the rectangle by applying the specified matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms the rectangle by applying the specified matrix.","pos":[0,58]}]},{"pos":[72000,72052],"content":"A matrix that specifies the transformation to apply.","needQuote":true,"needEscape":true,"nodes":[{"content":"A matrix that specifies the transformation to apply.","pos":[0,52]}]},{"pos":[72551,72648],"content":"Returns the rectangle that results from applying the specified matrix to the specified rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the rectangle that results from applying the specified matrix to the specified rectangle.","pos":[0,97]}]},{"pos":[73243,73296],"content":"A rectangle that is the basis for the transformation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A rectangle that is the basis for the transformation.","pos":[0,53]}]},{"pos":[73373,73425],"content":"A matrix that specifies the transformation to apply.","needQuote":true,"needEscape":true,"nodes":[{"content":"A matrix that specifies the transformation to apply.","pos":[0,52]}]},{"pos":[73489,73535],"content":"The rectangle that results from the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle that results from the operation.","pos":[0,46]}]},{"pos":[73942,74018],"content":"Expands the current rectangle exactly enough to contain the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Expands the current rectangle exactly enough to contain the specified point.","pos":[0,76]}]},{"pos":[74495,74516],"content":"The point to include.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point to include.","pos":[0,21]}]},{"pos":[74914,74994],"content":"Expands the current rectangle exactly enough to contain the specified rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Expands the current rectangle exactly enough to contain the specified rectangle.","pos":[0,80]}]},{"pos":[75455,75480],"content":"The rectangle to include.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle to include.","pos":[0,25]}]},{"pos":[75938,76046],"content":"Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.","pos":[0,108]}]},{"pos":[76595,76620],"content":"The rectangle to include.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle to include.","pos":[0,25]}]},{"pos":[76689,76710],"content":"The point to include.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point to include.","pos":[0,21]}]},{"pos":[76774,76874],"content":"A rectangle that is exactly large enough to contain the specified rectangle and the specified point.","needQuote":true,"needEscape":true,"nodes":[{"content":"A rectangle that is exactly large enough to contain the specified rectangle and the specified point.","pos":[0,100]}]},{"pos":[77327,77416],"content":"Creates a rectangle that is exactly large enough to contain the two specified rectangles.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a rectangle that is exactly large enough to contain the two specified rectangles.","pos":[0,89]}]},{"pos":[77929,77960],"content":"The first rectangle to include.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first rectangle to include.","pos":[0,31]}]},{"pos":[78028,78060],"content":"The second rectangle to include.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second rectangle to include.","pos":[0,32]}]},{"pos":[78124,78148],"content":"The resulting rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting rectangle.","pos":[0,24]}]},{"pos":[78488,78528],"content":"Gets or sets the width of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the width of the rectangle.","pos":[0,40]}]},{"pos":[78540,78740],"content":"The <xref:System.Windows.Rect.Empty%2A> rectangle has a Width of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Width cannot not be changed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Windows.Rect.Empty%2A> rectangle has a Width of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Width cannot not be changed.","pos":[0,200],"nodes":[{"content":"The &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle has a Width of &lt;xref:System.Double.NegativeInfinity&gt;.","pos":[0,103],"source":"The <xref:System.Windows.Rect.Empty%2A> rectangle has a Width of <xref:System.Double.NegativeInfinity>."},{"content":"The &lt;xref:System.Windows.Rect.Empty%2A&gt; rectangle is read-only; its Width cannot not be changed.","pos":[104,200],"source":" The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Width cannot not be changed."}]}]},{"pos":[79964,80043],"content":"A positive number that represents the width of the rectangle. The default is 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"A positive number that represents the width of the rectangle. The default is 0.","pos":[0,79],"nodes":[{"content":"A positive number that represents the width of the rectangle.","pos":[0,61]},{"content":"The default is 0.","pos":[62,79]}]}]},{"pos":[80191,80224],"content":"Width is set to a negative value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width is set to a negative value.","pos":[0,33]}]},{"pos":[80335,80398],"content":"Width is set on an <xref:System.Windows.Rect.Empty*> rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width is set on an &lt;xref:System.Windows.Rect.Empty*&gt; rectangle.","pos":[0,63],"source":"Width is set on an <xref:System.Windows.Rect.Empty*> rectangle."}]},{"pos":[80662,80726],"content":"Gets or sets the x-axis value of the left side of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the x-axis value of the left side of the rectangle.","pos":[0,64]}]},{"pos":[80738,80833],"content":"Getting this property is equivalent to getting the <xref:System.Windows.Rect.Left%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Getting this property is equivalent to getting the &lt;xref:System.Windows.Rect.Left%2A&gt; property.","pos":[0,95],"source":"Getting this property is equivalent to getting the <xref:System.Windows.Rect.Left%2A> property."}]},{"pos":[82053,82104],"content":"The x-axis value of the left side of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-axis value of the left side of the rectangle.","pos":[0,51]}]},{"pos":[82264,82323],"content":"X is set on an <xref:System.Windows.Rect.Empty*> rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"X is set on an &lt;xref:System.Windows.Rect.Empty*&gt; rectangle.","pos":[0,59],"source":"X is set on an <xref:System.Windows.Rect.Empty*> rectangle."}]},{"pos":[82587,82650],"content":"Gets or sets the y-axis value of the top side of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the y-axis value of the top side of the rectangle.","pos":[0,63]}]},{"pos":[82662,82756],"content":"Getting this property is equivalent to getting the <xref:System.Windows.Rect.Top%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Getting this property is equivalent to getting the &lt;xref:System.Windows.Rect.Top%2A&gt; property.","pos":[0,94],"source":"Getting this property is equivalent to getting the <xref:System.Windows.Rect.Top%2A> property."}]},{"pos":[83976,84026],"content":"The y-axis value of the top side of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-axis value of the top side of the rectangle.","pos":[0,50]}]},{"pos":[84186,84245],"content":"Y is set on an <xref:System.Windows.Rect.Empty*> rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Y is set on an &lt;xref:System.Windows.Rect.Empty*&gt; rectangle.","pos":[0,59],"source":"Y is set on an <xref:System.Windows.Rect.Empty*> rectangle."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Rect\n  id: Rect\n  children:\n  - System.Windows.Rect.#ctor(System.Windows.Size)\n  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)\n  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)\n  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)\n  - System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)\n  - System.Windows.Rect.Bottom\n  - System.Windows.Rect.BottomLeft\n  - System.Windows.Rect.BottomRight\n  - System.Windows.Rect.Contains(System.Windows.Point)\n  - System.Windows.Rect.Contains(System.Windows.Rect)\n  - System.Windows.Rect.Contains(System.Double,System.Double)\n  - System.Windows.Rect.Empty\n  - System.Windows.Rect.Equals(System.Object)\n  - System.Windows.Rect.Equals(System.Windows.Rect)\n  - System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)\n  - System.Windows.Rect.GetHashCode\n  - System.Windows.Rect.Height\n  - System.Windows.Rect.Inflate(System.Windows.Size)\n  - System.Windows.Rect.Inflate(System.Double,System.Double)\n  - System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)\n  - System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)\n  - System.Windows.Rect.Intersect(System.Windows.Rect)\n  - System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)\n  - System.Windows.Rect.IntersectsWith(System.Windows.Rect)\n  - System.Windows.Rect.IsEmpty\n  - System.Windows.Rect.Left\n  - System.Windows.Rect.Location\n  - System.Windows.Rect.Offset(System.Windows.Vector)\n  - System.Windows.Rect.Offset(System.Double,System.Double)\n  - System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)\n  - System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)\n  - System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)\n  - System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)\n  - System.Windows.Rect.Parse(System.String)\n  - System.Windows.Rect.Right\n  - System.Windows.Rect.Scale(System.Double,System.Double)\n  - System.Windows.Rect.Size\n  - System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  - System.Windows.Rect.Top\n  - System.Windows.Rect.TopLeft\n  - System.Windows.Rect.TopRight\n  - System.Windows.Rect.ToString\n  - System.Windows.Rect.ToString(System.IFormatProvider)\n  - System.Windows.Rect.Transform(System.Windows.Media.Matrix)\n  - System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)\n  - System.Windows.Rect.Union(System.Windows.Point)\n  - System.Windows.Rect.Union(System.Windows.Rect)\n  - System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)\n  - System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)\n  - System.Windows.Rect.Width\n  - System.Windows.Rect.X\n  - System.Windows.Rect.Y\n  langs:\n  - csharp\n  name: Rect\n  nameWithType: Rect\n  fullName: System.Windows.Rect\n  type: Struct\n  summary: Describes the width, height, and location of a rectangle.\n  remarks: \"<a name=\\\"xamlAttributeUsage_Duration\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"x,y,width,height\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_MinWidth\\\"></a>   \\n## XAML Values  \\n *x*  \\n <xref:System.Double?displayProperty=fullName>  \\n  \\n The x-coordinate location of the left side of the rectangle.  \\n  \\n *y*  \\n <xref:System.Double?displayProperty=fullName>  \\n  \\n The y-coordinate location of the top side of the rectangle.  \\n  \\n *width*  \\n <xref:System.Double?displayProperty=fullName>  \\n  \\n A non-negative value that represents the <xref:System.Windows.Rect.Width%2A> of the rectangle.  \\n  \\n *height*  \\n <xref:System.Double?displayProperty=fullName>  \\n  \\n A non-negative value that represents the <xref:System.Windows.Rect.Height%2A> of the rectangle.\"\n  example:\n  - \"The following example shows how to use a Rect structure to specify the dimensions and location of a rectangle using XAML.  \\n  \\n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \\n  \\n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.RectConverter))]\n\n      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.RectValueSerializer))]\n\n      public struct Rect : IFormattable\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IFormattable\n  platform:\n  - net462\n- uid: System.Windows.Rect.#ctor(System.Windows.Size)\n  id: '#ctor(System.Windows.Size)'\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Rect(Size)\n  nameWithType: Rect.Rect(Size)\n  fullName: System.Windows.Rect.Rect(Size)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that is of the specified size and is located at (0,0).\n  remarks: ''\n  example:\n  - \"The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample2_csharp)]\"\n  syntax:\n    content: public Rect (System.Windows.Size size);\n    parameters:\n    - id: size\n      type: System.Windows.Size\n      description: A <xref href=\"System.Windows.Size\"></xref> structure that specifies the width and height of the rectangle.\n  overload: System.Windows.Rect.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)\n  id: '#ctor(System.Windows.Point,System.Windows.Point)'\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Rect(Point,Point)\n  nameWithType: Rect.Rect(Point,Point)\n  fullName: System.Windows.Rect.Rect(Point,Point)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that is exactly large enough to contain the two specified points.\n  remarks: ''\n  example:\n  - \"The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample3_csharp)]\"\n  syntax:\n    content: public Rect (System.Windows.Point point1, System.Windows.Point point2);\n    parameters:\n    - id: point1\n      type: System.Windows.Point\n      description: The first point that the new rectangle must contain.\n    - id: point2\n      type: System.Windows.Point\n      description: The second point that the new rectangle must contain.\n  overload: System.Windows.Rect.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)\n  id: '#ctor(System.Windows.Point,System.Windows.Size)'\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Rect(Point,Size)\n  nameWithType: Rect.Rect(Point,Size)\n  fullName: System.Windows.Rect.Rect(Point,Size)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that has the specified top-left corner location and the specified width and height.\n  remarks: ''\n  example:\n  - \"The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample4_csharp)]\"\n  syntax:\n    content: public Rect (System.Windows.Point location, System.Windows.Size size);\n    parameters:\n    - id: location\n      type: System.Windows.Point\n      description: A point that specifies the location of the top-left corner of the rectangle.\n    - id: size\n      type: System.Windows.Size\n      description: A <xref href=\"System.Windows.Size\"></xref> structure that specifies the width and height of the rectangle.\n  overload: System.Windows.Rect.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)\n  id: '#ctor(System.Windows.Point,System.Windows.Vector)'\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Rect(Point,Vector)\n  nameWithType: Rect.Rect(Point,Vector)\n  fullName: System.Windows.Rect.Rect(Point,Vector)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample5_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample5_csharp)]\"\n  syntax:\n    content: public Rect (System.Windows.Point point, System.Windows.Vector vector);\n    parameters:\n    - id: point\n      type: System.Windows.Point\n      description: The first point the rectangle must contain.\n    - id: vector\n      type: System.Windows.Vector\n      description: The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.\n  overload: System.Windows.Rect.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Rect(Double,Double,Double,Double)\n  nameWithType: Rect.Rect(Double,Double,Double,Double)\n  fullName: System.Windows.Rect.Rect(Double,Double,Double,Double)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Rect\"></xref> structure that has the specified x-coordinate, y-coordinate, width, and height.\n  remarks: \"The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample6_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample6_csharp)]\"\n  syntax:\n    content: public Rect (double x, double y, double width, double height);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The x-coordinate of the top-left corner of the rectangle.\n    - id: y\n      type: System.Double\n      description: The y-coordinate of the top-left corner of the rectangle.\n    - id: width\n      type: System.Double\n      description: The width of the rectangle.\n    - id: height\n      type: System.Double\n      description: The height of the rectangle.\n  overload: System.Windows.Rect.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>width</code> is a negative value.  \\n  \\n -or-  \\n  \\n <code>height</code> is a negative value.\"\n  platform:\n  - net462\n- uid: System.Windows.Rect.Bottom\n  id: Bottom\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Bottom\n  nameWithType: Rect.Bottom\n  fullName: System.Windows.Rect.Bottom\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the y-axis value of the bottom of the rectangle.\n  remarks: The y-axis value of the bottom of the rectangle is equal to the sum of the <xref:System.Windows.Rect.Y%2A> and <xref:System.Windows.Rect.Height%2A> properties.\n  example:\n  - \"The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public double Bottom { get; }\n    return:\n      type: System.Double\n      description: The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <xref:System.Double> .\n  overload: System.Windows.Rect.Bottom*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.BottomLeft\n  id: BottomLeft\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: BottomLeft\n  nameWithType: Rect.BottomLeft\n  fullName: System.Windows.Rect.BottomLeft\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the position of the bottom-left corner of the rectangle\n  remarks: The position of the bottom-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).\n  example:\n  - \"The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public System.Windows.Point BottomLeft { get; }\n    return:\n      type: System.Windows.Point\n      description: The position of the bottom-left corner of the rectangle.\n  overload: System.Windows.Rect.BottomLeft*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.BottomRight\n  id: BottomRight\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: BottomRight\n  nameWithType: Rect.BottomRight\n  fullName: System.Windows.Rect.BottomRight\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the position of the bottom-right corner of the rectangle.\n  remarks: The position of the bottom-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).\n  example:\n  - \"The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public System.Windows.Point BottomRight { get; }\n    return:\n      type: System.Windows.Point\n      description: The position of the bottom-right corner of the rectangle.\n  overload: System.Windows.Rect.BottomRight*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Contains(System.Windows.Point)\n  id: Contains(System.Windows.Point)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Contains(Point)\n  nameWithType: Rect.Contains(Point)\n  fullName: System.Windows.Rect.Contains(Point)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Indicates whether the rectangle contains the specified point.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Contains method to determine if the rectangle contains the specified <xref:System.Windows.Point>.  \\n  \\n [!code-cs[RectExamples_snip#ContainsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample1_csharp)]\"\n  syntax:\n    content: public bool Contains (System.Windows.Point point);\n    parameters:\n    - id: point\n      type: System.Windows.Point\n      description: The point to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle contains the specified point; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Contains(System.Windows.Rect)\n  id: Contains(System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Contains(Rect)\n  nameWithType: Rect.Contains(Rect)\n  fullName: System.Windows.Rect.Contains(Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Indicates whether the rectangle contains the specified rectangle.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Contains method to determine if one rectangle is contained by another rectangle.  \\n  \\n [!code-cs[RectExamples_snip#ContainsExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample2_csharp)]\"\n  syntax:\n    content: public bool Contains (System.Windows.Rect rect);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The rectangle to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>rect</code> is entirely contained by the rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Contains(System.Double,System.Double)\n  id: Contains(System.Double,System.Double)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Contains(Double,Double)\n  nameWithType: Rect.Contains(Double,Double)\n  fullName: System.Windows.Rect.Contains(Double,Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Contains method to determine if the rectangle contains the point specified by the given x-coordinate and y-coordinate.  \\n  \\n [!code-cs[RectExamples_snip#ContainsExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample3_csharp)]\"\n  syntax:\n    content: public bool Contains (double x, double y);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The x-coordinate of the point to check.\n    - id: y\n      type: System.Double\n      description: The y-coordinate of the point to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if (<code>x</code>, <code>y</code>) is contained by the rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Empty\n  id: Empty\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Empty\n  nameWithType: Rect.Empty\n  fullName: System.Windows.Rect.Empty\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets a special value that represents a rectangle with no position or area.\n  remarks: Avoid mathematical computations involving empty rectangles. Because both <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> are infinite values, processor operations are severely impaired by these operations. Comparisons involving these values will not affect application performance.\n  syntax:\n    content: public static System.Windows.Rect Empty { get; }\n    return:\n      type: System.Windows.Rect\n      description: The empty rectangle, which has <xref:System.Windows.Rect.X*> and <xref:System.Windows.Rect.Y*> property values of <xref:System.Double.PositiveInfinity>, and has <xref:System.Windows.Rect.Width*> and <xref:System.Windows.Rect.Height*> property values of <xref:System.Double.NegativeInfinity>.\n  overload: System.Windows.Rect.Empty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Rect.Equals(Object)\n  fullName: System.Windows.Rect.Equals(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Indicates whether the specified object is equal to the current rectangle.\n  remarks: \"This operation tests for object equality.  \\n  \\n In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  \\n  \\n> [!NOTE]\\n>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.\"\n  example:\n  - \"The following example shows how to use the Equals method to determine if a rectangle is equal to a specified object.  \\n  \\n [!code-cs[RectExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample1_csharp)]\"\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to compare to the current rectangle.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>o</code> is a <xref href=\"System.Windows.Rect\"></xref> and has the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values as the current rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Equals(System.Windows.Rect)\n  id: Equals(System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Equals(Rect)\n  nameWithType: Rect.Equals(Rect)\n  fullName: System.Windows.Rect.Equals(Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Indicates whether the specified rectangle is equal to the current rectangle.\n  remarks: \"This operation tests for object equality.  \\n  \\n In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  \\n  \\n> [!NOTE]\\n>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.\"\n  example:\n  - \"The following example shows how to use the Equals method to determine if a rectangle is equal to a specified rectangle.  \\n  \\n [!code-cs[RectExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample1_csharp)]\"\n  syntax:\n    content: public bool Equals (System.Windows.Rect value);\n    parameters:\n    - id: value\n      type: System.Windows.Rect\n      description: The rectangle to compare to the current rectangle.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified rectangle has the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values as the current rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)\n  id: Equals(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Equals(Rect,Rect)\n  nameWithType: Rect.Equals(Rect,Rect)\n  fullName: System.Windows.Rect.Equals(Rect,Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Indicates whether the specified rectangles are equal.\n  remarks: \"This operation tests for object equality.  \\n  \\n In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  \\n  \\n> [!NOTE]\\n>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.\"\n  example:\n  - \"The following example shows how to use the Equals method to determine if one rectangle is equal to another.  \\n  \\n [!code-cs[RectExamples_snip#EqualsExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample2_csharp)]\"\n  syntax:\n    content: public static bool Equals (System.Windows.Rect rect1, System.Windows.Rect rect2);\n    parameters:\n    - id: rect1\n      type: System.Windows.Rect\n      description: The first rectangle to compare.\n    - id: rect2\n      type: System.Windows.Rect\n      description: The second rectangle to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangles have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.GetHashCode\n  id: GetHashCode\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Rect.GetHashCode()\n  fullName: System.Windows.Rect.GetHashCode()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a hash code for the rectangle.\n  remarks: This method creates a hash code by using the <xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>, <xref:System.Windows.Rect.Width%2A>, and <xref:System.Windows.Rect.Height%2A> property values.\n  example:\n  - \"The following example shows how to use the GetHashCode method to get the hash code of a <xref:System.Windows.Rect>.  \\n  \\n [!code-cs[RectExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#gethashcodeexample_csharp)]\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Windows.Rect\"></xref> structure.\n  overload: System.Windows.Rect.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Height\n  id: Height\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Height\n  nameWithType: Rect.Height\n  fullName: System.Windows.Rect.Height\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the height of the rectangle.\n  remarks: The <xref:System.Windows.Rect.Empty%2A> rectangle has a Height of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Height cannot not be changed.\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \\n  \\n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \\n  \\n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public double Height { get; set; }\n    return:\n      type: System.Double\n      description: A positive number that represents the height of the rectangle. The default is 0.\n  overload: System.Windows.Rect.Height*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Height is set to a negative value.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Height is set on an <xref:System.Windows.Rect.Empty*> rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Inflate(System.Windows.Size)\n  id: Inflate(System.Windows.Size)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Inflate(Size)\n  nameWithType: Rect.Inflate(Size)\n  fullName: System.Windows.Rect.Inflate(Size)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Expands the rectangle by using the specified <xref href=\"System.Windows.Size\"></xref>, in all directions.\n  remarks: The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.\n  example:\n  - \"The following example shows how to use the Inflate method to increase the size of a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#InflateExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample1_csharp)]\"\n  syntax:\n    content: public void Inflate (System.Windows.Size size);\n    parameters:\n    - id: size\n      type: System.Windows.Size\n      description: Specifies the amount to expand the rectangle. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Width*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Left*> and <xref:System.Windows.Rect.Right*> properties. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Height*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Top*> and <xref:System.Windows.Rect.Bottom*> properties.\n  overload: System.Windows.Rect.Inflate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Inflate(System.Double,System.Double)\n  id: Inflate(System.Double,System.Double)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Inflate(Double,Double)\n  nameWithType: Rect.Inflate(Double,Double)\n  fullName: System.Windows.Rect.Inflate(Double,Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.\n  remarks: \"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.  \\n  \\n If the specified width or height shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>—giving the rectangle a negative area—the rectangle becomes the <xref:System.Windows.Rect.Empty%2A> rectangle.\"\n  example:\n  - \"The following example shows how to use the Inflate method to change the size of a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#InflateExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample2_csharp)]\"\n  syntax:\n    content: public void Inflate (double width, double height);\n    parameters:\n    - id: width\n      type: System.Double\n      description: The amount by which to expand or shrink the left and right sides of the rectangle.\n    - id: height\n      type: System.Double\n      description: The amount by which to expand or shrink the top and bottom sides of the rectangle.\n  overload: System.Windows.Rect.Inflate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)\n  id: Inflate(System.Windows.Rect,System.Windows.Size)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Inflate(Rect,Size)\n  nameWithType: Rect.Inflate(Rect,Size)\n  fullName: System.Windows.Rect.Inflate(Rect,Size)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the rectangle that results from expanding the specified rectangle by the specified <xref href=\"System.Windows.Size\"></xref>, in all directions.\n  remarks: The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.\n  example:\n  - \"The following example shows how to use the Inflate method to change the size of a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#InflateExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample3_csharp)]\"\n  syntax:\n    content: public static System.Windows.Rect Inflate (System.Windows.Rect rect, System.Windows.Size size);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The <xref href=\"System.Windows.Rect\"></xref> structure to modify.\n    - id: size\n      type: System.Windows.Size\n      description: Specifies the amount to expand the rectangle. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Width*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Left*> and <xref:System.Windows.Rect.Right*> properties. The <xref href=\"System.Windows.Size\"></xref> structure's <xref:System.Windows.Size.Height*> property specifies the amount to increase the rectangle's <xref:System.Windows.Rect.Top*> and <xref:System.Windows.Rect.Bottom*> properties.\n    return:\n      type: System.Windows.Rect\n      description: The resulting rectangle.\n  overload: System.Windows.Rect.Inflate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>rect</code> is an &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)\n  id: Inflate(System.Windows.Rect,System.Double,System.Double)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Inflate(Rect,Double,Double)\n  nameWithType: Rect.Inflate(Rect,Double,Double)\n  fullName: System.Windows.Rect.Inflate(Rect,Double,Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.\n  remarks: \"The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.  \\n  \\n If the specified width or height modifiers shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>—giving the rectangle a negative area—this method returns <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example shows how to use the Inflate method to change the size of a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#InflateExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample4_csharp)]\"\n  syntax:\n    content: public static System.Windows.Rect Inflate (System.Windows.Rect rect, double width, double height);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The <xref href=\"System.Windows.Rect\"></xref> structure to modify.\n    - id: width\n      type: System.Double\n      description: The amount by which to expand or shrink the left and right sides of the rectangle.\n    - id: height\n      type: System.Double\n      description: The amount by which to expand or shrink the top and bottom sides of the rectangle.\n    return:\n      type: System.Windows.Rect\n      description: The resulting rectangle.\n  overload: System.Windows.Rect.Inflate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>rect</code> is an &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Intersect(System.Windows.Rect)\n  id: Intersect(System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Intersect(Rect)\n  nameWithType: Rect.Intersect(Rect)\n  fullName: System.Windows.Rect.Intersect(Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.\n  remarks: If no intersection exists, the current rectangle becomes <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.\n  example:\n  - \"The following example shows how to use the Intersect method to find the intersection of two rectangles and store the result as a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#IntersectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample1_csharp)]\"\n  syntax:\n    content: public void Intersect (System.Windows.Rect rect);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The rectangle to intersect with the current rectangle.\n  overload: System.Windows.Rect.Intersect*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)\n  id: Intersect(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Intersect(Rect,Rect)\n  nameWithType: Rect.Intersect(Rect,Rect)\n  fullName: System.Windows.Rect.Intersect(Rect,Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the intersection of the specified rectangles.\n  remarks: \"The following example shows how to use the Intersect method to find the intersection of two rectangles.  \\n  \\n [!code-cs[RectExamples_snip#IntersectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample2_csharp)]\"\n  syntax:\n    content: public static System.Windows.Rect Intersect (System.Windows.Rect rect1, System.Windows.Rect rect2);\n    parameters:\n    - id: rect1\n      type: System.Windows.Rect\n      description: The first rectangle to compare.\n    - id: rect2\n      type: System.Windows.Rect\n      description: The second rectangle to compare.\n    return:\n      type: System.Windows.Rect\n      description: The intersection of the two rectangles, or &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; if no intersection exists.\n  overload: System.Windows.Rect.Intersect*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.IntersectsWith(System.Windows.Rect)\n  id: IntersectsWith(System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: IntersectsWith(Rect)\n  nameWithType: Rect.IntersectsWith(Rect)\n  fullName: System.Windows.Rect.IntersectsWith(Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Indicates whether the specified rectangle intersects with the current rectangle.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the IntersectsWith method to determine if two rectangles intersect.  \\n  \\n [!code-cs[RectExamples_snip#IntersectsWithExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectswithexample_csharp)]\"\n  syntax:\n    content: public bool IntersectsWith (System.Windows.Rect rect);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The rectangle to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified rectangle intersects with the current rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.IntersectsWith*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.IsEmpty\n  id: IsEmpty\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: Rect.IsEmpty\n  fullName: System.Windows.Rect.IsEmpty\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the rectangle is the <xref:System.Windows.Rect.Empty*> rectangle.\n  remarks: Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <xref:System.Windows.Rect.Empty%2A> rectangle. For more information, see the <xref:System.Windows.Rect.Empty%2A> property.\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle is the <xref:System.Windows.Rect.Empty*> rectangle; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.IsEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Left\n  id: Left\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Left\n  nameWithType: Rect.Left\n  fullName: System.Windows.Rect.Left\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the x-axis value of the left side of the rectangle.\n  remarks: Getting this property is equivalent to getting the <xref:System.Windows.Rect.X%2A> property.\n  example:\n  - \"The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public double Left { get; }\n    return:\n      type: System.Double\n      description: The x-axis value of the left side of the rectangle.\n  overload: System.Windows.Rect.Left*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Location\n  id: Location\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Location\n  nameWithType: Rect.Location\n  fullName: System.Windows.Rect.Location\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the position of the top-left corner of the rectangle.\n  remarks: The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \\n  \\n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \\n  \\n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public System.Windows.Point Location { get; set; }\n    return:\n      type: System.Windows.Point\n      description: The position of the top-left corner of the rectangle. The default is (0, 0).\n  overload: System.Windows.Rect.Location*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Location is set on an <xref:System.Windows.Rect.Empty*> rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Offset(System.Windows.Vector)\n  id: Offset(System.Windows.Vector)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Offset(Vector)\n  nameWithType: Rect.Offset(Vector)\n  fullName: System.Windows.Rect.Offset(Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Moves the rectangle by the specified vector.\n  remarks: \"Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.  \\n  \\n Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.\"\n  example:\n  - \"The following example shows how to use the Offset method to change the position of a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#OffsetExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample1_csharp)]\"\n  syntax:\n    content: public void Offset (System.Windows.Vector offsetVector);\n    parameters:\n    - id: offsetVector\n      type: System.Windows.Vector\n      description: A vector that specifies the horizontal and vertical amounts to move the rectangle.\n  overload: System.Windows.Rect.Offset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Offset(System.Double,System.Double)\n  id: Offset(System.Double,System.Double)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Offset(Double,Double)\n  nameWithType: Rect.Offset(Double,Double)\n  fullName: System.Windows.Rect.Offset(Double,Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Moves the rectangle by the specified horizontal and vertical amounts.\n  remarks: \"Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.  \\n  \\n Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.\"\n  example:\n  - \"The following example shows how to use the Offset method to change the position of a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#OffsetExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample2_csharp)]\"\n  syntax:\n    content: public void Offset (double offsetX, double offsetY);\n    parameters:\n    - id: offsetX\n      type: System.Double\n      description: The amount to move the rectangle horizontally.\n    - id: offsetY\n      type: System.Double\n      description: The amount to move the rectangle vertically.\n  overload: System.Windows.Rect.Offset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)\n  id: Offset(System.Windows.Rect,System.Windows.Vector)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Offset(Rect,Vector)\n  nameWithType: Rect.Offset(Rect,Vector)\n  fullName: System.Windows.Rect.Offset(Rect,Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns a rectangle that is offset from the specified rectangle by using the specified vector.\n  remarks: Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.\n  example:\n  - \"The following example shows how to use the Offset method to change the position of a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#OffsetExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample3_csharp)]\"\n  syntax:\n    content: public static System.Windows.Rect Offset (System.Windows.Rect rect, System.Windows.Vector offsetVector);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The original rectangle.\n    - id: offsetVector\n      type: System.Windows.Vector\n      description: A vector that specifies the horizontal and vertical offsets for the new rectangle.\n    return:\n      type: System.Windows.Rect\n      description: The resulting rectangle.\n  overload: System.Windows.Rect.Offset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>rect</code> is &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)\n  id: Offset(System.Windows.Rect,System.Double,System.Double)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Offset(Rect,Double,Double)\n  nameWithType: Rect.Offset(Rect,Double,Double)\n  fullName: System.Windows.Rect.Offset(Rect,Double,Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.\n  remarks: Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.\n  example:\n  - \"The following example shows how to use the Offset method to change the position of a rectangle.  \\n  \\n [!code-cs[RectExamples_snip#OffsetExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample4_csharp)]\"\n  syntax:\n    content: public static System.Windows.Rect Offset (System.Windows.Rect rect, double offsetX, double offsetY);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The rectangle to move.\n    - id: offsetX\n      type: System.Double\n      description: The horizontal offset for the new rectangle.\n    - id: offsetY\n      type: System.Double\n      description: The vertical offset for the new rectangle.\n    return:\n      type: System.Windows.Rect\n      description: The resulting rectangle.\n  overload: System.Windows.Rect.Offset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>rect</code> is &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)\n  id: op_Equality(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: op_Equality(Rect,Rect)\n  nameWithType: Rect.op_Equality(Rect,Rect)\n  fullName: System.Windows.Rect.op_Equality(Rect,Rect)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two rectangles for exact equality.\n  remarks: \"This operation tests for object equality.  \\n  \\n In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  \\n  \\n> [!NOTE]\\n>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.\"\n  example:\n  - \"The following example shows how to use the Equality operator to determine if two rectangles are exactly equal.  \\n  \\n [!code-cs[RectExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#overloadedequalityoperatorexample)]\\n [!code-vb[RectExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#overloadedequalityoperatorexample)]\"\n  syntax:\n    content: public static bool op_Equality (System.Windows.Rect rect1, System.Windows.Rect rect2);\n    parameters:\n    - id: rect1\n      type: System.Windows.Rect\n      description: The first rectangle to compare.\n    - id: rect2\n      type: System.Windows.Rect\n      description: The second rectangle to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangles have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)\n  id: op_Inequality(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: op_Inequality(Rect,Rect)\n  nameWithType: Rect.op_Inequality(Rect,Rect)\n  fullName: System.Windows.Rect.op_Inequality(Rect,Rect)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two rectangles for inequality.\n  remarks: \"This operation tests for object inequality.  \\n  \\n In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.  \\n  \\n> [!NOTE]\\n>  A rectangle's position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.\"\n  example:\n  - \"The following example shows how to use the Inequality operator to determine if two rectangles are not exactly equal.  \\n  \\n [!code-cs[RectExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#overloadedinequalityoperatorexample)]\\n [!code-vb[RectExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#overloadedinequalityoperatorexample)]\"\n  syntax:\n    content: public static bool op_Inequality (System.Windows.Rect rect1, System.Windows.Rect rect2);\n    parameters:\n    - id: rect1\n      type: System.Windows.Rect\n      description: The first rectangle to compare.\n    - id: rect2\n      type: System.Windows.Rect\n      description: The second rectangle to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangles do not have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Rect.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: Rect.Parse(String)\n  fullName: System.Windows.Rect.Parse(String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a new rectangle from the specified string representation.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Parse method to convert a string representation of a rectangle into a <xref:System.Windows.Rect> structure.  \\n  \\n [!code-cs[RectExamples_snip#ParseExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#parseexample)]\\n [!code-vb[RectExamples_snip#ParseExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#parseexample)]\"\n  syntax:\n    content: public static System.Windows.Rect Parse (string source);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string representation of the rectangle, in the form \"x, y, width, height\".\n    return:\n      type: System.Windows.Rect\n      description: The resulting rectangle.\n  overload: System.Windows.Rect.Parse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Right\n  id: Right\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Right\n  nameWithType: Rect.Right\n  fullName: System.Windows.Rect.Right\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the x-axis value of the right side of the rectangle.\n  remarks: The x-axis value of the right side of the rectangle is equal to the sum of the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Width%2A> properties.\n  example:\n  - \"The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public double Right { get; }\n    return:\n      type: System.Double\n      description: The x-axis value of the right side of the rectangle.\n  overload: System.Windows.Rect.Right*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Scale(System.Double,System.Double)\n  id: Scale(System.Double,System.Double)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Scale(Double,Double)\n  nameWithType: Rect.Scale(Double,Double)\n  fullName: System.Windows.Rect.Scale(Double,Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the size of the current rectangle by the specified x and y values.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Scale method to multiply the width and height of a rectangle by the specified amount.  \\n  \\n [!code-cs[RectExamples_snip#ScaleExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#scaleexample_csharp)]\"\n  syntax:\n    content: public void Scale (double scaleX, double scaleY);\n    parameters:\n    - id: scaleX\n      type: System.Double\n      description: The scale factor in the x-direction.\n    - id: scaleY\n      type: System.Double\n      description: The scale factor in the y-direction.\n  overload: System.Windows.Rect.Scale*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Size\n  id: Size\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Size\n  nameWithType: Rect.Size\n  fullName: System.Windows.Rect.Size\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the width and height of the rectangle.\n  remarks: ''\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \\n  \\n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \\n  \\n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public System.Windows.Size Size { get; set; }\n    return:\n      type: System.Windows.Size\n      description: A <xref href=\"System.Windows.Size\"></xref> structure that specifies the width and height of the rectangle.\n  overload: System.Windows.Rect.Size*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Size is set on an <xref:System.Windows.Rect.Empty*> rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  id: System#IFormattable#ToString(System.String,System.IFormatProvider)\n  isEii: true\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: System.IFormattable.ToString(String,IFormatProvider)\n  nameWithType: Rect.System.IFormattable.ToString(String,IFormatProvider)\n  fullName: System.Windows.Rect.System.IFormattable.ToString(String,IFormatProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Formats the value of the current instance using the specified format.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Rect> instance is cast to an <xref:System.IFormattable> interface.\n  syntax:\n    content: string IFormattable.ToString (string format, IFormatProvider provider);\n    parameters:\n    - id: format\n      type: System.String\n      description: \"The format to use.  \\n  \\n -or-  \\n  \\n A null reference (<xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref> in Visual Basic) to use the default format defined for the type of the <xref:System.IFormattable> implementation.\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"The provider to use to format the value.  \\n  \\n -or-  \\n  \\n A null reference (<xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.\"\n    return:\n      type: System.String\n      description: A string representation of the rectangle.\n  overload: System.Windows.Rect.System#IFormattable#ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Top\n  id: Top\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Top\n  nameWithType: Rect.Top\n  fullName: System.Windows.Rect.Top\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the y-axis position of the top of the rectangle.\n  remarks: Getting this property is equivalent to getting the <xref:System.Windows.Rect.Y%2A> property.\n  example:\n  - \"The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public double Top { get; }\n    return:\n      type: System.Double\n      description: The y-axis position of the top of the rectangle.\n  overload: System.Windows.Rect.Top*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.TopLeft\n  id: TopLeft\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: TopLeft\n  nameWithType: Rect.TopLeft\n  fullName: System.Windows.Rect.TopLeft\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the position of the top-left corner of the rectangle.\n  remarks: The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).\n  example:\n  - \"The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public System.Windows.Point TopLeft { get; }\n    return:\n      type: System.Windows.Point\n      description: The position of the top-left corner of the rectangle.\n  overload: System.Windows.Rect.TopLeft*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.TopRight\n  id: TopRight\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: TopRight\n  nameWithType: Rect.TopRight\n  fullName: System.Windows.Rect.TopRight\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the position of the top-right corner of the rectangle.\n  remarks: The position of the top-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>).\n  example:\n  - \"The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public System.Windows.Point TopRight { get; }\n    return:\n      type: System.Windows.Point\n      description: The position of the top-right corner of the rectangle.\n  overload: System.Windows.Rect.TopRight*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.ToString\n  id: ToString\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Rect.ToString()\n  fullName: System.Windows.Rect.ToString()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns a string representation of the rectangle.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the ToString method to get a string representation of a <xref:System.Windows.Rect> structure.  \\n  \\n [!code-cs[RectExamples_snip#ToStringExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#tostringexample_csharp)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: 'A string representation of the current rectangle. The string has the following form: \"<xref:System.Windows.Rect.X*>,<xref:System.Windows.Rect.Y*>,<xref:System.Windows.Rect.Width*>,<xref:System.Windows.Rect.Height*>\".'\n  overload: System.Windows.Rect.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: ToString(IFormatProvider)\n  nameWithType: Rect.ToString(IFormatProvider)\n  fullName: System.Windows.Rect.ToString(IFormatProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns a string representation of the rectangle by using the specified format provider.\n  syntax:\n    content: public string ToString (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: Culture-specific formatting information.\n    return:\n      type: System.String\n      description: A string representation of the current rectangle that is determined by the specified format provider.\n  overload: System.Windows.Rect.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Transform(System.Windows.Media.Matrix)\n  id: Transform(System.Windows.Media.Matrix)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Transform(Matrix)\n  nameWithType: Rect.Transform(Matrix)\n  fullName: System.Windows.Rect.Transform(Matrix)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Transforms the rectangle by applying the specified matrix.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Transform method to transform a <xref:System.Windows.Rect> structure by using a <xref:System.Windows.Media.Matrix>.  \\n  \\n [!code-cs[RectExamples_snip#TransformExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#transformexample1_csharp)]\"\n  syntax:\n    content: public void Transform (System.Windows.Media.Matrix matrix);\n    parameters:\n    - id: matrix\n      type: System.Windows.Media.Matrix\n      description: A matrix that specifies the transformation to apply.\n  overload: System.Windows.Rect.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)\n  id: Transform(System.Windows.Rect,System.Windows.Media.Matrix)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Transform(Rect,Matrix)\n  nameWithType: Rect.Transform(Rect,Matrix)\n  fullName: System.Windows.Rect.Transform(Rect,Matrix)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the rectangle that results from applying the specified matrix to the specified rectangle.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Transform method to create a new <xref:System.Windows.Rect> structure that results from applying a <xref:System.Windows.Media.Matrix> to an existing rectangle.  \\n  \\n [!code-cs[RectExamples_snip#TransformExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#transformexample2_csharp)]\"\n  syntax:\n    content: public static System.Windows.Rect Transform (System.Windows.Rect rect, System.Windows.Media.Matrix matrix);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: A rectangle that is the basis for the transformation.\n    - id: matrix\n      type: System.Windows.Media.Matrix\n      description: A matrix that specifies the transformation to apply.\n    return:\n      type: System.Windows.Rect\n      description: The rectangle that results from the operation.\n  overload: System.Windows.Rect.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Union(System.Windows.Point)\n  id: Union(System.Windows.Point)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Union(Point)\n  nameWithType: Rect.Union(Point)\n  fullName: System.Windows.Rect.Union(Point)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Expands the current rectangle exactly enough to contain the specified point.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Union method to expand the current rectangle exactly enough to contain a given <xref:System.Windows.Point>.  \\n  \\n [!code-cs[RectExamples_snip#UnionExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample1_csharp)]\"\n  syntax:\n    content: public void Union (System.Windows.Point point);\n    parameters:\n    - id: point\n      type: System.Windows.Point\n      description: The point to include.\n  overload: System.Windows.Rect.Union*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Union(System.Windows.Rect)\n  id: Union(System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Union(Rect)\n  nameWithType: Rect.Union(Rect)\n  fullName: System.Windows.Rect.Union(Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Expands the current rectangle exactly enough to contain the specified rectangle.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Union method to expand the current rectangle exactly enough to contain the specified rectangle.  \\n  \\n [!code-cs[RectExamples_snip#UnionExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample2_csharp)]\"\n  syntax:\n    content: public void Union (System.Windows.Rect rect);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The rectangle to include.\n  overload: System.Windows.Rect.Union*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)\n  id: Union(System.Windows.Rect,System.Windows.Point)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Union(Rect,Point)\n  nameWithType: Rect.Union(Rect,Point)\n  fullName: System.Windows.Rect.Union(Rect,Point)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain a given rectangle and a given <xref:System.Windows.Point>.  \\n  \\n [!code-cs[RectExamples_snip#UnionExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample3_csharp)]\"\n  syntax:\n    content: public static System.Windows.Rect Union (System.Windows.Rect rect, System.Windows.Point point);\n    parameters:\n    - id: rect\n      type: System.Windows.Rect\n      description: The rectangle to include.\n    - id: point\n      type: System.Windows.Point\n      description: The point to include.\n    return:\n      type: System.Windows.Rect\n      description: A rectangle that is exactly large enough to contain the specified rectangle and the specified point.\n  overload: System.Windows.Rect.Union*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)\n  id: Union(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Union(Rect,Rect)\n  nameWithType: Rect.Union(Rect,Rect)\n  fullName: System.Windows.Rect.Union(Rect,Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a rectangle that is exactly large enough to contain the two specified rectangles.\n  remarks: ''\n  example:\n  - \"The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain two given rectangles.  \\n  \\n [!code-cs[RectExamples_snip#UnionExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample4_csharp)]\"\n  syntax:\n    content: public static System.Windows.Rect Union (System.Windows.Rect rect1, System.Windows.Rect rect2);\n    parameters:\n    - id: rect1\n      type: System.Windows.Rect\n      description: The first rectangle to include.\n    - id: rect2\n      type: System.Windows.Rect\n      description: The second rectangle to include.\n    return:\n      type: System.Windows.Rect\n      description: The resulting rectangle.\n  overload: System.Windows.Rect.Union*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Rect.Width\n  id: Width\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Width\n  nameWithType: Rect.Width\n  fullName: System.Windows.Rect.Width\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the width of the rectangle.\n  remarks: The <xref:System.Windows.Rect.Empty%2A> rectangle has a Width of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Width cannot not be changed.\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \\n  \\n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \\n  \\n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public double Width { get; set; }\n    return:\n      type: System.Double\n      description: A positive number that represents the width of the rectangle. The default is 0.\n  overload: System.Windows.Rect.Width*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Width is set to a negative value.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Width is set on an <xref:System.Windows.Rect.Empty*> rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.X\n  id: X\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: X\n  nameWithType: Rect.X\n  fullName: System.Windows.Rect.X\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the x-axis value of the left side of the rectangle.\n  remarks: Getting this property is equivalent to getting the <xref:System.Windows.Rect.Left%2A> property.\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \\n  \\n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \\n  \\n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public double X { get; set; }\n    return:\n      type: System.Double\n      description: The x-axis value of the left side of the rectangle.\n  overload: System.Windows.Rect.X*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: X is set on an <xref:System.Windows.Rect.Empty*> rectangle.\n  platform:\n  - net462\n- uid: System.Windows.Rect.Y\n  id: Y\n  parent: System.Windows.Rect\n  langs:\n  - csharp\n  name: Y\n  nameWithType: Rect.Y\n  fullName: System.Windows.Rect.Y\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the y-axis value of the top side of the rectangle.\n  remarks: Getting this property is equivalent to getting the <xref:System.Windows.Rect.Top%2A> property.\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \\n  \\n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \\n  \\n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \\n  \\n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]\"\n  syntax:\n    content: public double Y { get; set; }\n    return:\n      type: System.Double\n      description: The y-axis value of the top side of the rectangle.\n  overload: System.Windows.Rect.Y*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Y is set on an <xref:System.Windows.Rect.Empty*> rectangle.\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.Rect.#ctor(System.Windows.Size)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Rect(Size)\n  nameWithType: Rect.Rect(Size)\n  fullName: System.Windows.Rect.Rect(Size)\n- uid: System.Windows.Size\n  parent: System.Windows\n  isExternal: false\n  name: Size\n  nameWithType: Size\n  fullName: System.Windows.Size\n- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Rect(Point,Point)\n  nameWithType: Rect.Rect(Point,Point)\n  fullName: System.Windows.Rect.Rect(Point,Point)\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Rect(Point,Size)\n  nameWithType: Rect.Rect(Point,Size)\n  fullName: System.Windows.Rect.Rect(Point,Size)\n- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Rect(Point,Vector)\n  nameWithType: Rect.Rect(Point,Vector)\n  fullName: System.Windows.Rect.Rect(Point,Vector)\n- uid: System.Windows.Vector\n  parent: System.Windows\n  isExternal: false\n  name: Vector\n  nameWithType: Vector\n  fullName: System.Windows.Vector\n- uid: System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Rect(Double,Double,Double,Double)\n  nameWithType: Rect.Rect(Double,Double,Double,Double)\n  fullName: System.Windows.Rect.Rect(Double,Double,Double,Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Rect.Bottom\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Bottom\n  nameWithType: Rect.Bottom\n  fullName: System.Windows.Rect.Bottom\n- uid: System.Windows.Rect.BottomLeft\n  parent: System.Windows.Rect\n  isExternal: false\n  name: BottomLeft\n  nameWithType: Rect.BottomLeft\n  fullName: System.Windows.Rect.BottomLeft\n- uid: System.Windows.Rect.BottomRight\n  parent: System.Windows.Rect\n  isExternal: false\n  name: BottomRight\n  nameWithType: Rect.BottomRight\n  fullName: System.Windows.Rect.BottomRight\n- uid: System.Windows.Rect.Contains(System.Windows.Point)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Contains(Point)\n  nameWithType: Rect.Contains(Point)\n  fullName: System.Windows.Rect.Contains(Point)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Rect.Contains(System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Contains(Rect)\n  nameWithType: Rect.Contains(Rect)\n  fullName: System.Windows.Rect.Contains(Rect)\n- uid: System.Windows.Rect\n  parent: System.Windows\n  isExternal: false\n  name: Rect\n  nameWithType: Rect\n  fullName: System.Windows.Rect\n- uid: System.Windows.Rect.Contains(System.Double,System.Double)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Contains(Double,Double)\n  nameWithType: Rect.Contains(Double,Double)\n  fullName: System.Windows.Rect.Contains(Double,Double)\n- uid: System.Windows.Rect.Empty\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Empty\n  nameWithType: Rect.Empty\n  fullName: System.Windows.Rect.Empty\n- uid: System.Windows.Rect.Equals(System.Object)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Rect.Equals(Object)\n  fullName: System.Windows.Rect.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Rect.Equals(System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Equals(Rect)\n  nameWithType: Rect.Equals(Rect)\n  fullName: System.Windows.Rect.Equals(Rect)\n- uid: System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Equals(Rect,Rect)\n  nameWithType: Rect.Equals(Rect,Rect)\n  fullName: System.Windows.Rect.Equals(Rect,Rect)\n- uid: System.Windows.Rect.GetHashCode\n  parent: System.Windows.Rect\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Rect.GetHashCode()\n  fullName: System.Windows.Rect.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Rect.Height\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Height\n  nameWithType: Rect.Height\n  fullName: System.Windows.Rect.Height\n- uid: System.Windows.Rect.Inflate(System.Windows.Size)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Inflate(Size)\n  nameWithType: Rect.Inflate(Size)\n  fullName: System.Windows.Rect.Inflate(Size)\n- uid: System.Windows.Rect.Inflate(System.Double,System.Double)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Inflate(Double,Double)\n  nameWithType: Rect.Inflate(Double,Double)\n  fullName: System.Windows.Rect.Inflate(Double,Double)\n- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Inflate(Rect,Size)\n  nameWithType: Rect.Inflate(Rect,Size)\n  fullName: System.Windows.Rect.Inflate(Rect,Size)\n- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Inflate(Rect,Double,Double)\n  nameWithType: Rect.Inflate(Rect,Double,Double)\n  fullName: System.Windows.Rect.Inflate(Rect,Double,Double)\n- uid: System.Windows.Rect.Intersect(System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Intersect(Rect)\n  nameWithType: Rect.Intersect(Rect)\n  fullName: System.Windows.Rect.Intersect(Rect)\n- uid: System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Intersect(Rect,Rect)\n  nameWithType: Rect.Intersect(Rect,Rect)\n  fullName: System.Windows.Rect.Intersect(Rect,Rect)\n- uid: System.Windows.Rect.IntersectsWith(System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: IntersectsWith(Rect)\n  nameWithType: Rect.IntersectsWith(Rect)\n  fullName: System.Windows.Rect.IntersectsWith(Rect)\n- uid: System.Windows.Rect.IsEmpty\n  parent: System.Windows.Rect\n  isExternal: false\n  name: IsEmpty\n  nameWithType: Rect.IsEmpty\n  fullName: System.Windows.Rect.IsEmpty\n- uid: System.Windows.Rect.Left\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Left\n  nameWithType: Rect.Left\n  fullName: System.Windows.Rect.Left\n- uid: System.Windows.Rect.Location\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Location\n  nameWithType: Rect.Location\n  fullName: System.Windows.Rect.Location\n- uid: System.Windows.Rect.Offset(System.Windows.Vector)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Offset(Vector)\n  nameWithType: Rect.Offset(Vector)\n  fullName: System.Windows.Rect.Offset(Vector)\n- uid: System.Windows.Rect.Offset(System.Double,System.Double)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Offset(Double,Double)\n  nameWithType: Rect.Offset(Double,Double)\n  fullName: System.Windows.Rect.Offset(Double,Double)\n- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Offset(Rect,Vector)\n  nameWithType: Rect.Offset(Rect,Vector)\n  fullName: System.Windows.Rect.Offset(Rect,Vector)\n- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Offset(Rect,Double,Double)\n  nameWithType: Rect.Offset(Rect,Double,Double)\n  fullName: System.Windows.Rect.Offset(Rect,Double,Double)\n- uid: System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: op_Equality(Rect,Rect)\n  nameWithType: Rect.op_Equality(Rect,Rect)\n  fullName: System.Windows.Rect.op_Equality(Rect,Rect)\n- uid: System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: op_Inequality(Rect,Rect)\n  nameWithType: Rect.op_Inequality(Rect,Rect)\n  fullName: System.Windows.Rect.op_Inequality(Rect,Rect)\n- uid: System.Windows.Rect.Parse(System.String)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Parse(String)\n  nameWithType: Rect.Parse(String)\n  fullName: System.Windows.Rect.Parse(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Rect.Right\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Right\n  nameWithType: Rect.Right\n  fullName: System.Windows.Rect.Right\n- uid: System.Windows.Rect.Scale(System.Double,System.Double)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Scale(Double,Double)\n  nameWithType: Rect.Scale(Double,Double)\n  fullName: System.Windows.Rect.Scale(Double,Double)\n- uid: System.Windows.Rect.Size\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Size\n  nameWithType: Rect.Size\n  fullName: System.Windows.Rect.Size\n- uid: System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: System.IFormattable.ToString(String,IFormatProvider)\n  nameWithType: Rect.System.IFormattable.ToString(String,IFormatProvider)\n  fullName: System.Windows.Rect.System.IFormattable.ToString(String,IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: true\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Windows.Rect.Top\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Top\n  nameWithType: Rect.Top\n  fullName: System.Windows.Rect.Top\n- uid: System.Windows.Rect.TopLeft\n  parent: System.Windows.Rect\n  isExternal: false\n  name: TopLeft\n  nameWithType: Rect.TopLeft\n  fullName: System.Windows.Rect.TopLeft\n- uid: System.Windows.Rect.TopRight\n  parent: System.Windows.Rect\n  isExternal: false\n  name: TopRight\n  nameWithType: Rect.TopRight\n  fullName: System.Windows.Rect.TopRight\n- uid: System.Windows.Rect.ToString\n  parent: System.Windows.Rect\n  isExternal: false\n  name: ToString()\n  nameWithType: Rect.ToString()\n  fullName: System.Windows.Rect.ToString()\n- uid: System.Windows.Rect.ToString(System.IFormatProvider)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: ToString(IFormatProvider)\n  nameWithType: Rect.ToString(IFormatProvider)\n  fullName: System.Windows.Rect.ToString(IFormatProvider)\n- uid: System.Windows.Rect.Transform(System.Windows.Media.Matrix)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Transform(Matrix)\n  nameWithType: Rect.Transform(Matrix)\n  fullName: System.Windows.Rect.Transform(Matrix)\n- uid: System.Windows.Media.Matrix\n  parent: System.Windows.Media\n  isExternal: false\n  name: Matrix\n  nameWithType: Matrix\n  fullName: System.Windows.Media.Matrix\n- uid: System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Transform(Rect,Matrix)\n  nameWithType: Rect.Transform(Rect,Matrix)\n  fullName: System.Windows.Rect.Transform(Rect,Matrix)\n- uid: System.Windows.Rect.Union(System.Windows.Point)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Union(Point)\n  nameWithType: Rect.Union(Point)\n  fullName: System.Windows.Rect.Union(Point)\n- uid: System.Windows.Rect.Union(System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Union(Rect)\n  nameWithType: Rect.Union(Rect)\n  fullName: System.Windows.Rect.Union(Rect)\n- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Union(Rect,Point)\n  nameWithType: Rect.Union(Rect,Point)\n  fullName: System.Windows.Rect.Union(Rect,Point)\n- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Union(Rect,Rect)\n  nameWithType: Rect.Union(Rect,Rect)\n  fullName: System.Windows.Rect.Union(Rect,Rect)\n- uid: System.Windows.Rect.Width\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Width\n  nameWithType: Rect.Width\n  fullName: System.Windows.Rect.Width\n- uid: System.Windows.Rect.X\n  parent: System.Windows.Rect\n  isExternal: false\n  name: X\n  nameWithType: Rect.X\n  fullName: System.Windows.Rect.X\n- uid: System.Windows.Rect.Y\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Y\n  nameWithType: Rect.Y\n  fullName: System.Windows.Rect.Y\n- uid: System.Windows.Rect.#ctor*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Rect\n  nameWithType: Rect.Rect\n- uid: System.Windows.Rect.Bottom*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Bottom\n  nameWithType: Rect.Bottom\n- uid: System.Windows.Rect.BottomLeft*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: BottomLeft\n  nameWithType: Rect.BottomLeft\n- uid: System.Windows.Rect.BottomRight*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: BottomRight\n  nameWithType: Rect.BottomRight\n- uid: System.Windows.Rect.Contains*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Contains\n  nameWithType: Rect.Contains\n- uid: System.Windows.Rect.Empty*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Empty\n  nameWithType: Rect.Empty\n- uid: System.Windows.Rect.Equals*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Equals\n  nameWithType: Rect.Equals\n- uid: System.Windows.Rect.GetHashCode*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Rect.GetHashCode\n- uid: System.Windows.Rect.Height*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Height\n  nameWithType: Rect.Height\n- uid: System.Windows.Rect.Inflate*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Inflate\n  nameWithType: Rect.Inflate\n- uid: System.Windows.Rect.Intersect*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Intersect\n  nameWithType: Rect.Intersect\n- uid: System.Windows.Rect.IntersectsWith*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: IntersectsWith\n  nameWithType: Rect.IntersectsWith\n- uid: System.Windows.Rect.IsEmpty*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: IsEmpty\n  nameWithType: Rect.IsEmpty\n- uid: System.Windows.Rect.Left*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Left\n  nameWithType: Rect.Left\n- uid: System.Windows.Rect.Location*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Location\n  nameWithType: Rect.Location\n- uid: System.Windows.Rect.Offset*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Offset\n  nameWithType: Rect.Offset\n- uid: System.Windows.Rect.op_Equality*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: op_Equality\n  nameWithType: Rect.op_Equality\n- uid: System.Windows.Rect.op_Inequality*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Rect.op_Inequality\n- uid: System.Windows.Rect.Parse*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Parse\n  nameWithType: Rect.Parse\n- uid: System.Windows.Rect.Right*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Right\n  nameWithType: Rect.Right\n- uid: System.Windows.Rect.Scale*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Scale\n  nameWithType: Rect.Scale\n- uid: System.Windows.Rect.Size*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Size\n  nameWithType: Rect.Size\n- uid: System.Windows.Rect.System#IFormattable#ToString*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: System.IFormattable.ToString\n  nameWithType: Rect.System.IFormattable.ToString\n- uid: System.Windows.Rect.Top*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Top\n  nameWithType: Rect.Top\n- uid: System.Windows.Rect.TopLeft*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: TopLeft\n  nameWithType: Rect.TopLeft\n- uid: System.Windows.Rect.TopRight*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: TopRight\n  nameWithType: Rect.TopRight\n- uid: System.Windows.Rect.ToString*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: ToString\n  nameWithType: Rect.ToString\n- uid: System.Windows.Rect.Transform*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Transform\n  nameWithType: Rect.Transform\n- uid: System.Windows.Rect.Union*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Union\n  nameWithType: Rect.Union\n- uid: System.Windows.Rect.Width*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Width\n  nameWithType: Rect.Width\n- uid: System.Windows.Rect.X*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: X\n  nameWithType: Rect.X\n- uid: System.Windows.Rect.Y*\n  parent: System.Windows.Rect\n  isExternal: false\n  name: Y\n  nameWithType: Rect.Y\n"}