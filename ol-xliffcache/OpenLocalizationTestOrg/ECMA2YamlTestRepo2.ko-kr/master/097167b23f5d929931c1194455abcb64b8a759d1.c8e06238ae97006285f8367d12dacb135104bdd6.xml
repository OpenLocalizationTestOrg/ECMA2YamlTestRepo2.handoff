{"nodes":[{"pos":[386,499],"content":"Provides a remotable version of the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Provides a remotable version of the <xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"></xref>."},{"pos":[1355,1452],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Reflection.AssemblyNameProxy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Reflection.AssemblyNameProxy\"></xref> class."},{"pos":[2042,2145],"content":"Gets the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for a given file.","needQuote":true,"needEscape":true,"source":"Gets the <xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"></xref> for a given file."},{"pos":[2157,2272],"content":"This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed.","pos":[0,115],"nodes":[{"content":"This will only work if the file contains an assembly manifest.","pos":[0,62]},{"content":"This method causes the file to be opened and closed.","pos":[63,115]}]}]},{"pos":[2457,2573],"content":"The assembly file for which to get the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The assembly file for which to get the <xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"></xref>."},{"pos":[2648,2763],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object representing the given file.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"></xref> object representing the given file."},{"pos":[2945,3035],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>assemblyFile</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[3130,3165],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is empty.","needQuote":true,"needEscape":true,"source":"<code>assemblyFile</code> is empty."},{"pos":[3274,3313],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.","needQuote":true,"needEscape":true,"source":"<code>assemblyFile</code> is not found."},{"pos":[3426,3475],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[3582,3632],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.","needQuote":true,"needEscape":true,"source":"<code>assemblyFile</code> is not a valid assembly."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.AssemblyNameProxy\n  id: AssemblyNameProxy\n  children:\n  - System.Reflection.AssemblyNameProxy.#ctor\n  - System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)\n  langs:\n  - csharp\n  name: AssemblyNameProxy\n  nameWithType: AssemblyNameProxy\n  fullName: System.Reflection.AssemblyNameProxy\n  type: Class\n  summary: Provides a remotable version of the <xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"></xref>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class AssemblyNameProxy : MarshalByRefObject\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Reflection.AssemblyNameProxy.#ctor\n  id: '#ctor'\n  parent: System.Reflection.AssemblyNameProxy\n  langs:\n  - csharp\n  name: AssemblyNameProxy()\n  nameWithType: AssemblyNameProxy.AssemblyNameProxy()\n  fullName: System.Reflection.AssemblyNameProxy.AssemblyNameProxy()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.AssemblyNameProxy\"></xref> class.\n  syntax:\n    content: public AssemblyNameProxy ();\n    parameters: []\n  overload: System.Reflection.AssemblyNameProxy.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)\n  id: GetAssemblyName(System.String)\n  parent: System.Reflection.AssemblyNameProxy\n  langs:\n  - csharp\n  name: GetAssemblyName(String)\n  nameWithType: AssemblyNameProxy.GetAssemblyName(String)\n  fullName: System.Reflection.AssemblyNameProxy.GetAssemblyName(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets the <xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"></xref> for a given file.\n  remarks: This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed.\n  syntax:\n    content: public System.Reflection.AssemblyName GetAssemblyName (string assemblyFile);\n    parameters:\n    - id: assemblyFile\n      type: System.String\n      description: The assembly file for which to get the <xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"></xref>.\n    return:\n      type: System.Reflection.AssemblyName\n      description: An <xref uid=\"langword_csharp_AssemblyName\" name=\"AssemblyName\" href=\"\"></xref> object representing the given file.\n  overload: System.Reflection.AssemblyNameProxy.GetAssemblyName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyFile</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>assemblyFile</code> is empty.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyFile</code> is not found.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>assemblyFile</code> is not a valid assembly.\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.BadImageFormatException\n  isExternal: true\n  name: System.BadImageFormatException\n- uid: System.Reflection.AssemblyNameProxy.#ctor\n  parent: System.Reflection.AssemblyNameProxy\n  isExternal: false\n  name: AssemblyNameProxy()\n  nameWithType: AssemblyNameProxy.AssemblyNameProxy()\n  fullName: System.Reflection.AssemblyNameProxy.AssemblyNameProxy()\n- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)\n  parent: System.Reflection.AssemblyNameProxy\n  isExternal: false\n  name: GetAssemblyName(String)\n  nameWithType: AssemblyNameProxy.GetAssemblyName(String)\n  fullName: System.Reflection.AssemblyNameProxy.GetAssemblyName(String)\n- uid: System.Reflection.AssemblyName\n  parent: System.Reflection\n  isExternal: true\n  name: AssemblyName\n  nameWithType: AssemblyName\n  fullName: System.Reflection.AssemblyName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.AssemblyNameProxy.#ctor*\n  parent: System.Reflection.AssemblyNameProxy\n  isExternal: false\n  name: AssemblyNameProxy\n  nameWithType: AssemblyNameProxy.AssemblyNameProxy\n- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName*\n  parent: System.Reflection.AssemblyNameProxy\n  isExternal: false\n  name: GetAssemblyName\n  nameWithType: AssemblyNameProxy.GetAssemblyName\n"}