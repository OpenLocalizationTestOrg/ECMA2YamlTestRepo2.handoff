{"nodes":[{"pos":[1003,1081],"content":"Specifies a COM+ integration service contract. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a COM+ integration service contract. This class cannot be inherited.","pos":[0,78],"nodes":[{"content":"Specifies a COM+ integration service contract.","pos":[0,46]},{"content":"This class cannot be inherited.","pos":[47,78]}]}]},{"pos":[1093,1361],"content":"COM+ integration service contracts are currently restricted to the “http://tempuri.org” namespace, and the contract name is derived from the supporting COM interface. You can, however, specify alternatives by using the `comContracts` section in the configuration file.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"COM+ integration service contracts are currently restricted to the “http://tempuri.org” namespace, and the contract name is derived from the supporting COM interface.","pos":[0,166]},{"content":"You can, however, specify alternatives by using the <ph id=\"ph1\">`comContracts`</ph> section in the configuration file.","pos":[167,268],"source":" You can, however, specify alternatives by using the `comContracts` section in the configuration file."}]},{"pos":[5212,5326],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Configuration.ComContractElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.ComContractElement\"></xref> class."},{"pos":[6009,6123],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Configuration.ComContractElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.ComContractElement\"></xref> class."},{"pos":[6280,6324],"content":"A string that contains the type of contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that contains the type of contract.","pos":[0,44]}]},{"pos":[6852,6883],"content":"Gets or sets the contract type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the contract type.","pos":[0,31]}]},{"pos":[7001,7019],"content":"The contract type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The contract type.","pos":[0,18]}]},{"pos":[7580,7698],"content":"Gets a collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.","pos":[0,118]}]},{"pos":[7711,8803],"content":"The COM+ integration configuration tool (ComSvcConfig.exe) can be used to add specific methods from a COM interface to appear on the generated service contract.       For example, you can use the following command to add the three named methods from the `IFinances` COM interface on the `ItemOrders.Financial` component, to the generated service contract.      ```   ComSvcConfig.exe /i /application:OnlineStore /contract:ItemOrders.Financial,IFinances.{TransferFunds,AddFunds,RemoveFunds} /hosting:complus   ```       When you run the ComSvcConfig.exe tool, it then generates the following service contract listing the previously mentioned methods as `exposedMethod` elements.       [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]       At service initialization time, the runtime attempts to generate a service contract by reflecting over and adding only the methods included in the list of `exposedMethod` elements. A trace is produced for every interface method that is not included on the service contract.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The COM+ integration configuration tool (ComSvcConfig.exe) can be used to add specific methods from a COM interface to appear on the generated service contract.","pos":[0,160]},{"content":"For example, you can use the following command to add the three named methods from the <ph id=\"ph1\">`IFinances`</ph> COM interface on the <ph id=\"ph2\">`ItemOrders.Financial`</ph> component, to the generated service contract.","pos":[167,355],"source":"       For example, you can use the following command to add the three named methods from the `IFinances` COM interface on the `ItemOrders.Financial` component, to the generated service contract."},{"content":"<ph id=\"ph1\">```   ComSvcConfig.exe /i /application:OnlineStore /contract:ItemOrders.Financial,IFinances.{TransferFunds,AddFunds,RemoveFunds} /hosting:complus   ```</ph>       When you run the ComSvcConfig.exe tool, it then generates the following service contract listing the previously mentioned methods as <ph id=\"ph2\">`exposedMethod`</ph> elements.","pos":[361,677],"source":"```   ComSvcConfig.exe /i /application:OnlineStore /contract:ItemOrders.Financial,IFinances.{TransferFunds,AddFunds,RemoveFunds} /hosting:complus   ```       When you run the ComSvcConfig.exe tool, it then generates the following service contract listing the previously mentioned methods as `exposedMethod` elements."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>XpsCreate#XpsCreateAddPkgContent<ept id=\"p2\">](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)</ept><ept id=\"p1\">]</ept>       At service initialization time, the runtime attempts to generate a service contract by reflecting over and adding only the methods included in the list of <ph id=\"ph1\">`exposedMethod`</ph> elements.","pos":[684,987],"source":"[!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]       At service initialization time, the runtime attempts to generate a service contract by reflecting over and adding only the methods included in the list of `exposedMethod` elements."},{"content":"A trace is produced for every interface method that is not included on the service contract.","pos":[988,1080]}]},{"pos":[9024,9139],"content":"The collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.","pos":[0,115]}]},{"pos":[9656,9687],"content":"Gets or sets the contract name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the contract name.","pos":[0,31]}]},{"pos":[9801,9819],"content":"The contract name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The contract name.","pos":[0,18]}]},{"pos":[10351,10387],"content":"Gets or sets the contract namespace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the contract namespace.","pos":[0,36]}]},{"pos":[10506,10529],"content":"The contract namespace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The contract namespace.","pos":[0,23]}]},{"pos":[11101,11132],"content":"Gets all the persistable types.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets all the persistable types.","pos":[0,31]}]},{"pos":[11372,11394],"content":"The persistable types.","needQuote":true,"needEscape":true,"nodes":[{"content":"The persistable types.","pos":[0,22]}]},{"pos":[12143,12155],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12723,12828],"content":"Gets or sets a Boolean value that specifies whether the contract can only be used on sessionful bindings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a Boolean value that specifies whether the contract can only be used on sessionful bindings.","pos":[0,105]}]},{"pos":[12840,13189],"content":"When the service is initialized, the integration runtime ensures that this setting is consistent with the type of binding to be used. An exception is generated if one or more of the bindings for the contract are in conflict. If this property is `false`, a one-way channel is in use and there are any [out] parameters, an exception is also generated.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the service is initialized, the integration runtime ensures that this setting is consistent with the type of binding to be used.","pos":[0,133]},{"content":"An exception is generated if one or more of the bindings for the contract are in conflict.","pos":[134,224]},{"content":"If this property is <ph id=\"ph1\">`false`</ph>, a one-way channel is in use and there are any [out] parameters, an exception is also generated.","pos":[225,349],"source":" If this property is `false`, a one-way channel is in use and there are any [out] parameters, an exception is also generated."}]},{"pos":[13313,13584],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the contract can only be used on sessionful bindings; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the contract can only be used on sessionful bindings; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,192],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the contract can only be used on sessionful bindings; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[193,271],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[14162,14287],"content":"Gets a collection of User Defined Types (UDT) that is to be included in the service contract. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of User Defined Types (UDT) that is to be included in the service contract. This class cannot be inherited.","pos":[0,125],"nodes":[{"content":"Gets a collection of User Defined Types (UDT) that is to be included in the service contract.","pos":[0,93]},{"content":"This class cannot be inherited.","pos":[94,125]}]}]},{"pos":[14300,14947],"content":"The COM+ integration runtime creates services by inspecting the type library. When a COM+ component contains methods that pass a VARIANT, the system cannot determine the actual types to be passed prior to runtime. Therefore, when you attempt to pass a User Defined Type (UDT) within a VARIANT, it fails because it is not a known type for serialization.       To circumvent this problem, you can add the UDTs to the configuration file so that they can be included as known types on the appropriate service contract. In order to do so, you have to uniquely identify the UDT and the contract(s), that is, the original COM interface(s) that uses it.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The COM+ integration runtime creates services by inspecting the type library. When a COM+ component contains methods that pass a VARIANT, the system cannot determine the actual types to be passed prior to runtime. Therefore, when you attempt to pass a User Defined Type (UDT) within a VARIANT, it fails because it is not a known type for serialization.       To circumvent this problem, you can add the UDTs to the configuration file so that they can be included as known types on the appropriate service contract. In order to do so, you have to uniquely identify the UDT and the contract(s), that is, the original COM interface(s) that uses it.","pos":[0,645],"nodes":[{"content":"The COM+ integration runtime creates services by inspecting the type library.","pos":[0,77]},{"content":"When a COM+ component contains methods that pass a VARIANT, the system cannot determine the actual types to be passed prior to runtime.","pos":[78,213]},{"content":"Therefore, when you attempt to pass a User Defined Type (UDT) within a VARIANT, it fails because it is not a known type for serialization.","pos":[214,352]},{"content":"To circumvent this problem, you can add the UDTs to the configuration file so that they can be included as known types on the appropriate service contract.","pos":[359,514]},{"content":"In order to do so, you have to uniquely identify the UDT and the contract(s), that is, the original COM interface(s) that uses it.","pos":[515,645]}]}]},{"pos":[16171,16214],"content":"The collection of User Defined Types (UDT).","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection of User Defined Types (UDT).","pos":[0,43]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Configuration.ComContractElement\n  id: ComContractElement\n  children:\n  - System.ServiceModel.Configuration.ComContractElement.#ctor\n  - System.ServiceModel.Configuration.ComContractElement.#ctor(System.String)\n  - System.ServiceModel.Configuration.ComContractElement.Contract\n  - System.ServiceModel.Configuration.ComContractElement.ExposedMethods\n  - System.ServiceModel.Configuration.ComContractElement.Name\n  - System.ServiceModel.Configuration.ComContractElement.Namespace\n  - System.ServiceModel.Configuration.ComContractElement.PersistableTypes\n  - System.ServiceModel.Configuration.ComContractElement.Properties\n  - System.ServiceModel.Configuration.ComContractElement.RequiresSession\n  - System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes\n  langs:\n  - csharp\n  name: ComContractElement\n  nameWithType: ComContractElement\n  fullName: System.ServiceModel.Configuration.ComContractElement\n  type: Class\n  summary: Specifies a COM+ integration service contract. This class cannot be inherited.\n  remarks: COM+ integration service contracts are currently restricted to the “http://tempuri.org” namespace, and the contract name is derived from the supporting COM interface. You can, however, specify alternatives by using the `comContracts` section in the configuration file.\n  example:\n  - \"You can use the following configuration to specify the namespace, contract name, and user defined types to be included. You can also specify other settings for a service contract  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \\n  \\n When the service is initialized, the specified namespaces and contract names are applied to the generated service descriptions.\"\n  syntax:\n    content: 'public sealed class ComContractElement : System.Configuration.ConfigurationElement'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.Equals(System.Object)\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetHashCode\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsModified\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElement.ResetModified\n  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: ComContractElement()\n  nameWithType: ComContractElement.ComContractElement()\n  fullName: System.ServiceModel.Configuration.ComContractElement.ComContractElement()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.ComContractElement\"></xref> class.\n  syntax:\n    content: public ComContractElement ();\n    parameters: []\n  overload: System.ServiceModel.Configuration.ComContractElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: ComContractElement(String)\n  nameWithType: ComContractElement.ComContractElement(String)\n  fullName: System.ServiceModel.Configuration.ComContractElement.ComContractElement(String)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.ComContractElement\"></xref> class.\n  syntax:\n    content: public ComContractElement (string contractType);\n    parameters:\n    - id: contractType\n      type: System.String\n      description: A string that contains the type of contract.\n  overload: System.ServiceModel.Configuration.ComContractElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.Contract\n  id: Contract\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: Contract\n  nameWithType: ComContractElement.Contract\n  fullName: System.ServiceModel.Configuration.ComContractElement.Contract\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets or sets the contract type.\n  syntax:\n    content: public string Contract { get; set; }\n    return:\n      type: System.String\n      description: The contract type.\n  overload: System.ServiceModel.Configuration.ComContractElement.Contract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.ExposedMethods\n  id: ExposedMethods\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: ExposedMethods\n  nameWithType: ComContractElement.ExposedMethods\n  fullName: System.ServiceModel.Configuration.ComContractElement.ExposedMethods\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets a collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.\n  remarks: \"The COM+ integration configuration tool (ComSvcConfig.exe) can be used to add specific methods from a COM interface to appear on the generated service contract.  \\n  \\n For example, you can use the following command to add the three named methods from the `IFinances` COM interface on the `ItemOrders.Financial` component, to the generated service contract.  \\n  \\n```  \\nComSvcConfig.exe /i /application:OnlineStore /contract:ItemOrders.Financial,IFinances.{TransferFunds,AddFunds,RemoveFunds} /hosting:complus  \\n```  \\n  \\n When you run the ComSvcConfig.exe tool, it then generates the following service contract listing the previously mentioned methods as `exposedMethod` elements.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \\n  \\n At service initialization time, the runtime attempts to generate a service contract by reflecting over and adding only the methods included in the list of `exposedMethod` elements. A trace is produced for every interface method that is not included on the service contract.\"\n  syntax:\n    content: public System.ServiceModel.Configuration.ComMethodElementCollection ExposedMethods { get; }\n    return:\n      type: System.ServiceModel.Configuration.ComMethodElementCollection\n      description: The collection of COM+ methods that are exposed when the interface on a COM+ component is exposed as a Web service.\n  overload: System.ServiceModel.Configuration.ComContractElement.ExposedMethods*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.Name\n  id: Name\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: Name\n  nameWithType: ComContractElement.Name\n  fullName: System.ServiceModel.Configuration.ComContractElement.Name\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets or sets the contract name.\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: The contract name.\n  overload: System.ServiceModel.Configuration.ComContractElement.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.Namespace\n  id: Namespace\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: ComContractElement.Namespace\n  fullName: System.ServiceModel.Configuration.ComContractElement.Namespace\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets or sets the contract namespace.\n  syntax:\n    content: public string Namespace { get; set; }\n    return:\n      type: System.String\n      description: The contract namespace.\n  overload: System.ServiceModel.Configuration.ComContractElement.Namespace*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.PersistableTypes\n  id: PersistableTypes\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: PersistableTypes\n  nameWithType: ComContractElement.PersistableTypes\n  fullName: System.ServiceModel.Configuration.ComContractElement.PersistableTypes\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets all the persistable types.\n  syntax:\n    content: public System.ServiceModel.Configuration.ComPersistableTypeElementCollection PersistableTypes { get; }\n    return:\n      type: System.ServiceModel.Configuration.ComPersistableTypeElementCollection\n      description: The persistable types.\n  overload: System.ServiceModel.Configuration.ComContractElement.PersistableTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.Properties\n  id: Properties\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: ComContractElement.Properties\n  fullName: System.ServiceModel.Configuration.ComContractElement.Properties\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: To be added.\n  overload: System.ServiceModel.Configuration.ComContractElement.Properties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.RequiresSession\n  id: RequiresSession\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: RequiresSession\n  nameWithType: ComContractElement.RequiresSession\n  fullName: System.ServiceModel.Configuration.ComContractElement.RequiresSession\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets or sets a Boolean value that specifies whether the contract can only be used on sessionful bindings.\n  remarks: When the service is initialized, the integration runtime ensures that this setting is consistent with the type of binding to be used. An exception is generated if one or more of the bindings for the contract are in conflict. If this property is `false`, a one-way channel is in use and there are any [out] parameters, an exception is also generated.\n  syntax:\n    content: public bool RequiresSession { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the contract can only be used on sessionful bindings; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Configuration.ComContractElement.RequiresSession*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes\n  id: UserDefinedTypes\n  parent: System.ServiceModel.Configuration.ComContractElement\n  langs:\n  - csharp\n  name: UserDefinedTypes\n  nameWithType: ComContractElement.UserDefinedTypes\n  fullName: System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets a collection of User Defined Types (UDT) that is to be included in the service contract. This class cannot be inherited.\n  remarks: \"The COM+ integration runtime creates services by inspecting the type library. When a COM+ component contains methods that pass a VARIANT, the system cannot determine the actual types to be passed prior to runtime. Therefore, when you attempt to pass a User Defined Type (UDT) within a VARIANT, it fails because it is not a known type for serialization.  \\n  \\n To circumvent this problem, you can add the UDTs to the configuration file so that they can be included as known types on the appropriate service contract. In order to do so, you have to uniquely identify the UDT and the contract(s), that is, the original COM interface(s) that uses it.\"\n  example:\n  - \"The following example demonstrates adding two specific UDTs to the <`userDefinedTypes`> section of the configuration file for this purpose.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \\n  \\n The attributes of the <`userDefinedType`> element are defined as follows:  \\n  \\n-   `typeName`: An optional attribute that provides the readable type name. This is not used by the runtime but helps a reader to distinguish the types.  \\n  \\n-   `typeLibID`: A GUID string that specifies the registered type library that defines the type.  \\n  \\n-   `typeLibVersion`: A string that specifies the type library version that defines the type.  \\n  \\n-   `typeDefID`: A GUID string that specifies the specific UDT type within the registered type library.  \\n  \\n When the service is initialized, the integration runtime looks up the specified types and adds them to the known types collection for the specified contracts.\"\n  syntax:\n    content: public System.ServiceModel.Configuration.ComUdtElementCollection UserDefinedTypes { get; }\n    return:\n      type: System.ServiceModel.Configuration.ComUdtElementCollection\n      description: The collection of User Defined Types (UDT).\n  overload: System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: System.Configuration.ConfigurationElement\n- uid: System.ServiceModel.Configuration.ComContractElement.#ctor\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: ComContractElement()\n  nameWithType: ComContractElement.ComContractElement()\n  fullName: System.ServiceModel.Configuration.ComContractElement.ComContractElement()\n- uid: System.ServiceModel.Configuration.ComContractElement.#ctor(System.String)\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: ComContractElement(String)\n  nameWithType: ComContractElement.ComContractElement(String)\n  fullName: System.ServiceModel.Configuration.ComContractElement.ComContractElement(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ServiceModel.Configuration.ComContractElement.Contract\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: Contract\n  nameWithType: ComContractElement.Contract\n  fullName: System.ServiceModel.Configuration.ComContractElement.Contract\n- uid: System.ServiceModel.Configuration.ComContractElement.ExposedMethods\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: ExposedMethods\n  nameWithType: ComContractElement.ExposedMethods\n  fullName: System.ServiceModel.Configuration.ComContractElement.ExposedMethods\n- uid: System.ServiceModel.Configuration.ComMethodElementCollection\n  parent: System.ServiceModel.Configuration\n  isExternal: false\n  name: ComMethodElementCollection\n  nameWithType: ComMethodElementCollection\n  fullName: System.ServiceModel.Configuration.ComMethodElementCollection\n- uid: System.ServiceModel.Configuration.ComContractElement.Name\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: Name\n  nameWithType: ComContractElement.Name\n  fullName: System.ServiceModel.Configuration.ComContractElement.Name\n- uid: System.ServiceModel.Configuration.ComContractElement.Namespace\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: Namespace\n  nameWithType: ComContractElement.Namespace\n  fullName: System.ServiceModel.Configuration.ComContractElement.Namespace\n- uid: System.ServiceModel.Configuration.ComContractElement.PersistableTypes\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: PersistableTypes\n  nameWithType: ComContractElement.PersistableTypes\n  fullName: System.ServiceModel.Configuration.ComContractElement.PersistableTypes\n- uid: System.ServiceModel.Configuration.ComPersistableTypeElementCollection\n  parent: System.ServiceModel.Configuration\n  isExternal: false\n  name: ComPersistableTypeElementCollection\n  nameWithType: ComPersistableTypeElementCollection\n  fullName: System.ServiceModel.Configuration.ComPersistableTypeElementCollection\n- uid: System.ServiceModel.Configuration.ComContractElement.Properties\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: Properties\n  nameWithType: ComContractElement.Properties\n  fullName: System.ServiceModel.Configuration.ComContractElement.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.ServiceModel.Configuration.ComContractElement.RequiresSession\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: RequiresSession\n  nameWithType: ComContractElement.RequiresSession\n  fullName: System.ServiceModel.Configuration.ComContractElement.RequiresSession\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: UserDefinedTypes\n  nameWithType: ComContractElement.UserDefinedTypes\n  fullName: System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes\n- uid: System.ServiceModel.Configuration.ComUdtElementCollection\n  parent: System.ServiceModel.Configuration\n  isExternal: false\n  name: ComUdtElementCollection\n  nameWithType: ComUdtElementCollection\n  fullName: System.ServiceModel.Configuration.ComUdtElementCollection\n- uid: System.ServiceModel.Configuration.ComContractElement.#ctor*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: ComContractElement\n  nameWithType: ComContractElement.ComContractElement\n- uid: System.ServiceModel.Configuration.ComContractElement.Contract*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: Contract\n  nameWithType: ComContractElement.Contract\n- uid: System.ServiceModel.Configuration.ComContractElement.ExposedMethods*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: ExposedMethods\n  nameWithType: ComContractElement.ExposedMethods\n- uid: System.ServiceModel.Configuration.ComContractElement.Name*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: Name\n  nameWithType: ComContractElement.Name\n- uid: System.ServiceModel.Configuration.ComContractElement.Namespace*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: Namespace\n  nameWithType: ComContractElement.Namespace\n- uid: System.ServiceModel.Configuration.ComContractElement.PersistableTypes*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: PersistableTypes\n  nameWithType: ComContractElement.PersistableTypes\n- uid: System.ServiceModel.Configuration.ComContractElement.Properties*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: Properties\n  nameWithType: ComContractElement.Properties\n- uid: System.ServiceModel.Configuration.ComContractElement.RequiresSession*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: RequiresSession\n  nameWithType: ComContractElement.RequiresSession\n- uid: System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes*\n  parent: System.ServiceModel.Configuration.ComContractElement\n  isExternal: false\n  name: UserDefinedTypes\n  nameWithType: ComContractElement.UserDefinedTypes\n"}