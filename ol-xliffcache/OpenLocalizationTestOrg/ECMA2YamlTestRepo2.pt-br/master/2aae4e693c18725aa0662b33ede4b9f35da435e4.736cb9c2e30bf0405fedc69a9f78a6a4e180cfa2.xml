{"nodes":[{"pos":[1236,1327],"content":"Implements the extrapolation of a manipulation's position, orientation, and average radius.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the extrapolation of a manipulation's position, orientation, and average radius.","pos":[0,91]}]},{"pos":[1340,2384],"content":"An InertiaProcessor2D object enables your application to extrapolate an element's location, orientation, and other properties by simulating real-world behavior.       For instance, when a user moves an element and then releases it, the element can continue moving, decelerate, and then slowly stop. An inertia processor implements this behavior by causing the affine 2-D values (origin, scale, translation, and rotation) to change over a specified time at a specified deceleration rate.       An inertia processor by itself does not cause an element to move and decelerate. Your application receives information from an inertia processor and applies the values as needed to an application-specific element. Typically, an application uses the information received from an inertia processor to change the location, size or orientation of an element.       Inertia processing is typically used in conjunction with manipulation processing. For more information, see the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An InertiaProcessor2D object enables your application to extrapolate an element's location, orientation, and other properties by simulating real-world behavior.       For instance, when a user moves an element and then releases it, the element can continue moving, decelerate, and then slowly stop. An inertia processor implements this behavior by causing the affine 2-D values (origin, scale, translation, and rotation) to change over a specified time at a specified deceleration rate.       An inertia processor by itself does not cause an element to move and decelerate. Your application receives information from an inertia processor and applies the values as needed to an application-specific element. Typically, an application uses the information received from an inertia processor to change the location, size or orientation of an element.       Inertia processing is typically used in conjunction with manipulation processing. For more information, see the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> class.","pos":[0,1038],"nodes":[{"content":"An InertiaProcessor2D object enables your application to extrapolate an element's location, orientation, and other properties by simulating real-world behavior.","pos":[0,160]},{"content":"For instance, when a user moves an element and then releases it, the element can continue moving, decelerate, and then slowly stop.","pos":[167,298]},{"content":"An inertia processor implements this behavior by causing the affine 2-D values (origin, scale, translation, and rotation) to change over a specified time at a specified deceleration rate.","pos":[299,486]},{"content":"An inertia processor by itself does not cause an element to move and decelerate.","pos":[493,573]},{"content":"Your application receives information from an inertia processor and applies the values as needed to an application-specific element.","pos":[574,706]},{"content":"Typically, an application uses the information received from an inertia processor to change the location, size or orientation of an element.","pos":[707,847]},{"content":"Inertia processing is typically used in conjunction with manipulation processing.","pos":[854,935]},{"content":"For more information, see the &lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D&gt; class.","pos":[936,1038],"source":" For more information, see the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> class."}]}]},{"pos":[3006,3121],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.Manipulations.InertiaProcessor2D\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.Manipulations.InertiaProcessor2D\"></xref> class."},{"pos":[3788,3957],"content":"Completes final extrapolation by using the specified timestamp and raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.Manipulations.InertiaProcessor2D.Completed\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Completes final extrapolation by using the specified timestamp and raises the <xref href=\"System.Windows.Input.Manipulations.InertiaProcessor2D.Completed\"></xref> event."},{"pos":[3969,4008],"content":"Timestamps are in 100-nanosecond units.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Timestamps are in 100-nanosecond units.","pos":[0,39]}]},{"pos":[4745,4810],"content":"The timestamp to complete extrapolation, in 100-nanosecond ticks.","needQuote":true,"needEscape":true,"nodes":[{"content":"The timestamp to complete extrapolation, in 100-nanosecond ticks.","pos":[0,65]}]},{"pos":[5015,5086],"content":"The timestamp parameter is less than the initial or previous timestamp.","needQuote":true,"needEscape":true,"nodes":[{"content":"The timestamp parameter is less than the initial or previous timestamp.","pos":[0,71]}]},{"pos":[5546,5586],"content":"Occurs when extrapolation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when extrapolation has completed.","pos":[0,40]}]},{"pos":[5848,5860],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6317,6422],"content":"Occurs when the extrapolation origin has changed or when translation, scaling, or rotation have occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the extrapolation origin has changed or when translation, scaling, or rotation have occurred.","pos":[0,105]}]},{"pos":[6434,6642],"content":"The Delta event and the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event are the same type. Typically, you can use the same event handler for both events.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Delta event and the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event are the same type. Typically, you can use the same event handler for both events.","pos":[0,208],"nodes":[{"content":"The Delta event and the &lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName&gt; event are the same type.","pos":[0,145],"source":"The Delta event and the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event are the same type."},{"content":"Typically, you can use the same event handler for both events.","pos":[146,208]}]}]},{"pos":[7088,7100],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7620,7681],"content":"Gets or sets the expansion behavior of the inertia processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the expansion behavior of the inertia processor.","pos":[0,61]}]},{"pos":[7911,7959],"content":"The expansion behavior of the inertia processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expansion behavior of the inertia processor.","pos":[0,48]}]},{"pos":[8549,8623],"content":"Gets or sets the x-coordinate for the initial origin, in coordinate units.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the x-coordinate for the initial origin, in coordinate units.","pos":[0,74]}]},{"pos":[8636,8941],"content":"The origin point represented by the InitialOriginX and <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> properties is the average position of all manipulators associated with an element.       A valid value for InitialOriginX is any finite number. The default value is 0.0.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The origin point represented by the InitialOriginX and <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> properties is the average position of all manipulators associated with an element.       A valid value for InitialOriginX is any finite number. The default value is 0.0.","pos":[0,303],"nodes":[{"content":"The origin point represented by the InitialOriginX and &lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A&gt; properties is the average position of all manipulators associated with an element.","pos":[0,216],"source":"The origin point represented by the InitialOriginX and <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> properties is the average position of all manipulators associated with an element."},{"content":"A valid value for InitialOriginX is any finite number.","pos":[223,277]},{"content":"The default value is 0.0.","pos":[278,303]}]}]},{"pos":[9065,9126],"content":"The x-coordinate for the initial origin, in coordinate units.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate for the initial origin, in coordinate units.","pos":[0,61]}]},{"pos":[9713,9787],"content":"Gets or sets the y-coordinate for the initial origin, in coordinate units.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the y-coordinate for the initial origin, in coordinate units.","pos":[0,74]}]},{"pos":[9800,10105],"content":"The origin point represented by the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> and InitialOriginY properties is the average position of all manipulators associated with an element.       A valid value for InitialOriginY is any finite number. The default value is 0.0.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The origin point represented by the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> and InitialOriginY properties is the average position of all manipulators associated with an element.       A valid value for InitialOriginY is any finite number. The default value is 0.0.","pos":[0,303],"nodes":[{"content":"The origin point represented by the &lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A&gt; and InitialOriginY properties is the average position of all manipulators associated with an element.","pos":[0,216],"source":"The origin point represented by the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> and InitialOriginY properties is the average position of all manipulators associated with an element."},{"content":"A valid value for InitialOriginY is any finite number.","pos":[223,277]},{"content":"The default value is 0.0.","pos":[278,303]}]}]},{"pos":[10229,10290],"content":"The y-coordinate for the initial origin, in coordinate units.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate for the initial origin, in coordinate units.","pos":[0,61]}]},{"pos":[10852,10898],"content":"Gets whether inertia is currently in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether inertia is currently in progress.","pos":[0,46]}]},{"pos":[11682,11750],"content":"A Boolean value indicating whether inertia is currently in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value indicating whether inertia is currently in progress.","pos":[0,68]}]},{"pos":[12344,12440],"content":"Extrapolates the manipulation's position, orientation, and average radius at the specified time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Extrapolates the manipulation's position, orientation, and average radius at the specified time.","pos":[0,96]}]},{"pos":[12452,12491],"content":"Timestamps are in 100-nanosecond units.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Timestamps are in 100-nanosecond units.","pos":[0,39]}]},{"pos":[12633,12697],"content":"The timestamp to perform extrapolation, in 100-nanosecond ticks.","needQuote":true,"needEscape":true,"nodes":[{"content":"The timestamp to perform extrapolation, in 100-nanosecond ticks.","pos":[0,64]}]},{"pos":[12756,13039],"content":"The manipulation's position, orientation, and average radius at the specified time. <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if extrapolation is in progress; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if extrapolation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The manipulation's position, orientation, and average radius at the specified time.","pos":[0,83]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if extrapolation is in progress; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if extrapolation has completed.","pos":[84,283],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if extrapolation is in progress; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if extrapolation has completed."}]},{"pos":[13243,13314],"content":"The timestamp parameter is less than the initial or previous timestamp.","needQuote":true,"needEscape":true,"nodes":[{"content":"The timestamp parameter is less than the initial or previous timestamp.","pos":[0,71]}]},{"pos":[13812,13872],"content":"Gets or sets the rotation behavior of the inertia processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the rotation behavior of the inertia processor.","pos":[0,60]}]},{"pos":[14535,14582],"content":"The rotation behavior of the inertia processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rotation behavior of the inertia processor.","pos":[0,47]}]},{"pos":[15339,15380],"content":"Sets parameters on the inertia processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets parameters on the inertia processor.","pos":[0,41]}]},{"pos":[15622,15640],"content":"Parameters to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameters to set.","pos":[0,18]}]},{"pos":[16251,16314],"content":"Gets or sets the translation behavior of the inertia processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the translation behavior of the inertia processor.","pos":[0,63]}]},{"pos":[16550,16600],"content":"The translation behavior of the inertia processor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The translation behavior of the inertia processor.","pos":[0,50]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D\n  id: InertiaProcessor2D\n  children:\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.Completed\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.Delta\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)\n  - System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior\n  langs:\n  - csharp\n  name: InertiaProcessor2D\n  nameWithType: InertiaProcessor2D\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D\n  type: Class\n  summary: Implements the extrapolation of a manipulation's position, orientation, and average radius.\n  remarks: \"An InertiaProcessor2D object enables your application to extrapolate an element's location, orientation, and other properties by simulating real-world behavior.  \\n  \\n For instance, when a user moves an element and then releases it, the element can continue moving, decelerate, and then slowly stop. An inertia processor implements this behavior by causing the affine 2-D values (origin, scale, translation, and rotation) to change over a specified time at a specified deceleration rate.  \\n  \\n An inertia processor by itself does not cause an element to move and decelerate. Your application receives information from an inertia processor and applies the values as needed to an application-specific element. Typically, an application uses the information received from an inertia processor to change the location, size or orientation of an element.  \\n  \\n Inertia processing is typically used in conjunction with manipulation processing. For more information, see the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> class.\"\n  syntax:\n    content: public class InertiaProcessor2D\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: InertiaProcessor2D()\n  nameWithType: InertiaProcessor2D.InertiaProcessor2D()\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.InertiaProcessor2D()\n  type: Constructor\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.Manipulations.InertiaProcessor2D\"></xref> class.\n  syntax:\n    content: public InertiaProcessor2D ();\n    parameters: []\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)\n  id: Complete(System.Int64)\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: Complete(Int64)\n  nameWithType: InertiaProcessor2D.Complete(Int64)\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(Int64)\n  type: Method\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Completes final extrapolation by using the specified timestamp and raises the <xref href=\"System.Windows.Input.Manipulations.InertiaProcessor2D.Completed\"></xref> event.\n  remarks: Timestamps are in 100-nanosecond units.\n  example:\n  - \"In the following example, an event handler for the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=fullName> event checks to see if inertia processing is running and if so, stops it by calling the Complete method.  \\n  \\n [!code-cs[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/add/codesnippet/csharp/build/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  \\n  \\n [!code-cs[ManipulationAPI#_ManipulationItem_Timestamp](~/add/codesnippet/csharp/build/manipulationitem.xaml.cs#_manipulationitem_timestamp)]\"\n  syntax:\n    content: public void Complete (long timestamp);\n    parameters:\n    - id: timestamp\n      type: System.Int64\n      description: The timestamp to complete extrapolation, in 100-nanosecond ticks.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.Complete*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The timestamp parameter is less than the initial or previous timestamp.\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Completed\n  id: Completed\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: Completed\n  nameWithType: InertiaProcessor2D.Completed\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.Completed\n  type: Event\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Occurs when extrapolation has completed.\n  syntax:\n    content: public event EventHandler<System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs> Completed;\n    return:\n      type: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Delta\n  id: Delta\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: Delta\n  nameWithType: InertiaProcessor2D.Delta\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.Delta\n  type: Event\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Occurs when the extrapolation origin has changed or when translation, scaling, or rotation have occurred.\n  remarks: The Delta event and the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=fullName> event are the same type. Typically, you can use the same event handler for both events.\n  example:\n  - '[!code-cs[ManipulationAPI#_ManipulationItem_OnManipulationOrInertiaDelta](~/add/codesnippet/csharp/build/manipulationitem.xaml.cs#_manipulationitem_onmanipulationorinertiadelta)]'\n  syntax:\n    content: public event EventHandler<System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs> Delta;\n    return:\n      type: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior\n  id: ExpansionBehavior\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: ExpansionBehavior\n  nameWithType: InertiaProcessor2D.ExpansionBehavior\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets or sets the expansion behavior of the inertia processor.\n  syntax:\n    content: public System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior { get; set; }\n    return:\n      type: System.Windows.Input.Manipulations.InertiaExpansionBehavior2D\n      description: The expansion behavior of the inertia processor.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX\n  id: InitialOriginX\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: InitialOriginX\n  nameWithType: InertiaProcessor2D.InitialOriginX\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets or sets the x-coordinate for the initial origin, in coordinate units.\n  remarks: \"The origin point represented by the InitialOriginX and <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> properties is the average position of all manipulators associated with an element.  \\n  \\n A valid value for InitialOriginX is any finite number. The default value is 0.0.\"\n  syntax:\n    content: public float InitialOriginX { get; set; }\n    return:\n      type: System.Single\n      description: The x-coordinate for the initial origin, in coordinate units.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY\n  id: InitialOriginY\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: InitialOriginY\n  nameWithType: InertiaProcessor2D.InitialOriginY\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets or sets the y-coordinate for the initial origin, in coordinate units.\n  remarks: \"The origin point represented by the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> and InitialOriginY properties is the average position of all manipulators associated with an element.  \\n  \\n A valid value for InitialOriginY is any finite number. The default value is 0.0.\"\n  syntax:\n    content: public float InitialOriginY { get; set; }\n    return:\n      type: System.Single\n      description: The y-coordinate for the initial origin, in coordinate units.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning\n  id: IsRunning\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: IsRunning\n  nameWithType: InertiaProcessor2D.IsRunning\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets whether inertia is currently in progress.\n  remarks: ''\n  example:\n  - \"In the following example, an event handler for the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=fullName> event checks to see if inertia processing is running and, if so, stops it by calling the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> method.  \\n  \\n [!code-cs[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/add/codesnippet/csharp/build/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  \\n  \\n [!code-cs[ManipulationAPI#_ManipulationItem_Timestamp](~/add/codesnippet/csharp/build/manipulationitem.xaml.cs#_manipulationitem_timestamp)]\"\n  syntax:\n    content: public bool IsRunning { get; }\n    return:\n      type: System.Boolean\n      description: A Boolean value indicating whether inertia is currently in progress.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)\n  id: Process(System.Int64)\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: Process(Int64)\n  nameWithType: InertiaProcessor2D.Process(Int64)\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.Process(Int64)\n  type: Method\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Extrapolates the manipulation's position, orientation, and average radius at the specified time.\n  remarks: Timestamps are in 100-nanosecond units.\n  syntax:\n    content: public bool Process (long timestamp);\n    parameters:\n    - id: timestamp\n      type: System.Int64\n      description: The timestamp to perform extrapolation, in 100-nanosecond ticks.\n    return:\n      type: System.Boolean\n      description: The manipulation's position, orientation, and average radius at the specified time. <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if extrapolation is in progress; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if extrapolation has completed.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.Process*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The timestamp parameter is less than the initial or previous timestamp.\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior\n  id: RotationBehavior\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: RotationBehavior\n  nameWithType: InertiaProcessor2D.RotationBehavior\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets or sets the rotation behavior of the inertia processor.\n  remarks: ''\n  example:\n  - \"In the following example, the <xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A> property is set to enable inertia processing to rotate an object three-and-one-half times from its starting orientation.  \\n  \\n [!code-cs[ManipulationAPI#_ManipulationItem_SetDesiredRotation](~/add/codesnippet/csharp/build/manipulationitem.xaml.cs#_manipulationitem_setdesiredrotation)]\"\n  syntax:\n    content: public System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior { get; set; }\n    return:\n      type: System.Windows.Input.Manipulations.InertiaRotationBehavior2D\n      description: The rotation behavior of the inertia processor.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)\n  id: SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: SetParameters(InertiaParameters2D)\n  nameWithType: InertiaProcessor2D.SetParameters(InertiaParameters2D)\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(InertiaParameters2D)\n  type: Method\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Sets parameters on the inertia processor.\n  syntax:\n    content: public void SetParameters (System.Windows.Input.Manipulations.InertiaParameters2D parameters);\n    parameters:\n    - id: parameters\n      type: System.Windows.Input.Manipulations.InertiaParameters2D\n      description: Parameters to set.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior\n  id: TranslationBehavior\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  langs:\n  - csharp\n  name: TranslationBehavior\n  nameWithType: InertiaProcessor2D.TranslationBehavior\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior\n  type: Property\n  assemblies:\n  - System.Windows.Input.Manipulations\n  namespace: System.Windows.Input.Manipulations\n  summary: Gets or sets the translation behavior of the inertia processor.\n  syntax:\n    content: public System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior { get; set; }\n    return:\n      type: System.Windows.Input.Manipulations.InertiaTranslationBehavior2D\n      description: The translation behavior of the inertia processor.\n  overload: System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: InertiaProcessor2D()\n  nameWithType: InertiaProcessor2D.InertiaProcessor2D()\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.InertiaProcessor2D()\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: Complete(Int64)\n  nameWithType: InertiaProcessor2D.Complete(Int64)\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Completed\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: Completed\n  nameWithType: InertiaProcessor2D.Completed\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.Completed\n- uid: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<Manipulation2DCompletedEventArgs>\n  nameWithType: EventHandler<Manipulation2DCompletedEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs\n    name: Manipulation2DCompletedEventArgs\n    nameWithType: Manipulation2DCompletedEventArgs\n    fullName: Manipulation2DCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Delta\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: Delta\n  nameWithType: InertiaProcessor2D.Delta\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.Delta\n- uid: System.EventHandler{System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<Manipulation2DDeltaEventArgs>\n  nameWithType: EventHandler<Manipulation2DDeltaEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs\n    name: Manipulation2DDeltaEventArgs\n    nameWithType: Manipulation2DDeltaEventArgs\n    fullName: Manipulation2DDeltaEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: ExpansionBehavior\n  nameWithType: InertiaProcessor2D.ExpansionBehavior\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior\n- uid: System.Windows.Input.Manipulations.InertiaExpansionBehavior2D\n  parent: System.Windows.Input.Manipulations\n  isExternal: false\n  name: InertiaExpansionBehavior2D\n  nameWithType: InertiaExpansionBehavior2D\n  fullName: System.Windows.Input.Manipulations.InertiaExpansionBehavior2D\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: InitialOriginX\n  nameWithType: InertiaProcessor2D.InitialOriginX\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: InitialOriginY\n  nameWithType: InertiaProcessor2D.InitialOriginY\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: IsRunning\n  nameWithType: InertiaProcessor2D.IsRunning\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: Process(Int64)\n  nameWithType: InertiaProcessor2D.Process(Int64)\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.Process(Int64)\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: RotationBehavior\n  nameWithType: InertiaProcessor2D.RotationBehavior\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior\n- uid: System.Windows.Input.Manipulations.InertiaRotationBehavior2D\n  parent: System.Windows.Input.Manipulations\n  isExternal: false\n  name: InertiaRotationBehavior2D\n  nameWithType: InertiaRotationBehavior2D\n  fullName: System.Windows.Input.Manipulations.InertiaRotationBehavior2D\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: SetParameters(InertiaParameters2D)\n  nameWithType: InertiaProcessor2D.SetParameters(InertiaParameters2D)\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(InertiaParameters2D)\n- uid: System.Windows.Input.Manipulations.InertiaParameters2D\n  parent: System.Windows.Input.Manipulations\n  isExternal: false\n  name: InertiaParameters2D\n  nameWithType: InertiaParameters2D\n  fullName: System.Windows.Input.Manipulations.InertiaParameters2D\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: TranslationBehavior\n  nameWithType: InertiaProcessor2D.TranslationBehavior\n  fullName: System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior\n- uid: System.Windows.Input.Manipulations.InertiaTranslationBehavior2D\n  parent: System.Windows.Input.Manipulations\n  isExternal: false\n  name: InertiaTranslationBehavior2D\n  nameWithType: InertiaTranslationBehavior2D\n  fullName: System.Windows.Input.Manipulations.InertiaTranslationBehavior2D\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: InertiaProcessor2D\n  nameWithType: InertiaProcessor2D.InertiaProcessor2D\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Complete*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: Complete\n  nameWithType: InertiaProcessor2D.Complete\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: ExpansionBehavior\n  nameWithType: InertiaProcessor2D.ExpansionBehavior\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: InitialOriginX\n  nameWithType: InertiaProcessor2D.InitialOriginX\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: InitialOriginY\n  nameWithType: InertiaProcessor2D.InitialOriginY\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: IsRunning\n  nameWithType: InertiaProcessor2D.IsRunning\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.Process*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: Process\n  nameWithType: InertiaProcessor2D.Process\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: RotationBehavior\n  nameWithType: InertiaProcessor2D.RotationBehavior\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: SetParameters\n  nameWithType: InertiaProcessor2D.SetParameters\n- uid: System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior*\n  parent: System.Windows.Input.Manipulations.InertiaProcessor2D\n  isExternal: false\n  name: TranslationBehavior\n  nameWithType: InertiaProcessor2D.TranslationBehavior\n"}