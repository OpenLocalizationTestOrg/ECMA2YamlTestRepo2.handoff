{"nodes":[{"pos":[826,904],"content":"The base class for SOAP extensions for XML Web services created using ASP.NET.","needQuote":true,"needEscape":true,"nodes":[{"content":"The base class for SOAP extensions for XML Web services created using ASP.NET.","pos":[0,78]}]},{"pos":[917,2032],"content":"ASP.NET allows a SOAP-related infrastructure to be built by means of an extensibility mechanism. The ASP.NET SOAP extension architecture revolves around an extension that can inspect or modify a message at specific stages in message processing on either the client or the server.       ASP.NET SOAP extensions derive from the SoapExtension class. The <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> and <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> methods provide alternative mechanisms for initializing the SOAP extension to enhance performance. <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> is the heart of most SOAP extensions, as the method is called at each stage defined in <xref:System.Web.Services.Protocols.SoapMessageStage>, allowing the SOAP extension to perform the desired behavior of that specific SOAP extension. For SOAP extensions that need to modify the SOAP request or SOAP response, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> provides an opportunity to receive the proposed data to be sent across the wire.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"ASP.NET allows a SOAP-related infrastructure to be built by means of an extensibility mechanism. The ASP.NET SOAP extension architecture revolves around an extension that can inspect or modify a message at specific stages in message processing on either the client or the server.       ASP.NET SOAP extensions derive from the SoapExtension class. The <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> and <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> methods provide alternative mechanisms for initializing the SOAP extension to enhance performance. <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> is the heart of most SOAP extensions, as the method is called at each stage defined in <xref:System.Web.Services.Protocols.SoapMessageStage>, allowing the SOAP extension to perform the desired behavior of that specific SOAP extension. For SOAP extensions that need to modify the SOAP request or SOAP response, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> provides an opportunity to receive the proposed data to be sent across the wire.","pos":[0,1113],"nodes":[{"content":"ASP.NET allows a SOAP-related infrastructure to be built by means of an extensibility mechanism.","pos":[0,96]},{"content":"The ASP.NET SOAP extension architecture revolves around an extension that can inspect or modify a message at specific stages in message processing on either the client or the server.","pos":[97,279]},{"content":"ASP.NET SOAP extensions derive from the SoapExtension class.","pos":[286,346]},{"content":"The &lt;xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A&gt; and &lt;xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A&gt; methods provide alternative mechanisms for initializing the SOAP extension to enhance performance.","pos":[347,587],"source":" The <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> and <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> methods provide alternative mechanisms for initializing the SOAP extension to enhance performance."},{"content":"&lt;xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A&gt; is the heart of most SOAP extensions, as the method is called at each stage defined in &lt;xref:System.Web.Services.Protocols.SoapMessageStage&gt;, allowing the SOAP extension to perform the desired behavior of that specific SOAP extension.","pos":[588,891],"source":" <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> is the heart of most SOAP extensions, as the method is called at each stage defined in <xref:System.Web.Services.Protocols.SoapMessageStage>, allowing the SOAP extension to perform the desired behavior of that specific SOAP extension."},{"content":"For SOAP extensions that need to modify the SOAP request or SOAP response, &lt;xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A&gt; provides an opportunity to receive the proposed data to be sent across the wire.","pos":[892,1113],"source":" For SOAP extensions that need to modify the SOAP request or SOAP response, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> provides an opportunity to receive the proposed data to be sent across the wire."}]}]},{"pos":[3264,3369],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapExtension\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Services.Protocols.SoapExtension\"></xref> class."},{"pos":[3995,4123],"content":"When overridden in a derived class, allows a SOAP extension access to the memory buffer containing the SOAP request or response.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, allows a SOAP extension access to the memory buffer containing the SOAP request or response.","pos":[0,128]}]},{"pos":[4136,5012],"content":"ChainStream ensures that SOAP extensions with the highest priority can modify the actual data closest to the SOAP message sent or returned over the wire.       SOAP extensions should save references of the <xref:System.IO.Stream> passed into ChainStream and the <xref:System.IO.Stream> returned from ChainStream. If the SOAP extension is configured to run with a XML Web service method, the <xref:System.IO.Stream> passed into ChainStream contains the serialized SOAP request at the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>. Similarily, the <xref:System.IO.Stream> reference returned from ChainStream is written into when the serialization occurs and thus contains the serialized SOAP response in the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"ChainStream ensures that SOAP extensions with the highest priority can modify the actual data closest to the SOAP message sent or returned over the wire.       SOAP extensions should save references of the <xref:System.IO.Stream> passed into ChainStream and the <xref:System.IO.Stream> returned from ChainStream. If the SOAP extension is configured to run with a XML Web service method, the <xref:System.IO.Stream> passed into ChainStream contains the serialized SOAP request at the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>. Similarily, the <xref:System.IO.Stream> reference returned from ChainStream is written into when the serialization occurs and thus contains the serialized SOAP response in the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>.","pos":[0,874],"nodes":[{"content":"ChainStream ensures that SOAP extensions with the highest priority can modify the actual data closest to the SOAP message sent or returned over the wire.","pos":[0,153]},{"content":"SOAP extensions should save references of the &lt;xref:System.IO.Stream&gt; passed into ChainStream and the &lt;xref:System.IO.Stream&gt; returned from ChainStream.","pos":[160,312],"source":"       SOAP extensions should save references of the <xref:System.IO.Stream> passed into ChainStream and the <xref:System.IO.Stream> returned from ChainStream."},{"content":"If the SOAP extension is configured to run with a XML Web service method, the &lt;xref:System.IO.Stream&gt; passed into ChainStream contains the serialized SOAP request at the &lt;xref:System.Web.Services.Protocols.SoapMessageStage&gt;&lt;xref:System.Web.Services.Protocols.SoapMessageStage&gt;.","pos":[313,590],"source":" If the SOAP extension is configured to run with a XML Web service method, the <xref:System.IO.Stream> passed into ChainStream contains the serialized SOAP request at the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>."},{"content":"Similarily, the &lt;xref:System.IO.Stream&gt; reference returned from ChainStream is written into when the serialization occurs and thus contains the serialized SOAP response in the &lt;xref:System.Web.Services.Protocols.SoapMessageStage&gt;&lt;xref:System.Web.Services.Protocols.SoapMessageStage&gt;.","pos":[591,874],"source":" Similarily, the <xref:System.IO.Stream> reference returned from ChainStream is written into when the serialization occurs and thus contains the serialized SOAP response in the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>."}]}]},{"pos":[5777,5833],"content":"A memory buffer containing the SOAP request or response.","needQuote":true,"needEscape":true,"nodes":[{"content":"A memory buffer containing the SOAP request or response.","pos":[0,56]}]},{"pos":[5894,5989],"content":"A <xref:System.IO.Stream> representing a new memory buffer that this SOAP extension can modify.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; representing a new memory buffer that this SOAP extension can modify.","pos":[0,95],"source":"A <xref:System.IO.Stream> representing a new memory buffer that this SOAP extension can modify."}]},{"pos":[6550,6712],"content":"When overridden in a derived class, allows a SOAP extension to initialize data specific to a class implementing an XML Web service at a one time performance cost.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, allows a SOAP extension to initialize data specific to a class implementing an XML Web service at a one time performance cost.","pos":[0,162]}]},{"pos":[9228,9322],"content":"The type of the class implementing the XML Web service to which the SOAP extension is applied.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the class implementing the XML Web service to which the SOAP extension is applied.","pos":[0,94]}]},{"pos":[9380,9453],"content":"The <xref:System.Object> that the SOAP extension initializes for caching.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; that the SOAP extension initializes for caching.","pos":[0,73],"source":"The <xref:System.Object> that the SOAP extension initializes for caching."}]},{"pos":[10303,10508],"content":"When overridden in a derived class, allows a SOAP extension to initialize data specific to an XML Web service method using an attribute applied to the XML Web service method at a one time performance cost.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, allows a SOAP extension to initialize data specific to an XML Web service method using an attribute applied to the XML Web service method at a one time performance cost.","pos":[0,205]}]},{"pos":[10521,12047],"content":"If the SOAP extension is configured using a configuration file see the GetInitializer overload that accepts a <xref:System.Type>.       A SOAP extension has three opportunities to initialize data and they all have different purposes:      -   Class constructor - The class constructor is called every time a SOAP extension is instantiated and is typically used to initialize member variables.      -   GetInitializer - GetInitializer, however, is called just once, the first time a SOAP request is made to an XML Web services method. If a custom attribute is applied to the XML Web service method, the GetInitializer method is invoked. This allows the SOAP extension to interrogate the <xref:System.Web.Services.Protocols.LogicalMethodInfo> of an XML Web service method for prototype information or to access extension-specific data passed by a class deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. The return value is cached by ASP.NET and passed into subsequent <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> methods. Therefore, initialization done in GetInitializer is encapsulated essentially into a one-time performance hit.      -   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> is called every time a SOAP request is made to an XML Web service method, but has an advantage over the class constructor, in that the <xref:System.Object> initialized in GetInitializer is passed to it.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the SOAP extension is configured using a configuration file see the GetInitializer overload that accepts a <xref:System.Type>.       A SOAP extension has three opportunities to initialize data and they all have different purposes:      -   Class constructor - The class constructor is called every time a SOAP extension is instantiated and is typically used to initialize member variables.      -   GetInitializer - GetInitializer, however, is called just once, the first time a SOAP request is made to an XML Web services method. If a custom attribute is applied to the XML Web service method, the GetInitializer method is invoked. This allows the SOAP extension to interrogate the <xref:System.Web.Services.Protocols.LogicalMethodInfo> of an XML Web service method for prototype information or to access extension-specific data passed by a class deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. The return value is cached by ASP.NET and passed into subsequent <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> methods. Therefore, initialization done in GetInitializer is encapsulated essentially into a one-time performance hit.      -   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> is called every time a SOAP request is made to an XML Web service method, but has an advantage over the class constructor, in that the <xref:System.Object> initialized in GetInitializer is passed to it.","pos":[0,1518],"nodes":[{"content":"If the SOAP extension is configured using a configuration file see the GetInitializer overload that accepts a &lt;xref:System.Type&gt;.","pos":[0,129],"source":"If the SOAP extension is configured using a configuration file see the GetInitializer overload that accepts a <xref:System.Type>."},{"content":"A SOAP extension has three opportunities to initialize data and they all have different purposes:      -   Class constructor - The class constructor is called every time a SOAP extension is instantiated and is typically used to initialize member variables.","pos":[136,392]},{"content":"-   GetInitializer - GetInitializer, however, is called just once, the first time a SOAP request is made to an XML Web services method.","pos":[398,533]},{"content":"If a custom attribute is applied to the XML Web service method, the GetInitializer method is invoked.","pos":[534,635]},{"content":"This allows the SOAP extension to interrogate the &lt;xref:System.Web.Services.Protocols.LogicalMethodInfo&gt; of an XML Web service method for prototype information or to access extension-specific data passed by a class deriving from &lt;xref:System.Web.Services.Protocols.SoapExtensionAttribute&gt;.","pos":[636,925],"source":" This allows the SOAP extension to interrogate the <xref:System.Web.Services.Protocols.LogicalMethodInfo> of an XML Web service method for prototype information or to access extension-specific data passed by a class deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>."},{"content":"The return value is cached by ASP.NET and passed into subsequent &lt;xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A&gt; methods.","pos":[926,1064],"source":" The return value is cached by ASP.NET and passed into subsequent <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> methods."},{"content":"Therefore, initialization done in GetInitializer is encapsulated essentially into a one-time performance hit.","pos":[1065,1174]},{"content":"-   &lt;xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A&gt; - &lt;xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A&gt; is called every time a SOAP request is made to an XML Web service method, but has an advantage over the class constructor, in that the &lt;xref:System.Object&gt; initialized in GetInitializer is passed to it.","pos":[1180,1518],"source":"      -   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> is called every time a SOAP request is made to an XML Web service method, but has an advantage over the class constructor, in that the <xref:System.Object> initialized in GetInitializer is passed to it."}]}]},{"pos":[13444,13630],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.LogicalMethodInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the specific function prototype for the XML Web service method to which the SOAP extension is applied.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.Services.Protocols.LogicalMethodInfo\"></xref> representing the specific function prototype for the XML Web service method to which the SOAP extension is applied."},{"pos":[13735,13851],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapExtensionAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> applied to the XML Web service method.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Services.Protocols.SoapExtensionAttribute\"></xref> applied to the XML Web service method."},{"pos":[13909,13982],"content":"The <xref:System.Object> that the SOAP extension initializes for caching.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; that the SOAP extension initializes for caching.","pos":[0,73],"source":"The <xref:System.Object> that the SOAP extension initializes for caching."}]},{"pos":[14536,14720],"content":"When overridden in a derived class, allows a SOAP extension to initialize itself using the data cached in the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, allows a SOAP extension to initialize itself using the data cached in the &lt;xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*&gt; method.","pos":[0,184],"source":"When overridden in a derived class, allows a SOAP extension to initialize itself using the data cached in the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*> method."}]},{"pos":[17462,17586],"content":"The <xref:System.Object> returned from <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*> cached by ASP.NET.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; returned from &lt;xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*&gt; cached by ASP.NET.","pos":[0,124],"source":"The <xref:System.Object> returned from <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*> cached by ASP.NET."}]},{"pos":[18227,18450],"content":"When overridden in a derived class, allows a SOAP extension to receive a <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapMessage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to process at each <bpt id=\"p2\">&lt;xref href=\"System.Web.Services.Protocols.SoapMessageStage\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, allows a SOAP extension to receive a <xref href=\"System.Web.Services.Protocols.SoapMessage\"></xref> to process at each <xref href=\"System.Web.Services.Protocols.SoapMessageStage\"></xref>."},{"pos":[18462,19078],"content":"ProcessMessage is called at all <xref:System.Web.Services.Protocols.SoapMessageStage> stages for SOAP extensions applied to both XML Web services created using ASP.NET and their clients. At each <xref:System.Web.Services.Protocols.SoapMessageStage>, an instance of a class deriving from <xref:System.Web.Services.Protocols.SoapMessage> is passed to ProcessMessage. If the SOAP extension is running on the XML Web service client, then a <xref:System.Web.Services.Protocols.SoapClientMessage> object is passed into ProcessMessage; otherwise a <xref:System.Web.Services.Protocols.SoapServerMessage> object is passed in.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"ProcessMessage is called at all <xref:System.Web.Services.Protocols.SoapMessageStage> stages for SOAP extensions applied to both XML Web services created using ASP.NET and their clients. At each <xref:System.Web.Services.Protocols.SoapMessageStage>, an instance of a class deriving from <xref:System.Web.Services.Protocols.SoapMessage> is passed to ProcessMessage. If the SOAP extension is running on the XML Web service client, then a <xref:System.Web.Services.Protocols.SoapClientMessage> object is passed into ProcessMessage; otherwise a <xref:System.Web.Services.Protocols.SoapServerMessage> object is passed in.","pos":[0,616],"nodes":[{"content":"ProcessMessage is called at all &lt;xref:System.Web.Services.Protocols.SoapMessageStage&gt; stages for SOAP extensions applied to both XML Web services created using ASP.NET and their clients.","pos":[0,186],"source":"ProcessMessage is called at all <xref:System.Web.Services.Protocols.SoapMessageStage> stages for SOAP extensions applied to both XML Web services created using ASP.NET and their clients."},{"content":"At each &lt;xref:System.Web.Services.Protocols.SoapMessageStage&gt;, an instance of a class deriving from &lt;xref:System.Web.Services.Protocols.SoapMessage&gt; is passed to ProcessMessage.","pos":[187,364],"source":" At each <xref:System.Web.Services.Protocols.SoapMessageStage>, an instance of a class deriving from <xref:System.Web.Services.Protocols.SoapMessage> is passed to ProcessMessage."},{"content":"If the SOAP extension is running on the XML Web service client, then a &lt;xref:System.Web.Services.Protocols.SoapClientMessage&gt; object is passed into ProcessMessage; otherwise a &lt;xref:System.Web.Services.Protocols.SoapServerMessage&gt; object is passed in.","pos":[365,616],"source":" If the SOAP extension is running on the XML Web service client, then a <xref:System.Web.Services.Protocols.SoapClientMessage> object is passed into ProcessMessage; otherwise a <xref:System.Web.Services.Protocols.SoapServerMessage> object is passed in."}]}]},{"pos":[20177,20255],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Services.Protocols.SoapMessage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to process.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Services.Protocols.SoapMessage\"></xref> to process."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Services.Protocols.SoapExtension\n  id: SoapExtension\n  children:\n  - System.Web.Services.Protocols.SoapExtension.#ctor\n  - System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)\n  - System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)\n  - System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)\n  - System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)\n  - System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)\n  langs:\n  - csharp\n  name: SoapExtension\n  nameWithType: SoapExtension\n  fullName: System.Web.Services.Protocols.SoapExtension\n  type: Class\n  summary: The base class for SOAP extensions for XML Web services created using ASP.NET.\n  remarks: \"ASP.NET allows a SOAP-related infrastructure to be built by means of an extensibility mechanism. The ASP.NET SOAP extension architecture revolves around an extension that can inspect or modify a message at specific stages in message processing on either the client or the server.  \\n  \\n ASP.NET SOAP extensions derive from the SoapExtension class. The <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> and <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> methods provide alternative mechanisms for initializing the SOAP extension to enhance performance. <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> is the heart of most SOAP extensions, as the method is called at each stage defined in <xref:System.Web.Services.Protocols.SoapMessageStage>, allowing the SOAP extension to perform the desired behavior of that specific SOAP extension. For SOAP extensions that need to modify the SOAP request or SOAP response, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> provides an opportunity to receive the proposed data to be sent across the wire.\"\n  example:\n  - \"The following `TraceExtension` SOAP extension outputs the SOAP request and SOAP response to a specified file when applied to an XML Web service method. If the following SOAP extension is installed to run with an XML Web service, the ASPNET user account must have permission to write to the directory in which the log file is written.  \\n  \\n [!code-cs[Classic SoapExtension Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_23_1.cs)]\\n [!code-cpp[Classic SoapExtension Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_23_1.cpp)]\\n [!code-vb[Classic SoapExtension Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_23_1.vb)]\"\n  syntax:\n    content: public abstract class SoapExtension\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapExtension.#ctor\n  id: '#ctor'\n  parent: System.Web.Services.Protocols.SoapExtension\n  langs:\n  - csharp\n  name: SoapExtension()\n  nameWithType: SoapExtension.SoapExtension()\n  fullName: System.Web.Services.Protocols.SoapExtension.SoapExtension()\n  type: Constructor\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Initializes a new instance of the <xref href=\"System.Web.Services.Protocols.SoapExtension\"></xref> class.\n  syntax:\n    content: protected SoapExtension ();\n    parameters: []\n  overload: System.Web.Services.Protocols.SoapExtension.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)\n  id: ChainStream(System.IO.Stream)\n  parent: System.Web.Services.Protocols.SoapExtension\n  langs:\n  - csharp\n  name: ChainStream(Stream)\n  nameWithType: SoapExtension.ChainStream(Stream)\n  fullName: System.Web.Services.Protocols.SoapExtension.ChainStream(Stream)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: When overridden in a derived class, allows a SOAP extension access to the memory buffer containing the SOAP request or response.\n  remarks: \"ChainStream ensures that SOAP extensions with the highest priority can modify the actual data closest to the SOAP message sent or returned over the wire.  \\n  \\n SOAP extensions should save references of the <xref:System.IO.Stream> passed into ChainStream and the <xref:System.IO.Stream> returned from ChainStream. If the SOAP extension is configured to run with a XML Web service method, the <xref:System.IO.Stream> passed into ChainStream contains the serialized SOAP request at the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>. Similarily, the <xref:System.IO.Stream> reference returned from ChainStream is written into when the serialization occurs and thus contains the serialized SOAP response in the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>.\"\n  example:\n  - \"The following example saves both the <xref:System.IO.Stream> passed into ChainStream and the <xref:System.IO.Stream> returned from ChainStream in the member variables `oldStream` and `newStream`, respectively.  \\n  \\n [!code-cpp[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_14_1.cpp)]\\n [!code-cs[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_14_1.cs)]\\n [!code-vb[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_14_1.vb)]\"\n  syntax:\n    content: public virtual System.IO.Stream ChainStream (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A memory buffer containing the SOAP request or response.\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> representing a new memory buffer that this SOAP extension can modify.\n  overload: System.Web.Services.Protocols.SoapExtension.ChainStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)\n  id: GetInitializer(System.Type)\n  parent: System.Web.Services.Protocols.SoapExtension\n  langs:\n  - csharp\n  name: GetInitializer(Type)\n  nameWithType: SoapExtension.GetInitializer(Type)\n  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(Type)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: When overridden in a derived class, allows a SOAP extension to initialize data specific to a class implementing an XML Web service at a one time performance cost.\n  remarks: \"The overload of <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> that gets called by ASP.NET depends on how the SOAP extension was specified. There are two methods for specifying a SOAP extension:  \\n  \\n-   Apply a custom attribute, deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, to the individual XML Web service method.  \\n  \\n-   Add a reference in either the web.config or app.config configuration files.  \\n  \\n If you add a reference to one of the configuration files, the SOAP extension runs for all XML Web services within the scope of that configuration file. When specifying, a SOAP extension by referencing a configuration file, ASP.NET invokes the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> overload that passes in a <xref:System.Type>. When specifying an extension by applying a custom attribute, ASP.NET invokes the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> that passes in a <xref:System.Web.Services.Protocols.LogicalMethodInfo> and a <xref:System.Web.Services.Protocols.SoapExtensionAttribute>.  \\n  \\n For details on adding SOAP extensions to a configuration file, see [&#91;\\\\<topic://cpconconfigurationoptionsforaspnetwebservices>&#93;](http://msdn.microsoft.com/en-us/1f0d71bc-8faa-4730-b500-2a6c7b5d4f6b).\"\n  example:\n  - \"The following code demonstrates how one can save SOAP extension specific data on a per XML Web service basis. If the SOAP extension is configured using a configuration file instead of an attribute, the SOAP extension can store data for each class to which the SOAP extension is applied. This example saves the name of a file in which to log the SOAP messages sent to and from the XML Web service method based on the name of the class implementing the XML Web service into the cache. This code example is part of a full code example for a TraceExtension SOAP extension that can be found in the <xref:System.Web.Services.Protocols.SoapExtension> class overview.  \\n  \\n [!code-vb[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_2_1.vb)]\\n [!code-cs[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/csharp/m-system.web.services.pr_2_1.cs)]\\n [!code-cpp[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/cpp/m-system.web.services.pr_2_1.cpp)]\"\n  syntax:\n    content: public abstract object GetInitializer (Type serviceType);\n    parameters:\n    - id: serviceType\n      type: System.Type\n      description: The type of the class implementing the XML Web service to which the SOAP extension is applied.\n    return:\n      type: System.Object\n      description: The <xref:System.Object> that the SOAP extension initializes for caching.\n  overload: System.Web.Services.Protocols.SoapExtension.GetInitializer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)\n  id: GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)\n  parent: System.Web.Services.Protocols.SoapExtension\n  langs:\n  - csharp\n  name: GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)\n  nameWithType: SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)\n  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: When overridden in a derived class, allows a SOAP extension to initialize data specific to an XML Web service method using an attribute applied to the XML Web service method at a one time performance cost.\n  remarks: \"If the SOAP extension is configured using a configuration file see the GetInitializer overload that accepts a <xref:System.Type>.  \\n  \\n A SOAP extension has three opportunities to initialize data and they all have different purposes:  \\n  \\n-   Class constructor - The class constructor is called every time a SOAP extension is instantiated and is typically used to initialize member variables.  \\n  \\n-   GetInitializer - GetInitializer, however, is called just once, the first time a SOAP request is made to an XML Web services method. If a custom attribute is applied to the XML Web service method, the GetInitializer method is invoked. This allows the SOAP extension to interrogate the <xref:System.Web.Services.Protocols.LogicalMethodInfo> of an XML Web service method for prototype information or to access extension-specific data passed by a class deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. The return value is cached by ASP.NET and passed into subsequent <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> methods. Therefore, initialization done in GetInitializer is encapsulated essentially into a one-time performance hit.  \\n  \\n-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> is called every time a SOAP request is made to an XML Web service method, but has an advantage over the class constructor, in that the <xref:System.Object> initialized in GetInitializer is passed to it.\"\n  example:\n  - \"The following code demonstrates how you can obtain SOAP extension-specific data passed in using a class that derives from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, and then cache that data in GetInitializer. This code example is part of a full code example for a `TraceExtension` SOAP extension that can be found in the <xref:System.Web.Services.Protocols.SoapExtension> class overview. This code example relies on a `TraceExtensionAttribute` being passed into the `attribute` parameter. In the full code example, `TraceExtensionAttribute` derives from <xref:System.Web.Services.Protocols.SoapExtensionAttribute> and adds a `Filename` property, which is what GetInitializer stores in the cache.  \\n  \\n [!code-cpp[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/cpp/3e28a43a-5fe0-43d3-bd26-_1.cpp)]\\n [!code-cs[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/csharp/3e28a43a-5fe0-43d3-bd26-_1.cs)]\\n [!code-vb[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/visualbasic/3e28a43a-5fe0-43d3-bd26-_1.vb)]\"\n  syntax:\n    content: public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);\n    parameters:\n    - id: methodInfo\n      type: System.Web.Services.Protocols.LogicalMethodInfo\n      description: A <xref href=\"System.Web.Services.Protocols.LogicalMethodInfo\"></xref> representing the specific function prototype for the XML Web service method to which the SOAP extension is applied.\n    - id: attribute\n      type: System.Web.Services.Protocols.SoapExtensionAttribute\n      description: The <xref href=\"System.Web.Services.Protocols.SoapExtensionAttribute\"></xref> applied to the XML Web service method.\n    return:\n      type: System.Object\n      description: The <xref:System.Object> that the SOAP extension initializes for caching.\n  overload: System.Web.Services.Protocols.SoapExtension.GetInitializer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)\n  id: Initialize(System.Object)\n  parent: System.Web.Services.Protocols.SoapExtension\n  langs:\n  - csharp\n  name: Initialize(Object)\n  nameWithType: SoapExtension.Initialize(Object)\n  fullName: System.Web.Services.Protocols.SoapExtension.Initialize(Object)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: When overridden in a derived class, allows a SOAP extension to initialize itself using the data cached in the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*> method.\n  remarks: \"A SOAP extension has three opportunities to initialize data and they all have different purposes:  \\n  \\n-   Class constructor - The class constructor is called every time a SOAP extension is instantiated and is typically used to initialize member variables.  \\n  \\n-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, however, is called just once, the first time a SOAP request is made to an XML Web services method. If a custom attribute is applied to the XML Web service method, the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method is invoked. This allows the SOAP extension to interrogate the <xref:System.Web.Services.Protocols.LogicalMethodInfo> of an XML Web service method for prototype information or to access extension-specific data passed by a class deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. The return value is cached by ASP.NET and passed into subsequent Initialize methods. Therefore, initialization done in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> is encapsulated essentially into a one-time performance hit.  \\n  \\n-   Initialize - Initialize is called every time a SOAP request is made to an XML Web service method, but has an advantage over the class constructor, in that the <xref:System.Object> initialized in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> is passed to it.  \\n  \\n-  \\n  \\n> [!NOTE]\\n>  You can also add a SOAP extension without deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute> by using the [\\\\<soapExtensionTypes> Element](http://msdn.microsoft.com/en-us/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) in a configuration file. For details, see [\\\\<soapExtensionTypes> Element](http://msdn.microsoft.com/en-us/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) and [SOAP Message Modification Using SOAP Extensions](http://msdn.microsoft.com/en-us/97d81ace-95e7-4acc-ae39-9692a0021e95).  \\n  \\n-\"\n  example:\n  - \"The following example demonstrates how you can use the data cached during the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method.  \\n  \\n [!code-cpp[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_10_1.cpp)]\\n [!code-cs[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_10_1.cs)]\\n [!code-vb[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_10_1.vb)]\"\n  syntax:\n    content: public abstract void Initialize (object initializer);\n    parameters:\n    - id: initializer\n      type: System.Object\n      description: The <xref:System.Object> returned from <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*> cached by ASP.NET.\n  overload: System.Web.Services.Protocols.SoapExtension.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)\n  id: ProcessMessage(System.Web.Services.Protocols.SoapMessage)\n  parent: System.Web.Services.Protocols.SoapExtension\n  langs:\n  - csharp\n  name: ProcessMessage(SoapMessage)\n  nameWithType: SoapExtension.ProcessMessage(SoapMessage)\n  fullName: System.Web.Services.Protocols.SoapExtension.ProcessMessage(SoapMessage)\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: When overridden in a derived class, allows a SOAP extension to receive a <xref href=\"System.Web.Services.Protocols.SoapMessage\"></xref> to process at each <xref href=\"System.Web.Services.Protocols.SoapMessageStage\"></xref>.\n  remarks: ProcessMessage is called at all <xref:System.Web.Services.Protocols.SoapMessageStage> stages for SOAP extensions applied to both XML Web services created using ASP.NET and their clients. At each <xref:System.Web.Services.Protocols.SoapMessageStage>, an instance of a class deriving from <xref:System.Web.Services.Protocols.SoapMessage> is passed to ProcessMessage. If the SOAP extension is running on the XML Web service client, then a <xref:System.Web.Services.Protocols.SoapClientMessage> object is passed into ProcessMessage; otherwise a <xref:System.Web.Services.Protocols.SoapServerMessage> object is passed in.\n  example:\n  - \"The following example is the ProcessMessage portion of a SOAP extension that logs SOAP requests and SOAP responses. By logging the <xref:System.Web.Services.Protocols.SoapMessage> at the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>, the SOAP extension accesses the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> to be sent over the wire. If the SOAP extension is applied to an XML Web service method created using ASP.NET, then the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contains the SOAP response from the XML Web service method. If the SOAP extension is applied to an XML Web service client, the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contains the SOAP request to an XML Web service method.  \\n  \\n Classic SoapExtension.ProcessMessage Example#1\"\n  syntax:\n    content: public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);\n    parameters:\n    - id: message\n      type: System.Web.Services.Protocols.SoapMessage\n      description: The <xref href=\"System.Web.Services.Protocols.SoapMessage\"></xref> to process.\n  overload: System.Web.Services.Protocols.SoapExtension.ProcessMessage*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.Services.Protocols.SoapExtension.#ctor\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: SoapExtension()\n  nameWithType: SoapExtension.SoapExtension()\n  fullName: System.Web.Services.Protocols.SoapExtension.SoapExtension()\n- uid: System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: ChainStream(Stream)\n  nameWithType: SoapExtension.ChainStream(Stream)\n  fullName: System.Web.Services.Protocols.SoapExtension.ChainStream(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: GetInitializer(Type)\n  nameWithType: SoapExtension.GetInitializer(Type)\n  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)\n  nameWithType: SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)\n  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)\n- uid: System.Web.Services.Protocols.LogicalMethodInfo\n  parent: System.Web.Services.Protocols\n  isExternal: false\n  name: LogicalMethodInfo\n  nameWithType: LogicalMethodInfo\n  fullName: System.Web.Services.Protocols.LogicalMethodInfo\n- uid: System.Web.Services.Protocols.SoapExtensionAttribute\n  parent: System.Web.Services.Protocols\n  isExternal: false\n  name: SoapExtensionAttribute\n  nameWithType: SoapExtensionAttribute\n  fullName: System.Web.Services.Protocols.SoapExtensionAttribute\n- uid: System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: Initialize(Object)\n  nameWithType: SoapExtension.Initialize(Object)\n  fullName: System.Web.Services.Protocols.SoapExtension.Initialize(Object)\n- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: ProcessMessage(SoapMessage)\n  nameWithType: SoapExtension.ProcessMessage(SoapMessage)\n  fullName: System.Web.Services.Protocols.SoapExtension.ProcessMessage(SoapMessage)\n- uid: System.Web.Services.Protocols.SoapMessage\n  parent: System.Web.Services.Protocols\n  isExternal: false\n  name: SoapMessage\n  nameWithType: SoapMessage\n  fullName: System.Web.Services.Protocols.SoapMessage\n- uid: System.Web.Services.Protocols.SoapExtension.#ctor*\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: SoapExtension\n  nameWithType: SoapExtension.SoapExtension\n- uid: System.Web.Services.Protocols.SoapExtension.ChainStream*\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: ChainStream\n  nameWithType: SoapExtension.ChainStream\n- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer*\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: GetInitializer\n  nameWithType: SoapExtension.GetInitializer\n- uid: System.Web.Services.Protocols.SoapExtension.Initialize*\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: Initialize\n  nameWithType: SoapExtension.Initialize\n- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage*\n  parent: System.Web.Services.Protocols.SoapExtension\n  isExternal: false\n  name: ProcessMessage\n  nameWithType: SoapExtension.ProcessMessage\n"}