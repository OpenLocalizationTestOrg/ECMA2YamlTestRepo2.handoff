{"nodes":[{"pos":[367,446],"content":"Designates a class as an entity class that is associated with a database table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Designates a class as an entity class that is associated with a database table.","pos":[0,79]}]},{"pos":[459,2770],"content":"Use this attribute to designate a class as an entity class that is associated with a database table or view. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] treats classes that have the TableAttribute attribute as persistent classes.       [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] supports only single-table mapping. That is, an entity class must be mapped to exactly one database table, and you cannot map a database table to multiple classes at the same time.       You can use the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property of the TableAttribute attribute to specify a name for the table, and you can optionally use the schema name to qualify a table name. If you do not specify a name by using the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property, the table name is assumed to be the same as the class name.      ## Schema-qualified Names    You can optionally use the schema name to qualify a table name. By default, the token to the left of the first period in the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> string is considered to be the schema name. The remainder of the name is considered to be the table name. The provider quotes the table name as appropriate. For example, the [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] provider for SQL Server makes sure that brackets are used at least where they are needed.      > [!NOTE] >  In some cases, you must explicitly quote attributes because the SQL Server provider cannot auto-quote. The following table shows some examples.      |Case|Example: Identifier Name|Example: Expected String in Attributes|Otherwise…|   |----------|------------------------------|--------------------------------------------|----------------|   |Schema name contains a period|Schema: \"A.B\"<br /><br /> Table: \"C\"|\"[A.B].C\"|The first period is assumed to separate the schema name from the table name.|   |Schema/Table name starts with `@`|\"@SomeName\"|\"[@SomeName]\"|Assumed to be a parameter name.|   |Schema starts with `[` and ends with `]`|\"[Schema.Table]\"|\"[[Schema].[Table]]]\"|The unquoted identifier resembles a quoted identifier.|   |Table starts with `[` and ends with `]`|\"[Table]\"|\"[[Table]]]\"|The unquoted identifier resembles a quoted identifier.|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this attribute to designate a class as an entity class that is associated with a database table or view. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] treats classes that have the TableAttribute attribute as persistent classes.       [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] supports only single-table mapping. That is, an entity class must be mapped to exactly one database table, and you cannot map a database table to multiple classes at the same time.       You can use the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property of the TableAttribute attribute to specify a name for the table, and you can optionally use the schema name to qualify a table name. If you do not specify a name by using the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property, the table name is assumed to be the same as the class name.      ## Schema-qualified Names    You can optionally use the schema name to qualify a table name. By default, the token to the left of the first period in the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> string is considered to be the schema name. The remainder of the name is considered to be the table name. The provider quotes the table name as appropriate. For example, the [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] provider for SQL Server makes sure that brackets are used at least where they are needed.      > [!NOTE] >  In some cases, you must explicitly quote attributes because the SQL Server provider cannot auto-quote. The following table shows some examples.      |Case|Example: Identifier Name|Example: Expected String in Attributes|Otherwise…|   |----------|------------------------------|--------------------------------------------|----------------|   |Schema name contains a period|Schema: \"A.B\"","pos":[0,1808],"nodes":[{"content":"Use this attribute to designate a class as an entity class that is associated with a database table or view.","pos":[0,108]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]</ph> treats classes that have the TableAttribute attribute as persistent classes.","pos":[109,241],"source":"[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] treats classes that have the TableAttribute attribute as persistent classes."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]</ph> supports only single-table mapping.","pos":[248,339],"source":"[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] supports only single-table mapping."},{"content":"That is, an entity class must be mapped to exactly one database table, and you cannot map a database table to multiple classes at the same time.","pos":[340,484]},{"content":"You can use the &lt;xref:System.Data.Linq.Mapping.TableAttribute.Name%2A&gt; property of the TableAttribute attribute to specify a name for the table, and you can optionally use the schema name to qualify a table name.","pos":[491,703],"source":"       You can use the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property of the TableAttribute attribute to specify a name for the table, and you can optionally use the schema name to qualify a table name."},{"content":"If you do not specify a name by using the &lt;xref:System.Data.Linq.Mapping.TableAttribute.Name%2A&gt; property, the table name is assumed to be the same as the class name.","pos":[704,870],"source":" If you do not specify a name by using the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property, the table name is assumed to be the same as the class name."},{"content":"Schema-qualified Names    You can optionally use the schema name to qualify a table name.","pos":[879,968]},{"content":"By default, the token to the left of the first period in the &lt;xref:System.Data.Linq.Mapping.TableAttribute.Name%2A&gt; string is considered to be the schema name.","pos":[969,1128],"source":" By default, the token to the left of the first period in the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> string is considered to be the schema name."},{"content":"The remainder of the name is considered to be the table name.","pos":[1129,1190]},{"content":"The provider quotes the table name as appropriate.","pos":[1191,1241]},{"content":"For example, the <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]</ph> provider for SQL Server makes sure that brackets are used at least where they are needed.","pos":[1242,1404],"source":" For example, the [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] provider for SQL Server makes sure that brackets are used at least where they are needed."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In some cases, you must explicitly quote attributes because the SQL Server provider cannot auto-quote.","pos":[1410,1525],"source":"      > [!NOTE] >  In some cases, you must explicitly quote attributes because the SQL Server provider cannot auto-quote."},{"content":"The following table shows some examples.","pos":[1526,1566]},{"content":"|Case|Example: Identifier Name|Example: Expected String in Attributes|Otherwise…|   |----------|------------------------------|--------------------------------------------|----------------|   |Schema name contains a period|Schema: \"A.B\"","pos":[1572,1808]}]},{"content":"Table: \"C\"|\"[A.B].C\"|The first period is assumed to separate the schema name from the table name.|   |Schema/Table name starts with <ph id=\"ph1\">`@`</ph>|\"<ph id=\"ph2\">@SomeName</ph>\"|\"[<ph id=\"ph3\">@SomeName</ph>]\"|Assumed to be a parameter name.|   |Schema starts with <ph id=\"ph4\">`[`</ph> and ends with <ph id=\"ph5\">`]`</ph>|\"[Schema.Table]\"|\"[[Schema].[Table]]]\"|The unquoted identifier resembles a quoted identifier.|   |Table starts with <ph id=\"ph6\">`[`</ph> and ends with <ph id=\"ph7\">`]`</ph>|\"[Table]\"|\"[[Table]]]\"|The unquoted identifier resembles a quoted identifier.|","pos":[1821,2276],"source":" Table: \"C\"|\"[A.B].C\"|The first period is assumed to separate the schema name from the table name.|   |Schema/Table name starts with `@`|\"@SomeName\"|\"[@SomeName]\"|Assumed to be a parameter name.|   |Schema starts with `[` and ends with `]`|\"[Schema.Table]\"|\"[[Schema].[Table]]]\"|The unquoted identifier resembles a quoted identifier.|   |Table starts with `[` and ends with `]`|\"[Table]\"|\"[[Table]]]\"|The unquoted identifier resembles a quoted identifier.|"}]},{"pos":[3621,3722],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.TableAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Linq.Mapping.TableAttribute\"></xref> class."},{"pos":[4230,4273],"content":"Gets or sets the name of the table or view.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the table or view.","pos":[0,43]}]},{"pos":[4286,4746],"content":"If you do not specify a name by using Name, the table name is assumed to be the same as the class name.      > [!NOTE] >  You can optionally use a schema name to qualify the table name (for example, Schema3.Table5). By default, the token to the left of the first period in the Name string is considered to be the schema name, and the rest to be the table name.       In the following example, the default table name, `Customer`, is changed to `Customers`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you do not specify a name by using Name, the table name is assumed to be the same as the class name.","pos":[0,103]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can optionally use a schema name to qualify the table name (for example, Schema3.Table5).","pos":[109,215],"source":"      > [!NOTE] >  You can optionally use a schema name to qualify the table name (for example, Schema3.Table5)."},{"content":"By default, the token to the left of the first period in the Name string is considered to be the schema name, and the rest to be the table name.","pos":[216,360]},{"content":"In the following example, the default table name, <ph id=\"ph1\">`Customer`</ph>, is changed to <ph id=\"ph2\">`Customers`</ph>.","pos":[367,455],"source":"       In the following example, the default table name, `Customer`, is changed to `Customers`."}]},{"pos":[5049,5108],"content":"By default, the value is the same as the name of the class.","needQuote":true,"needEscape":true,"nodes":[{"content":"By default, the value is the same as the name of the class.","pos":[0,59]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.Mapping.TableAttribute\n  id: TableAttribute\n  children:\n  - System.Data.Linq.Mapping.TableAttribute.#ctor\n  - System.Data.Linq.Mapping.TableAttribute.Name\n  langs:\n  - csharp\n  name: TableAttribute\n  nameWithType: TableAttribute\n  fullName: System.Data.Linq.Mapping.TableAttribute\n  type: Class\n  summary: Designates a class as an entity class that is associated with a database table.\n  remarks: \"Use this attribute to designate a class as an entity class that is associated with a database table or view. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] treats classes that have the TableAttribute attribute as persistent classes.  \\n  \\n [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] supports only single-table mapping. That is, an entity class must be mapped to exactly one database table, and you cannot map a database table to multiple classes at the same time.  \\n  \\n You can use the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property of the TableAttribute attribute to specify a name for the table, and you can optionally use the schema name to qualify a table name. If you do not specify a name by using the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property, the table name is assumed to be the same as the class name.  \\n  \\n## Schema-qualified Names  \\n You can optionally use the schema name to qualify a table name. By default, the token to the left of the first period in the <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> string is considered to be the schema name. The remainder of the name is considered to be the table name. The provider quotes the table name as appropriate. For example, the [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] provider for SQL Server makes sure that brackets are used at least where they are needed.  \\n  \\n> [!NOTE]\\n>  In some cases, you must explicitly quote attributes because the SQL Server provider cannot auto-quote. The following table shows some examples.  \\n  \\n|Case|Example: Identifier Name|Example: Expected String in Attributes|Otherwise…|  \\n|----------|------------------------------|--------------------------------------------|----------------|  \\n|Schema name contains a period|Schema: \\\"A.B\\\"<br /><br /> Table: \\\"C\\\"|\\\"[A.B].C\\\"|The first period is assumed to separate the schema name from the table name.|  \\n|Schema/Table name starts with `@`|\\\"@SomeName\\\"|\\\"[@SomeName]\\\"|Assumed to be a parameter name.|  \\n|Schema starts with `[` and ends with `]`|\\\"[Schema.Table]\\\"|\\\"[[Schema].[Table]]]\\\"|The unquoted identifier resembles a quoted identifier.|  \\n|Table starts with `[` and ends with `]`|\\\"[Table]\\\"|\\\"[[Table]]]\\\"|The unquoted identifier resembles a quoted identifier.|\"\n  example:\n  - >-\n    [!code-vb[DLinqCustomize#1](~/add/codesnippet/visualbasic/customize/Module1.vb#1)]\n     [!code-cs[DLinqCustomize#1](~/add/codesnippet/csharp/customize/Program.cs#1)]\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)]\n\n      public sealed class TableAttribute : Attribute\n  inheritance:\n  - System.Attribute\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.TableAttribute.#ctor\n  id: '#ctor'\n  parent: System.Data.Linq.Mapping.TableAttribute\n  langs:\n  - csharp\n  name: TableAttribute()\n  nameWithType: TableAttribute.TableAttribute()\n  fullName: System.Data.Linq.Mapping.TableAttribute.TableAttribute()\n  type: Constructor\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Initializes a new instance of the <xref href=\"System.Data.Linq.Mapping.TableAttribute\"></xref> class.\n  syntax:\n    content: public TableAttribute ();\n    parameters: []\n  overload: System.Data.Linq.Mapping.TableAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.TableAttribute.Name\n  id: Name\n  parent: System.Data.Linq.Mapping.TableAttribute\n  langs:\n  - csharp\n  name: Name\n  nameWithType: TableAttribute.Name\n  fullName: System.Data.Linq.Mapping.TableAttribute.Name\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets or sets the name of the table or view.\n  remarks: \"If you do not specify a name by using Name, the table name is assumed to be the same as the class name.  \\n  \\n> [!NOTE]\\n>  You can optionally use a schema name to qualify the table name (for example, Schema3.Table5). By default, the token to the left of the first period in the Name string is considered to be the schema name, and the rest to be the table name.  \\n  \\n In the following example, the default table name, `Customer`, is changed to `Customers`.\"\n  example:\n  - >-\n    [!code-vb[DLinqCustomize#1](~/add/codesnippet/visualbasic/customize/Module1.vb#1)]\n     [!code-cs[DLinqCustomize#1](~/add/codesnippet/csharp/customize/Program.cs#1)]\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: By default, the value is the same as the name of the class.\n  overload: System.Data.Linq.Mapping.TableAttribute.Name*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Attribute\n  isExternal: false\n  name: System.Attribute\n- uid: System.Data.Linq.Mapping.TableAttribute.#ctor\n  parent: System.Data.Linq.Mapping.TableAttribute\n  isExternal: false\n  name: TableAttribute()\n  nameWithType: TableAttribute.TableAttribute()\n  fullName: System.Data.Linq.Mapping.TableAttribute.TableAttribute()\n- uid: System.Data.Linq.Mapping.TableAttribute.Name\n  parent: System.Data.Linq.Mapping.TableAttribute\n  isExternal: false\n  name: Name\n  nameWithType: TableAttribute.Name\n  fullName: System.Data.Linq.Mapping.TableAttribute.Name\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Linq.Mapping.TableAttribute.#ctor*\n  parent: System.Data.Linq.Mapping.TableAttribute\n  isExternal: false\n  name: TableAttribute\n  nameWithType: TableAttribute.TableAttribute\n- uid: System.Data.Linq.Mapping.TableAttribute.Name*\n  parent: System.Data.Linq.Mapping.TableAttribute\n  isExternal: false\n  name: Name\n  nameWithType: TableAttribute.Name\n"}