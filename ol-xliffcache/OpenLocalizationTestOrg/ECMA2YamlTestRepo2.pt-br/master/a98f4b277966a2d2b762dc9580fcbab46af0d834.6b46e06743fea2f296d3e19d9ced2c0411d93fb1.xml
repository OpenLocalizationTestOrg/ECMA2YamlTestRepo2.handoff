{"nodes":[{"pos":[1868,1975],"content":"The WebSocket class allows applications to send and receive data after the WebSocket upgrade has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The WebSocket class allows applications to send and receive data after the WebSocket upgrade has completed.","pos":[0,107]}]},{"pos":[1987,2558],"content":"Some of the classes in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008. However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012. The classes and class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract classes. This allows an application developer to inherit and extend these abstract classes with an actual implementation of client WebSockets.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Some of the classes in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008. However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012. The classes and class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract classes. This allows an application developer to inherit and extend these abstract classes with an actual implementation of client WebSockets.","pos":[0,571],"nodes":[{"content":"Some of the classes in the &lt;xref:System.Net.WebSockets&gt; namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008.","pos":[0,137],"source":"Some of the classes in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008."},{"content":"However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012.","pos":[138,262]},{"content":"The classes and class elements in the &lt;xref:System.Net.WebSockets&gt; namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract classes.","pos":[263,437],"source":" The classes and class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract classes."},{"content":"This allows an application developer to inherit and extend these abstract classes with an actual implementation of client WebSockets.","pos":[438,571]}]}]},{"pos":[3072,3158],"content":"Creates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Creates an instance of the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> class."},{"pos":[3623,3693],"content":"Aborts the WebSocket connection and cancels any pending IO operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Aborts the WebSocket connection and cancels any pending IO operations.","pos":[0,70]}]},{"pos":[4511,4726],"content":"Closes the WebSocket connection as an asynchronous operation using the close handshake defined in the <bpt id=\"p1\">[</bpt>WebSocket protocol specification<ept id=\"p1\">](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)</ept> section 7.","needQuote":true,"needEscape":true,"source":"Closes the WebSocket connection as an asynchronous operation using the close handshake defined in the [WebSocket protocol specification](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) section 7."},{"pos":[4739,5082],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the WebSocket has been closed.       This method closes the WebSocket connection using the close handshake defined in the [WebSocket protocol specification](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) section 7.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after the WebSocket has been closed.","pos":[31,136],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the WebSocket has been closed."},{"content":"This method closes the WebSocket connection using the close handshake defined in the <bpt id=\"p1\">[</bpt>WebSocket protocol specification<ept id=\"p1\">](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)</ept> section 7.","pos":[143,341],"source":"       This method closes the WebSocket connection using the close handshake defined in the [WebSocket protocol specification](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) section 7."}]},{"pos":[5412,5470],"content":"Indicates the reason for closing the WebSocket connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates the reason for closing the WebSocket connection.","pos":[0,58]}]},{"pos":[5544,5618],"content":"Specifies a human readable explanation as to why the connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a human readable explanation as to why the connection is closed.","pos":[0,74]}]},{"pos":[5713,5801],"content":"The token that can be used to propagate notification that operations should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token that can be used to propagate notification that operations should be canceled.","pos":[0,88]}]},{"pos":[5874,5982],"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","pos":[0,106],"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;.","pos":[0,43],"source":"Returns <xref:System.Threading.Tasks.Task>."},{"content":"The task object representing the asynchronous operation.","pos":[50,106]}]}]},{"pos":[6763,6934],"content":"Initiates or completes the close handshake defined in the <bpt id=\"p1\">[</bpt>WebSocket protocol specification section 7<ept id=\"p1\">](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)</ept>.","needQuote":true,"needEscape":true,"source":"Initiates or completes the close handshake defined in the [WebSocket protocol specification section 7](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)."},{"pos":[6946,7096],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the WebSocket has been closed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the WebSocket has been closed.","pos":[0,150],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after the output on the WebSocket has been closed.","pos":[31,150],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the WebSocket has been closed."}]}]},{"pos":[7431,7489],"content":"Indicates the reason for closing the WebSocket connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates the reason for closing the WebSocket connection.","pos":[0,58]}]},{"pos":[7563,7658],"content":"Allows applications to specify a human readable explanation as to why the connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows applications to specify a human readable explanation as to why the connection is closed.","pos":[0,95]}]},{"pos":[7753,7841],"content":"The token that can be used to propagate notification that operations should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token that can be used to propagate notification that operations should be canceled.","pos":[0,88]}]},{"pos":[7914,8022],"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","pos":[0,106],"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;.","pos":[0,43],"source":"Returns <xref:System.Threading.Tasks.Task>."},{"content":"The task object representing the asynchronous operation.","pos":[50,106]}]}]},{"pos":[8459,8534],"content":"Indicates the reason why the remote endpoint initiated the close handshake.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates the reason why the remote endpoint initiated the close handshake.","pos":[0,75]}]},{"pos":[8546,8635],"content":"If the close handshake has not been initiated yet, WebSocketCloseStatus.None is returned.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the close handshake has not been initiated yet, WebSocketCloseStatus.None is returned.","pos":[0,89]}]},{"pos":[8852,8924],"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocketCloseStatus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref href=\"System.Net.WebSockets.WebSocketCloseStatus\"></xref>."},{"pos":[9410,9490],"content":"Allows the remote endpoint to describe the reason why the connection was closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows the remote endpoint to describe the reason why the connection was closed.","pos":[0,80]}]},{"pos":[9626,9655],"content":"Returns <xref:System.String>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.String&gt;.","pos":[0,29],"source":"Returns <xref:System.String>."}]},{"pos":[10223,10324],"content":"Create client buffers to use with this <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Create client buffers to use with this <xref href=\"System.Net.WebSockets.WebSocket\"></xref> instance."},{"pos":[10533,10582],"content":"The size, in bytes, of the client receive buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bytes, of the client receive buffer.","pos":[0,49]}]},{"pos":[10652,10691],"content":"The size, in bytes, of the send buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bytes, of the send buffer.","pos":[0,39]}]},{"pos":[10769,10856],"content":"Returns &lt;xref:System.ArraySegment%601&gt;.       An array with the client buffers.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.ArraySegment%601&gt;.       An array with the client buffers.","pos":[0,85],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.ArraySegment%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,45],"source":"Returns &lt;xref:System.ArraySegment%601&gt;."},{"content":"An array with the client buffers.","pos":[52,85]}]}]},{"pos":[11777,11993],"content":"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.       Allows callers to create a client side WebSocket class which will use the WSPC for framing purposes.","needQuote":false,"needEscape":true,"nodes":[{"content":"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.       Allows callers to create a client side WebSocket class which will use the WSPC for framing purposes.","pos":[0,214],"nodes":[{"content":"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.","pos":[0,107]},{"content":"Allows callers to create a client side WebSocket class which will use the WSPC for framing purposes.","pos":[114,214]}]}]},{"pos":[12354,12398],"content":"The connection to be used for IO operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection to be used for IO operations.","pos":[0,44]}]},{"pos":[12466,12505],"content":"The subprotocol accepted by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The subprotocol accepted by the client.","pos":[0,39]}]},{"pos":[12578,12635],"content":"The size in bytes of the client WebSocket receive buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size in bytes of the client WebSocket receive buffer.","pos":[0,57]}]},{"pos":[12705,12759],"content":"The size in bytes of the client WebSocket send buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size in bytes of the client WebSocket send buffer.","pos":[0,54]}]},{"pos":[12835,12954],"content":"Determines how regularly a frame is sent over the connection as a keep-alive. Applies only when the connection is idle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines how regularly a frame is sent over the connection as a keep-alive. Applies only when the connection is idle.","pos":[0,119],"nodes":[{"content":"Determines how regularly a frame is sent over the connection as a keep-alive.","pos":[0,77]},{"content":"Applies only when the connection is idle.","pos":[78,119]}]}]},{"pos":[13029,13130],"content":"Indicates whether a random key or a static key (just zeros) should be used for the WebSocket masking.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether a random key or a static key (just zeros) should be used for the WebSocket masking.","pos":[0,101]}]},{"pos":[13220,13363],"content":"Will be used as the internal buffer in the WPC. The size has to be at least `2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)`.","needQuote":true,"needEscape":true,"nodes":[{"content":"Will be used as the internal buffer in the WPC.","pos":[0,47]},{"content":"The size has to be at least <ph id=\"ph1\">`2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)`</ph>.","pos":[48,143],"source":" The size has to be at least `2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)`."}]},{"pos":[13439,13500],"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref href=\"System.Net.WebSockets.WebSocket\"></xref>."},{"pos":[14023,14057],"content":"Creates a WebSocket server buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a WebSocket server buffer.","pos":[0,34]}]},{"pos":[14246,14288],"content":"The size, in bytes, of the desired buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bytes, of the desired buffer.","pos":[0,42]}]},{"pos":[14365,14410],"content":"Returns &lt;xref:System.ArraySegment%601&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.ArraySegment%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,45],"source":"Returns &lt;xref:System.ArraySegment%601&gt;."}]},{"pos":[14913,14985],"content":"Gets the default WebSocket protocol keep-alive interval in milliseconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the default WebSocket protocol keep-alive interval in milliseconds.","pos":[0,72]}]},{"pos":[15126,15284],"content":"Returns <xref:System.TimeSpan>.       The default WebSocket protocol keep-alive interval in milliseconds. The typical value for this interval is 30 seconds.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.TimeSpan>.       The default WebSocket protocol keep-alive interval in milliseconds. The typical value for this interval is 30 seconds.","pos":[0,156],"nodes":[{"content":"Returns &lt;xref:System.TimeSpan&gt;.","pos":[0,31],"source":"Returns <xref:System.TimeSpan>."},{"content":"The default WebSocket protocol keep-alive interval in milliseconds.","pos":[38,105]},{"content":"The typical value for this interval is 30 seconds.","pos":[106,156]}]}]},{"pos":[15713,15794],"content":"Used to clean up unmanaged resources for ASP.NET and self-hosted implementations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Used to clean up unmanaged resources for ASP.NET and self-hosted implementations.","pos":[0,81]}]},{"pos":[16365,16494],"content":"Returns a value that indicates if the WebSocket instance is targeting <ph id=\"ph1\">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"Returns a value that indicates if the WebSocket instance is targeting [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]."},{"pos":[16644,16964],"content":"Returns <xref:System.Boolean>.       <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> is targeting [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Boolean&gt;.","pos":[0,30],"source":"Returns <xref:System.Boolean>."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.WebSockets.WebSocket\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is targeting <ph id=\"ph1\">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[37,304],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> is targeting [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[17551,17642],"content":"Returns a value that indicates if the state of the WebSocket instance is closed or aborted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates if the state of the WebSocket instance is closed or aborted.","pos":[0,91]}]},{"pos":[17850,17885],"content":"The current state of the WebSocket.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current state of the WebSocket.","pos":[0,35]}]},{"pos":[17945,18214],"content":"Returns <xref:System.Boolean>.       <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> is closed or aborted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Boolean&gt;.","pos":[0,30],"source":"Returns <xref:System.Boolean>."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.WebSockets.WebSocket\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is closed or aborted; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[37,253],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> is closed or aborted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[18905,19007],"content":"Receives data from the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> connection asynchronously.","needQuote":true,"needEscape":true,"source":"Receives data from the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> connection asynchronously."},{"pos":[19020,19324],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data has been received on the <xref:System.Net.WebSockets.WebSocket>.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.WebSocket> object in parallel.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data has been received on the <xref:System.Net.WebSockets.WebSocket>.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.WebSocket> object in parallel.","pos":[0,302],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after the data has been received on the &lt;xref:System.Net.WebSockets.WebSocket&gt;.","pos":[31,183],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data has been received on the <xref:System.Net.WebSockets.WebSocket>."},{"content":"Exactly one send and one receive is supported on each &lt;xref:System.Net.WebSockets.WebSocket&gt; object in parallel.","pos":[190,302],"source":"       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.WebSocket> object in parallel."}]}]},{"pos":[19632,19717],"content":"References the application buffer that is the storage location for the received data.","needQuote":true,"needEscape":true,"nodes":[{"content":"References the application buffer that is the storage location for the received data.","pos":[0,85]}]},{"pos":[19812,19875],"content":"Propagates the notification that operations should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Propagates the notification that operations should be canceled.","pos":[0,63]}]},{"pos":[19994,20264],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref:System.Byte> array containing the received data.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref:System.Byte> array containing the received data.","pos":[0,268],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]},{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601.Result%2A<ph id=\"ph2\">&amp;gt;</ph> property on the task object returns a &lt;xref:System.Byte&gt; array containing the received data.","pos":[117,268],"source":" The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref:System.Byte> array containing the received data."}]}]},{"pos":[20726,20906],"content":"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code. Allows callers to register prefixes for WebSocket requests (ws and wss).","needQuote":true,"needEscape":true,"nodes":[{"content":"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code. Allows callers to register prefixes for WebSocket requests (ws and wss).","pos":[0,180],"nodes":[{"content":"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.","pos":[0,107]},{"content":"Allows callers to register prefixes for WebSocket requests (ws and wss).","pos":[108,180]}]}]},{"pos":[21867,21966],"content":"Sends data over the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> connection asynchronously.","needQuote":true,"needEscape":true,"source":"Sends data over the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> connection asynchronously."},{"pos":[21979,22275],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data has been sent on the <xref:System.Net.WebSockets.WebSocket>.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.WebSocket> object in parallel.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data has been sent on the <xref:System.Net.WebSockets.WebSocket>.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.WebSocket> object in parallel.","pos":[0,294],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after the data has been sent on the &lt;xref:System.Net.WebSockets.WebSocket&gt;.","pos":[31,175],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the data has been sent on the <xref:System.Net.WebSockets.WebSocket>."},{"content":"Exactly one send and one receive is supported on each &lt;xref:System.Net.WebSockets.WebSocket&gt; object in parallel.","pos":[182,294],"source":"       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.WebSocket> object in parallel."}]}]},{"pos":[22609,22651],"content":"The buffer to be sent over the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer to be sent over the connection.","pos":[0,42]}]},{"pos":[22748,22818],"content":"Indicates whether the application is sending a binary or text message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the application is sending a binary or text message.","pos":[0,70]}]},{"pos":[22888,22957],"content":"Indicates whether the data in “buffer” is the last part of a message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether the data in “buffer” is the last part of a message.","pos":[0,69]}]},{"pos":[23052,23130],"content":"The token that propagates the notification that operations should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token that propagates the notification that operations should be canceled.","pos":[0,78]}]},{"pos":[23202,23258],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[23657,23711],"content":"Returns the current state of the WebSocket connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the current state of the WebSocket connection.","pos":[0,54]}]},{"pos":[23883,23949],"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocketState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref href=\"System.Net.WebSockets.WebSocketState\"></xref>."},{"pos":[24374,24439],"content":"The subprotocol that was negotiated during the opening handshake.","needQuote":true,"needEscape":true,"nodes":[{"content":"The subprotocol that was negotiated during the opening handshake.","pos":[0,65]}]},{"pos":[24564,24593],"content":"Returns <xref:System.String>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.String&gt;.","pos":[0,29],"source":"Returns <xref:System.String>."}]},{"pos":[25315,25368],"content":"Verifies that the connection is in an expected state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that the connection is in an expected state.","pos":[0,53]}]},{"pos":[25632,25713],"content":"The current state of the WebSocket to be tested against the list of valid states.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current state of the WebSocket to be tested against the list of valid states.","pos":[0,81]}]},{"pos":[25806,25838],"content":"List of valid connection states.","needQuote":true,"needEscape":true,"nodes":[{"content":"List of valid connection states.","pos":[0,32]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.WebSockets.WebSocket\n  id: WebSocket\n  children:\n  - System.Net.WebSockets.WebSocket.#ctor\n  - System.Net.WebSockets.WebSocket.Abort\n  - System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  - System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  - System.Net.WebSockets.WebSocket.CloseStatus\n  - System.Net.WebSockets.WebSocket.CloseStatusDescription\n  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)\n  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})\n  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)\n  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval\n  - System.Net.WebSockets.WebSocket.Dispose\n  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45\n  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)\n  - System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  - System.Net.WebSockets.WebSocket.RegisterPrefixes\n  - System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  - System.Net.WebSockets.WebSocket.State\n  - System.Net.WebSockets.WebSocket.SubProtocol\n  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])\n  langs:\n  - csharp\n  name: WebSocket\n  nameWithType: WebSocket\n  fullName: System.Net.WebSockets.WebSocket\n  type: Class\n  summary: The WebSocket class allows applications to send and receive data after the WebSocket upgrade has completed.\n  remarks: Some of the classes in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008. However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012. The classes and class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract classes. This allows an application developer to inherit and extend these abstract classes with an actual implementation of client WebSockets.\n  syntax:\n    content: 'public abstract class WebSocket : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.#ctor\n  id: '#ctor'\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: WebSocket()\n  nameWithType: WebSocket.WebSocket()\n  fullName: System.Net.WebSockets.WebSocket.WebSocket()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Creates an instance of the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> class.\n  syntax:\n    content: protected WebSocket ();\n    parameters: []\n  overload: System.Net.WebSockets.WebSocket.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.Abort\n  id: Abort\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: WebSocket.Abort()\n  fullName: System.Net.WebSockets.WebSocket.Abort()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Aborts the WebSocket connection and cancels any pending IO operations.\n  syntax:\n    content: public abstract void Abort ();\n    parameters: []\n  overload: System.Net.WebSockets.WebSocket.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Closes the WebSocket connection as an asynchronous operation using the close handshake defined in the [WebSocket protocol specification](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) section 7.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the WebSocket has been closed.  \\n  \\n This method closes the WebSocket connection using the close handshake defined in the [WebSocket protocol specification](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) section 7.\"\n  syntax:\n    content: public abstract System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: closeStatus\n      type: System.Net.WebSockets.WebSocketCloseStatus\n      description: Indicates the reason for closing the WebSocket connection.\n    - id: statusDescription\n      type: System.String\n      description: Specifies a human readable explanation as to why the connection is closed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token that can be used to propagate notification that operations should be canceled.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.WebSockets.WebSocket.CloseAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Initiates or completes the close handshake defined in the [WebSocket protocol specification section 7](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06).\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the WebSocket has been closed.\n  syntax:\n    content: public abstract System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: closeStatus\n      type: System.Net.WebSockets.WebSocketCloseStatus\n      description: Indicates the reason for closing the WebSocket connection.\n    - id: statusDescription\n      type: System.String\n      description: Allows applications to specify a human readable explanation as to why the connection is closed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token that can be used to propagate notification that operations should be canceled.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.WebSockets.WebSocket.CloseOutputAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.CloseStatus\n  id: CloseStatus\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: CloseStatus\n  nameWithType: WebSocket.CloseStatus\n  fullName: System.Net.WebSockets.WebSocket.CloseStatus\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Indicates the reason why the remote endpoint initiated the close handshake.\n  remarks: If the close handshake has not been initiated yet, WebSocketCloseStatus.None is returned.\n  syntax:\n    content: public abstract Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }\n    return:\n      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}\n      description: Returns <xref href=\"System.Net.WebSockets.WebSocketCloseStatus\"></xref>.\n  overload: System.Net.WebSockets.WebSocket.CloseStatus*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription\n  id: CloseStatusDescription\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: CloseStatusDescription\n  nameWithType: WebSocket.CloseStatusDescription\n  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Allows the remote endpoint to describe the reason why the connection was closed.\n  syntax:\n    content: public abstract string CloseStatusDescription { get; }\n    return:\n      type: System.String\n      description: Returns <xref:System.String>.\n  overload: System.Net.WebSockets.WebSocket.CloseStatusDescription*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)\n  id: CreateClientBuffer(System.Int32,System.Int32)\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: CreateClientBuffer(Int32,Int32)\n  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)\n  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Create client buffers to use with this <xref href=\"System.Net.WebSockets.WebSocket\"></xref> instance.\n  syntax:\n    content: public static ArraySegment<byte> CreateClientBuffer (int receiveBufferSize, int sendBufferSize);\n    parameters:\n    - id: receiveBufferSize\n      type: System.Int32\n      description: The size, in bytes, of the client receive buffer.\n    - id: sendBufferSize\n      type: System.Int32\n      description: The size, in bytes, of the send buffer.\n    return:\n      type: System.ArraySegment{System.Byte}\n      description: \"Returns &lt;xref:System.ArraySegment%601&gt;.  \\n  \\n An array with the client buffers.\"\n  overload: System.Net.WebSockets.WebSocket.CreateClientBuffer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})\n  id: CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)\n  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)\n  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: \"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.  \\n  \\n Allows callers to create a client side WebSocket class which will use the WSPC for framing purposes.\"\n  syntax:\n    content: public static System.Net.WebSockets.WebSocket CreateClientWebSocket (System.IO.Stream innerStream, string subProtocol, int receiveBufferSize, int sendBufferSize, TimeSpan keepAliveInterval, bool useZeroMaskingKey, ArraySegment<byte> internalBuffer);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: The connection to be used for IO operations.\n    - id: subProtocol\n      type: System.String\n      description: The subprotocol accepted by the client.\n    - id: receiveBufferSize\n      type: System.Int32\n      description: The size in bytes of the client WebSocket receive buffer.\n    - id: sendBufferSize\n      type: System.Int32\n      description: The size in bytes of the client WebSocket send buffer.\n    - id: keepAliveInterval\n      type: System.TimeSpan\n      description: Determines how regularly a frame is sent over the connection as a keep-alive. Applies only when the connection is idle.\n    - id: useZeroMaskingKey\n      type: System.Boolean\n      description: Indicates whether a random key or a static key (just zeros) should be used for the WebSocket masking.\n    - id: internalBuffer\n      type: System.ArraySegment{System.Byte}\n      description: Will be used as the internal buffer in the WPC. The size has to be at least `2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)`.\n    return:\n      type: System.Net.WebSockets.WebSocket\n      description: Returns <xref href=\"System.Net.WebSockets.WebSocket\"></xref>.\n  overload: System.Net.WebSockets.WebSocket.CreateClientWebSocket*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)\n  id: CreateServerBuffer(System.Int32)\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: CreateServerBuffer(Int32)\n  nameWithType: WebSocket.CreateServerBuffer(Int32)\n  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Creates a WebSocket server buffer.\n  syntax:\n    content: public static ArraySegment<byte> CreateServerBuffer (int receiveBufferSize);\n    parameters:\n    - id: receiveBufferSize\n      type: System.Int32\n      description: The size, in bytes, of the desired buffer.\n    return:\n      type: System.ArraySegment{System.Byte}\n      description: Returns &lt;xref:System.ArraySegment%601&gt;.\n  overload: System.Net.WebSockets.WebSocket.CreateServerBuffer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval\n  id: DefaultKeepAliveInterval\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: DefaultKeepAliveInterval\n  nameWithType: WebSocket.DefaultKeepAliveInterval\n  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Gets the default WebSocket protocol keep-alive interval in milliseconds.\n  syntax:\n    content: public static TimeSpan DefaultKeepAliveInterval { get; }\n    return:\n      type: System.TimeSpan\n      description: \"Returns <xref:System.TimeSpan>.  \\n  \\n The default WebSocket protocol keep-alive interval in milliseconds. The typical value for this interval is 30 seconds.\"\n  overload: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.Dispose\n  id: Dispose\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: WebSocket.Dispose()\n  fullName: System.Net.WebSockets.WebSocket.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Used to clean up unmanaged resources for ASP.NET and self-hosted implementations.\n  syntax:\n    content: public abstract void Dispose ();\n    parameters: []\n  overload: System.Net.WebSockets.WebSocket.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45\n  id: IsApplicationTargeting45\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: IsApplicationTargeting45()\n  nameWithType: WebSocket.IsApplicationTargeting45()\n  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Returns a value that indicates if the WebSocket instance is targeting [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)].\n  syntax:\n    content: public static bool IsApplicationTargeting45 ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"Returns <xref:System.Boolean>.  \\n  \\n <xref uid=\\\"langword_csharp_true\\\" name=\\\"true\\\" href=\\\"\\\"></xref> if the <xref href=\\\"System.Net.WebSockets.WebSocket\\\"></xref> is targeting [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]; otherwise <xref uid=\\\"langword_csharp_false\\\" name=\\\"false\\\" href=\\\"\\\"></xref>.\"\n  overload: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)\n  id: IsStateTerminal(System.Net.WebSockets.WebSocketState)\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: IsStateTerminal(WebSocketState)\n  nameWithType: WebSocket.IsStateTerminal(WebSocketState)\n  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Returns a value that indicates if the state of the WebSocket instance is closed or aborted.\n  syntax:\n    content: protected static bool IsStateTerminal (System.Net.WebSockets.WebSocketState state);\n    parameters:\n    - id: state\n      type: System.Net.WebSockets.WebSocketState\n      description: The current state of the WebSocket.\n    return:\n      type: System.Boolean\n      description: \"Returns <xref:System.Boolean>.  \\n  \\n <xref uid=\\\"langword_csharp_true\\\" name=\\\"true\\\" href=\\\"\\\"></xref> if the <xref href=\\\"System.Net.WebSockets.WebSocket\\\"></xref> is closed or aborted; otherwise <xref uid=\\\"langword_csharp_false\\\" name=\\\"false\\\" href=\\\"\\\"></xref>.\"\n  overload: System.Net.WebSockets.WebSocket.IsStateTerminal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Receives data from the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> connection asynchronously.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data has been received on the <xref:System.Net.WebSockets.WebSocket>.  \\n  \\n Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.WebSocket> object in parallel.\"\n  syntax:\n    content: public abstract System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n      description: References the application buffer that is the storage location for the received data.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: Propagates the notification that operations should be canceled.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref:System.Byte> array containing the received data.\"\n  overload: System.Net.WebSockets.WebSocket.ReceiveAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes\n  id: RegisterPrefixes\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: RegisterPrefixes()\n  nameWithType: WebSocket.RegisterPrefixes()\n  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: This API supports the .NET Framework infrastructure and is not intended to be used directly from your code. Allows callers to register prefixes for WebSocket requests (ws and wss).\n  syntax:\n    content: public static void RegisterPrefixes ();\n    parameters: []\n  overload: System.Net.WebSockets.WebSocket.RegisterPrefixes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Sends data over the <xref href=\"System.Net.WebSockets.WebSocket\"></xref> connection asynchronously.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data has been sent on the <xref:System.Net.WebSockets.WebSocket>.  \\n  \\n Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.WebSocket> object in parallel.\"\n  syntax:\n    content: public abstract System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n      description: The buffer to be sent over the connection.\n    - id: messageType\n      type: System.Net.WebSockets.WebSocketMessageType\n      description: Indicates whether the application is sending a binary or text message.\n    - id: endOfMessage\n      type: System.Boolean\n      description: Indicates whether the data in “buffer” is the last part of a message.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token that propagates the notification that operations should be canceled.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.WebSockets.WebSocket.SendAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.State\n  id: State\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: State\n  nameWithType: WebSocket.State\n  fullName: System.Net.WebSockets.WebSocket.State\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Returns the current state of the WebSocket connection.\n  syntax:\n    content: public abstract System.Net.WebSockets.WebSocketState State { get; }\n    return:\n      type: System.Net.WebSockets.WebSocketState\n      description: Returns <xref href=\"System.Net.WebSockets.WebSocketState\"></xref>.\n  overload: System.Net.WebSockets.WebSocket.State*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.SubProtocol\n  id: SubProtocol\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: SubProtocol\n  nameWithType: WebSocket.SubProtocol\n  fullName: System.Net.WebSockets.WebSocket.SubProtocol\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: The subprotocol that was negotiated during the opening handshake.\n  syntax:\n    content: public abstract string SubProtocol { get; }\n    return:\n      type: System.String\n      description: Returns <xref:System.String>.\n  overload: System.Net.WebSockets.WebSocket.SubProtocol*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])\n  id: ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])\n  parent: System.Net.WebSockets.WebSocket\n  langs:\n  - csharp\n  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])\n  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])\n  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Verifies that the connection is in an expected state.\n  syntax:\n    content: protected static void ThrowOnInvalidState (System.Net.WebSockets.WebSocketState state, System.Net.WebSockets.WebSocketState[] validStates);\n    parameters:\n    - id: state\n      type: System.Net.WebSockets.WebSocketState\n      description: The current state of the WebSocket to be tested against the list of valid states.\n    - id: validStates\n      type: System.Net.WebSockets.WebSocketState[]\n      description: List of valid connection states.\n  overload: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Net.WebSockets.WebSocket.#ctor\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: WebSocket()\n  nameWithType: WebSocket.WebSocket()\n  fullName: System.Net.WebSockets.WebSocket.WebSocket()\n- uid: System.Net.WebSockets.WebSocket.Abort\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: Abort()\n  nameWithType: WebSocket.Abort()\n  fullName: System.Net.WebSockets.WebSocket.Abort()\n- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Net.WebSockets.WebSocketCloseStatus\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketCloseStatus\n  nameWithType: WebSocketCloseStatus\n  fullName: System.Net.WebSockets.WebSocketCloseStatus\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: true\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n- uid: System.Net.WebSockets.WebSocket.CloseStatus\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CloseStatus\n  nameWithType: WebSocket.CloseStatus\n  fullName: System.Net.WebSockets.WebSocket.CloseStatus\n- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}\n  parent: System\n  isExternal: true\n  name: Nullable<WebSocketCloseStatus>\n  nameWithType: Nullable<WebSocketCloseStatus>\n  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.WebSockets.WebSocketCloseStatus\n    name: WebSocketCloseStatus\n    nameWithType: WebSocketCloseStatus\n    fullName: WebSocketCloseStatus\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CloseStatusDescription\n  nameWithType: WebSocket.CloseStatusDescription\n  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription\n- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CreateClientBuffer(Int32,Int32)\n  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)\n  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)\n- uid: System.ArraySegment{System.Byte}\n  parent: System\n  isExternal: true\n  name: ArraySegment<Byte>\n  nameWithType: ArraySegment<Byte>\n  fullName: System.ArraySegment<System.Byte>\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: ArraySegment<System.Byte>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)\n  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)\n  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)\n- uid: System.Net.WebSockets.WebSocket\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocket\n  nameWithType: WebSocket\n  fullName: System.Net.WebSockets.WebSocket\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CreateServerBuffer(Int32)\n  nameWithType: WebSocket.CreateServerBuffer(Int32)\n  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)\n- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: DefaultKeepAliveInterval\n  nameWithType: WebSocket.DefaultKeepAliveInterval\n  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval\n- uid: System.Net.WebSockets.WebSocket.Dispose\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: Dispose()\n  nameWithType: WebSocket.Dispose()\n  fullName: System.Net.WebSockets.WebSocket.Dispose()\n- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: IsApplicationTargeting45()\n  nameWithType: WebSocket.IsApplicationTargeting45()\n  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()\n- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: IsStateTerminal(WebSocketState)\n  nameWithType: WebSocket.IsStateTerminal(WebSocketState)\n  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)\n- uid: System.Net.WebSockets.WebSocketState\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketState\n  nameWithType: WebSocketState\n  fullName: System.Net.WebSockets.WebSocketState\n- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<WebSocketReceiveResult>\n  nameWithType: Task<WebSocketReceiveResult>\n  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.WebSockets.WebSocketReceiveResult\n    name: WebSocketReceiveResult\n    nameWithType: WebSocketReceiveResult\n    fullName: WebSocketReceiveResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: RegisterPrefixes()\n  nameWithType: WebSocket.RegisterPrefixes()\n  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()\n- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n- uid: System.Net.WebSockets.WebSocketMessageType\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketMessageType\n  nameWithType: WebSocketMessageType\n  fullName: System.Net.WebSockets.WebSocketMessageType\n- uid: System.Net.WebSockets.WebSocket.State\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: State\n  nameWithType: WebSocket.State\n  fullName: System.Net.WebSockets.WebSocket.State\n- uid: System.Net.WebSockets.WebSocket.SubProtocol\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: SubProtocol\n  nameWithType: WebSocket.SubProtocol\n  fullName: System.Net.WebSockets.WebSocket.SubProtocol\n- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])\n  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])\n  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])\n- uid: System.Net.WebSockets.WebSocketState[]\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketState\n  nameWithType: WebSocketState\n  fullName: System.Net.WebSockets.WebSocketState[]\n  spec.csharp:\n  - uid: System.Net.WebSockets.WebSocketState\n    name: WebSocketState\n    nameWithType: WebSocketState\n    fullName: WebSocketState[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.WebSockets.WebSocket.#ctor*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: WebSocket\n  nameWithType: WebSocket.WebSocket\n- uid: System.Net.WebSockets.WebSocket.Abort*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: Abort\n  nameWithType: WebSocket.Abort\n- uid: System.Net.WebSockets.WebSocket.CloseAsync*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CloseAsync\n  nameWithType: WebSocket.CloseAsync\n- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CloseOutputAsync\n  nameWithType: WebSocket.CloseOutputAsync\n- uid: System.Net.WebSockets.WebSocket.CloseStatus*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CloseStatus\n  nameWithType: WebSocket.CloseStatus\n- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CloseStatusDescription\n  nameWithType: WebSocket.CloseStatusDescription\n- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CreateClientBuffer\n  nameWithType: WebSocket.CreateClientBuffer\n- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CreateClientWebSocket\n  nameWithType: WebSocket.CreateClientWebSocket\n- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: CreateServerBuffer\n  nameWithType: WebSocket.CreateServerBuffer\n- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: DefaultKeepAliveInterval\n  nameWithType: WebSocket.DefaultKeepAliveInterval\n- uid: System.Net.WebSockets.WebSocket.Dispose*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: Dispose\n  nameWithType: WebSocket.Dispose\n- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: IsApplicationTargeting45\n  nameWithType: WebSocket.IsApplicationTargeting45\n- uid: System.Net.WebSockets.WebSocket.IsStateTerminal*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: IsStateTerminal\n  nameWithType: WebSocket.IsStateTerminal\n- uid: System.Net.WebSockets.WebSocket.ReceiveAsync*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: ReceiveAsync\n  nameWithType: WebSocket.ReceiveAsync\n- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: RegisterPrefixes\n  nameWithType: WebSocket.RegisterPrefixes\n- uid: System.Net.WebSockets.WebSocket.SendAsync*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: SendAsync\n  nameWithType: WebSocket.SendAsync\n- uid: System.Net.WebSockets.WebSocket.State*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: State\n  nameWithType: WebSocket.State\n- uid: System.Net.WebSockets.WebSocket.SubProtocol*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: SubProtocol\n  nameWithType: WebSocket.SubProtocol\n- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*\n  parent: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: ThrowOnInvalidState\n  nameWithType: WebSocket.ThrowOnInvalidState\n"}