{"nodes":[{"pos":[491,604],"content":"Provides a base class for Win32 safe handle implementations in which the value of -1 indicates an invalid handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a base class for Win32 safe handle implementations in which the value of -1 indicates an invalid handle.","pos":[0,113]}]},{"pos":[617,1569],"content":"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle that uses a value of -1. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from SafeHandleMinusOneIsInvalid.      > [!WARNING] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try``catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class derives from the &lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName&gt; class.","pos":[0,108],"source":"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class."},{"content":"It describes the format of an invalid handle that uses a value of -1.","pos":[109,178]},{"content":"Further derivations of this class (for example, file or registry handles) can specialize this further.","pos":[179,281]},{"content":"See the &lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt; class for an example of a class that derives from SafeHandleMinusOneIsInvalid.","pos":[282,418],"source":" See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from SafeHandleMinusOneIsInvalid."},{"content":"&gt; <ph id=\"ph1\">[!WARNING]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[424,501],"source":"      > [!WARNING] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[502,596]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try``catch`</ph> block.","pos":[597,707],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try``catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[708,815],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[816,949],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."}]},{"pos":[2394,2569],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying whether the handle is to be reliably released.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\"></xref> class, specifying whether the handle is to be reliably released."},{"pos":[2733,2965],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to reliably release the handle during the finalization phase; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to prevent reliable release (not recommended).","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably release the handle during the finalization phase; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prevent reliable release (not recommended)."},{"pos":[3502,3560],"content":"Gets a value that indicates whether the handle is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the handle is invalid.","pos":[0,58]}]},{"pos":[3572,3674],"content":"The common language runtime uses this property to determine whether critical finalization is required.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The common language runtime uses this property to determine whether critical finalization is required.","pos":[0,102]}]},{"pos":[3796,3959],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the handle is not valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is not valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\n  id: SafeHandleMinusOneIsInvalid\n  children:\n  - Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)\n  - Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid\n  langs:\n  - csharp\n  name: SafeHandleMinusOneIsInvalid\n  nameWithType: SafeHandleMinusOneIsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\n  type: Class\n  summary: Provides a base class for Win32 safe handle implementations in which the value of -1 indicates an invalid handle.\n  remarks: \"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle that uses a value of -1. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from SafeHandleMinusOneIsInvalid.  \\n  \\n> [!WARNING]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try``catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public abstract class SafeHandleMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\n  langs:\n  - csharp\n  name: SafeHandleMinusOneIsInvalid(Boolean)\n  nameWithType: SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid(Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\"></xref> class, specifying whether the handle is to be reliably released.\n  syntax:\n    content: protected SafeHandleMinusOneIsInvalid (bool ownsHandle);\n    parameters:\n    - id: ownsHandle\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably release the handle during the finalization phase; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prevent reliable release (not recommended).\n  overload: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeHandleMinusOneIsInvalid.IsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Gets a value that indicates whether the handle is invalid.\n  remarks: The common language runtime uses this property to determine whether critical finalization is required.\n  syntax:\n    content: public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is not valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: System.Runtime.InteropServices.SafeHandle\n- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)\n  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\n  isExternal: false\n  name: SafeHandleMinusOneIsInvalid(Boolean)\n  nameWithType: SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid(Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeHandleMinusOneIsInvalid.IsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\n  isExternal: false\n  name: SafeHandleMinusOneIsInvalid\n  nameWithType: SafeHandleMinusOneIsInvalid.SafeHandleMinusOneIsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeHandleMinusOneIsInvalid.IsInvalid\n"}