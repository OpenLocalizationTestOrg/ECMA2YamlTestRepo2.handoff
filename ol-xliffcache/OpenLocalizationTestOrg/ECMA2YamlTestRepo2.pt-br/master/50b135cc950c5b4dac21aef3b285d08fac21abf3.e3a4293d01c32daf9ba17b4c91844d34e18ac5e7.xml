{"nodes":[{"pos":[695,837],"content":"Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required.","pos":[0,142]}]},{"pos":[1689,1780],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.ExclusiveHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Activities.ExclusiveHandle\"></xref> class."},{"pos":[2479,2641],"content":"Creates a list of default <bpt id=\"p1\">&lt;xref href=\"System.Activities.BookmarkScopeHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects from handle variables in the specified handle initialization context.","needQuote":true,"needEscape":true,"source":"Creates a list of default <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects from handle variables in the specified handle initialization context."},{"pos":[2870,2917],"content":"The environment in which the handle is created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The environment in which the handle is created.","pos":[0,47]}]},{"pos":[3705,3918],"content":"Adds the specified bookmark scope handle to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.ReadOnlyCollection%601<ph id=\"ph2\">&amp;gt;</ph> of <bpt id=\"p1\">&lt;xref href=\"System.Activities.BookmarkScopeHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects using the specified context.","needQuote":true,"needEscape":true,"source":"Adds the specified bookmark scope handle to the &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects using the specified context."},{"pos":[3930,4074],"content":"If this method is called after a bookmark has been created under this exclusive scope, a <xref:System.InvalidOperationException> will be thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If this method is called after a bookmark has been created under this exclusive scope, a &lt;xref:System.InvalidOperationException&gt; will be thrown.","pos":[0,144],"source":"If this method is called after a bookmark has been created under this exclusive scope, a <xref:System.InvalidOperationException> will be thrown."}]},{"pos":[4347,4394],"content":"The environment in which the handle is created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The environment in which the handle is created.","pos":[0,47]}]},{"pos":[4494,4623],"content":"The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.","pos":[0,129]}]},{"pos":[5150,5310],"content":"Gets a new or existing <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.ReadOnlyCollection%601<ph id=\"ph2\">&amp;gt;</ph> of <bpt id=\"p1\">&lt;xref href=\"System.Activities.BookmarkScopeHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Gets a new or existing &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects."},{"pos":[5596,5645],"content":"A read-only collection of bookmark scope handles.","needQuote":true,"needEscape":true,"nodes":[{"content":"A read-only collection of bookmark scope handles.","pos":[0,49]}]},{"pos":[6264,6328],"content":"Sets the registered bookmark scope handles back to the defaults.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the registered bookmark scope handles back to the defaults.","pos":[0,64]}]},{"pos":[6340,6485],"content":"If this method is called when there are bookmarks registered with the exclusive handle, a <xref:System.InvalidOperationException> will be thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If this method is called when there are bookmarks registered with the exclusive handle, a &lt;xref:System.InvalidOperationException&gt; will be thrown.","pos":[0,145],"source":"If this method is called when there are bookmarks registered with the exclusive handle, a <xref:System.InvalidOperationException> will be thrown."}]},{"pos":[6690,6737],"content":"The environment in which the handle is created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The environment in which the handle is created.","pos":[0,47]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.ExclusiveHandle\n  id: ExclusiveHandle\n  children:\n  - System.Activities.ExclusiveHandle.#ctor\n  - System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)\n  - System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  - System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n  - System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)\n  langs:\n  - csharp\n  name: ExclusiveHandle\n  nameWithType: ExclusiveHandle\n  fullName: System.Activities.ExclusiveHandle\n  type: Class\n  summary: Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required.\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataContract]\n\n      public class ExclusiveHandle : System.Activities.Handle\n  inheritance:\n  - System.Object\n  - System.Activities.Handle\n  implements: []\n  inheritedMembers:\n  - System.Activities.Handle.ExecutionPropertyName\n  - System.Activities.Handle.OnUninitialize(System.Activities.HandleInitializationContext)\n  - System.Activities.Handle.Owner\n  - System.Activities.Handle.ThrowIfUninitialized\n  platform:\n  - net462\n- uid: System.Activities.ExclusiveHandle.#ctor\n  id: '#ctor'\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: ExclusiveHandle()\n  nameWithType: ExclusiveHandle.ExclusiveHandle()\n  fullName: System.Activities.ExclusiveHandle.ExclusiveHandle()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Creates a new instance of the <xref href=\"System.Activities.ExclusiveHandle\"></xref> class.\n  syntax:\n    content: public ExclusiveHandle ();\n    parameters: []\n  overload: System.Activities.ExclusiveHandle.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)\n  id: OnInitialize(System.Activities.HandleInitializationContext)\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: OnInitialize(HandleInitializationContext)\n  nameWithType: ExclusiveHandle.OnInitialize(HandleInitializationContext)\n  fullName: System.Activities.ExclusiveHandle.OnInitialize(HandleInitializationContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Creates a list of default <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects from handle variables in the specified handle initialization context.\n  syntax:\n    content: protected override void OnInitialize (System.Activities.HandleInitializationContext context);\n    parameters:\n    - id: context\n      type: System.Activities.HandleInitializationContext\n      description: The environment in which the handle is created.\n  overload: System.Activities.ExclusiveHandle.OnInitialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  id: RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: RegisterBookmarkScope(NativeActivityContext,BookmarkScopeHandle)\n  nameWithType: ExclusiveHandle.RegisterBookmarkScope(NativeActivityContext,BookmarkScopeHandle)\n  fullName: System.Activities.ExclusiveHandle.RegisterBookmarkScope(NativeActivityContext,BookmarkScopeHandle)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Adds the specified bookmark scope handle to the &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects using the specified context.\n  remarks: If this method is called after a bookmark has been created under this exclusive scope, a <xref:System.InvalidOperationException> will be thrown.\n  syntax:\n    content: public void RegisterBookmarkScope (System.Activities.NativeActivityContext context, System.Activities.BookmarkScopeHandle bookmarkScopeHandle);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: The environment in which the handle is created.\n    - id: bookmarkScopeHandle\n      type: System.Activities.BookmarkScopeHandle\n      description: The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.\n  overload: System.Activities.ExclusiveHandle.RegisterBookmarkScope*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n  id: RegisteredBookmarkScopes\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: RegisteredBookmarkScopes\n  nameWithType: ExclusiveHandle.RegisteredBookmarkScopes\n  fullName: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets a new or existing &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects.\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Activities.BookmarkScopeHandle> RegisteredBookmarkScopes { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.BookmarkScopeHandle}\n      description: A read-only collection of bookmark scope handles.\n  overload: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)\n  id: Reinitialize(System.Activities.NativeActivityContext)\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: Reinitialize(NativeActivityContext)\n  nameWithType: ExclusiveHandle.Reinitialize(NativeActivityContext)\n  fullName: System.Activities.ExclusiveHandle.Reinitialize(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Sets the registered bookmark scope handles back to the defaults.\n  remarks: If this method is called when there are bookmarks registered with the exclusive handle, a <xref:System.InvalidOperationException> will be thrown.\n  syntax:\n    content: public void Reinitialize (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: The environment in which the handle is created.\n  overload: System.Activities.ExclusiveHandle.Reinitialize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.Handle\n  isExternal: false\n  name: System.Activities.Handle\n- uid: System.Activities.ExclusiveHandle.#ctor\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: ExclusiveHandle()\n  nameWithType: ExclusiveHandle.ExclusiveHandle()\n  fullName: System.Activities.ExclusiveHandle.ExclusiveHandle()\n- uid: System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: OnInitialize(HandleInitializationContext)\n  nameWithType: ExclusiveHandle.OnInitialize(HandleInitializationContext)\n  fullName: System.Activities.ExclusiveHandle.OnInitialize(HandleInitializationContext)\n- uid: System.Activities.HandleInitializationContext\n  parent: System.Activities\n  isExternal: false\n  name: HandleInitializationContext\n  nameWithType: HandleInitializationContext\n  fullName: System.Activities.HandleInitializationContext\n- uid: System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: RegisterBookmarkScope(NativeActivityContext,BookmarkScopeHandle)\n  nameWithType: ExclusiveHandle.RegisterBookmarkScope(NativeActivityContext,BookmarkScopeHandle)\n  fullName: System.Activities.ExclusiveHandle.RegisterBookmarkScope(NativeActivityContext,BookmarkScopeHandle)\n- uid: System.Activities.NativeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityContext\n  nameWithType: NativeActivityContext\n  fullName: System.Activities.NativeActivityContext\n- uid: System.Activities.BookmarkScopeHandle\n  parent: System.Activities\n  isExternal: false\n  name: BookmarkScopeHandle\n  nameWithType: BookmarkScopeHandle\n  fullName: System.Activities.BookmarkScopeHandle\n- uid: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: RegisteredBookmarkScopes\n  nameWithType: ExclusiveHandle.RegisteredBookmarkScopes\n  fullName: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.BookmarkScopeHandle}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<BookmarkScopeHandle>\n  nameWithType: ReadOnlyCollection<BookmarkScopeHandle>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Activities.BookmarkScopeHandle>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Activities.BookmarkScopeHandle>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.BookmarkScopeHandle\n    name: BookmarkScopeHandle\n    nameWithType: BookmarkScopeHandle\n    fullName: BookmarkScopeHandle\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: Reinitialize(NativeActivityContext)\n  nameWithType: ExclusiveHandle.Reinitialize(NativeActivityContext)\n  fullName: System.Activities.ExclusiveHandle.Reinitialize(NativeActivityContext)\n- uid: System.Activities.ExclusiveHandle.#ctor*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: ExclusiveHandle\n  nameWithType: ExclusiveHandle.ExclusiveHandle\n- uid: System.Activities.ExclusiveHandle.OnInitialize*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: OnInitialize\n  nameWithType: ExclusiveHandle.OnInitialize\n- uid: System.Activities.ExclusiveHandle.RegisterBookmarkScope*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: RegisterBookmarkScope\n  nameWithType: ExclusiveHandle.RegisterBookmarkScope\n- uid: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: RegisteredBookmarkScopes\n  nameWithType: ExclusiveHandle.RegisteredBookmarkScopes\n- uid: System.Activities.ExclusiveHandle.Reinitialize*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: Reinitialize\n  nameWithType: ExclusiveHandle.Reinitialize\n"}