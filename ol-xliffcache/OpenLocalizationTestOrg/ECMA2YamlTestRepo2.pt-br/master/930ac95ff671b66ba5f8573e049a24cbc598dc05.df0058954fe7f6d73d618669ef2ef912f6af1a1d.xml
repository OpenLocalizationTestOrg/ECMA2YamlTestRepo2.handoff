{"nodes":[{"pos":[3522,4170],"content":"WorkflowInstance is a lightweight, per-instance runtime for executing a workflow program. It can be constructed to create a new workflow instance or from existing instance state. The APIs that <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> exposes are the minimal set of runtime controls from which higher level operations can be implemented. This API set represents the entire breadth of functionality of the runtime. WorkflowInstance is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions.","needQuote":true,"needEscape":true,"nodes":[{"content":"WorkflowInstance is a lightweight, per-instance runtime for executing a workflow program. It can be constructed to create a new workflow instance or from existing instance state. The APIs that <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> exposes are the minimal set of runtime controls from which higher level operations can be implemented. This API set represents the entire breadth of functionality of the runtime. WorkflowInstance is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions.","pos":[0,648],"nodes":[{"content":"WorkflowInstance is a lightweight, per-instance runtime for executing a workflow program.","pos":[0,89]},{"content":"It can be constructed to create a new workflow instance or from existing instance state.","pos":[90,178]},{"content":"The APIs that &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl&gt; exposes are the minimal set of runtime controls from which higher level operations can be implemented.","pos":[179,369],"source":" The APIs that <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> exposes are the minimal set of runtime controls from which higher level operations can be implemented."},{"content":"This API set represents the entire breadth of functionality of the runtime.","pos":[370,445]},{"content":"WorkflowInstance is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions.","pos":[446,648]}]}]},{"pos":[4183,7977],"content":"WorkflowInstance is single threaded and assumes that the host synchronizes all access to it. An attempt to call multiple APIs simultaneously will result in an <xref:System.InvalidOperationException> being thrown.       Internally, a WorkflowInstance has two states: Running and Paused. The only way to cause the runtime to transition from paused to running is to call <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A>. All actions (except Pause) can only be taken while the runtime is Paused. The runtime will become spontaneously Paused in the following situations:      -   An error fatal to the runtime has occurred. The host will be signaled through <xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A> (which does not signal a transition to Paused) and then notified through <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A>.      -   An exception in the workflow was uncaught and escaped the root. The host will be notified through the <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException%2A> method.      -   The scheduler has run out of work items and is now <xref:System.Activities.Hosting.WorkflowInstanceState>. The host will be notified through the <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A> method. Note that the scheduler could have run out of work items because the instance is idle or because the instance is complete. The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A> value of the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property can be used to differentiate between the two.       The host can request a change from Running to Paused by calling the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A> or <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable%2A> methods of the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance returned by the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property. This request should not be considered to have a specific response meaning that the host should not attempt to correlate an OnNotify* or <xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A> with a specific call to pause. In response to a pause request, the runtime may transition to Paused and call <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A> while the scheduler still has pending work items. The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A> value of the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property can be used to determine whether the scheduler has no more work or was interrupted by a request to pause.       The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A> method of the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance returned by the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property is the only method which can be called while the WorkflowInstance is in the Running state. All other methods will throw an <xref:System.InvalidOperationException> if called.Given the rules for how WorkflowInstance transitions from one state to another, the public notion of Running and Paused can be defined as follows:      -   Running – The state between a call to <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A> and the next WorkflowInstance.OnNotify*.      -   Paused – The state between the last WorkflowInstance.OnNotify* and the next call to <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"WorkflowInstance is single threaded and assumes that the host synchronizes all access to it.","pos":[0,92]},{"content":"An attempt to call multiple APIs simultaneously will result in an &lt;xref:System.InvalidOperationException&gt; being thrown.","pos":[93,212],"source":" An attempt to call multiple APIs simultaneously will result in an <xref:System.InvalidOperationException> being thrown."},{"content":"Internally, a WorkflowInstance has two states: Running and Paused.","pos":[219,285]},{"content":"The only way to cause the runtime to transition from paused to running is to call &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A&gt;.","pos":[286,449],"source":" The only way to cause the runtime to transition from paused to running is to call <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A>."},{"content":"All actions (except Pause) can only be taken while the runtime is Paused.","pos":[450,523]},{"content":"The runtime will become spontaneously Paused in the following situations:      -   An error fatal to the runtime has occurred.","pos":[524,650]},{"content":"The host will be signaled through &lt;xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A&gt; (which does not signal a transition to Paused) and then notified through &lt;xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A&gt;.","pos":[651,894],"source":" The host will be signaled through <xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A> (which does not signal a transition to Paused) and then notified through <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A>."},{"content":"-   An exception in the workflow was uncaught and escaped the root.","pos":[900,967]},{"content":"The host will be notified through the &lt;xref:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException%2A&gt; method.","pos":[968,1093],"source":" The host will be notified through the <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException%2A> method."},{"content":"-   The scheduler has run out of work items and is now &lt;xref:System.Activities.Hosting.WorkflowInstanceState&gt;.","pos":[1099,1209],"source":"      -   The scheduler has run out of work items and is now <xref:System.Activities.Hosting.WorkflowInstanceState>."},{"content":"The host will be notified through the &lt;xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A&gt; method.","pos":[1210,1323],"source":" The host will be notified through the <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A> method."},{"content":"Note that the scheduler could have run out of work items because the instance is idle or because the instance is complete.","pos":[1324,1446]},{"content":"The &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A&gt; value of the &lt;xref:System.Activities.Hosting.WorkflowInstance.Controller%2A&gt; property can be used to differentiate between the two.","pos":[1447,1665],"source":" The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A> value of the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property can be used to differentiate between the two."},{"content":"The host can request a change from Running to Paused by calling the &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A&gt; or &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable%2A&gt; methods of the &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl&gt; instance returned by the &lt;xref:System.Activities.Hosting.WorkflowInstance.Controller%2A&gt; property.","pos":[1672,2118],"source":"       The host can request a change from Running to Paused by calling the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A> or <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable%2A> methods of the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance returned by the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property."},{"content":"This request should not be considered to have a specific response meaning that the host should not attempt to correlate an OnNotify<bpt id=\"p1\">*</bpt> or &lt;xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A&gt; with a specific call to pause. In response to a pause request, the runtime may transition to Paused and call &lt;xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A&gt; while the scheduler still has pending work items. The &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A&gt; value of the &lt;xref:System.Activities.Hosting.WorkflowInstance.Controller%2A&gt; property can be used to determine whether the scheduler has no more work or was interrupted by a request to pause.       The &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A&gt; method of the &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl&gt; instance returned by the &lt;xref:System.Activities.Hosting.WorkflowInstance.Controller%2A&gt; property is the only method which can be called while the WorkflowInstance is in the Running state. All other methods will throw an &lt;xref:System.InvalidOperationException&gt; if called.Given the rules for how WorkflowInstance transitions from one state to another, the public notion of Running and Paused can be defined as follows:      -   Running – The state between a call to &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A&gt; and the next WorkflowInstance.OnNotify<ept id=\"p1\">*</ept>.","pos":[2119,3603],"source":" This request should not be considered to have a specific response meaning that the host should not attempt to correlate an OnNotify* or <xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A> with a specific call to pause. In response to a pause request, the runtime may transition to Paused and call <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A> while the scheduler still has pending work items. The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A> value of the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property can be used to determine whether the scheduler has no more work or was interrupted by a request to pause.       The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A> method of the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance returned by the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property is the only method which can be called while the WorkflowInstance is in the Running state. All other methods will throw an <xref:System.InvalidOperationException> if called.Given the rules for how WorkflowInstance transitions from one state to another, the public notion of Running and Paused can be defined as follows:      -   Running – The state between a call to <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A> and the next WorkflowInstance.OnNotify*."},{"content":"-   Paused – The state between the last WorkflowInstance.OnNotify* and the next call to &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A&gt;.","pos":[3609,3778],"source":"      -   Paused – The state between the last WorkflowInstance.OnNotify* and the next call to <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A>."}]},{"pos":[8619,8762],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.WorkflowInstance\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified workflow definition.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref> class with the specified workflow definition."},{"pos":[8965,9004],"content":"The activity that defines the workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity that defines the workflow.","pos":[0,39]}]},{"pos":[9710,9877],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.WorkflowInstance\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified workflow definition and definition identity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref> class with the specified workflow definition and definition identity."},{"pos":[10135,10174],"content":"The activity that defines the workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity that defines the workflow.","pos":[0,39]}]},{"pos":[10270,10294],"content":"The definition identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The definition identity.","pos":[0,24]}]},{"pos":[11050,11163],"content":"Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously.","pos":[0,113]}]},{"pos":[11375,11424],"content":"The time period after which to abort the attempt.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time period after which to abort the attempt.","pos":[0,49]}]},{"pos":[11496,11559],"content":"The method to be called when the track operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the track operation has completed.","pos":[0,63]}]},{"pos":[11621,11670],"content":"The information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The information about the asynchronous operation.","pos":[0,49]}]},{"pos":[11734,11776],"content":"The status of the current track operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The status of the current track operation.","pos":[0,42]}]},{"pos":[12282,12447],"content":"Gets the &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl&gt; instance for this <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.WorkflowInstance\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance for this <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>."},{"pos":[12678,12729],"content":"The controller instance for this workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The controller instance for this workflow instance.","pos":[0,51]}]},{"pos":[13260,13364],"content":"Gets or sets the definition identity of <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.WorkflowInstance\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the definition identity of <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>."},{"pos":[13536,13627],"content":"The definition identity of <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.WorkflowInstance\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The definition identity of <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>."},{"pos":[14165,14264],"content":"Calls <xref:System.Disposable.Dispose*> on all extensions that implement <xref:System.IDisposable>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calls &lt;xref:System.Disposable.Dispose*&gt; on all extensions that implement &lt;xref:System.IDisposable&gt;.","pos":[0,99],"source":"Calls <xref:System.Disposable.Dispose*> on all extensions that implement <xref:System.IDisposable>."}]},{"pos":[14988,15046],"content":"Called by the workflow runtime to end the track operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to end the track operation.","pos":[0,58]}]},{"pos":[15216,15263],"content":"The status of the asynchronous track operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The status of the asynchronous track operation.","pos":[0,47]}]},{"pos":[15879,15968],"content":"Called by the workflow runtime to send pending tracking records to tracking participants.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to send pending tracking records to tracking participants.","pos":[0,89]}]},{"pos":[16129,16178],"content":"The time period after which to abort the attempt.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time period after which to abort the attempt.","pos":[0,49]}]},{"pos":[16965,17040],"content":"Retrieves the list of activity that is blocking the update of the workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the list of activity that is blocking the update of the workflow.","pos":[0,75]}]},{"pos":[17389,17420],"content":"The deserialized runtime state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deserialized runtime state.","pos":[0,31]}]},{"pos":[17521,17536],"content":"The update map.","needQuote":true,"needEscape":true,"nodes":[{"content":"The update map.","pos":[0,15]}]},{"pos":[17669,17718],"content":"The list of activity that is blocking the update.","needQuote":true,"needEscape":true,"nodes":[{"content":"The list of activity that is blocking the update.","pos":[0,49]}]},{"pos":[18372,18384],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19112,19124],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19646,19732],"content":"Gets or sets the root environment for the workflow instance’s arguments and variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the root environment for the workflow instance’s arguments and variables.","pos":[0,86]}]},{"pos":[19744,19948],"content":"If this property is set after the workflow instance is initialized and &lt;xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A&gt; returns <ph id=\"ph1\">`true`</ph>, an &lt;xref:System.InvalidOperationException&gt; is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If this property is set after the workflow instance is initialized and <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, an <xref:System.InvalidOperationException> is thrown."},{"pos":[20146,20219],"content":"The root environment for the workflow instance’s arguments and variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"The root environment for the workflow instance’s arguments and variables.","pos":[0,73]}]},{"pos":[20675,20728],"content":"Gets the unique identifier for the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the unique identifier for the workflow instance.","pos":[0,53]}]},{"pos":[20840,20888],"content":"The unique identifier for the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unique identifier for the workflow instance.","pos":[0,48]}]},{"pos":[21423,21511],"content":"Called by the host to initialize the workflow instance with the workflow run-time state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the host to initialize the workflow instance with the workflow run-time state.","pos":[0,88]}]},{"pos":[21692,21740],"content":"The run-time state used to execute the workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"The run-time state used to execute the workflow.","pos":[0,48]}]},{"pos":[22611,22716],"content":"Called by the host to initialize the workflow instance with the argument values and execution properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the host to initialize the workflow instance with the argument values and execution properties.","pos":[0,105]}]},{"pos":[23082,23143],"content":"The input parameters to the workflow, keyed by argument name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input parameters to the workflow, keyed by argument name.","pos":[0,61]}]},{"pos":[23272,23314],"content":"The list of workflow execution properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"The list of workflow execution properties.","pos":[0,42]}]},{"pos":[24006,24109],"content":"Called by the host to initialize the workflow instance with the workflow run-time state and update map.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the host to initialize the workflow instance with the workflow run-time state and update map.","pos":[0,103]}]},{"pos":[24350,24398],"content":"The run-time state used to execute the workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"The run-time state used to execute the workflow.","pos":[0,48]}]},{"pos":[24499,24514],"content":"The update map.","needQuote":true,"needEscape":true,"nodes":[{"content":"The update map.","pos":[0,15]}]},{"pos":[25005,25084],"content":"Gets a value that indicates whether the workflow instance has been initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the workflow instance has been initialized.","pos":[0,79]}]},{"pos":[25201,25383],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the workflow instance has been initialized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the workflow instance has been initialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26305,26418],"content":"Called by the workflow runtime to notify the host that new instance keys should be associated with this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host that new instance keys should be associated with this instance.","pos":[0,113]}]},{"pos":[26773,26832],"content":"The instance keys to associate with this workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The instance keys to associate with this workflow instance.","pos":[0,59]}]},{"pos":[26904,26957],"content":"The method to be called when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the operation completes.","pos":[0,53]}]},{"pos":[27019,27118],"content":"An optional application-specific object that contains information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]},{"pos":[27182,27239],"content":"A reference to the asynchronous associate keys operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the asynchronous associate keys operation.","pos":[0,57]}]},{"pos":[27961,28050],"content":"Asynchronous call to ask host to flush pending tracking records to tracking participants.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronous call to ask host to flush pending tracking records to tracking participants.","pos":[0,89]}]},{"pos":[28260,28323],"content":"The method to be called when the track operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the track operation has completed.","pos":[0,63]}]},{"pos":[28385,28434],"content":"The information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The information about the asynchronous operation.","pos":[0,49]}]},{"pos":[28498,28540],"content":"The status of the current track operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The status of the current track operation.","pos":[0,42]}]},{"pos":[29204,29262],"content":"Asynchronous call to ask the host to persist the workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronous call to ask the host to persist the workflow.","pos":[0,58]}]},{"pos":[29460,29525],"content":"The method to be called when the persist operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the persist operation has completed.","pos":[0,65]}]},{"pos":[29587,29686],"content":"An optional application-specific object that contains information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]},{"pos":[29750,29795],"content":"A reference to the current persist operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the current persist operation.","pos":[0,45]}]},{"pos":[30670,30766],"content":"Called by the workflow runtime to notify the host that a resume bookmark operation is beginning.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host that a resume bookmark operation is beginning.","pos":[0,96]}]},{"pos":[31046,31069],"content":"The bookmark to resume.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark to resume.","pos":[0,23]}]},{"pos":[31131,31234],"content":"The data to be passed to the activity that created the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The data to be passed to the activity that created the <xref href=\"System.Activities.Bookmark\"></xref>."},{"pos":[31300,31437],"content":"The interval in which the resume operation must complete before the operation is canceled and a <xref:System.TimeoutException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval in which the resume operation must complete before the operation is canceled and a &lt;xref:System.TimeoutException&gt; is thrown.","pos":[0,137],"source":"The interval in which the resume operation must complete before the operation is canceled and a <xref:System.TimeoutException> is thrown."}]},{"pos":[31509,31573],"content":"The method to be called when the resume operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be called when the resume operation has completed.","pos":[0,64]}]},{"pos":[31635,31734],"content":"An optional application-specific object that contains information about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]},{"pos":[31798,31847],"content":"A reference to the asynchronous resume operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to the asynchronous resume operation.","pos":[0,49]}]},{"pos":[32637,32773],"content":"Called by the workflow runtime to notify the host that a certain set of instance keys should no longer be associated with this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host that a certain set of instance keys should no longer be associated with this instance.","pos":[0,136]}]},{"pos":[33080,33113],"content":"The list of keys to disassociate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The list of keys to disassociate.","pos":[0,33]}]},{"pos":[33734,33829],"content":"Called by the workflow runtime to notify the host that an associate keys operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host that an associate keys operation is complete.","pos":[0,95]}]},{"pos":[34003,34062],"content":"The reference to the asynchronous associate keys operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reference to the asynchronous associate keys operation.","pos":[0,59]}]},{"pos":[34718,34822],"content":"Called by the workflow runtime to notify the host when the flush tracking records operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host when the flush tracking records operation is complete.","pos":[0,104]}]},{"pos":[35002,35066],"content":"The status of the asynchronous flush tracking records operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The status of the asynchronous flush tracking records operation.","pos":[0,64]}]},{"pos":[35664,35751],"content":"Called by the workflow runtime to notify the host that a persist operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host that a persist operation is complete.","pos":[0,87]}]},{"pos":[35919,35971],"content":"The reference to the asynchronous persist operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reference to the asynchronous persist operation.","pos":[0,52]}]},{"pos":[36591,36686],"content":"Called by the workflow runtime to notify the host that a resume bookmark operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host that a resume bookmark operation is complete.","pos":[0,95]}]},{"pos":[36899,36959],"content":"The reference to the asynchronous resume bookmark operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reference to the asynchronous resume bookmark operation.","pos":[0,60]}]},{"pos":[37046,37172],"content":"One of the enumeration values that indicates the result of a <bpt id=\"p1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> resume operation.","needQuote":true,"needEscape":true,"source":"One of the enumeration values that indicates the result of a <xref href=\"System.Activities.Bookmark\"></xref> resume operation."},{"pos":[37696,37833],"content":"Called by the workflow runtime to notify the host that the workflow instance has transitioned from the running state to the paused state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host that the workflow instance has transitioned from the running state to the paused state.","pos":[0,137]}]},{"pos":[38690,38801],"content":"Called by the workflow runtime to notify the host an unhandled exception has occurred in the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host an unhandled exception has occurred in the workflow instance.","pos":[0,111]}]},{"pos":[39043,39067],"content":"The unhandled exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unhandled exception.","pos":[0,24]}]},{"pos":[39143,39181],"content":"The activity that threw the exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity that threw the exception.","pos":[0,38]}]},{"pos":[39254,39390],"content":"The unique identifier of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.ActivityInstance\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the activity that threw the exception.","needQuote":true,"needEscape":true,"source":"The unique identifier of the <xref href=\"System.Activities.ActivityInstance\"></xref> representing the activity that threw the exception."},{"pos":[39984,40103],"content":"Called by the workflow runtime to notify the host that an abort operation has been requested for the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the workflow runtime to notify the host that an abort operation has been requested for the workflow instance.","pos":[0,119]}]},{"pos":[40115,40493],"content":"Once OnRequestAbort is called, most <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> APIs except <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort%2A> will throw an <xref:System.InvalidOperationException>. It is expected that after OnRequestAbort is called a host will trend toward a state in which it can satisfy the abort.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Once OnRequestAbort is called, most <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> APIs except <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort%2A> will throw an <xref:System.InvalidOperationException>. It is expected that after OnRequestAbort is called a host will trend toward a state in which it can satisfy the abort.","pos":[0,378],"nodes":[{"content":"Once OnRequestAbort is called, most &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl&gt; APIs except &lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort%2A&gt; will throw an &lt;xref:System.InvalidOperationException&gt;.","pos":[0,259],"source":"Once OnRequestAbort is called, most <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> APIs except <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort%2A> will throw an <xref:System.InvalidOperationException>."},{"content":"It is expected that after OnRequestAbort is called a host will trend toward a state in which it can satisfy the abort.","pos":[260,378]}]}]},{"pos":[40657,40703],"content":"The reason for aborting the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reason for aborting the workflow instance.","pos":[0,46]}]},{"pos":[41488,41661],"content":"Called by the host to register the specified extension manager, validate that all required extensions are present, and to initialize the collection of extensions to be used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by the host to register the specified extension manager, validate that all required extensions are present, and to initialize the collection of extensions to be used.","pos":[0,173]}]},{"pos":[41673,42648],"content":"Extensions are keyed by type, and a host provided extension will always be used if provided. Extensions added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the runtime type of the object as the type key. Extensions providers added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the decared type T of the Func\\<T> as the type key. Extension providers contributed by activities through the various *ActivityMetadata.AddDefaultExtensionProvider methods are dropped if a host extension exists for the declared type or if there is a broader type provided through AddDefaultExtensionProvider (ex. if Func\\<StreamWriter> is provided and Func\\<TextWriter> is provided, only Func\\<StreamWriter> will be kept). If an extension does not exist in the collection that is required by an activity (expressed by calling \\*ActivityMetadata.RequireExtension) a <xref:System.Activities.ValidationException> is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Extensions are keyed by type, and a host provided extension will always be used if provided. Extensions added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the runtime type of the object as the type key. Extensions providers added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the decared type T of the Func\\<T> as the type key. Extension providers contributed by activities through the various *ActivityMetadata.AddDefaultExtensionProvider methods are dropped if a host extension exists for the declared type or if there is a broader type provided through AddDefaultExtensionProvider (ex. if Func\\<StreamWriter> is provided and Func\\<TextWriter> is provided, only Func\\<StreamWriter> will be kept). If an extension does not exist in the collection that is required by an activity (expressed by calling \\*ActivityMetadata.RequireExtension) a <xref:System.Activities.ValidationException> is thrown.","pos":[0,975],"nodes":[{"content":"Extensions are keyed by type, and a host provided extension will always be used if provided.","pos":[0,92]},{"content":"Extensions added through &lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt; use the runtime type of the object as the type key.","pos":[93,242],"source":" Extensions added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the runtime type of the object as the type key."},{"content":"Extensions providers added through &lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt; use the decared type T of the Func<ph id=\"ph1\">\\&lt;</ph>T&gt; as the type key.","pos":[243,406],"source":" Extensions providers added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the decared type T of the Func\\<T> as the type key."},{"content":"Extension providers contributed by activities through the various *ActivityMetadata.AddDefaultExtensionProvider methods are dropped if a host extension exists for the declared type or if there is a broader type provided through AddDefaultExtensionProvider (ex.","pos":[407,667]},{"content":"if Func<ph id=\"ph1\">\\&lt;</ph>StreamWriter&gt; is provided and Func<ph id=\"ph2\">\\&lt;</ph>TextWriter&gt; is provided, only Func<ph id=\"ph3\">\\&lt;</ph>StreamWriter&gt; will be kept).","pos":[668,777],"source":" if Func\\<StreamWriter> is provided and Func\\<TextWriter> is provided, only Func\\<StreamWriter> will be kept)."},{"content":"If an extension does not exist in the collection that is required by an activity (expressed by calling <ph id=\"ph1\">\\*</ph>ActivityMetadata.RequireExtension) a &lt;xref:System.Activities.ValidationException&gt; is thrown.","pos":[778,975],"source":" If an extension does not exist in the collection that is required by an activity (expressed by calling \\*ActivityMetadata.RequireExtension) a <xref:System.Activities.ValidationException> is thrown."}]}]},{"pos":[42924,42958],"content":"The extension manager to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The extension manager to register.","pos":[0,34]}]},{"pos":[43513,43672],"content":"Gets a value that indicates whether the host supports the association of <xref:System.Runtime.Persistence.InstanceView.InstanceKeys*> with a run-time instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the host supports the association of &lt;xref:System.Runtime.Persistence.InstanceView.InstanceKeys*&gt; with a run-time instance.","pos":[0,159],"source":"Gets a value that indicates whether the host supports the association of <xref:System.Runtime.Persistence.InstanceView.InstanceKeys*> with a run-time instance."}]},{"pos":[43808,44070],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the host supports the association of &lt;xref:System.Runtime.Persistence.InstanceView.InstanceKeys*&gt; with a workflow instance; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the host supports the association of <xref:System.Runtime.Persistence.InstanceView.InstanceKeys*> with a workflow instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[44631,44737],"content":"Gets or sets the <xref:System.Threading.SynchronizationContext> used for scheduling the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the &lt;xref:System.Threading.SynchronizationContext&gt; used for scheduling the workflow instance.","pos":[0,106],"source":"Gets or sets the <xref:System.Threading.SynchronizationContext> used for scheduling the workflow instance."}]},{"pos":[44749,44953],"content":"If this property is set after the workflow instance is initialized and &lt;xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A&gt; returns <ph id=\"ph1\">`true`</ph>, an &lt;xref:System.InvalidOperationException&gt; is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If this property is set after the workflow instance is initialized and <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, an <xref:System.InvalidOperationException> is thrown."},{"pos":[45144,45214],"content":"The synchronization context used for scheduling the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The synchronization context used for scheduling the workflow instance.","pos":[0,70]}]},{"pos":[45746,45922],"content":"Throws an <xref:System.InvalidOperationException> if the workflow instance has been initialized, as determined by <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws an &lt;xref:System.InvalidOperationException&gt; if the workflow instance has been initialized, as determined by &lt;xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly*&gt;.","pos":[0,176],"source":"Throws an <xref:System.InvalidOperationException> if the workflow instance has been initialized, as determined by <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly*>."}]},{"pos":[45934,46075],"content":"If &lt;xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A&gt; returns <ph id=\"ph1\">`true`</ph>, then an &lt;xref:System.InvalidOperationException&gt; is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, then an <xref:System.InvalidOperationException> is thrown."},{"pos":[46688,46742],"content":"Gets the workflow definition of the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the workflow definition of the workflow instance.","pos":[0,54]}]},{"pos":[46898,46947],"content":"The workflow definition of the workflow instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The workflow definition of the workflow instance.","pos":[0,49]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Hosting.WorkflowInstance\n  id: WorkflowInstance\n  children:\n  - System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)\n  - System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)\n  - System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Activities.Hosting.WorkflowInstance.Controller\n  - System.Activities.Hosting.WorkflowInstance.DefinitionIdentity\n  - System.Activities.Hosting.WorkflowInstance.DisposeExtensions\n  - System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(System.IAsyncResult)\n  - System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(System.TimeSpan)\n  - System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)\n  - System.Activities.Hosting.WorkflowInstance.GetExtension``1\n  - System.Activities.Hosting.WorkflowInstance.GetExtensions``1\n  - System.Activities.Hosting.WorkflowInstance.HostEnvironment\n  - System.Activities.Hosting.WorkflowInstance.Id\n  - System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)\n  - System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})\n  - System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)\n  - System.Activities.Hosting.WorkflowInstance.IsReadOnly\n  - System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)\n  - System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)\n  - System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)\n  - System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})\n  - System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)\n  - System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)\n  - System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)\n  - System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)\n  - System.Activities.Hosting.WorkflowInstance.OnNotifyPaused\n  - System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)\n  - System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)\n  - System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)\n  - System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys\n  - System.Activities.Hosting.WorkflowInstance.SynchronizationContext\n  - System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly\n  - System.Activities.Hosting.WorkflowInstance.WorkflowDefinition\n  langs:\n  - csharp\n  name: WorkflowInstance\n  nameWithType: WorkflowInstance\n  fullName: System.Activities.Hosting.WorkflowInstance\n  type: Class\n  summary: WorkflowInstance is a lightweight, per-instance runtime for executing a workflow program. It can be constructed to create a new workflow instance or from existing instance state. The APIs that <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> exposes are the minimal set of runtime controls from which higher level operations can be implemented. This API set represents the entire breadth of functionality of the runtime. WorkflowInstance is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions.\n  remarks: \"WorkflowInstance is single threaded and assumes that the host synchronizes all access to it. An attempt to call multiple APIs simultaneously will result in an <xref:System.InvalidOperationException> being thrown.  \\n  \\n Internally, a WorkflowInstance has two states: Running and Paused. The only way to cause the runtime to transition from paused to running is to call <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A>. All actions (except Pause) can only be taken while the runtime is Paused. The runtime will become spontaneously Paused in the following situations:  \\n  \\n-   An error fatal to the runtime has occurred. The host will be signaled through <xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A> (which does not signal a transition to Paused) and then notified through <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A>.  \\n  \\n-   An exception in the workflow was uncaught and escaped the root. The host will be notified through the <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException%2A> method.  \\n  \\n-   The scheduler has run out of work items and is now <xref:System.Activities.Hosting.WorkflowInstanceState>. The host will be notified through the <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A> method. Note that the scheduler could have run out of work items because the instance is idle or because the instance is complete. The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A> value of the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property can be used to differentiate between the two.  \\n  \\n The host can request a change from Running to Paused by calling the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A> or <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable%2A> methods of the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance returned by the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property. This request should not be considered to have a specific response meaning that the host should not attempt to correlate an OnNotify* or <xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A> with a specific call to pause. In response to a pause request, the runtime may transition to Paused and call <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A> while the scheduler still has pending work items. The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A> value of the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property can be used to determine whether the scheduler has no more work or was interrupted by a request to pause.  \\n  \\n The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A> method of the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance returned by the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property is the only method which can be called while the WorkflowInstance is in the Running state. All other methods will throw an <xref:System.InvalidOperationException> if called.Given the rules for how WorkflowInstance transitions from one state to another, the public notion of Running and Paused can be defined as follows:  \\n  \\n-   Running – The state between a call to <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A> and the next WorkflowInstance.OnNotify*.  \\n  \\n-   Paused – The state between the last WorkflowInstance.OnNotify* and the next call to <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A>.\"\n  syntax:\n    content: public abstract class WorkflowInstance\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)\n  id: '#ctor(System.Activities.Activity)'\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: WorkflowInstance(Activity)\n  nameWithType: WorkflowInstance.WorkflowInstance(Activity)\n  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowInstance(Activity)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref> class with the specified workflow definition.\n  syntax:\n    content: protected WorkflowInstance (System.Activities.Activity workflowDefinition);\n    parameters:\n    - id: workflowDefinition\n      type: System.Activities.Activity\n      description: The activity that defines the workflow.\n  overload: System.Activities.Hosting.WorkflowInstance.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)\n  id: '#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)'\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: WorkflowInstance(Activity,WorkflowIdentity)\n  nameWithType: WorkflowInstance.WorkflowInstance(Activity,WorkflowIdentity)\n  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowInstance(Activity,WorkflowIdentity)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref> class with the specified workflow definition and definition identity.\n  syntax:\n    content: protected WorkflowInstance (System.Activities.Activity workflowDefinition, System.Activities.WorkflowIdentity definitionIdentity);\n    parameters:\n    - id: workflowDefinition\n      type: System.Activities.Activity\n      description: The activity that defines the workflow.\n    - id: definitionIdentity\n      type: System.Activities.WorkflowIdentity\n      description: The definition identity.\n  overload: System.Activities.Hosting.WorkflowInstance.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInstance.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously.\n  syntax:\n    content: protected IAsyncResult BeginFlushTrackingRecords (TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The time period after which to abort the attempt.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the track operation has completed.\n    - id: state\n      type: System.Object\n      description: The information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: The status of the current track operation.\n  overload: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.Controller\n  id: Controller\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: Controller\n  nameWithType: WorkflowInstance.Controller\n  fullName: System.Activities.Hosting.WorkflowInstance.Controller\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance for this <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>.\n  syntax:\n    content: protected System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl Controller { get; }\n    return:\n      type: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n      description: The controller instance for this workflow instance.\n  overload: System.Activities.Hosting.WorkflowInstance.Controller*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity\n  id: DefinitionIdentity\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: DefinitionIdentity\n  nameWithType: WorkflowInstance.DefinitionIdentity\n  fullName: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets or sets the definition identity of <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>.\n  syntax:\n    content: public System.Activities.WorkflowIdentity DefinitionIdentity { get; }\n    return:\n      type: System.Activities.WorkflowIdentity\n      description: The definition identity of <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>.\n  overload: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.DisposeExtensions\n  id: DisposeExtensions\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: DisposeExtensions()\n  nameWithType: WorkflowInstance.DisposeExtensions()\n  fullName: System.Activities.Hosting.WorkflowInstance.DisposeExtensions()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Calls <xref:System.Disposable.Dispose*> on all extensions that implement <xref:System.IDisposable>.\n  syntax:\n    content: protected void DisposeExtensions ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstance.DisposeExtensions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(System.IAsyncResult)\n  id: EndFlushTrackingRecords(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: EndFlushTrackingRecords(IAsyncResult)\n  nameWithType: WorkflowInstance.EndFlushTrackingRecords(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to end the track operation.\n  syntax:\n    content: protected void EndFlushTrackingRecords (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The status of the asynchronous track operation.\n  overload: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(System.TimeSpan)\n  id: FlushTrackingRecords(System.TimeSpan)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: FlushTrackingRecords(TimeSpan)\n  nameWithType: WorkflowInstance.FlushTrackingRecords(TimeSpan)\n  fullName: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to send pending tracking records to tracking participants.\n  syntax:\n    content: protected void FlushTrackingRecords (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The time period after which to abort the attempt.\n  overload: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)\n  id: GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)\n  nameWithType: WorkflowInstance.GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)\n  fullName: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Retrieves the list of activity that is blocking the update of the workflow.\n  syntax:\n    content: protected static System.Collections.Generic.IList<System.Activities.DynamicUpdate.ActivityBlockingUpdate> GetActivitiesBlockingUpdate (object deserializedRuntimeState, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap);\n    parameters:\n    - id: deserializedRuntimeState\n      type: System.Object\n      description: The deserialized runtime state.\n    - id: updateMap\n      type: System.Activities.DynamicUpdate.DynamicUpdateMap\n      description: The update map.\n    return:\n      type: System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}\n      description: The list of activity that is blocking the update.\n  overload: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.GetExtension``1\n  id: GetExtension``1\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: GetExtension()\n  nameWithType: WorkflowInstance.GetExtension()\n  fullName: System.Activities.Hosting.WorkflowInstance.GetExtension()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: 'protected T GetExtension<T> () where T : class;'\n    parameters: []\n    return:\n      type: T\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.GetExtension<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.GetExtensions``1\n  id: GetExtensions``1\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: GetExtensions()\n  nameWithType: WorkflowInstance.GetExtensions()\n  fullName: System.Activities.Hosting.WorkflowInstance.GetExtensions()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  syntax:\n    content: 'protected System.Collections.Generic.IEnumerable<T> GetExtensions<T> () where T : class;'\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{T}\n      description: To be added.\n  overload: System.Activities.Hosting.WorkflowInstance.GetExtensions<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.HostEnvironment\n  id: HostEnvironment\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: HostEnvironment\n  nameWithType: WorkflowInstance.HostEnvironment\n  fullName: System.Activities.Hosting.WorkflowInstance.HostEnvironment\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets or sets the root environment for the workflow instance’s arguments and variables.\n  remarks: If this property is set after the workflow instance is initialized and <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, an <xref:System.InvalidOperationException> is thrown.\n  syntax:\n    content: public System.Activities.LocationReferenceEnvironment HostEnvironment { get; set; }\n    return:\n      type: System.Activities.LocationReferenceEnvironment\n      description: The root environment for the workflow instance’s arguments and variables.\n  overload: System.Activities.Hosting.WorkflowInstance.HostEnvironment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.Id\n  id: Id\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: Id\n  nameWithType: WorkflowInstance.Id\n  fullName: System.Activities.Hosting.WorkflowInstance.Id\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets the unique identifier for the workflow instance.\n  syntax:\n    content: public abstract Guid Id { get; }\n    return:\n      type: System.Guid\n      description: The unique identifier for the workflow instance.\n  overload: System.Activities.Hosting.WorkflowInstance.Id*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)\n  id: Initialize(System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: Initialize(Object)\n  nameWithType: WorkflowInstance.Initialize(Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the host to initialize the workflow instance with the workflow run-time state.\n  syntax:\n    content: protected void Initialize (object deserializedRuntimeState);\n    parameters:\n    - id: deserializedRuntimeState\n      type: System.Object\n      description: The run-time state used to execute the workflow.\n  overload: System.Activities.Hosting.WorkflowInstance.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})\n  id: Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: Initialize(IDictionary<String,Object>,IList<Handle>)\n  nameWithType: WorkflowInstance.Initialize(IDictionary<String,Object>,IList<Handle>)\n  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(IDictionary<String,Object>,IList<Handle>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the host to initialize the workflow instance with the argument values and execution properties.\n  syntax:\n    content: protected void Initialize (System.Collections.Generic.IDictionary<string,object> workflowArgumentValues, System.Collections.Generic.IList<System.Activities.Handle> workflowExecutionProperties);\n    parameters:\n    - id: workflowArgumentValues\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The input parameters to the workflow, keyed by argument name.\n    - id: workflowExecutionProperties\n      type: System.Collections.Generic.IList{System.Activities.Handle}\n      description: The list of workflow execution properties.\n  overload: System.Activities.Hosting.WorkflowInstance.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)\n  id: Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: Initialize(Object,DynamicUpdateMap)\n  nameWithType: WorkflowInstance.Initialize(Object,DynamicUpdateMap)\n  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(Object,DynamicUpdateMap)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the host to initialize the workflow instance with the workflow run-time state and update map.\n  syntax:\n    content: protected void Initialize (object deserializedRuntimeState, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap);\n    parameters:\n    - id: deserializedRuntimeState\n      type: System.Object\n      description: The run-time state used to execute the workflow.\n    - id: updateMap\n      type: System.Activities.DynamicUpdate.DynamicUpdateMap\n      description: The update map.\n  overload: System.Activities.Hosting.WorkflowInstance.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.IsReadOnly\n  id: IsReadOnly\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: WorkflowInstance.IsReadOnly\n  fullName: System.Activities.Hosting.WorkflowInstance.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets a value that indicates whether the workflow instance has been initialized.\n  syntax:\n    content: protected bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the workflow instance has been initialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Hosting.WorkflowInstance.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)\n  id: OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)\n  nameWithType: WorkflowInstance.OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host that new instance keys should be associated with this instance.\n  syntax:\n    content: protected abstract IAsyncResult OnBeginAssociateKeys (System.Collections.Generic.ICollection<System.Runtime.DurableInstancing.InstanceKey> keys, AsyncCallback callback, object state);\n    parameters:\n    - id: keys\n      type: System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey}\n      description: The instance keys to associate with this workflow instance.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the operation completes.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous associate keys operation.\n  overload: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)\n  id: OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnBeginFlushTrackingRecords(AsyncCallback,Object)\n  nameWithType: WorkflowInstance.OnBeginFlushTrackingRecords(AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Asynchronous call to ask host to flush pending tracking records to tracking participants.\n  syntax:\n    content: protected virtual IAsyncResult OnBeginFlushTrackingRecords (AsyncCallback callback, object state);\n    parameters:\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the track operation has completed.\n    - id: state\n      type: System.Object\n      description: The information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: The status of the current track operation.\n  overload: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)\n  id: OnBeginPersist(System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnBeginPersist(AsyncCallback,Object)\n  nameWithType: WorkflowInstance.OnBeginPersist(AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginPersist(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Asynchronous call to ask the host to persist the workflow.\n  syntax:\n    content: protected abstract IAsyncResult OnBeginPersist (AsyncCallback callback, object state);\n    parameters:\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the persist operation has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the current persist operation.\n  overload: System.Activities.Hosting.WorkflowInstance.OnBeginPersist*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)\n  id: OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInstance.OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host that a resume bookmark operation is beginning.\n  syntax:\n    content: protected abstract IAsyncResult OnBeginResumeBookmark (System.Activities.Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: bookmark\n      type: System.Activities.Bookmark\n      description: The bookmark to resume.\n    - id: value\n      type: System.Object\n      description: The data to be passed to the activity that created the <xref href=\"System.Activities.Bookmark\"></xref>.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the resume operation must complete before the operation is canceled and a <xref:System.TimeoutException> is thrown.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the resume operation has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous resume operation.\n  overload: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})\n  id: OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnDisassociateKeys(ICollection<InstanceKey>)\n  nameWithType: WorkflowInstance.OnDisassociateKeys(ICollection<InstanceKey>)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(ICollection<InstanceKey>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host that a certain set of instance keys should no longer be associated with this instance.\n  syntax:\n    content: protected abstract void OnDisassociateKeys (System.Collections.Generic.ICollection<System.Runtime.DurableInstancing.InstanceKey> keys);\n    parameters:\n    - id: keys\n      type: System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey}\n      description: The list of keys to disassociate.\n  overload: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)\n  id: OnEndAssociateKeys(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnEndAssociateKeys(IAsyncResult)\n  nameWithType: WorkflowInstance.OnEndAssociateKeys(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host that an associate keys operation is complete.\n  syntax:\n    content: protected abstract void OnEndAssociateKeys (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The reference to the asynchronous associate keys operation.\n  overload: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)\n  id: OnEndFlushTrackingRecords(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnEndFlushTrackingRecords(IAsyncResult)\n  nameWithType: WorkflowInstance.OnEndFlushTrackingRecords(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host when the flush tracking records operation is complete.\n  syntax:\n    content: protected virtual void OnEndFlushTrackingRecords (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The status of the asynchronous flush tracking records operation.\n  overload: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)\n  id: OnEndPersist(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnEndPersist(IAsyncResult)\n  nameWithType: WorkflowInstance.OnEndPersist(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnEndPersist(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host that a persist operation is complete.\n  syntax:\n    content: protected abstract void OnEndPersist (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The reference to the asynchronous persist operation.\n  overload: System.Activities.Hosting.WorkflowInstance.OnEndPersist*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)\n  id: OnEndResumeBookmark(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnEndResumeBookmark(IAsyncResult)\n  nameWithType: WorkflowInstance.OnEndResumeBookmark(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host that a resume bookmark operation is complete.\n  syntax:\n    content: protected abstract System.Activities.BookmarkResumptionResult OnEndResumeBookmark (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The reference to the asynchronous resume bookmark operation.\n    return:\n      type: System.Activities.BookmarkResumptionResult\n      description: One of the enumeration values that indicates the result of a <xref href=\"System.Activities.Bookmark\"></xref> resume operation.\n  overload: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused\n  id: OnNotifyPaused\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnNotifyPaused()\n  nameWithType: WorkflowInstance.OnNotifyPaused()\n  fullName: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host that the workflow instance has transitioned from the running state to the paused state.\n  syntax:\n    content: protected abstract void OnNotifyPaused ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)\n  id: OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnNotifyUnhandledException(Exception,Activity,String)\n  nameWithType: WorkflowInstance.OnNotifyUnhandledException(Exception,Activity,String)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(Exception,Activity,String)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host an unhandled exception has occurred in the workflow instance.\n  syntax:\n    content: protected abstract void OnNotifyUnhandledException (Exception exception, System.Activities.Activity source, string sourceInstanceId);\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: The unhandled exception.\n    - id: source\n      type: System.Activities.Activity\n      description: The activity that threw the exception.\n    - id: sourceInstanceId\n      type: System.String\n      description: The unique identifier of the <xref href=\"System.Activities.ActivityInstance\"></xref> representing the activity that threw the exception.\n  overload: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)\n  id: OnRequestAbort(System.Exception)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: OnRequestAbort(Exception)\n  nameWithType: WorkflowInstance.OnRequestAbort(Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnRequestAbort(Exception)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the workflow runtime to notify the host that an abort operation has been requested for the workflow instance.\n  remarks: Once OnRequestAbort is called, most <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> APIs except <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort%2A> will throw an <xref:System.InvalidOperationException>. It is expected that after OnRequestAbort is called a host will trend toward a state in which it can satisfy the abort.\n  syntax:\n    content: protected abstract void OnRequestAbort (Exception reason);\n    parameters:\n    - id: reason\n      type: System.Exception\n      description: The reason for aborting the workflow instance.\n  overload: System.Activities.Hosting.WorkflowInstance.OnRequestAbort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)\n  id: RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: RegisterExtensionManager(WorkflowInstanceExtensionManager)\n  nameWithType: WorkflowInstance.RegisterExtensionManager(WorkflowInstanceExtensionManager)\n  fullName: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(WorkflowInstanceExtensionManager)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Called by the host to register the specified extension manager, validate that all required extensions are present, and to initialize the collection of extensions to be used.\n  remarks: Extensions are keyed by type, and a host provided extension will always be used if provided. Extensions added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the runtime type of the object as the type key. Extensions providers added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the decared type T of the Func\\<T> as the type key. Extension providers contributed by activities through the various *ActivityMetadata.AddDefaultExtensionProvider methods are dropped if a host extension exists for the declared type or if there is a broader type provided through AddDefaultExtensionProvider (ex. if Func\\<StreamWriter> is provided and Func\\<TextWriter> is provided, only Func\\<StreamWriter> will be kept). If an extension does not exist in the collection that is required by an activity (expressed by calling \\*ActivityMetadata.RequireExtension) a <xref:System.Activities.ValidationException> is thrown.\n  syntax:\n    content: protected void RegisterExtensionManager (System.Activities.Hosting.WorkflowInstanceExtensionManager extensionManager);\n    parameters:\n    - id: extensionManager\n      type: System.Activities.Hosting.WorkflowInstanceExtensionManager\n      description: The extension manager to register.\n  overload: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys\n  id: SupportsInstanceKeys\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: SupportsInstanceKeys\n  nameWithType: WorkflowInstance.SupportsInstanceKeys\n  fullName: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets a value that indicates whether the host supports the association of <xref:System.Runtime.Persistence.InstanceView.InstanceKeys*> with a run-time instance.\n  syntax:\n    content: protected abstract bool SupportsInstanceKeys { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the host supports the association of <xref:System.Runtime.Persistence.InstanceView.InstanceKeys*> with a workflow instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.SynchronizationContext\n  id: SynchronizationContext\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: SynchronizationContext\n  nameWithType: WorkflowInstance.SynchronizationContext\n  fullName: System.Activities.Hosting.WorkflowInstance.SynchronizationContext\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets or sets the <xref:System.Threading.SynchronizationContext> used for scheduling the workflow instance.\n  remarks: If this property is set after the workflow instance is initialized and <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, an <xref:System.InvalidOperationException> is thrown.\n  syntax:\n    content: public System.Threading.SynchronizationContext SynchronizationContext { get; set; }\n    return:\n      type: System.Threading.SynchronizationContext\n      description: The synchronization context used for scheduling the workflow instance.\n  overload: System.Activities.Hosting.WorkflowInstance.SynchronizationContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly\n  id: ThrowIfReadOnly\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: ThrowIfReadOnly()\n  nameWithType: WorkflowInstance.ThrowIfReadOnly()\n  fullName: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Throws an <xref:System.InvalidOperationException> if the workflow instance has been initialized, as determined by <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly*>.\n  remarks: If <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, then an <xref:System.InvalidOperationException> is thrown.\n  syntax:\n    content: protected void ThrowIfReadOnly ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition\n  id: WorkflowDefinition\n  parent: System.Activities.Hosting.WorkflowInstance\n  langs:\n  - csharp\n  name: WorkflowDefinition\n  nameWithType: WorkflowInstance.WorkflowDefinition\n  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets the workflow definition of the workflow instance.\n  syntax:\n    content: public System.Activities.Activity WorkflowDefinition { get; }\n    return:\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow instance.\n  overload: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: WorkflowInstance(Activity)\n  nameWithType: WorkflowInstance.WorkflowInstance(Activity)\n  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowInstance(Activity)\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: WorkflowInstance(Activity,WorkflowIdentity)\n  nameWithType: WorkflowInstance.WorkflowInstance(Activity,WorkflowIdentity)\n  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowInstance(Activity,WorkflowIdentity)\n- uid: System.Activities.WorkflowIdentity\n  parent: System.Activities\n  isExternal: false\n  name: WorkflowIdentity\n  nameWithType: WorkflowIdentity\n  fullName: System.Activities.WorkflowIdentity\n- uid: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInstance.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Activities.Hosting.WorkflowInstance.Controller\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: Controller\n  nameWithType: WorkflowInstance.Controller\n  fullName: System.Activities.Hosting.WorkflowInstance.Controller\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl\n  parent: System.Activities.Hosting\n  isExternal: false\n  name: WorkflowInstance+WorkflowInstanceControl\n  nameWithType: WorkflowInstance+WorkflowInstanceControl\n  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl\n- uid: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: DefinitionIdentity\n  nameWithType: WorkflowInstance.DefinitionIdentity\n  fullName: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity\n- uid: System.Activities.Hosting.WorkflowInstance.DisposeExtensions\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: DisposeExtensions()\n  nameWithType: WorkflowInstance.DisposeExtensions()\n  fullName: System.Activities.Hosting.WorkflowInstance.DisposeExtensions()\n- uid: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: EndFlushTrackingRecords(IAsyncResult)\n  nameWithType: WorkflowInstance.EndFlushTrackingRecords(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(IAsyncResult)\n- uid: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(System.TimeSpan)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: FlushTrackingRecords(TimeSpan)\n  nameWithType: WorkflowInstance.FlushTrackingRecords(TimeSpan)\n  fullName: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(TimeSpan)\n- uid: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)\n  nameWithType: WorkflowInstance.GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)\n  fullName: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)\n- uid: System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<ActivityBlockingUpdate>\n  nameWithType: IList<ActivityBlockingUpdate>\n  fullName: System.Collections.Generic.IList<System.Activities.DynamicUpdate.ActivityBlockingUpdate>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Activities.DynamicUpdate.ActivityBlockingUpdate>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.DynamicUpdate.ActivityBlockingUpdate\n    name: ActivityBlockingUpdate\n    nameWithType: ActivityBlockingUpdate\n    fullName: ActivityBlockingUpdate\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.DynamicUpdate.DynamicUpdateMap\n  parent: System.Activities.DynamicUpdate\n  isExternal: false\n  name: DynamicUpdateMap\n  nameWithType: DynamicUpdateMap\n  fullName: System.Activities.DynamicUpdate.DynamicUpdateMap\n- uid: System.Activities.Hosting.WorkflowInstance.GetExtension``1\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: GetExtension()\n  nameWithType: WorkflowInstance.GetExtension()\n  fullName: System.Activities.Hosting.WorkflowInstance.GetExtension()\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Activities.Hosting.WorkflowInstance.GetExtensions``1\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: GetExtensions()\n  nameWithType: WorkflowInstance.GetExtensions()\n  fullName: System.Activities.Hosting.WorkflowInstance.GetExtensions()\n- uid: System.Collections.Generic.IEnumerable{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.WorkflowInstance.HostEnvironment\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: HostEnvironment\n  nameWithType: WorkflowInstance.HostEnvironment\n  fullName: System.Activities.Hosting.WorkflowInstance.HostEnvironment\n- uid: System.Activities.LocationReferenceEnvironment\n  parent: System.Activities\n  isExternal: false\n  name: LocationReferenceEnvironment\n  nameWithType: LocationReferenceEnvironment\n  fullName: System.Activities.LocationReferenceEnvironment\n- uid: System.Activities.Hosting.WorkflowInstance.Id\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: Id\n  nameWithType: WorkflowInstance.Id\n  fullName: System.Activities.Hosting.WorkflowInstance.Id\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: Initialize(Object)\n  nameWithType: WorkflowInstance.Initialize(Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(Object)\n- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: Initialize(IDictionary<String,Object>,IList<Handle>)\n  nameWithType: WorkflowInstance.Initialize(IDictionary<String,Object>,IList<Handle>)\n  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(IDictionary<String,Object>,IList<Handle>)\n- uid: System.Collections.Generic.IDictionary{System.String,System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,Object>\n  nameWithType: IDictionary<String,Object>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IList{System.Activities.Handle}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<Handle>\n  nameWithType: IList<Handle>\n  fullName: System.Collections.Generic.IList<System.Activities.Handle>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Activities.Handle>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Handle\n    name: Handle\n    nameWithType: Handle\n    fullName: Handle\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: Initialize(Object,DynamicUpdateMap)\n  nameWithType: WorkflowInstance.Initialize(Object,DynamicUpdateMap)\n  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(Object,DynamicUpdateMap)\n- uid: System.Activities.Hosting.WorkflowInstance.IsReadOnly\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: WorkflowInstance.IsReadOnly\n  fullName: System.Activities.Hosting.WorkflowInstance.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)\n  nameWithType: WorkflowInstance.OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)\n- uid: System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<InstanceKey>\n  nameWithType: ICollection<InstanceKey>\n  fullName: System.Collections.Generic.ICollection<System.Runtime.DurableInstancing.InstanceKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<System.Runtime.DurableInstancing.InstanceKey>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Runtime.DurableInstancing.InstanceKey\n    name: InstanceKey\n    nameWithType: InstanceKey\n    fullName: InstanceKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnBeginFlushTrackingRecords(AsyncCallback,Object)\n  nameWithType: WorkflowInstance.OnBeginFlushTrackingRecords(AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(AsyncCallback,Object)\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnBeginPersist(AsyncCallback,Object)\n  nameWithType: WorkflowInstance.OnBeginPersist(AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginPersist(AsyncCallback,Object)\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)\n  nameWithType: WorkflowInstance.OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)\n- uid: System.Activities.Bookmark\n  parent: System.Activities\n  isExternal: false\n  name: Bookmark\n  nameWithType: Bookmark\n  fullName: System.Activities.Bookmark\n- uid: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnDisassociateKeys(ICollection<InstanceKey>)\n  nameWithType: WorkflowInstance.OnDisassociateKeys(ICollection<InstanceKey>)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(ICollection<InstanceKey>)\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnEndAssociateKeys(IAsyncResult)\n  nameWithType: WorkflowInstance.OnEndAssociateKeys(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(IAsyncResult)\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnEndFlushTrackingRecords(IAsyncResult)\n  nameWithType: WorkflowInstance.OnEndFlushTrackingRecords(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(IAsyncResult)\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnEndPersist(IAsyncResult)\n  nameWithType: WorkflowInstance.OnEndPersist(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnEndPersist(IAsyncResult)\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnEndResumeBookmark(IAsyncResult)\n  nameWithType: WorkflowInstance.OnEndResumeBookmark(IAsyncResult)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(IAsyncResult)\n- uid: System.Activities.BookmarkResumptionResult\n  parent: System.Activities\n  isExternal: false\n  name: BookmarkResumptionResult\n  nameWithType: BookmarkResumptionResult\n  fullName: System.Activities.BookmarkResumptionResult\n- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnNotifyPaused()\n  nameWithType: WorkflowInstance.OnNotifyPaused()\n  fullName: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused()\n- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnNotifyUnhandledException(Exception,Activity,String)\n  nameWithType: WorkflowInstance.OnNotifyUnhandledException(Exception,Activity,String)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(Exception,Activity,String)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnRequestAbort(Exception)\n  nameWithType: WorkflowInstance.OnRequestAbort(Exception)\n  fullName: System.Activities.Hosting.WorkflowInstance.OnRequestAbort(Exception)\n- uid: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: RegisterExtensionManager(WorkflowInstanceExtensionManager)\n  nameWithType: WorkflowInstance.RegisterExtensionManager(WorkflowInstanceExtensionManager)\n  fullName: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(WorkflowInstanceExtensionManager)\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  parent: System.Activities.Hosting\n  isExternal: false\n  name: WorkflowInstanceExtensionManager\n  nameWithType: WorkflowInstanceExtensionManager\n  fullName: System.Activities.Hosting.WorkflowInstanceExtensionManager\n- uid: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: SupportsInstanceKeys\n  nameWithType: WorkflowInstance.SupportsInstanceKeys\n  fullName: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys\n- uid: System.Activities.Hosting.WorkflowInstance.SynchronizationContext\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: SynchronizationContext\n  nameWithType: WorkflowInstance.SynchronizationContext\n  fullName: System.Activities.Hosting.WorkflowInstance.SynchronizationContext\n- uid: System.Threading.SynchronizationContext\n  parent: System.Threading\n  isExternal: true\n  name: SynchronizationContext\n  nameWithType: SynchronizationContext\n  fullName: System.Threading.SynchronizationContext\n- uid: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: ThrowIfReadOnly()\n  nameWithType: WorkflowInstance.ThrowIfReadOnly()\n  fullName: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly()\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: WorkflowDefinition\n  nameWithType: WorkflowInstance.WorkflowDefinition\n  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition\n- uid: System.Activities.Hosting.WorkflowInstance.#ctor*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: WorkflowInstance\n  nameWithType: WorkflowInstance.WorkflowInstance\n- uid: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: BeginFlushTrackingRecords\n  nameWithType: WorkflowInstance.BeginFlushTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.Controller*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: Controller\n  nameWithType: WorkflowInstance.Controller\n- uid: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: DefinitionIdentity\n  nameWithType: WorkflowInstance.DefinitionIdentity\n- uid: System.Activities.Hosting.WorkflowInstance.DisposeExtensions*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: DisposeExtensions\n  nameWithType: WorkflowInstance.DisposeExtensions\n- uid: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: EndFlushTrackingRecords\n  nameWithType: WorkflowInstance.EndFlushTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: FlushTrackingRecords\n  nameWithType: WorkflowInstance.FlushTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: GetActivitiesBlockingUpdate\n  nameWithType: WorkflowInstance.GetActivitiesBlockingUpdate\n- uid: System.Activities.Hosting.WorkflowInstance.GetExtension<T>*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: GetExtension<T>\n  nameWithType: WorkflowInstance.GetExtension<T>\n- uid: System.Activities.Hosting.WorkflowInstance.GetExtensions<T>*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: GetExtensions<T>\n  nameWithType: WorkflowInstance.GetExtensions<T>\n- uid: System.Activities.Hosting.WorkflowInstance.HostEnvironment*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: HostEnvironment\n  nameWithType: WorkflowInstance.HostEnvironment\n- uid: System.Activities.Hosting.WorkflowInstance.Id*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: Id\n  nameWithType: WorkflowInstance.Id\n- uid: System.Activities.Hosting.WorkflowInstance.Initialize*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: Initialize\n  nameWithType: WorkflowInstance.Initialize\n- uid: System.Activities.Hosting.WorkflowInstance.IsReadOnly*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: WorkflowInstance.IsReadOnly\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnBeginAssociateKeys\n  nameWithType: WorkflowInstance.OnBeginAssociateKeys\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnBeginFlushTrackingRecords\n  nameWithType: WorkflowInstance.OnBeginFlushTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginPersist*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnBeginPersist\n  nameWithType: WorkflowInstance.OnBeginPersist\n- uid: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnBeginResumeBookmark\n  nameWithType: WorkflowInstance.OnBeginResumeBookmark\n- uid: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnDisassociateKeys\n  nameWithType: WorkflowInstance.OnDisassociateKeys\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnEndAssociateKeys\n  nameWithType: WorkflowInstance.OnEndAssociateKeys\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnEndFlushTrackingRecords\n  nameWithType: WorkflowInstance.OnEndFlushTrackingRecords\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndPersist*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnEndPersist\n  nameWithType: WorkflowInstance.OnEndPersist\n- uid: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnEndResumeBookmark\n  nameWithType: WorkflowInstance.OnEndResumeBookmark\n- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnNotifyPaused\n  nameWithType: WorkflowInstance.OnNotifyPaused\n- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnNotifyUnhandledException\n  nameWithType: WorkflowInstance.OnNotifyUnhandledException\n- uid: System.Activities.Hosting.WorkflowInstance.OnRequestAbort*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: OnRequestAbort\n  nameWithType: WorkflowInstance.OnRequestAbort\n- uid: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: RegisterExtensionManager\n  nameWithType: WorkflowInstance.RegisterExtensionManager\n- uid: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: SupportsInstanceKeys\n  nameWithType: WorkflowInstance.SupportsInstanceKeys\n- uid: System.Activities.Hosting.WorkflowInstance.SynchronizationContext*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: SynchronizationContext\n  nameWithType: WorkflowInstance.SynchronizationContext\n- uid: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: ThrowIfReadOnly\n  nameWithType: WorkflowInstance.ThrowIfReadOnly\n- uid: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition*\n  parent: System.Activities.Hosting.WorkflowInstance\n  isExternal: false\n  name: WorkflowDefinition\n  nameWithType: WorkflowInstance.WorkflowDefinition\n"}