{"nodes":[{"pos":[293,379],"content":"Represents the method that executes on a <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Represents the method that executes on a <xref href=\"System.Threading.Thread\"></xref>."},{"pos":[392,3501],"content":"When a managed thread is created, the method that executes on the thread is represented by:      -   A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> constructor.  Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.      -   A ParameterizedThreadStart delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> constructor. Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.       The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called. The <xref:System.Threading.ThreadStart> or ParameterizedThreadStart delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate. In the case of the ParameterizedThreadStart delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.      > [!NOTE] >  Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or ParameterizedThreadStart delegate constructor when creating a thread. In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.      > [!NOTE] >  When you create a ParameterizedThreadStart delegate for an instance method in C++, the first parameter of the constructor is the instance variable. For a static method, the first parameter of the constructor is zero. For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.       The ParameterizedThreadStart delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see [Creating Threads and Passing Data at Start Time](~/add/includes/ajax-current-ext-md.md).       The ParameterizedThreadStart delegate supports only a single parameter. You can pass multiple data items to the ParameterizedThreadStart by making that parameter one of the following:      -   An array.      -   A collection type, if all of the data items are of the same type.      -   A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a managed thread is created, the method that executes on the thread is represented by:      -   A &lt;xref:System.Threading.ThreadStart&gt; delegate that is passed to the &lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName&gt; constructor.","pos":[0,280],"source":"When a managed thread is created, the method that executes on the thread is represented by:      -   A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> constructor."},{"content":"Any method that has no parameters and that returns <ph id=\"ph1\">`void`</ph> in C# or is a <ph id=\"ph2\">`Sub`</ph> procedure in Visual Basic can represent the delegate.","pos":[282,413],"source":"  Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate."},{"content":"-   A ParameterizedThreadStart delegate that is passed to the &lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName&gt; constructor.","pos":[419,619],"source":"      -   A ParameterizedThreadStart delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> constructor."},{"content":"Any method that has a single parameter of type &lt;xref:System.Object&gt; and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.","pos":[620,781],"source":" Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate."},{"content":"The thread does not begin executing until the &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method is called.","pos":[788,916],"source":"       The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called."},{"content":"The &lt;xref:System.Threading.ThreadStart&gt; or ParameterizedThreadStart delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.","pos":[917,1101],"source":" The <xref:System.Threading.ThreadStart> or ParameterizedThreadStart delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate."},{"content":"In the case of the ParameterizedThreadStart delegate, the object that is passed to the &lt;xref:System.Threading.Thread.Start%28System.Object%29&gt; method is passed to the delegate.","pos":[1102,1278],"source":" In the case of the ParameterizedThreadStart delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Visual Basic and C# users can omit the &lt;xref:System.Threading.ThreadStart&gt; or ParameterizedThreadStart delegate constructor when creating a thread.","pos":[1284,1444],"source":"      > [!NOTE] >  Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or ParameterizedThreadStart delegate constructor when creating a thread."},{"content":"In Visual Basic, use the <ph id=\"ph1\">`AddressOf`</ph> operator when passing your method to the &lt;xref:System.Threading.Thread.%23ctor%2A&gt; constructor; for example, <ph id=\"ph2\">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.","pos":[1445,1635],"source":" In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`."},{"content":"In C#, simply specify the name of the thread procedure.","pos":[1636,1691]},{"content":"The compiler selects the correct delegate constructor.","pos":[1692,1746]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When you create a ParameterizedThreadStart delegate for an instance method in C++, the first parameter of the constructor is the instance variable.","pos":[1752,1912],"source":"      > [!NOTE] >  When you create a ParameterizedThreadStart delegate for an instance method in C++, the first parameter of the constructor is the instance variable."},{"content":"For a static method, the first parameter of the constructor is zero.","pos":[1913,1981]},{"content":"For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.","pos":[1982,2121]},{"content":"The ParameterizedThreadStart delegate and the &lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt; method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to &lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt;.","pos":[2128,2473],"source":"       The ParameterizedThreadStart delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>."},{"content":"A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.","pos":[2474,2604]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Creating Threads and Passing Data at Start Time<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2605,2720],"source":" For more information, see [Creating Threads and Passing Data at Start Time](~/add/includes/ajax-current-ext-md.md)."},{"content":"The ParameterizedThreadStart delegate supports only a single parameter.","pos":[2727,2798]},{"content":"You can pass multiple data items to the ParameterizedThreadStart by making that parameter one of the following:      -   An array.","pos":[2799,2929]},{"content":"-   A collection type, if all of the data items are of the same type.","pos":[2935,3004]},{"content":"-   A tuple type, such as &lt;xref:System.Tuple%602&gt; or &lt;xref:System.Tuple%604&gt;.","pos":[3010,3087],"source":"      -   A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ParameterizedThreadStart\n  id: ParameterizedThreadStart\n  langs:\n  - csharp\n  name: ParameterizedThreadStart\n  nameWithType: ParameterizedThreadStart\n  fullName: System.Threading.ParameterizedThreadStart\n  type: Delegate\n  summary: Represents the method that executes on a <xref href=\"System.Threading.Thread\"></xref>.\n  remarks: \"When a managed thread is created, the method that executes on the thread is represented by:  \\n  \\n-   A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> constructor.  Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.  \\n  \\n-   A ParameterizedThreadStart delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> constructor. Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.  \\n  \\n The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called. The <xref:System.Threading.ThreadStart> or ParameterizedThreadStart delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate. In the case of the ParameterizedThreadStart delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.  \\n  \\n> [!NOTE]\\n>  Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or ParameterizedThreadStart delegate constructor when creating a thread. In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.  \\n  \\n> [!NOTE]\\n>  When you create a ParameterizedThreadStart delegate for an instance method in C++, the first parameter of the constructor is the instance variable. For a static method, the first parameter of the constructor is zero. For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.  \\n  \\n The ParameterizedThreadStart delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see [Creating Threads and Passing Data at Start Time](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The ParameterizedThreadStart delegate supports only a single parameter. You can pass multiple data items to the ParameterizedThreadStart by making that parameter one of the following:  \\n  \\n-   An array.  \\n  \\n-   A collection type, if all of the data items are of the same type.  \\n  \\n-   A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.\"\n  example:\n  - \"The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \\n  \\n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public delegate void ParameterizedThreadStart(object obj);\n  inheritance:\n  - System.Delegate\n  platform:\n  - net462\nreferences:\n- uid: System.Delegate\n  isExternal: false\n  name: System.Delegate\n"}