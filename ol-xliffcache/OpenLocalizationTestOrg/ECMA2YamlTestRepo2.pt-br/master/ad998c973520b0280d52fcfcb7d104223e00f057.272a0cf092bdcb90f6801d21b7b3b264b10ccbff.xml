{"nodes":[{"pos":[616,657],"content":"Defines the interface for a message sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the interface for a message sink.","pos":[0,41]}]},{"pos":[670,2099],"content":"When a method call is made on the proxy, the remoting infrastructure provides the necessary support for passing the arguments to the actual object across the remoting boundaries, calling the actual object method with the arguments, and returning the results back to the client of the proxy object.       A remote method call is a message that goes from the client end to the server end and possibly back again. As it crosses remoting boundaries on the way, the remote method call passes through a chain of `IMessageSink` objects. Each sink in the chain receives the message object, performs a specific operation, and delegates to the next sink in the chain. The proxy object contains a reference to the first `IMessageSink` it needs to use to start off the chain.       For asynchronous calls, at the time of delegation, each sink provides a reply sink (another `IMessageSink`) that will be called by the next sink when the reply is on its way back.       Different types of sinks perform different operations, depending on the type of message object received. For example, one sink could cause a lock to be taken, another could enforce call security, another could perform flow call control and reliability services, and yet another could transport the call to a different <xref:System.AppDomain>, process, or computer. Two or more message sinks in the chain can interact with each other in regard to each specific action.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a method call is made on the proxy, the remoting infrastructure provides the necessary support for passing the arguments to the actual object across the remoting boundaries, calling the actual object method with the arguments, and returning the results back to the client of the proxy object.","pos":[0,297]},{"content":"A remote method call is a message that goes from the client end to the server end and possibly back again.","pos":[304,410]},{"content":"As it crosses remoting boundaries on the way, the remote method call passes through a chain of <ph id=\"ph1\">`IMessageSink`</ph> objects.","pos":[411,529],"source":" As it crosses remoting boundaries on the way, the remote method call passes through a chain of `IMessageSink` objects."},{"content":"Each sink in the chain receives the message object, performs a specific operation, and delegates to the next sink in the chain.","pos":[530,657]},{"content":"The proxy object contains a reference to the first <ph id=\"ph1\">`IMessageSink`</ph> it needs to use to start off the chain.","pos":[658,763],"source":" The proxy object contains a reference to the first `IMessageSink` it needs to use to start off the chain."},{"content":"For asynchronous calls, at the time of delegation, each sink provides a reply sink (another <ph id=\"ph1\">`IMessageSink`</ph>) that will be called by the next sink when the reply is on its way back.","pos":[770,949],"source":"       For asynchronous calls, at the time of delegation, each sink provides a reply sink (another `IMessageSink`) that will be called by the next sink when the reply is on its way back."},{"content":"Different types of sinks perform different operations, depending on the type of message object received.","pos":[956,1060]},{"content":"For example, one sink could cause a lock to be taken, another could enforce call security, another could perform flow call control and reliability services, and yet another could transport the call to a different &lt;xref:System.AppDomain&gt;, process, or computer.","pos":[1061,1320],"source":" For example, one sink could cause a lock to be taken, another could enforce call security, another could perform flow call control and reliability services, and yet another could transport the call to a different <xref:System.AppDomain>, process, or computer."},{"content":"Two or more message sinks in the chain can interact with each other in regard to each specific action.","pos":[1321,1423]}]},{"pos":[3458,3501],"content":"Asynchronously processes the given message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously processes the given message.","pos":[0,43]}]},{"pos":[3513,3635],"content":"This method is invoked on the message sink by the remoting infrastructure or by a previous sink for asynchronous messages.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is invoked on the message sink by the remoting infrastructure or by a previous sink for asynchronous messages.","pos":[0,122]}]},{"pos":[3945,3968],"content":"The message to process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message to process.","pos":[0,23]}]},{"pos":[4067,4104],"content":"The reply sink for the reply message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reply sink for the reply message.","pos":[0,37]}]},{"pos":[4195,4369],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface that provides a way to control asynchronous messages after they have been dispatched.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"></xref> interface that provides a way to control asynchronous messages after they have been dispatched."},{"pos":[4576,4693],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[5097,5142],"content":"Gets the next message sink in the sink chain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the next message sink in the sink chain.","pos":[0,45]}]},{"pos":[5328,5368],"content":"The next message sink in the sink chain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The next message sink in the sink chain.","pos":[0,40]}]},{"pos":[5564,5681],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]},{"pos":[6251,6293],"content":"Synchronously processes the given message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Synchronously processes the given message.","pos":[0,42]}]},{"pos":[6305,6444],"content":"The SyncProcessMessage method is invoked on the message sink by the remoting infrastructure or by a previous sink for synchronous messages.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SyncProcessMessage method is invoked on the message sink by the remoting infrastructure or by a previous sink for synchronous messages.","pos":[0,139]}]},{"pos":[6691,6714],"content":"The message to process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message to process.","pos":[0,23]}]},{"pos":[6801,6844],"content":"A reply message in response to the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reply message in response to the request.","pos":[0,43]}]},{"pos":[7050,7167],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Messaging.IMessageSink\n  id: IMessageSink\n  children:\n  - System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)\n  - System.Runtime.Remoting.Messaging.IMessageSink.NextSink\n  - System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)\n  langs:\n  - csharp\n  name: IMessageSink\n  nameWithType: IMessageSink\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink\n  type: Interface\n  summary: Defines the interface for a message sink.\n  remarks: \"When a method call is made on the proxy, the remoting infrastructure provides the necessary support for passing the arguments to the actual object across the remoting boundaries, calling the actual object method with the arguments, and returning the results back to the client of the proxy object.  \\n  \\n A remote method call is a message that goes from the client end to the server end and possibly back again. As it crosses remoting boundaries on the way, the remote method call passes through a chain of `IMessageSink` objects. Each sink in the chain receives the message object, performs a specific operation, and delegates to the next sink in the chain. The proxy object contains a reference to the first `IMessageSink` it needs to use to start off the chain.  \\n  \\n For asynchronous calls, at the time of delegation, each sink provides a reply sink (another `IMessageSink`) that will be called by the next sink when the reply is on its way back.  \\n  \\n Different types of sinks perform different operations, depending on the type of message object received. For example, one sink could cause a lock to be taken, another could enforce call security, another could perform flow call control and reliability services, and yet another could transport the call to a different <xref:System.AppDomain>, process, or computer. Two or more message sinks in the chain can interact with each other in regard to each specific action.\"\n  example:\n  - \"The following code example shows the implementation of the IMessageSink interface. Note that the sample assumes type definitions and assembly references that must be provided for the sample to compile.  \\n  \\n [!code-cs[IMessageSink_Client#3](~/add/codesnippet/csharp/t-system.runtime.remotin_40_1.cs)]\\n [!code-vb[IMessageSink_Client#3](~/add/codesnippet/visualbasic/t-system.runtime.remotin_40_1.vb)]\\n [!code-cpp[IMessageSink_Client#3](~/add/codesnippet/cpp/t-system.runtime.remotin_40_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IMessageSink\n  implements: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)\n  id: AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  langs:\n  - csharp\n  name: AsyncProcessMessage(IMessage,IMessageSink)\n  nameWithType: IMessageSink.AsyncProcessMessage(IMessage,IMessageSink)\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(IMessage,IMessageSink)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Asynchronously processes the given message.\n  remarks: This method is invoked on the message sink by the remoting infrastructure or by a previous sink for asynchronous messages.\n  syntax:\n    content: public System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);\n    parameters:\n    - id: msg\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: The message to process.\n    - id: replySink\n      type: System.Runtime.Remoting.Messaging.IMessageSink\n      description: The reply sink for the reply message.\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessageCtrl\n      description: Returns an <xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"></xref> interface that provides a way to control asynchronous messages after they have been dispatched.\n  overload: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.NextSink\n  id: NextSink\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  langs:\n  - csharp\n  name: NextSink\n  nameWithType: IMessageSink.NextSink\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink.NextSink\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the next message sink in the sink chain.\n  syntax:\n    content: public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessageSink\n      description: The next message sink in the sink chain.\n  overload: System.Runtime.Remoting.Messaging.IMessageSink.NextSink*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)\n  id: SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  langs:\n  - csharp\n  name: SyncProcessMessage(IMessage)\n  nameWithType: IMessageSink.SyncProcessMessage(IMessage)\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(IMessage)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Synchronously processes the given message.\n  remarks: The SyncProcessMessage method is invoked on the message sink by the remoting infrastructure or by a previous sink for synchronous messages.\n  syntax:\n    content: public System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);\n    parameters:\n    - id: msg\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: The message to process.\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: A reply message in response to the request.\n  overload: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  isExternal: false\n  name: AsyncProcessMessage(IMessage,IMessageSink)\n  nameWithType: IMessageSink.AsyncProcessMessage(IMessage,IMessageSink)\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(IMessage,IMessageSink)\n- uid: System.Runtime.Remoting.Messaging.IMessageCtrl\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessageCtrl\n  nameWithType: IMessageCtrl\n  fullName: System.Runtime.Remoting.Messaging.IMessageCtrl\n- uid: System.Runtime.Remoting.Messaging.IMessage\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessage\n  nameWithType: IMessage\n  fullName: System.Runtime.Remoting.Messaging.IMessage\n- uid: System.Runtime.Remoting.Messaging.IMessageSink\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessageSink\n  nameWithType: IMessageSink\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.NextSink\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  isExternal: false\n  name: NextSink\n  nameWithType: IMessageSink.NextSink\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink.NextSink\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  isExternal: false\n  name: SyncProcessMessage(IMessage)\n  nameWithType: IMessageSink.SyncProcessMessage(IMessage)\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(IMessage)\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage*\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  isExternal: false\n  name: AsyncProcessMessage\n  nameWithType: IMessageSink.AsyncProcessMessage\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.NextSink*\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  isExternal: false\n  name: NextSink\n  nameWithType: IMessageSink.NextSink\n- uid: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage*\n  parent: System.Runtime.Remoting.Messaging.IMessageSink\n  isExternal: false\n  name: SyncProcessMessage\n  nameWithType: IMessageSink.SyncProcessMessage\n"}