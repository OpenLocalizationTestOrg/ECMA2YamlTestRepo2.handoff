{"nodes":[{"pos":[668,747],"content":"Represents a set of eviction and expiration details for a specific cache entry.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a set of eviction and expiration details for a specific cache entry.","pos":[0,79]}]},{"pos":[760,1507],"content":"A CacheItemPolicy instance contains information that can be associated with a cache entry. For example, when a cache entry is about to be removed from the cache, a <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object is passed to a callback method. The <xref:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy%2A> property of the <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object can pass a reference to a CacheItemPolicy instance that can include eviction and expiration details about the cache entry.       Some methods in the <xref:System.Runtime.Caching.MemoryCache> and <xref:System.Runtime.Caching.ObjectCache> classes accept a CacheItemPolicy instance to describe eviction or expiration policy.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A CacheItemPolicy instance contains information that can be associated with a cache entry. For example, when a cache entry is about to be removed from the cache, a <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object is passed to a callback method. The <xref:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy%2A> property of the <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object can pass a reference to a CacheItemPolicy instance that can include eviction and expiration details about the cache entry.       Some methods in the <xref:System.Runtime.Caching.MemoryCache> and <xref:System.Runtime.Caching.ObjectCache> classes accept a CacheItemPolicy instance to describe eviction or expiration policy.","pos":[0,745],"nodes":[{"content":"A CacheItemPolicy instance contains information that can be associated with a cache entry.","pos":[0,90]},{"content":"For example, when a cache entry is about to be removed from the cache, a &lt;xref:System.Runtime.Caching.CacheEntryUpdateArguments&gt; object is passed to a callback method.","pos":[91,258],"source":" For example, when a cache entry is about to be removed from the cache, a <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object is passed to a callback method."},{"content":"The &lt;xref:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy%2A&gt; property of the &lt;xref:System.Runtime.Caching.CacheEntryUpdateArguments&gt; object can pass a reference to a CacheItemPolicy instance that can include eviction and expiration details about the cache entry.","pos":[259,546],"source":" The <xref:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy%2A> property of the <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object can pass a reference to a CacheItemPolicy instance that can include eviction and expiration details about the cache entry."},{"content":"Some methods in the &lt;xref:System.Runtime.Caching.MemoryCache&gt; and &lt;xref:System.Runtime.Caching.ObjectCache&gt; classes accept a CacheItemPolicy instance to describe eviction or expiration policy.","pos":[553,745],"source":"       Some methods in the <xref:System.Runtime.Caching.MemoryCache> and <xref:System.Runtime.Caching.ObjectCache> classes accept a CacheItemPolicy instance to describe eviction or expiration policy."}]}]},{"pos":[4395,4495],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.CacheItemPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Caching.CacheItemPolicy\"></xref> class."},{"pos":[5075,5178],"content":"Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.","pos":[0,103]}]},{"pos":[5322,5533],"content":"The period of time that must pass before a cache entry is evicted. The default value is <xref href=\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\"></xref>, meaning that the entry does not expire.","needQuote":true,"needEscape":true,"nodes":[{"content":"The period of time that must pass before a cache entry is evicted.","pos":[0,66]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, meaning that the entry does not expire.","pos":[67,211],"source":" The default value is <xref href=\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\"></xref>, meaning that the entry does not expire."}]},{"pos":[6037,6163],"content":"Gets a collection of <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.ChangeMonitor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that are associated with a cache entry.","needQuote":true,"needEscape":true,"source":"Gets a collection of <xref href=\"System.Runtime.Caching.ChangeMonitor\"></xref> objects that are associated with a cache entry."},{"pos":[6175,6715],"content":"You can add to or remove change monitors that are associated with a cache entry. However, the set of change monitors must be complete before you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance to an <xref:System.Runtime.Caching.ObjectCache> implementation. If you change the set of change monitors on a <xref:System.Runtime.Caching.CacheItemPolicy> object after the <xref:System.Runtime.Caching.CacheItemPolicy> object has been passed to an <xref:System.Runtime.Caching.ObjectCache> implementation, the changes have no effect.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can add to or remove change monitors that are associated with a cache entry. However, the set of change monitors must be complete before you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance to an <xref:System.Runtime.Caching.ObjectCache> implementation. If you change the set of change monitors on a <xref:System.Runtime.Caching.CacheItemPolicy> object after the <xref:System.Runtime.Caching.CacheItemPolicy> object has been passed to an <xref:System.Runtime.Caching.ObjectCache> implementation, the changes have no effect.","pos":[0,540],"nodes":[{"content":"You can add to or remove change monitors that are associated with a cache entry.","pos":[0,80]},{"content":"However, the set of change monitors must be complete before you pass a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; instance to an &lt;xref:System.Runtime.Caching.ObjectCache&gt; implementation.","pos":[81,270],"source":" However, the set of change monitors must be complete before you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance to an <xref:System.Runtime.Caching.ObjectCache> implementation."},{"content":"If you change the set of change monitors on a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; object after the &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; object has been passed to an &lt;xref:System.Runtime.Caching.ObjectCache&gt; implementation, the changes have no effect.","pos":[271,540],"source":" If you change the set of change monitors on a <xref:System.Runtime.Caching.CacheItemPolicy> object after the <xref:System.Runtime.Caching.CacheItemPolicy> object has been passed to an <xref:System.Runtime.Caching.ObjectCache> implementation, the changes have no effect."}]}]},{"pos":[6973,7041],"content":"A collection of change monitors. The default is an empty collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of change monitors. The default is an empty collection.","pos":[0,68],"nodes":[{"content":"A collection of change monitors.","pos":[0,32]},{"content":"The default is an empty collection.","pos":[33,68]}]}]},{"pos":[7511,7600],"content":"Gets or sets a priority setting that is used to determine whether to evict a cache entry.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a priority setting that is used to determine whether to evict a cache entry.","pos":[0,89]}]},{"pos":[7613,8393],"content":"In ASP.NET, the priority enumeration only has two possible priorities: <xref:System.Runtime.Caching.CacheItemPriority> (which means no priority), and <xref:System.Runtime.Caching.CacheItemPriority> (which means the entry cannot be removed). Therefore, the only priority that can be set is whether a cache entry should remain in the cache forever.      > [!IMPORTANT] >  Adding an entry to the cache with a priority level of <xref:System.Runtime.Caching.CacheItemPriority> can cause the cache to overflow with entries that can never be removed. Cache implementations should set the <xref:System.Runtime.Caching.CacheItemPriority> priority for a cache entry only if the cache implementation provides ways to evict entries from the cache and to manage the number of cache entries.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In ASP.NET, the priority enumeration only has two possible priorities: &lt;xref:System.Runtime.Caching.CacheItemPriority&gt; (which means no priority), and &lt;xref:System.Runtime.Caching.CacheItemPriority&gt; (which means the entry cannot be removed).","pos":[0,240],"source":"In ASP.NET, the priority enumeration only has two possible priorities: <xref:System.Runtime.Caching.CacheItemPriority> (which means no priority), and <xref:System.Runtime.Caching.CacheItemPriority> (which means the entry cannot be removed)."},{"content":"Therefore, the only priority that can be set is whether a cache entry should remain in the cache forever.","pos":[241,346]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Adding an entry to the cache with a priority level of &lt;xref:System.Runtime.Caching.CacheItemPriority&gt; can cause the cache to overflow with entries that can never be removed.","pos":[352,543],"source":"      > [!IMPORTANT] >  Adding an entry to the cache with a priority level of <xref:System.Runtime.Caching.CacheItemPriority> can cause the cache to overflow with entries that can never be removed."},{"content":"Cache implementations should set the &lt;xref:System.Runtime.Caching.CacheItemPriority&gt; priority for a cache entry only if the cache implementation provides ways to evict entries from the cache and to manage the number of cache entries.","pos":[544,777],"source":" Cache implementations should set the <xref:System.Runtime.Caching.CacheItemPriority> priority for a cache entry only if the cache implementation provides ways to evict entries from the cache and to manage the number of cache entries."}]},{"pos":[8573,8762],"content":"One of the enumeration values that indicates the priority for eviction. The default priority value is <xref href=\"System.Runtime.Caching.CacheItemPriority\"></xref>, which means no priority.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that indicates the priority for eviction.","pos":[0,71]},{"content":"The default priority value is <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.CacheItemPriority\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which means no priority.","pos":[72,189],"source":" The default priority value is <xref href=\"System.Runtime.Caching.CacheItemPriority\"></xref>, which means no priority."}]},{"pos":[9261,9426],"content":"Gets or sets a reference to a <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.CacheEntryRemovedCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that is called after an entry is removed from the cache.","needQuote":true,"needEscape":true,"source":"Gets or sets a reference to a <xref href=\"System.Runtime.Caching.CacheEntryRemovedCallback\"></xref> delegate that is called after an entry is removed from the cache."},{"pos":[9438,9691],"content":"After a cache entry has been removed from the cache, the cache invokes the callback object that is referenced by the RemovedCallback property. A cache implementation can use this callback to notify the calling method that a cache entry has been removed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"After a cache entry has been removed from the cache, the cache invokes the callback object that is referenced by the RemovedCallback property. A cache implementation can use this callback to notify the calling method that a cache entry has been removed.","pos":[0,253],"nodes":[{"content":"After a cache entry has been removed from the cache, the cache invokes the callback object that is referenced by the RemovedCallback property.","pos":[0,142]},{"content":"A cache implementation can use this callback to notify the calling method that a cache entry has been removed.","pos":[143,253]}]}]},{"pos":[9893,9960],"content":"A reference to a delegate that is called by a cache implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a delegate that is called by a cache implementation.","pos":[0,67]}]},{"pos":[10476,10604],"content":"Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.","pos":[0,128]}]},{"pos":[10735,11001],"content":"A span of time within which a cache entry must be accessed before the cache entry is evicted from the cache. The default is <xref href=\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\"></xref>, meaning that the item should not be expired based on a time span.","needQuote":true,"needEscape":true,"nodes":[{"content":"A span of time within which a cache entry must be accessed before the cache entry is evicted from the cache.","pos":[0,108]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, meaning that the item should not be expired based on a time span.","pos":[109,266],"source":" The default is <xref href=\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\"></xref>, meaning that the item should not be expired based on a time span."}]},{"pos":[11504,11674],"content":"Gets or sets a reference to a <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.CacheEntryUpdateCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that is called before a cache entry is removed from the cache.","needQuote":true,"needEscape":true,"source":"Gets or sets a reference to a <xref href=\"System.Runtime.Caching.CacheEntryUpdateCallback\"></xref> delegate that is called before a cache entry is removed from the cache."},{"pos":[11873,11940],"content":"A reference to a delegate that is called by a cache implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a delegate that is called by a cache implementation.","pos":[0,67]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Caching.CacheItemPolicy\n  id: CacheItemPolicy\n  children:\n  - System.Runtime.Caching.CacheItemPolicy.#ctor\n  - System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration\n  - System.Runtime.Caching.CacheItemPolicy.ChangeMonitors\n  - System.Runtime.Caching.CacheItemPolicy.Priority\n  - System.Runtime.Caching.CacheItemPolicy.RemovedCallback\n  - System.Runtime.Caching.CacheItemPolicy.SlidingExpiration\n  - System.Runtime.Caching.CacheItemPolicy.UpdateCallback\n  langs:\n  - csharp\n  name: CacheItemPolicy\n  nameWithType: CacheItemPolicy\n  fullName: System.Runtime.Caching.CacheItemPolicy\n  type: Class\n  summary: Represents a set of eviction and expiration details for a specific cache entry.\n  remarks: \"A CacheItemPolicy instance contains information that can be associated with a cache entry. For example, when a cache entry is about to be removed from the cache, a <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object is passed to a callback method. The <xref:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy%2A> property of the <xref:System.Runtime.Caching.CacheEntryUpdateArguments> object can pass a reference to a CacheItemPolicy instance that can include eviction and expiration details about the cache entry.  \\n  \\n Some methods in the <xref:System.Runtime.Caching.MemoryCache> and <xref:System.Runtime.Caching.ObjectCache> classes accept a CacheItemPolicy instance to describe eviction or expiration policy.\"\n  example:\n  - \"The following example shows how to create an in-memory cache item that monitors the path for a text file. The cache creates a CacheItemPolicy object and sets the <xref:System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration%2A> property to evict the cache after 60 seconds.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nProtected Sub Button1_Click(ByVal sender As Object, _  \\n            ByVal e As System.EventArgs) Handles Button1.Click  \\n    Dim cache As ObjectCache = MemoryCache.Default  \\n    Dim fileContents As String = TryCast(cache(\\\"filecontents\\\"), _  \\n            String)  \\n    If fileContents Is Nothing Then  \\n        Dim policy As New CacheItemPolicy()  \\n        policy.AbsoluteExpiration = _  \\n            DateTimeOffset.Now.AddSeconds(60.0)  \\n        Dim filePaths As New List(Of String)()  \\n     Dim cachedFilePath As String = Server.MapPath(\\\"~\\\") & _  \\n         \\\"\\\\cacheText.txt\\\"  \\n        filePaths.Add(cachedFilePath)  \\n        policy.ChangeMonitors.Add(New _  \\n            HostFileChangeMonitor(filePaths))  \\n  \\n        ' Fetch the file contents.  \\n        fileContents = File.ReadAllText(cachedFilePath)  \\n        cache.Set(\\\"filecontents\\\", fileContents, policy)  \\n    End If  \\n    Label1.Text = fileContents  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\nprotected void Button1_Click(object sender, EventArgs e)  \\n    {  \\n        ObjectCache cache = MemoryCache.Default;  \\n            string fileContents = cache[\\\"filecontents\\\"] as string;  \\n            if (fileContents == null)  \\n            {  \\n                CacheItemPolicy policy = new CacheItemPolicy();  \\n                policy.AbsoluteExpiration =   \\n                    DateTimeOffset.Now.AddSeconds(60.0);  \\n  \\n                List<string> filePaths = new List<string>();  \\n             string cachedFilePath = Server.MapPath(\\\"~\\\") +   \\n                 \\\"\\\\\\\\cacheText.txt\\\";  \\n             filePaths.Add(cachedFilePath);  \\n  \\n                policy.ChangeMonitors.Add(new   \\n                    HostFileChangeMonitor(filePaths));  \\n  \\n                // Fetch the file contents.  \\n                fileContents = File.ReadAllText(cachedFilePath);  \\n  \\n                cache.Set(\\\"filecontents\\\", fileContents, policy);  \\n  \\n            }  \\n  \\n            Label1.Text = fileContents;  \\n        }  \\n```\"\n  syntax:\n    content: public class CacheItemPolicy\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.CacheItemPolicy.#ctor\n  id: '#ctor'\n  parent: System.Runtime.Caching.CacheItemPolicy\n  langs:\n  - csharp\n  name: CacheItemPolicy()\n  nameWithType: CacheItemPolicy.CacheItemPolicy()\n  fullName: System.Runtime.Caching.CacheItemPolicy.CacheItemPolicy()\n  type: Constructor\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Caching.CacheItemPolicy\"></xref> class.\n  syntax:\n    content: public CacheItemPolicy ();\n    parameters: []\n  overload: System.Runtime.Caching.CacheItemPolicy.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration\n  id: AbsoluteExpiration\n  parent: System.Runtime.Caching.CacheItemPolicy\n  langs:\n  - csharp\n  name: AbsoluteExpiration\n  nameWithType: CacheItemPolicy.AbsoluteExpiration\n  fullName: System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.\n  syntax:\n    content: public DateTimeOffset AbsoluteExpiration { get; set; }\n    return:\n      type: System.DateTimeOffset\n      description: The period of time that must pass before a cache entry is evicted. The default value is <xref href=\"System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration\"></xref>, meaning that the entry does not expire.\n  overload: System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.CacheItemPolicy.ChangeMonitors\n  id: ChangeMonitors\n  parent: System.Runtime.Caching.CacheItemPolicy\n  langs:\n  - csharp\n  name: ChangeMonitors\n  nameWithType: CacheItemPolicy.ChangeMonitors\n  fullName: System.Runtime.Caching.CacheItemPolicy.ChangeMonitors\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets a collection of <xref href=\"System.Runtime.Caching.ChangeMonitor\"></xref> objects that are associated with a cache entry.\n  remarks: You can add to or remove change monitors that are associated with a cache entry. However, the set of change monitors must be complete before you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance to an <xref:System.Runtime.Caching.ObjectCache> implementation. If you change the set of change monitors on a <xref:System.Runtime.Caching.CacheItemPolicy> object after the <xref:System.Runtime.Caching.CacheItemPolicy> object has been passed to an <xref:System.Runtime.Caching.ObjectCache> implementation, the changes have no effect.\n  syntax:\n    content: public System.Collections.ObjectModel.Collection<System.Runtime.Caching.ChangeMonitor> ChangeMonitors { get; }\n    return:\n      type: System.Collections.ObjectModel.Collection{System.Runtime.Caching.ChangeMonitor}\n      description: A collection of change monitors. The default is an empty collection.\n  overload: System.Runtime.Caching.CacheItemPolicy.ChangeMonitors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.CacheItemPolicy.Priority\n  id: Priority\n  parent: System.Runtime.Caching.CacheItemPolicy\n  langs:\n  - csharp\n  name: Priority\n  nameWithType: CacheItemPolicy.Priority\n  fullName: System.Runtime.Caching.CacheItemPolicy.Priority\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets or sets a priority setting that is used to determine whether to evict a cache entry.\n  remarks: \"In ASP.NET, the priority enumeration only has two possible priorities: <xref:System.Runtime.Caching.CacheItemPriority> (which means no priority), and <xref:System.Runtime.Caching.CacheItemPriority> (which means the entry cannot be removed). Therefore, the only priority that can be set is whether a cache entry should remain in the cache forever.  \\n  \\n> [!IMPORTANT]\\n>  Adding an entry to the cache with a priority level of <xref:System.Runtime.Caching.CacheItemPriority> can cause the cache to overflow with entries that can never be removed. Cache implementations should set the <xref:System.Runtime.Caching.CacheItemPriority> priority for a cache entry only if the cache implementation provides ways to evict entries from the cache and to manage the number of cache entries.\"\n  syntax:\n    content: public System.Runtime.Caching.CacheItemPriority Priority { get; set; }\n    return:\n      type: System.Runtime.Caching.CacheItemPriority\n      description: One of the enumeration values that indicates the priority for eviction. The default priority value is <xref href=\"System.Runtime.Caching.CacheItemPriority\"></xref>, which means no priority.\n  overload: System.Runtime.Caching.CacheItemPolicy.Priority*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.CacheItemPolicy.RemovedCallback\n  id: RemovedCallback\n  parent: System.Runtime.Caching.CacheItemPolicy\n  langs:\n  - csharp\n  name: RemovedCallback\n  nameWithType: CacheItemPolicy.RemovedCallback\n  fullName: System.Runtime.Caching.CacheItemPolicy.RemovedCallback\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets or sets a reference to a <xref href=\"System.Runtime.Caching.CacheEntryRemovedCallback\"></xref> delegate that is called after an entry is removed from the cache.\n  remarks: After a cache entry has been removed from the cache, the cache invokes the callback object that is referenced by the RemovedCallback property. A cache implementation can use this callback to notify the calling method that a cache entry has been removed.\n  syntax:\n    content: public System.Runtime.Caching.CacheEntryRemovedCallback RemovedCallback { get; set; }\n    return:\n      type: System.Runtime.Caching.CacheEntryRemovedCallback\n      description: A reference to a delegate that is called by a cache implementation.\n  overload: System.Runtime.Caching.CacheItemPolicy.RemovedCallback*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.CacheItemPolicy.SlidingExpiration\n  id: SlidingExpiration\n  parent: System.Runtime.Caching.CacheItemPolicy\n  langs:\n  - csharp\n  name: SlidingExpiration\n  nameWithType: CacheItemPolicy.SlidingExpiration\n  fullName: System.Runtime.Caching.CacheItemPolicy.SlidingExpiration\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.\n  syntax:\n    content: public TimeSpan SlidingExpiration { get; set; }\n    return:\n      type: System.TimeSpan\n      description: A span of time within which a cache entry must be accessed before the cache entry is evicted from the cache. The default is <xref href=\"System.Runtime.Caching.ObjectCache.NoSlidingExpiration\"></xref>, meaning that the item should not be expired based on a time span.\n  overload: System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.CacheItemPolicy.UpdateCallback\n  id: UpdateCallback\n  parent: System.Runtime.Caching.CacheItemPolicy\n  langs:\n  - csharp\n  name: UpdateCallback\n  nameWithType: CacheItemPolicy.UpdateCallback\n  fullName: System.Runtime.Caching.CacheItemPolicy.UpdateCallback\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets or sets a reference to a <xref href=\"System.Runtime.Caching.CacheEntryUpdateCallback\"></xref> delegate that is called before a cache entry is removed from the cache.\n  syntax:\n    content: public System.Runtime.Caching.CacheEntryUpdateCallback UpdateCallback { get; set; }\n    return:\n      type: System.Runtime.Caching.CacheEntryUpdateCallback\n      description: A reference to a delegate that is called by a cache implementation.\n  overload: System.Runtime.Caching.CacheItemPolicy.UpdateCallback*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Runtime.Caching.CacheItemPolicy.#ctor\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: CacheItemPolicy()\n  nameWithType: CacheItemPolicy.CacheItemPolicy()\n  fullName: System.Runtime.Caching.CacheItemPolicy.CacheItemPolicy()\n- uid: System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: AbsoluteExpiration\n  nameWithType: CacheItemPolicy.AbsoluteExpiration\n  fullName: System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: true\n  name: DateTimeOffset\n  nameWithType: DateTimeOffset\n  fullName: System.DateTimeOffset\n- uid: System.Runtime.Caching.CacheItemPolicy.ChangeMonitors\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: ChangeMonitors\n  nameWithType: CacheItemPolicy.ChangeMonitors\n  fullName: System.Runtime.Caching.CacheItemPolicy.ChangeMonitors\n- uid: System.Collections.ObjectModel.Collection{System.Runtime.Caching.ChangeMonitor}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: Collection<ChangeMonitor>\n  nameWithType: Collection<ChangeMonitor>\n  fullName: System.Collections.ObjectModel.Collection<System.Runtime.Caching.ChangeMonitor>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.Collection`1\n    name: Collection\n    nameWithType: Collection\n    fullName: Collection<System.Runtime.Caching.ChangeMonitor>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Runtime.Caching.ChangeMonitor\n    name: ChangeMonitor\n    nameWithType: ChangeMonitor\n    fullName: ChangeMonitor\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.Caching.CacheItemPolicy.Priority\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: Priority\n  nameWithType: CacheItemPolicy.Priority\n  fullName: System.Runtime.Caching.CacheItemPolicy.Priority\n- uid: System.Runtime.Caching.CacheItemPriority\n  parent: System.Runtime.Caching\n  isExternal: false\n  name: CacheItemPriority\n  nameWithType: CacheItemPriority\n  fullName: System.Runtime.Caching.CacheItemPriority\n- uid: System.Runtime.Caching.CacheItemPolicy.RemovedCallback\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: RemovedCallback\n  nameWithType: CacheItemPolicy.RemovedCallback\n  fullName: System.Runtime.Caching.CacheItemPolicy.RemovedCallback\n- uid: System.Runtime.Caching.CacheEntryRemovedCallback\n  parent: System.Runtime.Caching\n  isExternal: false\n  name: CacheEntryRemovedCallback\n  nameWithType: CacheEntryRemovedCallback\n  fullName: System.Runtime.Caching.CacheEntryRemovedCallback\n- uid: System.Runtime.Caching.CacheItemPolicy.SlidingExpiration\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: SlidingExpiration\n  nameWithType: CacheItemPolicy.SlidingExpiration\n  fullName: System.Runtime.Caching.CacheItemPolicy.SlidingExpiration\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Runtime.Caching.CacheItemPolicy.UpdateCallback\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: UpdateCallback\n  nameWithType: CacheItemPolicy.UpdateCallback\n  fullName: System.Runtime.Caching.CacheItemPolicy.UpdateCallback\n- uid: System.Runtime.Caching.CacheEntryUpdateCallback\n  parent: System.Runtime.Caching\n  isExternal: false\n  name: CacheEntryUpdateCallback\n  nameWithType: CacheEntryUpdateCallback\n  fullName: System.Runtime.Caching.CacheEntryUpdateCallback\n- uid: System.Runtime.Caching.CacheItemPolicy.#ctor*\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: CacheItemPolicy\n  nameWithType: CacheItemPolicy.CacheItemPolicy\n- uid: System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration*\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: AbsoluteExpiration\n  nameWithType: CacheItemPolicy.AbsoluteExpiration\n- uid: System.Runtime.Caching.CacheItemPolicy.ChangeMonitors*\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: ChangeMonitors\n  nameWithType: CacheItemPolicy.ChangeMonitors\n- uid: System.Runtime.Caching.CacheItemPolicy.Priority*\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: Priority\n  nameWithType: CacheItemPolicy.Priority\n- uid: System.Runtime.Caching.CacheItemPolicy.RemovedCallback*\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: RemovedCallback\n  nameWithType: CacheItemPolicy.RemovedCallback\n- uid: System.Runtime.Caching.CacheItemPolicy.SlidingExpiration*\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: SlidingExpiration\n  nameWithType: CacheItemPolicy.SlidingExpiration\n- uid: System.Runtime.Caching.CacheItemPolicy.UpdateCallback*\n  parent: System.Runtime.Caching.CacheItemPolicy\n  isExternal: false\n  name: UpdateCallback\n  nameWithType: CacheItemPolicy.UpdateCallback\n"}