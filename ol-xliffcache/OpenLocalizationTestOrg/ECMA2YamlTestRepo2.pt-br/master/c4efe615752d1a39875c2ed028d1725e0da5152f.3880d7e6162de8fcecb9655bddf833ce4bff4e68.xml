{"nodes":[{"pos":[812,976],"content":"Represents an SQL statement that is executed while connected to a data source, and is implemented by .NET Framework data providers that access relational databases.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an SQL statement that is executed while connected to a data source, and is implemented by .NET Framework data providers that access relational databases.","pos":[0,164]}]},{"pos":[989,1835],"content":"The IDbCommand interface enables an inheriting class to implement a Command class, which represents an SQL statement that is executed at a data source. For more information about Command classes, see [Executing a Command](~/add/includes/ajax-current-ext-md.md).       An application does not create an instance of the IDbCommand interface directly, but creates an instance of a class that inherits IDbCommand.       Classes that inherit IDbCommand must implement all inherited members, and typically define additional members to add provider-specific functionality. For example, the IDbCommand interface defines the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> method. In turn, the <xref:System.Data.SqlClient.SqlCommand> class inherits this method, and also defines the <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The IDbCommand interface enables an inheriting class to implement a Command class, which represents an SQL statement that is executed at a data source.","pos":[0,151]},{"content":"For more information about Command classes, see <bpt id=\"p1\">[</bpt>Executing a Command<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[152,261],"source":" For more information about Command classes, see [Executing a Command](~/add/includes/ajax-current-ext-md.md)."},{"content":"An application does not create an instance of the IDbCommand interface directly, but creates an instance of a class that inherits IDbCommand.","pos":[268,409]},{"content":"Classes that inherit IDbCommand must implement all inherited members, and typically define additional members to add provider-specific functionality.","pos":[416,565]},{"content":"For example, the IDbCommand interface defines the &lt;xref:System.Data.IDbCommand.ExecuteNonQuery%2A&gt; method.","pos":[566,672],"source":" For example, the IDbCommand interface defines the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> method."},{"content":"In turn, the &lt;xref:System.Data.SqlClient.SqlCommand&gt; class inherits this method, and also defines the &lt;xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A&gt; method.","pos":[673,842],"source":" In turn, the <xref:System.Data.SqlClient.SqlCommand> class inherits this method, and also defines the <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> method."}]},{"pos":[2876,2960],"content":"Attempts to cancels the execution of an <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Attempts to cancels the execution of an <xref href=\"System.Data.IDbCommand\"></xref>."},{"pos":[2972,3122],"content":"If there is nothing to cancel, nothing happens. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If there is nothing to cancel, nothing happens. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.","pos":[0,150],"nodes":[{"content":"If there is nothing to cancel, nothing happens.","pos":[0,47]},{"content":"However, if there is a command in process, and the attempt to cancel fails, no exception is generated.","pos":[48,150]}]}]},{"pos":[3573,3634],"content":"Gets or sets the text command to run against the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the text command to run against the data source.","pos":[0,61]}]},{"pos":[3646,4007],"content":"When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, set the CommandText property to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command will call this stored procedure when you call one of the Execute methods.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the &lt;xref:System.Data.IDbCommand.CommandType%2A&gt; property is set to <ph id=\"ph1\">`StoredProcedure`</ph>, set the CommandText property to the name of the stored procedure.","pos":[0,157],"source":"When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, set the CommandText property to the name of the stored procedure."},{"content":"The user may be required to use escape character syntax if the stored procedure name contains any special characters.","pos":[158,275]},{"content":"The command will call this stored procedure when you call one of the Execute methods.","pos":[276,361]}]},{"pos":[4531,4602],"content":"The text command to execute. The default value is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The text command to execute. The default value is an empty string (\"\").","pos":[0,71],"nodes":[{"content":"The text command to execute.","pos":[0,28]},{"content":"The default value is an empty string (\"\").","pos":[29,71]}]}]},{"pos":[5008,5111],"content":"Gets or sets the wait time before terminating the attempt to execute a command and generating an error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the wait time before terminating the attempt to execute a command and generating an error.","pos":[0,103]}]},{"pos":[5656,5746],"content":"The time (in seconds) to wait for the command to execute. The default value is 30 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time (in seconds) to wait for the command to execute. The default value is 30 seconds.","pos":[0,90],"nodes":[{"content":"The time (in seconds) to wait for the command to execute.","pos":[0,57]},{"content":"The default value is 30 seconds.","pos":[58,90]}]}]},{"pos":[5906,5949],"content":"The property value assigned is less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property value assigned is less than 0.","pos":[0,43]}]},{"pos":[6275,6373],"content":"Indicates or specifies how the <xref:System.Data.IDbCommand.CommandText*> property is interpreted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates or specifies how the &lt;xref:System.Data.IDbCommand.CommandText*&gt; property is interpreted.","pos":[0,98],"source":"Indicates or specifies how the <xref:System.Data.IDbCommand.CommandText*> property is interpreted."}]},{"pos":[6385,6639],"content":"When you set the CommandType property to `StoredProcedure`, you should set the <xref:System.Data.IDbCommand.CommandText%2A> property to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you set the CommandType property to <ph id=\"ph1\">`StoredProcedure`</ph>, you should set the &lt;xref:System.Data.IDbCommand.CommandText%2A&gt; property to the name of the stored procedure.","pos":[0,169],"source":"When you set the CommandType property to `StoredProcedure`, you should set the <xref:System.Data.IDbCommand.CommandText%2A> property to the name of the stored procedure."},{"content":"The command executes this stored procedure when you call one of the Execute methods.","pos":[170,254]}]},{"pos":[6787,6927],"content":"One of the <xref href=\"System.Data.CommandType\"></xref> values. The default is <xref uid=\"langword_csharp_Text\" name=\"Text\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,63],"source":"One of the <xref href=\"System.Data.CommandType\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Text\" name=\"Text\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[64,140],"source":" The default is <xref uid=\"langword_csharp_Text\" name=\"Text\" href=\"\"></xref>."}]},{"pos":[7313,7450],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used by this instance of the <bpt id=\"p2\">&lt;xref href=\"System.Data.IDbCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Data.IDbConnection\"></xref> used by this instance of the <xref href=\"System.Data.IDbCommand\"></xref>."},{"pos":[7601,7635],"content":"The connection to the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection to the data source.","pos":[0,34]}]},{"pos":[8049,8135],"content":"Creates a new instance of an <bpt id=\"p1\">&lt;xref href=\"System.Data.IDbDataParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Creates a new instance of an <xref href=\"System.Data.IDbDataParameter\"></xref> object."},{"pos":[8147,8285],"content":"When inheriting from <xref:System.Data.IDbCommand>, a .NET Framework data provider implements a strongly-typed version of CreateParameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When inheriting from &lt;xref:System.Data.IDbCommand&gt;, a .NET Framework data provider implements a strongly-typed version of CreateParameter.","pos":[0,138],"source":"When inheriting from <xref:System.Data.IDbCommand>, a .NET Framework data provider implements a strongly-typed version of CreateParameter."}]},{"pos":[8456,8551],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IDbDataParameter\" name=\"IDbDataParameter\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_IDbDataParameter\" name=\"IDbDataParameter\" href=\"\"></xref> object."},{"pos":[8970,9163],"content":"Executes an SQL statement against the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Connection\" name=\"Connection\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object of a .NET Framework data provider, and returns the number of rows affected.","needQuote":true,"needEscape":true,"source":"Executes an SQL statement against the <xref uid=\"langword_csharp_Connection\" name=\"Connection\" href=\"\"></xref> object of a .NET Framework data provider, and returns the number of rows affected."},{"pos":[9176,9786],"content":"You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <xref:System.Data.DataSet> by executing UPDATE, INSERT, or DELETE statements.       Although the ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.       For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <xref:System.Data.DataSet> by executing UPDATE, INSERT, or DELETE statements.       Although the ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.       For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1.","pos":[0,606],"nodes":[{"content":"You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a &lt;xref:System.Data.DataSet&gt; by executing UPDATE, INSERT, or DELETE statements.","pos":[0,288],"source":"You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <xref:System.Data.DataSet> by executing UPDATE, INSERT, or DELETE statements."},{"content":"Although the ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.","pos":[295,434]},{"content":"For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.","pos":[441,547]},{"content":"For all other types of statements, the return value is -1.","pos":[548,606]}]}]},{"pos":[10456,10484],"content":"The number of rows affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows affected.","pos":[0,28]}]},{"pos":[10662,10741],"content":"The connection does not exist.       -or-       The connection is not open.","needQuote":false,"needEscape":true,"nodes":[{"content":"The connection does not exist.       -or-       The connection is not open.","pos":[0,75],"nodes":[{"content":"The connection does not exist.","pos":[0,30]},{"content":"-or-       The connection is not open.","pos":[37,75]}]}]},{"pos":[11082,11251],"content":"Executes the &lt;xref:System.Data.IDbCommand.CommandText<bpt id=\"p1\">*</bpt>&gt; against the &lt;xref:System.Data.IDbCommand.Connection<ept id=\"p1\">*</ept>&gt; and builds an <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Executes the <xref:System.Data.IDbCommand.CommandText*> against the <xref:System.Data.IDbCommand.Connection*> and builds an <xref href=\"System.Data.IDataReader\"></xref>."},{"pos":[11410,11465],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDataReader\"></xref> object."},{"pos":[11975,12218],"content":"Executes the &lt;xref:System.Data.IDbCommand.CommandText<bpt id=\"p1\">*</bpt>&gt; against the &lt;xref:System.Data.IDbCommand.Connection<ept id=\"p1\">*</ept>&gt;, and builds an <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> using one of the <bpt id=\"p3\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"Executes the <xref:System.Data.IDbCommand.CommandText*> against the <xref:System.Data.IDbCommand.Connection*>, and builds an <xref href=\"System.Data.IDataReader\"></xref> using one of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[12231,13415],"content":"The caller must call the <xref:System.Data.IDbConnection.Open%2A> method of the <xref:System.Data.IDbCommand.Connection%2A> property.       When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.IDbCommand.CommandText%2A> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <xref:System.Data.IDbCommand.ExecuteReader%2A>.      > [!NOTE] >  Use <xref:System.Data.CommandBehavior> to retrieve large values and binary data. Otherwise, an <xref:System.OutOfMemoryException> might occur and the connection will be closed.       While the <xref:System.Data.IDataReader> is in use, the associated <xref:System.Data.IDbConnection> is busy serving the <xref:System.Data.IDataReader>. While in this state, no other operations can be performed on the <xref:System.Data.IDbConnection> other than closing it. This is the case until the <xref:System.Data.IDataReader.Close%2A> method of the DataReader is called. If the DataReader is created with <xref:System.Data.CommandBehavior> set to `CloseConnection`, closing the DataReader closes the connection automatically.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The caller must call the &lt;xref:System.Data.IDbConnection.Open%2A&gt; method of the &lt;xref:System.Data.IDbCommand.Connection%2A&gt; property.","pos":[0,133],"source":"The caller must call the <xref:System.Data.IDbConnection.Open%2A> method of the <xref:System.Data.IDbCommand.Connection%2A> property."},{"content":"When the &lt;xref:System.Data.IDbCommand.CommandType%2A&gt; property is set to <ph id=\"ph1\">`StoredProcedure`</ph>, the &lt;xref:System.Data.IDbCommand.CommandText%2A&gt; property should be set to the name of the stored procedure.","pos":[140,340],"source":"       When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.IDbCommand.CommandText%2A> property should be set to the name of the stored procedure."},{"content":"The command executes this stored procedure when you call &lt;xref:System.Data.IDbCommand.ExecuteReader%2A&gt;.","pos":[341,445],"source":" The command executes this stored procedure when you call <xref:System.Data.IDbCommand.ExecuteReader%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Use &lt;xref:System.Data.CommandBehavior&gt; to retrieve large values and binary data.","pos":[451,544],"source":"      > [!NOTE] >  Use <xref:System.Data.CommandBehavior> to retrieve large values and binary data."},{"content":"Otherwise, an &lt;xref:System.OutOfMemoryException&gt; might occur and the connection will be closed.","pos":[545,640],"source":" Otherwise, an <xref:System.OutOfMemoryException> might occur and the connection will be closed."},{"content":"While the &lt;xref:System.Data.IDataReader&gt; is in use, the associated &lt;xref:System.Data.IDbConnection&gt; is busy serving the &lt;xref:System.Data.IDataReader&gt;.","pos":[647,798],"source":"       While the <xref:System.Data.IDataReader> is in use, the associated <xref:System.Data.IDbConnection> is busy serving the <xref:System.Data.IDataReader>."},{"content":"While in this state, no other operations can be performed on the &lt;xref:System.Data.IDbConnection&gt; other than closing it.","pos":[799,919],"source":" While in this state, no other operations can be performed on the <xref:System.Data.IDbConnection> other than closing it."},{"content":"This is the case until the &lt;xref:System.Data.IDataReader.Close%2A&gt; method of the DataReader is called.","pos":[920,1022],"source":" This is the case until the <xref:System.Data.IDataReader.Close%2A> method of the DataReader is called."},{"content":"If the DataReader is created with &lt;xref:System.Data.CommandBehavior&gt; set to <ph id=\"ph1\">`CloseConnection`</ph>, closing the DataReader closes the connection automatically.","pos":[1023,1177],"source":" If the DataReader is created with <xref:System.Data.CommandBehavior> set to `CloseConnection`, closing the DataReader closes the connection automatically."}]},{"pos":[13619,13686],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[13754,13809],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.IDataReader\"></xref> object."},{"pos":[14216,14356],"content":"Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.","pos":[0,140],"nodes":[{"content":"Executes the query, and returns the first column of the first row in the resultset returned by the query.","pos":[0,105]},{"content":"Extra columns or rows are ignored.","pos":[106,140]}]}]},{"pos":[14369,15128],"content":"Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref:System.Data.IDbCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value using the data returned by an <xref:System.Data.IDataReader>.       A typical ExecuteScalar query can be formatted as in the following C# example:      ```   CommandText = \"select count(*) as NumberOfRegions from region\";   Int32 count = (int) ExecuteScalar();   ```       If the first column of the first row in the result set is not found, a null reference (`Nothing` in Visual Basic) is returned. If the value in the database is `null`, the query returns `DBNull.Value`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database.","pos":[0,106]},{"content":"This requires less code than using the &lt;xref:System.Data.IDbCommand.ExecuteReader%2A&gt; method, and then performing the operations necessary to generate the single value using the data returned by an &lt;xref:System.Data.IDataReader&gt;.","pos":[107,336],"source":" This requires less code than using the <xref:System.Data.IDbCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value using the data returned by an <xref:System.Data.IDataReader>."},{"content":"A typical ExecuteScalar query can be formatted as in the following C# example:      <ph id=\"ph1\">```   CommandText = \"select count(*) as NumberOfRegions from region\";   Int32 count = (int) ExecuteScalar();   ```</ph>       If the first column of the first row in the result set is not found, a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) is returned.","pos":[343,674],"source":"       A typical ExecuteScalar query can be formatted as in the following C# example:      ```   CommandText = \"select count(*) as NumberOfRegions from region\";   Int32 count = (int) ExecuteScalar();   ```       If the first column of the first row in the result set is not found, a null reference (`Nothing` in Visual Basic) is returned."},{"content":"If the value in the database is <ph id=\"ph1\">`null`</ph>, the query returns <ph id=\"ph2\">`DBNull.Value`</ph>.","pos":[675,748],"source":" If the value in the database is `null`, the query returns `DBNull.Value`."}]},{"pos":[15858,15909],"content":"The first column of the first row in the resultset.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first column of the first row in the resultset.","pos":[0,51]}]},{"pos":[16297,16364],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataParameterCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Data.IDataParameterCollection\"></xref>."},{"pos":[17156,17212],"content":"The parameters of the SQL statement or stored procedure.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters of the SQL statement or stored procedure.","pos":[0,56]}]},{"pos":[17586,17661],"content":"Creates a prepared (or compiled) version of the command on the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a prepared (or compiled) version of the command on the data source.","pos":[0,75]}]},{"pos":[17673,18075],"content":"If the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `TableDirect`, Prepare does nothing. If <xref:System.Data.IDbCommand.CommandType%2A> is set to `StoredProcedure`, the call to Prepare should succeed, although it may result in a no-op. The server automatically caches plans for reuse as necessary; therefore, there is no need to call this method directly in your client application.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the &lt;xref:System.Data.IDbCommand.CommandType%2A&gt; property is set to <ph id=\"ph1\">`TableDirect`</ph>, Prepare does nothing.","pos":[0,107],"source":"If the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `TableDirect`, Prepare does nothing."},{"content":"If &lt;xref:System.Data.IDbCommand.CommandType%2A&gt; is set to <ph id=\"ph1\">`StoredProcedure`</ph>, the call to Prepare should succeed, although it may result in a no-op.","pos":[108,255],"source":" If <xref:System.Data.IDbCommand.CommandType%2A> is set to `StoredProcedure`, the call to Prepare should succeed, although it may result in a no-op."},{"content":"The server automatically caches plans for reuse as necessary; therefore, there is no need to call this method directly in your client application.","pos":[256,402]}]},{"pos":[18872,19067],"content":"The &lt;xref:System.Data.OleDb.OleDbCommand.Connection<bpt id=\"p1\">*</bpt>&gt; is not set.       -or-       The &lt;xref:System.Data.OleDb.OleDbCommand.Connection<ept id=\"p1\">*</ept>&gt; is not &lt;xref:System.Data.OleDb.OleDbConnection.Open*&gt;.","needQuote":false,"needEscape":true,"source":"The <xref:System.Data.OleDb.OleDbCommand.Connection*> is not set.       -or-       The <xref:System.Data.OleDb.OleDbCommand.Connection*> is not <xref:System.Data.OleDb.OleDbConnection.Open*>."},{"pos":[19394,19557],"content":"Gets or sets the transaction within which the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Command\" name=\"Command\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object of a .NET Framework data provider executes.","needQuote":true,"needEscape":true,"source":"Gets or sets the transaction within which the <xref uid=\"langword_csharp_Command\" name=\"Command\" href=\"\"></xref> object of a .NET Framework data provider executes."},{"pos":[19711,19915],"content":"the <xref uid=\"langword_csharp_Command\" name=\"Command\" href=\"\"></xref> object of a .NET Framework data provider executes. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Command\" name=\"Command\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object of a .NET Framework data provider executes.","pos":[0,121],"source":"the <xref uid=\"langword_csharp_Command\" name=\"Command\" href=\"\"></xref> object of a .NET Framework data provider executes."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[122,204],"source":" The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[20331,20547],"content":"Gets or sets how command results are applied to the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when used by the &lt;xref:System.Data.IDataAdapter.Update*&gt; method of a <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbDataAdapter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets how command results are applied to the <xref href=\"System.Data.DataRow\"></xref> when used by the <xref:System.Data.IDataAdapter.Update*> method of a <xref href=\"System.Data.Common.DbDataAdapter\"></xref>."},{"pos":[20708,20980],"content":"One of the <xref href=\"System.Data.UpdateRowSource\"></xref> values. The default is <xref uid=\"langword_csharp_Both\" name=\"Both\" href=\"\"></xref> unless the command is automatically generated. Then the default is <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.UpdateRowSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,67],"source":"One of the <xref href=\"System.Data.UpdateRowSource\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Both\" name=\"Both\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> unless the command is automatically generated.","pos":[68,190],"source":" The default is <xref uid=\"langword_csharp_Both\" name=\"Both\" href=\"\"></xref> unless the command is automatically generated."},{"content":"Then the default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[191,272],"source":" Then the default is <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref>."}]},{"pos":[21142,21235],"content":"The value entered was not one of the <bpt id=\"p1\">&lt;xref href=\"System.Data.UpdateRowSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"The value entered was not one of the <xref href=\"System.Data.UpdateRowSource\"></xref> values."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.IDbCommand\n  id: IDbCommand\n  children:\n  - System.Data.IDbCommand.Cancel\n  - System.Data.IDbCommand.CommandText\n  - System.Data.IDbCommand.CommandTimeout\n  - System.Data.IDbCommand.CommandType\n  - System.Data.IDbCommand.Connection\n  - System.Data.IDbCommand.CreateParameter\n  - System.Data.IDbCommand.ExecuteNonQuery\n  - System.Data.IDbCommand.ExecuteReader\n  - System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n  - System.Data.IDbCommand.ExecuteScalar\n  - System.Data.IDbCommand.Parameters\n  - System.Data.IDbCommand.Prepare\n  - System.Data.IDbCommand.Transaction\n  - System.Data.IDbCommand.UpdatedRowSource\n  langs:\n  - csharp\n  name: IDbCommand\n  nameWithType: IDbCommand\n  fullName: System.Data.IDbCommand\n  type: Interface\n  summary: Represents an SQL statement that is executed while connected to a data source, and is implemented by .NET Framework data providers that access relational databases.\n  remarks: \"The IDbCommand interface enables an inheriting class to implement a Command class, which represents an SQL statement that is executed at a data source. For more information about Command classes, see [Executing a Command](~/add/includes/ajax-current-ext-md.md).  \\n  \\n An application does not create an instance of the IDbCommand interface directly, but creates an instance of a class that inherits IDbCommand.  \\n  \\n Classes that inherit IDbCommand must implement all inherited members, and typically define additional members to add provider-specific functionality. For example, the IDbCommand interface defines the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> method. In turn, the <xref:System.Data.SqlClient.SqlCommand> class inherits this method, and also defines the <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> method.\"\n  example:\n  - \"The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, and <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader>, then the <xref:System.Data.SqlClient.SqlConnection>.  \\n  \\n [!code-cs[Classic WebData SqlCommand Example#1](~/add/codesnippet/csharp/t-system.data.idbcommand_1.cs)]\\n [!code-vb[Classic WebData SqlCommand Example#1](~/add/codesnippet/visualbasic/t-system.data.idbcommand_1.vb)]\"\n  syntax:\n    content: 'public interface IDbCommand : IDisposable'\n  implements:\n  - System.IDisposable\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.Cancel\n  id: Cancel\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: Cancel()\n  nameWithType: IDbCommand.Cancel()\n  fullName: System.Data.IDbCommand.Cancel()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Attempts to cancels the execution of an <xref href=\"System.Data.IDbCommand\"></xref>.\n  remarks: If there is nothing to cancel, nothing happens. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.\n  syntax:\n    content: public void Cancel ();\n    parameters: []\n  overload: System.Data.IDbCommand.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.CommandText\n  id: CommandText\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: CommandText\n  nameWithType: IDbCommand.CommandText\n  fullName: System.Data.IDbCommand.CommandText\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the text command to run against the data source.\n  remarks: When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, set the CommandText property to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command will call this stored procedure when you call one of the Execute methods.\n  example:\n  - \"The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData IDbCommand.CommandText Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_2_1.vb)]\\n [!code-cs[Classic WebData IDbCommand.CommandText Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_2_1.cs)]\"\n  syntax:\n    content: public string CommandText { get; set; }\n    return:\n      type: System.String\n      description: The text command to execute. The default value is an empty string (\"\").\n  overload: System.Data.IDbCommand.CommandText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.CommandTimeout\n  id: CommandTimeout\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: CommandTimeout\n  nameWithType: IDbCommand.CommandTimeout\n  fullName: System.Data.IDbCommand.CommandTimeout\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the wait time before terminating the attempt to execute a command and generating an error.\n  remarks: ''\n  example:\n  - \"The following example creates an instance of a derived class, <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_0_1.vb)]\\n [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_0_1.cs)]\"\n  syntax:\n    content: public int CommandTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: The time (in seconds) to wait for the command to execute. The default value is 30 seconds.\n  overload: System.Data.IDbCommand.CommandTimeout*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The property value assigned is less than 0.\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.CommandType\n  id: CommandType\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: CommandType\n  nameWithType: IDbCommand.CommandType\n  fullName: System.Data.IDbCommand.CommandType\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Indicates or specifies how the <xref:System.Data.IDbCommand.CommandText*> property is interpreted.\n  remarks: When you set the CommandType property to `StoredProcedure`, you should set the <xref:System.Data.IDbCommand.CommandText%2A> property to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods.\n  syntax:\n    content: public System.Data.CommandType CommandType { get; set; }\n    return:\n      type: System.Data.CommandType\n      description: One of the <xref href=\"System.Data.CommandType\"></xref> values. The default is <xref uid=\"langword_csharp_Text\" name=\"Text\" href=\"\"></xref>.\n  overload: System.Data.IDbCommand.CommandType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.Connection\n  id: Connection\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: Connection\n  nameWithType: IDbCommand.Connection\n  fullName: System.Data.IDbCommand.Connection\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the <xref href=\"System.Data.IDbConnection\"></xref> used by this instance of the <xref href=\"System.Data.IDbCommand\"></xref>.\n  syntax:\n    content: public System.Data.IDbConnection Connection { get; set; }\n    return:\n      type: System.Data.IDbConnection\n      description: The connection to the data source.\n  overload: System.Data.IDbCommand.Connection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.CreateParameter\n  id: CreateParameter\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: CreateParameter()\n  nameWithType: IDbCommand.CreateParameter()\n  fullName: System.Data.IDbCommand.CreateParameter()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Creates a new instance of an <xref href=\"System.Data.IDbDataParameter\"></xref> object.\n  remarks: When inheriting from <xref:System.Data.IDbCommand>, a .NET Framework data provider implements a strongly-typed version of CreateParameter.\n  syntax:\n    content: public System.Data.IDbDataParameter CreateParameter ();\n    parameters: []\n    return:\n      type: System.Data.IDbDataParameter\n      description: An <xref uid=\"langword_csharp_IDbDataParameter\" name=\"IDbDataParameter\" href=\"\"></xref> object.\n  overload: System.Data.IDbCommand.CreateParameter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.ExecuteNonQuery\n  id: ExecuteNonQuery\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: ExecuteNonQuery()\n  nameWithType: IDbCommand.ExecuteNonQuery()\n  fullName: System.Data.IDbCommand.ExecuteNonQuery()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Executes an SQL statement against the <xref uid=\"langword_csharp_Connection\" name=\"Connection\" href=\"\"></xref> object of a .NET Framework data provider, and returns the number of rows affected.\n  remarks: \"You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <xref:System.Data.DataSet> by executing UPDATE, INSERT, or DELETE statements.  \\n  \\n Although the ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.  \\n  \\n For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1.\"\n  example:\n  - \"The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and then executes it. To accomplish this, the method is passed a string that is a SQL SELECT statement and a string to use to connect to the data source.  \\n  \\n [!code-cs[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/m-system.data.idbcommand_1_1.cs)]\\n [!code-vb[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_1_1.vb)]\"\n  syntax:\n    content: public int ExecuteNonQuery ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The number of rows affected.\n  overload: System.Data.IDbCommand.ExecuteNonQuery*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The connection does not exist.  \\n  \\n -or-  \\n  \\n The connection is not open.\"\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.ExecuteReader\n  id: ExecuteReader\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: ExecuteReader()\n  nameWithType: IDbCommand.ExecuteReader()\n  fullName: System.Data.IDbCommand.ExecuteReader()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Executes the <xref:System.Data.IDbCommand.CommandText*> against the <xref:System.Data.IDbCommand.Connection*> and builds an <xref href=\"System.Data.IDataReader\"></xref>.\n  syntax:\n    content: public System.Data.IDataReader ExecuteReader ();\n    parameters: []\n    return:\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> object.\n  overload: System.Data.IDbCommand.ExecuteReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n  id: ExecuteReader(System.Data.CommandBehavior)\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: ExecuteReader(CommandBehavior)\n  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)\n  fullName: System.Data.IDbCommand.ExecuteReader(CommandBehavior)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Executes the <xref:System.Data.IDbCommand.CommandText*> against the <xref:System.Data.IDbCommand.Connection*>, and builds an <xref href=\"System.Data.IDataReader\"></xref> using one of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n  remarks: \"The caller must call the <xref:System.Data.IDbConnection.Open%2A> method of the <xref:System.Data.IDbCommand.Connection%2A> property.  \\n  \\n When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.IDbCommand.CommandText%2A> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <xref:System.Data.IDbCommand.ExecuteReader%2A>.  \\n  \\n> [!NOTE]\\n>  Use <xref:System.Data.CommandBehavior> to retrieve large values and binary data. Otherwise, an <xref:System.OutOfMemoryException> might occur and the connection will be closed.  \\n  \\n While the <xref:System.Data.IDataReader> is in use, the associated <xref:System.Data.IDbConnection> is busy serving the <xref:System.Data.IDataReader>. While in this state, no other operations can be performed on the <xref:System.Data.IDbConnection> other than closing it. This is the case until the <xref:System.Data.IDataReader.Close%2A> method of the DataReader is called. If the DataReader is created with <xref:System.Data.CommandBehavior> set to `CloseConnection`, closing the DataReader closes the connection automatically.\"\n  syntax:\n    content: public System.Data.IDataReader ExecuteReader (System.Data.CommandBehavior behavior);\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: One of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n    return:\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> object.\n  overload: System.Data.IDbCommand.ExecuteReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.ExecuteScalar\n  id: ExecuteScalar\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: ExecuteScalar()\n  nameWithType: IDbCommand.ExecuteScalar()\n  fullName: System.Data.IDbCommand.ExecuteScalar()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.\n  remarks: \"Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref:System.Data.IDbCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value using the data returned by an <xref:System.Data.IDataReader>.  \\n  \\n A typical ExecuteScalar query can be formatted as in the following C# example:  \\n  \\n```  \\nCommandText = \\\"select count(*) as NumberOfRegions from region\\\";  \\nInt32 count = (int) ExecuteScalar();  \\n```  \\n  \\n If the first column of the first row in the result set is not found, a null reference (`Nothing` in Visual Basic) is returned. If the value in the database is `null`, the query returns `DBNull.Value`.\"\n  example:\n  - \"The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and then executes it using <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>. The example is passed a string that is a Transact-SQL statement that returns an aggregate result, and a string to use to connect to the data source.  \\n  \\n [!code-cs[Classic WebData SqlCommand.ExecuteScalar#1](~/add/codesnippet/csharp/m-system.data.idbcommand_0_1.cs)]\\n [!code-vb[Classic WebData SqlCommand.ExecuteScalar#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_0_1.vb)]\"\n  syntax:\n    content: public object ExecuteScalar ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The first column of the first row in the resultset.\n  overload: System.Data.IDbCommand.ExecuteScalar*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.Parameters\n  id: Parameters\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: Parameters\n  nameWithType: IDbCommand.Parameters\n  fullName: System.Data.IDbCommand.Parameters\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the <xref href=\"System.Data.IDataParameterCollection\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and displays its parameters. In the example, the application passes a <xref:System.Data.SqlClient.SqlConnection>, a query string that is a Transact-SQL SELECT statement, and an array of <xref:System.Data.SqlClient.SqlParameter> objects.  \\n  \\n [!code-cs[Classic WebData IDbCommand.Parameters Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_1_1.cs)]\\n [!code-vb[Classic WebData IDbCommand.Parameters Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_1_1.vb)]\"\n  syntax:\n    content: public System.Data.IDataParameterCollection Parameters { get; }\n    return:\n      type: System.Data.IDataParameterCollection\n      description: The parameters of the SQL statement or stored procedure.\n  overload: System.Data.IDbCommand.Parameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.Prepare\n  id: Prepare\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: Prepare()\n  nameWithType: IDbCommand.Prepare()\n  fullName: System.Data.IDbCommand.Prepare()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Creates a prepared (or compiled) version of the command on the data source.\n  remarks: If the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `TableDirect`, Prepare does nothing. If <xref:System.Data.IDbCommand.CommandType%2A> is set to `StoredProcedure`, the call to Prepare should succeed, although it may result in a no-op. The server automatically caches plans for reuse as necessary; therefore, there is no need to call this method directly in your client application.\n  example:\n  - \"The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and opens the connection. The example then prepares a stored procedure on the data source by passing a string that is a SQL Select statement and a string to use to connect to the data source.  \\n  \\n [!code-vb[Classic WebData OleDbCommand.Prepare Example#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_2_1.vb)]\\n [!code-cs[Classic WebData OleDbCommand.Prepare Example#1](~/add/codesnippet/csharp/m-system.data.idbcommand_2_1.cs)]\"\n  syntax:\n    content: public void Prepare ();\n    parameters: []\n  overload: System.Data.IDbCommand.Prepare*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref:System.Data.OleDb.OleDbCommand.Connection*> is not set.  \\n  \\n -or-  \\n  \\n The <xref:System.Data.OleDb.OleDbCommand.Connection*> is not <xref:System.Data.OleDb.OleDbConnection.Open*>.\"\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.Transaction\n  id: Transaction\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: Transaction\n  nameWithType: IDbCommand.Transaction\n  fullName: System.Data.IDbCommand.Transaction\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the transaction within which the <xref uid=\"langword_csharp_Command\" name=\"Command\" href=\"\"></xref> object of a .NET Framework data provider executes.\n  syntax:\n    content: public System.Data.IDbTransaction Transaction { get; set; }\n    return:\n      type: System.Data.IDbTransaction\n      description: the <xref uid=\"langword_csharp_Command\" name=\"Command\" href=\"\"></xref> object of a .NET Framework data provider executes. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Data.IDbCommand.Transaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDbCommand.UpdatedRowSource\n  id: UpdatedRowSource\n  parent: System.Data.IDbCommand\n  langs:\n  - csharp\n  name: UpdatedRowSource\n  nameWithType: IDbCommand.UpdatedRowSource\n  fullName: System.Data.IDbCommand.UpdatedRowSource\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets how command results are applied to the <xref href=\"System.Data.DataRow\"></xref> when used by the <xref:System.Data.IDataAdapter.Update*> method of a <xref href=\"System.Data.Common.DbDataAdapter\"></xref>.\n  syntax:\n    content: public System.Data.UpdateRowSource UpdatedRowSource { get; set; }\n    return:\n      type: System.Data.UpdateRowSource\n      description: One of the <xref href=\"System.Data.UpdateRowSource\"></xref> values. The default is <xref uid=\"langword_csharp_Both\" name=\"Both\" href=\"\"></xref> unless the command is automatically generated. Then the default is <xref uid=\"langword_csharp_None\" name=\"None\" href=\"\"></xref>.\n  overload: System.Data.IDbCommand.UpdatedRowSource*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value entered was not one of the <xref href=\"System.Data.UpdateRowSource\"></xref> values.\n  platform:\n  - net462\nreferences:\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Data.IDbCommand.Cancel\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Cancel()\n  nameWithType: IDbCommand.Cancel()\n  fullName: System.Data.IDbCommand.Cancel()\n- uid: System.Data.IDbCommand.CommandText\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandText\n  nameWithType: IDbCommand.CommandText\n  fullName: System.Data.IDbCommand.CommandText\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.IDbCommand.CommandTimeout\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandTimeout\n  nameWithType: IDbCommand.CommandTimeout\n  fullName: System.Data.IDbCommand.CommandTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.IDbCommand.CommandType\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandType\n  nameWithType: IDbCommand.CommandType\n  fullName: System.Data.IDbCommand.CommandType\n- uid: System.Data.CommandType\n  parent: System.Data\n  isExternal: false\n  name: CommandType\n  nameWithType: CommandType\n  fullName: System.Data.CommandType\n- uid: System.Data.IDbCommand.Connection\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Connection\n  nameWithType: IDbCommand.Connection\n  fullName: System.Data.IDbCommand.Connection\n- uid: System.Data.IDbConnection\n  parent: System.Data\n  isExternal: false\n  name: IDbConnection\n  nameWithType: IDbConnection\n  fullName: System.Data.IDbConnection\n- uid: System.Data.IDbCommand.CreateParameter\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CreateParameter()\n  nameWithType: IDbCommand.CreateParameter()\n  fullName: System.Data.IDbCommand.CreateParameter()\n- uid: System.Data.IDbDataParameter\n  parent: System.Data\n  isExternal: false\n  name: IDbDataParameter\n  nameWithType: IDbDataParameter\n  fullName: System.Data.IDbDataParameter\n- uid: System.Data.IDbCommand.ExecuteNonQuery\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteNonQuery()\n  nameWithType: IDbCommand.ExecuteNonQuery()\n  fullName: System.Data.IDbCommand.ExecuteNonQuery()\n- uid: System.Data.IDbCommand.ExecuteReader\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteReader()\n  nameWithType: IDbCommand.ExecuteReader()\n  fullName: System.Data.IDbCommand.ExecuteReader()\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  nameWithType: IDataReader\n  fullName: System.Data.IDataReader\n- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteReader(CommandBehavior)\n  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)\n  fullName: System.Data.IDbCommand.ExecuteReader(CommandBehavior)\n- uid: System.Data.CommandBehavior\n  parent: System.Data\n  isExternal: false\n  name: CommandBehavior\n  nameWithType: CommandBehavior\n  fullName: System.Data.CommandBehavior\n- uid: System.Data.IDbCommand.ExecuteScalar\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteScalar()\n  nameWithType: IDbCommand.ExecuteScalar()\n  fullName: System.Data.IDbCommand.ExecuteScalar()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.IDbCommand.Parameters\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Parameters\n  nameWithType: IDbCommand.Parameters\n  fullName: System.Data.IDbCommand.Parameters\n- uid: System.Data.IDataParameterCollection\n  parent: System.Data\n  isExternal: false\n  name: IDataParameterCollection\n  nameWithType: IDataParameterCollection\n  fullName: System.Data.IDataParameterCollection\n- uid: System.Data.IDbCommand.Prepare\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Prepare()\n  nameWithType: IDbCommand.Prepare()\n  fullName: System.Data.IDbCommand.Prepare()\n- uid: System.Data.IDbCommand.Transaction\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Transaction\n  nameWithType: IDbCommand.Transaction\n  fullName: System.Data.IDbCommand.Transaction\n- uid: System.Data.IDbTransaction\n  parent: System.Data\n  isExternal: false\n  name: IDbTransaction\n  nameWithType: IDbTransaction\n  fullName: System.Data.IDbTransaction\n- uid: System.Data.IDbCommand.UpdatedRowSource\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: UpdatedRowSource\n  nameWithType: IDbCommand.UpdatedRowSource\n  fullName: System.Data.IDbCommand.UpdatedRowSource\n- uid: System.Data.UpdateRowSource\n  parent: System.Data\n  isExternal: false\n  name: UpdateRowSource\n  nameWithType: UpdateRowSource\n  fullName: System.Data.UpdateRowSource\n- uid: System.Data.IDbCommand.Cancel*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Cancel\n  nameWithType: IDbCommand.Cancel\n- uid: System.Data.IDbCommand.CommandText*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandText\n  nameWithType: IDbCommand.CommandText\n- uid: System.Data.IDbCommand.CommandTimeout*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandTimeout\n  nameWithType: IDbCommand.CommandTimeout\n- uid: System.Data.IDbCommand.CommandType*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandType\n  nameWithType: IDbCommand.CommandType\n- uid: System.Data.IDbCommand.Connection*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Connection\n  nameWithType: IDbCommand.Connection\n- uid: System.Data.IDbCommand.CreateParameter*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CreateParameter\n  nameWithType: IDbCommand.CreateParameter\n- uid: System.Data.IDbCommand.ExecuteNonQuery*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteNonQuery\n  nameWithType: IDbCommand.ExecuteNonQuery\n- uid: System.Data.IDbCommand.ExecuteReader*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteReader\n  nameWithType: IDbCommand.ExecuteReader\n- uid: System.Data.IDbCommand.ExecuteScalar*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteScalar\n  nameWithType: IDbCommand.ExecuteScalar\n- uid: System.Data.IDbCommand.Parameters*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Parameters\n  nameWithType: IDbCommand.Parameters\n- uid: System.Data.IDbCommand.Prepare*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Prepare\n  nameWithType: IDbCommand.Prepare\n- uid: System.Data.IDbCommand.Transaction*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Transaction\n  nameWithType: IDbCommand.Transaction\n- uid: System.Data.IDbCommand.UpdatedRowSource*\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: UpdatedRowSource\n  nameWithType: IDbCommand.UpdatedRowSource\n"}