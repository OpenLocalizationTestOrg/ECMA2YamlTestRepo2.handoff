{"nodes":[{"pos":[1027,1167],"content":"Represents the collection used to store Uniform Resource Identifier (URI) prefixes for <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Represents the collection used to store Uniform Resource Identifier (URI) prefixes for <xref href=\"System.Net.HttpListener\"></xref> objects."},{"pos":[1179,1272],"content":"The <xref:System.Net.HttpListener.Prefixes%2A> property returns instances of this collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.HttpListener.Prefixes%2A&gt; property returns instances of this collection.","pos":[0,93],"source":"The <xref:System.Net.HttpListener.Prefixes%2A> property returns instances of this collection."}]},{"pos":[2278,2344],"content":"Adds a Uniform Resource Identifier (URI) prefix to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a Uniform Resource Identifier (URI) prefix to the collection.","pos":[0,66]}]},{"pos":[2357,4266],"content":"This method adds a URI prefix to the set of prefixes managed by the associated <xref:System.Net.HttpListener> object. When checking `uriPrefix` to ensure it is valid, case is ignored.       A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path, for example, \"`http://www.contoso.com:8080/customerData``/`\". The prefix must be terminated with a forward slash (\"/\"). The <xref:System.Net.HttpListener> with the prefix that most closely matches a requested URI responds to the request. Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix. An <xref:System.Net.HttpListenerException> exception is thrown if an <xref:System.Net.HttpListener> adds a prefix that is already in use.       When a port is specified, the host element can be replaced with \"`*`\" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix. For example, to receive all requests sent to port 8080 when the requested URI is not handled by any other <xref:System.Net.HttpListener>, the prefix is \"`http://*:8080``/`\". Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the \"`+`\" character, \"`https://+:8080`/\". The \"`*`\" and \"`+`\" characters can be present in prefixes that include paths.       Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object. To specify a wildcard subdomain, use the \"*\" character as part of the hostname in a URI prefix: for example, `http://*.foo.com/`, and pass this as the argument to the HttpListenerPrefixCollection.Add method. This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <xref:System.Net.HttpListenerException>","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method adds a URI prefix to the set of prefixes managed by the associated &lt;xref:System.Net.HttpListener&gt; object.","pos":[0,117],"source":"This method adds a URI prefix to the set of prefixes managed by the associated <xref:System.Net.HttpListener> object."},{"content":"When checking <ph id=\"ph1\">`uriPrefix`</ph> to ensure it is valid, case is ignored.","pos":[118,183],"source":" When checking `uriPrefix` to ensure it is valid, case is ignored."},{"content":"A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path, for example, \"<ph id=\"ph1\">`http://www.contoso.com:8080/customerData``/`</ph>\".","pos":[190,360],"source":"       A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path, for example, \"`http://www.contoso.com:8080/customerData``/`\"."},{"content":"The prefix must be terminated with a forward slash (\"/\").","pos":[361,418]},{"content":"The &lt;xref:System.Net.HttpListener&gt; with the prefix that most closely matches a requested URI responds to the request.","pos":[419,536],"source":" The <xref:System.Net.HttpListener> with the prefix that most closely matches a requested URI responds to the request."},{"content":"Multiple &lt;xref:System.Net.HttpListener&gt; objects cannot add the same prefix.","pos":[537,612],"source":" Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix."},{"content":"An &lt;xref:System.Net.HttpListenerException&gt; exception is thrown if an &lt;xref:System.Net.HttpListener&gt; adds a prefix that is already in use.","pos":[613,750],"source":" An <xref:System.Net.HttpListenerException> exception is thrown if an <xref:System.Net.HttpListener> adds a prefix that is already in use."},{"content":"When a port is specified, the host element can be replaced with \"<ph id=\"ph1\">`*`</ph>\" to indicate that the &lt;xref:System.Net.HttpListener&gt; accepts requests sent to the port if the requested URI does not match any other prefix.","pos":[757,966],"source":"       When a port is specified, the host element can be replaced with \"`*`\" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix."},{"content":"For example, to receive all requests sent to port 8080 when the requested URI is not handled by any other &lt;xref:System.Net.HttpListener&gt;, the prefix is \"<ph id=\"ph1\">`http://*:8080``/`</ph>\".","pos":[967,1140],"source":" For example, to receive all requests sent to port 8080 when the requested URI is not handled by any other <xref:System.Net.HttpListener>, the prefix is \"`http://*:8080``/`\"."},{"content":"Similarly, to specify that the &lt;xref:System.Net.HttpListener&gt; accepts all requests sent to a port, replace the host element with the \"<ph id=\"ph1\">`+`</ph>\" character, \"<ph id=\"ph2\">`https://+:8080`</ph>/\".","pos":[1141,1311],"source":" Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the \"`+`\" character, \"`https://+:8080`/\"."},{"content":"The \"<ph id=\"ph1\">`*`</ph>\" and \"<ph id=\"ph2\">`+`</ph>\" characters can be present in prefixes that include paths.","pos":[1312,1389],"source":" The \"`*`\" and \"`+`\" characters can be present in prefixes that include paths."},{"content":"Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an &lt;xref:System.Net.HttpListener&gt; object.","pos":[1396,1548],"source":"       Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object."},{"content":"To specify a wildcard subdomain, use the \"*\" character as part of the hostname in a URI prefix: for example, <ph id=\"ph1\">`http://*.foo.com/`</ph>, and pass this as the argument to the HttpListenerPrefixCollection.Add method.","pos":[1549,1756],"source":" To specify a wildcard subdomain, use the \"*\" character as part of the hostname in a URI prefix: for example, `http://*.foo.com/`, and pass this as the argument to the HttpListenerPrefixCollection.Add method."},{"content":"This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an &lt;xref:System.Net.HttpListenerException&gt;","pos":[1757,1885],"source":" This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <xref:System.Net.HttpListenerException>"}]},{"pos":[4682,4837],"content":"A <xref:System.String> that identifies the URI information that is compared in incoming requests. The prefix must be terminated with a forward slash (\"/\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.String> that identifies the URI information that is compared in incoming requests. The prefix must be terminated with a forward slash (\"/\").","pos":[0,155],"nodes":[{"content":"A &lt;xref:System.String&gt; that identifies the URI information that is compared in incoming requests.","pos":[0,97],"source":"A <xref:System.String> that identifies the URI information that is compared in incoming requests."},{"content":"The prefix must be terminated with a forward slash (\"/\").","pos":[98,155]}]}]},{"pos":[5011,5098],"content":"<ph id=\"ph1\">&lt;code&gt;uriPrefix&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>uriPrefix</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5194,5492],"content":"<code>uriPrefix</code> does not use the http:// or https:// scheme. These are the only schemes supported for <xref href=\"System.Net.HttpListener\"></xref> objects.       -or-       <code>uriPrefix</code> is not a correctly formatted URI prefix. Make sure the string is terminated with a \"/\".","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;uriPrefix&lt;/code&gt;</ph> does not use the http:// or https:// scheme.","pos":[0,67],"source":"<code>uriPrefix</code> does not use the http:// or https:// scheme."},{"content":"These are the only schemes supported for <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","pos":[68,162],"source":" These are the only schemes supported for <xref href=\"System.Net.HttpListener\"></xref> objects."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;uriPrefix&lt;/code&gt;</ph> is not a correctly formatted URI prefix.","pos":[169,243],"source":"       -or-       <code>uriPrefix</code> is not a correctly formatted URI prefix."},{"content":"Make sure the string is terminated with a \"/\".","pos":[244,290]}]},{"pos":[5600,5691],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this collection is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed."},{"pos":[5802,6090],"content":"A Windows function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception. This exception is thrown if another <xref href=\"System.Net.HttpListener\"></xref> has already added the prefix <code>uriPrefix</code>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Windows function call failed.","pos":[0,31]},{"content":"Check the exception's &lt;xref:System.Net.HttpListenerException.ErrorCode*&gt; property to determine the cause of the exception.","pos":[32,154],"source":" Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception."},{"content":"This exception is thrown if another <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has already added the prefix <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">uriPrefix</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[155,288],"source":" This exception is thrown if another <xref href=\"System.Net.HttpListener\"></xref> has already added the prefix <code>uriPrefix</code>."}]},{"pos":[6453,6532],"content":"Removes all the Uniform Resource Identifier (URI) prefixes from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all the Uniform Resource Identifier (URI) prefixes from the collection.","pos":[0,79]}]},{"pos":[6544,6707],"content":"After calling this method, you cannot start the associated <xref:System.Net.HttpListener> without adding new prefixes; if you try to do so, an exception is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"After calling this method, you cannot start the associated &lt;xref:System.Net.HttpListener&gt; without adding new prefixes; if you try to do so, an exception is thrown.","pos":[0,163],"source":"After calling this method, you cannot start the associated <xref:System.Net.HttpListener> without adding new prefixes; if you try to do so, an exception is thrown."}]},{"pos":[7173,7327],"content":"A Windows function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Windows function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.","pos":[0,154],"nodes":[{"content":"A Windows function call failed.","pos":[0,31]},{"content":"Check the exception's &lt;xref:System.Net.HttpListenerException.ErrorCode*&gt; property to determine the cause of the exception.","pos":[32,154],"source":" Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception."}]}]},{"pos":[7434,7525],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this collection is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed."},{"pos":[7951,8064],"content":"Returns a <xref:System.Boolean> value that indicates whether the specified prefix is contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.Boolean&gt; value that indicates whether the specified prefix is contained in the collection.","pos":[0,113],"source":"Returns a <xref:System.Boolean> value that indicates whether the specified prefix is contained in the collection."}]},{"pos":[8076,8134],"content":"The specified prefix must exactly match an existing value.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The specified prefix must exactly match an existing value.","pos":[0,58]}]},{"pos":[8546,8636],"content":"A <xref:System.String> that contains the Uniform Resource Identifier (URI) prefix to test.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that contains the Uniform Resource Identifier (URI) prefix to test.","pos":[0,90],"source":"A <xref:System.String> that contains the Uniform Resource Identifier (URI) prefix to test."}]},{"pos":[8695,8906],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this collection contains the prefix specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">uriPrefix</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this collection contains the prefix specified by <code>uriPrefix</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9085,9172],"content":"<ph id=\"ph1\">&lt;code&gt;uriPrefix&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>uriPrefix</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9627,9737],"content":"Copies the contents of an <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListenerPrefixCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified array.","needQuote":true,"needEscape":true,"source":"Copies the contents of an <xref href=\"System.Net.HttpListenerPrefixCollection\"></xref> to the specified array."},{"pos":[9749,9822],"content":"The array must be able to contain strings and cannot be multidimensional.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The array must be able to contain strings and cannot be multidimensional.","pos":[0,73]}]},{"pos":[10185,10311],"content":"The one dimensional <xref:System.Array> that receives the Uniform Resource Identifier (URI) prefix strings in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one dimensional &lt;xref:System.Array&gt; that receives the Uniform Resource Identifier (URI) prefix strings in this collection.","pos":[0,126],"source":"The one dimensional <xref:System.Array> that receives the Uniform Resource Identifier (URI) prefix strings in this collection."}]},{"pos":[10373,10429],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[10598,10645],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> has more than one dimension.","needQuote":true,"needEscape":true,"source":"<code>array</code> has more than one dimension."},{"pos":[10760,10872],"content":"This collection contains more elements than can be stored in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> starting at <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This collection contains more elements than can be stored in <code>array</code> starting at <code>offset</code>."},{"pos":[10979,11070],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this collection is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed."},{"pos":[11171,11217],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> cannot store string values.","needQuote":true,"needEscape":true,"source":"<code>array</code> cannot store string values."},{"pos":[11687,11804],"content":"Copies the contents of an <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListenerPrefixCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified string array.","needQuote":true,"needEscape":true,"source":"Copies the contents of an <xref href=\"System.Net.HttpListenerPrefixCollection\"></xref> to the specified string array."},{"pos":[11816,11889],"content":"The array must be able to contain strings and cannot be multidimensional.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The array must be able to contain strings and cannot be multidimensional.","pos":[0,73]}]},{"pos":[12257,12376],"content":"The one dimensional string array that receives the Uniform Resource Identifier (URI) prefix strings in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one dimensional string array that receives the Uniform Resource Identifier (URI) prefix strings in this collection.","pos":[0,119]}]},{"pos":[12438,12494],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[12663,12710],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> has more than one dimension.","needQuote":true,"needEscape":true,"source":"<code>array</code> has more than one dimension."},{"pos":[12825,12937],"content":"This collection contains more elements than can be stored in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> starting at <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This collection contains more elements than can be stored in <code>array</code> starting at <code>offset</code>."},{"pos":[13044,13135],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this collection is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed."},{"pos":[13494,13550],"content":"Gets the number of prefixes contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of prefixes contained in the collection.","pos":[0,56]}]},{"pos":[13853,13932],"content":"An <xref:System.Int32> that contains the number of prefixes in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; that contains the number of prefixes in this collection.","pos":[0,79],"source":"An <xref:System.Int32> that contains the number of prefixes in this collection."}]},{"pos":[14411,14480],"content":"Returns an object that can be used to iterate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an object that can be used to iterate through the collection.","pos":[0,69]}]},{"pos":[14493,15350],"content":"The object that is returned by this method is initially positioned before the first element in this collection. You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method before you can access the first element. To access the element at the current position, call the <xref:System.Collections.IEnumerator.Current%2A> property.       Do not modify the collection while using the enumerator. If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> causes an <xref:System.InvalidOperationException>.       For a detailed description of enumerators, see the documentation for the <xref:System.Collections.IEnumerator> class and the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The object that is returned by this method is initially positioned before the first element in this collection. You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method before you can access the first element. To access the element at the current position, call the <xref:System.Collections.IEnumerator.Current%2A> property.       Do not modify the collection while using the enumerator. If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> causes an <xref:System.InvalidOperationException>.       For a detailed description of enumerators, see the documentation for the <xref:System.Collections.IEnumerator> class and the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method.","pos":[0,853],"nodes":[{"content":"The object that is returned by this method is initially positioned before the first element in this collection.","pos":[0,111]},{"content":"You must call the &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; method before you can access the first element.","pos":[112,227],"source":" You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method before you can access the first element."},{"content":"To access the element at the current position, call the &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property.","pos":[228,342],"source":" To access the element at the current position, call the <xref:System.Collections.IEnumerator.Current%2A> property."},{"content":"Do not modify the collection while using the enumerator.","pos":[349,405]},{"content":"If the collection is modified while an enumerator is in use, an attempt to set the position by calling &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; causes an &lt;xref:System.InvalidOperationException&gt;.","pos":[406,659],"source":" If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> causes an <xref:System.InvalidOperationException>."},{"content":"For a detailed description of enumerators, see the documentation for the &lt;xref:System.Collections.IEnumerator&gt; class and the &lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt; method.","pos":[666,853],"source":"       For a detailed description of enumerators, see the documentation for the <xref:System.Collections.IEnumerator> class and the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method."}]}]},{"pos":[15903,16035],"content":"An object that implements the <xref:System.Collections.IEnumerator> interface and provides access to the strings in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that implements the &lt;xref:System.Collections.IEnumerator&gt; interface and provides access to the strings in this collection.","pos":[0,132],"source":"An object that implements the <xref:System.Collections.IEnumerator> interface and provides access to the strings in this collection."}]},{"pos":[16503,16577],"content":"Gets a value that indicates whether access to the collection is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether access to the collection is read-only.","pos":[0,74]}]},{"pos":[16691,16769],"content":"Always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17254,17345],"content":"Gets a value that indicates whether access to the collection is synchronized (thread-safe).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether access to the collection is synchronized (thread-safe).","pos":[0,91]}]},{"pos":[17357,17757],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.","pos":[0,400],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.","pos":[217,400]}]}]},{"pos":[17875,17967],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18468,18617],"content":"Removes the specified Uniform Resource Identifier (URI) from the list of prefixes handled by the <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Removes the specified Uniform Resource Identifier (URI) from the list of prefixes handled by the <xref href=\"System.Net.HttpListener\"></xref> object."},{"pos":[18629,18695],"content":"If <ph id=\"ph1\">`uriPrefix`</ph> is not in the collection, this method does nothing.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If `uriPrefix` is not in the collection, this method does nothing."},{"pos":[18839,18901],"content":"A <xref:System.String> that contains the URI prefix to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that contains the URI prefix to remove.","pos":[0,62],"source":"A <xref:System.String> that contains the URI prefix to remove."}]},{"pos":[18960,19215],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">uriPrefix</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found in the <bpt id=\"p3\">&lt;xref href=\"System.Net.HttpListenerPrefixCollection\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and removed; otherwise <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>uriPrefix</code> was found in the <xref href=\"System.Net.HttpListenerPrefixCollection\"></xref> and removed; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19392,19479],"content":"<ph id=\"ph1\">&lt;code&gt;uriPrefix&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>uriPrefix</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19590,19696],"content":"A Windows function call failed. To determine the cause of the exception, check the exception's error code.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Windows function call failed. To determine the cause of the exception, check the exception's error code.","pos":[0,106],"nodes":[{"content":"A Windows function call failed.","pos":[0,31]},{"content":"To determine the cause of the exception, check the exception's error code.","pos":[32,106]}]}]},{"pos":[19803,19894],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this collection is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed."},{"pos":[20466,20535],"content":"Returns an object that can be used to iterate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an object that can be used to iterate through the collection.","pos":[0,69]}]},{"pos":[20548,21405],"content":"The object that is returned by this method is initially positioned before the first element in this collection. You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method before you can access the first element. To access the element at the current position, call the <xref:System.Collections.IEnumerator.Current%2A> property.       Do not modify the collection while using the enumerator. If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> causes an <xref:System.InvalidOperationException>.       For a detailed description of enumerators, see the documentation for the <xref:System.Collections.IEnumerator> class and the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The object that is returned by this method is initially positioned before the first element in this collection. You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method before you can access the first element. To access the element at the current position, call the <xref:System.Collections.IEnumerator.Current%2A> property.       Do not modify the collection while using the enumerator. If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> causes an <xref:System.InvalidOperationException>.       For a detailed description of enumerators, see the documentation for the <xref:System.Collections.IEnumerator> class and the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method.","pos":[0,853],"nodes":[{"content":"The object that is returned by this method is initially positioned before the first element in this collection.","pos":[0,111]},{"content":"You must call the &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; method before you can access the first element.","pos":[112,227],"source":" You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method before you can access the first element."},{"content":"To access the element at the current position, call the &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property.","pos":[228,342],"source":" To access the element at the current position, call the <xref:System.Collections.IEnumerator.Current%2A> property."},{"content":"Do not modify the collection while using the enumerator.","pos":[349,405]},{"content":"If the collection is modified while an enumerator is in use, an attempt to set the position by calling &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; causes an &lt;xref:System.InvalidOperationException&gt;.","pos":[406,659],"source":" If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> causes an <xref:System.InvalidOperationException>."},{"content":"For a detailed description of enumerators, see the documentation for the &lt;xref:System.Collections.IEnumerator&gt; class and the &lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt; method.","pos":[666,853],"source":"       For a detailed description of enumerators, see the documentation for the <xref:System.Collections.IEnumerator> class and the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method."}]}]},{"pos":[21584,21716],"content":"An object that implements the <xref:System.Collections.IEnumerator> interface and provides access to the strings in this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that implements the &lt;xref:System.Collections.IEnumerator&gt; interface and provides access to the strings in this collection.","pos":[0,132],"source":"An object that implements the <xref:System.Collections.IEnumerator> interface and provides access to the strings in this collection."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.HttpListenerPrefixCollection\n  id: HttpListenerPrefixCollection\n  children:\n  - System.Net.HttpListenerPrefixCollection.Add(System.String)\n  - System.Net.HttpListenerPrefixCollection.Clear\n  - System.Net.HttpListenerPrefixCollection.Contains(System.String)\n  - System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)\n  - System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)\n  - System.Net.HttpListenerPrefixCollection.Count\n  - System.Net.HttpListenerPrefixCollection.GetEnumerator\n  - System.Net.HttpListenerPrefixCollection.IsReadOnly\n  - System.Net.HttpListenerPrefixCollection.IsSynchronized\n  - System.Net.HttpListenerPrefixCollection.Remove(System.String)\n  - System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: HttpListenerPrefixCollection\n  nameWithType: HttpListenerPrefixCollection\n  fullName: System.Net.HttpListenerPrefixCollection\n  type: Class\n  summary: Represents the collection used to store Uniform Resource Identifier (URI) prefixes for <xref href=\"System.Net.HttpListener\"></xref> objects.\n  remarks: The <xref:System.Net.HttpListener.Prefixes%2A> property returns instances of this collection.\n  example:\n  - \"The following code example creates an <xref:System.Net.HttpListener> and adds user-specified prefixes to its HttpListenerPrefixCollection.  \\n  \\n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistene_1_1.cs)]\"\n  syntax:\n    content: 'public class HttpListenerPrefixCollection : System.Collections.Generic.ICollection<string>, System.Collections.Generic.IEnumerable<string>'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<System.String>\n  - System.Collections.Generic.IEnumerable<System.String>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.Add(System.String)\n  id: Add(System.String)\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: Add(String)\n  nameWithType: HttpListenerPrefixCollection.Add(String)\n  fullName: System.Net.HttpListenerPrefixCollection.Add(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Adds a Uniform Resource Identifier (URI) prefix to the collection.\n  remarks: \"This method adds a URI prefix to the set of prefixes managed by the associated <xref:System.Net.HttpListener> object. When checking `uriPrefix` to ensure it is valid, case is ignored.  \\n  \\n A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path, for example, \\\"`http://www.contoso.com:8080/customerData``/`\\\". The prefix must be terminated with a forward slash (\\\"/\\\"). The <xref:System.Net.HttpListener> with the prefix that most closely matches a requested URI responds to the request. Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix. An <xref:System.Net.HttpListenerException> exception is thrown if an <xref:System.Net.HttpListener> adds a prefix that is already in use.  \\n  \\n When a port is specified, the host element can be replaced with \\\"`*`\\\" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix. For example, to receive all requests sent to port 8080 when the requested URI is not handled by any other <xref:System.Net.HttpListener>, the prefix is \\\"`http://*:8080``/`\\\". Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the \\\"`+`\\\" character, \\\"`https://+:8080`/\\\". The \\\"`*`\\\" and \\\"`+`\\\" characters can be present in prefixes that include paths.  \\n  \\n Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object. To specify a wildcard subdomain, use the \\\"*\\\" character as part of the hostname in a URI prefix: for example, `http://*.foo.com/`, and pass this as the argument to the HttpListenerPrefixCollection.Add method. This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <xref:System.Net.HttpListenerException>\"\n  example:\n  - \"The following code example creates an <xref:System.Net.HttpListener> and adds user-specified prefixes to its <xref:System.Net.HttpListenerPrefixCollection>.  \\n  \\n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/m-system.net.httplistene_16_1.cs)]\"\n  syntax:\n    content: public void Add (string uriPrefix);\n    parameters:\n    - id: uriPrefix\n      type: System.String\n      description: A <xref:System.String> that identifies the URI information that is compared in incoming requests. The prefix must be terminated with a forward slash (\"/\").\n  overload: System.Net.HttpListenerPrefixCollection.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>uriPrefix</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>uriPrefix</code> does not use the http:// or https:// scheme. These are the only schemes supported for <xref href=\\\"System.Net.HttpListener\\\"></xref> objects.  \\n  \\n -or-  \\n  \\n <code>uriPrefix</code> is not a correctly formatted URI prefix. Make sure the string is terminated with a \\\"/\\\".\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed.\n  - type: System.Net.HttpListenerException\n    commentId: T:System.Net.HttpListenerException\n    description: A Windows function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception. This exception is thrown if another <xref href=\"System.Net.HttpListener\"></xref> has already added the prefix <code>uriPrefix</code>.\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.Clear\n  id: Clear\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: HttpListenerPrefixCollection.Clear()\n  fullName: System.Net.HttpListenerPrefixCollection.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Removes all the Uniform Resource Identifier (URI) prefixes from the collection.\n  remarks: After calling this method, you cannot start the associated <xref:System.Net.HttpListener> without adding new prefixes; if you try to do so, an exception is thrown.\n  example:\n  - \"The following code example removes all prefixes in an <xref:System.Net.HttpListenerPrefixCollection>.  \\n  \\n [!code-cs[Net_Listener_Basic#6](~/add/codesnippet/csharp/m-system.net.httplistene_7_1.cs)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Net.HttpListenerPrefixCollection.Clear*\n  exceptions:\n  - type: System.Net.HttpListenerException\n    commentId: T:System.Net.HttpListenerException\n    description: A Windows function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: HttpListenerPrefixCollection.Contains(String)\n  fullName: System.Net.HttpListenerPrefixCollection.Contains(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Returns a <xref:System.Boolean> value that indicates whether the specified prefix is contained in the collection.\n  remarks: The specified prefix must exactly match an existing value.\n  example:\n  - \"The following code example checks to see whether a user-specified prefix is contained in the prefix collection of an <xref:System.Net.HttpListener>.  \\n  \\n [!code-cs[Net_Listener_Basic#4](~/add/codesnippet/csharp/m-system.net.httplistene_14_1.cs)]\"\n  syntax:\n    content: public bool Contains (string uriPrefix);\n    parameters:\n    - id: uriPrefix\n      type: System.String\n      description: A <xref:System.String> that contains the Uniform Resource Identifier (URI) prefix to test.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this collection contains the prefix specified by <code>uriPrefix</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerPrefixCollection.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>uriPrefix</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: HttpListenerPrefixCollection.CopyTo(Array,Int32)\n  fullName: System.Net.HttpListenerPrefixCollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Copies the contents of an <xref href=\"System.Net.HttpListenerPrefixCollection\"></xref> to the specified array.\n  remarks: The array must be able to contain strings and cannot be multidimensional.\n  example:\n  - \"The following code example copies the prefixes in a <xref:System.Net.HttpListenerPrefixCollection>.  \\n  \\n [!code-cs[Net_Listener_Basic#7](~/add/codesnippet/csharp/m-system.net.httplistene_18_1.cs)]\"\n  syntax:\n    content: public void CopyTo (Array array, int offset);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one dimensional <xref:System.Array> that receives the Uniform Resource Identifier (URI) prefix strings in this collection.\n    - id: offset\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Net.HttpListenerPrefixCollection.CopyTo*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>array</code> has more than one dimension.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: This collection contains more elements than can be stored in <code>array</code> starting at <code>offset</code>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>array</code> cannot store string values.\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)\n  id: CopyTo(System.String[],System.Int32)\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: CopyTo(String[],Int32)\n  nameWithType: HttpListenerPrefixCollection.CopyTo(String[],Int32)\n  fullName: System.Net.HttpListenerPrefixCollection.CopyTo(String[],Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Copies the contents of an <xref href=\"System.Net.HttpListenerPrefixCollection\"></xref> to the specified string array.\n  remarks: The array must be able to contain strings and cannot be multidimensional.\n  example:\n  - \"The following code example copies the prefixes in a <xref:System.Net.HttpListenerPrefixCollection>.  \\n  \\n [!code-cs[Net_Listener_Basic#7](~/add/codesnippet/csharp/m-system.net.httplistene_6_1.cs)]\"\n  syntax:\n    content: public void CopyTo (string[] array, int offset);\n    parameters:\n    - id: array\n      type: System.String[]\n      description: The one dimensional string array that receives the Uniform Resource Identifier (URI) prefix strings in this collection.\n    - id: offset\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Net.HttpListenerPrefixCollection.CopyTo*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>array</code> has more than one dimension.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: This collection contains more elements than can be stored in <code>array</code> starting at <code>offset</code>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.Count\n  id: Count\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: HttpListenerPrefixCollection.Count\n  fullName: System.Net.HttpListenerPrefixCollection.Count\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the number of prefixes contained in the collection.\n  remarks: ''\n  example:\n  - \"The following code example displays the prefixes in a collection.  \\n  \\n [!code-cs[Net_Listener_Basic#1](~/add/codesnippet/csharp/p-system.net.httplistene_43_1.cs)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: An <xref:System.Int32> that contains the number of prefixes in this collection.\n  overload: System.Net.HttpListenerPrefixCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: HttpListenerPrefixCollection.GetEnumerator()\n  fullName: System.Net.HttpListenerPrefixCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Returns an object that can be used to iterate through the collection.\n  remarks: \"The object that is returned by this method is initially positioned before the first element in this collection. You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method before you can access the first element. To access the element at the current position, call the <xref:System.Collections.IEnumerator.Current%2A> property.  \\n  \\n Do not modify the collection while using the enumerator. If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> causes an <xref:System.InvalidOperationException>.  \\n  \\n For a detailed description of enumerators, see the documentation for the <xref:System.Collections.IEnumerator> class and the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method.\"\n  example:\n  - \"The following code example demonstrates enumerating through a collection. Note that the Visual Basic and C# examples use language specific statements to enumerate through the collection instead of retrieving the enumerator.  \\n  \\n [!code-cs[Net_Listener_Basic#1](~/add/codesnippet/csharp/m-system.net.httplistene_8_1.cs)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<string> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.String}\n      description: An object that implements the <xref:System.Collections.IEnumerator> interface and provides access to the strings in this collection.\n  overload: System.Net.HttpListenerPrefixCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.IsReadOnly\n  id: IsReadOnly\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: HttpListenerPrefixCollection.IsReadOnly\n  fullName: System.Net.HttpListenerPrefixCollection.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a value that indicates whether access to the collection is read-only.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerPrefixCollection.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: HttpListenerPrefixCollection.IsSynchronized\n  fullName: System.Net.HttpListenerPrefixCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a value that indicates whether access to the collection is synchronized (thread-safe).\n  remarks: Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerPrefixCollection.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: HttpListenerPrefixCollection.Remove(String)\n  fullName: System.Net.HttpListenerPrefixCollection.Remove(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Removes the specified Uniform Resource Identifier (URI) from the list of prefixes handled by the <xref href=\"System.Net.HttpListener\"></xref> object.\n  remarks: If `uriPrefix` is not in the collection, this method does nothing.\n  syntax:\n    content: public bool Remove (string uriPrefix);\n    parameters:\n    - id: uriPrefix\n      type: System.String\n      description: A <xref:System.String> that contains the URI prefix to remove.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>uriPrefix</code> was found in the <xref href=\"System.Net.HttpListenerPrefixCollection\"></xref> and removed; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListenerPrefixCollection.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>uriPrefix</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.HttpListenerException\n    commentId: T:System.Net.HttpListenerException\n    description: A Windows function call failed. To determine the cause of the exception, check the exception's error code.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.HttpListener\"></xref> associated with this collection is closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Net.HttpListenerPrefixCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Net.HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Returns an object that can be used to iterate through the collection.\n  remarks: \"The object that is returned by this method is initially positioned before the first element in this collection. You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method before you can access the first element. To access the element at the current position, call the <xref:System.Collections.IEnumerator.Current%2A> property.  \\n  \\n Do not modify the collection while using the enumerator. If the collection is modified while an enumerator is in use, an attempt to set the position by calling <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> causes an <xref:System.InvalidOperationException>.  \\n  \\n For a detailed description of enumerators, see the documentation for the <xref:System.Collections.IEnumerator> class and the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An object that implements the <xref:System.Collections.IEnumerator> interface and provides access to the strings in this collection.\n  overload: System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.Net.HttpListenerException\n  parent: System.Net\n  isExternal: false\n  name: HttpListenerException\n  nameWithType: HttpListenerException\n  fullName: System.Net.HttpListenerException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.Net.HttpListenerPrefixCollection.Add(System.String)\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Add(String)\n  nameWithType: HttpListenerPrefixCollection.Add(String)\n  fullName: System.Net.HttpListenerPrefixCollection.Add(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.HttpListenerPrefixCollection.Clear\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: HttpListenerPrefixCollection.Clear()\n  fullName: System.Net.HttpListenerPrefixCollection.Clear()\n- uid: System.Net.HttpListenerPrefixCollection.Contains(System.String)\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Contains(String)\n  nameWithType: HttpListenerPrefixCollection.Contains(String)\n  fullName: System.Net.HttpListenerPrefixCollection.Contains(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: HttpListenerPrefixCollection.CopyTo(Array,Int32)\n  fullName: System.Net.HttpListenerPrefixCollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: CopyTo(String[],Int32)\n  nameWithType: HttpListenerPrefixCollection.CopyTo(String[],Int32)\n  fullName: System.Net.HttpListenerPrefixCollection.CopyTo(String[],Int32)\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.HttpListenerPrefixCollection.Count\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Count\n  nameWithType: HttpListenerPrefixCollection.Count\n  fullName: System.Net.HttpListenerPrefixCollection.Count\n- uid: System.Net.HttpListenerPrefixCollection.GetEnumerator\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: HttpListenerPrefixCollection.GetEnumerator()\n  fullName: System.Net.HttpListenerPrefixCollection.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<String>\n  nameWithType: IEnumerator<String>\n  fullName: System.Collections.Generic.IEnumerator<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.HttpListenerPrefixCollection.IsReadOnly\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: HttpListenerPrefixCollection.IsReadOnly\n  fullName: System.Net.HttpListenerPrefixCollection.IsReadOnly\n- uid: System.Net.HttpListenerPrefixCollection.IsSynchronized\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: HttpListenerPrefixCollection.IsSynchronized\n  fullName: System.Net.HttpListenerPrefixCollection.IsSynchronized\n- uid: System.Net.HttpListenerPrefixCollection.Remove(System.String)\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Remove(String)\n  nameWithType: HttpListenerPrefixCollection.Remove(String)\n  fullName: System.Net.HttpListenerPrefixCollection.Remove(String)\n- uid: System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Net.HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Net.HttpListenerPrefixCollection.Add*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Add\n  nameWithType: HttpListenerPrefixCollection.Add\n- uid: System.Net.HttpListenerPrefixCollection.Clear*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Clear\n  nameWithType: HttpListenerPrefixCollection.Clear\n- uid: System.Net.HttpListenerPrefixCollection.Contains*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Contains\n  nameWithType: HttpListenerPrefixCollection.Contains\n- uid: System.Net.HttpListenerPrefixCollection.CopyTo*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: HttpListenerPrefixCollection.CopyTo\n- uid: System.Net.HttpListenerPrefixCollection.Count*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Count\n  nameWithType: HttpListenerPrefixCollection.Count\n- uid: System.Net.HttpListenerPrefixCollection.GetEnumerator*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: HttpListenerPrefixCollection.GetEnumerator\n- uid: System.Net.HttpListenerPrefixCollection.IsReadOnly*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: HttpListenerPrefixCollection.IsReadOnly\n- uid: System.Net.HttpListenerPrefixCollection.IsSynchronized*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: HttpListenerPrefixCollection.IsSynchronized\n- uid: System.Net.HttpListenerPrefixCollection.Remove*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: Remove\n  nameWithType: HttpListenerPrefixCollection.Remove\n- uid: System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Net.HttpListenerPrefixCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: HttpListenerPrefixCollection.System.Collections.IEnumerable.GetEnumerator\n"}