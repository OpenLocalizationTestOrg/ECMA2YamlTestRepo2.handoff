{"nodes":[{"pos":[1099,1111],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1858,1870],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1929,1941],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2737,2749],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3551,3563],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3631,3643],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3689,3701],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4363,4375],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4432,4444],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5092,5104],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5817,5829],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5875,5887],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6727,6739],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6807,6819],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6868,6880],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6939,6951],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  id: ReadOnlyMetadataCollection`1\n  children:\n  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)\n  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator\n  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)\n  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)\n  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly\n  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)\n  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)\n  langs:\n  - csharp\n  name: ReadOnlyMetadataCollection<T>\n  nameWithType: ReadOnlyMetadataCollection<T>\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>\n  type: Class\n  syntax:\n    content: 'public class ReadOnlyMetadataCollection<T> : System.Collections.ObjectModel.ReadOnlyCollection<T> where T : MetadataItem'\n    typeParameters:\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Collections.ObjectModel.ReadOnlyCollection`1\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: ReadOnlyMetadataCollection<T>.Contains(String)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.Contains(String)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  syntax:\n    content: public virtual bool Contains (string identity);\n    parameters:\n    - id: identity\n      type: System.String\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ReadOnlyMetadataCollection<T>.GetEnumerator()\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  syntax:\n    content: public System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.Enumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator\n      description: To be added.\n  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)\n  id: GetValue(System.String,System.Boolean)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  langs:\n  - csharp\n  name: GetValue(String,Boolean)\n  nameWithType: ReadOnlyMetadataCollection<T>.GetValue(String,Boolean)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.GetValue(String,Boolean)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  syntax:\n    content: public virtual T GetValue (string identity, bool ignoreCase);\n    parameters:\n    - id: identity\n      type: System.String\n      description: To be added.\n    - id: ignoreCase\n      type: System.Boolean\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  langs:\n  - csharp\n  name: IndexOf(T)\n  nameWithType: ReadOnlyMetadataCollection<T>.IndexOf(T)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.IndexOf(T)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  syntax:\n    content: public virtual int IndexOf (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly\n  id: IsReadOnly\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: ReadOnlyMetadataCollection<T>.IsReadOnly\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: ReadOnlyMetadataCollection<T>.Item(String)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.Item(String)\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  syntax:\n    content: public virtual T this[string identity] { get; }\n    parameters:\n    - id: identity\n      type: System.String\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)\n  id: TryGetValue(System.String,System.Boolean,`0@)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  langs:\n  - csharp\n  name: TryGetValue(String,Boolean,T)\n  nameWithType: ReadOnlyMetadataCollection<T>.TryGetValue(String,Boolean,T)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.TryGetValue(String,Boolean,T)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  syntax:\n    content: public virtual bool TryGetValue (string identity, bool ignoreCase, out T item);\n    parameters:\n    - id: identity\n      type: System.String\n      description: To be added.\n    - id: ignoreCase\n      type: System.Boolean\n      description: To be added.\n    - id: item\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: Contains(String)\n  nameWithType: ReadOnlyMetadataCollection<T>.Contains(String)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.Contains(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ReadOnlyMetadataCollection<T>.GetEnumerator()\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.GetEnumerator()\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: ReadOnlyMetadataCollection<T>+Enumerator\n  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: GetValue(String,Boolean)\n  nameWithType: ReadOnlyMetadataCollection<T>.GetValue(String,Boolean)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.GetValue(String,Boolean)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: ReadOnlyMetadataCollection<T>.IndexOf(T)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.IndexOf(T)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ReadOnlyMetadataCollection<T>.IsReadOnly\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.IsReadOnly\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: Item(String)\n  nameWithType: ReadOnlyMetadataCollection<T>.Item(String)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.Item(String)\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: TryGetValue(String,Boolean,T)\n  nameWithType: ReadOnlyMetadataCollection<T>.TryGetValue(String,Boolean,T)\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>.TryGetValue(String,Boolean,T)\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains*\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: Contains\n  nameWithType: ReadOnlyMetadataCollection<T>.Contains\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator*\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ReadOnlyMetadataCollection<T>.GetEnumerator\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue*\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: GetValue\n  nameWithType: ReadOnlyMetadataCollection<T>.GetValue\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf*\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: IndexOf\n  nameWithType: ReadOnlyMetadataCollection<T>.IndexOf\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly*\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ReadOnlyMetadataCollection<T>.IsReadOnly\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item*\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: Item\n  nameWithType: ReadOnlyMetadataCollection<T>.Item\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue*\n  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n  isExternal: false\n  name: TryGetValue\n  nameWithType: ReadOnlyMetadataCollection<T>.TryGetValue\n"}