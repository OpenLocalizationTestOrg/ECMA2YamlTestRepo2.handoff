{"nodes":[{"pos":[422,529],"content":"Describes a resource object that supports single phase commit optimization to participate in a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes a resource object that supports single phase commit optimization to participate in a transaction.","pos":[0,107]}]},{"pos":[542,2271],"content":"You should note that even when your resource manager implements this interface to support single phase commit optimization, it is not guaranteed that it receives a single phase commit. The transaction manager can still send two phase commit notifications instead.       To enlist your resource manager as a participant in a transaction, call the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class. Specifically, the `EnlistmentOptions` parameter should equal to <xref:System.Transactions.EnlistmentOptions> to ensure that a single phase commit is performed. If it is mistakenly set to <xref:System.Transactions.EnlistmentOptions>, no single phase commit occurs.       Since the ISinglePhaseNotification interface derives from the <xref:System.Transactions.IEnlistmentNotification> interface, the resource manager must also implement all the methods of the latter for two phase commit notifications.  It is the transaction manager's choice as to whether two phase commit or the single phase commit optimization is used with this resource manager.  However, implementing this interface gives the resource manager the opportunity to take advantage of the optimization when it is available.       If the optimization is used and the transaction manager calls the <xref:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit%2A> method of the enlisted resource, the resource manager should respond to this call by using various methods of the <xref:System.Transactions.SinglePhaseEnlistment> class to inform the transaction manager if the transaction is to be committed or rolled back.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You should note that even when your resource manager implements this interface to support single phase commit optimization, it is not guaranteed that it receives a single phase commit.","pos":[0,184]},{"content":"The transaction manager can still send two phase commit notifications instead.","pos":[185,263]},{"content":"To enlist your resource manager as a participant in a transaction, call the &lt;xref:System.Transactions.Transaction.EnlistVolatile%2A&gt; method or the &lt;xref:System.Transactions.Transaction.EnlistDurable%2A&gt; method of the &lt;xref:System.Transactions.Transaction&gt; class.","pos":[270,532],"source":"       To enlist your resource manager as a participant in a transaction, call the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class."},{"content":"Specifically, the <ph id=\"ph1\">`EnlistmentOptions`</ph> parameter should equal to &lt;xref:System.Transactions.EnlistmentOptions&gt; to ensure that a single phase commit is performed.","pos":[533,692],"source":" Specifically, the `EnlistmentOptions` parameter should equal to <xref:System.Transactions.EnlistmentOptions> to ensure that a single phase commit is performed."},{"content":"If it is mistakenly set to &lt;xref:System.Transactions.EnlistmentOptions&gt;, no single phase commit occurs.","pos":[693,796],"source":" If it is mistakenly set to <xref:System.Transactions.EnlistmentOptions>, no single phase commit occurs."},{"content":"Since the ISinglePhaseNotification interface derives from the &lt;xref:System.Transactions.IEnlistmentNotification&gt; interface, the resource manager must also implement all the methods of the latter for two phase commit notifications.","pos":[803,1033],"source":"       Since the ISinglePhaseNotification interface derives from the <xref:System.Transactions.IEnlistmentNotification> interface, the resource manager must also implement all the methods of the latter for two phase commit notifications."},{"content":"It is the transaction manager's choice as to whether two phase commit or the single phase commit optimization is used with this resource manager.","pos":[1035,1180]},{"content":"However, implementing this interface gives the resource manager the opportunity to take advantage of the optimization when it is available.","pos":[1182,1321]},{"content":"If the optimization is used and the transaction manager calls the &lt;xref:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit%2A&gt; method of the enlisted resource, the resource manager should respond to this call by using various methods of the &lt;xref:System.Transactions.SinglePhaseEnlistment&gt; class to inform the transaction manager if the transaction is to be committed or rolled back.","pos":[1328,1723],"source":"       If the optimization is used and the transaction manager calls the <xref:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit%2A> method of the enlisted resource, the resource manager should respond to this call by using various methods of the <xref:System.Transactions.SinglePhaseEnlistment> class to inform the transaction manager if the transaction is to be committed or rolled back."}]},{"pos":[3052,3158],"content":"Represents the resource manager's implementation of the callback for the single phase commit optimization.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the resource manager's implementation of the callback for the single phase commit optimization.","pos":[0,106]}]},{"pos":[3171,4499],"content":"It is the transaction manager's choice as to whether two phase commit or the single phase commit optimization is used with this resource manager.  For more information on single phase and two phase commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d).       Therefore, on this enlistment of the resource manager, either the SinglePhaseCommit method is called, or the two phase commit methods defined in ther <xref:System.Transactions.IEnlistmentNotification> interface are called.       Your implementation of this method should call either the <xref:System.Transactions.SinglePhaseEnlistment.Committed%2A> method or the <xref:System.Transactions.SinglePhaseEnlistment.Aborted%2A> method of the `singlePhaseEnlistment` parameter to indicate whether the transaction should be committed or rolled back.       The transaction manager calls this method when there is only one volatile enlistment that supports single phase commit, or when there are zero or more volatile enlistments and one durable enlistment. In the latter case, the volatile enlistments receive <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> notifications for two-phase-commit, and the sole durable enlistment receives a single-phase commit notification.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"It is the transaction manager's choice as to whether two phase commit or the single phase commit optimization is used with this resource manager.","pos":[0,145]},{"content":"For more information on single phase and two phase commit, see <bpt id=\"p1\">[</bpt>Committing A Transaction In Single-Phase and Multi-Phase<ept id=\"p1\">](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)</ept>.","pos":[147,339],"source":"  For more information on single phase and two phase commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)."},{"content":"Therefore, on this enlistment of the resource manager, either the SinglePhaseCommit method is called, or the two phase commit methods defined in ther &lt;xref:System.Transactions.IEnlistmentNotification&gt; interface are called.","pos":[346,568],"source":"       Therefore, on this enlistment of the resource manager, either the SinglePhaseCommit method is called, or the two phase commit methods defined in ther <xref:System.Transactions.IEnlistmentNotification> interface are called."},{"content":"Your implementation of this method should call either the &lt;xref:System.Transactions.SinglePhaseEnlistment.Committed%2A&gt; method or the &lt;xref:System.Transactions.SinglePhaseEnlistment.Aborted%2A&gt; method of the <ph id=\"ph1\">`singlePhaseEnlistment`</ph> parameter to indicate whether the transaction should be committed or rolled back.","pos":[575,888],"source":"       Your implementation of this method should call either the <xref:System.Transactions.SinglePhaseEnlistment.Committed%2A> method or the <xref:System.Transactions.SinglePhaseEnlistment.Aborted%2A> method of the `singlePhaseEnlistment` parameter to indicate whether the transaction should be committed or rolled back."},{"content":"The transaction manager calls this method when there is only one volatile enlistment that supports single phase commit, or when there are zero or more volatile enlistments and one durable enlistment.","pos":[895,1094]},{"content":"In the latter case, the volatile enlistments receive &lt;xref:System.Transactions.IEnlistmentNotification.Prepare%2A&gt; notifications for two-phase-commit, and the sole durable enlistment receives a single-phase commit notification.","pos":[1095,1322],"source":" In the latter case, the volatile enlistments receive <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> notifications for two-phase-commit, and the sole durable enlistment receives a single-phase commit notification."}]},{"pos":[4742,4858],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.SinglePhaseEnlistment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to send a response to the transaction manager.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Transactions.SinglePhaseEnlistment\"></xref> used to send a response to the transaction manager."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.ISinglePhaseNotification\n  id: ISinglePhaseNotification\n  children:\n  - System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)\n  langs:\n  - csharp\n  name: ISinglePhaseNotification\n  nameWithType: ISinglePhaseNotification\n  fullName: System.Transactions.ISinglePhaseNotification\n  type: Interface\n  summary: Describes a resource object that supports single phase commit optimization to participate in a transaction.\n  remarks: \"You should note that even when your resource manager implements this interface to support single phase commit optimization, it is not guaranteed that it receives a single phase commit. The transaction manager can still send two phase commit notifications instead.  \\n  \\n To enlist your resource manager as a participant in a transaction, call the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class. Specifically, the `EnlistmentOptions` parameter should equal to <xref:System.Transactions.EnlistmentOptions> to ensure that a single phase commit is performed. If it is mistakenly set to <xref:System.Transactions.EnlistmentOptions>, no single phase commit occurs.  \\n  \\n Since the ISinglePhaseNotification interface derives from the <xref:System.Transactions.IEnlistmentNotification> interface, the resource manager must also implement all the methods of the latter for two phase commit notifications.  It is the transaction manager's choice as to whether two phase commit or the single phase commit optimization is used with this resource manager.  However, implementing this interface gives the resource manager the opportunity to take advantage of the optimization when it is available.  \\n  \\n If the optimization is used and the transaction manager calls the <xref:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit%2A> method of the enlisted resource, the resource manager should respond to this call by using various methods of the <xref:System.Transactions.SinglePhaseEnlistment> class to inform the transaction manager if the transaction is to be committed or rolled back.\"\n  syntax:\n    content: 'public interface ISinglePhaseNotification : System.Transactions.IEnlistmentNotification'\n  implements:\n  - System.Transactions.IEnlistmentNotification\n  platform:\n  - net462\n- uid: System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)\n  id: SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)\n  parent: System.Transactions.ISinglePhaseNotification\n  langs:\n  - csharp\n  name: SinglePhaseCommit(SinglePhaseEnlistment)\n  nameWithType: ISinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment)\n  fullName: System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Represents the resource manager's implementation of the callback for the single phase commit optimization.\n  remarks: \"It is the transaction manager's choice as to whether two phase commit or the single phase commit optimization is used with this resource manager.  For more information on single phase and two phase commit, see [Committing A Transaction In Single-Phase and Multi-Phase](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d).  \\n  \\n Therefore, on this enlistment of the resource manager, either the SinglePhaseCommit method is called, or the two phase commit methods defined in ther <xref:System.Transactions.IEnlistmentNotification> interface are called.  \\n  \\n Your implementation of this method should call either the <xref:System.Transactions.SinglePhaseEnlistment.Committed%2A> method or the <xref:System.Transactions.SinglePhaseEnlistment.Aborted%2A> method of the `singlePhaseEnlistment` parameter to indicate whether the transaction should be committed or rolled back.  \\n  \\n The transaction manager calls this method when there is only one volatile enlistment that supports single phase commit, or when there are zero or more volatile enlistments and one durable enlistment. In the latter case, the volatile enlistments receive <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> notifications for two-phase-commit, and the sole durable enlistment receives a single-phase commit notification.\"\n  syntax:\n    content: public void SinglePhaseCommit (System.Transactions.SinglePhaseEnlistment singlePhaseEnlistment);\n    parameters:\n    - id: singlePhaseEnlistment\n      type: System.Transactions.SinglePhaseEnlistment\n      description: A <xref href=\"System.Transactions.SinglePhaseEnlistment\"></xref> used to send a response to the transaction manager.\n  overload: System.Transactions.ISinglePhaseNotification.SinglePhaseCommit*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)\n  parent: System.Transactions.ISinglePhaseNotification\n  isExternal: false\n  name: SinglePhaseCommit(SinglePhaseEnlistment)\n  nameWithType: ISinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment)\n  fullName: System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment)\n- uid: System.Transactions.SinglePhaseEnlistment\n  parent: System.Transactions\n  isExternal: false\n  name: SinglePhaseEnlistment\n  nameWithType: SinglePhaseEnlistment\n  fullName: System.Transactions.SinglePhaseEnlistment\n- uid: System.Transactions.ISinglePhaseNotification.SinglePhaseCommit*\n  parent: System.Transactions.ISinglePhaseNotification\n  isExternal: false\n  name: SinglePhaseCommit\n  nameWithType: ISinglePhaseNotification.SinglePhaseCommit\n"}