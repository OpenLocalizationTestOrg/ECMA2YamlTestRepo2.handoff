{"nodes":[{"pos":[4449,4581],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Strings\" name=\"Strings\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> module contains procedures used to perform string operations.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_Strings\" name=\"Strings\" href=\"\"></xref> module contains procedures used to perform string operations."},{"pos":[4593,4702],"content":"This module supports the Visual Basic language keywords and run-time library members that manipulate strings.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This module supports the Visual Basic language keywords and run-time library members that manipulate strings.","pos":[0,109]}]},{"pos":[5454,5599],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character."},{"pos":[5612,6327],"content":"`Asc` returns the *code point*, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.       `AscW` returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.      > [!NOTE] >  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">`Asc`</ph> returns the <bpt id=\"p1\">*</bpt>code point<ept id=\"p1\">*</ept>, or character code, for the input character.","pos":[0,75],"source":"`Asc` returns the *code point*, or character code, for the input character."},{"content":"This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.","pos":[76,215]},{"content":"<ph id=\"ph1\">`AscW`</ph> returns the Unicode code point for the input character.","pos":[222,284],"source":"`AscW` returns the Unicode code point for the input character."},{"content":"This can be 0 through 65535.","pos":[285,313]},{"content":"The returned value is independent of the culture and code page settings for the current thread.","pos":[314,409]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.","pos":[415,535],"source":"      > [!NOTE] >  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[536,629]},{"content":"All Visual Basic 2005 strings are in Unicode, and <ph id=\"ph1\">`AscB`</ph> is no longer supported.","pos":[630,710],"source":" All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported."}]},{"pos":[6718,7188],"content":"Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input. If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> expression.","pos":[10,160],"source":" Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."},{"content":"If <ph id=\"ph1\">`String`</ph> is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression, only the first character of the string is used for input.","pos":[161,312],"source":" If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input."},{"content":"If <ph id=\"ph1\">`String`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or contains no characters, an &lt;xref:System.ArgumentException&gt; error occurs.","pos":[313,470],"source":" If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs."}]},{"pos":[7245,7390],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character."},{"pos":[7830,7975],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character."},{"pos":[7988,8703],"content":"`Asc` returns the *code point*, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.       `AscW` returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.      > [!NOTE] >  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">`Asc`</ph> returns the <bpt id=\"p1\">*</bpt>code point<ept id=\"p1\">*</ept>, or character code, for the input character.","pos":[0,75],"source":"`Asc` returns the *code point*, or character code, for the input character."},{"content":"This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.","pos":[76,215]},{"content":"<ph id=\"ph1\">`AscW`</ph> returns the Unicode code point for the input character.","pos":[222,284],"source":"`AscW` returns the Unicode code point for the input character."},{"content":"This can be 0 through 65535.","pos":[285,313]},{"content":"The returned value is independent of the culture and code page settings for the current thread.","pos":[314,409]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.","pos":[415,535],"source":"      > [!NOTE] >  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[536,629]},{"content":"All Visual Basic 2005 strings are in Unicode, and <ph id=\"ph1\">`AscB`</ph> is no longer supported.","pos":[630,710],"source":" All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported."}]},{"pos":[9099,9569],"content":"Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input. If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> expression.","pos":[10,160],"source":" Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."},{"content":"If <ph id=\"ph1\">`String`</ph> is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression, only the first character of the string is used for input.","pos":[161,312],"source":" If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input."},{"content":"If <ph id=\"ph1\">`String`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or contains no characters, an &lt;xref:System.ArgumentException&gt; error occurs.","pos":[313,470],"source":" If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs."}]},{"pos":[9626,9771],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character."},{"pos":[10206,10351],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character."},{"pos":[10364,11079],"content":"`Asc` returns the *code point*, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.       `AscW` returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.      > [!NOTE] >  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">`Asc`</ph> returns the <bpt id=\"p1\">*</bpt>code point<ept id=\"p1\">*</ept>, or character code, for the input character.","pos":[0,75],"source":"`Asc` returns the *code point*, or character code, for the input character."},{"content":"This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.","pos":[76,215]},{"content":"<ph id=\"ph1\">`AscW`</ph> returns the Unicode code point for the input character.","pos":[222,284],"source":"`AscW` returns the Unicode code point for the input character."},{"content":"This can be 0 through 65535.","pos":[285,313]},{"content":"The returned value is independent of the culture and code page settings for the current thread.","pos":[314,409]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.","pos":[415,535],"source":"      > [!NOTE] >  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[536,629]},{"content":"All Visual Basic 2005 strings are in Unicode, and <ph id=\"ph1\">`AscB`</ph> is no longer supported.","pos":[630,710],"source":" All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported."}]},{"pos":[11471,11941],"content":"Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input. If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> expression.","pos":[10,160],"source":" Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."},{"content":"If <ph id=\"ph1\">`String`</ph> is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression, only the first character of the string is used for input.","pos":[161,312],"source":" If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input."},{"content":"If <ph id=\"ph1\">`String`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or contains no characters, an &lt;xref:System.ArgumentException&gt; error occurs.","pos":[313,470],"source":" If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs."}]},{"pos":[11998,12143],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character."},{"pos":[12589,12734],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character."},{"pos":[12747,13462],"content":"`Asc` returns the *code point*, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.       `AscW` returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.      > [!NOTE] >  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">`Asc`</ph> returns the <bpt id=\"p1\">*</bpt>code point<ept id=\"p1\">*</ept>, or character code, for the input character.","pos":[0,75],"source":"`Asc` returns the *code point*, or character code, for the input character."},{"content":"This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.","pos":[76,215]},{"content":"<ph id=\"ph1\">`AscW`</ph> returns the Unicode code point for the input character.","pos":[222,284],"source":"`AscW` returns the Unicode code point for the input character."},{"content":"This can be 0 through 65535.","pos":[285,313]},{"content":"The returned value is independent of the culture and code page settings for the current thread.","pos":[314,409]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.","pos":[415,535],"source":"      > [!NOTE] >  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[536,629]},{"content":"All Visual Basic 2005 strings are in Unicode, and <ph id=\"ph1\">`AscB`</ph> is no longer supported.","pos":[630,710],"source":" All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported."}]},{"pos":[13859,14329],"content":"Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input. If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> expression.","pos":[10,160],"source":" Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."},{"content":"If <ph id=\"ph1\">`String`</ph> is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression, only the first character of the string is used for input.","pos":[161,312],"source":" If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input."},{"content":"If <ph id=\"ph1\">`String`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or contains no characters, an &lt;xref:System.ArgumentException&gt; error occurs.","pos":[313,470],"source":" If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs."}]},{"pos":[14386,14531],"content":"Returns an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.","needQuote":true,"needEscape":true,"source":"Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character."},{"pos":[14967,15034],"content":"Returns the character associated with the specified character code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the character associated with the specified character code.","pos":[0,67]}]},{"pos":[15047,16779],"content":"The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`. For example, -29183 is a `Short` but +36353 is an `Integer`. This also facilitates compatibility with Visual Basic 6.0.       `Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=fullName> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS). It then takes `CharCode` as a code point in the appropriate set. The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.       The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace. You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.       `ChrW` takes `CharCode` as a Unicode code point. The range is independent of the culture and code page settings for the current thread. Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.       Numbers from 0 through 31 are the same as standard nonprintable ASCII codes. For example, `Chr(10)` returns a line feed character.      > [!NOTE] >  The `ChrB` function in earlier versions of Visual Basic returns a single byte. It is used primarily for converting strings in double-byte character set (DBCS) applications. All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The asymmetric range accepted for <ph id=\"ph1\">`CharCode`</ph> compensates for the storage differences between the <ph id=\"ph2\">`Short`</ph> and the <ph id=\"ph3\">`Integer`</ph>.","pos":[0,123],"source":"The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`."},{"content":"For example, -29183 is a <ph id=\"ph1\">`Short`</ph> but +36353 is an <ph id=\"ph2\">`Integer`</ph>.","pos":[124,184],"source":" For example, -29183 is a `Short` but +36353 is an `Integer`."},{"content":"This also facilitates compatibility with Visual Basic 6.0.","pos":[185,243]},{"content":"<ph id=\"ph1\">`Chr`</ph> uses the &lt;xref:System.Text.Encoding&gt; class in the &lt;xref:System.Text?displayProperty=fullName&gt; namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).","pos":[250,477],"source":"`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=fullName> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS)."},{"content":"It then takes <ph id=\"ph1\">`CharCode`</ph> as a code point in the appropriate set.","pos":[478,542],"source":" It then takes `CharCode` as a code point in the appropriate set."},{"content":"The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.","pos":[543,639]},{"content":"The returned value depends on the code page for the current thread, which is contained in the &lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt; property of the &lt;xref:System.Globalization.TextInfo&gt; class in the &lt;xref:System.Globalization&gt; namespace.","pos":[646,897],"source":"       The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace."},{"content":"You can obtain &lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt; by specifying <ph id=\"ph1\">`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</ph>.","pos":[898,1052],"source":" You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`."},{"content":"<ph id=\"ph1\">`ChrW`</ph> takes <ph id=\"ph2\">`CharCode`</ph> as a Unicode code point.","pos":[1059,1107],"source":"`ChrW` takes `CharCode` as a Unicode code point."},{"content":"The range is independent of the culture and code page settings for the current thread.","pos":[1108,1194]},{"content":"Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.","pos":[1195,1291]},{"content":"Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.","pos":[1298,1374]},{"content":"For example, <ph id=\"ph1\">`Chr(10)`</ph> returns a line feed character.","pos":[1375,1428],"source":" For example, `Chr(10)` returns a line feed character."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`ChrB`</ph> function in earlier versions of Visual Basic returns a single byte.","pos":[1434,1525],"source":"      > [!NOTE] >  The `ChrB` function in earlier versions of Visual Basic returns a single byte."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[1526,1619]},{"content":"All strings in Visual Basic and the .NET Framework are in Unicode, and <ph id=\"ph1\">`ChrB`</ph> is no longer supported.","pos":[1620,1721],"source":" All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported."}]},{"pos":[17157,17316],"content":"Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression representing the `code point`, or character code, for the character.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression representing the <ph id=\"ph1\">`code point`</ph>, or character code, for the character.","pos":[10,159],"source":" An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression representing the `code point`, or character code, for the character."}]},{"pos":[17372,17439],"content":"Returns the character associated with the specified character code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the character associated with the specified character code.","pos":[0,67]}]},{"pos":[17595,17699],"content":"<ph id=\"ph1\">&lt;code&gt;CharCode&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 0 or <ph id=\"ph3\">&amp;gt;</ph> 255 for <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Chr\" name=\"Chr\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>CharCode</code> &lt; 0 or &gt; 255 for <xref uid=\"langword_csharp_Chr\" name=\"Chr\" href=\"\"></xref>."},{"pos":[18075,18142],"content":"Returns the character associated with the specified character code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the character associated with the specified character code.","pos":[0,67]}]},{"pos":[18155,19887],"content":"The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`. For example, -29183 is a `Short` but +36353 is an `Integer`. This also facilitates compatibility with Visual Basic 6.0.       `Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=fullName> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS). It then takes `CharCode` as a code point in the appropriate set. The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.       The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace. You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.       `ChrW` takes `CharCode` as a Unicode code point. The range is independent of the culture and code page settings for the current thread. Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.       Numbers from 0 through 31 are the same as standard nonprintable ASCII codes. For example, `Chr(10)` returns a line feed character.      > [!NOTE] >  The `ChrB` function in earlier versions of Visual Basic returns a single byte. It is used primarily for converting strings in double-byte character set (DBCS) applications. All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The asymmetric range accepted for <ph id=\"ph1\">`CharCode`</ph> compensates for the storage differences between the <ph id=\"ph2\">`Short`</ph> and the <ph id=\"ph3\">`Integer`</ph>.","pos":[0,123],"source":"The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`."},{"content":"For example, -29183 is a <ph id=\"ph1\">`Short`</ph> but +36353 is an <ph id=\"ph2\">`Integer`</ph>.","pos":[124,184],"source":" For example, -29183 is a `Short` but +36353 is an `Integer`."},{"content":"This also facilitates compatibility with Visual Basic 6.0.","pos":[185,243]},{"content":"<ph id=\"ph1\">`Chr`</ph> uses the &lt;xref:System.Text.Encoding&gt; class in the &lt;xref:System.Text?displayProperty=fullName&gt; namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).","pos":[250,477],"source":"`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=fullName> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS)."},{"content":"It then takes <ph id=\"ph1\">`CharCode`</ph> as a code point in the appropriate set.","pos":[478,542],"source":" It then takes `CharCode` as a code point in the appropriate set."},{"content":"The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.","pos":[543,639]},{"content":"The returned value depends on the code page for the current thread, which is contained in the &lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt; property of the &lt;xref:System.Globalization.TextInfo&gt; class in the &lt;xref:System.Globalization&gt; namespace.","pos":[646,897],"source":"       The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace."},{"content":"You can obtain &lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt; by specifying <ph id=\"ph1\">`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</ph>.","pos":[898,1052],"source":" You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`."},{"content":"<ph id=\"ph1\">`ChrW`</ph> takes <ph id=\"ph2\">`CharCode`</ph> as a Unicode code point.","pos":[1059,1107],"source":"`ChrW` takes `CharCode` as a Unicode code point."},{"content":"The range is independent of the culture and code page settings for the current thread.","pos":[1108,1194]},{"content":"Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.","pos":[1195,1291]},{"content":"Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.","pos":[1298,1374]},{"content":"For example, <ph id=\"ph1\">`Chr(10)`</ph> returns a line feed character.","pos":[1375,1428],"source":" For example, `Chr(10)` returns a line feed character."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`ChrB`</ph> function in earlier versions of Visual Basic returns a single byte.","pos":[1434,1525],"source":"      > [!NOTE] >  The `ChrB` function in earlier versions of Visual Basic returns a single byte."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[1526,1619]},{"content":"All strings in Visual Basic and the .NET Framework are in Unicode, and <ph id=\"ph1\">`ChrB`</ph> is no longer supported.","pos":[1620,1721],"source":" All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported."}]},{"pos":[20265,20424],"content":"Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression representing the `code point`, or character code, for the character.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression representing the <ph id=\"ph1\">`code point`</ph>, or character code, for the character.","pos":[10,159],"source":" An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression representing the `code point`, or character code, for the character."}]},{"pos":[20480,20547],"content":"Returns the character associated with the specified character code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the character associated with the specified character code.","pos":[0,67]}]},{"pos":[20704,20817],"content":"<ph id=\"ph1\">&lt;code&gt;CharCode&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> -32768 or <ph id=\"ph3\">&amp;gt;</ph> 65535 for <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_ChrW\" name=\"ChrW\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>CharCode</code> &lt; -32768 or &gt; 65535 for <xref uid=\"langword_csharp_ChrW\" name=\"ChrW\" href=\"\"></xref>."},{"pos":[21435,21593],"content":"Returns a zero-based array containing a subset of a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array based on specified filter criteria.","needQuote":true,"needEscape":true,"source":"Returns a zero-based array containing a subset of a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array based on specified filter criteria."},{"pos":[21606,22129],"content":"If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array. An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.       The array returned by the `Filter` function contains only enough elements to contain the number of matched items.       The `Compare` argument can have the following values.      |||   |-|-|   |Constant|Description|   |`CompareMethod.Binary`|Performs a binary comparison|   |`CompareMethod.Text`|Performs a textual comparison|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If no matches of <ph id=\"ph1\">`Match`</ph> are found within <ph id=\"ph2\">`Source`</ph>, the <ph id=\"ph3\">`Filter`</ph> function returns an empty array.","pos":[0,97],"source":"If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array."},{"content":"An error occurs if <ph id=\"ph1\">`Source`</ph> is set to <ph id=\"ph2\">`Nothing`</ph> or is not a one-dimensional array.","pos":[98,180],"source":" An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array."},{"content":"The array returned by the <ph id=\"ph1\">`Filter`</ph> function contains only enough elements to contain the number of matched items.","pos":[187,300],"source":"       The array returned by the `Filter` function contains only enough elements to contain the number of matched items."},{"content":"The <ph id=\"ph1\">`Compare`</ph> argument can have the following values.","pos":[307,360],"source":"       The `Compare` argument can have the following values."},{"content":"|||   |-|-|   |Constant|Description|   |<ph id=\"ph1\">`CompareMethod.Binary`</ph>|Performs a binary comparison|   |<ph id=\"ph2\">`CompareMethod.Text`</ph>|Performs a textual comparison|","pos":[366,513],"source":"      |||   |-|-|   |Constant|Description|   |`CompareMethod.Binary`|Performs a binary comparison|   |`CompareMethod.Text`|Performs a textual comparison|"}]},{"pos":[22584,22642],"content":"Required. One-dimensional array of strings to be searched.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. One-dimensional array of strings to be searched.","pos":[0,58],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"One-dimensional array of strings to be searched.","pos":[10,58]}]}]},{"pos":[22704,22735],"content":"Required. String to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. String to search for.","pos":[0,31],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"String to search for.","pos":[10,31]}]}]},{"pos":[22800,23417],"content":"Optional. <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> value indicating whether to return substrings that include or exclude `Match`. If `Include` is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that contains `Match` as a substring. If `Include` is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that does not contain `Match` as a substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value indicating whether to return substrings that include or exclude <ph id=\"ph1\">`Match`</ph>.","pos":[10,155],"source":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> value indicating whether to return substrings that include or exclude `Match`."},{"content":"If <ph id=\"ph1\">`Include`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the subset of the array that contains <ph id=\"ph2\">`Match`</ph> as a substring.","pos":[156,381],"source":" If `Include` is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that contains `Match` as a substring."},{"content":"If <ph id=\"ph1\">`Include`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the subset of the array that does not contain <ph id=\"ph2\">`Match`</ph> as a substring.","pos":[382,617],"source":" If `Include` is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that does not contain `Match` as a substring."}]},{"pos":[23503,23602],"content":"Optional. Numeric value indicating the kind of string comparison to use. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric value indicating the kind of string comparison to use. See \"Settings\" for values.","pos":[0,99],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value indicating the kind of string comparison to use.","pos":[10,72]},{"content":"See \"Settings\" for values.","pos":[73,99]}]}]},{"pos":[23662,23820],"content":"Returns a zero-based array containing a subset of a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array based on specified filter criteria.","needQuote":true,"needEscape":true,"source":"Returns a zero-based array containing a subset of a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array based on specified filter criteria."},{"pos":[23979,24103],"content":"<ph id=\"ph1\">&lt;code&gt;Source&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is not a one-dimensional array.","needQuote":true,"needEscape":true,"source":"<code>Source</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or is not a one-dimensional array."},{"pos":[24721,24879],"content":"Returns a zero-based array containing a subset of a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array based on specified filter criteria.","needQuote":true,"needEscape":true,"source":"Returns a zero-based array containing a subset of a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array based on specified filter criteria."},{"pos":[24892,25415],"content":"If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array. An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.       The array returned by the `Filter` function contains only enough elements to contain the number of matched items.       The `Compare` argument can have the following values.      |||   |-|-|   |Constant|Description|   |`CompareMethod.Binary`|Performs a binary comparison|   |`CompareMethod.Text`|Performs a textual comparison|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If no matches of <ph id=\"ph1\">`Match`</ph> are found within <ph id=\"ph2\">`Source`</ph>, the <ph id=\"ph3\">`Filter`</ph> function returns an empty array.","pos":[0,97],"source":"If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array."},{"content":"An error occurs if <ph id=\"ph1\">`Source`</ph> is set to <ph id=\"ph2\">`Nothing`</ph> or is not a one-dimensional array.","pos":[98,180],"source":" An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array."},{"content":"The array returned by the <ph id=\"ph1\">`Filter`</ph> function contains only enough elements to contain the number of matched items.","pos":[187,300],"source":"       The array returned by the `Filter` function contains only enough elements to contain the number of matched items."},{"content":"The <ph id=\"ph1\">`Compare`</ph> argument can have the following values.","pos":[307,360],"source":"       The `Compare` argument can have the following values."},{"content":"|||   |-|-|   |Constant|Description|   |<ph id=\"ph1\">`CompareMethod.Binary`</ph>|Performs a binary comparison|   |<ph id=\"ph2\">`CompareMethod.Text`</ph>|Performs a textual comparison|","pos":[366,513],"source":"      |||   |-|-|   |Constant|Description|   |`CompareMethod.Binary`|Performs a binary comparison|   |`CompareMethod.Text`|Performs a textual comparison|"}]},{"pos":[25870,25928],"content":"Required. One-dimensional array of strings to be searched.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. One-dimensional array of strings to be searched.","pos":[0,58],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"One-dimensional array of strings to be searched.","pos":[10,58]}]}]},{"pos":[25990,26021],"content":"Required. String to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. String to search for.","pos":[0,31],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"String to search for.","pos":[10,31]}]}]},{"pos":[26086,26703],"content":"Optional. <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> value indicating whether to return substrings that include or exclude `Match`. If `Include` is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that contains `Match` as a substring. If `Include` is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that does not contain `Match` as a substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value indicating whether to return substrings that include or exclude <ph id=\"ph1\">`Match`</ph>.","pos":[10,155],"source":"<xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> value indicating whether to return substrings that include or exclude `Match`."},{"content":"If <ph id=\"ph1\">`Include`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the subset of the array that contains <ph id=\"ph2\">`Match`</ph> as a substring.","pos":[156,381],"source":" If `Include` is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that contains `Match` as a substring."},{"content":"If <ph id=\"ph1\">`Include`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the subset of the array that does not contain <ph id=\"ph2\">`Match`</ph> as a substring.","pos":[382,617],"source":" If `Include` is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that does not contain `Match` as a substring."}]},{"pos":[26789,26888],"content":"Optional. Numeric value indicating the kind of string comparison to use. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric value indicating the kind of string comparison to use. See \"Settings\" for values.","pos":[0,99],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value indicating the kind of string comparison to use.","pos":[10,72]},{"content":"See \"Settings\" for values.","pos":[73,99]}]}]},{"pos":[26948,27106],"content":"Returns a zero-based array containing a subset of a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array based on specified filter criteria.","needQuote":true,"needEscape":true,"source":"Returns a zero-based array containing a subset of a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array based on specified filter criteria."},{"pos":[27265,27389],"content":"<ph id=\"ph1\">&lt;code&gt;Source&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is not a one-dimensional array.","needQuote":true,"needEscape":true,"source":"<code>Source</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or is not a one-dimensional array."},{"pos":[27829,27980],"content":"Returns a string formatted according to instructions contained in a format <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","needQuote":true,"needEscape":true,"source":"Returns a string formatted according to instructions contained in a format <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."},{"pos":[49889,49920],"content":"Required. Any valid expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Any valid expression.","pos":[0,31],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid expression.","pos":[10,31]}]}]},{"pos":[49982,50105],"content":"Optional. A valid named or user-defined format <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A valid named or user-defined format <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,123],"source":" A valid named or user-defined format <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[50163,50314],"content":"Returns a string formatted according to instructions contained in a format <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","needQuote":true,"needEscape":true,"source":"Returns a string formatted according to instructions contained in a format <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."},{"pos":[51123,51237],"content":"Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.","pos":[0,114]}]},{"pos":[51250,52067],"content":"When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.       The position of the currency symbol relative to the currency value is determined by the system's regional settings.      > [!NOTE] >  All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab.       The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values.      |||   |-|-|   |Value|Description|   |`TriState.True`|True|   |`TriState.False`|False|   |`TriState.UseDefault`|The computer's regional settings|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.","pos":[0,115]},{"content":"The position of the currency symbol relative to the currency value is determined by the system's regional settings.","pos":[122,237]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  All settings information comes from the locale of the application.","pos":[243,322],"source":"      > [!NOTE] >  All settings information comes from the locale of the application."},{"content":"By default, that will be the locale set in the control panel.","pos":[323,384]},{"content":"However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the <ph id=\"ph1\">`Number`</ph> tab.","pos":[385,513],"source":" However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab."},{"content":"The <ph id=\"ph1\">`IncludeLeadingDigit`</ph>, <ph id=\"ph2\">`UseParensForNegativeNumbers`</ph>, and <ph id=\"ph3\">`GroupDigits`</ph> arguments take the following TriState enumeration values.","pos":[520,653],"source":"       The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values."},{"content":"|||   |-|-|   |Value|Description|   |<ph id=\"ph1\">`TriState.True`</ph>|True|   |<ph id=\"ph2\">`TriState.False`</ph>|False|   |<ph id=\"ph3\">`TriState.UseDefault`</ph>|The computer's regional settings|","pos":[659,803],"source":"      |||   |-|-|   |Value|Description|   |`TriState.True`|True|   |`TriState.False`|False|   |`TriState.UseDefault`|The computer's regional settings|"}]},{"pos":[52743,52780],"content":"Required. Expression to be formatted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Expression to be formatted.","pos":[0,37],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Expression to be formatted.","pos":[10,37]}]}]},{"pos":[52857,53035],"content":"Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.","pos":[0,178],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value indicating how many places are displayed to the right of the decimal.","pos":[10,93]},{"content":"Default value is –1, which indicates that the computer's regional settings are used.","pos":[94,178]}]}]},{"pos":[53128,53308],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not a leading zero is displayed for fractional values. See \"Remarks\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that indicates whether or not a leading zero is displayed for fractional values.","pos":[10,154],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not a leading zero is displayed for fractional values."},{"content":"See \"Remarks\" for values.","pos":[155,180]}]},{"pos":[53409,53583],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not to place negative values within parentheses. See \"Remarks\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that indicates whether or not to place negative values within parentheses.","pos":[10,148],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not to place negative values within parentheses."},{"content":"See \"Remarks\" for values.","pos":[149,174]}]},{"pos":[53668,53890],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See \"Remarks\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.","pos":[10,196],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings."},{"content":"See \"Remarks\" for values.","pos":[197,222]}]},{"pos":[53948,54062],"content":"Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.","pos":[0,114]}]},{"pos":[54229,54285],"content":"Number of digits after decimal point is greater than 99.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number of digits after decimal point is greater than 99.","pos":[0,56]}]},{"pos":[54386,54406],"content":"Type is not numeric.","needQuote":true,"needEscape":true,"nodes":[{"content":"Type is not numeric.","pos":[0,20]}]},{"pos":[54946,55005],"content":"Returns a string expression representing a date/time value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string expression representing a date/time value.","pos":[0,59]}]},{"pos":[55018,56975],"content":"The `Date` data type always contains both date and time information. For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time. If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string. For example, if you convert #1/1/0001 9:30:00# to a string, the result is \"9:30:00 AM\"; the date information is suppressed. However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`.      > [!NOTE] >  If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application. However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture. This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly.       The `NamedFormat` argument has the following settings.      |||   |-|-|   |Constant|Description|   |`DateFormat.GeneralDate`|Display a date and/or time. Display a date part as a short date. If there is a time part, display it as a long time. If present, both parts display.|   |`DateFormat.LongDate`|Display a date using the long date format specified in your computer's regional settings.|   |`DateFormat.ShortDate`|Display a date using the short date format specified in your computer's regional settings.|   |`DateFormat.LongTime`|Display a time using the time format specified in your computer's regional settings.|   |`DateFormat.ShortTime`|Display a time using the 24-hour format (hh:mm).|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`Date`</ph> data type always contains both date and time information.","pos":[0,68],"source":"The `Date` data type always contains both date and time information."},{"content":"For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.","pos":[69,252]},{"content":"If you format a <ph id=\"ph1\">`Date`</ph> value as a date/time string, <ph id=\"ph2\">`FormatDateTime`</ph> does not include neutral values in the resulting string.","pos":[253,378],"source":" If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string."},{"content":"For example, if you convert #1/1/0001 9:30:00# to a string, the result is \"9:30:00 AM\"; the date information is suppressed.","pos":[379,502]},{"content":"However, the date information is still present in the original <ph id=\"ph1\">`Date`</ph> value and can be recovered with functions such as <ph id=\"ph2\">`DatePart`</ph>.","pos":[503,634],"source":" However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you pass the <ph id=\"ph2\">`Expression`</ph> argument as a <ph id=\"ph3\">`String`</ph> literal, <ph id=\"ph4\">`FormatDateTime`</ph> interprets it according to the &lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt; setting of your application.","pos":[640,848],"source":"      > [!NOTE] >  If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application."},{"content":"However, if you pass it as a <ph id=\"ph1\">`Date`</ph> literal, use the format #mm/dd/yyyy#, because <ph id=\"ph2\">`FormatDateTime`</ph> always interprets a <ph id=\"ph3\">`Date`</ph> literal according to the English (US) culture.","pos":[849,1021],"source":" However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture."},{"content":"This is necessary because, if an application is developed and coded using <ph id=\"ph1\">`Date`</ph> literals from one culture, but is then executed on a platform with a different culture, the <ph id=\"ph2\">`Date`</ph> literals could be parsed incorrectly.","pos":[1022,1239],"source":" This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly."},{"content":"The <ph id=\"ph1\">`NamedFormat`</ph> argument has the following settings.","pos":[1246,1300],"source":"       The `NamedFormat` argument has the following settings."},{"content":"|||   |-|-|   |Constant|Description|   |<ph id=\"ph1\">`DateFormat.GeneralDate`</ph>|Display a date and/or time.","pos":[1306,1398],"source":"      |||   |-|-|   |Constant|Description|   |`DateFormat.GeneralDate`|Display a date and/or time."},{"content":"Display a date part as a short date.","pos":[1399,1435]},{"content":"If there is a time part, display it as a long time.","pos":[1436,1487]},{"content":"If present, both parts display.|   |<ph id=\"ph1\">`DateFormat.LongDate`</ph>|Display a date using the long date format specified in your computer's regional settings.|   |<ph id=\"ph2\">`DateFormat.ShortDate`</ph>|Display a date using the short date format specified in your computer's regional settings.|   |<ph id=\"ph3\">`DateFormat.LongTime`</ph>|Display a time using the time format specified in your computer's regional settings.|   |<ph id=\"ph4\">`DateFormat.ShortTime`</ph>|Display a time using the 24-hour format (hh:mm).|","pos":[1488,1941],"source":" If present, both parts display.|   |`DateFormat.LongDate`|Display a date using the long date format specified in your computer's regional settings.|   |`DateFormat.ShortDate`|Display a date using the short date format specified in your computer's regional settings.|   |`DateFormat.LongTime`|Display a time using the time format specified in your computer's regional settings.|   |`DateFormat.ShortTime`|Display a time using the 24-hour format (hh:mm).|"}]},{"pos":[57419,57517],"content":"Required. <xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"></xref> expression to be formatted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression to be formatted.","pos":[10,98],"source":"<xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"></xref> expression to be formatted."}]},{"pos":[57604,57787],"content":"Optional. Numeric value that indicates the date/time format used. If omitted, <xref uid=\"langword_csharp_DateFormat.GeneralDate\" name=\"DateFormat.GeneralDate\" href=\"\"></xref> is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value that indicates the date/time format used.","pos":[10,65]},{"content":"If omitted, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DateFormat.GeneralDate\" name=\"DateFormat.GeneralDate\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is used.","pos":[66,183],"source":" If omitted, <xref uid=\"langword_csharp_DateFormat.GeneralDate\" name=\"DateFormat.GeneralDate\" href=\"\"></xref> is used."}]},{"pos":[57845,57904],"content":"Returns a string expression representing a date/time value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string expression representing a date/time value.","pos":[0,59]}]},{"pos":[58071,58117],"content":"<ph id=\"ph1\">&lt;code&gt;NamedFormat&lt;/code&gt;</ph> setting is not valid.","needQuote":true,"needEscape":true,"source":"<code>NamedFormat</code> setting is not valid."},{"pos":[58849,58893],"content":"Returns an expression formatted as a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an expression formatted as a number.","pos":[0,44]}]},{"pos":[58906,59529],"content":"When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.      > [!NOTE] >  All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework.       The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.      |||   |-|-|   |Constant|Description|   |`TriState.True`|True|   |`TriState.False`|False|   |`TriState.UseDefault`|The computer's regional settings|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.","pos":[0,117]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  All settings information comes from the locale of the application.","pos":[123,202],"source":"      > [!NOTE] >  All settings information comes from the locale of the application."},{"content":"By default, that will be the locale set in the control panel.","pos":[203,264]},{"content":"However, it may be changed programmatically by using the .NET Framework.","pos":[265,337]},{"content":"The <ph id=\"ph1\">`IncludeLeadingDigit`</ph>, <ph id=\"ph2\">`UseParensForNegativeNumbers`</ph>, and <ph id=\"ph3\">`GroupDigits`</ph> arguments have the following settings.","pos":[344,458],"source":"       The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings."},{"content":"|||   |-|-|   |Constant|Description|   |<ph id=\"ph1\">`TriState.True`</ph>|True|   |<ph id=\"ph2\">`TriState.False`</ph>|False|   |<ph id=\"ph3\">`TriState.UseDefault`</ph>|The computer's regional settings|","pos":[464,611],"source":"      |||   |-|-|   |Constant|Description|   |`TriState.True`|True|   |`TriState.False`|False|   |`TriState.UseDefault`|The computer's regional settings|"}]},{"pos":[60182,60219],"content":"Required. Expression to be formatted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Expression to be formatted.","pos":[0,37],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Expression to be formatted.","pos":[10,37]}]}]},{"pos":[60296,60478],"content":"Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.","pos":[0,182],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value indicating how many places are displayed to the right of the decimal.","pos":[10,93]},{"content":"The default value is –1, which indicates that the computer's regional settings are used.","pos":[94,182]}]}]},{"pos":[60571,60739],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether a leading 0 is displayed for fractional values. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> constant that indicates whether a leading 0 is displayed for fractional values.","pos":[10,141],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether a leading 0 is displayed for fractional values."},{"content":"See \"Settings\" for values.","pos":[142,168]}]},{"pos":[60840,61005],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether to place negative values within parentheses. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> constant that indicates whether to place negative values within parentheses.","pos":[10,138],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether to place negative values within parentheses."},{"content":"See \"Settings\" for values.","pos":[139,165]}]},{"pos":[61090,61297],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.","pos":[10,180],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings."},{"content":"See \"Settings\" for values.","pos":[181,207]}]},{"pos":[61355,61399],"content":"Returns an expression formatted as a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an expression formatted as a number.","pos":[0,44]}]},{"pos":[61570,61590],"content":"Type is not numeric.","needQuote":true,"needEscape":true,"nodes":[{"content":"Type is not numeric.","pos":[0,20]}]},{"pos":[62327,62432],"content":"Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.","pos":[0,105]}]},{"pos":[62445,63066],"content":"When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.      > [!NOTE] >  All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework.       The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.      |||   |-|-|   |Constant|Description|   |`TriState.True`|True|   |`TriState.False`|False|   |`TriState.Default`|The computer's regional settings|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.","pos":[0,118]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  All settings information comes from the locale of the application.","pos":[124,203],"source":"      > [!NOTE] >  All settings information comes from the locale of the application."},{"content":"By default, that will be the locale set in the control panel.","pos":[204,265]},{"content":"However, it may be changed programmatically by using the .NET Framework.","pos":[266,338]},{"content":"The <ph id=\"ph1\">`IncludeLeadingDigit`</ph>, <ph id=\"ph2\">`UseParensForNegativeNumbers`</ph>, and <ph id=\"ph3\">`GroupDigits`</ph> arguments have the following settings.","pos":[345,459],"source":"       The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings."},{"content":"|||   |-|-|   |Constant|Description|   |<ph id=\"ph1\">`TriState.True`</ph>|True|   |<ph id=\"ph2\">`TriState.False`</ph>|False|   |<ph id=\"ph3\">`TriState.Default`</ph>|The computer's regional settings|","pos":[465,609],"source":"      |||   |-|-|   |Constant|Description|   |`TriState.True`|True|   |`TriState.False`|False|   |`TriState.Default`|The computer's regional settings|"}]},{"pos":[63731,63768],"content":"Required. Expression to be formatted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Expression to be formatted.","pos":[0,37],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Expression to be formatted.","pos":[10,37]}]}]},{"pos":[63845,64010],"content":"Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.","pos":[0,165],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value indicating how many places to the right of the decimal are displayed.","pos":[10,93]},{"content":"Default value is –1, which indicates that the locale settings are used.","pos":[94,165]}]}]},{"pos":[64103,64277],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not a leading zero displays for fractional values. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> constant that indicates whether or not a leading zero displays for fractional values.","pos":[10,147],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not a leading zero displays for fractional values."},{"content":"See \"Settings\" for values.","pos":[148,174]}]},{"pos":[64378,64550],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not to place negative values within parentheses. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> constant that indicates whether or not to place negative values within parentheses.","pos":[10,145],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not to place negative values within parentheses."},{"content":"See \"Settings\" for values.","pos":[146,172]}]},{"pos":[64635,64842],"content":"Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.TriState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.","pos":[10,180],"source":"<xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings."},{"content":"See \"Settings\" for values.","pos":[181,207]}]},{"pos":[64900,65005],"content":"Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.","pos":[0,105]}]},{"pos":[65177,65197],"content":"Type is not numeric.","needQuote":true,"needEscape":true,"nodes":[{"content":"Type is not numeric.","pos":[0,20]}]},{"pos":[65637,65789],"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character from the specified index in the supplied string.","needQuote":true,"needEscape":true,"source":"Returns a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value representing the character from the specified index in the supplied string."},{"pos":[65801,65918],"content":"If <ph id=\"ph1\">`Index`</ph> is less than 1 or greater than the index of the last character in <ph id=\"ph2\">`str`</ph>, an <ph id=\"ph3\">`ArgumentException`</ph> is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If `Index` is less than 1 or greater than the index of the last character in `str`, an `ArgumentException` is thrown."},{"pos":[66300,66396],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,96],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[66457,66607],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The (1-based) index of the character in `str` to be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"The (1-based) index of the character in <ph id=\"ph1\">`str`</ph> to be returned.","pos":[89,150],"source":" The (1-based) index of the character in `str` to be returned."}]},{"pos":[66663,66805],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value representing the character from the specified index in the supplied string.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value representing the character from the specified index in the supplied string."},{"pos":[66965,67162],"content":"<ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <ph id=\"ph2\">&lt;code&gt;Index&lt;/code&gt;</ph> <ph id=\"ph3\">&amp;lt;</ph> 1, or <ph id=\"ph4\">&lt;code&gt;Index&lt;/code&gt;</ph> is greater than index of last character of <ph id=\"ph5\">&lt;code&gt;str&lt;/code&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>str</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <code>Index</code> &lt; 1, or <code>Index</code> is greater than index of last character of <code>str</code>."},{"pos":[67711,67813],"content":"Returns an integer specifying the start position of the first occurrence of one string within another.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer specifying the start position of the first occurrence of one string within another.","pos":[0,102]}]},{"pos":[67826,68390],"content":"Typically, the `InStr` function is used when parsing strings.      > [!NOTE] >  The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.       The `Compare` argument settings are:      ||||   |-|-|-|   |Constant|Value|Description|   |`Binary`|0|Performs a binary comparison|   |`Text`|1|Performs a text comparison|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Typically, the <ph id=\"ph1\">`InStr`</ph> function is used when parsing strings.","pos":[0,61],"source":"Typically, the `InStr` function is used when parsing strings."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`InStrB`</ph> function in previous versions of Visual Basic returns a number of bytes rather than a character position.","pos":[67,198],"source":"      > [!NOTE] >  The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[199,292]},{"content":"All Visual Basic 2005 strings are in Unicode, and <ph id=\"ph1\">`InStrB`</ph> is no longer supported.","pos":[293,375],"source":" All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported."},{"content":"The <ph id=\"ph1\">`Compare`</ph> argument settings are:      ||||   |-|-|-|   |Constant|Value|Description|   |<ph id=\"ph2\">`Binary`</ph>|0|Performs a binary comparison|   |<ph id=\"ph3\">`Text`</ph>|1|Performs a text comparison|","pos":[382,553],"source":"       The `Compare` argument settings are:      ||||   |-|-|-|   |Constant|Value|Description|   |`Binary`|0|Performs a binary comparison|   |`Text`|1|Performs a text comparison|"}]},{"pos":[68873,68974],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression being searched.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression being searched.","pos":[10,101],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression being searched."}]},{"pos":[69038,69131],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression sought.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression sought.","pos":[10,93],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression sought."}]},{"pos":[69217,69420],"content":"Optional. Specifies the type of string comparison. If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Specifies the type of string comparison.","pos":[10,50]},{"content":"If <ph id=\"ph1\">`Compare`</ph> is omitted, the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> setting determines the type of comparison.","pos":[51,203],"source":" If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison."}]},{"pos":[69478,70228],"content":"<table><tbody><tr><td> If       </td><td> InStr returns       </td></tr><tr><td>           <code>String1</code> is zero length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code> is zero length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref></td><td> The starting position for the search, which defaults to the first character position.       </td></tr><tr><td>           <code>String2</code> is not found       </td><td> 0       </td></tr><tr><td>           <code>String2</code> is found within <code>String1</code></td><td> Position where match begins       </td></tr><tr><td></td><td></td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"If","pos":[23,25]},{"content":"InStr returns","pos":[42,55]},{"content":"<ph id=\"ph1\">           &lt;code&gt;String1&lt;/code&gt;</ph> is zero length or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","pos":[80,196],"source":"           <code>String1</code> is zero length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>"},{"content":"0","pos":[206,207]},{"content":"<ph id=\"ph1\">           &lt;code&gt;String2&lt;/code&gt;</ph> is zero length or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","pos":[232,348],"source":"           <code>String2</code> is zero length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>"},{"content":" The starting position for the search, which defaults to the first character position.       ","pos":[357,450],"nodes":[{"content":"The starting position for the search, which defaults to the first character position.","pos":[1,86]}]},{"content":"<ph id=\"ph1\">           &lt;code&gt;String2&lt;/code&gt;</ph> is not found","pos":[468,512],"source":"           <code>String2</code> is not found       "},{"content":"0","pos":[529,530]},{"content":"<ph id=\"ph1\">           &lt;code&gt;String2&lt;/code&gt;</ph> is found within <ph id=\"ph2\">&lt;code&gt;String1&lt;/code&gt;</ph>","pos":[555,623],"source":"           <code>String2</code> is found within <code>String1</code>"},{"content":"Position where match begins","pos":[633,660]}]},{"pos":[70888,70990],"content":"Returns an integer specifying the start position of the first occurrence of one string within another.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer specifying the start position of the first occurrence of one string within another.","pos":[0,102]}]},{"pos":[71003,71567],"content":"Typically, the `InStr` function is used when parsing strings.      > [!NOTE] >  The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.       The `Compare` argument settings are:      ||||   |-|-|-|   |Constant|Value|Description|   |`Binary`|0|Performs a binary comparison|   |`Text`|1|Performs a text comparison|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Typically, the <ph id=\"ph1\">`InStr`</ph> function is used when parsing strings.","pos":[0,61],"source":"Typically, the `InStr` function is used when parsing strings."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`InStrB`</ph> function in previous versions of Visual Basic returns a number of bytes rather than a character position.","pos":[67,198],"source":"      > [!NOTE] >  The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[199,292]},{"content":"All Visual Basic 2005 strings are in Unicode, and <ph id=\"ph1\">`InStrB`</ph> is no longer supported.","pos":[293,375],"source":" All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported."},{"content":"The <ph id=\"ph1\">`Compare`</ph> argument settings are:      ||||   |-|-|-|   |Constant|Value|Description|   |<ph id=\"ph2\">`Binary`</ph>|0|Performs a binary comparison|   |<ph id=\"ph3\">`Text`</ph>|1|Performs a text comparison|","pos":[382,553],"source":"       The `Compare` argument settings are:      ||||   |-|-|-|   |Constant|Value|Description|   |`Binary`|0|Performs a binary comparison|   |`Text`|1|Performs a text comparison|"}]},{"pos":[72058,72222],"content":"Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.","pos":[0,164],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric expression that sets the starting position for each search.","pos":[10,77]},{"content":"If omitted, search begins at the first character position.","pos":[78,136]},{"content":"The start index is 1-based.","pos":[137,164]}]}]},{"pos":[72286,72387],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression being searched.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression being searched.","pos":[10,101],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression being searched."}]},{"pos":[72451,72544],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression sought.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression sought.","pos":[10,93],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression sought."}]},{"pos":[72630,72833],"content":"Optional. Specifies the type of string comparison. If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Specifies the type of string comparison.","pos":[10,50]},{"content":"If <ph id=\"ph1\">`Compare`</ph> is omitted, the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> setting determines the type of comparison.","pos":[51,203],"source":" If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison."}]},{"pos":[72891,73663],"content":"<table><tbody><tr><td> If       </td><td> InStr returns       </td></tr><tr><td>           <code>String1</code> is zero length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code> is zero length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code> is not found       </td><td> 0       </td></tr><tr><td>           <code>String2</code> is found within <code>String1</code></td><td> Position where match begins       </td></tr><tr><td>           <code>Start</code> &gt; length of <code>String1</code></td><td> 0       </td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"If","pos":[23,25]},{"content":"InStr returns","pos":[42,55]},{"content":"<ph id=\"ph1\">           &lt;code&gt;String1&lt;/code&gt;</ph> is zero length or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","pos":[80,196],"source":"           <code>String1</code> is zero length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>"},{"content":"0","pos":[206,207]},{"content":"<ph id=\"ph1\">           &lt;code&gt;String2&lt;/code&gt;</ph> is zero length or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","pos":[232,348],"source":"           <code>String2</code> is zero length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>"},{"content":"<ph id=\"ph1\">           &lt;code&gt;String2&lt;/code&gt;</ph> is not found","pos":[413,457],"source":"           <code>String2</code> is not found       "},{"content":"0","pos":[474,475]},{"content":"<ph id=\"ph1\">           &lt;code&gt;String2&lt;/code&gt;</ph> is found within <ph id=\"ph2\">&lt;code&gt;String1&lt;/code&gt;</ph>","pos":[500,568],"source":"           <code>String2</code> is found within <code>String1</code>"},{"content":"Position where match begins","pos":[578,605]},{"content":"<ph id=\"ph1\">           &lt;code&gt;Start&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;gt;</ph> length of <ph id=\"ph3\">&lt;code&gt;String1&lt;/code&gt;</ph>","pos":[630,695],"source":"           <code>Start</code> &gt; length of <code>String1</code>"},{"content":"0","pos":[705,706]}]},{"pos":[73822,73848],"content":"<ph id=\"ph1\">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 1.","needQuote":true,"needEscape":true,"source":"<code>Start</code> &lt; 1."},{"pos":[74456,74574],"content":"Returns the position of the first occurrence of one string within another, starting from the right side of the string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the position of the first occurrence of one string within another, starting from the right side of the string.","pos":[0,118]}]},{"pos":[74587,74886],"content":"Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function.       The `Compare` argument can have the following values.      |||   |-|-|   |Constant|Description|   |`Binary`|Performs a binary comparison.|   |`Text`|Performs a textual comparison.|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Note that the syntax for the <ph id=\"ph1\">`InStrRev`</ph> function is not the same as the syntax for the <ph id=\"ph2\">`InStr`</ph> function.","pos":[0,104],"source":"Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function."},{"content":"The <ph id=\"ph1\">`Compare`</ph> argument can have the following values.","pos":[111,164],"source":"       The `Compare` argument can have the following values."},{"content":"|||   |-|-|   |Constant|Description|   |<ph id=\"ph1\">`Binary`</ph>|Performs a binary comparison.|   |<ph id=\"ph2\">`Text`</ph>|Performs a textual comparison.|","pos":[170,291],"source":"      |||   |-|-|   |Constant|Description|   |`Binary`|Performs a binary comparison.|   |`Text`|Performs a textual comparison.|"}]},{"pos":[75347,75390],"content":"Required. String expression being searched.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. String expression being searched.","pos":[0,43],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"String expression being searched.","pos":[10,43]}]}]},{"pos":[75458,75505],"content":"Required. String expression being searched for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. String expression being searched for.","pos":[0,47],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"String expression being searched for.","pos":[10,47]}]}]},{"pos":[75566,75832],"content":"Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If `Start` is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric expression setting the one-based starting position for each search, starting from the left side of the string.","pos":[10,128]},{"content":"If <ph id=\"ph1\">`Start`</ph> is omitted then –1 is used, meaning the search begins at the last character position.","pos":[129,225],"source":" If `Start` is omitted then –1 is used, meaning the search begins at the last character position."},{"content":"Search then proceeds from right to left.","pos":[226,266]}]},{"pos":[75918,76081],"content":"Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.","pos":[0,163],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value indicating the kind of comparison to use when evaluating substrings.","pos":[10,92]},{"content":"If omitted, a binary comparison is performed.","pos":[93,138]},{"content":"See Settings for values.","pos":[139,163]}]}]},{"pos":[76139,76875],"content":"<table><tbody><tr><td> If       </td><td> InStrRev returns       </td></tr><tr><td>           <code>StringCheck</code> is zero-length       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code> is zero-length       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code> is not found       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code> is found within <code>StringCheck</code></td><td> Position at which the first match is found, starting with the right side of the string.       </td></tr><tr><td>           <code>Start</code> is greater than length of <code>StringMatch</code></td><td> 0       </td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"If","pos":[23,25]},{"content":"InStrRev returns","pos":[42,58]},{"content":"<ph id=\"ph1\">           &lt;code&gt;StringCheck&lt;/code&gt;</ph> is zero-length","pos":[83,133],"source":"           <code>StringCheck</code> is zero-length       "},{"content":"0","pos":[150,151]},{"content":"<ph id=\"ph1\">           &lt;code&gt;StringMatch&lt;/code&gt;</ph> is zero-length","pos":[176,226],"source":"           <code>StringMatch</code> is zero-length       "},{"content":"<ph id=\"ph1\">           &lt;code&gt;StringMatch&lt;/code&gt;</ph> is not found","pos":[298,346],"source":"           <code>StringMatch</code> is not found       "},{"content":"0","pos":[363,364]},{"content":"<ph id=\"ph1\">           &lt;code&gt;StringMatch&lt;/code&gt;</ph> is found within <ph id=\"ph2\">&lt;code&gt;StringCheck&lt;/code&gt;</ph>","pos":[389,465],"source":"           <code>StringMatch</code> is found within <code>StringCheck</code>"},{"content":" Position at which the first match is found, starting with the right side of the string.       ","pos":[474,569],"nodes":[{"content":"Position at which the first match is found, starting with the right side of the string.","pos":[1,88]}]},{"content":"<ph id=\"ph1\">           &lt;code&gt;Start&lt;/code&gt;</ph> is greater than length of <ph id=\"ph2\">&lt;code&gt;StringMatch&lt;/code&gt;</ph>","pos":[587,667],"source":"           <code>Start</code> is greater than length of <code>StringMatch</code>"},{"content":"0","pos":[677,678]}]},{"pos":[77037,77090],"content":"<ph id=\"ph1\">&lt;code&gt;Start&lt;/code&gt;</ph> = 0 or <ph id=\"ph2\">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id=\"ph3\">&amp;lt;</ph> -1.","needQuote":true,"needEscape":true,"source":"<code>Start</code> = 0 or <code>Start</code> &lt; -1."},{"pos":[77530,77611],"content":"Returns a string created by joining a number of substrings contained in an array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string created by joining a number of substrings contained in an array.","pos":[0,81]}]},{"pos":[77623,78060],"content":"There is a parity between the `Join` and `Split` functions. The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string. The `Split` function takes a string and separates it at the delimiter, to return an array of strings. However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is a parity between the <ph id=\"ph1\">`Join`</ph> and <ph id=\"ph2\">`Split`</ph> functions.","pos":[0,59],"source":"There is a parity between the `Join` and `Split` functions."},{"content":"The <ph id=\"ph1\">`Join`</ph> function takes an array of strings and joins them using a delimiter string, to return a single string.","pos":[60,173],"source":" The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string."},{"content":"The <ph id=\"ph1\">`Split`</ph> function takes a string and separates it at the delimiter, to return an array of strings.","pos":[174,275],"source":" The `Split` function takes a string and separates it at the delimiter, to return an array of strings."},{"content":"However, a key difference is that <ph id=\"ph1\">`Join`</ph> can concatenate strings with any delimiter string, <ph id=\"ph2\">`Split`</ph> can only separate strings using a single character delimiter.","pos":[276,437],"source":" However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter."}]},{"pos":[78468,78535],"content":"Required. One-dimensional array containing substrings to be joined.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. One-dimensional array containing substrings to be joined.","pos":[0,67],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"One-dimensional array containing substrings to be joined.","pos":[10,67]}]}]},{"pos":[78601,78899],"content":"Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (\" \") is used. If `Delimiter` is a zero-length string (\"\") or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, all items in the list are concatenated with no delimiters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Any string, used to separate the substrings in the returned string.","pos":[10,77]},{"content":"If omitted, the space character (\" \") is used.","pos":[78,124]},{"content":"If <ph id=\"ph1\">`Delimiter`</ph> is a zero-length string (\"\") or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, all items in the list are concatenated with no delimiters.","pos":[125,298],"source":" If `Delimiter` is a zero-length string (\"\") or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, all items in the list are concatenated with no delimiters."}]},{"pos":[78957,79038],"content":"Returns a string created by joining a number of substrings contained in an array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string created by joining a number of substrings contained in an array.","pos":[0,81]}]},{"pos":[79195,79243],"content":"<ph id=\"ph1\">&lt;code&gt;SourceArray&lt;/code&gt;</ph> is not one dimensional.","needQuote":true,"needEscape":true,"source":"<code>SourceArray</code> is not one dimensional."},{"pos":[79683,79764],"content":"Returns a string created by joining a number of substrings contained in an array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string created by joining a number of substrings contained in an array.","pos":[0,81]}]},{"pos":[79776,80213],"content":"There is a parity between the `Join` and `Split` functions. The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string. The `Split` function takes a string and separates it at the delimiter, to return an array of strings. However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is a parity between the <ph id=\"ph1\">`Join`</ph> and <ph id=\"ph2\">`Split`</ph> functions.","pos":[0,59],"source":"There is a parity between the `Join` and `Split` functions."},{"content":"The <ph id=\"ph1\">`Join`</ph> function takes an array of strings and joins them using a delimiter string, to return a single string.","pos":[60,173],"source":" The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string."},{"content":"The <ph id=\"ph1\">`Split`</ph> function takes a string and separates it at the delimiter, to return an array of strings.","pos":[174,275],"source":" The `Split` function takes a string and separates it at the delimiter, to return an array of strings."},{"content":"However, a key difference is that <ph id=\"ph1\">`Join`</ph> can concatenate strings with any delimiter string, <ph id=\"ph2\">`Split`</ph> can only separate strings using a single character delimiter.","pos":[276,437],"source":" However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter."}]},{"pos":[80621,80688],"content":"Required. One-dimensional array containing substrings to be joined.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. One-dimensional array containing substrings to be joined.","pos":[0,67],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"One-dimensional array containing substrings to be joined.","pos":[10,67]}]}]},{"pos":[80754,81052],"content":"Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (\" \") is used. If `Delimiter` is a zero-length string (\"\") or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, all items in the list are concatenated with no delimiters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Any string, used to separate the substrings in the returned string.","pos":[10,77]},{"content":"If omitted, the space character (\" \") is used.","pos":[78,124]},{"content":"If <ph id=\"ph1\">`Delimiter`</ph> is a zero-length string (\"\") or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, all items in the list are concatenated with no delimiters.","pos":[125,298],"source":" If `Delimiter` is a zero-length string (\"\") or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, all items in the list are concatenated with no delimiters."}]},{"pos":[81110,81191],"content":"Returns a string created by joining a number of substrings contained in an array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string created by joining a number of substrings contained in an array.","pos":[0,81]}]},{"pos":[81348,81396],"content":"<ph id=\"ph1\">&lt;code&gt;SourceArray&lt;/code&gt;</ph> is not one dimensional.","needQuote":true,"needEscape":true,"source":"<code>SourceArray</code> is not one dimensional."},{"pos":[81772,81825],"content":"Returns a string or character converted to lowercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or character converted to lowercase.","pos":[0,53]}]},{"pos":[81838,82596],"content":"Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.       This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.","pos":[0,115]},{"content":"This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.","pos":[122,303]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id=\"ph2\">`comparisonType`</ph> argument.","pos":[309,641],"source":"      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How Culture Affects Strings in Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[642,753],"source":" For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[82937,83097],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> expression.","pos":[10,160],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression."}]},{"pos":[83153,83206],"content":"Returns a string or character converted to lowercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or character converted to lowercase.","pos":[0,53]}]},{"pos":[83658,83711],"content":"Returns a string or character converted to lowercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or character converted to lowercase.","pos":[0,53]}]},{"pos":[83724,84482],"content":"Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.       This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.","pos":[0,115]},{"content":"This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.","pos":[122,303]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id=\"ph2\">`comparisonType`</ph> argument.","pos":[309,641],"source":"      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How Culture Affects Strings in Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[642,753],"source":" For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[84829,84989],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> expression.","pos":[10,160],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression."}]},{"pos":[85047,85100],"content":"Returns a string or character converted to lowercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or character converted to lowercase.","pos":[0,53]}]},{"pos":[85591,85683],"content":"Returns a string containing a specified number of characters from the left side of a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string containing a specified number of characters from the left side of a string.","pos":[0,92]}]},{"pos":[85696,86233],"content":"To determine the number of characters in `str`, use the `Len` function. If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`.      > [!NOTE] >  The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To determine the number of characters in <ph id=\"ph1\">`str`</ph>, use the <ph id=\"ph2\">`Len`</ph> function.","pos":[0,71],"source":"To determine the number of characters in `str`, use the `Len` function."},{"content":"If used in a Windows Forms application, or any other class that has a <ph id=\"ph1\">`Left`</ph> property, you must fully qualify the function with <ph id=\"ph2\">`Microsoft.VisualBasic.Left`</ph>.","pos":[72,229],"source":" If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LeftB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.","pos":[235,355],"source":"      > [!NOTE] >  The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[356,449]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LeftB`</ph> is no longer supported.","pos":[450,534],"source":" All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported."}]},{"pos":[86702,86836],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which the leftmost characters are returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression from which the leftmost characters are returned.","pos":[10,134],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which the leftmost characters are returned."}]},{"pos":[86898,87186],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string (\"\") is returned. If greater than or equal to the number of characters in `str`, the entire string is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"Numeric expression indicating how many characters to return.","pos":[89,149]},{"content":"If 0, a zero-length string (\"\") is returned.","pos":[150,194]},{"content":"If greater than or equal to the number of characters in <ph id=\"ph1\">`str`</ph>, the entire string is returned.","pos":[195,288],"source":" If greater than or equal to the number of characters in `str`, the entire string is returned."}]},{"pos":[87244,87336],"content":"Returns a string containing a specified number of characters from the left side of a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string containing a specified number of characters from the left side of a string.","pos":[0,92]}]},{"pos":[87493,87520],"content":"<ph id=\"ph1\">&lt;code&gt;Length&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 0.","needQuote":true,"needEscape":true,"source":"<code>Length</code> &lt; 0."},{"pos":[87901,88035],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[88048,89511],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[89852,90255],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[90312,90446],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[90876,91010],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[91023,92486],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[92824,93227],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[93284,93418],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[93848,93982],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[93995,95458],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[95796,96199],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[96256,96390],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[96840,96974],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[96987,98450],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[98794,99197],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[99254,99388],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[99833,99967],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[99980,101443],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[101786,102189],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[102246,102380],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[102820,102954],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[102967,104430],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[104772,105175],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[105232,105366],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[105801,105935],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[105948,107411],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[107751,108154],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[108211,108345],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[108780,108914],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[108927,110390],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[110727,111130],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[111187,111321],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[111756,111890],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[111903,113366],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[113705,114108],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[114165,114299],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[114739,114873],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[114886,116349],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[116691,117094],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[117151,117285],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[117720,117854],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[117867,119330],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[119670,120073],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[120130,120264],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[120704,120838],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[120851,122314],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[122654,123057],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[123114,123248],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[123688,123822],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[123835,125298],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[125639,126042],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[126099,126233],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[126673,126807],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[126820,128283],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[128625,129028],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[129085,129219],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[129659,129793],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[129806,131269],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[131609,132012],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[132069,132203],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[132643,132777],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[132790,134253],"content":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With user-defined types and <ph id=\"ph1\">`Object`</ph> variables, the <ph id=\"ph2\">`Len`</ph> function returns the size as it will be written to the file by the <ph id=\"ph3\">`FilePut`</ph> function.","pos":[0,144],"source":"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the string.","pos":[145,221],"source":" If an `Object` contains a `String`, it will return the length of the string."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id=\"ph2\">`FilePut`</ph> function.","pos":[222,360],"source":" If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function."},{"content":"The <ph id=\"ph1\">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.","pos":[367,507],"source":"       The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk."},{"content":"The <ph id=\"ph1\">`Len`</ph> function uses the <ph id=\"ph2\">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id=\"ph3\">`Object`</ph> variables.","pos":[508,625],"source":" The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.","pos":[631,802],"source":"      > [!NOTE] >  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.","pos":[808,940],"source":"      > [!NOTE] >  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[941,1034]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`LenB`</ph> is no longer supported.","pos":[1035,1118],"source":" All current Visual Basic strings are in Unicode, and `LenB` is no longer supported."},{"content":"Smart Device Developer Notes    The <ph id=\"ph1\">`Len`</ph> function accepts only <ph id=\"ph2\">`String`</ph> and <ph id=\"ph3\">`Object`</ph> variables as parameters.","pos":[1127,1237],"source":"      ## Smart Device Developer Notes    The `Len` function accepts only `String` and `Object` variables as parameters."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains a <ph id=\"ph2\">`String`</ph>, it will return the length of the <ph id=\"ph3\">`String`</ph>.","pos":[1238,1316],"source":" If an `Object` contains a `String`, it will return the length of the `String`."},{"content":"If a parameter is a NULL <ph id=\"ph1\">`Object`</ph> reference, the function returns zero.","pos":[1317,1388],"source":" If a parameter is a NULL `Object` reference, the function returns zero."},{"content":"If an <ph id=\"ph1\">`Object`</ph> contains any other type, an exception is thrown.","pos":[1389,1452],"source":" If an `Object` contains any other type, an exception is thrown."}]},{"pos":[134593,134996],"content":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression or variable name.","pos":[0,103],"source":"Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> function.","pos":[104,403],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function."}]},{"pos":[135053,135187],"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.","pos":[0,134]}]},{"pos":[135676,135771],"content":"Returns a left-aligned string containing the specified string adjusted to the specified length.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a left-aligned string containing the specified string adjusted to the specified length.","pos":[0,95]}]},{"pos":[135783,136055],"content":"If the specified string is longer than the specified length, the returned string is shortened to the specified length. If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the specified string is longer than the specified length, the returned string is shortened to the specified length. If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.","pos":[0,272],"nodes":[{"content":"If the specified string is longer than the specified length, the returned string is shortened to the specified length.","pos":[0,118]},{"content":"If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.","pos":[119,272]}]}]},{"pos":[136390,136501],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. Name of string variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,86],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."},{"content":"Name of string variable.","pos":[87,111]}]},{"pos":[136563,136678],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Length of returned string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"Length of returned string.","pos":[89,115]}]},{"pos":[136736,136831],"content":"Returns a left-aligned string containing the specified string adjusted to the specified length.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a left-aligned string containing the specified string adjusted to the specified length.","pos":[0,95]}]},{"pos":[137282,137609],"content":"Returns a string containing a copy of a specified string with no leading spaces (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>)."},{"pos":[137621,137703],"content":"The <ph id=\"ph1\">`LTrim`</ph>, <ph id=\"ph2\">`RTrim`</ph>, and <ph id=\"ph3\">`Trim`</ph> functions remove spaces from the ends of strings.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings."},{"pos":[138159,138255],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,96],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[138313,138640],"content":"Returns a string containing a copy of a specified string with no leading spaces (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>)."},{"pos":[139126,139223],"content":"Returns a string that contains all the characters starting from a specified position in a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that contains all the characters starting from a specified position in a string.","pos":[0,97]}]},{"pos":[139236,139926],"content":"To determine the number of characters in `str`, use the `Len` function.       Visual Basic has a `Mid` function and a `Mid` statement. These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters. For more information, see [Mid Statement](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic strings are in Unicode, and `MidB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To determine the number of characters in <ph id=\"ph1\">`str`</ph>, use the <ph id=\"ph2\">`Len`</ph> function.","pos":[0,71],"source":"To determine the number of characters in `str`, use the `Len` function."},{"content":"Visual Basic has a <ph id=\"ph1\">`Mid`</ph> function and a <ph id=\"ph2\">`Mid`</ph> statement.","pos":[78,134],"source":"       Visual Basic has a `Mid` function and a `Mid` statement."},{"content":"These elements both operate on a specified number of characters in a string, but the <ph id=\"ph1\">`Mid`</ph> function returns the characters while the <ph id=\"ph2\">`Mid`</ph> statement replaces the characters.","pos":[135,308],"source":" These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Mid Statement<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[309,390],"source":" For more information, see [Mid Statement](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`MidB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.","pos":[396,515],"source":"      > [!NOTE] >  The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[516,609]},{"content":"All Visual Basic strings are in Unicode, and <ph id=\"ph1\">`MidB`</ph> is no longer supported.","pos":[610,685],"source":" All Visual Basic strings are in Unicode, and `MidB` is no longer supported."}]},{"pos":[140327,140448],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which characters are returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression from which characters are returned.","pos":[10,121],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which characters are returned."}]},{"pos":[140509,140835],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Starting position of the characters to return. If `Start` is greater than the number of characters in `str`, the <xref uid=\"langword_csharp_Mid\" name=\"Mid\" href=\"\"></xref> function returns a zero-length string (\"\"). `Start` is one-based.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"Starting position of the characters to return.","pos":[89,135]},{"content":"If <ph id=\"ph1\">`Start`</ph> is greater than the number of characters in <ph id=\"ph2\">`str`</ph>, the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Mid\" name=\"Mid\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function returns a zero-length string (\"\").","pos":[136,304],"source":" If `Start` is greater than the number of characters in `str`, the <xref uid=\"langword_csharp_Mid\" name=\"Mid\" href=\"\"></xref> function returns a zero-length string (\"\")."},{"content":"<ph id=\"ph1\">`Start`</ph> is one-based.","pos":[305,326],"source":"`Start` is one-based."}]},{"pos":[140893,140989],"content":"A string that consists of all the characters starting from the specified position in the string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that consists of all the characters starting from the specified position in the string.","pos":[0,96]}]},{"pos":[141145,141202],"content":"<ph id=\"ph1\">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph>= 0 or <ph id=\"ph3\">&lt;code&gt;Length&lt;/code&gt;</ph> <ph id=\"ph4\">&amp;lt;</ph> 0.","needQuote":true,"needEscape":true,"source":"<code>Start</code> &lt;= 0 or <code>Length</code> &lt; 0."},{"pos":[141666,141777],"content":"Returns a string that contains a specified number of characters starting from a specified position in a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that contains a specified number of characters starting from a specified position in a string.","pos":[0,111]}]},{"pos":[141790,142480],"content":"To determine the number of characters in `str`, use the `Len` function.       Visual Basic has a `Mid` function and a `Mid` statement. These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters. For more information, see [Mid Statement](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic strings are in Unicode, and `MidB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To determine the number of characters in <ph id=\"ph1\">`str`</ph>, use the <ph id=\"ph2\">`Len`</ph> function.","pos":[0,71],"source":"To determine the number of characters in `str`, use the `Len` function."},{"content":"Visual Basic has a <ph id=\"ph1\">`Mid`</ph> function and a <ph id=\"ph2\">`Mid`</ph> statement.","pos":[78,134],"source":"       Visual Basic has a `Mid` function and a `Mid` statement."},{"content":"These elements both operate on a specified number of characters in a string, but the <ph id=\"ph1\">`Mid`</ph> function returns the characters while the <ph id=\"ph2\">`Mid`</ph> statement replaces the characters.","pos":[135,308],"source":" These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Mid Statement<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[309,390],"source":" For more information, see [Mid Statement](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`MidB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.","pos":[396,515],"source":"      > [!NOTE] >  The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[516,609]},{"content":"All Visual Basic strings are in Unicode, and <ph id=\"ph1\">`MidB`</ph> is no longer supported.","pos":[610,685],"source":" All Visual Basic strings are in Unicode, and `MidB` is no longer supported."}]},{"pos":[143084,143205],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which characters are returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression from which characters are returned.","pos":[10,121],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which characters are returned."}]},{"pos":[143266,143592],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Starting position of the characters to return. If `Start` is greater than the number of characters in `str`, the <xref uid=\"langword_csharp_Mid\" name=\"Mid\" href=\"\"></xref> function returns a zero-length string (\"\"). `Start` is one based.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"Starting position of the characters to return.","pos":[89,135]},{"content":"If <ph id=\"ph1\">`Start`</ph> is greater than the number of characters in <ph id=\"ph2\">`str`</ph>, the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Mid\" name=\"Mid\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function returns a zero-length string (\"\").","pos":[136,304],"source":" If `Start` is greater than the number of characters in `str`, the <xref uid=\"langword_csharp_Mid\" name=\"Mid\" href=\"\"></xref> function returns a zero-length string (\"\")."},{"content":"<ph id=\"ph1\">`Start`</ph> is one based.","pos":[305,326],"source":"`Start` is one based."}]},{"pos":[143654,143969],"content":"Optional. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Number of characters to return. If omitted or if there are fewer than `Length` characters in the text (including the character at position `Start`), all characters from the start position to the end of the string are returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"Number of characters to return.","pos":[89,120]},{"content":"If omitted or if there are fewer than <ph id=\"ph1\">`Length`</ph> characters in the text (including the character at position <ph id=\"ph2\">`Start`</ph>), all characters from the start position to the end of the string are returned.","pos":[121,315],"source":" If omitted or if there are fewer than `Length` characters in the text (including the character at position `Start`), all characters from the start position to the end of the string are returned."}]},{"pos":[144027,144139],"content":"A string that consists of the specified number of characters starting from the specified position in the string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that consists of the specified number of characters starting from the specified position in the string.","pos":[0,112]}]},{"pos":[144295,144352],"content":"<ph id=\"ph1\">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph>= 0 or <ph id=\"ph3\">&lt;code&gt;Length&lt;/code&gt;</ph> <ph id=\"ph4\">&amp;lt;</ph> 0.","needQuote":true,"needEscape":true,"source":"<code>Start</code> &lt;= 0 or <code>Length</code> &lt; 0."},{"pos":[145048,145165],"content":"Returns a string in which a specified substring has been replaced with another substring a specified number of times.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string in which a specified substring has been replaced with another substring a specified number of times.","pos":[0,117]}]},{"pos":[145178,145604],"content":"The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values.       The `Compare` argument can have the following values.      |||   |-|-|   |Constant|Description|   |`Binary`|Performs a binary comparison|   |`Text`|Performs a textual comparison|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The return value of the <ph id=\"ph1\">`Replace`</ph> function is a string that begins at the position specified by <ph id=\"ph2\">`Start`</ph> and concludes at the end of the <ph id=\"ph3\">`Expression`</ph> string, with the substitutions made as specified by the <ph id=\"ph4\">`Find`</ph> and <ph id=\"ph5\">`Replace`</ph> values.","pos":[0,233],"source":"The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values."},{"content":"The <ph id=\"ph1\">`Compare`</ph> argument can have the following values.","pos":[240,293],"source":"       The `Compare` argument can have the following values."},{"content":"|||   |-|-|   |Constant|Description|   |<ph id=\"ph1\">`Binary`</ph>|Performs a binary comparison|   |<ph id=\"ph2\">`Text`</ph>|Performs a textual comparison|","pos":[299,418],"source":"      |||   |-|-|   |Constant|Description|   |`Binary`|Performs a binary comparison|   |`Text`|Performs a textual comparison|"}]},{"pos":[146144,146204],"content":"Required. String expression containing substring to replace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. String expression containing substring to replace.","pos":[0,60],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"String expression containing substring to replace.","pos":[10,60]}]}]},{"pos":[146265,146304],"content":"Required. Substring being searched for.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Substring being searched for.","pos":[0,39],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Substring being searched for.","pos":[10,39]}]}]},{"pos":[146372,146404],"content":"Required. Replacement substring.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required. Replacement substring.","pos":[0,32],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Replacement substring.","pos":[10,32]}]}]},{"pos":[146465,146730],"content":"Optional. Position within `Expression` that starts a substring used for replacement. The return value of <xref uid=\"langword_csharp_Replace\" name=\"Replace\" href=\"\"></xref> is a string that begins at `Start`, with appropriate substitutions. If omitted, 1 is assumed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Position within <ph id=\"ph1\">`Expression`</ph> that starts a substring used for replacement.","pos":[10,84],"source":" Position within `Expression` that starts a substring used for replacement."},{"content":"The return value of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Replace\" name=\"Replace\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is a string that begins at <ph id=\"ph1\">`Start`</ph>, with appropriate substitutions.","pos":[85,239],"source":" The return value of <xref uid=\"langword_csharp_Replace\" name=\"Replace\" href=\"\"></xref> is a string that begins at `Start`, with appropriate substitutions."},{"content":"If omitted, 1 is assumed.","pos":[240,265]}]},{"pos":[146791,146930],"content":"Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means \"make all possible substitutions.\"","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means \"make all possible substitutions.\"","pos":[0,139],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Number of substring substitutions to perform.","pos":[10,55]},{"content":"If omitted, the default value is –1, which means \"make all possible substitutions.\"","pos":[56,139]}]}]},{"pos":[147016,147133],"content":"Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.","pos":[0,117],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value indicating the kind of comparison to use when evaluating substrings.","pos":[10,92]},{"content":"See Settings for values.","pos":[93,117]}]}]},{"pos":[147192,148085],"content":"<xref uid=\"langword_csharp_Replace\" name=\"Replace\" href=\"\"></xref> returns the following values.       <table><tbody><tr><td> If       </td><td> Replace returns       </td></tr><tr><td><code>Find</code> is zero-length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref></td><td> Copy of <code>Expression</code></td></tr><tr><td><code>Replace</code> is zero-length       </td><td> Copy of <code>Expression</code> with no occurrences of <code>Find</code></td></tr><tr><td><code>Expression</code> is zero-length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, or <code>Start</code> is greater than length of <code>Expression</code></td><td><xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref></td></tr><tr><td><code>Count</code> is 0       </td><td> Copy of <code>Expression</code></td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref uid=\"langword_csharp_Replace\" name=\"Replace\" href=\"\"></xref> returns the following values.       ","pos":[0,103],"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Replace\" name=\"Replace\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> returns the following values.","pos":[0,96],"source":"<xref uid=\"langword_csharp_Replace\" name=\"Replace\" href=\"\"></xref> returns the following values."}]},{"content":"If","pos":[126,128]},{"content":"Replace returns","pos":[145,160]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Find</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero-length or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>","pos":[185,287],"source":"<code>Find</code> is zero-length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>"},{"content":"Copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>","pos":[297,328],"source":" Copy of <code>Expression</code>"},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Replace</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero-length","pos":[346,381],"source":"<code>Replace</code> is zero-length       "},{"content":"Copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Expression</ph><ept id=\"p1\">&lt;/code&gt;</ept> with no occurrences of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Find</ph><ept id=\"p2\">&lt;/code&gt;</ept>","pos":[398,470],"source":" Copy of <code>Expression</code> with no occurrences of <code>Find</code>"},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Expression</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero-length or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">Start</ph><ept id=\"p3\">&lt;/code&gt;</ept> is greater than length of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">Expression</ph><ept id=\"p4\">&lt;/code&gt;</ept>","pos":[488,669],"source":"<code>Expression</code> is zero-length or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, or <code>Start</code> is greater than length of <code>Expression</code>"},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Count</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 0","pos":[762,785],"source":"<code>Count</code> is 0       "},{"content":"Copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>","pos":[802,833],"source":" Copy of <code>Expression</code>"}]},{"pos":[148246,148303],"content":"<ph id=\"ph1\">&lt;code&gt;Count&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> -1 or <ph id=\"ph3\">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id=\"ph4\">&amp;lt;</ph>= 0.","needQuote":true,"needEscape":true,"source":"<code>Count</code> &lt; -1 or <code>Start</code> &lt;= 0."},{"pos":[148733,148826],"content":"Returns a string containing a specified number of characters from the right side of a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string containing a specified number of characters from the right side of a string.","pos":[0,93]}]},{"pos":[148839,149375],"content":"To determine the number of characters in `str`, use the `Len` function. If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`.      > [!NOTE] >  The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `RightB` is no longer supported.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To determine the number of characters in <ph id=\"ph1\">`str`</ph>, use the <ph id=\"ph2\">`Len`</ph> function.","pos":[0,71],"source":"To determine the number of characters in `str`, use the `Len` function."},{"content":"If used in a Windows Form, or any other class that has a <ph id=\"ph1\">`Right`</ph> property, you must fully qualify the function with <ph id=\"ph2\">`Microsoft.VisualBasic.Strings.Right`</ph>.","pos":[72,226],"source":" If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`RightB`</ph> function in earlier versions of Visual Basic returns a string in bytes, rather than characters.","pos":[232,353],"source":"      > [!NOTE] >  The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters."},{"content":"It is used primarily for converting strings in double-byte character set (DBCS) applications.","pos":[354,447]},{"content":"All current Visual Basic strings are in Unicode, and <ph id=\"ph1\">`RightB`</ph> is no longer supported.","pos":[448,533],"source":" All current Visual Basic strings are in Unicode, and `RightB` is no longer supported."}]},{"pos":[149848,149983],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which the rightmost characters are returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression from which the rightmost characters are returned.","pos":[10,135],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which the rightmost characters are returned."}]},{"pos":[150045,150322],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>. Numeric expression indicating how many characters to return. If 0, a zero-length string (\"\") is returned. If greater than or equal to the number of characters in `str`, the entire string is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[10,77],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>."},{"content":"Numeric expression indicating how many characters to return.","pos":[78,138]},{"content":"If 0, a zero-length string (\"\") is returned.","pos":[139,183]},{"content":"If greater than or equal to the number of characters in <ph id=\"ph1\">`str`</ph>, the entire string is returned.","pos":[184,277],"source":" If greater than or equal to the number of characters in `str`, the entire string is returned."}]},{"pos":[150380,150473],"content":"Returns a string containing a specified number of characters from the right side of a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string containing a specified number of characters from the right side of a string.","pos":[0,93]}]},{"pos":[150631,150658],"content":"<ph id=\"ph1\">&lt;code&gt;Length&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 0.","needQuote":true,"needEscape":true,"source":"<code>Length</code> &lt; 0."},{"pos":[151083,151179],"content":"Returns a right-aligned string containing the specified string adjusted to the specified length.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a right-aligned string containing the specified string adjusted to the specified length.","pos":[0,96]}]},{"pos":[151191,151571],"content":"If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string. If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length. If the specified string is longer than the specified length, it is shortened to the specified length.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Source`</ph> is longer than <ph id=\"ph2\">`Length`</ph>, <ph id=\"ph3\">`RSet`</ph> places only the leftmost characters, up to the length of <ph id=\"ph4\">`Source`</ph>, in the returned string.","pos":[0,134],"source":"If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string."},{"content":"If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.","pos":[135,278]},{"content":"If the specified string is longer than the specified length, it is shortened to the specified length.","pos":[279,380]}]},{"pos":[151905,152016],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. Name of string variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,86],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."},{"content":"Name of string variable.","pos":[87,111]}]},{"pos":[152078,152193],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Length of returned string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"Length of returned string.","pos":[89,115]}]},{"pos":[152251,152347],"content":"Returns a right-aligned string containing the specified string adjusted to the specified length.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a right-aligned string containing the specified string adjusted to the specified length.","pos":[0,96]}]},{"pos":[152798,153125],"content":"Returns a string containing a copy of a specified string with no leading spaces (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>)."},{"pos":[153137,153219],"content":"The <ph id=\"ph1\">`LTrim`</ph>, <ph id=\"ph2\">`RTrim`</ph>, and <ph id=\"ph3\">`Trim`</ph> functions remove spaces from the ends of strings.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings."},{"pos":[153675,153771],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,96],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[153829,154156],"content":"Returns a string containing a copy of a specified string with no leading spaces (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>)."},{"pos":[154603,154665],"content":"Returns a string consisting of the specified number of spaces.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string consisting of the specified number of spaces.","pos":[0,62]}]},{"pos":[154677,154772],"content":"The <ph id=\"ph1\">`Space`</ph> function is useful for formatting output and clearing data in fixed-length strings.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The `Space` function is useful for formatting output and clearing data in fixed-length strings."},{"pos":[155135,155268],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The number of spaces you want in the string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"The number of spaces you want in the string.","pos":[89,133]}]},{"pos":[155326,155388],"content":"Returns a string consisting of the specified number of spaces.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string consisting of the specified number of spaces.","pos":[0,62]}]},{"pos":[155546,155573],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> <ph id=\"ph2\">&amp;lt;</ph> 0.","needQuote":true,"needEscape":true,"source":"<code>Number</code> &lt; 0."},{"pos":[156166,156254],"content":"Returns a zero-based, one-dimensional array containing a specified number of substrings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a zero-based, one-dimensional array containing a specified number of substrings.","pos":[0,88]}]},{"pos":[156267,158198],"content":"By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array. When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings. For example, `Split(\"a:b:c\", \":\")` returns the array `{\"a\", \"b\", \"c\"}`, while `Split(\"a:b:c\", \":\", 2)` returns the array `{\"a\", \"b:c\"}`.       When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string (\"\"). For example, `Split(\"xx\", \"x\")` returns the array containing three empty strings: one from between the beginning of the string and the first \"x\", one from between the two \"x\" strings, and one from between the last \"x\" and the end of the string.       This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function.      |||   |-|-|   |Split Call|Return Value|   |`Split(\"42, 12, 19\")`|{\"42,\" , \"12,\" , \"19\"}|   |`Split(\"42, 12, 19\", \", \")`|{\"42\", \"12\", \"19\"}|   |`Split(\"42, 12, 19\", \", \", 2)`|{\"42\", \"12, 19\"}|   |`Split(\"192.168.0.1\", \".\")`|{\"192\", \"168\", \"0\", \"1\"}|   |`Split(\"Alice and Bob\", \" AND \")`|{\"Alice and Bob\"}|   |`Split(\"Alice and Bob\", \" AND \", ,CompareMethod.Text)`|{\"Alice\", \"Bob\"}|   |`Split(\"someone@example.com\", \"@\",1)`|{\"someone@example.com\"}|   |`Split(\"someone@example.com\", \"@\",2)`|{\"someone\", \"example.com\"}|       The `Compare` argument can have the following values.      ||||   |-|-|-|   |Constant|Description|Value|   |`CompareMethod.Binary`|Performs a binary comparison|0|   |`CompareMethod.Text`|Performs a textual comparison|1|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, or when <ph id=\"ph1\">`Limit`</ph> equals -1, the <ph id=\"ph2\">`Split`</ph> function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.","pos":[0,168],"source":"By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array."},{"content":"When the <ph id=\"ph1\">`Limit`</ph> parameter is greater than zero, the <ph id=\"ph2\">`Split`</ph> function splits the string at the first <ph id=\"ph3\">`Limit`</ph>-1 occurrences of the delimiter, and returns an array with the resulting substrings.","pos":[169,361],"source":" When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings."},{"content":"For example, <ph id=\"ph1\">`Split(\"a:b:c\", \":\")`</ph> returns the array <ph id=\"ph2\">`{\"a\", \"b\", \"c\"}`</ph>, while <ph id=\"ph3\">`Split(\"a:b:c\", \":\", 2)`</ph> returns the array <ph id=\"ph4\">`{\"a\", \"b:c\"}`</ph>.","pos":[362,498],"source":" For example, `Split(\"a:b:c\", \":\")` returns the array `{\"a\", \"b\", \"c\"}`, while `Split(\"a:b:c\", \":\", 2)` returns the array `{\"a\", \"b:c\"}`."},{"content":"When the <ph id=\"ph1\">`Split`</ph> function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string (\"\").","pos":[505,676],"source":"       When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string (\"\")."},{"content":"For example, <ph id=\"ph1\">`Split(\"xx\", \"x\")`</ph> returns the array containing three empty strings: one from between the beginning of the string and the first \"x\", one from between the two \"x\" strings, and one from between the last \"x\" and the end of the string.","pos":[677,921],"source":" For example, `Split(\"xx\", \"x\")` returns the array containing three empty strings: one from between the beginning of the string and the first \"x\", one from between the two \"x\" strings, and one from between the last \"x\" and the end of the string."},{"content":"This table demonstrates how the optional <ph id=\"ph1\">`Delimiter`</ph>, <ph id=\"ph2\">`Limit`</ph>, and <ph id=\"ph3\">`Compare`</ph> parameters can change the behavior of the <ph id=\"ph4\">`Split`</ph> function.","pos":[928,1064],"source":"       This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function."},{"content":"|||   |-|-|   |Split Call|Return Value|   |<ph id=\"ph1\">`Split(\"42, 12, 19\")`</ph>|{\"42,\" , \"12,\" , \"19\"}|   |<ph id=\"ph2\">`Split(\"42, 12, 19\", \", \")`</ph>|{\"42\", \"12\", \"19\"}|   |<ph id=\"ph3\">`Split(\"42, 12, 19\", \", \", 2)`</ph>|{\"42\", \"12, 19\"}|   |<ph id=\"ph4\">`Split(\"192.168.0.1\", \".\")`</ph>|{\"192\", \"168\", \"0\", \"1\"}|   |<ph id=\"ph5\">`Split(\"Alice and Bob\", \" AND \")`</ph>|{\"Alice and Bob\"}|   |<ph id=\"ph6\">`Split(\"Alice and Bob\", \" AND \", ,CompareMethod.Text)`</ph>|{\"Alice\", \"Bob\"}|   |<ph id=\"ph7\">`Split(\"someone@example.com\", \"@\",1)`</ph>|{\"<ph id=\"ph8\">someone@example.com</ph>\"}|   |<ph id=\"ph9\">`Split(\"someone@example.com\", \"@\",2)`</ph>|{\"someone\", \"example.com\"}|       The <ph id=\"ph10\">`Compare`</ph> argument can have the following values.","pos":[1070,1645],"source":"      |||   |-|-|   |Split Call|Return Value|   |`Split(\"42, 12, 19\")`|{\"42,\" , \"12,\" , \"19\"}|   |`Split(\"42, 12, 19\", \", \")`|{\"42\", \"12\", \"19\"}|   |`Split(\"42, 12, 19\", \", \", 2)`|{\"42\", \"12, 19\"}|   |`Split(\"192.168.0.1\", \".\")`|{\"192\", \"168\", \"0\", \"1\"}|   |`Split(\"Alice and Bob\", \" AND \")`|{\"Alice and Bob\"}|   |`Split(\"Alice and Bob\", \" AND \", ,CompareMethod.Text)`|{\"Alice\", \"Bob\"}|   |`Split(\"someone@example.com\", \"@\",1)`|{\"someone@example.com\"}|   |`Split(\"someone@example.com\", \"@\",2)`|{\"someone\", \"example.com\"}|       The `Compare` argument can have the following values."},{"content":"||||   |-|-|-|   |Constant|Description|Value|   |<ph id=\"ph1\">`CompareMethod.Binary`</ph>|Performs a binary comparison|0|   |<ph id=\"ph2\">`CompareMethod.Text`</ph>|Performs a textual comparison|1|","pos":[1651,1811],"source":"      ||||   |-|-|-|   |Constant|Description|Value|   |`CompareMethod.Binary`|Performs a binary comparison|0|   |`CompareMethod.Text`|Performs a textual comparison|1|"}]},{"pos":[158904,159027],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression containing substrings and delimiters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression containing substrings and delimiters.","pos":[10,123],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression containing substrings and delimiters."}]},{"pos":[159093,159243],"content":"Optional. Any single character used to identify substring limits. If `Delimiter` is omitted, the space character (\" \") is assumed to be the delimiter.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Any single character used to identify substring limits.","pos":[10,65]},{"content":"If <ph id=\"ph1\">`Delimiter`</ph> is omitted, the space character (\" \") is assumed to be the delimiter.","pos":[66,150],"source":" If `Delimiter` is omitted, the space character (\" \") is assumed to be the delimiter."}]},{"pos":[159304,159499],"content":"Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the `Delimiter` string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Maximum number of substrings into which the input string should be split.","pos":[10,83]},{"content":"The default, –1, indicates that the input string should be split at every occurrence of the <ph id=\"ph1\">`Delimiter`</ph> string.","pos":[84,195],"source":" The default, –1, indicates that the input string should be split at every occurrence of the `Delimiter` string."}]},{"pos":[159585,159696],"content":"Optional. Numeric value indicating the comparison to use when evaluating substrings. See \"Settings\" for values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Numeric value indicating the comparison to use when evaluating substrings. See \"Settings\" for values.","pos":[0,111],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Numeric value indicating the comparison to use when evaluating substrings.","pos":[10,84]},{"content":"See \"Settings\" for values.","pos":[85,111]}]}]},{"pos":[159756,160272],"content":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array. If <code>Expression</code> is a zero-length string (\"\"), <xref uid=\"langword_csharp_Split\" name=\"Split\" href=\"\"></xref> returns a single-element array containing a zero-length string. If <code>Delimiter</code> is a zero-length string, or if it does not appear anywhere in <code>Expression</code>, <xref uid=\"langword_csharp_Split\" name=\"Split\" href=\"\"></xref> returns a single-element array containing the entire <code>Expression</code> string.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array.","pos":[0,71],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Expression</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a zero-length string (\"\"), <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Split\" name=\"Split\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> returns a single-element array containing a zero-length string.","pos":[72,255],"source":" If <code>Expression</code> is a zero-length string (\"\"), <xref uid=\"langword_csharp_Split\" name=\"Split\" href=\"\"></xref> returns a single-element array containing a zero-length string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Delimiter</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a zero-length string, or if it does not appear anywhere in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Expression</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Split\" name=\"Split\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> returns a single-element array containing the entire <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">Expression</ph><ept id=\"p4\">&lt;/code&gt;</ept> string.","pos":[256,516],"source":" If <code>Delimiter</code> is a zero-length string, or if it does not appear anywhere in <code>Expression</code>, <xref uid=\"langword_csharp_Split\" name=\"Split\" href=\"\"></xref> returns a single-element array containing the entire <code>Expression</code> string."}]},{"pos":[160897,160961],"content":"Returns -1, 0, or 1, based on the result of a string comparison.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns -1, 0, or 1, based on the result of a string comparison.","pos":[0,64]}]},{"pos":[160974,161572],"content":"The strings are compared by alphanumeric sort values beginning with the first character. For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/add/includes/ajax-current-ext-md.md).       The `Compare` argument settings are:      |||   |-|-|   |Constant|Description|   |`Binary`|Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.|   |`Text`|Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The strings are compared by alphanumeric sort values beginning with the first character.","pos":[0,88]},{"content":"For further information on binary comparisons, textual comparisons, and sort order, see <bpt id=\"p1\">[</bpt>Option Compare Statement<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[89,243],"source":" For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/add/includes/ajax-current-ext-md.md)."},{"content":"The <ph id=\"ph1\">`Compare`</ph> argument settings are:      |||   |-|-|   |Constant|Description|   |<ph id=\"ph2\">`Binary`</ph>|Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.|   |<ph id=\"ph3\">`Text`</ph>|Performs a text comparison, based on a case-insensitive text sort order determined by your system's <ph id=\"ph4\">`LocaleID`</ph> value.|","pos":[250,590],"source":"       The `Compare` argument settings are:      |||   |-|-|   |Constant|Description|   |`Binary`|Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.|   |`Text`|Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.|"}]},{"pos":[162029,162125],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,96],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[162189,162285],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,96],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[162371,162574],"content":"Optional. Specifies the type of string comparison. If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Specifies the type of string comparison.","pos":[10,50]},{"content":"If <ph id=\"ph1\">`Compare`</ph> is omitted, the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> setting determines the type of comparison.","pos":[51,203],"source":" If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison."}]},{"pos":[162632,163130],"content":"The <xref uid=\"langword_csharp_StrComp\" name=\"StrComp\" href=\"\"></xref> function has the following return values.       <table><tbody><tr><td> If       </td><td> StrComp returns       </td></tr><tr><td><code>String1</code> sorts ahead of <code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code> is equal to <code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code> sorts after <code>String2</code></td><td> 1       </td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref uid=\"langword_csharp_StrComp\" name=\"StrComp\" href=\"\"></xref> function has the following return values.       ","pos":[0,119],"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_StrComp\" name=\"StrComp\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function has the following return values.","pos":[0,112],"source":"The <xref uid=\"langword_csharp_StrComp\" name=\"StrComp\" href=\"\"></xref> function has the following return values."}]},{"content":"If","pos":[142,144]},{"content":"StrComp returns","pos":[161,176]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">String1</ph><ept id=\"p1\">&lt;/code&gt;</ept> sorts ahead of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">String2</ph><ept id=\"p2\">&lt;/code&gt;</ept>","pos":[201,257],"source":"<code>String1</code> sorts ahead of <code>String2</code>"},{"content":"-1","pos":[267,269]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">String1</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">String2</ph><ept id=\"p2\">&lt;/code&gt;</ept>","pos":[294,347],"source":"<code>String1</code> is equal to <code>String2</code>"},{"content":"0","pos":[357,358]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">String1</ph><ept id=\"p1\">&lt;/code&gt;</ept> sorts after <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">String2</ph><ept id=\"p2\">&lt;/code&gt;</ept>","pos":[383,436],"source":"<code>String1</code> sorts after <code>String2</code>"},{"content":"1","pos":[446,447]}]},{"pos":[163291,163331],"content":"<ph id=\"ph1\">&lt;code&gt;Compare&lt;/code&gt;</ph> value is not valid.","needQuote":true,"needEscape":true,"source":"<code>Compare</code> value is not valid."},{"pos":[163865,163905],"content":"Returns a string converted as specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string converted as specified.","pos":[0,40]}]},{"pos":[163918,167126],"content":"The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed. In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed.       This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).       The `Conversion` argument settings are:      |||   |-|-|   |Enumeration member|Description|   |`VbStrConv.None`|Performs no conversion|   |`VbStrConv.LinguisticCasing`|Uses linguistic rules for casing, rather than File System (default). Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.|   |`VbStrConv.UpperCase`|Converts the string to uppercase characters.|   |`VbStrConv.LowerCase`|Converts the string to lowercase characters.|   |`VbStrConv.ProperCase`|Converts the first letter of every word in string to uppercase.|   |`VbStrConv.Wide` <sup>*</sup>|Converts narrow (half-width) characters in the string to wide (full-width) characters.|   |`VbStrConv.Narrow` <sup>*</sup>|Converts wide (full-width) characters in the string to narrow (half-width) characters.|   |`VbStrConv.Katakana` <sup>**</sup>|Converts Hiragana characters in the string to Katakana characters.|   |`VbStrConv.Hiragana` <sup>**</sup>|Converts Katakana characters in the string to Hiragana characters.|   |`VbStrConv.SimplifiedChinese` <sup>*</sup>|Converts Traditional Chinese characters to Simplified Chinese.|   |`VbStrConv.TraditionalChinese` <sup>*</sup>|Converts Simplified Chinese characters to Traditional Chinese.|       <sup>*</sup> Applies to Asian locales.       <sup>**</sup> Applies to Japan only.      > [!NOTE] >  These constants are specified in the .NET Framework common language runtime. As a result, they can be used anywhere in your code in place of the actual values. Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`).       The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`). The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The constants <ph id=\"ph1\">`VbStrConv.Wide`</ph>, <ph id=\"ph2\">`VbStrConv.Narrow`</ph>, <ph id=\"ph3\">`VbStrConv.SimplifiedChinese`</ph>, <ph id=\"ph4\">`VbStrConv.TraditionalChinese`</ph>, <ph id=\"ph5\">`VbStrConv.Katakana`</ph>, and <ph id=\"ph6\">`VbStrConv.Hiragana`</ph> can cause run-time errors when used in locales where they do not apply, but not always: the constants <ph id=\"ph7\">`VbStrConv.Katakana`</ph> and <ph id=\"ph8\">`VbStrConv.Hiragana`</ph> can be used in a non-Japanese system with the Japanese Language Pack installed.","pos":[0,389],"source":"The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed."},{"content":"In addition, use of the constants <ph id=\"ph1\">`VbStrConv.Wide`</ph> and <ph id=\"ph2\">`VbStrConv.Narrow`</ph> is supported on any system with an East Asian language installed.","pos":[390,529],"source":" In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed."},{"content":"This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.","pos":[536,717]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id=\"ph2\">`comparisonType`</ph> argument.","pos":[723,1055],"source":"      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How Culture Affects Strings in Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1056,1167],"source":" For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md)."},{"content":"The <ph id=\"ph1\">`Conversion`</ph> argument settings are:      |||   |-|-|   |Enumeration member|Description|   |<ph id=\"ph2\">`VbStrConv.None`</ph>|Performs no conversion|   |<ph id=\"ph3\">`VbStrConv.LinguisticCasing`</ph>|Uses linguistic rules for casing, rather than File System (default).","pos":[1174,1410],"source":"       The `Conversion` argument settings are:      |||   |-|-|   |Enumeration member|Description|   |`VbStrConv.None`|Performs no conversion|   |`VbStrConv.LinguisticCasing`|Uses linguistic rules for casing, rather than File System (default)."},{"content":"Valid with <ph id=\"ph1\">`VbStrConv.UpperCase`</ph> and <ph id=\"ph2\">`VbStrConv.LowerCase`</ph> only.|   |<ph id=\"ph3\">`VbStrConv.UpperCase`</ph>|Converts the string to uppercase characters.|   |<ph id=\"ph4\">`VbStrConv.LowerCase`</ph>|Converts the string to lowercase characters.|   |<ph id=\"ph5\">`VbStrConv.ProperCase`</ph>|Converts the first letter of every word in string to uppercase.|   |<ph id=\"ph6\">`VbStrConv.Wide`</ph> <bpt id=\"p1\">&lt;sup&gt;</bpt><bpt id=\"p2\">*</bpt><ept id=\"p2\">&lt;/sup&gt;</ept>|Converts narrow (half-width) characters in the string to wide (full-width) characters.|   |<ph id=\"ph7\">`VbStrConv.Narrow`</ph> <bpt id=\"p3\">&lt;sup&gt;</bpt><ept id=\"p3\">*</ept><ept id=\"p1\">&lt;/sup&gt;</ept>|Converts wide (full-width) characters in the string to narrow (half-width) characters.|   |<ph id=\"ph8\">`VbStrConv.Katakana`</ph> <bpt id=\"p4\">&lt;sup&gt;</bpt><bpt id=\"p5\">**</bpt><ept id=\"p5\">&lt;/sup&gt;</ept>|Converts Hiragana characters in the string to Katakana characters.|   |<ph id=\"ph9\">`VbStrConv.Hiragana`</ph> <bpt id=\"p6\">&lt;sup&gt;</bpt><ept id=\"p6\">**</ept><ept id=\"p4\">&lt;/sup&gt;</ept>|Converts Katakana characters in the string to Hiragana characters.|   |<ph id=\"ph10\">`VbStrConv.SimplifiedChinese`</ph> <bpt id=\"p7\">&lt;sup&gt;</bpt><bpt id=\"p8\">*</bpt><ept id=\"p8\">&lt;/sup&gt;</ept>|Converts Traditional Chinese characters to Simplified Chinese.|   |<ph id=\"ph11\">`VbStrConv.TraditionalChinese`</ph> <bpt id=\"p9\">&lt;sup&gt;</bpt><ept id=\"p9\">*</ept><ept id=\"p7\">&lt;/sup&gt;</ept>|Converts Simplified Chinese characters to Traditional Chinese.|       <bpt id=\"p10\">&lt;sup&gt;</bpt><bpt id=\"p11\">*</bpt><ept id=\"p11\">&lt;/sup&gt;</ept> Applies to Asian locales.       <bpt id=\"p12\">&lt;sup&gt;</bpt><ept id=\"p12\">*</ept><ph id=\"ph12\">*</ph><ept id=\"p10\">&lt;/sup&gt;</ept> Applies to Japan only.","pos":[1411,2474],"source":" Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.|   |`VbStrConv.UpperCase`|Converts the string to uppercase characters.|   |`VbStrConv.LowerCase`|Converts the string to lowercase characters.|   |`VbStrConv.ProperCase`|Converts the first letter of every word in string to uppercase.|   |`VbStrConv.Wide` <sup>*</sup>|Converts narrow (half-width) characters in the string to wide (full-width) characters.|   |`VbStrConv.Narrow` <sup>*</sup>|Converts wide (full-width) characters in the string to narrow (half-width) characters.|   |`VbStrConv.Katakana` <sup>**</sup>|Converts Hiragana characters in the string to Katakana characters.|   |`VbStrConv.Hiragana` <sup>**</sup>|Converts Katakana characters in the string to Hiragana characters.|   |`VbStrConv.SimplifiedChinese` <sup>*</sup>|Converts Traditional Chinese characters to Simplified Chinese.|   |`VbStrConv.TraditionalChinese` <sup>*</sup>|Converts Simplified Chinese characters to Traditional Chinese.|       <sup>*</sup> Applies to Asian locales.       <sup>**</sup> Applies to Japan only."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  These constants are specified in the .NET Framework common language runtime.","pos":[2480,2569],"source":"      > [!NOTE] >  These constants are specified in the .NET Framework common language runtime."},{"content":"As a result, they can be used anywhere in your code in place of the actual values.","pos":[2570,2652]},{"content":"Most can be combined (for example, <ph id=\"ph1\">`UpperCase + Wide`</ph>), except when they are mutually exclusive (for example, <ph id=\"ph2\">`VbStrConv.Wide + VbStrConv.Narrow`</ph>).","pos":[2653,2800],"source":" Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`)."},{"content":"The following are valid word separators for proper casing: Null (<ph id=\"ph1\">`Chr$(0)`</ph>), horizontal tab (<ph id=\"ph2\">`Chr$(9)`</ph>), line feed (<ph id=\"ph3\">`Chr$(10)`</ph>), vertical tab (<ph id=\"ph4\">`Chr$(11)`</ph>), form feed (<ph id=\"ph5\">`Chr$(12)`</ph>), carriage return (<ph id=\"ph6\">`Chr$(13)`</ph>), space (single-byte character set) (<ph id=\"ph7\">`Chr$(32)`</ph>).","pos":[2807,3064],"source":"       The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`)."},{"content":"The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.","pos":[3065,3177]}]},{"pos":[167501,167603],"content":"Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression to be converted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression to be converted.","pos":[10,102],"source":"<xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression to be converted."}]},{"pos":[167688,167826],"content":"Required. <xref href=\"Microsoft.VisualBasic.VbStrConv\"></xref> member. The enumeration value specifying the type of conversion to perform.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref href=\"Microsoft.VisualBasic.VbStrConv\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> member.","pos":[10,70],"source":"<xref href=\"Microsoft.VisualBasic.VbStrConv\"></xref> member."},{"content":"The enumeration value specifying the type of conversion to perform.","pos":[71,138]}]},{"pos":[167890,168188],"content":"Optional. The <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value, if different from the system <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value. (The system <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value is the default.)","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value, if different from the system <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> value.","pos":[10,194],"source":" The <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value, if different from the system <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value."},{"content":"(The system <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value is the default.)","pos":[195,298],"source":" (The system <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value is the default.)"}]},{"pos":[168246,168286],"content":"Returns a string converted as specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string converted as specified.","pos":[0,40]}]},{"pos":[168446,168573],"content":"Unsupported <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">LocaleID</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Conversion</ph><ept id=\"p2\">&lt;/code&gt;</ept> <ph id=\"ph3\">&amp;lt;</ph> 0 or <ph id=\"ph4\">&amp;gt;</ph> 2048, or unsupported conversion for specified locale.","needQuote":true,"needEscape":true,"source":"Unsupported <code>LocaleID</code>, <code>Conversion</code> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale."},{"pos":[168998,169102],"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","pos":[0,104]}]},{"pos":[169114,169316],"content":"This function returns a `String` made up of repeated characters. The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This function returns a <ph id=\"ph1\">`String`</ph> made up of repeated characters.","pos":[0,64],"source":"This function returns a `String` made up of repeated characters."},{"content":"The character that makes up the string is the first character in the <ph id=\"ph1\">`Character`</ph> argument, and it is duplicated <ph id=\"ph2\">`Number`</ph> number of times.","pos":[65,202],"source":" The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times."}]},{"pos":[169680,169809],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The length to the string to be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"The length to the string to be returned.","pos":[89,129]}]},{"pos":[169873,170411],"content":"Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression. Only the first character of the expression will be used. If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> expression.","pos":[10,227],"source":" Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression."},{"content":"Only the first character of the expression will be used.","pos":[228,284]},{"content":"If Character is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, it must contain either a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or a <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>value.","pos":[285,538],"source":" If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value."}]},{"pos":[170469,170573],"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","pos":[0,104]}]},{"pos":[170732,170811],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is less than 0 or <ph id=\"ph2\">&lt;code&gt;Character&lt;/code&gt;</ph> type is not valid.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is less than 0 or <code>Character</code> type is not valid."},{"pos":[170914,171007],"content":"<ph id=\"ph1\">&lt;code&gt;Character&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Character</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>."},{"pos":[171442,171546],"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","pos":[0,104]}]},{"pos":[171558,171760],"content":"This function returns a `String` made up of repeated characters. The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This function returns a <ph id=\"ph1\">`String`</ph> made up of repeated characters.","pos":[0,64],"source":"This function returns a `String` made up of repeated characters."},{"content":"The character that makes up the string is the first character in the <ph id=\"ph1\">`Character`</ph> argument, and it is duplicated <ph id=\"ph2\">`Number`</ph> number of times.","pos":[65,202],"source":" The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times."}]},{"pos":[172125,172254],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The length to the string to be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"The length to the string to be returned.","pos":[89,129]}]},{"pos":[172320,172858],"content":"Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression. Only the first character of the expression will be used. If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> expression.","pos":[10,227],"source":" Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression."},{"content":"Only the first character of the expression will be used.","pos":[228,284]},{"content":"If Character is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, it must contain either a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or a <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>value.","pos":[285,538],"source":" If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value."}]},{"pos":[172916,173020],"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","pos":[0,104]}]},{"pos":[173179,173258],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is less than 0 or <ph id=\"ph2\">&lt;code&gt;Character&lt;/code&gt;</ph> type is not valid.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is less than 0 or <code>Character</code> type is not valid."},{"pos":[173361,173454],"content":"<ph id=\"ph1\">&lt;code&gt;Character&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Character</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>."},{"pos":[173889,173993],"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","pos":[0,104]}]},{"pos":[174005,174207],"content":"This function returns a `String` made up of repeated characters. The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This function returns a <ph id=\"ph1\">`String`</ph> made up of repeated characters.","pos":[0,64],"source":"This function returns a `String` made up of repeated characters."},{"content":"The character that makes up the string is the first character in the <ph id=\"ph1\">`Character`</ph> argument, and it is duplicated <ph id=\"ph2\">`Number`</ph> number of times.","pos":[65,202],"source":" The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times."}]},{"pos":[174573,174702],"content":"Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The length to the string to be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,88],"source":"<xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression."},{"content":"The length to the string to be returned.","pos":[89,129]}]},{"pos":[174768,175306],"content":"Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression. Only the first character of the expression will be used. If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> expression.","pos":[10,227],"source":" Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression."},{"content":"Only the first character of the expression will be used.","pos":[228,284]},{"content":"If Character is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, it must contain either a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or a <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>value.","pos":[285,538],"source":" If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value."}]},{"pos":[175364,175468],"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or object consisting of the specified character repeated the specified number of times.","pos":[0,104]}]},{"pos":[175627,175706],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is less than 0 or <ph id=\"ph2\">&lt;code&gt;Character&lt;/code&gt;</ph> type is not valid.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is less than 0 or <code>Character</code> type is not valid."},{"pos":[175809,175902],"content":"<ph id=\"ph1\">&lt;code&gt;Character&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Character</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>."},{"pos":[176313,176393],"content":"Returns a string in which the character order of a specified string is reversed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string in which the character order of a specified string is reversed.","pos":[0,80]}]},{"pos":[176405,176525],"content":"The <ph id=\"ph1\">`StrReverse`</ph> function returns a string that contains the same characters as <ph id=\"ph2\">`Expression`</ph>, but in the opposite order.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The `StrReverse` function returns a string that contains the same characters as `Expression`, but in the opposite order."},{"pos":[176794,176938],"content":"Required. String expression whose characters are to be reversed. If `Expression` is a zero-length string (\"\"), a zero-length string is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"String expression whose characters are to be reversed.","pos":[10,64]},{"content":"If <ph id=\"ph1\">`Expression`</ph> is a zero-length string (\"\"), a zero-length string is returned.","pos":[65,144],"source":" If `Expression` is a zero-length string (\"\"), a zero-length string is returned."}]},{"pos":[176996,177076],"content":"Returns a string in which the character order of a specified string is reversed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string in which the character order of a specified string is reversed.","pos":[0,80]}]},{"pos":[177528,177855],"content":"Returns a string containing a copy of a specified string with no leading spaces (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>)."},{"pos":[177867,177949],"content":"The <ph id=\"ph1\">`LTrim`</ph>, <ph id=\"ph2\">`RTrim`</ph>, and <ph id=\"ph3\">`Trim`</ph> functions remove spaces from the ends of strings.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings."},{"pos":[178403,178499],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,96],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[178557,178884],"content":"Returns a string containing a copy of a specified string with no leading spaces (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>)."},{"pos":[179325,179410],"content":"Returns a string or character containing the specified string converted to uppercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or character containing the specified string converted to uppercase.","pos":[0,85]}]},{"pos":[179423,180181],"content":"Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.       This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.","pos":[0,115]},{"content":"This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.","pos":[122,303]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id=\"ph2\">`comparisonType`</ph> argument.","pos":[309,641],"source":"      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How Culture Affects Strings in Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[642,753],"source":" For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[180523,180683],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> expression.","pos":[10,160],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression."}]},{"pos":[180739,180824],"content":"Returns a string or character containing the specified string converted to uppercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or character containing the specified string converted to uppercase.","pos":[0,85]}]},{"pos":[181276,181361],"content":"Returns a string or character containing the specified string converted to uppercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or character containing the specified string converted to uppercase.","pos":[0,85]}]},{"pos":[181374,182132],"content":"Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.       This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.","pos":[0,115]},{"content":"This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.","pos":[122,303]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id=\"ph2\">`comparisonType`</ph> argument.","pos":[309,641],"source":"      > [!IMPORTANT] >  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How Culture Affects Strings in Visual Basic<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[642,753],"source":" For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[182479,182639],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> expression.","pos":[10,160],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression."}]},{"pos":[182697,182782],"content":"Returns a string or character containing the specified string converted to uppercase.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string or character containing the specified string converted to uppercase.","pos":[0,85]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Strings\n  id: Strings\n  children:\n  - Microsoft.VisualBasic.Strings.Asc(System.Char)\n  - Microsoft.VisualBasic.Strings.Asc(System.String)\n  - Microsoft.VisualBasic.Strings.AscW(System.Char)\n  - Microsoft.VisualBasic.Strings.AscW(System.String)\n  - Microsoft.VisualBasic.Strings.Chr(System.Int32)\n  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)\n  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)\n  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)\n  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)\n  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)\n  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)\n  - Microsoft.VisualBasic.Strings.LCase(System.Char)\n  - Microsoft.VisualBasic.Strings.LCase(System.String)\n  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)\n  - Microsoft.VisualBasic.Strings.Len(System.Boolean)\n  - Microsoft.VisualBasic.Strings.Len(System.Byte)\n  - Microsoft.VisualBasic.Strings.Len(System.Char)\n  - Microsoft.VisualBasic.Strings.Len(System.DateTime)\n  - Microsoft.VisualBasic.Strings.Len(System.Decimal)\n  - Microsoft.VisualBasic.Strings.Len(System.Double)\n  - Microsoft.VisualBasic.Strings.Len(System.Int16)\n  - Microsoft.VisualBasic.Strings.Len(System.Int32)\n  - Microsoft.VisualBasic.Strings.Len(System.Int64)\n  - Microsoft.VisualBasic.Strings.Len(System.Object)\n  - Microsoft.VisualBasic.Strings.Len(System.SByte)\n  - Microsoft.VisualBasic.Strings.Len(System.Single)\n  - Microsoft.VisualBasic.Strings.Len(System.String)\n  - Microsoft.VisualBasic.Strings.Len(System.UInt16)\n  - Microsoft.VisualBasic.Strings.Len(System.UInt32)\n  - Microsoft.VisualBasic.Strings.Len(System.UInt64)\n  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)\n  - Microsoft.VisualBasic.Strings.LTrim(System.String)\n  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)\n  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)\n  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)\n  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)\n  - Microsoft.VisualBasic.Strings.RTrim(System.String)\n  - Microsoft.VisualBasic.Strings.Space(System.Int32)\n  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)\n  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)\n  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)\n  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)\n  - Microsoft.VisualBasic.Strings.StrReverse(System.String)\n  - Microsoft.VisualBasic.Strings.Trim(System.String)\n  - Microsoft.VisualBasic.Strings.UCase(System.Char)\n  - Microsoft.VisualBasic.Strings.UCase(System.String)\n  langs:\n  - csharp\n  name: Strings\n  nameWithType: Strings\n  fullName: Microsoft.VisualBasic.Strings\n  type: Class\n  summary: The <xref uid=\"langword_csharp_Strings\" name=\"Strings\" href=\"\"></xref> module contains procedures used to perform string operations.\n  remarks: This module supports the Visual Basic language keywords and run-time library members that manipulate strings.\n  example:\n  - \"The following example demonstrates how to split a string at its spaces.  \\n  \\n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]\"\n  syntax:\n    content: >-\n      [Microsoft.VisualBasic.CompilerServices.StandardModule]\n\n      public sealed class Strings\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)\n  id: Asc(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Asc(Char)\n  nameWithType: Strings.Asc(Char)\n  fullName: Microsoft.VisualBasic.Strings.Asc(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character.\n  remarks: \"`Asc` returns the *code point*, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.  \\n  \\n `AscW` returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.  \\n  \\n> [!NOTE]\\n>  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.\"\n  example:\n  - \"The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \\n  \\n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]\"\n  syntax:\n    content: public static int Asc (char String);\n    parameters:\n    - id: String\n      type: System.Char\n      description: Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input. If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs.\n    return:\n      type: System.Int32\n      description: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character.\n  overload: Microsoft.VisualBasic.Strings.Asc*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Asc(System.String)\n  id: Asc(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Asc(String)\n  nameWithType: Strings.Asc(String)\n  fullName: Microsoft.VisualBasic.Strings.Asc(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character.\n  remarks: \"`Asc` returns the *code point*, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.  \\n  \\n `AscW` returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.  \\n  \\n> [!NOTE]\\n>  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.\"\n  example:\n  - \"The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \\n  \\n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]\"\n  syntax:\n    content: public static int Asc (string String);\n    parameters:\n    - id: String\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input. If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs.\n    return:\n      type: System.Int32\n      description: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character.\n  overload: Microsoft.VisualBasic.Strings.Asc*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)\n  id: AscW(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: AscW(Char)\n  nameWithType: Strings.AscW(Char)\n  fullName: Microsoft.VisualBasic.Strings.AscW(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character.\n  remarks: \"`Asc` returns the *code point*, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.  \\n  \\n `AscW` returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.  \\n  \\n> [!NOTE]\\n>  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.\"\n  example:\n  - \"The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \\n  \\n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]\"\n  syntax:\n    content: public static int AscW (char String);\n    parameters:\n    - id: String\n      type: System.Char\n      description: Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input. If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs.\n    return:\n      type: System.Int32\n      description: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character.\n  overload: Microsoft.VisualBasic.Strings.AscW*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.AscW(System.String)\n  id: AscW(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: AscW(String)\n  nameWithType: Strings.AscW(String)\n  fullName: Microsoft.VisualBasic.Strings.AscW(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character.\n  remarks: \"`Asc` returns the *code point*, or character code, for the input character. This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.  \\n  \\n `AscW` returns the Unicode code point for the input character. This can be 0 through 65535. The returned value is independent of the culture and code page settings for the current thread.  \\n  \\n> [!NOTE]\\n>  The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.\"\n  example:\n  - \"The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \\n  \\n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]\"\n  syntax:\n    content: public static int AscW (string String);\n    parameters:\n    - id: String\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. If `String` is a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, only the first character of the string is used for input. If `String` is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or contains no characters, an <xref:System.ArgumentException> error occurs.\n    return:\n      type: System.Int32\n      description: Returns an <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> value representing the character code corresponding to a character.\n  overload: Microsoft.VisualBasic.Strings.AscW*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)\n  id: Chr(System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Chr(Int32)\n  nameWithType: Strings.Chr(Int32)\n  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the character associated with the specified character code.\n  remarks: \"The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`. For example, -29183 is a `Short` but +36353 is an `Integer`. This also facilitates compatibility with Visual Basic 6.0.  \\n  \\n `Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=fullName> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS). It then takes `CharCode` as a code point in the appropriate set. The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.  \\n  \\n The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace. You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  \\n  \\n `ChrW` takes `CharCode` as a Unicode code point. The range is independent of the culture and code page settings for the current thread. Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.  \\n  \\n Numbers from 0 through 31 are the same as standard nonprintable ASCII codes. For example, `Chr(10)` returns a line feed character.  \\n  \\n> [!NOTE]\\n>  The `ChrB` function in earlier versions of Visual Basic returns a single byte. It is used primarily for converting strings in double-byte character set (DBCS) applications. All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.\"\n  example:\n  - \"The following example uses the `Chr` function to return the character associated with the specified character code.  \\n  \\n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]\"\n  syntax:\n    content: public static char Chr (int CharCode);\n    parameters:\n    - id: CharCode\n      type: System.Int32\n      description: Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression representing the `code point`, or character code, for the character.\n    return:\n      type: System.Char\n      description: Returns the character associated with the specified character code.\n  overload: Microsoft.VisualBasic.Strings.Chr*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>CharCode</code> &lt; 0 or &gt; 255 for <xref uid=\"langword_csharp_Chr\" name=\"Chr\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)\n  id: ChrW(System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: ChrW(Int32)\n  nameWithType: Strings.ChrW(Int32)\n  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the character associated with the specified character code.\n  remarks: \"The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`. For example, -29183 is a `Short` but +36353 is an `Integer`. This also facilitates compatibility with Visual Basic 6.0.  \\n  \\n `Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=fullName> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS). It then takes `CharCode` as a code point in the appropriate set. The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.  \\n  \\n The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace. You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  \\n  \\n `ChrW` takes `CharCode` as a Unicode code point. The range is independent of the culture and code page settings for the current thread. Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.  \\n  \\n Numbers from 0 through 31 are the same as standard nonprintable ASCII codes. For example, `Chr(10)` returns a line feed character.  \\n  \\n> [!NOTE]\\n>  The `ChrB` function in earlier versions of Visual Basic returns a single byte. It is used primarily for converting strings in double-byte character set (DBCS) applications. All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.\"\n  example:\n  - \"The following example uses the `Chr` function to return the character associated with the specified character code.  \\n  \\n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]\"\n  syntax:\n    content: public static char ChrW (int CharCode);\n    parameters:\n    - id: CharCode\n      type: System.Int32\n      description: Required. An <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression representing the `code point`, or character code, for the character.\n    return:\n      type: System.Char\n      description: Returns the character associated with the specified character code.\n  overload: Microsoft.VisualBasic.Strings.ChrW*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>CharCode</code> &lt; -32768 or &gt; 65535 for <xref uid=\"langword_csharp_ChrW\" name=\"ChrW\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)\n  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Filter(Object[],String,Boolean,CompareMethod)\n  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a zero-based array containing a subset of a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array based on specified filter criteria.\n  remarks: \"If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array. An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.  \\n  \\n The array returned by the `Filter` function contains only enough elements to contain the number of matched items.  \\n  \\n The `Compare` argument can have the following values.  \\n  \\n|||  \\n|-|-|  \\n|Constant|Description|  \\n|`CompareMethod.Binary`|Performs a binary comparison|  \\n|`CompareMethod.Text`|Performs a textual comparison|\"\n  example:\n  - \"This example demonstrates the use of the `Filter` function.  \\n  \\n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]\"\n  syntax:\n    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);\n    parameters:\n    - id: Source\n      type: System.Object[]\n      description: Required. One-dimensional array of strings to be searched.\n    - id: Match\n      type: System.String\n      description: Required. String to search for.\n    - id: Include\n      type: System.Boolean\n      description: Optional. <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> value indicating whether to return substrings that include or exclude `Match`. If `Include` is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that contains `Match` as a substring. If `Include` is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that does not contain `Match` as a substring.\n    - id: Compare\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Optional. Numeric value indicating the kind of string comparison to use. See \"Settings\" for values.\n    return:\n      type: System.String[]\n      description: Returns a zero-based array containing a subset of a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array based on specified filter criteria.\n  overload: Microsoft.VisualBasic.Strings.Filter*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Source</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or is not a one-dimensional array.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)\n  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Filter(String[],String,Boolean,CompareMethod)\n  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a zero-based array containing a subset of a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array based on specified filter criteria.\n  remarks: \"If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array. An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.  \\n  \\n The array returned by the `Filter` function contains only enough elements to contain the number of matched items.  \\n  \\n The `Compare` argument can have the following values.  \\n  \\n|||  \\n|-|-|  \\n|Constant|Description|  \\n|`CompareMethod.Binary`|Performs a binary comparison|  \\n|`CompareMethod.Text`|Performs a textual comparison|\"\n  example:\n  - \"This example demonstrates the use of the `Filter` function.  \\n  \\n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]\"\n  syntax:\n    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);\n    parameters:\n    - id: Source\n      type: System.String[]\n      description: Required. One-dimensional array of strings to be searched.\n    - id: Match\n      type: System.String\n      description: Required. String to search for.\n    - id: Include\n      type: System.Boolean\n      description: Optional. <xref uid=\"langword_csharp_Boolean\" name=\"Boolean\" href=\"\"></xref> value indicating whether to return substrings that include or exclude `Match`. If `Include` is <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that contains `Match` as a substring. If `Include` is <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Filter\" name=\"Filter\" href=\"\"></xref> function returns the subset of the array that does not contain `Match` as a substring.\n    - id: Compare\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Optional. Numeric value indicating the kind of string comparison to use. See \"Settings\" for values.\n    return:\n      type: System.String[]\n      description: Returns a zero-based array containing a subset of a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array based on specified filter criteria.\n  overload: Microsoft.VisualBasic.Strings.Filter*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Source</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> or is not a one-dimensional array.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)\n  id: Format(System.Object,System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Format(Object,String)\n  nameWithType: Strings.Format(Object,String)\n  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string formatted according to instructions contained in a format <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n  remarks: \"The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \\n  \\n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \\n  \\n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \\n  \\n## Different Formats for Different Numeric Values  \\n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \\n  \\n|||  \\n|-|-|  \\n|If you use|This is the result|  \\n|One section only|The format expression applies to all values.|  \\n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \\n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \\n  \\n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \\n  \\n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \\n  \\n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \\n  \\n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \\n  \\n## Predefined Numeric Formats  \\n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \\n  \\n|||  \\n|-|-|  \\n|Format name|Description|  \\n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \\\"g\\\")` returns `1018`.|  \\n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \\\"c\\\")` returns `$1,234,567.00`.|  \\n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \\\"f\\\")` returns `1234567.00`.|  \\n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \\\"n\\\")` returns `1,234,567.00`.|  \\n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \\\"Percent\\\")` returns `47.44%`.|  \\n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \\\"p\\\")` returns `80.35 %`.|  \\n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \\\"Scientific\\\")` returns `1.23E+06`.|  \\n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \\\"e\\\")` returns `1.234567e+006`.|  \\n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \\\"d\\\")` returns `127`.|  \\n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \\\"x\\\")` returns `7f`.|  \\n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \\\"Yes/No\\\")` returns `No`.|  \\n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \\\"True/False\\\")` returns `True`.|  \\n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \\\"On/Off\\\")` returns `On`.|  \\n  \\n### Smart Device Developer Notes  \\n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \\n  \\n## User-Defined Numeric Formats  \\n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \\n  \\n|||  \\n|-|-|  \\n|Character|Description|  \\n|None|Displays the number with no formatting.|  \\n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \\n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \\n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \\n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \\n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \\\"scale the number by dividing it by 1,000, rounding as needed.\\\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\\\"#,0.\\\"`, which uses the thousands separator to format the number 100 million as the string \\\"100,000,000\\\".<br />-   `\\\"#0,.\\\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \\\"100000\\\".<br />-   `\\\"#,0,.\\\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \\\"100,000\\\".|  \\n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \\n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \\n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \\n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\\\`) or enclose it in double quotation marks (\\\" \\\").|  \\n|(`\\\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \\n|(`\\\"``ABC``\\\"`)|Displays the string inside the double quotation marks (\\\" \\\"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\\\")).|  \\n  \\n### Legacy Code Example  \\n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \\n  \\n|||||  \\n|-|-|-|-|  \\n|Format (`Style`)|\\\"5\\\" formatted as|\\\"-5\\\" formatted as|\\\"0.5\\\" formatted as|  \\n|`Zero-length string (\\\"\\\")`|`5`|`-5`|`0.5`|  \\n|`0`|`5`|`-5`|`1`|  \\n|`0.00`|`5.00`|`-5.00`|`0.50`|  \\n|`#,##0`|`5`|`-5`|`1`|  \\n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \\n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \\n|`0%`|`500%`|`-500%`|`50%`|  \\n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \\n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \\n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \\n  \\n## Predefined Date/Time Formats  \\n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \\n  \\n|||  \\n|-|-|  \\n|Format Name|Description|  \\n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \\n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \\n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \\n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \\n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \\n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \\n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \\n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \\n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \\n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \\n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \\n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \\n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \\n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \\n  \\n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n## User-Defined Date/Time Formats  \\n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \\n  \\n|||  \\n|-|-|  \\n|Character|Description|  \\n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \\n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \\n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \\n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \\n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \\n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \\n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \\n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \\n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \\n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \\n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \\n|`gg`|Displays the period/era string (for example, `A.D.`).|  \\n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \\n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \\n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \\n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \\n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \\n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \\n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \\n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \\n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \\n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \\n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \\n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \\n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \\n|`yyy`|Displays the year in four-digit numeric format.|  \\n|`yyyy`|Displays the year in four-digit numeric format.|  \\n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \\n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \\n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \\n  \\n### Legacy Code Example  \\n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \\n  \\n|||  \\n|-|-|  \\n|Format|Displays|  \\n|`M/d/yy`|`12/7/58`|  \\n|`d-MMM`|`7-Dec`|  \\n|`d-MMMM-yy`|`7-December-58`|  \\n|`d MMMM`|`7 December`|  \\n|`MMMM yy`|`December 58`|  \\n|`hh:mm tt`|`08:50 PM`|  \\n|`h:mm:ss t`|`8:50:35 P`|  \\n|`H:mm`|`20:50`|  \\n|`H:mm:ss`|`20:50:35`|  \\n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \\n  \\n### Smart Device Developer Notes  \\n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device.\"\n  example:\n  - \"This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \\n  \\n> [!NOTE]\\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \\n  \\n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]\"\n  syntax:\n    content: public static string Format (object Expression, string Style = \"\");\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. Any valid expression.\n    - id: Style\n      type: System.String\n      description: Optional. A valid named or user-defined format <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string formatted according to instructions contained in a format <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n  overload: Microsoft.VisualBasic.Strings.Format*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)\n  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)\n  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.\n  remarks: \"When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.  \\n  \\n The position of the currency symbol relative to the currency value is determined by the system's regional settings.  \\n  \\n> [!NOTE]\\n>  All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab.  \\n  \\n The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values.  \\n  \\n|||  \\n|-|-|  \\n|Value|Description|  \\n|`TriState.True`|True|  \\n|`TriState.False`|False|  \\n|`TriState.UseDefault`|The computer's regional settings|\"\n  example:\n  - \"The following example illustrates the use of the `FormatCurrency` function.  \\n  \\n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]\"\n  syntax:\n    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. Expression to be formatted.\n    - id: NumDigitsAfterDecimal\n      type: System.Int32\n      description: Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.\n    - id: IncludeLeadingDigit\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not a leading zero is displayed for fractional values. See \"Remarks\" for values.\n    - id: UseParensForNegativeNumbers\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not to place negative values within parentheses. See \"Remarks\" for values.\n    - id: GroupDigits\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See \"Remarks\" for values.\n    return:\n      type: System.String\n      description: Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.\n  overload: Microsoft.VisualBasic.Strings.FormatCurrency*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number of digits after decimal point is greater than 99.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: Type is not numeric.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)\n  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: FormatDateTime(DateTime,DateFormat)\n  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)\n  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string expression representing a date/time value.\n  remarks: \"The `Date` data type always contains both date and time information. For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time. If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string. For example, if you convert #1/1/0001 9:30:00# to a string, the result is \\\"9:30:00 AM\\\"; the date information is suppressed. However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`.  \\n  \\n> [!NOTE]\\n>  If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application. However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture. This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly.  \\n  \\n The `NamedFormat` argument has the following settings.  \\n  \\n|||  \\n|-|-|  \\n|Constant|Description|  \\n|`DateFormat.GeneralDate`|Display a date and/or time. Display a date part as a short date. If there is a time part, display it as a long time. If present, both parts display.|  \\n|`DateFormat.LongDate`|Display a date using the long date format specified in your computer's regional settings.|  \\n|`DateFormat.ShortDate`|Display a date using the short date format specified in your computer's regional settings.|  \\n|`DateFormat.LongTime`|Display a time using the time format specified in your computer's regional settings.|  \\n|`DateFormat.ShortTime`|Display a time using the 24-hour format (hh:mm).|\"\n  example:\n  - \"This example demonstrates the use of the `FormatDateTime` function.  \\n  \\n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]\"\n  syntax:\n    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);\n    parameters:\n    - id: Expression\n      type: System.DateTime\n      description: Required. <xref uid=\"langword_csharp_Date\" name=\"Date\" href=\"\"></xref> expression to be formatted.\n    - id: NamedFormat\n      type: Microsoft.VisualBasic.DateFormat\n      description: Optional. Numeric value that indicates the date/time format used. If omitted, <xref uid=\"langword_csharp_DateFormat.GeneralDate\" name=\"DateFormat.GeneralDate\" href=\"\"></xref> is used.\n    return:\n      type: System.String\n      description: Returns a string expression representing a date/time value.\n  overload: Microsoft.VisualBasic.Strings.FormatDateTime*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>NamedFormat</code> setting is not valid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: FormatNumber(Object,Int32,TriState,TriState,TriState)\n  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)\n  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an expression formatted as a number.\n  remarks: \"When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.  \\n  \\n> [!NOTE]\\n>  All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework.  \\n  \\n The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.  \\n  \\n|||  \\n|-|-|  \\n|Constant|Description|  \\n|`TriState.True`|True|  \\n|`TriState.False`|False|  \\n|`TriState.UseDefault`|The computer's regional settings|\"\n  example:\n  - \"This example demonstrates the `FormatNumber` function.  \\n  \\n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]\"\n  syntax:\n    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. Expression to be formatted.\n    - id: NumDigitsAfterDecimal\n      type: System.Int32\n      description: Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.\n    - id: IncludeLeadingDigit\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether a leading 0 is displayed for fractional values. See \"Settings\" for values.\n    - id: UseParensForNegativeNumbers\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether to place negative values within parentheses. See \"Settings\" for values.\n    - id: GroupDigits\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See \"Settings\" for values.\n    return:\n      type: System.String\n      description: Returns an expression formatted as a number.\n  overload: Microsoft.VisualBasic.Strings.FormatNumber*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: Type is not numeric.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: FormatPercent(Object,Int32,TriState,TriState,TriState)\n  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)\n  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.\n  remarks: \"When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.  \\n  \\n> [!NOTE]\\n>  All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework.  \\n  \\n The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.  \\n  \\n|||  \\n|-|-|  \\n|Constant|Description|  \\n|`TriState.True`|True|  \\n|`TriState.False`|False|  \\n|`TriState.Default`|The computer's regional settings|\"\n  example:\n  - \"This example illustrates the use of the `FormatPercent` function.  \\n  \\n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]\"\n  syntax:\n    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. Expression to be formatted.\n    - id: NumDigitsAfterDecimal\n      type: System.Int32\n      description: Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.\n    - id: IncludeLeadingDigit\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not a leading zero displays for fractional values. See \"Settings\" for values.\n    - id: UseParensForNegativeNumbers\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not to place negative values within parentheses. See \"Settings\" for values.\n    - id: GroupDigits\n      type: Microsoft.VisualBasic.TriState\n      description: Optional. <xref href=\"Microsoft.VisualBasic.TriState\"></xref> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See \"Settings\" for values.\n    return:\n      type: System.String\n      description: Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.\n  overload: Microsoft.VisualBasic.Strings.FormatPercent*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: Type is not numeric.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)\n  id: GetChar(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: GetChar(String,Int32)\n  nameWithType: Strings.GetChar(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value representing the character from the specified index in the supplied string.\n  remarks: If `Index` is less than 1 or greater than the index of the last character in `str`, an `ArgumentException` is thrown.\n  example:\n  - \"This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \\n  \\n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]\"\n  syntax:\n    content: public static char GetChar (string str, int Index);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    - id: Index\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The (1-based) index of the character in `str` to be returned.\n    return:\n      type: System.Char\n      description: <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value representing the character from the specified index in the supplied string.\n  overload: Microsoft.VisualBasic.Strings.GetChar*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>str</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <code>Index</code> &lt; 1, or <code>Index</code> is greater than index of last character of <code>str</code>.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: InStr(String,String,CompareMethod)\n  nameWithType: Strings.InStr(String,String,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer specifying the start position of the first occurrence of one string within another.\n  remarks: \"Typically, the `InStr` function is used when parsing strings.  \\n  \\n> [!NOTE]\\n>  The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.  \\n  \\n The `Compare` argument settings are:  \\n  \\n||||  \\n|-|-|-|  \\n|Constant|Value|Description|  \\n|`Binary`|0|Performs a binary comparison|  \\n|`Text`|1|Performs a text comparison|\"\n  example:\n  - \"This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \\n  \\n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]\"\n  syntax:\n    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);\n    parameters:\n    - id: String1\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression being searched.\n    - id: String2\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression sought.\n    - id: Compare\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Optional. Specifies the type of string comparison. If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison.\n    return:\n      type: System.Int32\n      description: \"<table><tbody><tr><td> If  \\n  \\n </td><td> InStr returns  \\n  \\n </td></tr><tr><td>\\n          <code>String1</code> is zero length or <xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref></td><td> 0  \\n  \\n </td></tr><tr><td>\\n          <code>String2</code> is zero length or <xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref></td><td> The starting position for the search, which defaults to the first character position.  \\n  \\n </td></tr><tr><td>\\n          <code>String2</code> is not found  \\n  \\n </td><td> 0  \\n  \\n </td></tr><tr><td>\\n          <code>String2</code> is found within <code>String1</code></td><td> Position where match begins  \\n  \\n </td></tr><tr><td></td><td></td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.Strings.InStr*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: InStr(Int32,String,String,CompareMethod)\n  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer specifying the start position of the first occurrence of one string within another.\n  remarks: \"Typically, the `InStr` function is used when parsing strings.  \\n  \\n> [!NOTE]\\n>  The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.  \\n  \\n The `Compare` argument settings are:  \\n  \\n||||  \\n|-|-|-|  \\n|Constant|Value|Description|  \\n|`Binary`|0|Performs a binary comparison|  \\n|`Text`|1|Performs a text comparison|\"\n  example:\n  - \"This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \\n  \\n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]\"\n  syntax:\n    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);\n    parameters:\n    - id: Start\n      type: System.Int32\n      description: Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.\n    - id: String1\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression being searched.\n    - id: String2\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression sought.\n    - id: Compare\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Optional. Specifies the type of string comparison. If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison.\n    return:\n      type: System.Int32\n      description: \"<table><tbody><tr><td> If  \\n  \\n </td><td> InStr returns  \\n  \\n </td></tr><tr><td>\\n          <code>String1</code> is zero length or <xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref></td><td> 0  \\n  \\n </td></tr><tr><td>\\n          <code>String2</code> is zero length or <xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref></td><td>\\n          <code>start</code>\\n        </td></tr><tr><td>\\n          <code>String2</code> is not found  \\n  \\n </td><td> 0  \\n  \\n </td></tr><tr><td>\\n          <code>String2</code> is found within <code>String1</code></td><td> Position where match begins  \\n  \\n </td></tr><tr><td>\\n          <code>Start</code> &gt; length of <code>String1</code></td><td> 0  \\n  \\n </td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.Strings.InStr*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Start</code> &lt; 1.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: InStrRev(String,String,Int32,CompareMethod)\n  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the position of the first occurrence of one string within another, starting from the right side of the string.\n  remarks: \"Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function.  \\n  \\n The `Compare` argument can have the following values.  \\n  \\n|||  \\n|-|-|  \\n|Constant|Description|  \\n|`Binary`|Performs a binary comparison.|  \\n|`Text`|Performs a textual comparison.|\"\n  example:\n  - \"This example demonstrates the use of the `InStrRev` function.  \\n  \\n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]\"\n  syntax:\n    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);\n    parameters:\n    - id: StringCheck\n      type: System.String\n      description: Required. String expression being searched.\n    - id: StringMatch\n      type: System.String\n      description: Required. String expression being searched for.\n    - id: Start\n      type: System.Int32\n      description: Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If `Start` is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.\n    - id: Compare\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.\n    return:\n      type: System.Int32\n      description: \"<table><tbody><tr><td> If  \\n  \\n </td><td> InStrRev returns  \\n  \\n </td></tr><tr><td>\\n          <code>StringCheck</code> is zero-length  \\n  \\n </td><td> 0  \\n  \\n </td></tr><tr><td>\\n          <code>StringMatch</code> is zero-length  \\n  \\n </td><td>\\n          <code>Start</code>\\n        </td></tr><tr><td>\\n          <code>StringMatch</code> is not found  \\n  \\n </td><td> 0  \\n  \\n </td></tr><tr><td>\\n          <code>StringMatch</code> is found within <code>StringCheck</code></td><td> Position at which the first match is found, starting with the right side of the string.  \\n  \\n </td></tr><tr><td>\\n          <code>Start</code> is greater than length of <code>StringMatch</code></td><td> 0  \\n  \\n </td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.Strings.InStrRev*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Start</code> = 0 or <code>Start</code> &lt; -1.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)\n  id: Join(System.Object[],System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Join(Object[],String)\n  nameWithType: Strings.Join(Object[],String)\n  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string created by joining a number of substrings contained in an array.\n  remarks: There is a parity between the `Join` and `Split` functions. The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string. The `Split` function takes a string and separates it at the delimiter, to return an array of strings. However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.\n  example:\n  - \"The following example demonstrates how to use the `Join` function to create a list from several strings.  \\n  \\n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]\"\n  syntax:\n    content: public static string Join (object[] SourceArray, string Delimiter = \" \");\n    parameters:\n    - id: SourceArray\n      type: System.Object[]\n      description: Required. One-dimensional array containing substrings to be joined.\n    - id: Delimiter\n      type: System.String\n      description: Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (\" \") is used. If `Delimiter` is a zero-length string (\"\") or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, all items in the list are concatenated with no delimiters.\n    return:\n      type: System.String\n      description: Returns a string created by joining a number of substrings contained in an array.\n  overload: Microsoft.VisualBasic.Strings.Join*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>SourceArray</code> is not one dimensional.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)\n  id: Join(System.String[],System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Join(String[],String)\n  nameWithType: Strings.Join(String[],String)\n  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string created by joining a number of substrings contained in an array.\n  remarks: There is a parity between the `Join` and `Split` functions. The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string. The `Split` function takes a string and separates it at the delimiter, to return an array of strings. However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.\n  example:\n  - \"The following example demonstrates how to use the `Join` function to create a list from several strings.  \\n  \\n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]\"\n  syntax:\n    content: public static string Join (string[] SourceArray, string Delimiter = \" \");\n    parameters:\n    - id: SourceArray\n      type: System.String[]\n      description: Required. One-dimensional array containing substrings to be joined.\n    - id: Delimiter\n      type: System.String\n      description: Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (\" \") is used. If `Delimiter` is a zero-length string (\"\") or <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, all items in the list are concatenated with no delimiters.\n    return:\n      type: System.String\n      description: Returns a string created by joining a number of substrings contained in an array.\n  overload: Microsoft.VisualBasic.Strings.Join*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>SourceArray</code> is not one dimensional.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)\n  id: LCase(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: LCase(Char)\n  nameWithType: Strings.LCase(Char)\n  fullName: Microsoft.VisualBasic.Strings.LCase(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string or character converted to lowercase.\n  remarks: \"Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.  \\n  \\n This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  \\n  \\n> [!IMPORTANT]\\n>  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"This example uses the `LCase` function to return a lowercase version of a string.  \\n  \\n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]\"\n  syntax:\n    content: public static char LCase (char Value);\n    parameters:\n    - id: Value\n      type: System.Char\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression.\n    return:\n      type: System.Char\n      description: Returns a string or character converted to lowercase.\n  overload: Microsoft.VisualBasic.Strings.LCase*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.LCase(System.String)\n  id: LCase(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: LCase(String)\n  nameWithType: Strings.LCase(String)\n  fullName: Microsoft.VisualBasic.Strings.LCase(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string or character converted to lowercase.\n  remarks: \"Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.  \\n  \\n This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  \\n  \\n> [!IMPORTANT]\\n>  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"This example uses the `LCase` function to return a lowercase version of a string.  \\n  \\n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]\"\n  syntax:\n    content: public static string LCase (string Value);\n    parameters:\n    - id: Value\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string or character converted to lowercase.\n  overload: Microsoft.VisualBasic.Strings.LCase*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)\n  id: Left(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Left(String,Int32)\n  nameWithType: Strings.Left(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string containing a specified number of characters from the left side of a string.\n  remarks: \"To determine the number of characters in `str`, use the `Len` function. If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`.  \\n  \\n> [!NOTE]\\n>  The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported.\"\n  example:\n  - \"This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \\n  \\n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]\"\n  syntax:\n    content: public static string Left (string str, int Length);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which the leftmost characters are returned.\n    - id: Length\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string (\"\") is returned. If greater than or equal to the number of characters in `str`, the entire string is returned.\n    return:\n      type: System.String\n      description: Returns a string containing a specified number of characters from the left side of a string.\n  overload: Microsoft.VisualBasic.Strings.Left*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Length</code> &lt; 0.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)\n  id: Len(System.Boolean)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Boolean)\n  nameWithType: Strings.Len(Boolean)\n  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]\"\n  syntax:\n    content: public static int Len (bool Expression);\n    parameters:\n    - id: Expression\n      type: System.Boolean\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)\n  id: Len(System.Byte)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Byte)\n  nameWithType: Strings.Len(Byte)\n  fullName: Microsoft.VisualBasic.Strings.Len(Byte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]\"\n  syntax:\n    content: public static int Len (byte Expression);\n    parameters:\n    - id: Expression\n      type: System.Byte\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Char)\n  id: Len(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Char)\n  nameWithType: Strings.Len(Char)\n  fullName: Microsoft.VisualBasic.Strings.Len(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]\"\n  syntax:\n    content: public static int Len (char Expression);\n    parameters:\n    - id: Expression\n      type: System.Char\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)\n  id: Len(System.DateTime)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(DateTime)\n  nameWithType: Strings.Len(DateTime)\n  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]\"\n  syntax:\n    content: public static int Len (DateTime Expression);\n    parameters:\n    - id: Expression\n      type: System.DateTime\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)\n  id: Len(System.Decimal)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Decimal)\n  nameWithType: Strings.Len(Decimal)\n  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]\"\n  syntax:\n    content: public static int Len (decimal Expression);\n    parameters:\n    - id: Expression\n      type: System.Decimal\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Double)\n  id: Len(System.Double)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Double)\n  nameWithType: Strings.Len(Double)\n  fullName: Microsoft.VisualBasic.Strings.Len(Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]\"\n  syntax:\n    content: public static int Len (double Expression);\n    parameters:\n    - id: Expression\n      type: System.Double\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)\n  id: Len(System.Int16)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Int16)\n  nameWithType: Strings.Len(Int16)\n  fullName: Microsoft.VisualBasic.Strings.Len(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]\"\n  syntax:\n    content: public static int Len (short Expression);\n    parameters:\n    - id: Expression\n      type: System.Int16\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)\n  id: Len(System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Int32)\n  nameWithType: Strings.Len(Int32)\n  fullName: Microsoft.VisualBasic.Strings.Len(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]\"\n  syntax:\n    content: public static int Len (int Expression);\n    parameters:\n    - id: Expression\n      type: System.Int32\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)\n  id: Len(System.Int64)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Int64)\n  nameWithType: Strings.Len(Int64)\n  fullName: Microsoft.VisualBasic.Strings.Len(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]\"\n  syntax:\n    content: public static int Len (long Expression);\n    parameters:\n    - id: Expression\n      type: System.Int64\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Object)\n  id: Len(System.Object)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Object)\n  nameWithType: Strings.Len(Object)\n  fullName: Microsoft.VisualBasic.Strings.Len(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]\"\n  syntax:\n    content: public static int Len (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)\n  id: Len(System.SByte)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(SByte)\n  nameWithType: Strings.Len(SByte)\n  fullName: Microsoft.VisualBasic.Strings.Len(SByte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]\"\n  syntax:\n    content: public static int Len (sbyte Expression);\n    parameters:\n    - id: Expression\n      type: System.SByte\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.Single)\n  id: Len(System.Single)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(Single)\n  nameWithType: Strings.Len(Single)\n  fullName: Microsoft.VisualBasic.Strings.Len(Single)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]\"\n  syntax:\n    content: public static int Len (float Expression);\n    parameters:\n    - id: Expression\n      type: System.Single\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.String)\n  id: Len(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(String)\n  nameWithType: Strings.Len(String)\n  fullName: Microsoft.VisualBasic.Strings.Len(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]\"\n  syntax:\n    content: public static int Len (string Expression);\n    parameters:\n    - id: Expression\n      type: System.String\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)\n  id: Len(System.UInt16)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(UInt16)\n  nameWithType: Strings.Len(UInt16)\n  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]\"\n  syntax:\n    content: public static int Len (ushort Expression);\n    parameters:\n    - id: Expression\n      type: System.UInt16\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)\n  id: Len(System.UInt32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(UInt32)\n  nameWithType: Strings.Len(UInt32)\n  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]\"\n  syntax:\n    content: public static int Len (uint Expression);\n    parameters:\n    - id: Expression\n      type: System.UInt32\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)\n  id: Len(System.UInt64)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Len(UInt64)\n  nameWithType: Strings.Len(UInt64)\n  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  remarks: \"With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function. If an `Object` contains a `String`, it will return the length of the string. If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.  \\n  \\n The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk. The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.  \\n  \\n> [!NOTE]\\n>  The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.  \\n  \\n> [!NOTE]\\n>  The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.  \\n  \\n## Smart Device Developer Notes  \\n The `Len` function accepts only `String` and `Object` variables as parameters. If an `Object` contains a `String`, it will return the length of the `String`. If a parameter is a NULL `Object` reference, the function returns zero. If an `Object` contains any other type, an exception is thrown.\"\n  example:\n  - \"This example uses `Len` to return the number of characters in a string.  \\n  \\n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]\"\n  syntax:\n    content: public static int Len (ulong Expression);\n    parameters:\n    - id: Expression\n      type: System.UInt64\n      description: Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression or variable name. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, the <xref uid=\"langword_csharp_Len\" name=\"Len\" href=\"\"></xref> function returns the size as it will be written to the file by the <xref uid=\"langword_csharp_FilePut\" name=\"FilePut\" href=\"\"></xref> function.\n    return:\n      type: System.Int32\n      description: Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.\n  overload: Microsoft.VisualBasic.Strings.Len*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)\n  id: LSet(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: LSet(String,Int32)\n  nameWithType: Strings.LSet(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a left-aligned string containing the specified string adjusted to the specified length.\n  remarks: If the specified string is longer than the specified length, the returned string is shortened to the specified length. If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.\n  example:\n  - \"This example demonstrates the use of the `LSet` function.  \\n  \\n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]\"\n  syntax:\n    content: public static string LSet (string Source, int Length);\n    parameters:\n    - id: Source\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. Name of string variable.\n    - id: Length\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Length of returned string.\n    return:\n      type: System.String\n      description: Returns a left-aligned string containing the specified string adjusted to the specified length.\n  overload: Microsoft.VisualBasic.Strings.LSet*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)\n  id: LTrim(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: LTrim(String)\n  nameWithType: Strings.LTrim(String)\n  fullName: Microsoft.VisualBasic.Strings.LTrim(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>).\n  remarks: The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.\n  example:\n  - \"This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \\n  \\n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]\"\n  syntax:\n    content: public static string LTrim (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>).\n  overload: Microsoft.VisualBasic.Strings.LTrim*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)\n  id: Mid(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Mid(String,Int32)\n  nameWithType: Strings.Mid(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string that contains all the characters starting from a specified position in a string.\n  remarks: \"To determine the number of characters in `str`, use the `Len` function.  \\n  \\n Visual Basic has a `Mid` function and a `Mid` statement. These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters. For more information, see [Mid Statement](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic strings are in Unicode, and `MidB` is no longer supported.\"\n  example:\n  - \"The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \\n  \\n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]\"\n  syntax:\n    content: public static string Mid (string str, int Start);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which characters are returned.\n    - id: Start\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Starting position of the characters to return. If `Start` is greater than the number of characters in `str`, the <xref uid=\"langword_csharp_Mid\" name=\"Mid\" href=\"\"></xref> function returns a zero-length string (\"\"). `Start` is one-based.\n    return:\n      type: System.String\n      description: A string that consists of all the characters starting from the specified position in the string.\n  overload: Microsoft.VisualBasic.Strings.Mid*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Start</code> &lt;= 0 or <code>Length</code> &lt; 0.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)\n  id: Mid(System.String,System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Mid(String,Int32,Int32)\n  nameWithType: Strings.Mid(String,Int32,Int32)\n  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string that contains a specified number of characters starting from a specified position in a string.\n  remarks: \"To determine the number of characters in `str`, use the `Len` function.  \\n  \\n Visual Basic has a `Mid` function and a `Mid` statement. These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters. For more information, see [Mid Statement](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All Visual Basic strings are in Unicode, and `MidB` is no longer supported.\"\n  example:\n  - \"The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \\n  \\n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]\"\n  syntax:\n    content: public static string Mid (string str, int Start, int Length);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which characters are returned.\n    - id: Start\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Starting position of the characters to return. If `Start` is greater than the number of characters in `str`, the <xref uid=\"langword_csharp_Mid\" name=\"Mid\" href=\"\"></xref> function returns a zero-length string (\"\"). `Start` is one based.\n    - id: Length\n      type: System.Int32\n      description: Optional. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Number of characters to return. If omitted or if there are fewer than `Length` characters in the text (including the character at position `Start`), all characters from the start position to the end of the string are returned.\n    return:\n      type: System.String\n      description: A string that consists of the specified number of characters starting from the specified position in the string.\n  overload: Microsoft.VisualBasic.Strings.Mid*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Start</code> &lt;= 0 or <code>Length</code> &lt; 0.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Replace(String,String,String,Int32,Int32,CompareMethod)\n  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string in which a specified substring has been replaced with another substring a specified number of times.\n  remarks: \"The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values.  \\n  \\n The `Compare` argument can have the following values.  \\n  \\n|||  \\n|-|-|  \\n|Constant|Description|  \\n|`Binary`|Performs a binary comparison|  \\n|`Text`|Performs a textual comparison|\"\n  example:\n  - \"This example demonstrates the `Replace` function.  \\n  \\n```vb#  \\nDim TestString As String = \\\"Shopping List\\\"  \\n' Returns \\\"Shipping List\\\".  \\nDim aString As String = Replace(TestString, \\\"o\\\", \\\"i\\\")  \\n```\"\n  syntax:\n    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);\n    parameters:\n    - id: Expression\n      type: System.String\n      description: Required. String expression containing substring to replace.\n    - id: Find\n      type: System.String\n      description: Required. Substring being searched for.\n    - id: Replacement\n      type: System.String\n      description: Required. Replacement substring.\n    - id: Start\n      type: System.Int32\n      description: Optional. Position within `Expression` that starts a substring used for replacement. The return value of <xref uid=\"langword_csharp_Replace\" name=\"Replace\" href=\"\"></xref> is a string that begins at `Start`, with appropriate substitutions. If omitted, 1 is assumed.\n    - id: Count\n      type: System.Int32\n      description: Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means \"make all possible substitutions.\"\n    - id: Compare\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.\n    return:\n      type: System.String\n      description: \"<xref uid=\\\"langword_csharp_Replace\\\" name=\\\"Replace\\\" href=\\\"\\\"></xref> returns the following values.  \\n  \\n <table><tbody><tr><td> If  \\n  \\n </td><td> Replace returns  \\n  \\n </td></tr><tr><td><code>Find</code> is zero-length or <xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref></td><td> Copy of <code>Expression</code></td></tr><tr><td><code>Replace</code> is zero-length  \\n  \\n </td><td> Copy of <code>Expression</code> with no occurrences of <code>Find</code></td></tr><tr><td><code>Expression</code> is zero-length or <xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref>, or <code>Start</code> is greater than length of <code>Expression</code></td><td><xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref></td></tr><tr><td><code>Count</code> is 0  \\n  \\n </td><td> Copy of <code>Expression</code></td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.Strings.Replace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Count</code> &lt; -1 or <code>Start</code> &lt;= 0.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)\n  id: Right(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Right(String,Int32)\n  nameWithType: Strings.Right(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string containing a specified number of characters from the right side of a string.\n  remarks: \"To determine the number of characters in `str`, use the `Len` function. If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`.  \\n  \\n> [!NOTE]\\n>  The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters. It is used primarily for converting strings in double-byte character set (DBCS) applications. All current Visual Basic strings are in Unicode, and `RightB` is no longer supported.\"\n  example:\n  - \"This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \\n  \\n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]\"\n  syntax:\n    content: public static string Right (string str, int Length);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression from which the rightmost characters are returned.\n    - id: Length\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref>. Numeric expression indicating how many characters to return. If 0, a zero-length string (\"\") is returned. If greater than or equal to the number of characters in `str`, the entire string is returned.\n    return:\n      type: System.String\n      description: Returns a string containing a specified number of characters from the right side of a string.\n  overload: Microsoft.VisualBasic.Strings.Right*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Length</code> &lt; 0.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)\n  id: RSet(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: RSet(String,Int32)\n  nameWithType: Strings.RSet(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a right-aligned string containing the specified string adjusted to the specified length.\n  remarks: If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string. If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length. If the specified string is longer than the specified length, it is shortened to the specified length.\n  example:\n  - \"This example demonstrates the use of the `RSet` function.  \\n  \\n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]\"\n  syntax:\n    content: public static string RSet (string Source, int Length);\n    parameters:\n    - id: Source\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression. Name of string variable.\n    - id: Length\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. Length of returned string.\n    return:\n      type: System.String\n      description: Returns a right-aligned string containing the specified string adjusted to the specified length.\n  overload: Microsoft.VisualBasic.Strings.RSet*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)\n  id: RTrim(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: RTrim(String)\n  nameWithType: Strings.RTrim(String)\n  fullName: Microsoft.VisualBasic.Strings.RTrim(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>).\n  remarks: The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.\n  example:\n  - \"This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \\n  \\n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]\"\n  syntax:\n    content: public static string RTrim (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>).\n  overload: Microsoft.VisualBasic.Strings.RTrim*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)\n  id: Space(System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Space(Int32)\n  nameWithType: Strings.Space(Int32)\n  fullName: Microsoft.VisualBasic.Strings.Space(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string consisting of the specified number of spaces.\n  remarks: The `Space` function is useful for formatting output and clearing data in fixed-length strings.\n  example:\n  - \"This example uses the `Space` function to return a string consisting of a specified number of spaces.  \\n  \\n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]\"\n  syntax:\n    content: public static string Space (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The number of spaces you want in the string.\n    return:\n      type: System.String\n      description: Returns a string consisting of the specified number of spaces.\n  overload: Microsoft.VisualBasic.Strings.Space*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> &lt; 0.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Split(String,String,Int32,CompareMethod)\n  nameWithType: Strings.Split(String,String,Int32,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a zero-based, one-dimensional array containing a specified number of substrings.\n  remarks: \"By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array. When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings. For example, `Split(\\\"a:b:c\\\", \\\":\\\")` returns the array `{\\\"a\\\", \\\"b\\\", \\\"c\\\"}`, while `Split(\\\"a:b:c\\\", \\\":\\\", 2)` returns the array `{\\\"a\\\", \\\"b:c\\\"}`.  \\n  \\n When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string (\\\"\\\"). For example, `Split(\\\"xx\\\", \\\"x\\\")` returns the array containing three empty strings: one from between the beginning of the string and the first \\\"x\\\", one from between the two \\\"x\\\" strings, and one from between the last \\\"x\\\" and the end of the string.  \\n  \\n This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function.  \\n  \\n|||  \\n|-|-|  \\n|Split Call|Return Value|  \\n|`Split(\\\"42, 12, 19\\\")`|{\\\"42,\\\" , \\\"12,\\\" , \\\"19\\\"}|  \\n|`Split(\\\"42, 12, 19\\\", \\\", \\\")`|{\\\"42\\\", \\\"12\\\", \\\"19\\\"}|  \\n|`Split(\\\"42, 12, 19\\\", \\\", \\\", 2)`|{\\\"42\\\", \\\"12, 19\\\"}|  \\n|`Split(\\\"192.168.0.1\\\", \\\".\\\")`|{\\\"192\\\", \\\"168\\\", \\\"0\\\", \\\"1\\\"}|  \\n|`Split(\\\"Alice and Bob\\\", \\\" AND \\\")`|{\\\"Alice and Bob\\\"}|  \\n|`Split(\\\"Alice and Bob\\\", \\\" AND \\\", ,CompareMethod.Text)`|{\\\"Alice\\\", \\\"Bob\\\"}|  \\n|`Split(\\\"someone@example.com\\\", \\\"@\\\",1)`|{\\\"someone@example.com\\\"}|  \\n|`Split(\\\"someone@example.com\\\", \\\"@\\\",2)`|{\\\"someone\\\", \\\"example.com\\\"}|  \\n  \\n The `Compare` argument can have the following values.  \\n  \\n||||  \\n|-|-|-|  \\n|Constant|Description|Value|  \\n|`CompareMethod.Binary`|Performs a binary comparison|0|  \\n|`CompareMethod.Text`|Performs a textual comparison|1|\"\n  example:\n  - \"The following example demonstrates how to split a string at its spaces.  \\n  \\n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \\n  \\n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \\n  \\n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]\"\n  syntax:\n    content: public static string[] Split (string Expression, string Delimiter = \" \", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);\n    parameters:\n    - id: Expression\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression containing substrings and delimiters.\n    - id: Delimiter\n      type: System.String\n      description: Optional. Any single character used to identify substring limits. If `Delimiter` is omitted, the space character (\" \") is assumed to be the delimiter.\n    - id: Limit\n      type: System.Int32\n      description: Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the `Delimiter` string.\n    - id: Compare\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Optional. Numeric value indicating the comparison to use when evaluating substrings. See \"Settings\" for values.\n    return:\n      type: System.String[]\n      description: <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> array. If <code>Expression</code> is a zero-length string (\"\"), <xref uid=\"langword_csharp_Split\" name=\"Split\" href=\"\"></xref> returns a single-element array containing a zero-length string. If <code>Delimiter</code> is a zero-length string, or if it does not appear anywhere in <code>Expression</code>, <xref uid=\"langword_csharp_Split\" name=\"Split\" href=\"\"></xref> returns a single-element array containing the entire <code>Expression</code> string.\n  overload: Microsoft.VisualBasic.Strings.Split*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: StrComp(String,String,CompareMethod)\n  nameWithType: Strings.StrComp(String,String,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns -1, 0, or 1, based on the result of a string comparison.\n  remarks: \"The strings are compared by alphanumeric sort values beginning with the first character. For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The `Compare` argument settings are:  \\n  \\n|||  \\n|-|-|  \\n|Constant|Description|  \\n|`Binary`|Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.|  \\n|`Text`|Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.|\"\n  example:\n  - \"This example uses the `StrComp` function to return the results of a string comparison.  \\n  \\n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]\"\n  syntax:\n    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);\n    parameters:\n    - id: String1\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    - id: String2\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    - id: Compare\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Optional. Specifies the type of string comparison. If `Compare` is omitted, the <xref uid=\"langword_csharp_Option Compare\" name=\"Option Compare\" href=\"\"></xref> setting determines the type of comparison.\n    return:\n      type: System.Int32\n      description: \"The <xref uid=\\\"langword_csharp_StrComp\\\" name=\\\"StrComp\\\" href=\\\"\\\"></xref> function has the following return values.  \\n  \\n <table><tbody><tr><td> If  \\n  \\n </td><td> StrComp returns  \\n  \\n </td></tr><tr><td><code>String1</code> sorts ahead of <code>String2</code></td><td> -1  \\n  \\n </td></tr><tr><td><code>String1</code> is equal to <code>String2</code></td><td> 0  \\n  \\n </td></tr><tr><td><code>String1</code> sorts after <code>String2</code></td><td> 1  \\n  \\n </td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.Strings.StrComp*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Compare</code> value is not valid.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)\n  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: StrConv(String,VbStrConv,Int32)\n  nameWithType: Strings.StrConv(String,VbStrConv,Int32)\n  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string converted as specified.\n  remarks: \"The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed. In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed.  \\n  \\n This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  \\n  \\n> [!IMPORTANT]\\n>  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The `Conversion` argument settings are:  \\n  \\n|||  \\n|-|-|  \\n|Enumeration member|Description|  \\n|`VbStrConv.None`|Performs no conversion|  \\n|`VbStrConv.LinguisticCasing`|Uses linguistic rules for casing, rather than File System (default). Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.|  \\n|`VbStrConv.UpperCase`|Converts the string to uppercase characters.|  \\n|`VbStrConv.LowerCase`|Converts the string to lowercase characters.|  \\n|`VbStrConv.ProperCase`|Converts the first letter of every word in string to uppercase.|  \\n|`VbStrConv.Wide` <sup>*</sup>|Converts narrow (half-width) characters in the string to wide (full-width) characters.|  \\n|`VbStrConv.Narrow` <sup>*</sup>|Converts wide (full-width) characters in the string to narrow (half-width) characters.|  \\n|`VbStrConv.Katakana` <sup>**</sup>|Converts Hiragana characters in the string to Katakana characters.|  \\n|`VbStrConv.Hiragana` <sup>**</sup>|Converts Katakana characters in the string to Hiragana characters.|  \\n|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Converts Traditional Chinese characters to Simplified Chinese.|  \\n|`VbStrConv.TraditionalChinese` <sup>*</sup>|Converts Simplified Chinese characters to Traditional Chinese.|  \\n  \\n <sup>*</sup> Applies to Asian locales.  \\n  \\n <sup>**</sup> Applies to Japan only.  \\n  \\n> [!NOTE]\\n>  These constants are specified in the .NET Framework common language runtime. As a result, they can be used anywhere in your code in place of the actual values. Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`).  \\n  \\n The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`). The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.\"\n  example:\n  - \"This example converts text into all lowercase letters.  \\n  \\n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]\"\n  syntax:\n    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression to be converted.\n    - id: Conversion\n      type: Microsoft.VisualBasic.VbStrConv\n      description: Required. <xref href=\"Microsoft.VisualBasic.VbStrConv\"></xref> member. The enumeration value specifying the type of conversion to perform.\n    - id: LocaleID\n      type: System.Int32\n      description: Optional. The <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value, if different from the system <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value. (The system <xref uid=\"langword_csharp_LocaleID\" name=\"LocaleID\" href=\"\"></xref> value is the default.)\n    return:\n      type: System.String\n      description: Returns a string converted as specified.\n  overload: Microsoft.VisualBasic.Strings.StrConv*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Unsupported <code>LocaleID</code>, <code>Conversion</code> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)\n  id: StrDup(System.Int32,System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: StrDup(Int32,Char)\n  nameWithType: Strings.StrDup(Int32,Char)\n  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string or object consisting of the specified character repeated the specified number of times.\n  remarks: This function returns a `String` made up of repeated characters. The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.\n  example:\n  - \"This example uses the `StrDup` function to return a string of duplicated characters.  \\n  \\n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]\"\n  syntax:\n    content: public static string StrDup (int Number, char Character);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The length to the string to be returned.\n    - id: Character\n      type: System.Char\n      description: Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression. Only the first character of the expression will be used. If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value.\n    return:\n      type: System.String\n      description: Returns a string or object consisting of the specified character repeated the specified number of times.\n  overload: Microsoft.VisualBasic.Strings.StrDup*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is less than 0 or <code>Character</code> type is not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Character</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)\n  id: StrDup(System.Int32,System.Object)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: StrDup(Int32,Object)\n  nameWithType: Strings.StrDup(Int32,Object)\n  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string or object consisting of the specified character repeated the specified number of times.\n  remarks: This function returns a `String` made up of repeated characters. The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.\n  example:\n  - \"This example uses the `StrDup` function to return a string of duplicated characters.  \\n  \\n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]\"\n  syntax:\n    content: public static object StrDup (int Number, object Character);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The length to the string to be returned.\n    - id: Character\n      type: System.Object\n      description: Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression. Only the first character of the expression will be used. If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value.\n    return:\n      type: System.Object\n      description: Returns a string or object consisting of the specified character repeated the specified number of times.\n  overload: Microsoft.VisualBasic.Strings.StrDup*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is less than 0 or <code>Character</code> type is not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Character</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)\n  id: StrDup(System.Int32,System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: StrDup(Int32,String)\n  nameWithType: Strings.StrDup(Int32,String)\n  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string or object consisting of the specified character repeated the specified number of times.\n  remarks: This function returns a `String` made up of repeated characters. The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.\n  example:\n  - \"This example uses the `StrDup` function to return a string of duplicated characters.  \\n  \\n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]\"\n  syntax:\n    content: public static string StrDup (int Number, string Character);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. <xref uid=\"langword_csharp_Integer\" name=\"Integer\" href=\"\"></xref> expression. The length to the string to be returned.\n    - id: Character\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref>, <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>, or <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> expression. Only the first character of the expression will be used. If Character is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, it must contain either a <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> or a <xref uid=\"langword_csharp_String \" name=\"String \" href=\"\"></xref>value.\n    return:\n      type: System.String\n      description: Returns a string or object consisting of the specified character repeated the specified number of times.\n  overload: Microsoft.VisualBasic.Strings.StrDup*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is less than 0 or <code>Character</code> type is not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Character</code> is <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)\n  id: StrReverse(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: StrReverse(String)\n  nameWithType: Strings.StrReverse(String)\n  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string in which the character order of a specified string is reversed.\n  remarks: The `StrReverse` function returns a string that contains the same characters as `Expression`, but in the opposite order.\n  example:\n  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'\n  syntax:\n    content: public static string StrReverse (string Expression);\n    parameters:\n    - id: Expression\n      type: System.String\n      description: Required. String expression whose characters are to be reversed. If `Expression` is a zero-length string (\"\"), a zero-length string is returned.\n    return:\n      type: System.String\n      description: Returns a string in which the character order of a specified string is reversed.\n  overload: Microsoft.VisualBasic.Strings.StrReverse*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.Trim(System.String)\n  id: Trim(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: Trim(String)\n  nameWithType: Strings.Trim(String)\n  fullName: Microsoft.VisualBasic.Strings.Trim(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>).\n  remarks: The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.\n  example:\n  - \"This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \\n  \\n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]\"\n  syntax:\n    content: public static string Trim (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string containing a copy of a specified string with no leading spaces (<xref uid=\"langword_csharp_LTrim\" name=\"LTrim\" href=\"\"></xref>), no trailing spaces (<xref uid=\"langword_csharp_RTrim\" name=\"RTrim\" href=\"\"></xref>), or no leading or trailing spaces (<xref uid=\"langword_csharp_Trim\" name=\"Trim\" href=\"\"></xref>).\n  overload: Microsoft.VisualBasic.Strings.Trim*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)\n  id: UCase(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: UCase(Char)\n  nameWithType: Strings.UCase(Char)\n  fullName: Microsoft.VisualBasic.Strings.UCase(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string or character containing the specified string converted to uppercase.\n  remarks: \"Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.  \\n  \\n This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  \\n  \\n> [!IMPORTANT]\\n>  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"This example uses the `UCase` function to return an uppercase version of a string.  \\n  \\n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]\"\n  syntax:\n    content: public static char UCase (char Value);\n    parameters:\n    - id: Value\n      type: System.Char\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression.\n    return:\n      type: System.Char\n      description: Returns a string or character containing the specified string converted to uppercase.\n  overload: Microsoft.VisualBasic.Strings.UCase*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Strings.UCase(System.String)\n  id: UCase(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  langs:\n  - csharp\n  name: UCase(String)\n  nameWithType: Strings.UCase(String)\n  fullName: Microsoft.VisualBasic.Strings.UCase(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string or character containing the specified string converted to uppercase.\n  remarks: \"Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.  \\n  \\n This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.  \\n  \\n> [!IMPORTANT]\\n>  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=fullName> method, and pass <xref:System.StringComparison> or <xref:System.StringComparison> for the `comparisonType` argument. For more information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"This example uses the `UCase` function to return an uppercase version of a string.  \\n  \\n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]\"\n  syntax:\n    content: public static string UCase (string Value);\n    parameters:\n    - id: Value\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string or character containing the specified string converted to uppercase.\n  overload: Microsoft.VisualBasic.Strings.UCase*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Asc(Char)\n  nameWithType: Strings.Asc(Char)\n  fullName: Microsoft.VisualBasic.Strings.Asc(Char)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: Microsoft.VisualBasic.Strings.Asc(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Asc(String)\n  nameWithType: Strings.Asc(String)\n  fullName: Microsoft.VisualBasic.Strings.Asc(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: AscW(Char)\n  nameWithType: Strings.AscW(Char)\n  fullName: Microsoft.VisualBasic.Strings.AscW(Char)\n- uid: Microsoft.VisualBasic.Strings.AscW(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: AscW(String)\n  nameWithType: Strings.AscW(String)\n  fullName: Microsoft.VisualBasic.Strings.AscW(String)\n- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Chr(Int32)\n  nameWithType: Strings.Chr(Int32)\n  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)\n- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: ChrW(Int32)\n  nameWithType: Strings.ChrW(Int32)\n  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)\n- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Filter(Object[],String,Boolean,CompareMethod)\n  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualBasic.CompareMethod\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: CompareMethod\n  nameWithType: CompareMethod\n  fullName: Microsoft.VisualBasic.CompareMethod\n- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Filter(String[],String,Boolean,CompareMethod)\n  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)\n- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Format(Object,String)\n  nameWithType: Strings.Format(Object,String)\n  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)\n- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)\n  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)\n  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)\n- uid: Microsoft.VisualBasic.TriState\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: TriState\n  nameWithType: TriState\n  fullName: Microsoft.VisualBasic.TriState\n- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: FormatDateTime(DateTime,DateFormat)\n  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)\n  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: Microsoft.VisualBasic.DateFormat\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: DateFormat\n  nameWithType: DateFormat\n  fullName: Microsoft.VisualBasic.DateFormat\n- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: FormatNumber(Object,Int32,TriState,TriState,TriState)\n  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)\n  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)\n- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: FormatPercent(Object,Int32,TriState,TriState,TriState)\n  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)\n  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)\n- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: GetChar(String,Int32)\n  nameWithType: Strings.GetChar(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)\n- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: InStr(String,String,CompareMethod)\n  nameWithType: Strings.InStr(String,String,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)\n- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: InStr(Int32,String,String,CompareMethod)\n  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)\n- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: InStrRev(String,String,Int32,CompareMethod)\n  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)\n- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Join(Object[],String)\n  nameWithType: Strings.Join(Object[],String)\n  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)\n- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Join(String[],String)\n  nameWithType: Strings.Join(String[],String)\n  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)\n- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: LCase(Char)\n  nameWithType: Strings.LCase(Char)\n  fullName: Microsoft.VisualBasic.Strings.LCase(Char)\n- uid: Microsoft.VisualBasic.Strings.LCase(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: LCase(String)\n  nameWithType: Strings.LCase(String)\n  fullName: Microsoft.VisualBasic.Strings.LCase(String)\n- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Left(String,Int32)\n  nameWithType: Strings.Left(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)\n- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Boolean)\n  nameWithType: Strings.Len(Boolean)\n  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)\n- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Byte)\n  nameWithType: Strings.Len(Byte)\n  fullName: Microsoft.VisualBasic.Strings.Len(Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: Microsoft.VisualBasic.Strings.Len(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Char)\n  nameWithType: Strings.Len(Char)\n  fullName: Microsoft.VisualBasic.Strings.Len(Char)\n- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(DateTime)\n  nameWithType: Strings.Len(DateTime)\n  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)\n- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Decimal)\n  nameWithType: Strings.Len(Decimal)\n  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: true\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: Microsoft.VisualBasic.Strings.Len(System.Double)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Double)\n  nameWithType: Strings.Len(Double)\n  fullName: Microsoft.VisualBasic.Strings.Len(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Int16)\n  nameWithType: Strings.Len(Int16)\n  fullName: Microsoft.VisualBasic.Strings.Len(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Int32)\n  nameWithType: Strings.Len(Int32)\n  fullName: Microsoft.VisualBasic.Strings.Len(Int32)\n- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Int64)\n  nameWithType: Strings.Len(Int64)\n  fullName: Microsoft.VisualBasic.Strings.Len(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: Microsoft.VisualBasic.Strings.Len(System.Object)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Object)\n  nameWithType: Strings.Len(Object)\n  fullName: Microsoft.VisualBasic.Strings.Len(Object)\n- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(SByte)\n  nameWithType: Strings.Len(SByte)\n  fullName: Microsoft.VisualBasic.Strings.Len(SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: true\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: Microsoft.VisualBasic.Strings.Len(System.Single)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(Single)\n  nameWithType: Strings.Len(Single)\n  fullName: Microsoft.VisualBasic.Strings.Len(Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: Microsoft.VisualBasic.Strings.Len(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(String)\n  nameWithType: Strings.Len(String)\n  fullName: Microsoft.VisualBasic.Strings.Len(String)\n- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(UInt16)\n  nameWithType: Strings.Len(UInt16)\n  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: true\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(UInt32)\n  nameWithType: Strings.Len(UInt32)\n  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: true\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len(UInt64)\n  nameWithType: Strings.Len(UInt64)\n  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: true\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: LSet(String,Int32)\n  nameWithType: Strings.LSet(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)\n- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: LTrim(String)\n  nameWithType: Strings.LTrim(String)\n  fullName: Microsoft.VisualBasic.Strings.LTrim(String)\n- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Mid(String,Int32)\n  nameWithType: Strings.Mid(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)\n- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Mid(String,Int32,Int32)\n  nameWithType: Strings.Mid(String,Int32,Int32)\n  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)\n- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Replace(String,String,String,Int32,Int32,CompareMethod)\n  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)\n- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Right(String,Int32)\n  nameWithType: Strings.Right(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)\n- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: RSet(String,Int32)\n  nameWithType: Strings.RSet(String,Int32)\n  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)\n- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: RTrim(String)\n  nameWithType: Strings.RTrim(String)\n  fullName: Microsoft.VisualBasic.Strings.RTrim(String)\n- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Space(Int32)\n  nameWithType: Strings.Space(Int32)\n  fullName: Microsoft.VisualBasic.Strings.Space(Int32)\n- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Split(String,String,Int32,CompareMethod)\n  nameWithType: Strings.Split(String,String,Int32,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)\n- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrComp(String,String,CompareMethod)\n  nameWithType: Strings.StrComp(String,String,CompareMethod)\n  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)\n- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrConv(String,VbStrConv,Int32)\n  nameWithType: Strings.StrConv(String,VbStrConv,Int32)\n  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)\n- uid: Microsoft.VisualBasic.VbStrConv\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: VbStrConv\n  nameWithType: VbStrConv\n  fullName: Microsoft.VisualBasic.VbStrConv\n- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrDup(Int32,Char)\n  nameWithType: Strings.StrDup(Int32,Char)\n  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)\n- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrDup(Int32,Object)\n  nameWithType: Strings.StrDup(Int32,Object)\n  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)\n- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrDup(Int32,String)\n  nameWithType: Strings.StrDup(Int32,String)\n  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)\n- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrReverse(String)\n  nameWithType: Strings.StrReverse(String)\n  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)\n- uid: Microsoft.VisualBasic.Strings.Trim(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Trim(String)\n  nameWithType: Strings.Trim(String)\n  fullName: Microsoft.VisualBasic.Strings.Trim(String)\n- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: UCase(Char)\n  nameWithType: Strings.UCase(Char)\n  fullName: Microsoft.VisualBasic.Strings.UCase(Char)\n- uid: Microsoft.VisualBasic.Strings.UCase(System.String)\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: UCase(String)\n  nameWithType: Strings.UCase(String)\n  fullName: Microsoft.VisualBasic.Strings.UCase(String)\n- uid: Microsoft.VisualBasic.Strings.Asc*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Asc\n  nameWithType: Strings.Asc\n- uid: Microsoft.VisualBasic.Strings.AscW*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: AscW\n  nameWithType: Strings.AscW\n- uid: Microsoft.VisualBasic.Strings.Chr*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Chr\n  nameWithType: Strings.Chr\n- uid: Microsoft.VisualBasic.Strings.ChrW*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: ChrW\n  nameWithType: Strings.ChrW\n- uid: Microsoft.VisualBasic.Strings.Filter*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Filter\n  nameWithType: Strings.Filter\n- uid: Microsoft.VisualBasic.Strings.Format*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Format\n  nameWithType: Strings.Format\n- uid: Microsoft.VisualBasic.Strings.FormatCurrency*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: FormatCurrency\n  nameWithType: Strings.FormatCurrency\n- uid: Microsoft.VisualBasic.Strings.FormatDateTime*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: FormatDateTime\n  nameWithType: Strings.FormatDateTime\n- uid: Microsoft.VisualBasic.Strings.FormatNumber*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: FormatNumber\n  nameWithType: Strings.FormatNumber\n- uid: Microsoft.VisualBasic.Strings.FormatPercent*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: FormatPercent\n  nameWithType: Strings.FormatPercent\n- uid: Microsoft.VisualBasic.Strings.GetChar*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: GetChar\n  nameWithType: Strings.GetChar\n- uid: Microsoft.VisualBasic.Strings.InStr*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: InStr\n  nameWithType: Strings.InStr\n- uid: Microsoft.VisualBasic.Strings.InStrRev*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: InStrRev\n  nameWithType: Strings.InStrRev\n- uid: Microsoft.VisualBasic.Strings.Join*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Join\n  nameWithType: Strings.Join\n- uid: Microsoft.VisualBasic.Strings.LCase*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: LCase\n  nameWithType: Strings.LCase\n- uid: Microsoft.VisualBasic.Strings.Left*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Left\n  nameWithType: Strings.Left\n- uid: Microsoft.VisualBasic.Strings.Len*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Len\n  nameWithType: Strings.Len\n- uid: Microsoft.VisualBasic.Strings.LSet*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: LSet\n  nameWithType: Strings.LSet\n- uid: Microsoft.VisualBasic.Strings.LTrim*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: LTrim\n  nameWithType: Strings.LTrim\n- uid: Microsoft.VisualBasic.Strings.Mid*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Mid\n  nameWithType: Strings.Mid\n- uid: Microsoft.VisualBasic.Strings.Replace*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Replace\n  nameWithType: Strings.Replace\n- uid: Microsoft.VisualBasic.Strings.Right*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Right\n  nameWithType: Strings.Right\n- uid: Microsoft.VisualBasic.Strings.RSet*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: RSet\n  nameWithType: Strings.RSet\n- uid: Microsoft.VisualBasic.Strings.RTrim*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: RTrim\n  nameWithType: Strings.RTrim\n- uid: Microsoft.VisualBasic.Strings.Space*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Space\n  nameWithType: Strings.Space\n- uid: Microsoft.VisualBasic.Strings.Split*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Split\n  nameWithType: Strings.Split\n- uid: Microsoft.VisualBasic.Strings.StrComp*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrComp\n  nameWithType: Strings.StrComp\n- uid: Microsoft.VisualBasic.Strings.StrConv*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrConv\n  nameWithType: Strings.StrConv\n- uid: Microsoft.VisualBasic.Strings.StrDup*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrDup\n  nameWithType: Strings.StrDup\n- uid: Microsoft.VisualBasic.Strings.StrReverse*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: StrReverse\n  nameWithType: Strings.StrReverse\n- uid: Microsoft.VisualBasic.Strings.Trim*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: Trim\n  nameWithType: Strings.Trim\n- uid: Microsoft.VisualBasic.Strings.UCase*\n  parent: Microsoft.VisualBasic.Strings\n  isExternal: false\n  name: UCase\n  nameWithType: Strings.UCase\n"}