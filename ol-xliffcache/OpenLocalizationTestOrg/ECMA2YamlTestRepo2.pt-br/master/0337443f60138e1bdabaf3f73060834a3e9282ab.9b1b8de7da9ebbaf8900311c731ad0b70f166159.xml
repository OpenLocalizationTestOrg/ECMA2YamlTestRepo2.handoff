{"nodes":[{"pos":[960,1137],"content":"The exception that is thrown by the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> during an insert, update, or delete operation if the number of rows affected equals zero.","needQuote":true,"needEscape":true,"source":"The exception that is thrown by the <xref href=\"System.Data.Common.DataAdapter\"></xref> during an insert, update, or delete operation if the number of rows affected equals zero."},{"pos":[1149,1405],"content":"The <xref:System.Data.Common.DataAdapter> examines the number of rows affected by the execution of each insert, update, or delete operation, and throws this exception if the number equals zero. This exception is generally caused by a concurrency violation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Data.Common.DataAdapter> examines the number of rows affected by the execution of each insert, update, or delete operation, and throws this exception if the number equals zero. This exception is generally caused by a concurrency violation.","pos":[0,256],"nodes":[{"content":"The &lt;xref:System.Data.Common.DataAdapter&gt; examines the number of rows affected by the execution of each insert, update, or delete operation, and throws this exception if the number equals zero.","pos":[0,193],"source":"The <xref:System.Data.Common.DataAdapter> examines the number of rows affected by the execution of each insert, update, or delete operation, and throws this exception if the number equals zero."},{"content":"This exception is generally caused by a concurrency violation.","pos":[194,256]}]}]},{"pos":[2000,2096],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DBConcurrencyException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DBConcurrencyException\"></xref> class."},{"pos":[2108,2179],"content":"The default constructor initializes any fields to their default values.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default constructor initializes any fields to their default values.","pos":[0,71]}]},{"pos":[2780,2876],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DBConcurrencyException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DBConcurrencyException\"></xref> class."},{"pos":[3027,3083],"content":"The text string describing the details of the exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text string describing the details of the exception.","pos":[0,56]}]},{"pos":[3672,3768],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DBConcurrencyException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DBConcurrencyException\"></xref> class."},{"pos":[3780,4026],"content":"You can create a new exception that catches an earlier exception. The code that handles the second exception can use the additional information from the earlier exception, also called an inner exception, to examine the cause of the initial error.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can create a new exception that catches an earlier exception. The code that handles the second exception can use the additional information from the earlier exception, also called an inner exception, to examine the cause of the initial error.","pos":[0,246],"nodes":[{"content":"You can create a new exception that catches an earlier exception.","pos":[0,65]},{"content":"The code that handles the second exception can use the additional information from the earlier exception, also called an inner exception, to examine the cause of the initial error.","pos":[66,246]}]}]},{"pos":[4194,4250],"content":"The text string describing the details of the exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text string describing the details of the exception.","pos":[0,56]}]},{"pos":[4315,4349],"content":"A reference to an inner exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to an inner exception.","pos":[0,34]}]},{"pos":[5012,5108],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DBConcurrencyException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.DBConcurrencyException\"></xref> class."},{"pos":[5308,5370],"content":"The error message that explains the reason for this exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The error message that explains the reason for this exception.","pos":[0,62]}]},{"pos":[5435,5633],"content":"The exception that is the cause of the current exception, or a null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic) if no inner exception is specified.","needQuote":true,"needEscape":true,"source":"The exception that is the cause of the current exception, or a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) if no inner exception is specified."},{"pos":[5706,5825],"content":"An array containing the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects whose update failure generated this exception.","needQuote":true,"needEscape":true,"source":"An array containing the <xref href=\"System.Data.DataRow\"></xref> objects whose update failure generated this exception."},{"pos":[6342,6524],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects whose update failure generated this exception, to the specified array of <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Data.DataRow\"></xref> objects whose update failure generated this exception, to the specified array of <xref href=\"System.Data.DataRow\"></xref> objects."},{"pos":[6536,7144],"content":"When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in <xref:System.Data.DBConcurrencyException.Row%2A>, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When performing batch updates with the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property of the &lt;xref:System.Data.Common.DataAdapter&gt; set to <ph id=\"ph1\">`true`</ph>, this exception is thrown if all row updates fail.","pos":[0,220],"source":"When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail."},{"content":"In this case, this &lt;xref:System.Data.DBConcurrencyException&gt; contains &lt;xref:System.Data.DataRow&gt; objects for all rows whose update failed, rather than just the one &lt;xref:System.Data.DataRow&gt; object in &lt;xref:System.Data.DBConcurrencyException.Row%2A&gt;, and the affected &lt;xref:System.Data.DataRow&gt; objects can be retrieved by calling &lt;xref:System.Data.DBConcurrencyException.CopyToRows%2A&gt;.","pos":[221,608],"source":" In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in <xref:System.Data.DBConcurrencyException.Row%2A>, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>."}]},{"pos":[7307,7451],"content":"The one-dimensional array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to copy the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects into.","needQuote":true,"needEscape":true,"source":"The one-dimensional array of <xref href=\"System.Data.DataRow\"></xref> objects to copy the <xref href=\"System.Data.DataRow\"></xref> objects into."},{"pos":[8017,8250],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects whose update failure generated this exception, to the specified array of <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects, starting at the specified destination array index.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Data.DataRow\"></xref> objects whose update failure generated this exception, to the specified array of <xref href=\"System.Data.DataRow\"></xref> objects, starting at the specified destination array index."},{"pos":[8262,8870],"content":"When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in <xref:System.Data.DBConcurrencyException.Row%2A>, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When performing batch updates with the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property of the &lt;xref:System.Data.Common.DataAdapter&gt; set to <ph id=\"ph1\">`true`</ph>, this exception is thrown if all row updates fail.","pos":[0,220],"source":"When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail."},{"content":"In this case, this &lt;xref:System.Data.DBConcurrencyException&gt; contains &lt;xref:System.Data.DataRow&gt; objects for all rows whose update failed, rather than just the one &lt;xref:System.Data.DataRow&gt; object in &lt;xref:System.Data.DBConcurrencyException.Row%2A&gt;, and the affected &lt;xref:System.Data.DataRow&gt; objects can be retrieved by calling &lt;xref:System.Data.DBConcurrencyException.CopyToRows%2A&gt;.","pos":[221,608],"source":" In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in <xref:System.Data.DBConcurrencyException.Row%2A>, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>."}]},{"pos":[9049,9193],"content":"The one-dimensional array of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to copy the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects into.","needQuote":true,"needEscape":true,"source":"The one-dimensional array of <xref href=\"System.Data.DataRow\"></xref> objects to copy the <xref href=\"System.Data.DataRow\"></xref> objects into."},{"pos":[9259,9309],"content":"The destination array index to start copying into.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination array index to start copying into.","pos":[0,50]}]},{"pos":[10063,10214],"content":"Populates the aprcified serialization information object with the data needed to serialize the <bpt id=\"p1\">&lt;xref href=\"System.Data.DBConcurrencyException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Populates the aprcified serialization information object with the data needed to serialize the <xref href=\"System.Data.DBConcurrencyException\"></xref>."},{"pos":[10488,10665],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the serialized data associated with the <bpt id=\"p2\">&lt;xref href=\"System.Data.DBConcurrencyException\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized data associated with the <xref href=\"System.Data.DBConcurrencyException\"></xref>."},{"pos":[10761,10958],"content":"A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains the source and destination of the serialized stream associated with the <bpt id=\"p1\">&lt;xref href=\"System.Data.DBConcurrencyException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Runtime.Serialization.StreamingContext> that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DBConcurrencyException\"></xref>."},{"pos":[11137,11274],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a null reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"The <code>info</code> parameter is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[11608,11754],"content":"Gets or sets the value of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that generated the <bpt id=\"p2\">&lt;xref href=\"System.Data.DBConcurrencyException\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the value of the <xref href=\"System.Data.DataRow\"></xref> that generated the <xref href=\"System.Data.DBConcurrencyException\"></xref>."},{"pos":[11767,12794],"content":"Use Row to retrieve the value of the <xref:System.Data.DataRow> row that generated the <xref:System.Data.DBConcurrencyException>. Setting the value of the <xref:System.Data.DataRow> has no effect.       When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in Row, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.       Serialization support does not exist for <xref:System.Data.DataRow> objects. Therefore, if you serialize a <xref:System.Data.DBConcurrencyException> object, the value of the Row property in the serialized version of the object is set to a null value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use Row to retrieve the value of the &lt;xref:System.Data.DataRow&gt; row that generated the &lt;xref:System.Data.DBConcurrencyException&gt;.","pos":[0,129],"source":"Use Row to retrieve the value of the <xref:System.Data.DataRow> row that generated the <xref:System.Data.DBConcurrencyException>."},{"content":"Setting the value of the &lt;xref:System.Data.DataRow&gt; has no effect.","pos":[130,196],"source":" Setting the value of the <xref:System.Data.DataRow> has no effect."},{"content":"When performing batch updates with the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property of the &lt;xref:System.Data.Common.DataAdapter&gt; set to <ph id=\"ph1\">`true`</ph>, this exception is thrown if all row updates fail.","pos":[203,423],"source":"       When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail."},{"content":"In this case, this &lt;xref:System.Data.DBConcurrencyException&gt; contains &lt;xref:System.Data.DataRow&gt; objects for all rows whose update failed, rather than just the one &lt;xref:System.Data.DataRow&gt; object in Row, and the affected &lt;xref:System.Data.DataRow&gt; objects can be retrieved by calling &lt;xref:System.Data.DBConcurrencyException.CopyToRows%2A&gt;.","pos":[424,766],"source":" In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in Row, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>."},{"content":"Serialization support does not exist for &lt;xref:System.Data.DataRow&gt; objects.","pos":[773,849],"source":"       Serialization support does not exist for <xref:System.Data.DataRow> objects."},{"content":"Therefore, if you serialize a &lt;xref:System.Data.DBConcurrencyException&gt; object, the value of the Row property in the serialized version of the object is set to a null value.","pos":[850,1023],"source":" Therefore, if you serialize a <xref:System.Data.DBConcurrencyException> object, the value of the Row property in the serialized version of the object is set to a null value."}]},{"pos":[12927,12985],"content":"The value of the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value of the <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[13413,13484],"content":"Gets the number of rows whose update failed, generating this exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of rows whose update failed, generating this exception.","pos":[0,71]}]},{"pos":[13593,13665],"content":"An integer containing a count of the number of rows whose update failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer containing a count of the number of rows whose update failed.","pos":[0,72]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.DBConcurrencyException\n  id: DBConcurrencyException\n  children:\n  - System.Data.DBConcurrencyException.#ctor\n  - System.Data.DBConcurrencyException.#ctor(System.String)\n  - System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)\n  - System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])\n  - System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])\n  - System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)\n  - System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DBConcurrencyException.Row\n  - System.Data.DBConcurrencyException.RowCount\n  langs:\n  - csharp\n  name: DBConcurrencyException\n  nameWithType: DBConcurrencyException\n  fullName: System.Data.DBConcurrencyException\n  type: Class\n  summary: The exception that is thrown by the <xref href=\"System.Data.Common.DataAdapter\"></xref> during an insert, update, or delete operation if the number of rows affected equals zero.\n  remarks: The <xref:System.Data.Common.DataAdapter> examines the number of rows affected by the execution of each insert, update, or delete operation, and throws this exception if the number equals zero. This exception is generally caused by a concurrency violation.\n  syntax:\n    content: 'public sealed class DBConcurrencyException : SystemException'\n  inheritance:\n  - System.Exception\n  - System.SystemException\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.#ctor\n  id: '#ctor'\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: DBConcurrencyException()\n  nameWithType: DBConcurrencyException.DBConcurrencyException()\n  fullName: System.Data.DBConcurrencyException.DBConcurrencyException()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DBConcurrencyException\"></xref> class.\n  remarks: The default constructor initializes any fields to their default values.\n  syntax:\n    content: public DBConcurrencyException ();\n    parameters: []\n  overload: System.Data.DBConcurrencyException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: DBConcurrencyException(String)\n  nameWithType: DBConcurrencyException.DBConcurrencyException(String)\n  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DBConcurrencyException\"></xref> class.\n  syntax:\n    content: public DBConcurrencyException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The text string describing the details of the exception.\n  overload: System.Data.DBConcurrencyException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: DBConcurrencyException(String,Exception)\n  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception)\n  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DBConcurrencyException\"></xref> class.\n  remarks: You can create a new exception that catches an earlier exception. The code that handles the second exception can use the additional information from the earlier exception, also called an inner exception, to examine the cause of the initial error.\n  syntax:\n    content: public DBConcurrencyException (string message, Exception inner);\n    parameters:\n    - id: message\n      type: System.String\n      description: The text string describing the details of the exception.\n    - id: inner\n      type: System.Exception\n      description: A reference to an inner exception.\n  overload: System.Data.DBConcurrencyException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])\n  id: '#ctor(System.String,System.Exception,System.Data.DataRow[])'\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: DBConcurrencyException(String,Exception,DataRow[])\n  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])\n  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DBConcurrencyException\"></xref> class.\n  syntax:\n    content: public DBConcurrencyException (string message, Exception inner, System.Data.DataRow[] dataRows);\n    parameters:\n    - id: message\n      type: System.String\n      description: The error message that explains the reason for this exception.\n    - id: inner\n      type: System.Exception\n      description: The exception that is the cause of the current exception, or a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) if no inner exception is specified.\n    - id: dataRows\n      type: System.Data.DataRow[]\n      description: An array containing the <xref href=\"System.Data.DataRow\"></xref> objects whose update failure generated this exception.\n  overload: System.Data.DBConcurrencyException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])\n  id: CopyToRows(System.Data.DataRow[])\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: CopyToRows(DataRow[])\n  nameWithType: DBConcurrencyException.CopyToRows(DataRow[])\n  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Copies the <xref href=\"System.Data.DataRow\"></xref> objects whose update failure generated this exception, to the specified array of <xref href=\"System.Data.DataRow\"></xref> objects.\n  remarks: When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in <xref:System.Data.DBConcurrencyException.Row%2A>, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.\n  syntax:\n    content: public void CopyToRows (System.Data.DataRow[] array);\n    parameters:\n    - id: array\n      type: System.Data.DataRow[]\n      description: The one-dimensional array of <xref href=\"System.Data.DataRow\"></xref> objects to copy the <xref href=\"System.Data.DataRow\"></xref> objects into.\n  overload: System.Data.DBConcurrencyException.CopyToRows*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)\n  id: CopyToRows(System.Data.DataRow[],System.Int32)\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: CopyToRows(DataRow[],Int32)\n  nameWithType: DBConcurrencyException.CopyToRows(DataRow[],Int32)\n  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[],Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Copies the <xref href=\"System.Data.DataRow\"></xref> objects whose update failure generated this exception, to the specified array of <xref href=\"System.Data.DataRow\"></xref> objects, starting at the specified destination array index.\n  remarks: When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in <xref:System.Data.DBConcurrencyException.Row%2A>, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.\n  syntax:\n    content: public void CopyToRows (System.Data.DataRow[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Data.DataRow[]\n      description: The one-dimensional array of <xref href=\"System.Data.DataRow\"></xref> objects to copy the <xref href=\"System.Data.DataRow\"></xref> objects into.\n    - id: arrayIndex\n      type: System.Int32\n      description: The destination array index to start copying into.\n  overload: System.Data.DBConcurrencyException.CopyToRows*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Data.DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Populates the aprcified serialization information object with the data needed to serialize the <xref href=\"System.Data.DBConcurrencyException\"></xref>.\n  syntax:\n    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: si\n      type: System.Runtime.Serialization.SerializationInfo\n      description: A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized data associated with the <xref href=\"System.Data.DBConcurrencyException\"></xref>.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: A <xref:System.Runtime.Serialization.StreamingContext> that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DBConcurrencyException\"></xref>.\n  overload: System.Data.DBConcurrencyException.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>info</code> parameter is a null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.Row\n  id: Row\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: Row\n  nameWithType: DBConcurrencyException.Row\n  fullName: System.Data.DBConcurrencyException.Row\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets or sets the value of the <xref href=\"System.Data.DataRow\"></xref> that generated the <xref href=\"System.Data.DBConcurrencyException\"></xref>.\n  remarks: \"Use Row to retrieve the value of the <xref:System.Data.DataRow> row that generated the <xref:System.Data.DBConcurrencyException>. Setting the value of the <xref:System.Data.DataRow> has no effect.  \\n  \\n When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in Row, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.  \\n  \\n Serialization support does not exist for <xref:System.Data.DataRow> objects. Therefore, if you serialize a <xref:System.Data.DBConcurrencyException> object, the value of the Row property in the serialized version of the object is set to a null value.\"\n  syntax:\n    content: public System.Data.DataRow Row { get; set; }\n    return:\n      type: System.Data.DataRow\n      description: The value of the <xref href=\"System.Data.DataRow\"></xref>.\n  overload: System.Data.DBConcurrencyException.Row*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.DBConcurrencyException.RowCount\n  id: RowCount\n  parent: System.Data.DBConcurrencyException\n  langs:\n  - csharp\n  name: RowCount\n  nameWithType: DBConcurrencyException.RowCount\n  fullName: System.Data.DBConcurrencyException.RowCount\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the number of rows whose update failed, generating this exception.\n  syntax:\n    content: public int RowCount { get; }\n    return:\n      type: System.Int32\n      description: An integer containing a count of the number of rows whose update failed.\n  overload: System.Data.DBConcurrencyException.RowCount*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.SystemException\n  isExternal: false\n  name: System.SystemException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Data.DBConcurrencyException.#ctor\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: DBConcurrencyException()\n  nameWithType: DBConcurrencyException.DBConcurrencyException()\n  fullName: System.Data.DBConcurrencyException.DBConcurrencyException()\n- uid: System.Data.DBConcurrencyException.#ctor(System.String)\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: DBConcurrencyException(String)\n  nameWithType: DBConcurrencyException.DBConcurrencyException(String)\n  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: DBConcurrencyException(String,Exception)\n  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception)\n  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: DBConcurrencyException(String,Exception,DataRow[])\n  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])\n  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])\n- uid: System.Data.DataRow[]\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow[]\n  spec.csharp:\n  - uid: System.Data.DataRow\n    name: DataRow\n    nameWithType: DataRow\n    fullName: DataRow[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: CopyToRows(DataRow[])\n  nameWithType: DBConcurrencyException.CopyToRows(DataRow[])\n  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[])\n- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: CopyToRows(DataRow[],Int32)\n  nameWithType: DBConcurrencyException.CopyToRows(DataRow[],Int32)\n  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Data.DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Data.DBConcurrencyException.Row\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: Row\n  nameWithType: DBConcurrencyException.Row\n  fullName: System.Data.DBConcurrencyException.Row\n- uid: System.Data.DataRow\n  parent: System.Data\n  isExternal: false\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Data.DBConcurrencyException.RowCount\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: RowCount\n  nameWithType: DBConcurrencyException.RowCount\n  fullName: System.Data.DBConcurrencyException.RowCount\n- uid: System.Data.DBConcurrencyException.#ctor*\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: DBConcurrencyException\n  nameWithType: DBConcurrencyException.DBConcurrencyException\n- uid: System.Data.DBConcurrencyException.CopyToRows*\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: CopyToRows\n  nameWithType: DBConcurrencyException.CopyToRows\n- uid: System.Data.DBConcurrencyException.GetObjectData*\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: GetObjectData\n  nameWithType: DBConcurrencyException.GetObjectData\n- uid: System.Data.DBConcurrencyException.Row*\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: Row\n  nameWithType: DBConcurrencyException.Row\n- uid: System.Data.DBConcurrencyException.RowCount*\n  parent: System.Data.DBConcurrencyException\n  isExternal: false\n  name: RowCount\n  nameWithType: DBConcurrencyException.RowCount\n"}