{"nodes":[{"pos":[731,917],"content":"Represents a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_for\" name=\"for\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.","needQuote":true,"needEscape":true,"source":"Represents a <xref uid=\"langword_csharp_for\" name=\"for\" href=\"\"></xref> statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop."},{"pos":[930,1654],"content":"A CodeIterationStatement can represent a `for` loop or `while` loop.       The <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> property specifies the statement to execute before the first loop iteration. The <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> property specifies the loop continuation expression, which must evaluate to `true` at the end of each loop iteration for another iteration to begin. The <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> property specifies the statement to execute at the end of each loop iteration. The <xref:System.CodeDom.CodeIterationStatement.Statements%2A> property specifies the collection of statements to execute within the loop.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A CodeIterationStatement can represent a <ph id=\"ph1\">`for`</ph> loop or <ph id=\"ph2\">`while`</ph> loop.","pos":[0,68],"source":"A CodeIterationStatement can represent a `for` loop or `while` loop."},{"content":"The &lt;xref:System.CodeDom.CodeIterationStatement.InitStatement%2A&gt; property specifies the statement to execute before the first loop iteration.","pos":[75,217],"source":"       The <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> property specifies the statement to execute before the first loop iteration."},{"content":"The &lt;xref:System.CodeDom.CodeIterationStatement.TestExpression%2A&gt; property specifies the loop continuation expression, which must evaluate to <ph id=\"ph1\">`true`</ph> at the end of each loop iteration for another iteration to begin.","pos":[218,433],"source":" The <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> property specifies the loop continuation expression, which must evaluate to `true` at the end of each loop iteration for another iteration to begin."},{"content":"The &lt;xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A&gt; property specifies the statement to execute at the end of each loop iteration.","pos":[434,583],"source":" The <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> property specifies the statement to execute at the end of each loop iteration."},{"content":"The &lt;xref:System.CodeDom.CodeIterationStatement.Statements%2A&gt; property specifies the collection of statements to execute within the loop.","pos":[584,722],"source":" The <xref:System.CodeDom.CodeIterationStatement.Statements%2A> property specifies the collection of statements to execute within the loop."}]},{"pos":[3072,3171],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeIterationStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeIterationStatement\"></xref> class."},{"pos":[4148,4278],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeIterationStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified parameters.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeIterationStatement\"></xref> class using the specified parameters."},{"pos":[4616,4713],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the loop initialization statement.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeStatement\"></xref> containing the loop initialization statement."},{"pos":[4800,4906],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the expression to test for exit condition.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeExpression\"></xref> containing the expression to test for exit condition."},{"pos":[4996,5093],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the per-cycle increment statement.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeStatement\"></xref> containing the per-cycle increment statement."},{"pos":[5177,5286],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the statements within the loop.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.CodeDom.CodeStatement\"></xref> containing the statements within the loop."},{"pos":[5776,5840],"content":"Gets or sets the statement that is called after each loop cycle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the statement that is called after each loop cycle.","pos":[0,64]}]},{"pos":[5852,5898],"content":"This statement is called after each iteration.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This statement is called after each iteration.","pos":[0,46]}]},{"pos":[6063,6164],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the per cycle increment statement.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeStatement\"></xref> that indicates the per cycle increment statement."},{"pos":[6642,6689],"content":"Gets or sets the loop initialization statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the loop initialization statement.","pos":[0,47]}]},{"pos":[6701,6917],"content":"You can specify an empty initialization statement by setting this property to a <xref:System.CodeDom.CodeExpressionStatement> that contains a <xref:System.CodeDom.CodeSnippetExpression> that contains an empty string.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can specify an empty initialization statement by setting this property to a &lt;xref:System.CodeDom.CodeExpressionStatement&gt; that contains a &lt;xref:System.CodeDom.CodeSnippetExpression&gt; that contains an empty string.","pos":[0,216],"source":"You can specify an empty initialization statement by setting this property to a <xref:System.CodeDom.CodeExpressionStatement> that contains a <xref:System.CodeDom.CodeSnippetExpression> that contains an empty string."}]},{"pos":[7077,7178],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the loop initialization statement.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeStatement\"></xref> that indicates the loop initialization statement."},{"pos":[7636,7701],"content":"Gets the collection of statements to be executed within the loop.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of statements to be executed within the loop.","pos":[0,65]}]},{"pos":[7873,7986],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the statements within the loop.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.CodeDom.CodeStatement\"></xref> that indicates the statements within the loop."},{"pos":[8461,8538],"content":"Gets or sets the expression to test as the condition that continues the loop.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the expression to test as the condition that continues the loop.","pos":[0,77]}]},{"pos":[8550,8612],"content":"If this expression resolves to <ph id=\"ph1\">`true`</ph>, the loop will continue.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If this expression resolves to `true`, the loop will continue."},{"pos":[8775,8866],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the expression to test.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the expression to test."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.CodeIterationStatement\n  id: CodeIterationStatement\n  children:\n  - System.CodeDom.CodeIterationStatement.#ctor\n  - System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])\n  - System.CodeDom.CodeIterationStatement.IncrementStatement\n  - System.CodeDom.CodeIterationStatement.InitStatement\n  - System.CodeDom.CodeIterationStatement.Statements\n  - System.CodeDom.CodeIterationStatement.TestExpression\n  langs:\n  - csharp\n  name: CodeIterationStatement\n  nameWithType: CodeIterationStatement\n  fullName: System.CodeDom.CodeIterationStatement\n  type: Class\n  summary: Represents a <xref uid=\"langword_csharp_for\" name=\"for\" href=\"\"></xref> statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.\n  remarks: \"A CodeIterationStatement can represent a `for` loop or `while` loop.  \\n  \\n The <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> property specifies the statement to execute before the first loop iteration. The <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> property specifies the loop continuation expression, which must evaluate to `true` at the end of each loop iteration for another iteration to begin. The <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> property specifies the statement to execute at the end of each loop iteration. The <xref:System.CodeDom.CodeIterationStatement.Statements%2A> property specifies the collection of statements to execute within the loop.\"\n  example:\n  - \"This example demonstrates using a CodeIterationStatement to represent a `for` loop.  \\n  \\n [!code-cs[CodeIterationStatementExample#2](~/add/codesnippet/csharp/t-system.codedom.codeite_1.cs)]\\n [!code-vb[CodeIterationStatementExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codeite_1.vb)]\\n [!code-cpp[CodeIterationStatementExample#2](~/add/codesnippet/cpp/t-system.codedom.codeite_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CodeIterationStatement : System.CodeDom.CodeStatement\n  inheritance:\n  - System.Object\n  - System.CodeDom.CodeObject\n  - System.CodeDom.CodeStatement\n  implements: []\n  inheritedMembers:\n  - System.CodeDom.CodeObject.UserData\n  - System.CodeDom.CodeStatement.EndDirectives\n  - System.CodeDom.CodeStatement.LinePragma\n  - System.CodeDom.CodeStatement.StartDirectives\n  platform:\n  - net462\n- uid: System.CodeDom.CodeIterationStatement.#ctor\n  id: '#ctor'\n  parent: System.CodeDom.CodeIterationStatement\n  langs:\n  - csharp\n  name: CodeIterationStatement()\n  nameWithType: CodeIterationStatement.CodeIterationStatement()\n  fullName: System.CodeDom.CodeIterationStatement.CodeIterationStatement()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeIterationStatement\"></xref> class.\n  syntax:\n    content: public CodeIterationStatement ();\n    parameters: []\n  overload: System.CodeDom.CodeIterationStatement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])\n  id: '#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])'\n  parent: System.CodeDom.CodeIterationStatement\n  langs:\n  - csharp\n  name: CodeIterationStatement(CodeStatement,CodeExpression,CodeStatement,CodeStatement[])\n  nameWithType: CodeIterationStatement.CodeIterationStatement(CodeStatement,CodeExpression,CodeStatement,CodeStatement[])\n  fullName: System.CodeDom.CodeIterationStatement.CodeIterationStatement(CodeStatement,CodeExpression,CodeStatement,CodeStatement[])\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeIterationStatement\"></xref> class using the specified parameters.\n  syntax:\n    content: public CodeIterationStatement (System.CodeDom.CodeStatement initStatement, System.CodeDom.CodeExpression testExpression, System.CodeDom.CodeStatement incrementStatement, System.CodeDom.CodeStatement[] statements);\n    parameters:\n    - id: initStatement\n      type: System.CodeDom.CodeStatement\n      description: A <xref href=\"System.CodeDom.CodeStatement\"></xref> containing the loop initialization statement.\n    - id: testExpression\n      type: System.CodeDom.CodeExpression\n      description: A <xref href=\"System.CodeDom.CodeExpression\"></xref> containing the expression to test for exit condition.\n    - id: incrementStatement\n      type: System.CodeDom.CodeStatement\n      description: A <xref href=\"System.CodeDom.CodeStatement\"></xref> containing the per-cycle increment statement.\n    - id: statements\n      type: System.CodeDom.CodeStatement[]\n      description: An array of type <xref href=\"System.CodeDom.CodeStatement\"></xref> containing the statements within the loop.\n  overload: System.CodeDom.CodeIterationStatement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeIterationStatement.IncrementStatement\n  id: IncrementStatement\n  parent: System.CodeDom.CodeIterationStatement\n  langs:\n  - csharp\n  name: IncrementStatement\n  nameWithType: CodeIterationStatement.IncrementStatement\n  fullName: System.CodeDom.CodeIterationStatement.IncrementStatement\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the statement that is called after each loop cycle.\n  remarks: This statement is called after each iteration.\n  syntax:\n    content: public System.CodeDom.CodeStatement IncrementStatement { get; set; }\n    return:\n      type: System.CodeDom.CodeStatement\n      description: A <xref href=\"System.CodeDom.CodeStatement\"></xref> that indicates the per cycle increment statement.\n  overload: System.CodeDom.CodeIterationStatement.IncrementStatement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeIterationStatement.InitStatement\n  id: InitStatement\n  parent: System.CodeDom.CodeIterationStatement\n  langs:\n  - csharp\n  name: InitStatement\n  nameWithType: CodeIterationStatement.InitStatement\n  fullName: System.CodeDom.CodeIterationStatement.InitStatement\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the loop initialization statement.\n  remarks: You can specify an empty initialization statement by setting this property to a <xref:System.CodeDom.CodeExpressionStatement> that contains a <xref:System.CodeDom.CodeSnippetExpression> that contains an empty string.\n  syntax:\n    content: public System.CodeDom.CodeStatement InitStatement { get; set; }\n    return:\n      type: System.CodeDom.CodeStatement\n      description: A <xref href=\"System.CodeDom.CodeStatement\"></xref> that indicates the loop initialization statement.\n  overload: System.CodeDom.CodeIterationStatement.InitStatement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeIterationStatement.Statements\n  id: Statements\n  parent: System.CodeDom.CodeIterationStatement\n  langs:\n  - csharp\n  name: Statements\n  nameWithType: CodeIterationStatement.Statements\n  fullName: System.CodeDom.CodeIterationStatement.Statements\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets the collection of statements to be executed within the loop.\n  syntax:\n    content: public System.CodeDom.CodeStatementCollection Statements { get; }\n    return:\n      type: System.CodeDom.CodeStatementCollection\n      description: An array of type <xref href=\"System.CodeDom.CodeStatement\"></xref> that indicates the statements within the loop.\n  overload: System.CodeDom.CodeIterationStatement.Statements*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeIterationStatement.TestExpression\n  id: TestExpression\n  parent: System.CodeDom.CodeIterationStatement\n  langs:\n  - csharp\n  name: TestExpression\n  nameWithType: CodeIterationStatement.TestExpression\n  fullName: System.CodeDom.CodeIterationStatement.TestExpression\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the expression to test as the condition that continues the loop.\n  remarks: If this expression resolves to `true`, the loop will continue.\n  syntax:\n    content: public System.CodeDom.CodeExpression TestExpression { get; set; }\n    return:\n      type: System.CodeDom.CodeExpression\n      description: A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the expression to test.\n  overload: System.CodeDom.CodeIterationStatement.TestExpression*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.CodeDom.CodeStatement\n  isExternal: false\n  name: System.CodeDom.CodeStatement\n- uid: System.CodeDom.CodeIterationStatement.#ctor\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: CodeIterationStatement()\n  nameWithType: CodeIterationStatement.CodeIterationStatement()\n  fullName: System.CodeDom.CodeIterationStatement.CodeIterationStatement()\n- uid: System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: CodeIterationStatement(CodeStatement,CodeExpression,CodeStatement,CodeStatement[])\n  nameWithType: CodeIterationStatement.CodeIterationStatement(CodeStatement,CodeExpression,CodeStatement,CodeStatement[])\n  fullName: System.CodeDom.CodeIterationStatement.CodeIterationStatement(CodeStatement,CodeExpression,CodeStatement,CodeStatement[])\n- uid: System.CodeDom.CodeExpression\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeExpression\n  nameWithType: CodeExpression\n  fullName: System.CodeDom.CodeExpression\n- uid: System.CodeDom.CodeStatement[]\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeStatement\n  nameWithType: CodeStatement\n  fullName: System.CodeDom.CodeStatement[]\n  spec.csharp:\n  - uid: System.CodeDom.CodeStatement\n    name: CodeStatement\n    nameWithType: CodeStatement\n    fullName: CodeStatement[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.CodeDom.CodeIterationStatement.IncrementStatement\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: IncrementStatement\n  nameWithType: CodeIterationStatement.IncrementStatement\n  fullName: System.CodeDom.CodeIterationStatement.IncrementStatement\n- uid: System.CodeDom.CodeIterationStatement.InitStatement\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: InitStatement\n  nameWithType: CodeIterationStatement.InitStatement\n  fullName: System.CodeDom.CodeIterationStatement.InitStatement\n- uid: System.CodeDom.CodeIterationStatement.Statements\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: Statements\n  nameWithType: CodeIterationStatement.Statements\n  fullName: System.CodeDom.CodeIterationStatement.Statements\n- uid: System.CodeDom.CodeStatementCollection\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeStatementCollection\n  nameWithType: CodeStatementCollection\n  fullName: System.CodeDom.CodeStatementCollection\n- uid: System.CodeDom.CodeIterationStatement.TestExpression\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: TestExpression\n  nameWithType: CodeIterationStatement.TestExpression\n  fullName: System.CodeDom.CodeIterationStatement.TestExpression\n- uid: System.CodeDom.CodeIterationStatement.#ctor*\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: CodeIterationStatement\n  nameWithType: CodeIterationStatement.CodeIterationStatement\n- uid: System.CodeDom.CodeIterationStatement.IncrementStatement*\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: IncrementStatement\n  nameWithType: CodeIterationStatement.IncrementStatement\n- uid: System.CodeDom.CodeIterationStatement.InitStatement*\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: InitStatement\n  nameWithType: CodeIterationStatement.InitStatement\n- uid: System.CodeDom.CodeIterationStatement.Statements*\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: Statements\n  nameWithType: CodeIterationStatement.Statements\n- uid: System.CodeDom.CodeIterationStatement.TestExpression*\n  parent: System.CodeDom.CodeIterationStatement\n  isExternal: false\n  name: TestExpression\n  nameWithType: CodeIterationStatement.TestExpression\n"}