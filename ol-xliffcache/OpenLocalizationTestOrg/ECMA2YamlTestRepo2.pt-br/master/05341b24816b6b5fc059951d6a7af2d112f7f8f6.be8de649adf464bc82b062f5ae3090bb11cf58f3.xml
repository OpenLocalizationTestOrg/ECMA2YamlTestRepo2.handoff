{"nodes":[{"pos":[2682,2853],"content":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.","pos":[0,171],"nodes":[{"content":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","pos":[0,115]},{"content":"This class is used to perform cryptographic operations.","pos":[116,171]}]}]},{"pos":[2866,5898],"content":"The ECDiffieHellmanCng class enables two parties to exchange private key material even if they are communicating through a public channel.  Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes. The secret agreement can then be used for a variety of purposes, including as a symmetric key. However, instead of exposing the secret agreement directly, the ECDiffieHellmanCng class does some post-processing on the agreement before providing the value. This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.      |Key derivation function|Properties|   |-----------------------------|----------------|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.|       The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application. The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:      1.  Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation      2.  Alice and Bob configure the KDF using parameters the agree on.      3.  Alice sends Bob her public key.      4.  Bob sends Alice his public key.      5.  Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ECDiffieHellmanCng class enables two parties to exchange private key material even if they are communicating through a public channel.  Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes. The secret agreement can then be used for a variety of purposes, including as a symmetric key. However, instead of exposing the secret agreement directly, the ECDiffieHellmanCng class does some post-processing on the agreement before providing the value. This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.      |Key derivation function|Properties|   |-----------------------------|----------------|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.","pos":[0,1052],"nodes":[{"content":"The ECDiffieHellmanCng class enables two parties to exchange private key material even if they are communicating through a public channel.","pos":[0,138]},{"content":"Both parties can calculate the same secret value, which is referred to as the <bpt id=\"p1\">*</bpt>secret agreement<ept id=\"p1\">*</ept> in the managed Diffie-Hellman classes.","pos":[140,275],"source":"  Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes."},{"content":"The secret agreement can then be used for a variety of purposes, including as a symmetric key.","pos":[276,370]},{"content":"However, instead of exposing the secret agreement directly, the ECDiffieHellmanCng class does some post-processing on the agreement before providing the value.","pos":[371,530]},{"content":"This post processing is referred to as the <bpt id=\"p1\">*</bpt>key derivation function (KDF)<ept id=\"p1\">*</ept>; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.","pos":[531,744],"source":" This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object."},{"content":"|Key derivation function|Properties|   |-----------------------------|----------------|   |&lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt;|&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A&gt; - The hash algorithm that is used to process the secret agreement.","pos":[750,1052],"source":"      |Key derivation function|Properties|   |-----------------------------|----------------|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement."}]},{"content":"&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A&gt; - An optional byte array to prepend to the secret agreement before hashing it.","pos":[1065,1215],"source":" <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it."},{"content":"&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A&gt; - An optional byte array to append to the secret agreement before hashing it.|   |&lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt;|&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A&gt; - The hash algorithm that is used to process the secret agreement.","pos":[1228,1592],"source":" <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement."},{"content":"&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A&gt;- An optional byte array to prepend to the secret agreement before hashing it.","pos":[1605,1754],"source":" <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it."},{"content":"&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A&gt; - An optional byte array to append to the secret agreement before hashing it.|   |&lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt;|&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A&gt; - The label for key derivation.","pos":[1767,2088],"source":" <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation."},{"content":" <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.|       The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application. The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:      1.  Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation      2.  Alice and Bob configure the KDF using parameters the agree on.      3.  Alice sends Bob her public key.      4.  Bob sends Alice his public key.      5.  Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.","pos":[2100,3014],"nodes":[{"content":"&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A&gt; - The seed for key derivation.|       The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application.","pos":[1,251],"source":" <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.|       The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application."},{"content":"The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:      1.","pos":[252,520]},{"content":"Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation      2.","pos":[522,614]},{"content":"Alice and Bob configure the KDF using parameters the agree on.","pos":[616,678]},{"content":"3.","pos":[684,686]},{"content":"Alice sends Bob her public key.","pos":[688,719]},{"content":"4.","pos":[725,727]},{"content":"Bob sends Alice his public key.","pos":[729,760]},{"content":"5.","pos":[766,768]},{"content":"Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.","pos":[770,914]}]}]},{"pos":[8058,8190],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a random key pair.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> class with a random key pair."},{"pos":[8202,8266],"content":"The random key pair has a default public key length of 521 bits.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The random key pair has a default public key length of 521 bits.","pos":[0,64]}]},{"pos":[8911,9073],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a random key pair, using the specified key size.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> class with a random key pair, using the specified key size."},{"pos":[9085,9172],"content":"The random key pair will have the public key length defined by the <ph id=\"ph1\">`keySize`</ph> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The random key pair will have the public key length defined by the `keySize` parameter."},{"pos":[9315,9379],"content":"The size of the key. Valid key sizes are 256, 384, and 521 bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the key. Valid key sizes are 256, 384, and 521 bits.","pos":[0,64],"nodes":[{"content":"The size of the key.","pos":[0,20]},{"content":"Valid key sizes are 256, 384, and 521 bits.","pos":[21,64]}]}]},{"pos":[9555,9604],"content":"<ph id=\"ph1\">&lt;code&gt;keySize&lt;/code&gt;</ph> specifies an invalid length.","needQuote":true,"needEscape":true,"source":"<code>keySize</code> specifies an invalid length."},{"pos":[9723,9799],"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","pos":[0,76]}]},{"pos":[10337,10533],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> class by using the specified <xref href=\"System.Security.Cryptography.CngKey\"></xref> object."},{"pos":[10723,10822],"content":"The key that will be used as input to the cryptographic operations performed by the current object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key that will be used as input to the cryptographic operations performed by the current object.","pos":[0,99]}]},{"pos":[11006,11087],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11182,11272],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.","needQuote":true,"needEscape":true,"source":"<code>key</code> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group."},{"pos":[11391,11467],"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","pos":[0,76]}]},{"pos":[12355,12511],"content":"Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.","pos":[0,156]}]},{"pos":[12523,12617],"content":"If the value of <ph id=\"ph1\">`secretPrepend`</ph> or <ph id=\"ph2\">`secretAppend`</ph> is <ph id=\"ph3\">`null`</ph>, they are treated as empty arrays.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays."},{"pos":[12995,13024],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[13127,13181],"content":"The hash algorithm  to use to derive the key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm  to use to derive the key material.","pos":[0,54]}]},{"pos":[13251,13307],"content":"A value to prepend to the derived secret before hashing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value to prepend to the derived secret before hashing.","pos":[0,56]}]},{"pos":[13376,13431],"content":"A value to append to the derived secret before hashing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value to append to the derived secret before hashing.","pos":[0,55]}]},{"pos":[13489,13562],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[13758,13855],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13951,14274],"content":"<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.       -or-       <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is not an ECDH key, or it is not the correct size.","pos":[0,83],"source":"<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[90,187],"source":"       -or-       <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[188,313],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[14424,14441],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[15378,15472],"content":"Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","needQuote":true,"needEscape":true,"nodes":[{"content":"Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","pos":[0,94]}]},{"pos":[15484,15710],"content":"If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays. If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of <ph id=\"ph1\">`secretPrepend`</ph> or <ph id=\"ph2\">`secretAppend`</ph> is <ph id=\"ph3\">`null`</ph>, they are treated as empty arrays.","pos":[0,94],"source":"If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays."},{"content":"If the value of <ph id=\"ph1\">`hmacKey`</ph> is <ph id=\"ph2\">`null`</ph>, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.","pos":[95,226],"source":" If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key."}]},{"pos":[16104,16133],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[16236,16289],"content":"The hash algorithm to use to derive the key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to derive the key material.","pos":[0,53]}]},{"pos":[16353,16374],"content":"The key for the HMAC.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key for the HMAC.","pos":[0,21]}]},{"pos":[16444,16500],"content":"A value to prepend to the derived secret before hashing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value to prepend to the derived secret before hashing.","pos":[0,56]}]},{"pos":[16569,16624],"content":"A value to append to the derived secret before hashing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value to append to the derived secret before hashing.","pos":[0,55]}]},{"pos":[16682,16755],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[16951,17048],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17144,17467],"content":"<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.       -or-       <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is not an ECDH key, or it is not the correct size.","pos":[0,83],"source":"<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[90,187],"source":"       -or-       <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[188,313],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[17617,17634],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[18186,18392],"content":"Derives the key material that is generated from the secret agreement between two parties, given a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the second party's public key.","needQuote":true,"needEscape":true,"source":"Derives the key material that is generated from the secret agreement between two parties, given a <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that contains the second party's public key."},{"pos":[18620,18749],"content":"An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.","pos":[0,129]}]},{"pos":[18807,18994],"content":"A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.","pos":[0,187],"nodes":[{"content":"A byte array that contains the key material.","pos":[0,44]},{"content":"This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.","pos":[45,187]}]}]},{"pos":[19190,19287],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19382,19655],"content":"<code>otherPartyPublicKey</code> is invalid. Either its <xref:System.Security.Cryptography.CngKey.AlgorithmGroup*> property does not specify <xref:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman*> or its key size does not match the key size of this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is invalid.","pos":[0,44],"source":"<code>otherPartyPublicKey</code> is invalid."},{"content":"Either its <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CngKey.AlgorithmGroup*&gt;</ph> property does not specify <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman*&gt;</ph> or its key size does not match the key size of this instance.","pos":[45,273],"source":" Either its <xref:System.Security.Cryptography.CngKey.AlgorithmGroup*> property does not specify <xref:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman*> or its key size does not match the key size of this instance."}]},{"pos":[19766,20194],"content":"This object's &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction<bpt id=\"p1\">*</bpt>&gt; property specifies the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> key derivation function, but either &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.Label<ept id=\"p1\">*</ept>&gt; or &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed*&gt; is <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This object's <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*> property specifies the <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref> key derivation function, but either <xref:System.Security.Cryptography.ECDiffieHellmanCng.Label*> or <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[20343,20360],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[21002,21227],"content":"Derives the key material that is generated from the secret agreement between two parties, given an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the second party's public key.","needQuote":true,"needEscape":true,"source":"Derives the key material that is generated from the secret agreement between two parties, given an <xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"></xref> object that contains the second party's public key."},{"pos":[21500,21556],"content":"The public key from the other party in the key exchange.","needQuote":true,"needEscape":true,"nodes":[{"content":"The public key from the other party in the key exchange.","pos":[0,56]}]},{"pos":[21614,21801],"content":"A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.","pos":[0,187],"nodes":[{"content":"A byte array that contains the key material.","pos":[0,44]},{"content":"This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.","pos":[45,187]}]}]},{"pos":[21997,22094],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22189,22314],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is not an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanCngPublicKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> key.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is not an <xref href=\"System.Security.Cryptography.ECDiffieHellmanCngPublicKey\"></xref> key."},{"pos":[23029,23158],"content":"Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.","pos":[0,129]}]},{"pos":[23459,23488],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[23553,23581],"content":"The ASCII-encoded PRF label.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ASCII-encoded PRF label.","pos":[0,28]}]},{"pos":[23645,23666],"content":"The 64-byte PRF seed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 64-byte PRF seed.","pos":[0,21]}]},{"pos":[23724,23797],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[23989,24319],"content":"<code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>prfLabel</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>prfSeed</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,97],"source":"<code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;prfLabel&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[104,201],"source":"       -or-       <code>prfLabel</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;prfSeed&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[208,304],"source":"       -or-       <code>prfSeed</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[24415,24498],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is not an ECDH key, or it is not the correct size.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size."},{"pos":[24648,24756],"content":"<code>prfSeed</code> is not exactly 64 bytes in length.       -or-       All other cryptographic errors.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;prfSeed&lt;/code&gt;</ph> is not exactly 64 bytes in length.","pos":[0,55],"source":"<code>prfSeed</code> is not exactly 64 bytes in length."},{"content":"-or-       All other cryptographic errors.","pos":[62,104]}]},{"pos":[25359,25544],"content":"Gets a handle to the secret agreement generated between two parties, given a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the second party's public key.","needQuote":true,"needEscape":true,"source":"Gets a handle to the secret agreement generated between two parties, given a <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that contains the second party's public key."},{"pos":[25826,25955],"content":"An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.","pos":[0,129]}]},{"pos":[26050,26182],"content":"A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.","pos":[0,132],"nodes":[{"content":"A handle to the secret agreement.","pos":[0,33]},{"content":"This information is calculated from the current object's private key and the specified public key.","pos":[34,132]}]}]},{"pos":[26388,26485],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[26580,26663],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is not an ECDH key, or it is not the correct size.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size."},{"pos":[26812,26829],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[27521,27725],"content":"Gets a handle to the secret agreement generated between two parties, given an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the second party's public key.","needQuote":true,"needEscape":true,"source":"Gets a handle to the secret agreement generated between two parties, given an <xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"></xref> object that contains the second party's public key."},{"pos":[28043,28099],"content":"The public key from the other party in the key exchange.","needQuote":true,"needEscape":true,"nodes":[{"content":"The public key from the other party in the key exchange.","pos":[0,56]}]},{"pos":[28194,28326],"content":"A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.","pos":[0,132],"nodes":[{"content":"A handle to the secret agreement.","pos":[0,33]},{"content":"This information is calculated from the current object's private key and the specified public key.","pos":[34,132]}]}]},{"pos":[28532,28629],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[28724,28846],"content":"<ph id=\"ph1\">&lt;code&gt;otherPartyPublicKey&lt;/code&gt;</ph> is not an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> key.","needQuote":true,"needEscape":true,"source":"<code>otherPartyPublicKey</code> is not an <xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"></xref> key."},{"pos":[29453,29465],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[30039,30070],"content":"This method is not implemented.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not implemented.","pos":[0,31]}]},{"pos":[30082,30268],"content":"To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To deserialize an XML key, use the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29&gt; overload instead.","pos":[0,186],"source":"To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead."}]},{"pos":[30428,30477],"content":"The XML-based key information to be deserialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML-based key information to be deserialized.","pos":[0,49]}]},{"pos":[30673,30722],"content":"This method was not overridden for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method was not overridden for this instance.","pos":[0,49]}]},{"pos":[31343,31425],"content":"Deserializes the key information from an XML string by using the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Deserializes the key information from an XML string by using the specified format.","pos":[0,82]}]},{"pos":[31616,31665],"content":"The XML-based key information to be deserialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML-based key information to be deserialized.","pos":[0,49]}]},{"pos":[31758,31936],"content":"One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the format of the XML string.","pos":[0,74]},{"content":"The only currently accepted format is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[75,178],"source":" The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>."}]},{"pos":[32128,32209],"content":"<ph id=\"ph1\">&lt;code&gt;xml&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>xml</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32304,32334],"content":"<ph id=\"ph1\">&lt;code&gt;xml&lt;/code&gt;</ph> is malformed.","needQuote":true,"needEscape":true,"source":"<code>xml</code> is malformed."},{"pos":[32449,32590],"content":"<code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> specifies an invalid format.","pos":[0,48],"source":"<code>format</code> specifies an invalid format."},{"content":"The only accepted value is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[49,141],"source":" The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>."}]},{"pos":[32739,32756],"content":"All other errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"All other errors.","pos":[0,17]}]},{"pos":[33192,33260],"content":"Gets or sets the hash algorithm to use when generating key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the hash algorithm to use when generating key material.","pos":[0,68]}]},{"pos":[33273,34114],"content":"This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.       This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.       Other custom hash algorithms may also be used.       The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.       This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.       Other custom hash algorithms may also be used.       The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.","pos":[0,835],"nodes":[{"content":"This property is used by Cryptography Next Generation (CNG) objects only if the &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt; or &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt; value is set in the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A&gt; property.","pos":[0,338],"source":"This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property."},{"content":"This property accepts the following algorithms: &lt;xref:System.Security.Cryptography.CngAlgorithm.MD5%2A&gt;, &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A&gt;, &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A&gt;, &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A&gt;, and &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A&gt;.","pos":[345,691],"source":"       This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>."},{"content":"Other custom hash algorithms may also be used.","pos":[698,744]},{"content":"The default algorithm is &lt;xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A&gt;.","pos":[751,835],"source":"       The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>."}]}]},{"pos":[34301,34345],"content":"An object that specifies the hash algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies the hash algorithm.","pos":[0,44]}]},{"pos":[34537,34612],"content":"The value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null.\" name=\"null.\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"The value is <xref uid=\"langword_csharp_null.\" name=\"null.\" href=\"\"></xref>"},{"pos":[35018,35119],"content":"Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.","pos":[0,101]}]},{"pos":[35131,35497],"content":"This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`. By default, the value is `null`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property applies only when the &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt; value is set in the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A&gt; property, and the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A&gt; property is <ph id=\"ph1\">`false`</ph>.","pos":[0,333],"source":"This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`."},{"content":"By default, the value is <ph id=\"ph1\">`null`</ph>.","pos":[334,366],"source":" By default, the value is `null`."}]},{"pos":[35614,35702],"content":"The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.","pos":[0,88]}]},{"pos":[36174,36309],"content":"Specifies the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used by the current object for cryptographic operations.","needQuote":true,"needEscape":true,"source":"Specifies the <xref href=\"System.Security.Cryptography.CngKey\"></xref> that is used by the current object for cryptographic operations."},{"pos":[36468,36537],"content":"The key pair used by this object to perform cryptographic operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key pair used by this object to perform cryptographic operations.","pos":[0,69]}]},{"pos":[37095,37219],"content":"Gets or sets the key derivation function for the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Gets or sets the key derivation function for the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> class."},{"pos":[37231,37348],"content":"This property specifies the key derivation function that is used to transform the secret agreement into key material.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property specifies the key derivation function that is used to transform the secret agreement into key material.","pos":[0,117]}]},{"pos":[37591,38084],"content":"One of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref> enumeration values: <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>, <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>, or <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>. The default value is <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration values: <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, or <bpt id=\"p4\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[0,384],"source":"One of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref> enumeration values: <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>, <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>, or <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[385,493],"source":" The default value is <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>."}]},{"pos":[38297,38335],"content":"The enumeration value is out of range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The enumeration value is out of range.","pos":[0,38]}]},{"pos":[38731,38792],"content":"Gets or sets the label value that is used for key derivation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the label value that is used for key derivation.","pos":[0,61]}]},{"pos":[38804,39057],"content":"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property. By default, it is `null`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This value is used for key derivation if the &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt; value is set in the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A&gt; property.","pos":[0,227],"source":"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property."},{"content":"By default, it is <ph id=\"ph1\">`null`</ph>.","pos":[228,253],"source":" By default, it is `null`."}]},{"pos":[39172,39188],"content":"The label value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The label value.","pos":[0,16]}]},{"pos":[39688,39850],"content":"Gets the public key that can be used by another <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to generate a shared secret agreement.","needQuote":true,"needEscape":true,"source":"Gets the public key that can be used by another <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> object to generate a shared secret agreement."},{"pos":[40060,40196],"content":"The public key that is associated with this instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The public key that is associated with this instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> object."},{"pos":[40715,40811],"content":"Gets or sets a value that will be appended to the secret agreement when generating key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that will be appended to the secret agreement when generating key material.","pos":[0,96]}]},{"pos":[40823,41209],"content":"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> key derivation function (KDF) is used. The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material. By default, the value is `null`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This value is used for key derivation if the &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt; or &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt; key derivation function (KDF) is used.","pos":[0,232],"source":"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> key derivation function (KDF) is used."},{"content":"The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material.","pos":[233,353]},{"content":"By default, the value is <ph id=\"ph1\">`null`</ph>.","pos":[354,386],"source":" By default, the value is `null`."}]},{"pos":[41331,41382],"content":"The value that is appended to the secret agreement.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that is appended to the secret agreement.","pos":[0,51]}]},{"pos":[41909,42017],"content":"Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.","pos":[0,108]}]},{"pos":[42030,42559],"content":"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:      -   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>      -   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>       The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material. By default, the value is `null`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This value is used for key derivation if the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A&gt; property is set to one of the following values:      -   &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt;      -   &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt;       The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material.","pos":[0,490],"source":"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:      -   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>      -   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>       The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material."},{"content":"By default, the value is <ph id=\"ph1\">`null`</ph>.","pos":[491,523],"source":" By default, the value is `null`."}]},{"pos":[42683,42773],"content":"The value that is appended to the beginning of the secret agreement during key derivation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that is appended to the beginning of the secret agreement during key derivation.","pos":[0,90]}]},{"pos":[43256,43329],"content":"Gets or sets the seed value that will be used when deriving key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the seed value that will be used when deriving key material.","pos":[0,73]}]},{"pos":[43341,43591],"content":"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>. By default, the value is `null`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This value is used for key derivation if the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A&gt; property is set to &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt;.","pos":[0,217],"source":"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>."},{"content":"By default, the value is <ph id=\"ph1\">`null`</ph>.","pos":[218,250],"source":" By default, the value is `null`."}]},{"pos":[43705,43720],"content":"The seed value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The seed value.","pos":[0,15]}]},{"pos":[44286,44317],"content":"This method is not implemented.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not implemented.","pos":[0,31]}]},{"pos":[44329,44523],"content":"To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To convert the current key to an XML representation, use the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29&gt; overload instead.","pos":[0,194],"source":"To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead."}]},{"pos":[44712,44878],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include private parameters; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[44936,44951],"content":"Not applicable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not applicable.","pos":[0,15]}]},{"pos":[45145,45194],"content":"This method was not overridden for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method was not overridden for this instance.","pos":[0,49]}]},{"pos":[45756,45834],"content":"Serializes the key information to an XML string by using the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serializes the key information to an XML string by using the specified format.","pos":[0,78]}]},{"pos":[46046,46224],"content":"One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the format of the XML string.","pos":[0,74]},{"content":"The only currently accepted format is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[75,178],"source":" The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>."}]},{"pos":[46282,46396],"content":"A string object that contains the key information, serialized to an XML string, according to the requested format.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string object that contains the key information, serialized to an XML string, according to the requested format.","pos":[0,114]}]},{"pos":[46598,46739],"content":"<code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> specifies an invalid format.","pos":[0,48],"source":"<code>format</code> specifies an invalid format."},{"content":"The only accepted value is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[49,141],"source":" The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>."}]},{"pos":[47245,47388],"content":"Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.","pos":[0,143]}]},{"pos":[47401,47656],"content":"-   This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>. By default, the value is `false`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">-</ph>   This value is used for key derivation if the &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A&gt; property is set to &lt;xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&gt;.","pos":[0,221],"source":"-   This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>."},{"content":"By default, the value is <ph id=\"ph1\">`false`</ph>.","pos":[222,255],"source":" By default, the value is `false`."}]},{"pos":[47788,47994],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the secret agreement is used as an HMAC key to derive key material; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the secret agreement is used as an HMAC key to derive key material; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ECDiffieHellmanCng\n  id: ECDiffieHellmanCng\n  children:\n  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor\n  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)\n  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  - System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)\n  - System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)\n  - System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  - System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm\n  - System.Security.Cryptography.ECDiffieHellmanCng.HmacKey\n  - System.Security.Cryptography.ECDiffieHellmanCng.Key\n  - System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction\n  - System.Security.Cryptography.ECDiffieHellmanCng.Label\n  - System.Security.Cryptography.ECDiffieHellmanCng.PublicKey\n  - System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend\n  - System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend\n  - System.Security.Cryptography.ECDiffieHellmanCng.Seed\n  - System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  - System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\n  langs:\n  - csharp\n  name: ECDiffieHellmanCng\n  nameWithType: ECDiffieHellmanCng\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng\n  type: Class\n  summary: Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.\n  remarks: \"The ECDiffieHellmanCng class enables two parties to exchange private key material even if they are communicating through a public channel.  Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes. The secret agreement can then be used for a variety of purposes, including as a symmetric key. However, instead of exposing the secret agreement directly, the ECDiffieHellmanCng class does some post-processing on the agreement before providing the value. This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.  \\n  \\n|Key derivation function|Properties|  \\n|-----------------------------|----------------|  \\n|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|  \\n|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|  \\n|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.|  \\n  \\n The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application. The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:  \\n  \\n1.  Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation  \\n  \\n2.  Alice and Bob configure the KDF using parameters the agree on.  \\n  \\n3.  Alice sends Bob her public key.  \\n  \\n4.  Bob sends Alice his public key.  \\n  \\n5.  Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.\"\n  example:\n  - \"The following example shows how to use the ECDiffieHellmanCng class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.  \\n  \\n [!code-vb[ECDiffieHellmanCng#1](~/add/codesnippet/visualbasic/t-system.security.crypto_88_1.vb)]\\n [!code-cs[ECDiffieHellmanCng#1](~/add/codesnippet/csharp/t-system.security.crypto_88_1.cs)]\"\n  syntax:\n    content: 'public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.ECDiffieHellman\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.ECDiffieHellman.Create\n  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: ECDiffieHellmanCng()\n  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng()\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> class with a random key pair.\n  remarks: The random key pair has a default public key length of 521 bits.\n  syntax:\n    content: public ECDiffieHellmanCng ();\n    parameters: []\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: ECDiffieHellmanCng(Int32)\n  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> class with a random key pair, using the specified key size.\n  remarks: The random key pair will have the public key length defined by the `keySize` parameter.\n  syntax:\n    content: public ECDiffieHellmanCng (int keySize);\n    parameters:\n    - id: keySize\n      type: System.Int32\n      description: The size of the key. Valid key sizes are 256, 384, and 521 bits.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>keySize</code> specifies an invalid length.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) classes are not supported on this system.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)\n  id: '#ctor(System.Security.Cryptography.CngKey)'\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: ECDiffieHellmanCng(CngKey)\n  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> class by using the specified <xref href=\"System.Security.Cryptography.CngKey\"></xref> object.\n  syntax:\n    content: public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.CngKey\n      description: The key that will be used as input to the cryptographic operations performed by the current object.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>key</code> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) classes are not supported on this system.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.\n  remarks: If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.\n  syntax:\n    content: public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm  to use to derive the key material.\n    - id: secretPrepend\n      type: System.Byte[]\n      description: A value to prepend to the derived secret before hashing.\n    - id: secretAppend\n      type: System.Byte[]\n      description: A value to append to the derived secret before hashing.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.  \\n  \\n -or-  \\n  \\n <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).\n  remarks: If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays. If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.\n  syntax:\n    content: public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to derive the key material.\n    - id: hmacKey\n      type: System.Byte[]\n      description: The key for the HMAC.\n    - id: secretPrepend\n      type: System.Byte[]\n      description: A value to prepend to the derived secret before hashing.\n    - id: secretAppend\n      type: System.Byte[]\n      description: A value to append to the derived secret before hashing.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.  \\n  \\n -or-  \\n  \\n <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)\n  id: DeriveKeyMaterial(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: DeriveKeyMaterial(CngKey)\n  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives the key material that is generated from the secret agreement between two parties, given a <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that contains the second party's public key.\n  syntax:\n    content: public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.CngKey\n      description: An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.\n    return:\n      type: System.Byte[]\n      description: A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>otherPartyPublicKey</code> is invalid. Either its <xref:System.Security.Cryptography.CngKey.AlgorithmGroup*> property does not specify <xref:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman*> or its key size does not match the key size of this instance.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This object's <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*> property specifies the <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref> key derivation function, but either <xref:System.Security.Cryptography.ECDiffieHellmanCng.Label*> or <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives the key material that is generated from the secret agreement between two parties, given an <xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"></xref> object that contains the second party's public key.\n  syntax:\n    content: public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The public key from the other party in the key exchange.\n    return:\n      type: System.Byte[]\n      description: A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>otherPartyPublicKey</code> is not an <xref href=\"System.Security.Cryptography.ECDiffieHellmanCngPublicKey\"></xref> key.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  nameWithType: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.\n  syntax:\n    content: public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: prfLabel\n      type: System.Byte[]\n      description: The ASCII-encoded PRF label.\n    - id: prfSeed\n      type: System.Byte[]\n      description: The 64-byte PRF seed.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>otherPartyPublicKey</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>prfLabel</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>prfSeed</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"<code>prfSeed</code> is not exactly 64 bytes in length.  \\n  \\n -or-  \\n  \\n All other cryptographic errors.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)\n  id: DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: DeriveSecretAgreementHandle(CngKey)\n  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets a handle to the secret agreement generated between two parties, given a <xref href=\"System.Security.Cryptography.CngKey\"></xref> object that contains the second party's public key.\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.CngKey\n      description: An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n      description: A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  id: DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)\n  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets a handle to the secret agreement generated between two parties, given an <xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"></xref> object that contains the second party's public key.\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The public key from the other party in the key exchange.\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n      description: A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>otherPartyPublicKey</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>otherPartyPublicKey</code> is not an <xref href=\"System.Security.Cryptography.ECDiffieHellmanPublicKey\"></xref> key.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ECDiffieHellmanCng.Dispose(Boolean)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)\n  id: FromXmlString(System.String)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: FromXmlString(String)\n  nameWithType: ECDiffieHellmanCng.FromXmlString(String)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: This method is not implemented.\n  remarks: To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.\n  syntax:\n    content: public override void FromXmlString (string xmlString);\n    parameters:\n    - id: xmlString\n      type: System.String\n      description: The XML-based key information to be deserialized.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: This method was not overridden for this instance.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  id: FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: FromXmlString(String,ECKeyXmlFormat)\n  nameWithType: ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Deserializes the key information from an XML string by using the specified format.\n  syntax:\n    content: public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);\n    parameters:\n    - id: xml\n      type: System.String\n      description: The XML-based key information to be deserialized.\n    - id: format\n      type: System.Security.Cryptography.ECKeyXmlFormat\n      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>xml</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>xml</code> is malformed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm\n  id: HashAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: ECDiffieHellmanCng.HashAlgorithm\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the hash algorithm to use when generating key material.\n  remarks: \"This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.  \\n  \\n This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.  \\n  \\n Other custom hash algorithms may also be used.  \\n  \\n The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.\"\n  syntax:\n    content: public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: An object that specifies the hash algorithm.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value is <xref uid=\"langword_csharp_null.\" name=\"null.\" href=\"\"></xref>\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey\n  id: HmacKey\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: HmacKey\n  nameWithType: ECDiffieHellmanCng.HmacKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.\n  remarks: This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`. By default, the value is `null`.\n  syntax:\n    content: public byte[] HmacKey { get; set; }\n    return:\n      type: System.Byte[]\n      description: The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key\n  id: Key\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: Key\n  nameWithType: ECDiffieHellmanCng.Key\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Key\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Specifies the <xref href=\"System.Security.Cryptography.CngKey\"></xref> that is used by the current object for cryptographic operations.\n  syntax:\n    content: public System.Security.Cryptography.CngKey Key { get; }\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: The key pair used by this object to perform cryptographic operations.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.Key*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction\n  id: KeyDerivationFunction\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: KeyDerivationFunction\n  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the key derivation function for the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> class.\n  remarks: This property specifies the key derivation function that is used to transform the secret agreement into key material.\n  syntax:\n    content: public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }\n    return:\n      type: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\n      description: 'One of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref> enumeration values: <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>, <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>, or <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>. The default value is <xref href=\"System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\"></xref>.'\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The enumeration value is out of range.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label\n  id: Label\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: Label\n  nameWithType: ECDiffieHellmanCng.Label\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Label\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the label value that is used for key derivation.\n  remarks: This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property. By default, it is `null`.\n  syntax:\n    content: public byte[] Label { get; set; }\n    return:\n      type: System.Byte[]\n      description: The label value.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.Label*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey\n  id: PublicKey\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: PublicKey\n  nameWithType: ECDiffieHellmanCng.PublicKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the public key that can be used by another <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> object to generate a shared secret agreement.\n  syntax:\n    content: public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }\n    return:\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The public key that is associated with this instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref> object.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend\n  id: SecretAppend\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: SecretAppend\n  nameWithType: ECDiffieHellmanCng.SecretAppend\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets a value that will be appended to the secret agreement when generating key material.\n  remarks: This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> key derivation function (KDF) is used. The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material. By default, the value is `null`.\n  syntax:\n    content: public byte[] SecretAppend { get; set; }\n    return:\n      type: System.Byte[]\n      description: The value that is appended to the secret agreement.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend\n  id: SecretPrepend\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: SecretPrepend\n  nameWithType: ECDiffieHellmanCng.SecretPrepend\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.\n  remarks: \"This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:  \\n  \\n-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>  \\n  \\n-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>  \\n  \\n The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material. By default, the value is `null`.\"\n  syntax:\n    content: public byte[] SecretPrepend { get; set; }\n    return:\n      type: System.Byte[]\n      description: The value that is appended to the beginning of the secret agreement during key derivation.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed\n  id: Seed\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: Seed\n  nameWithType: ECDiffieHellmanCng.Seed\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Seed\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the seed value that will be used when deriving key material.\n  remarks: This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>. By default, the value is `null`.\n  syntax:\n    content: public byte[] Seed { get; set; }\n    return:\n      type: System.Byte[]\n      description: The seed value.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.Seed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)\n  id: ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: ToXmlString(Boolean)\n  nameWithType: ECDiffieHellmanCng.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: This method is not implemented.\n  remarks: To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.\n  syntax:\n    content: public override string ToXmlString (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.String\n      description: Not applicable.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: This method was not overridden for this instance.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  id: ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: ToXmlString(ECKeyXmlFormat)\n  nameWithType: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Serializes the key information to an XML string by using the specified format.\n  syntax:\n    content: public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);\n    parameters:\n    - id: format\n      type: System.Security.Cryptography.ECKeyXmlFormat\n      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.\n    return:\n      type: System.String\n      description: A string object that contains the key information, serialized to an XML string, according to the requested format.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\n  id: UseSecretAgreementAsHmacKey\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  langs:\n  - csharp\n  name: UseSecretAgreementAsHmacKey\n  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.\n  remarks: '-   This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>. By default, the value is `false`.'\n  syntax:\n    content: public bool UseSecretAgreementAsHmacKey { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the secret agreement is used as an HMAC key to derive key material; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: System.Security.Cryptography.ECDiffieHellman\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.NotImplementedException\n  isExternal: true\n  name: System.NotImplementedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: ECDiffieHellmanCng()\n  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng()\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng()\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: ECDiffieHellmanCng(Int32)\n  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: ECDiffieHellmanCng(CngKey)\n  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDiffieHellmanPublicKey\n  nameWithType: ECDiffieHellmanPublicKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyMaterial(CngKey)\n  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  nameWithType: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveSecretAgreementHandle(CngKey)\n  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeNCryptSecretHandle\n  nameWithType: SafeNCryptSecretHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)\n  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ECDiffieHellmanCng.Dispose(Boolean)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: ECDiffieHellmanCng.FromXmlString(String)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: FromXmlString(String,ECKeyXmlFormat)\n  nameWithType: ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)\n- uid: System.Security.Cryptography.ECKeyXmlFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECKeyXmlFormat\n  nameWithType: ECKeyXmlFormat\n  fullName: System.Security.Cryptography.ECKeyXmlFormat\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: ECDiffieHellmanCng.HashAlgorithm\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  nameWithType: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: HmacKey\n  nameWithType: ECDiffieHellmanCng.HmacKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: Key\n  nameWithType: ECDiffieHellmanCng.Key\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Key\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: KeyDerivationFunction\n  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction\n- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDiffieHellmanKeyDerivationFunction\n  nameWithType: ECDiffieHellmanKeyDerivationFunction\n  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: Label\n  nameWithType: ECDiffieHellmanCng.Label\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Label\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: PublicKey\n  nameWithType: ECDiffieHellmanCng.PublicKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: SecretAppend\n  nameWithType: ECDiffieHellmanCng.SecretAppend\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: SecretPrepend\n  nameWithType: ECDiffieHellmanCng.SecretPrepend\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: Seed\n  nameWithType: ECDiffieHellmanCng.Seed\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Seed\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: ECDiffieHellmanCng.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: ToXmlString(ECKeyXmlFormat)\n  nameWithType: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: UseSecretAgreementAsHmacKey\n  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: ECDiffieHellmanCng\n  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyFromHash\n  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyFromHmac\n  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyMaterial\n  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveKeyTls\n  nameWithType: ECDiffieHellmanCng.DeriveKeyTls\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: DeriveSecretAgreementHandle\n  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: Dispose\n  nameWithType: ECDiffieHellmanCng.Dispose\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: FromXmlString\n  nameWithType: ECDiffieHellmanCng.FromXmlString\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: ECDiffieHellmanCng.HashAlgorithm\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: HmacKey\n  nameWithType: ECDiffieHellmanCng.HmacKey\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: Key\n  nameWithType: ECDiffieHellmanCng.Key\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: KeyDerivationFunction\n  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: Label\n  nameWithType: ECDiffieHellmanCng.Label\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: PublicKey\n  nameWithType: ECDiffieHellmanCng.PublicKey\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: SecretAppend\n  nameWithType: ECDiffieHellmanCng.SecretAppend\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: SecretPrepend\n  nameWithType: ECDiffieHellmanCng.SecretPrepend\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: Seed\n  nameWithType: ECDiffieHellmanCng.Seed\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: ToXmlString\n  nameWithType: ECDiffieHellmanCng.ToXmlString\n- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey*\n  parent: System.Security.Cryptography.ECDiffieHellmanCng\n  isExternal: false\n  name: UseSecretAgreementAsHmacKey\n  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey\n"}