{"nodes":[{"pos":[3075,3146],"content":"Provides random access to unmanaged blocks of memory from managed code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides random access to unmanaged blocks of memory from managed code.","pos":[0,71]}]},{"pos":[3159,3930],"content":"The <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A> method of a <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> object returns the unmanaged blocks of memory for working with views of memory-mapped files.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A&gt; method of a &lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFile&gt; object returns the unmanaged blocks of memory for working with views of memory-mapped files.","pos":[0,234],"source":"The <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A> method of a <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> object returns the unmanaged blocks of memory for working with views of memory-mapped files."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[240,319],"source":"      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[320,414]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[415,526],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[527,634],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[635,768],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."}]},{"pos":[4502,4597],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.UnmanagedMemoryAccessor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref> class."},{"pos":[5353,5494],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.UnmanagedMemoryAccessor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specified buffer, offset, and capacity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref> class with a specified buffer, offset, and capacity."},{"pos":[5735,5770],"content":"The buffer to contain the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer to contain the accessor.","pos":[0,35]}]},{"pos":[5832,5872],"content":"The byte at which to start the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte at which to start the accessor.","pos":[0,40]}]},{"pos":[5936,5978],"content":"The size, in bytes, of memory to allocate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bytes, of memory to allocate.","pos":[0,42]}]},{"pos":[6140,6223],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> is greater than <ph id=\"ph3\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>."},{"pos":[6326,6410],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6525,6588],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>offset</code> or <code>capacity</code> is less than zero."},{"pos":[6699,6798],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> would wrap around the high end of the address space.","needQuote":true,"needEscape":true,"source":"<code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space."},{"pos":[7479,7634],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.UnmanagedMemoryAccessor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specified buffer, offset, capacity, and access right.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref> class with a specified buffer, offset, capacity, and access right."},{"pos":[7904,7939],"content":"The buffer to contain the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer to contain the accessor.","pos":[0,35]}]},{"pos":[8001,8041],"content":"The byte at which to start the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte at which to start the accessor.","pos":[0,40]}]},{"pos":[8105,8147],"content":"The size, in bytes, of memory to allocate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bytes, of memory to allocate.","pos":[0,42]}]},{"pos":[8217,8346],"content":"The type of access allowed to the memory. The default is <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of access allowed to the memory.","pos":[0,41]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[42,129],"source":" The default is <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref>."}]},{"pos":[8508,8591],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> is greater than <ph id=\"ph3\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>."},{"pos":[8694,8778],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8894,9106],"content":"<code>offset</code> or <code>capacity</code> is less than zero.       -or-       <code>access</code> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref> enumeration value.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","pos":[0,63],"source":"<code>offset</code> or <code>capacity</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value.","pos":[70,206],"source":"       -or-       <code>access</code> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref> enumeration value."}]},{"pos":[9218,9317],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> would wrap around the high end of the address space.","needQuote":true,"needEscape":true,"source":"<code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space."},{"pos":[9664,9708],"content":"Determines whether the accessor is readable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the accessor is readable.","pos":[0,44]}]},{"pos":[9819,9983],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the accessor is readable; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the accessor is readable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10407,10452],"content":"Determines whether the accessory is writable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the accessory is writable.","pos":[0,45]}]},{"pos":[10564,10728],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the accessor is writable; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the accessor is writable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11153,11187],"content":"Gets the capacity of the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the capacity of the accessor.","pos":[0,34]}]},{"pos":[11297,11326],"content":"The capacity of the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The capacity of the accessor.","pos":[0,29]}]},{"pos":[11750,11840],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.IO.UnmanagedMemoryAccessor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref>."},{"pos":[12382,12528],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.IO.UnmanagedMemoryAccessor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref> and optionally releases the managed resources."},{"pos":[12541,13077],"content":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.UnmanagedMemoryAccessor> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,102],"source":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[103,208],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[209,292],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.IO.UnmanagedMemoryAccessor&gt; references.","pos":[299,464],"source":"       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.UnmanagedMemoryAccessor> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[465,534],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[13233,13442],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[14159,14200],"content":"Sets the initial values for the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the initial values for the accessor.","pos":[0,41]}]},{"pos":[14212,14269],"content":"This method is called by the constructors for this class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the constructors for this class.","pos":[0,57]}]},{"pos":[14534,14569],"content":"The buffer to contain the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer to contain the accessor.","pos":[0,35]}]},{"pos":[14631,14671],"content":"The byte at which to start the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte at which to start the accessor.","pos":[0,40]}]},{"pos":[14735,14777],"content":"The size, in bytes, of memory to allocate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bytes, of memory to allocate.","pos":[0,42]}]},{"pos":[14847,14976],"content":"The type of access allowed to the memory. The default is <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of access allowed to the memory.","pos":[0,41]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[42,129],"source":" The default is <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref>."}]},{"pos":[15143,15226],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> is greater than <ph id=\"ph3\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>."},{"pos":[15329,15413],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15529,15741],"content":"<code>offset</code> or <code>capacity</code> is less than zero.       -or-       <code>access</code> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref> enumeration value.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","pos":[0,63],"source":"<code>offset</code> or <code>capacity</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value.","pos":[70,206],"source":"       -or-       <code>access</code> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref> enumeration value."}]},{"pos":[15853,15952],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> would wrap around the high end of the address space.","needQuote":true,"needEscape":true,"source":"<code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space."},{"pos":[16294,16357],"content":"Determines whether the accessor is currently open by a process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the accessor is currently open by a process.","pos":[0,63]}]},{"pos":[16470,16630],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the accessor is open; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the accessor is open; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17266,17278],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17332,17344],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18123,18135],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18187,18199],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18261,18273],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18334,18346],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18403,18415],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18906,18946],"content":"Reads a Boolean value from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a Boolean value from the accessor.","pos":[0,40]}]},{"pos":[19090,19154],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[19213,19340],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> or <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19508,19579],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[19694,19779],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[19882,19920],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[20027,20058],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[20457,20494],"content":"Reads a byte value from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a byte value from the accessor.","pos":[0,37]}]},{"pos":[20635,20699],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[20755,20779],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[20944,21015],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[21130,21215],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[21318,21356],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[21463,21494],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[21893,21929],"content":"Reads a character from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a character from the accessor.","pos":[0,36]}]},{"pos":[22070,22134],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[22190,22214],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[22379,22450],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[22565,22650],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[22753,22791],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[22898,22929],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[23343,23383],"content":"Reads a decimal value from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a decimal value from the accessor.","pos":[0,40]}]},{"pos":[23530,23594],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[23653,23677],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[23846,23970],"content":"There are not enough bytes after <code>position</code> to read a value.       -or-       The decimal to read is invalid.","needQuote":false,"needEscape":true,"nodes":[{"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","pos":[0,71],"source":"There are not enough bytes after <code>position</code> to read a value."},{"content":"-or-       The decimal to read is invalid.","pos":[78,120]}]},{"pos":[24086,24171],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[24274,24312],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[24419,24450],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[24859,24923],"content":"Reads a double-precision floating-point value from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a double-precision floating-point value from the accessor.","pos":[0,64]}]},{"pos":[25068,25132],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[25190,25214],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[25381,25452],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[25567,25652],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[25755,25793],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[25900,25931],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[26335,26376],"content":"Reads a 16-bit integer from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a 16-bit integer from the accessor.","pos":[0,41]}]},{"pos":[26519,26583],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[26640,26664],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[26830,26901],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[27016,27101],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[27204,27242],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[27349,27380],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[27784,27825],"content":"Reads a 32-bit integer from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a 32-bit integer from the accessor.","pos":[0,41]}]},{"pos":[27966,28030],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[28087,28111],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[28277,28348],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[28463,28548],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[28651,28689],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[28796,28827],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[29231,29272],"content":"Reads a 64-bit integer from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a 64-bit integer from the accessor.","pos":[0,41]}]},{"pos":[29414,29478],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[29535,29559],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[29725,29796],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[29911,29996],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[30099,30137],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[30244,30275],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[30679,30727],"content":"Reads an 8-bit signed integer from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads an 8-bit signed integer from the accessor.","pos":[0,48]}]},{"pos":[30870,30934],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[30991,31015],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[31181,31252],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[31367,31452],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[31555,31593],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[31700,31731],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[32140,32204],"content":"Reads a single-precision floating-point value from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a single-precision floating-point value from the accessor.","pos":[0,64]}]},{"pos":[32348,32412],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[32470,32494],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[32661,32732],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[32847,32932],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[33035,33073],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[33180,33211],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[33620,33671],"content":"Reads an unsigned 16-bit integer from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads an unsigned 16-bit integer from the accessor.","pos":[0,51]}]},{"pos":[33816,33880],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[33938,33962],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[34129,34200],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[34315,34400],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[34503,34541],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[34648,34679],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[35088,35139],"content":"Reads an unsigned 32-bit integer from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads an unsigned 32-bit integer from the accessor.","pos":[0,51]}]},{"pos":[35282,35346],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[35404,35428],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[35595,35666],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[35781,35866],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[35969,36007],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[36114,36145],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[36554,36605],"content":"Reads an unsigned 64-bit integer from the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads an unsigned 64-bit integer from the accessor.","pos":[0,51]}]},{"pos":[36749,36813],"content":"The number of bytes into the accessor at which to begin reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin reading.","pos":[0,64]}]},{"pos":[36871,36895],"content":"The value that was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that was read.","pos":[0,24]}]},{"pos":[37062,37133],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to read a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to read a value."},{"pos":[37248,37333],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[37436,37474],"content":"The accessor does not support reading.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support reading.","pos":[0,38]}]},{"pos":[37581,37612],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[38050,38091],"content":"Writes a Boolean value into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a Boolean value into the accessor.","pos":[0,41]}]},{"pos":[38241,38305],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[38368,38387],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[38549,38621],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[38736,38821],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[38924,38962],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[39069,39100],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[39523,39561],"content":"Writes a byte value into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a byte value into the accessor.","pos":[0,38]}]},{"pos":[39711,39775],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[39835,39854],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[40016,40088],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[40203,40288],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[40391,40429],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[40536,40567],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[40990,41027],"content":"Writes a character into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a character into the accessor.","pos":[0,37]}]},{"pos":[41177,41241],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[41301,41320],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[41482,41554],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[41669,41754],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[41857,41895],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[42002,42033],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[42471,42512],"content":"Writes a decimal value into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a decimal value into the accessor.","pos":[0,41]}]},{"pos":[42665,42729],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[42792,42811],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[42974,43091],"content":"There are not enough bytes after <code>position</code> to write a value.       -or-       The decimal is invalid.","needQuote":false,"needEscape":true,"nodes":[{"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","pos":[0,72],"source":"There are not enough bytes after <code>position</code> to write a value."},{"content":"-or-       The decimal is invalid.","pos":[79,113]}]},{"pos":[43207,43292],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[43395,43433],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[43540,43571],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[44004,44102],"content":"Writes a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value into the accessor.","needQuote":true,"needEscape":true,"source":"Writes a <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> value into the accessor."},{"pos":[44254,44318],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[44380,44399],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[44561,44633],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[44748,44833],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[44936,44974],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[45081,45112],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[45540,45582],"content":"Writes a 16-bit integer into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a 16-bit integer into the accessor.","pos":[0,42]}]},{"pos":[45733,45797],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[45858,45877],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[46039,46111],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[46226,46311],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[46414,46452],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[46559,46590],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[47018,47060],"content":"Writes a 32-bit integer into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a 32-bit integer into the accessor.","pos":[0,42]}]},{"pos":[47209,47273],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[47334,47353],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[47515,47587],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[47702,47787],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[47890,47928],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[48035,48066],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[48494,48536],"content":"Writes a 64-bit integer into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a 64-bit integer into the accessor.","pos":[0,42]}]},{"pos":[48686,48750],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[48811,48830],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[48992,49051],"content":"There are not enough bytes after position to write a value.","needQuote":true,"needEscape":true,"nodes":[{"content":"There are not enough bytes after position to write a value.","pos":[0,59]}]},{"pos":[49166,49251],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[49354,49392],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[49499,49530],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[49958,50000],"content":"Writes an 8-bit integer into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an 8-bit integer into the accessor.","pos":[0,42]}]},{"pos":[50151,50215],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[50276,50295],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[50457,50529],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[50644,50729],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[50832,50870],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[50977,51008],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[51441,51533],"content":"Writes a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Single\" name=\"Single\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> into the accessor.","needQuote":true,"needEscape":true,"source":"Writes a <xref uid=\"langword_csharp_Single\" name=\"Single\" href=\"\"></xref> into the accessor."},{"pos":[51684,51748],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[51810,51829],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[51991,52063],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[52178,52263],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[52366,52404],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[52511,52542],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[52975,53027],"content":"Writes an unsigned 16-bit integer into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an unsigned 16-bit integer into the accessor.","pos":[0,52]}]},{"pos":[53179,53243],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[53305,53324],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[53486,53558],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[53673,53758],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[53861,53899],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[54006,54037],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[54470,54522],"content":"Writes an unsigned 32-bit integer into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an unsigned 32-bit integer into the accessor.","pos":[0,52]}]},{"pos":[54672,54736],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[54798,54817],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[54979,55051],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[55166,55251],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[55354,55392],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[55499,55530],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[55963,56015],"content":"Writes an unsigned 64-bit integer into the accessor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an unsigned 64-bit integer into the accessor.","pos":[0,52]}]},{"pos":[56166,56230],"content":"The number of bytes into the accessor at which to begin writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes into the accessor at which to begin writing.","pos":[0,64]}]},{"pos":[56292,56311],"content":"The value to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to write.","pos":[0,19]}]},{"pos":[56473,56545],"content":"There are not enough bytes after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept> to write a value.","needQuote":true,"needEscape":true,"source":"There are not enough bytes after <code>position</code> to write a value."},{"pos":[56660,56745],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero or greater than the capacity of the accessor.","needQuote":true,"needEscape":true,"source":"<code>position</code> is less than zero or greater than the capacity of the accessor."},{"pos":[56848,56886],"content":"The accessor does not support writing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor does not support writing.","pos":[0,38]}]},{"pos":[56993,57024],"content":"The accessor has been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The accessor has been disposed.","pos":[0,31]}]},{"pos":[57595,57607],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[57661,57673],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[58460,58472],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[58524,58536],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[58598,58610],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[58671,58683],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.UnmanagedMemoryAccessor\n  id: UnmanagedMemoryAccessor\n  children:\n  - System.IO.UnmanagedMemoryAccessor.#ctor\n  - System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  - System.IO.UnmanagedMemoryAccessor.CanRead\n  - System.IO.UnmanagedMemoryAccessor.CanWrite\n  - System.IO.UnmanagedMemoryAccessor.Capacity\n  - System.IO.UnmanagedMemoryAccessor.Dispose\n  - System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)\n  - System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  - System.IO.UnmanagedMemoryAccessor.IsOpen\n  - System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)\n  - System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  - System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)\n  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)\n  - System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)\n  - System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: UnmanagedMemoryAccessor\n  nameWithType: UnmanagedMemoryAccessor\n  fullName: System.IO.UnmanagedMemoryAccessor\n  type: Class\n  summary: Provides random access to unmanaged blocks of memory from managed code.\n  remarks: \"The <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A> method of a <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> object returns the unmanaged blocks of memory for working with views of memory-mapped files.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  syntax:\n    content: 'public class UnmanagedMemoryAccessor : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.#ctor\n  id: '#ctor'\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: UnmanagedMemoryAccessor()\n  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()\n  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref> class.\n  syntax:\n    content: protected UnmanagedMemoryAccessor ();\n    parameters: []\n  overload: System.IO.UnmanagedMemoryAccessor.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)\n  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)'\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)\n  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref> class with a specified buffer, offset, and capacity.\n  syntax:\n    content: public UnmanagedMemoryAccessor (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity);\n    parameters:\n    - id: buffer\n      type: System.Runtime.InteropServices.SafeBuffer\n      description: The buffer to contain the accessor.\n    - id: offset\n      type: System.Int64\n      description: The byte at which to start the accessor.\n    - id: capacity\n      type: System.Int64\n      description: The size, in bytes, of memory to allocate.\n  overload: System.IO.UnmanagedMemoryAccessor.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>capacity</code> is less than zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)'\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)\n  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)\n  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref> class with a specified buffer, offset, capacity, and access right.\n  syntax:\n    content: public UnmanagedMemoryAccessor (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access);\n    parameters:\n    - id: buffer\n      type: System.Runtime.InteropServices.SafeBuffer\n      description: The buffer to contain the accessor.\n    - id: offset\n      type: System.Int64\n      description: The byte at which to start the accessor.\n    - id: capacity\n      type: System.Int64\n      description: The size, in bytes, of memory to allocate.\n    - id: access\n      type: System.IO.FileAccess\n      description: The type of access allowed to the memory. The default is <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref>.\n  overload: System.IO.UnmanagedMemoryAccessor.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> or <code>capacity</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>access</code> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\"></xref> enumeration value.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.CanRead\n  id: CanRead\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: UnmanagedMemoryAccessor.CanRead\n  fullName: System.IO.UnmanagedMemoryAccessor.CanRead\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Determines whether the accessor is readable.\n  syntax:\n    content: public bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the accessor is readable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.UnmanagedMemoryAccessor.CanRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.CanWrite\n  id: CanWrite\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: UnmanagedMemoryAccessor.CanWrite\n  fullName: System.IO.UnmanagedMemoryAccessor.CanWrite\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Determines whether the accessory is writable.\n  syntax:\n    content: public bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the accessor is writable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.UnmanagedMemoryAccessor.CanWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Capacity\n  id: Capacity\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: UnmanagedMemoryAccessor.Capacity\n  fullName: System.IO.UnmanagedMemoryAccessor.Capacity\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets the capacity of the accessor.\n  syntax:\n    content: public long Capacity { get; }\n    return:\n      type: System.Int64\n      description: The capacity of the accessor.\n  overload: System.IO.UnmanagedMemoryAccessor.Capacity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Dispose\n  id: Dispose\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: UnmanagedMemoryAccessor.Dispose()\n  fullName: System.IO.UnmanagedMemoryAccessor.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Releases all resources used by the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.IO.UnmanagedMemoryAccessor.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: UnmanagedMemoryAccessor.Dispose(Boolean)\n  fullName: System.IO.UnmanagedMemoryAccessor.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.UnmanagedMemoryAccessor\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.UnmanagedMemoryAccessor> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.IO.UnmanagedMemoryAccessor.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  id: Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Initialize(SafeBuffer,Int64,Int64,FileAccess)\n  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)\n  fullName: System.IO.UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Sets the initial values for the accessor.\n  remarks: This method is called by the constructors for this class.\n  syntax:\n    content: protected void Initialize (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access);\n    parameters:\n    - id: buffer\n      type: System.Runtime.InteropServices.SafeBuffer\n      description: The buffer to contain the accessor.\n    - id: offset\n      type: System.Int64\n      description: The byte at which to start the accessor.\n    - id: capacity\n      type: System.Int64\n      description: The size, in bytes, of memory to allocate.\n    - id: access\n      type: System.IO.FileAccess\n      description: The type of access allowed to the memory. The default is <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref>.\n  overload: System.IO.UnmanagedMemoryAccessor.Initialize*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> or <code>capacity</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>access</code> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\"></xref> enumeration value.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.IsOpen\n  id: IsOpen\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: IsOpen\n  nameWithType: UnmanagedMemoryAccessor.IsOpen\n  fullName: System.IO.UnmanagedMemoryAccessor.IsOpen\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Determines whether the accessor is currently open by a process.\n  syntax:\n    content: protected bool IsOpen { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the accessor is open; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.UnmanagedMemoryAccessor.IsOpen*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)\n  id: Read``1(System.Int64,``0@)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Read(Int64,T)\n  nameWithType: UnmanagedMemoryAccessor.Read(Int64,T)\n  fullName: System.IO.UnmanagedMemoryAccessor.Read(Int64,T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  syntax:\n    content: 'public void Read<T> (long position, out T structure) where T : struct;'\n    parameters:\n    - id: position\n      type: System.Int64\n      description: To be added.\n    - id: structure\n      type: T\n      description: To be added.\n  overload: System.IO.UnmanagedMemoryAccessor.Read<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  id: ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadArray(Int64,T[],Int32,Int32)\n  nameWithType: UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  syntax:\n    content: 'public int ReadArray<T> (long position, T[] array, int offset, int count) where T : struct;'\n    parameters:\n    - id: position\n      type: System.Int64\n      description: To be added.\n    - id: array\n      type: T[]\n      description: To be added.\n    - id: offset\n      type: System.Int32\n      description: To be added.\n    - id: count\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadArray<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)\n  id: ReadBoolean(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadBoolean(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadBoolean(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a Boolean value from the accessor.\n  syntax:\n    content: public bool ReadBoolean (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> or <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadBoolean*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)\n  id: ReadByte(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadByte(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadByte(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a byte value from the accessor.\n  syntax:\n    content: public byte ReadByte (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Byte\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadByte*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)\n  id: ReadChar(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadChar(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadChar(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a character from the accessor.\n  syntax:\n    content: public char ReadChar (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Char\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadChar*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)\n  id: ReadDecimal(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadDecimal(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadDecimal(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a decimal value from the accessor.\n  syntax:\n    content: public decimal ReadDecimal (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Decimal\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadDecimal*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"There are not enough bytes after <code>position</code> to read a value.  \\n  \\n -or-  \\n  \\n The decimal to read is invalid.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)\n  id: ReadDouble(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadDouble(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadDouble(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a double-precision floating-point value from the accessor.\n  syntax:\n    content: public double ReadDouble (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Double\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadDouble*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)\n  id: ReadInt16(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadInt16(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt16(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a 16-bit integer from the accessor.\n  syntax:\n    content: public short ReadInt16 (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Int16\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadInt16*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)\n  id: ReadInt32(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadInt32(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt32(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a 32-bit integer from the accessor.\n  syntax:\n    content: public int ReadInt32 (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Int32\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadInt32*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)\n  id: ReadInt64(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadInt64(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt64(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a 64-bit integer from the accessor.\n  syntax:\n    content: public long ReadInt64 (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Int64\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadInt64*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)\n  id: ReadSByte(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadSByte(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadSByte(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads an 8-bit signed integer from the accessor.\n  syntax:\n    content: public sbyte ReadSByte (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.SByte\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadSByte*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)\n  id: ReadSingle(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadSingle(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadSingle(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads a single-precision floating-point value from the accessor.\n  syntax:\n    content: public float ReadSingle (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.Single\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadSingle*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)\n  id: ReadUInt16(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadUInt16(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt16(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads an unsigned 16-bit integer from the accessor.\n  syntax:\n    content: public ushort ReadUInt16 (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.UInt16\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt16*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)\n  id: ReadUInt32(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadUInt32(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt32(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads an unsigned 32-bit integer from the accessor.\n  syntax:\n    content: public uint ReadUInt32 (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.UInt32\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt32*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)\n  id: ReadUInt64(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: ReadUInt64(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt64(Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Reads an unsigned 64-bit integer from the accessor.\n  syntax:\n    content: public ulong ReadUInt64 (long position);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin reading.\n    return:\n      type: System.UInt64\n      description: The value that was read.\n  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt64*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to read a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)\n  id: Write(System.Int64,System.Boolean)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Boolean)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Boolean)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a Boolean value into the accessor.\n  syntax:\n    content: public void Write (long position, bool value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Boolean\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)\n  id: Write(System.Int64,System.Byte)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Byte)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Byte)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Byte)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a byte value into the accessor.\n  syntax:\n    content: public void Write (long position, byte value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Byte\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)\n  id: Write(System.Int64,System.Char)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Char)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Char)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a character into the accessor.\n  syntax:\n    content: public void Write (long position, char value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Char\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)\n  id: Write(System.Int64,System.Decimal)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Decimal)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Decimal)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Decimal)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a decimal value into the accessor.\n  syntax:\n    content: public void Write (long position, decimal value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Decimal\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"There are not enough bytes after <code>position</code> to write a value.  \\n  \\n -or-  \\n  \\n The decimal is invalid.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)\n  id: Write(System.Int64,System.Double)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Double)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Double)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Double)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> value into the accessor.\n  syntax:\n    content: public void Write (long position, double value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Double\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)\n  id: Write(System.Int64,System.Int16)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Int16)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int16)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int16)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a 16-bit integer into the accessor.\n  syntax:\n    content: public void Write (long position, short value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Int16\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)\n  id: Write(System.Int64,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Int32)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int32)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a 32-bit integer into the accessor.\n  syntax:\n    content: public void Write (long position, int value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Int32\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)\n  id: Write(System.Int64,System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Int64)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a 64-bit integer into the accessor.\n  syntax:\n    content: public void Write (long position, long value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Int64\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after position to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)\n  id: Write(System.Int64,System.SByte)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,SByte)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,SByte)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,SByte)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes an 8-bit integer into the accessor.\n  syntax:\n    content: public void Write (long position, sbyte value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.SByte\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)\n  id: Write(System.Int64,System.Single)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,Single)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Single)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Single)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes a <xref uid=\"langword_csharp_Single\" name=\"Single\" href=\"\"></xref> into the accessor.\n  syntax:\n    content: public void Write (long position, float value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.Single\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)\n  id: Write(System.Int64,System.UInt16)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,UInt16)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt16)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt16)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes an unsigned 16-bit integer into the accessor.\n  syntax:\n    content: public void Write (long position, ushort value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.UInt16\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)\n  id: Write(System.Int64,System.UInt32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,UInt32)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt32)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes an unsigned 32-bit integer into the accessor.\n  syntax:\n    content: public void Write (long position, uint value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.UInt32\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)\n  id: Write(System.Int64,System.UInt64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,UInt64)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt64)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Writes an unsigned 64-bit integer into the accessor.\n  syntax:\n    content: public void Write (long position, ulong value);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The number of bytes into the accessor at which to begin writing.\n    - id: value\n      type: System.UInt64\n      description: The value to write.\n  overload: System.IO.UnmanagedMemoryAccessor.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There are not enough bytes after <code>position</code> to write a value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> is less than zero or greater than the capacity of the accessor.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The accessor does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The accessor has been disposed.\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)\n  id: Write``1(System.Int64,``0@)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: Write(Int64,T)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,T)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  syntax:\n    content: 'public void Write<T> (long position, ref T structure) where T : struct;'\n    parameters:\n    - id: position\n      type: System.Int64\n      description: To be added.\n    - id: structure\n      type: T\n      description: To be added.\n  overload: System.IO.UnmanagedMemoryAccessor.Write<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  id: WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  langs:\n  - csharp\n  name: WriteArray(Int64,T[],Int32,Int32)\n  nameWithType: UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)\n  fullName: System.IO.UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  syntax:\n    content: 'public void WriteArray<T> (long position, T[] array, int offset, int count) where T : struct;'\n    parameters:\n    - id: position\n      type: System.Int64\n      description: To be added.\n    - id: array\n      type: T[]\n      description: To be added.\n    - id: offset\n      type: System.Int32\n      description: To be added.\n    - id: count\n      type: System.Int32\n      description: To be added.\n  overload: System.IO.UnmanagedMemoryAccessor.WriteArray<T>*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.IO.UnmanagedMemoryAccessor.#ctor\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: UnmanagedMemoryAccessor()\n  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()\n  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()\n- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)\n  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)\n- uid: System.Runtime.InteropServices.SafeBuffer\n  parent: System.Runtime.InteropServices\n  isExternal: true\n  name: SafeBuffer\n  nameWithType: SafeBuffer\n  fullName: System.Runtime.InteropServices.SafeBuffer\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)\n  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)\n  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  nameWithType: FileAccess\n  fullName: System.IO.FileAccess\n- uid: System.IO.UnmanagedMemoryAccessor.CanRead\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: CanRead\n  nameWithType: UnmanagedMemoryAccessor.CanRead\n  fullName: System.IO.UnmanagedMemoryAccessor.CanRead\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.UnmanagedMemoryAccessor.CanWrite\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: CanWrite\n  nameWithType: UnmanagedMemoryAccessor.CanWrite\n  fullName: System.IO.UnmanagedMemoryAccessor.CanWrite\n- uid: System.IO.UnmanagedMemoryAccessor.Capacity\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Capacity\n  nameWithType: UnmanagedMemoryAccessor.Capacity\n  fullName: System.IO.UnmanagedMemoryAccessor.Capacity\n- uid: System.IO.UnmanagedMemoryAccessor.Dispose\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Dispose()\n  nameWithType: UnmanagedMemoryAccessor.Dispose()\n  fullName: System.IO.UnmanagedMemoryAccessor.Dispose()\n- uid: System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: UnmanagedMemoryAccessor.Dispose(Boolean)\n  fullName: System.IO.UnmanagedMemoryAccessor.Dispose(Boolean)\n- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Initialize(SafeBuffer,Int64,Int64,FileAccess)\n  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)\n  fullName: System.IO.UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)\n- uid: System.IO.UnmanagedMemoryAccessor.IsOpen\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: IsOpen\n  nameWithType: UnmanagedMemoryAccessor.IsOpen\n  fullName: System.IO.UnmanagedMemoryAccessor.IsOpen\n- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Read(Int64,T)\n  nameWithType: UnmanagedMemoryAccessor.Read(Int64,T)\n  fullName: System.IO.UnmanagedMemoryAccessor.Read(Int64,T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadArray(Int64,T[],Int32,Int32)\n  nameWithType: UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T[]\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadBoolean(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadBoolean(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadByte(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadByte(Int64)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadChar(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadChar(Int64)\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadDecimal(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadDecimal(Int64)\n- uid: System.Decimal\n  parent: System\n  isExternal: true\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadDouble(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadDouble(Int64)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt16(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt16(Int64)\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt32(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt32(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt64(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt64(Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadSByte(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadSByte(Int64)\n- uid: System.SByte\n  parent: System\n  isExternal: true\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadSingle(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadSingle(Int64)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt16(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt16(Int64)\n- uid: System.UInt16\n  parent: System\n  isExternal: true\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt32(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt32(Int64)\n- uid: System.UInt32\n  parent: System\n  isExternal: true\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt64(Int64)\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt64(Int64)\n- uid: System.UInt64\n  parent: System\n  isExternal: true\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Boolean)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Boolean)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Boolean)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Byte)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Byte)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Byte)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Char)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Char)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Char)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Decimal)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Decimal)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Decimal)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Double)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Double)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Double)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Int16)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int16)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int16)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Int32)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int32)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int32)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Int64)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int64)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int64)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,SByte)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,SByte)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,SByte)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,Single)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Single)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Single)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,UInt16)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt16)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt16)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,UInt32)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt32)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt32)\n- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,UInt64)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt64)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt64)\n- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write(Int64,T)\n  nameWithType: UnmanagedMemoryAccessor.Write(Int64,T)\n  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,T)\n- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: WriteArray(Int64,T[],Int32,Int32)\n  nameWithType: UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)\n  fullName: System.IO.UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)\n- uid: System.IO.UnmanagedMemoryAccessor.#ctor*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: UnmanagedMemoryAccessor\n  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor\n- uid: System.IO.UnmanagedMemoryAccessor.CanRead*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: CanRead\n  nameWithType: UnmanagedMemoryAccessor.CanRead\n- uid: System.IO.UnmanagedMemoryAccessor.CanWrite*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: CanWrite\n  nameWithType: UnmanagedMemoryAccessor.CanWrite\n- uid: System.IO.UnmanagedMemoryAccessor.Capacity*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Capacity\n  nameWithType: UnmanagedMemoryAccessor.Capacity\n- uid: System.IO.UnmanagedMemoryAccessor.Dispose*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Dispose\n  nameWithType: UnmanagedMemoryAccessor.Dispose\n- uid: System.IO.UnmanagedMemoryAccessor.Initialize*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Initialize\n  nameWithType: UnmanagedMemoryAccessor.Initialize\n- uid: System.IO.UnmanagedMemoryAccessor.IsOpen*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: IsOpen\n  nameWithType: UnmanagedMemoryAccessor.IsOpen\n- uid: System.IO.UnmanagedMemoryAccessor.Read<T>*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Read<T>\n  nameWithType: UnmanagedMemoryAccessor.Read<T>\n- uid: System.IO.UnmanagedMemoryAccessor.ReadArray<T>*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadArray<T>\n  nameWithType: UnmanagedMemoryAccessor.ReadArray<T>\n- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadBoolean\n  nameWithType: UnmanagedMemoryAccessor.ReadBoolean\n- uid: System.IO.UnmanagedMemoryAccessor.ReadByte*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadByte\n  nameWithType: UnmanagedMemoryAccessor.ReadByte\n- uid: System.IO.UnmanagedMemoryAccessor.ReadChar*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadChar\n  nameWithType: UnmanagedMemoryAccessor.ReadChar\n- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadDecimal\n  nameWithType: UnmanagedMemoryAccessor.ReadDecimal\n- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadDouble\n  nameWithType: UnmanagedMemoryAccessor.ReadDouble\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt16\n  nameWithType: UnmanagedMemoryAccessor.ReadInt16\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt32\n  nameWithType: UnmanagedMemoryAccessor.ReadInt32\n- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadInt64\n  nameWithType: UnmanagedMemoryAccessor.ReadInt64\n- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadSByte\n  nameWithType: UnmanagedMemoryAccessor.ReadSByte\n- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadSingle\n  nameWithType: UnmanagedMemoryAccessor.ReadSingle\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt16\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt16\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt32\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt32\n- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: ReadUInt64\n  nameWithType: UnmanagedMemoryAccessor.ReadUInt64\n- uid: System.IO.UnmanagedMemoryAccessor.Write*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write\n  nameWithType: UnmanagedMemoryAccessor.Write\n- uid: System.IO.UnmanagedMemoryAccessor.Write<T>*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: Write<T>\n  nameWithType: UnmanagedMemoryAccessor.Write<T>\n- uid: System.IO.UnmanagedMemoryAccessor.WriteArray<T>*\n  parent: System.IO.UnmanagedMemoryAccessor\n  isExternal: false\n  name: WriteArray<T>\n  nameWithType: UnmanagedMemoryAccessor.WriteArray<T>\n"}