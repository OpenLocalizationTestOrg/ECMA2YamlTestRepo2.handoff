<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18201ed58ad08fcc2b0f46dee45fc5ecea5d595e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Data.OracleClient.OracleDataAdapter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9dd5a817b8c1c487bcac8d5caa46fe0525922a3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">810057a2eff7bdeb5998ccfe80ee3721d6788d41</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a set of data commands and a connection to a database that are used to fill the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and update the database.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type is deprecated and will be removed in a future version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Oracle and ADO.NET<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OracleDataAdapter serves as a bridge between a <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept> and database for retrieving and saving data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OracleDataAdapter provides this bridge by using &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; to load data from the database into the &lt;xref:System.Data.DataSet&gt;, and using &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; to send changes made in the &lt;xref:System.Data.DataSet&gt; back to the data source.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the OracleDataAdapter fills a &lt;xref:System.Data.DataSet&gt;, it creates the necessary tables and columns for the returned data if they do not already exist.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, primary key information is not included in the implicitly created schema unless the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt; property is set to &lt;xref:System.Data.MissingSchemaAction&gt;.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may also have the OracleDataAdapter create the schema of the &lt;xref:System.Data.DataSet&gt;, including primary key information, before filling it with data using &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Adding Existing Constraints to a DataSet<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  By default, numeric fields imported to a &lt;xref:System.Data.DataTable&gt; with &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; are mapped to &lt;xref:System.Data.OracleClient.OracleNumber&gt; objects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible to overflow the &lt;xref:System.Data.OracleClient.OracleNumber&gt;, and throw an Oracle exception, by importing a non-integral numeric value that is either too large or too high precision for the &lt;xref:System.Data.OracleClient.OracleNumber&gt;'s precision limitations.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Refer to the description of &lt;xref:System.Data.OracleClient.OracleNumber&gt; for more information.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OracleDataAdapter also includes the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt;, &lt;xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A&gt;, &lt;xref:System.Data.OracleClient.OracleDataAdapter.DeleteCommand%2A&gt;, &lt;xref:System.Data.OracleClient.OracleDataAdapter.UpdateCommand%2A&gt;, and <ph id="ph1">`TableMappings`</ph> properties to facilitate loading and updating of data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Data Provider for Oracle does not support batched SQL statements.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it does allow you to use multiple <ph id="ph1">`REF CURSOR`</ph> output parameters to fill a <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept>, each in its own &lt;xref:System.Data.DataTable&gt;.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must define the parameters, mark them as output parameters, and indicate that they are <ph id="ph1">`REF CURSOR`</ph> data types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you cannot use the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method when the OracleDataAdapter is filled using <ph id="ph1">`REF CURSOR`</ph> parameters returned by a stored procedure, because Oracle does not provide the information necessary to determine what the table name and column names are when the SQL statement is executed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# example assumes that you have created this stored procedure.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create the following Oracle package on the Oracle server.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   CREATE OR REPLACE PACKAGE CURSPKG AS       TYPE T_CURSOR IS REF CURSOR;       PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,          IO_CURSOR OUT T_CURSOR);       PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,          DEPTCURSOR OUT T_CURSOR);   END CURSPKG;   /   ```</ph>       Create the following Oracle package body on the Oracle server.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   CREATE OR REPLACE PACKAGE BODY CURSPKG AS        PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,                                   IO_CURSOR OUT T_CURSOR)        IS            V_CURSOR T_CURSOR;        BEGIN            IF N_EMPNO &lt;&gt; 0 THEN                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO                            AND EMP.EMPNO = N_EMPNO;            ELSE                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO;            END IF;            IO_CURSOR := V_CURSOR;        END OPEN_ONE_CURSOR;        PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,                                    DEPTCURSOR OUT T_CURSOR)        IS            V_CURSOR1 T_CURSOR;            V_CURSOR2 T_CURSOR;        BEGIN            OPEN V_CURSOR1 FOR SELECT * FROM EMP;            OPEN V_CURSOR2 FOR SELECT * FROM DEPT;            EMPCURSOR  := V_CURSOR1;            DEPTCURSOR := V_CURSOR2;        END OPEN_TWO_CURSORS;    END CURSPKG;    /   ```</ph>       The following C# example demonstrates how you might obtain table and column information using the stored procedure.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```c#   // GetConnectionString() returns a connection string for   // the data source.      string connString = GetConnectionString();   DataSet ds = new DataSet();   OracleConnection conn = new OracleConnection(connString);   OracleCommand cmd = conn.CreateCommand();      cmd.CommandText = "CURSPKG.OPEN_TWO_CURSORS";   cmd.CommandType = CommandType.StoredProcedure;   cmd.Parameters.Add("EMPCURSOR", OracleType.Cursor).Direction =           ParameterDirection.Output;   cmd.Parameters.Add("DEPTCURSOR", OracleType.Cursor).Direction =           ParameterDirection.Output;      OracleDataAdapter da = new OracleDataAdapter(cmd);   da.TableMappings.Add("Table", "Emp");   da.TableMappings.Add("Table1", "Dept");   da.Fill(ds);      ds.Relations.Add("EmpDept", ds.Tables["Dept"].Columns["Deptno"],          ds.Tables["Emp"].Columns["Deptno"], false);   ```</ph>       The following Visual Basic example demonstrates how to use an OracleDataAdapter to fill a &lt;xref:System.Data.DataSet&gt; using an Oracle <ph id="ph2">`REF CURSOR`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>These examples use tables that are defined in the Oracle Scott/Tiger schema, and require the following PL/SQL package and package body.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must create these on your server to use the examples.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create the following Oracle package on the Oracle server.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   CREATE OR REPLACE PACKAGE CURSPKG AS       TYPE T_CURSOR IS REF CURSOR;       PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,          IO_CURSOR OUT T_CURSOR);       PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,          DEPTCURSOR OUT T_CURSOR);   END CURSPKG;   /   ```</ph>       Create the following Oracle package body on the Oracle server.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   CREATE OR REPLACE PACKAGE BODY CURSPKG AS        PROCEDURE OPEN_ONE_CURSOR (N_EMPNO IN NUMBER,                                   IO_CURSOR OUT T_CURSOR)        IS            V_CURSOR T_CURSOR;        BEGIN            IF N_EMPNO &lt;&gt; 0 THEN                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO                            AND EMP.EMPNO = N_EMPNO;            ELSE                 OPEN V_CURSOR FOR                 SELECT EMP.EMPNO, EMP.ENAME, DEPT.DEPTNO, DEPT.DNAME                      FROM EMP, DEPT                      WHERE EMP.DEPTNO = DEPT.DEPTNO;            END IF;            IO_CURSOR := V_CURSOR;        END OPEN_ONE_CURSOR;        PROCEDURE OPEN_TWO_CURSORS (EMPCURSOR OUT T_CURSOR,                                    DEPTCURSOR OUT T_CURSOR)        IS            V_CURSOR1 T_CURSOR;            V_CURSOR2 T_CURSOR;        BEGIN            OPEN V_CURSOR1 FOR SELECT * FROM EMP;            OPEN V_CURSOR2 FOR SELECT * FROM DEPT;            EMPCURSOR  := V_CURSOR1;            DEPTCURSOR := V_CURSOR2;        END OPEN_TWO_CURSORS;    END CURSPKG;    /   ```</ph>       This Visual Basic example executes a PL/SQL stored procedure that returns two <ph id="ph2">`REF CURSOR`</ph> parameters, and fills a &lt;xref:System.Data.DataSet&gt; with the rows that are returned.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```vb#      ' GetConnectionString() returns a connection string for   ' the data source.          Dim connString As New String(GetConnectionString())       Dim ds As New DataSet()       Dim conn As New OracleConnection(connString)       Dim cmd As OracleCommand = conn.CreateCommand()          cmd.CommandText = "CURSPKG.OPEN_TWO_CURSORS"       cmd.CommandType = CommandType.StoredProcedure       cmd.Parameters.Add("EMPCURSOR", OracleType.Cursor).Direction = _          ParameterDirection.Output       cmd.Parameters.Add("DEPTCURSOR", OracleType.Cursor).Direction = _          ParameterDirection.Output          Dim da As New OracleDataAdapter(cmd)       da.TableMappings.Add("Table", "Emp")       da.TableMappings.Add("Table1", "Dept")       da.Fill(ds)          ds.Relations.Add("EmpDept", ds.Tables("Dept").Columns("Deptno"), _         ds.Tables("Emp").Columns("Deptno"), False)   ```</ph>       After using the OracleDataAdapter to perform a <ph id="ph2">`Fill`</ph> or <ph id="ph3">`FillSchema`</ph> operation, the <ph id="ph4">`DataColumn.ReadOnly`</ph> property always returns false, regardless of whether a column can be updated or not, because the Oracle server does not return this information.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create an instance of &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;, the following read/write properties are set to their default values, as shown in the table.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Properties|Default value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id="ph1">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id="ph2">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified SQL SELECT statement.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; constructor sets the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt; property to the value specified in the <ph id="ph1">`selectCommand`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create an instance of &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;, the following read/write properties are set to their default values, as shown in the table.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id="ph1">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id="ph2">`MissingSchemaAction.Add`</ph>|       You can change the value of any of these properties through a separate call to the property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is an SQL SELECT statement or stored procedure, and is set as the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*&gt; property of the <bpt id="p2">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with an SQL SELECT statement and an <bpt id="p2">&lt;xref href="System.Data.OracleClient.OracleConnection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; can be useful in an application that must call the <ph id="ph1">`Fill`</ph> method for two or more &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; objects.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A string that is an SQL SELECT statement or stored procedure to be used by the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*&gt; property of the <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleConnection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the connection.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with an SQL SELECT statement and a connection string.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A string that is an SQL SELECT statement or stored procedure to be used by the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand*&gt; property of the <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The connection string.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets or sets an SQL statement or stored procedure used to delete records in the database.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the DeleteCommand property is assigned to a previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;, the &lt;xref:System.Data.OracleClient.OracleCommand&gt; is not cloned.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the DeleteCommand maintains a reference to the previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>During an update operation, if DeleteCommand is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, you can use the &lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt; class to automatically generate the DeleteCommand, and additional commands needed to reconcile the &lt;xref:System.Data.DataSet&gt; to the database.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, set the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generation logic also requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used during an update operation to delete records in the database that correspond to deleted rows in the <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Gets or sets an SQL statement or stored procedure used to insert new records into the database.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the InsertCommand property is assigned to a previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt; object, the &lt;xref:System.Data.OracleClient.OracleCommand&gt; is not cloned.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, InsertCommand maintains a reference to the previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>During an update operation, if InsertCommand is not set and primary key information is present in the &lt;xref:System.Data.DataSet&gt;, you can use the &lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt; class to automatically generate InsertCommand, and additional commands needed to reconcile the &lt;xref:System.Data.DataSet&gt; to the database.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, set the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generation logic also requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If execution of this command returns rows, these rows may be added to the &lt;xref:System.Data.DataSet&gt; depending upon how you set the &lt;xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleCommand&gt; object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you update a column with the <ph id="ph1">`LONG RAW`</ph> data type, an exception is thrown when you enter a value of <ph id="ph2">`NULL`</ph> in the column.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Oracle <ph id="ph1">`LONG RAW`</ph> data type is a deprecated type in Oracle version 8.0.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid this error, use the <ph id="ph1">`BLOB`</ph> data type instead of <ph id="ph2">`LONG RAW`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used during an update operation to insert records in the database that correspond to new rows in the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Occurs during an update operation after a command is executed against the database.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the <ph id="ph1">`Update`</ph> method, there are two events that occur per data row updated.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of execution is as follows:      1.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`OnRowUpdating`</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>3.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command executes.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>4.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`UpdateRowSource`</ph> enumeration is set to <ph id="ph2">`FirstReturnedRecord`</ph>, the first returned result is placed in the <bpt id="p1">**</bpt>DataRow<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>5.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are output parameters, they are placed in the <bpt id="p1">**</bpt>DataRow<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>6.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`OnRowUpdated`</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>7.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`AcceptChanges`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Occurs during &lt;xref:System.Data.Common.DbDataAdapter.Update*&gt; before a command is executed against the data source.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the <ph id="ph1">`Update`</ph> method, there are two events that occur per data row updated.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of execution is as follows:      1.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`OnRowUpdating`</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>3.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command executes.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>4.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`UpdateRowSource`</ph> enumeration is set to <ph id="ph2">`FirstReturnedRecord`</ph>, the first returned result is placed in the <bpt id="p1">**</bpt>DataRow<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>5.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are output parameters, they are placed in the <bpt id="p1">**</bpt>DataRow<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>6.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`OnRowUpdated`</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>7.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`AcceptChanges`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Gets or sets an SQL statement or stored procedure used to select records in the database.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>When SelectCommand is assigned to a previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;, the &lt;xref:System.Data.OracleClient.OracleCommand&gt; is not cloned.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the SelectCommand maintains a reference to the previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt; object.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>If SelectCommand does not return any rows, no tables are added to the <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept>, and no exception is raised.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used during a fill operation to select records from database for placement in the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.DeleteCommand*&gt;.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A string representing the command.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.InsertCommand*&gt;.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A string representing the command.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.SelectCommand*&gt;.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A string representing the command.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For a description of this member, see &lt;xref:System.Data.IDbDataAdapter.UpdateCommand*&gt;.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDbDataAdapter&gt; interface.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A string representing the command.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.ICloneable.Clone%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt; instance is cast to an &lt;xref:System.ICloneable&gt; interface.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A new object that is a copy of this instance.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the UpdateBatchSize property to update a data source with changes from a &lt;xref:System.Data.DataSet&gt;.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can increase application performance by reducing the number of round-trips to the server.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Executing an extremely large batch could decrease performance.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you should test for the optimum batch size setting before you implement your application.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>An &lt;xref:System.ArgumentOutOfRangeException&gt; is thrown if the value is set to a number less than zero.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The number of rows to process per batch.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Value:</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Effect:</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>There is no limit on the batch size.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Disables batch updating.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;gt;</ph> 1</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Changes are sent using batches of UpdateBatchSize operations at a time.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>When setting this to a value other than 1 all the commands associated with the <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> have to have their &lt;xref:System.Data.IDbCommand.UpdatedRowSource*&gt; property set to <bpt id="p2">&lt;xref uid="langword_csharp_None" name="None" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_OutputParameters" name="OutputParameters" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>An exception is thrown otherwise.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets or sets an SQL statement or stored procedure used to update records in the database.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>When UpdateCommand is assigned to a previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt;, the &lt;xref:System.Data.OracleClient.OracleCommand&gt; is not cloned.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the UpdateCommand maintains a reference to the previously created &lt;xref:System.Data.OracleClient.OracleCommand&gt; object.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>During an update operation, if &lt;xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A&gt; is not set and primary key information is present in the <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept>, you can use the &lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt; class to automatically generate &lt;xref:System.Data.OracleClient.OracleDataAdapter.InsertCommand%2A&gt;, and additional commands needed to reconcile the &lt;xref:System.Data.DataSet&gt; to the database.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, set the &lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generation logic also requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If execution of this command returns rows, these rows may be merged with the &lt;xref:System.Data.DataSet&gt; depending upon how you set the &lt;xref:System.Data.OracleClient.OracleCommand.UpdatedRowSource%2A&gt; property of the &lt;xref:System.Data.OracleClient.OracleCommand&gt; object.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you update a column with the <ph id="ph1">`LONG RAW`</ph> data type, an exception is thrown when you enter a value of <ph id="ph2">`NULL`</ph> in the column.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Oracle <ph id="ph1">`LONG RAW`</ph> data type is a deprecated type in Oracle version 8.0.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid this error, use the <ph id="ph1">`BLOB`</ph> data type instead of <ph id="ph2">`LONG RAW`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used during an update operation to update records in the database that correspond to modified rows in the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>