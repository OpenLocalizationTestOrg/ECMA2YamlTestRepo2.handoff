{"nodes":[{"pos":[3049,3129],"content":"Represents a vector that is used to encode three-dimensional physical rotations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a vector that is used to encode three-dimensional physical rotations.","pos":[0,80]}]},{"pos":[3142,3296],"content":"The Quaternion structure is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where:      <ph id=\"ph1\">```   w = cos(theta/2)   ```</ph>","needQuote":false,"needEscape":true,"extradata":"MT","source":"The Quaternion structure is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where:      ```   w = cos(theta/2)   ```"},{"pos":[3950,4016],"content":"Creates a quaternion from the specified vector and rotation parts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a quaternion from the specified vector and rotation parts.","pos":[0,66]}]},{"pos":[4206,4240],"content":"The vector part of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector part of the quaternion.","pos":[0,34]}]},{"pos":[4307,4343],"content":"The rotation part of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rotation part of the quaternion.","pos":[0,36]}]},{"pos":[4943,4997],"content":"Constructs a quaternion from the specified components.","needQuote":true,"needEscape":true,"nodes":[{"content":"Constructs a quaternion from the specified components.","pos":[0,54]}]},{"pos":[5150,5207],"content":"The value to assign to the X component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to assign to the X component of the quaternion.","pos":[0,57]}]},{"pos":[5265,5322],"content":"The value to assign to the Y component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to assign to the Y component of the quaternion.","pos":[0,57]}]},{"pos":[5380,5437],"content":"The value to assign to the Z component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to assign to the Z component of the quaternion.","pos":[0,57]}]},{"pos":[5495,5552],"content":"The value to assign to the W component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to assign to the W component of the quaternion.","pos":[0,57]}]},{"pos":[6098,6188],"content":"Adds each element in one quaternion with its corresponding element in a second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds each element in one quaternion with its corresponding element in a second quaternion.","pos":[0,90]}]},{"pos":[6420,6441],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[6517,6539],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[6610,6704],"content":"The quaternion that contains the summed values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The quaternion that contains the summed values of <code>value1</code> and <code>value2</code>."},{"pos":[7288,7317],"content":"Concatenates two quaternions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Concatenates two quaternions.","pos":[0,29]}]},{"pos":[7557,7601],"content":"The first quaternion rotation in the series.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion rotation in the series.","pos":[0,44]}]},{"pos":[7677,7722],"content":"The second quaternion rotation in the series.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion rotation in the series.","pos":[0,45]}]},{"pos":[7793,7922],"content":"A new quaternion representing the concatenation of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value1</ph><ept id=\"p1\">&lt;/code&gt;</ept> rotation followed by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value2</ph><ept id=\"p2\">&lt;/code&gt;</ept> rotation.","needQuote":true,"needEscape":true,"source":"A new quaternion representing the concatenation of the <code>value1</code> rotation followed by the <code>value2</code> rotation."},{"pos":[8417,8465],"content":"Returns the conjugate of a specified quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the conjugate of a specified quaternion.","pos":[0,48]}]},{"pos":[8666,8681],"content":"The quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The quaternion.","pos":[0,15]}]},{"pos":[8752,8857],"content":"A new quaternion that is the conjugate of <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_value\" name=\"value\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new quaternion that is the conjugate of <xref uid=\"langword_csharp_value\" name=\"value\" href=\"\"></xref>."},{"pos":[9434,9509],"content":"Creates a quaternion from a vector and an angle to rotate about the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a quaternion from a vector and an angle to rotate about the vector.","pos":[0,75]}]},{"pos":[9725,9753],"content":"The vector to rotate around.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to rotate around.","pos":[0,28]}]},{"pos":[9815,9866],"content":"The angle, in radians, to rotate around the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The angle, in radians, to rotate around the vector.","pos":[0,51]}]},{"pos":[9937,9966],"content":"The newly created quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The newly created quaternion.","pos":[0,29]}]},{"pos":[10539,10595],"content":"Creates a quaternion from the specified rotation matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a quaternion from the specified rotation matrix.","pos":[0,56]}]},{"pos":[10811,10831],"content":"The rotation matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rotation matrix.","pos":[0,20]}]},{"pos":[10902,10931],"content":"The newly created quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The newly created quaternion.","pos":[0,29]}]},{"pos":[11564,11625],"content":"Creates a new quaternion from the given yaw, pitch, and roll.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new quaternion from the given yaw, pitch, and roll.","pos":[0,61]}]},{"pos":[11826,11871],"content":"The yaw angle, in radians, around the Y axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The yaw angle, in radians, around the Y axis.","pos":[0,45]}]},{"pos":[11933,11980],"content":"The pitch angle, in radians, around the X axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pitch angle, in radians, around the X axis.","pos":[0,47]}]},{"pos":[12041,12087],"content":"The roll angle, in radians, around the Z axis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The roll angle, in radians, around the Z axis.","pos":[0,46]}]},{"pos":[12158,12183],"content":"The resulting quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting quaternion.","pos":[0,25]}]},{"pos":[12761,12807],"content":"Divides one quaternion by a second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides one quaternion by a second quaternion.","pos":[0,46]}]},{"pos":[13042,13055],"content":"The dividend.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dividend.","pos":[0,13]}]},{"pos":[13131,13143],"content":"The divisor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The divisor.","pos":[0,12]}]},{"pos":[13214,13299],"content":"The quaternion that results from dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value1</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The quaternion that results from dividing <code>value1</code> by <code>value2</code>."},{"pos":[13846,13892],"content":"Calculates the dot product of two quaternions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the dot product of two quaternions.","pos":[0,46]}]},{"pos":[14118,14139],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[14220,14242],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[14300,14316],"content":"The dot product.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dot product.","pos":[0,16]}]},{"pos":[14788,14874],"content":"Returns a value that indicates whether this instance and another quaternion are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance and another quaternion are equal.","pos":[0,86]}]},{"pos":[14886,14963],"content":"Two quaternions are equal if each of their corresponding components is equal.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Two quaternions are equal if each of their corresponding components is equal.","pos":[0,77]}]},{"pos":[15132,15153],"content":"The other quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other quaternion.","pos":[0,21]}]},{"pos":[15212,15381],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two quaternions are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two quaternions are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15818,15904],"content":"Returns a value that indicates whether this instance and a specified object are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance and a specified object are equal.","pos":[0,86]}]},{"pos":[15916,16070],"content":"The current instance and <ph id=\"ph1\">`obj`</ph> are equal if <ph id=\"ph2\">`obj`</ph> is a &lt;xref:System.Numerics.Quaternion&gt; object and the corresponding components of each matrix are equal.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Quaternion> object and the corresponding components of each matrix are equal."},{"pos":[16211,16259],"content":"The object to compare with the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare with the current instance.","pos":[0,48]}]},{"pos":[16318,16729],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>. If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current instance and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept><bpt id=\"p4\">&lt;xref uid=\"langword_csharp_\" name=\"\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[0,243],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, the method returns <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[244,411],"source":" If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[17143,17183],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[17318,17332],"content":"The hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code.","pos":[0,14]}]},{"pos":[17732,17778],"content":"Gets a quaternion that represents no rotation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a quaternion that represents no rotation.","pos":[0,46]}]},{"pos":[17931,17976],"content":"A quaternion whose values are <ph id=\"ph1\">`(0, 0, 0, 1)`</ph>.","needQuote":true,"needEscape":true,"source":"A quaternion whose values are `(0, 0, 0, 1)`."},{"pos":[18458,18494],"content":"Returns the inverse of a quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the inverse of a quaternion.","pos":[0,36]}]},{"pos":[18693,18708],"content":"The quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The quaternion.","pos":[0,15]}]},{"pos":[18779,18803],"content":"The inverted quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The inverted quaternion.","pos":[0,24]}]},{"pos":[19209,19293],"content":"Gets a value that indicates whether the current instance is the identity quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the current instance is the identity quaternion.","pos":[0,84]}]},{"pos":[19407,19594],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current instance is the identity quaternion; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance is the identity quaternion; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19987,20027],"content":"Calculates the length of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the length of the quaternion.","pos":[0,40]}]},{"pos":[20151,20189],"content":"The computed length of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed length of the quaternion.","pos":[0,38]}]},{"pos":[20613,20661],"content":"Calculates the squared length of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the squared length of the quaternion.","pos":[0,48]}]},{"pos":[20792,20829],"content":"The length squared of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length squared of the quaternion.","pos":[0,37]}]},{"pos":[21437,21564],"content":"Performs a linear interpolation between two quaternions based on a value that specifies the weighting of the second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a linear interpolation between two quaternions based on a value that specifies the weighting of the second quaternion.","pos":[0,127]}]},{"pos":[21826,21847],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[21928,21950],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[22013,22071],"content":"The relative weight of <ph id=\"ph1\">`quaternion2`</ph> in the interpolation.","needQuote":true,"needEscape":true,"source":"The relative weight of `quaternion2` in the interpolation."},{"pos":[22142,22170],"content":"The interpolated quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interpolated quaternion.","pos":[0,28]}]},{"pos":[22740,22818],"content":"Returns the quaternion that results from multiplying two quaternions together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the quaternion that results from multiplying two quaternions together.","pos":[0,78]}]},{"pos":[23055,23076],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[23152,23174],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[23245,23268],"content":"The product quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The product quaternion.","pos":[0,23]}]},{"pos":[23804,23917],"content":"Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.","pos":[0,113]}]},{"pos":[24133,24155],"content":"The source quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source quaternion.","pos":[0,22]}]},{"pos":[24218,24235],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[24306,24328],"content":"The scaled quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled quaternion.","pos":[0,22]}]},{"pos":[24805,24859],"content":"Reverses the sign of each component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reverses the sign of each component of the quaternion.","pos":[0,54]}]},{"pos":[25057,25082],"content":"The quaternion to negate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The quaternion to negate.","pos":[0,25]}]},{"pos":[25153,25176],"content":"The negated quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The negated quaternion.","pos":[0,23]}]},{"pos":[25666,25766],"content":"Divides each component of a specified <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Quaternion\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by its length.","needQuote":true,"needEscape":true,"source":"Divides each component of a specified <xref href=\"System.Numerics.Quaternion\"></xref> by its length."},{"pos":[25967,25995],"content":"The quaternion to normalize.","needQuote":true,"needEscape":true,"nodes":[{"content":"The quaternion to normalize.","pos":[0,28]}]},{"pos":[26066,26092],"content":"The normalized quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normalized quaternion.","pos":[0,26]}]},{"pos":[26684,26774],"content":"Adds each element in one quaternion with its corresponding element in a second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds each element in one quaternion with its corresponding element in a second quaternion.","pos":[0,90]}]},{"pos":[26786,26898],"content":"The Addition method defines the operaton of the addition operator for <xref:System.Numerics.Quaternion> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Addition method defines the operaton of the addition operator for &lt;xref:System.Numerics.Quaternion&gt; objects.","pos":[0,112],"source":"The Addition method defines the operaton of the addition operator for <xref:System.Numerics.Quaternion> objects."}]},{"pos":[27138,27159],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[27235,27257],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[27328,27422],"content":"The quaternion that contains the summed values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The quaternion that contains the summed values of <code>value1</code> and <code>value2</code>."},{"pos":[28016,28062],"content":"Divides one quaternion by a second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides one quaternion by a second quaternion.","pos":[0,46]}]},{"pos":[28074,28171],"content":"The Division method defines the division operation for <xref:System.Numerics.Quaternion> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Division method defines the division operation for &lt;xref:System.Numerics.Quaternion&gt; objects.","pos":[0,97],"source":"The Division method defines the division operation for <xref:System.Numerics.Quaternion> objects."}]},{"pos":[28411,28424],"content":"The dividend.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dividend.","pos":[0,13]}]},{"pos":[28500,28512],"content":"The divisor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The divisor.","pos":[0,12]}]},{"pos":[28583,28668],"content":"The quaternion that results from dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value1</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The quaternion that results from dividing <code>value1</code> by <code>value2</code>."},{"pos":[29262,29327],"content":"Returns a value that indicates whether two quaternions are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether two quaternions are equal.","pos":[0,65]}]},{"pos":[29340,29539],"content":"Two quaternions are equal if each of their corresponding components is equal.       The Equality method defines the operation of the equality operator for <xref:System.Numerics.Quaternion> objects.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Two quaternions are equal if each of their corresponding components is equal.       The Equality method defines the operation of the equality operator for <xref:System.Numerics.Quaternion> objects.","pos":[0,197],"nodes":[{"content":"Two quaternions are equal if each of their corresponding components is equal.","pos":[0,77]},{"content":"The Equality method defines the operation of the equality operator for &lt;xref:System.Numerics.Quaternion&gt; objects.","pos":[84,197],"source":"       The Equality method defines the operation of the equality operator for <xref:System.Numerics.Quaternion> objects."}]}]},{"pos":[29758,29790],"content":"The first quaternion to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion to compare.","pos":[0,32]}]},{"pos":[29866,29899],"content":"The second quaternion to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion to compare.","pos":[0,33]}]},{"pos":[29958,30127],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two quaternions are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two quaternions are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[30731,30800],"content":"Returns a value that indicates whether two quaternions are not equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether two quaternions are not equal.","pos":[0,69]}]},{"pos":[31020,31052],"content":"The first quaternion to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion to compare.","pos":[0,32]}]},{"pos":[31128,31161],"content":"The second quaternion to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion to compare.","pos":[0,33]}]},{"pos":[31220,31417],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value1</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">value2</ph><ept id=\"p3\">&lt;/code&gt;</ept> are not equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value1</code> and <code>value2</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[32013,32091],"content":"Returns the quaternion that results from multiplying two quaternions together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the quaternion that results from multiplying two quaternions together.","pos":[0,78]}]},{"pos":[32103,32222],"content":"The Multiply method defines the operation of the multiplication operator for <xref:System.Numerics.Quaternion> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Multiply method defines the operation of the multiplication operator for &lt;xref:System.Numerics.Quaternion&gt; objects.","pos":[0,119],"source":"The Multiply method defines the operation of the multiplication operator for <xref:System.Numerics.Quaternion> objects."}]},{"pos":[32462,32483],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[32559,32581],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[32652,32675],"content":"The product quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The product quaternion.","pos":[0,23]}]},{"pos":[33231,33344],"content":"Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.","pos":[0,113]}]},{"pos":[33356,33475],"content":"The Multiply method defines the operation of the multiplication operator for <xref:System.Numerics.Quaternion> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Multiply method defines the operation of the multiplication operator for &lt;xref:System.Numerics.Quaternion&gt; objects.","pos":[0,119],"source":"The Multiply method defines the operation of the multiplication operator for <xref:System.Numerics.Quaternion> objects."}]},{"pos":[33694,33716],"content":"The source quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source quaternion.","pos":[0,22]}]},{"pos":[33779,33796],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[33867,33889],"content":"The scaled quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled quaternion.","pos":[0,22]}]},{"pos":[34498,34597],"content":"Subtracts each element in a second quaternion from its corresponding element in a first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts each element in a second quaternion from its corresponding element in a first quaternion.","pos":[0,99]}]},{"pos":[34609,34728],"content":"The Subtraction method defines the operation of the subtraction operator for <xref:System.Numerics.Quaternion> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Subtraction method defines the operation of the subtraction operator for &lt;xref:System.Numerics.Quaternion&gt; objects.","pos":[0,119],"source":"The Subtraction method defines the operation of the subtraction operator for <xref:System.Numerics.Quaternion> objects."}]},{"pos":[34971,34992],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[35068,35090],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[35161,35317],"content":"The quaternion containing the values that result from subtracting each element in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value2</ph><ept id=\"p1\">&lt;/code&gt;</ept> from its corresponding element in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value1</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The quaternion containing the values that result from subtracting each element in <code>value2</code> from its corresponding element in <code>value1</code>."},{"pos":[35852,35906],"content":"Reverses the sign of each component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reverses the sign of each component of the quaternion.","pos":[0,54]}]},{"pos":[35918,36042],"content":"The UnaryNegation method defines the operation of the unary negation operator for <xref:System.Numerics.Quaternion> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The UnaryNegation method defines the operation of the unary negation operator for &lt;xref:System.Numerics.Quaternion&gt; objects.","pos":[0,124],"source":"The UnaryNegation method defines the operation of the unary negation operator for <xref:System.Numerics.Quaternion> objects."}]},{"pos":[36250,36275],"content":"The quaternion to negate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The quaternion to negate.","pos":[0,25]}]},{"pos":[36346,36369],"content":"The negated quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The negated quaternion.","pos":[0,23]}]},{"pos":[36985,37060],"content":"Interpolates between two quaternions, using spherical linear interpolation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Interpolates between two quaternions, using spherical linear interpolation.","pos":[0,75]}]},{"pos":[37323,37344],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[37425,37447],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[37510,37576],"content":"The relative weight of the second quaternion in the interpolation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The relative weight of the second quaternion in the interpolation.","pos":[0,66]}]},{"pos":[37647,37675],"content":"The interpolated quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interpolated quaternion.","pos":[0,28]}]},{"pos":[38246,38345],"content":"Subtracts each element in a second quaternion from its corresponding element in a first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts each element in a second quaternion from its corresponding element in a first quaternion.","pos":[0,99]}]},{"pos":[38582,38603],"content":"The first quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first quaternion.","pos":[0,21]}]},{"pos":[38679,38701],"content":"The second quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second quaternion.","pos":[0,22]}]},{"pos":[38772,38928],"content":"The quaternion containing the values that result from subtracting each element in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value2</ph><ept id=\"p1\">&lt;/code&gt;</ept> from its corresponding element in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value1</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The quaternion containing the values that result from subtracting each element in <code>value2</code> from its corresponding element in <code>value1</code>."},{"pos":[39329,39378],"content":"Returns a string that represents this quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that represents this quaternion.","pos":[0,49]}]},{"pos":[39390,39595],"content":"The numeric values in the returned string are formatted by using the conventions of the current culture. For example, for the en-US culture, the returned string might appear as `{X:1.1 Y:2.2 Z:3.3 W:4.4}`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The numeric values in the returned string are formatted by using the conventions of the current culture.","pos":[0,104]},{"content":"For example, for the en-US culture, the returned string might appear as <ph id=\"ph1\">`{X:1.1 Y:2.2 Z:3.3 W:4.4}`</ph>.","pos":[105,205],"source":" For example, for the en-US culture, the returned string might appear as `{X:1.1 Y:2.2 Z:3.3 W:4.4}`."}]},{"pos":[39731,39776],"content":"The string representation of this quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of this quaternion.","pos":[0,45]}]},{"pos":[40135,40176],"content":"The rotation component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rotation component of the quaternion.","pos":[0,41]}]},{"pos":[40273,40285],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[40595,40649],"content":"The X value of the vector component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X value of the vector component of the quaternion.","pos":[0,54]}]},{"pos":[40746,40758],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41068,41122],"content":"The Y value of the vector component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Y value of the vector component of the quaternion.","pos":[0,54]}]},{"pos":[41219,41231],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41541,41595],"content":"The Z value of the vector component of the quaternion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Z value of the vector component of the quaternion.","pos":[0,54]}]},{"pos":[41692,41704],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Numerics.Quaternion\n  id: Quaternion\n  children:\n  - System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)\n  - System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)\n  - System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  - System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)\n  - System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Equals(System.Object)\n  - System.Numerics.Quaternion.GetHashCode\n  - System.Numerics.Quaternion.Identity\n  - System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.IsIdentity\n  - System.Numerics.Quaternion.Length\n  - System.Numerics.Quaternion.LengthSquared\n  - System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  - System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)\n  - System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)\n  - System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  - System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  - System.Numerics.Quaternion.ToString\n  - System.Numerics.Quaternion.W\n  - System.Numerics.Quaternion.X\n  - System.Numerics.Quaternion.Y\n  - System.Numerics.Quaternion.Z\n  langs:\n  - csharp\n  name: Quaternion\n  nameWithType: Quaternion\n  fullName: System.Numerics.Quaternion\n  type: Struct\n  summary: Represents a vector that is used to encode three-dimensional physical rotations.\n  remarks: \"The Quaternion structure is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where:  \\n  \\n```  \\nw = cos(theta/2)  \\n```\"\n  syntax:\n    content: 'public struct Quaternion : IEquatable<System.Numerics.Quaternion>'\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Numerics.Quaternion>\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)\n  id: '#ctor(System.Numerics.Vector3,System.Single)'\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Quaternion(Vector3,Single)\n  nameWithType: Quaternion.Quaternion(Vector3,Single)\n  fullName: System.Numerics.Quaternion.Quaternion(Vector3,Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a quaternion from the specified vector and rotation parts.\n  syntax:\n    content: public Quaternion (System.Numerics.Vector3 vectorPart, float scalarPart);\n    parameters:\n    - id: vectorPart\n      type: System.Numerics.Vector3\n      description: The vector part of the quaternion.\n    - id: scalarPart\n      type: System.Single\n      description: The rotation part of the quaternion.\n  overload: System.Numerics.Quaternion.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Quaternion(Single,Single,Single,Single)\n  nameWithType: Quaternion.Quaternion(Single,Single,Single,Single)\n  fullName: System.Numerics.Quaternion.Quaternion(Single,Single,Single,Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Constructs a quaternion from the specified components.\n  syntax:\n    content: public Quaternion (float x, float y, float z, float w);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The value to assign to the X component of the quaternion.\n    - id: y\n      type: System.Single\n      description: The value to assign to the Y component of the quaternion.\n    - id: z\n      type: System.Single\n      description: The value to assign to the Z component of the quaternion.\n    - id: w\n      type: System.Single\n      description: The value to assign to the W component of the quaternion.\n  overload: System.Numerics.Quaternion.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Add(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Add(Quaternion,Quaternion)\n  nameWithType: Quaternion.Add(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Add(Quaternion,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Adds each element in one quaternion with its corresponding element in a second quaternion.\n  syntax:\n    content: public static System.Numerics.Quaternion Add (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    return:\n      type: System.Numerics.Quaternion\n      description: The quaternion that contains the summed values of <code>value1</code> and <code>value2</code>.\n  overload: System.Numerics.Quaternion.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Concatenate(Quaternion,Quaternion)\n  nameWithType: Quaternion.Concatenate(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Concatenate(Quaternion,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Concatenates two quaternions.\n  syntax:\n    content: public static System.Numerics.Quaternion Concatenate (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion rotation in the series.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion rotation in the series.\n    return:\n      type: System.Numerics.Quaternion\n      description: A new quaternion representing the concatenation of the <code>value1</code> rotation followed by the <code>value2</code> rotation.\n  overload: System.Numerics.Quaternion.Concatenate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)\n  id: Conjugate(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Conjugate(Quaternion)\n  nameWithType: Quaternion.Conjugate(Quaternion)\n  fullName: System.Numerics.Quaternion.Conjugate(Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the conjugate of a specified quaternion.\n  syntax:\n    content: public static System.Numerics.Quaternion Conjugate (System.Numerics.Quaternion value);\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: The quaternion.\n    return:\n      type: System.Numerics.Quaternion\n      description: A new quaternion that is the conjugate of <xref uid=\"langword_csharp_value\" name=\"value\" href=\"\"></xref>.\n  overload: System.Numerics.Quaternion.Conjugate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)\n  id: CreateFromAxisAngle(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: CreateFromAxisAngle(Vector3,Single)\n  nameWithType: Quaternion.CreateFromAxisAngle(Vector3,Single)\n  fullName: System.Numerics.Quaternion.CreateFromAxisAngle(Vector3,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a quaternion from a vector and an angle to rotate about the vector.\n  syntax:\n    content: public static System.Numerics.Quaternion CreateFromAxisAngle (System.Numerics.Vector3 axis, float angle);\n    parameters:\n    - id: axis\n      type: System.Numerics.Vector3\n      description: The vector to rotate around.\n    - id: angle\n      type: System.Single\n      description: The angle, in radians, to rotate around the vector.\n    return:\n      type: System.Numerics.Quaternion\n      description: The newly created quaternion.\n  overload: System.Numerics.Quaternion.CreateFromAxisAngle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  id: CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: CreateFromRotationMatrix(Matrix4x4)\n  nameWithType: Quaternion.CreateFromRotationMatrix(Matrix4x4)\n  fullName: System.Numerics.Quaternion.CreateFromRotationMatrix(Matrix4x4)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a quaternion from the specified rotation matrix.\n  syntax:\n    content: public static System.Numerics.Quaternion CreateFromRotationMatrix (System.Numerics.Matrix4x4 matrix);\n    parameters:\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: The rotation matrix.\n    return:\n      type: System.Numerics.Quaternion\n      description: The newly created quaternion.\n  overload: System.Numerics.Quaternion.CreateFromRotationMatrix*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)\n  id: CreateFromYawPitchRoll(System.Single,System.Single,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: CreateFromYawPitchRoll(Single,Single,Single)\n  nameWithType: Quaternion.CreateFromYawPitchRoll(Single,Single,Single)\n  fullName: System.Numerics.Quaternion.CreateFromYawPitchRoll(Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a new quaternion from the given yaw, pitch, and roll.\n  syntax:\n    content: public static System.Numerics.Quaternion CreateFromYawPitchRoll (float yaw, float pitch, float roll);\n    parameters:\n    - id: yaw\n      type: System.Single\n      description: The yaw angle, in radians, around the Y axis.\n    - id: pitch\n      type: System.Single\n      description: The pitch angle, in radians, around the X axis.\n    - id: roll\n      type: System.Single\n      description: The roll angle, in radians, around the Z axis.\n    return:\n      type: System.Numerics.Quaternion\n      description: The resulting quaternion.\n  overload: System.Numerics.Quaternion.CreateFromYawPitchRoll*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Divide(Quaternion,Quaternion)\n  nameWithType: Quaternion.Divide(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Divide(Quaternion,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides one quaternion by a second quaternion.\n  syntax:\n    content: public static System.Numerics.Quaternion Divide (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The dividend.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The divisor.\n    return:\n      type: System.Numerics.Quaternion\n      description: The quaternion that results from dividing <code>value1</code> by <code>value2</code>.\n  overload: System.Numerics.Quaternion.Divide*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Dot(Quaternion,Quaternion)\n  nameWithType: Quaternion.Dot(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Dot(Quaternion,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Calculates the dot product of two quaternions.\n  syntax:\n    content: public static float Dot (System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2);\n    parameters:\n    - id: quaternion1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: quaternion2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    return:\n      type: System.Single\n      description: The dot product.\n  overload: System.Numerics.Quaternion.Dot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)\n  id: Equals(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Equals(Quaternion)\n  nameWithType: Quaternion.Equals(Quaternion)\n  fullName: System.Numerics.Quaternion.Equals(Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether this instance and another quaternion are equal.\n  remarks: Two quaternions are equal if each of their corresponding components is equal.\n  syntax:\n    content: public bool Equals (System.Numerics.Quaternion other);\n    parameters:\n    - id: other\n      type: System.Numerics.Quaternion\n      description: The other quaternion.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two quaternions are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Quaternion.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Quaternion.Equals(Object)\n  fullName: System.Numerics.Quaternion.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether this instance and a specified object are equal.\n  remarks: The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Quaternion> object and the corresponding components of each matrix are equal.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare with the current instance.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>. If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Quaternion.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Quaternion.GetHashCode()\n  fullName: System.Numerics.Quaternion.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code.\n  overload: System.Numerics.Quaternion.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Identity\n  id: Identity\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Identity\n  nameWithType: Quaternion.Identity\n  fullName: System.Numerics.Quaternion.Identity\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets a quaternion that represents no rotation.\n  syntax:\n    content: public static System.Numerics.Quaternion Identity { get; }\n    return:\n      type: System.Numerics.Quaternion\n      description: A quaternion whose values are `(0, 0, 0, 1)`.\n  overload: System.Numerics.Quaternion.Identity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)\n  id: Inverse(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Inverse(Quaternion)\n  nameWithType: Quaternion.Inverse(Quaternion)\n  fullName: System.Numerics.Quaternion.Inverse(Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the inverse of a quaternion.\n  syntax:\n    content: public static System.Numerics.Quaternion Inverse (System.Numerics.Quaternion value);\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: The quaternion.\n    return:\n      type: System.Numerics.Quaternion\n      description: The inverted quaternion.\n  overload: System.Numerics.Quaternion.Inverse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.IsIdentity\n  id: IsIdentity\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: IsIdentity\n  nameWithType: Quaternion.IsIdentity\n  fullName: System.Numerics.Quaternion.IsIdentity\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets a value that indicates whether the current instance is the identity quaternion.\n  syntax:\n    content: public bool IsIdentity { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance is the identity quaternion; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Quaternion.IsIdentity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Length\n  id: Length\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Length()\n  nameWithType: Quaternion.Length()\n  fullName: System.Numerics.Quaternion.Length()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Calculates the length of the quaternion.\n  syntax:\n    content: public float Length ();\n    parameters: []\n    return:\n      type: System.Single\n      description: The computed length of the quaternion.\n  overload: System.Numerics.Quaternion.Length*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.LengthSquared\n  id: LengthSquared\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: LengthSquared()\n  nameWithType: Quaternion.LengthSquared()\n  fullName: System.Numerics.Quaternion.LengthSquared()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Calculates the squared length of the quaternion.\n  syntax:\n    content: public float LengthSquared ();\n    parameters: []\n    return:\n      type: System.Single\n      description: The length squared of the quaternion.\n  overload: System.Numerics.Quaternion.LengthSquared*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  id: Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Lerp(Quaternion,Quaternion,Single)\n  nameWithType: Quaternion.Lerp(Quaternion,Quaternion,Single)\n  fullName: System.Numerics.Quaternion.Lerp(Quaternion,Quaternion,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Performs a linear interpolation between two quaternions based on a value that specifies the weighting of the second quaternion.\n  syntax:\n    content: public static System.Numerics.Quaternion Lerp (System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2, float amount);\n    parameters:\n    - id: quaternion1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: quaternion2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    - id: amount\n      type: System.Single\n      description: The relative weight of `quaternion2` in the interpolation.\n    return:\n      type: System.Numerics.Quaternion\n      description: The interpolated quaternion.\n  overload: System.Numerics.Quaternion.Lerp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Multiply(Quaternion,Quaternion)\n  nameWithType: Quaternion.Multiply(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Multiply(Quaternion,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the quaternion that results from multiplying two quaternions together.\n  syntax:\n    content: public static System.Numerics.Quaternion Multiply (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    return:\n      type: System.Numerics.Quaternion\n      description: The product quaternion.\n  overload: System.Numerics.Quaternion.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)\n  id: Multiply(System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Multiply(Quaternion,Single)\n  nameWithType: Quaternion.Multiply(Quaternion,Single)\n  fullName: System.Numerics.Quaternion.Multiply(Quaternion,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.\n  syntax:\n    content: public static System.Numerics.Quaternion Multiply (System.Numerics.Quaternion value1, float value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The source quaternion.\n    - id: value2\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Quaternion\n      description: The scaled quaternion.\n  overload: System.Numerics.Quaternion.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)\n  id: Negate(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Negate(Quaternion)\n  nameWithType: Quaternion.Negate(Quaternion)\n  fullName: System.Numerics.Quaternion.Negate(Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Reverses the sign of each component of the quaternion.\n  syntax:\n    content: public static System.Numerics.Quaternion Negate (System.Numerics.Quaternion value);\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: The quaternion to negate.\n    return:\n      type: System.Numerics.Quaternion\n      description: The negated quaternion.\n  overload: System.Numerics.Quaternion.Negate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)\n  id: Normalize(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Normalize(Quaternion)\n  nameWithType: Quaternion.Normalize(Quaternion)\n  fullName: System.Numerics.Quaternion.Normalize(Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides each component of a specified <xref href=\"System.Numerics.Quaternion\"></xref> by its length.\n  syntax:\n    content: public static System.Numerics.Quaternion Normalize (System.Numerics.Quaternion value);\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: The quaternion to normalize.\n    return:\n      type: System.Numerics.Quaternion\n      description: The normalized quaternion.\n  overload: System.Numerics.Quaternion.Normalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: op_Addition(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Addition(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Addition(Quaternion,Quaternion)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Adds each element in one quaternion with its corresponding element in a second quaternion.\n  remarks: The Addition method defines the operaton of the addition operator for <xref:System.Numerics.Quaternion> objects.\n  syntax:\n    content: public static System.Numerics.Quaternion op_Addition (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    return:\n      type: System.Numerics.Quaternion\n      description: The quaternion that contains the summed values of <code>value1</code> and <code>value2</code>.\n  overload: System.Numerics.Quaternion.op_Addition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: op_Division(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Division(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Division(Quaternion,Quaternion)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides one quaternion by a second quaternion.\n  remarks: The Division method defines the division operation for <xref:System.Numerics.Quaternion> objects.\n  syntax:\n    content: public static System.Numerics.Quaternion op_Division (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The dividend.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The divisor.\n    return:\n      type: System.Numerics.Quaternion\n      description: The quaternion that results from dividing <code>value1</code> by <code>value2</code>.\n  overload: System.Numerics.Quaternion.op_Division*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: op_Equality(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Equality(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Equality(Quaternion,Quaternion)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether two quaternions are equal.\n  remarks: \"Two quaternions are equal if each of their corresponding components is equal.  \\n  \\n The Equality method defines the operation of the equality operator for <xref:System.Numerics.Quaternion> objects.\"\n  syntax:\n    content: public static bool op_Equality (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion to compare.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two quaternions are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Quaternion.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: op_Inequality(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Inequality(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Inequality(Quaternion,Quaternion)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether two quaternions are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion to compare.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value1</code> and <code>value2</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Quaternion.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: op_Multiply(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Multiply(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Multiply(Quaternion,Quaternion)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the quaternion that results from multiplying two quaternions together.\n  remarks: The Multiply method defines the operation of the multiplication operator for <xref:System.Numerics.Quaternion> objects.\n  syntax:\n    content: public static System.Numerics.Quaternion op_Multiply (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    return:\n      type: System.Numerics.Quaternion\n      description: The product quaternion.\n  overload: System.Numerics.Quaternion.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)\n  id: op_Multiply(System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: op_Multiply(Quaternion,Single)\n  nameWithType: Quaternion.op_Multiply(Quaternion,Single)\n  fullName: System.Numerics.Quaternion.op_Multiply(Quaternion,Single)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.\n  remarks: The Multiply method defines the operation of the multiplication operator for <xref:System.Numerics.Quaternion> objects.\n  syntax:\n    content: public static System.Numerics.Quaternion op_Multiply (System.Numerics.Quaternion value1, float value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The source quaternion.\n    - id: value2\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Quaternion\n      description: The scaled quaternion.\n  overload: System.Numerics.Quaternion.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: op_Subtraction(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Subtraction(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Subtraction(Quaternion,Quaternion)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Subtracts each element in a second quaternion from its corresponding element in a first quaternion.\n  remarks: The Subtraction method defines the operation of the subtraction operator for <xref:System.Numerics.Quaternion> objects.\n  syntax:\n    content: public static System.Numerics.Quaternion op_Subtraction (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    return:\n      type: System.Numerics.Quaternion\n      description: The quaternion containing the values that result from subtracting each element in <code>value2</code> from its corresponding element in <code>value1</code>.\n  overload: System.Numerics.Quaternion.op_Subtraction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)\n  id: op_UnaryNegation(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: op_UnaryNegation(Quaternion)\n  nameWithType: Quaternion.op_UnaryNegation(Quaternion)\n  fullName: System.Numerics.Quaternion.op_UnaryNegation(Quaternion)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Reverses the sign of each component of the quaternion.\n  remarks: The UnaryNegation method defines the operation of the unary negation operator for <xref:System.Numerics.Quaternion> objects.\n  syntax:\n    content: public static System.Numerics.Quaternion op_UnaryNegation (System.Numerics.Quaternion value);\n    parameters:\n    - id: value\n      type: System.Numerics.Quaternion\n      description: The quaternion to negate.\n    return:\n      type: System.Numerics.Quaternion\n      description: The negated quaternion.\n  overload: System.Numerics.Quaternion.op_UnaryNegation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  id: Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Slerp(Quaternion,Quaternion,Single)\n  nameWithType: Quaternion.Slerp(Quaternion,Quaternion,Single)\n  fullName: System.Numerics.Quaternion.Slerp(Quaternion,Quaternion,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Interpolates between two quaternions, using spherical linear interpolation.\n  syntax:\n    content: public static System.Numerics.Quaternion Slerp (System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2, float amount);\n    parameters:\n    - id: quaternion1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: quaternion2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    - id: amount\n      type: System.Single\n      description: The relative weight of the second quaternion in the interpolation.\n    return:\n      type: System.Numerics.Quaternion\n      description: The interpolated quaternion.\n  overload: System.Numerics.Quaternion.Slerp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  id: Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Subtract(Quaternion,Quaternion)\n  nameWithType: Quaternion.Subtract(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Subtract(Quaternion,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Subtracts each element in a second quaternion from its corresponding element in a first quaternion.\n  syntax:\n    content: public static System.Numerics.Quaternion Subtract (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Quaternion\n      description: The first quaternion.\n    - id: value2\n      type: System.Numerics.Quaternion\n      description: The second quaternion.\n    return:\n      type: System.Numerics.Quaternion\n      description: The quaternion containing the values that result from subtracting each element in <code>value2</code> from its corresponding element in <code>value1</code>.\n  overload: System.Numerics.Quaternion.Subtract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.ToString\n  id: ToString\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Quaternion.ToString()\n  fullName: System.Numerics.Quaternion.ToString()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a string that represents this quaternion.\n  remarks: The numeric values in the returned string are formatted by using the conventions of the current culture. For example, for the en-US culture, the returned string might appear as `{X:1.1 Y:2.2 Z:3.3 W:4.4}`.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The string representation of this quaternion.\n  overload: System.Numerics.Quaternion.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.W\n  id: W\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: W\n  nameWithType: Quaternion.W\n  fullName: System.Numerics.Quaternion.W\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The rotation component of the quaternion.\n  syntax:\n    content: public float W;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.X\n  id: X\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: X\n  nameWithType: Quaternion.X\n  fullName: System.Numerics.Quaternion.X\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The X value of the vector component of the quaternion.\n  syntax:\n    content: public float X;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Y\n  id: Y\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Y\n  nameWithType: Quaternion.Y\n  fullName: System.Numerics.Quaternion.Y\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The Y value of the vector component of the quaternion.\n  syntax:\n    content: public float Y;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Quaternion.Z\n  id: Z\n  parent: System.Numerics.Quaternion\n  langs:\n  - csharp\n  name: Z\n  nameWithType: Quaternion.Z\n  fullName: System.Numerics.Quaternion.Z\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The Z value of the vector component of the quaternion.\n  syntax:\n    content: public float Z;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Quaternion(Vector3,Single)\n  nameWithType: Quaternion.Quaternion(Vector3,Single)\n  fullName: System.Numerics.Quaternion.Quaternion(Vector3,Single)\n- uid: System.Numerics.Vector3\n  parent: System.Numerics\n  isExternal: false\n  name: Vector3\n  nameWithType: Vector3\n  fullName: System.Numerics.Vector3\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Quaternion(Single,Single,Single,Single)\n  nameWithType: Quaternion.Quaternion(Single,Single,Single,Single)\n  fullName: System.Numerics.Quaternion.Quaternion(Single,Single,Single,Single)\n- uid: System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Add(Quaternion,Quaternion)\n  nameWithType: Quaternion.Add(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Add(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion\n  parent: System.Numerics\n  isExternal: false\n  name: Quaternion\n  nameWithType: Quaternion\n  fullName: System.Numerics.Quaternion\n- uid: System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Concatenate(Quaternion,Quaternion)\n  nameWithType: Quaternion.Concatenate(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Concatenate(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Conjugate(Quaternion)\n  nameWithType: Quaternion.Conjugate(Quaternion)\n  fullName: System.Numerics.Quaternion.Conjugate(Quaternion)\n- uid: System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: CreateFromAxisAngle(Vector3,Single)\n  nameWithType: Quaternion.CreateFromAxisAngle(Vector3,Single)\n  fullName: System.Numerics.Quaternion.CreateFromAxisAngle(Vector3,Single)\n- uid: System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: CreateFromRotationMatrix(Matrix4x4)\n  nameWithType: Quaternion.CreateFromRotationMatrix(Matrix4x4)\n  fullName: System.Numerics.Quaternion.CreateFromRotationMatrix(Matrix4x4)\n- uid: System.Numerics.Matrix4x4\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix4x4\n  nameWithType: Matrix4x4\n  fullName: System.Numerics.Matrix4x4\n- uid: System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: CreateFromYawPitchRoll(Single,Single,Single)\n  nameWithType: Quaternion.CreateFromYawPitchRoll(Single,Single,Single)\n  fullName: System.Numerics.Quaternion.CreateFromYawPitchRoll(Single,Single,Single)\n- uid: System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Divide(Quaternion,Quaternion)\n  nameWithType: Quaternion.Divide(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Divide(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Dot(Quaternion,Quaternion)\n  nameWithType: Quaternion.Dot(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Dot(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Equals(Quaternion)\n  nameWithType: Quaternion.Equals(Quaternion)\n  fullName: System.Numerics.Quaternion.Equals(Quaternion)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Numerics.Quaternion.Equals(System.Object)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Quaternion.Equals(Object)\n  fullName: System.Numerics.Quaternion.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Numerics.Quaternion.GetHashCode\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Quaternion.GetHashCode()\n  fullName: System.Numerics.Quaternion.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Numerics.Quaternion.Identity\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Identity\n  nameWithType: Quaternion.Identity\n  fullName: System.Numerics.Quaternion.Identity\n- uid: System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Inverse(Quaternion)\n  nameWithType: Quaternion.Inverse(Quaternion)\n  fullName: System.Numerics.Quaternion.Inverse(Quaternion)\n- uid: System.Numerics.Quaternion.IsIdentity\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: IsIdentity\n  nameWithType: Quaternion.IsIdentity\n  fullName: System.Numerics.Quaternion.IsIdentity\n- uid: System.Numerics.Quaternion.Length\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Length()\n  nameWithType: Quaternion.Length()\n  fullName: System.Numerics.Quaternion.Length()\n- uid: System.Numerics.Quaternion.LengthSquared\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: LengthSquared()\n  nameWithType: Quaternion.LengthSquared()\n  fullName: System.Numerics.Quaternion.LengthSquared()\n- uid: System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Lerp(Quaternion,Quaternion,Single)\n  nameWithType: Quaternion.Lerp(Quaternion,Quaternion,Single)\n  fullName: System.Numerics.Quaternion.Lerp(Quaternion,Quaternion,Single)\n- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Multiply(Quaternion,Quaternion)\n  nameWithType: Quaternion.Multiply(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Multiply(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Multiply(Quaternion,Single)\n  nameWithType: Quaternion.Multiply(Quaternion,Single)\n  fullName: System.Numerics.Quaternion.Multiply(Quaternion,Single)\n- uid: System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Negate(Quaternion)\n  nameWithType: Quaternion.Negate(Quaternion)\n  fullName: System.Numerics.Quaternion.Negate(Quaternion)\n- uid: System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Normalize(Quaternion)\n  nameWithType: Quaternion.Normalize(Quaternion)\n  fullName: System.Numerics.Quaternion.Normalize(Quaternion)\n- uid: System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Addition(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Addition(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Addition(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Division(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Division(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Division(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Equality(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Equality(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Equality(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Inequality(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Inequality(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Inequality(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Multiply(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Multiply(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Multiply(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Multiply(Quaternion,Single)\n  nameWithType: Quaternion.op_Multiply(Quaternion,Single)\n  fullName: System.Numerics.Quaternion.op_Multiply(Quaternion,Single)\n- uid: System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Subtraction(Quaternion,Quaternion)\n  nameWithType: Quaternion.op_Subtraction(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.op_Subtraction(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_UnaryNegation(Quaternion)\n  nameWithType: Quaternion.op_UnaryNegation(Quaternion)\n  fullName: System.Numerics.Quaternion.op_UnaryNegation(Quaternion)\n- uid: System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Slerp(Quaternion,Quaternion,Single)\n  nameWithType: Quaternion.Slerp(Quaternion,Quaternion,Single)\n  fullName: System.Numerics.Quaternion.Slerp(Quaternion,Quaternion,Single)\n- uid: System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Subtract(Quaternion,Quaternion)\n  nameWithType: Quaternion.Subtract(Quaternion,Quaternion)\n  fullName: System.Numerics.Quaternion.Subtract(Quaternion,Quaternion)\n- uid: System.Numerics.Quaternion.ToString\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: ToString()\n  nameWithType: Quaternion.ToString()\n  fullName: System.Numerics.Quaternion.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Numerics.Quaternion.W\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: W\n  nameWithType: Quaternion.W\n  fullName: System.Numerics.Quaternion.W\n- uid: System.Numerics.Quaternion.X\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: X\n  nameWithType: Quaternion.X\n  fullName: System.Numerics.Quaternion.X\n- uid: System.Numerics.Quaternion.Y\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Y\n  nameWithType: Quaternion.Y\n  fullName: System.Numerics.Quaternion.Y\n- uid: System.Numerics.Quaternion.Z\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Z\n  nameWithType: Quaternion.Z\n  fullName: System.Numerics.Quaternion.Z\n- uid: System.Numerics.Quaternion.#ctor*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Quaternion\n  nameWithType: Quaternion.Quaternion\n- uid: System.Numerics.Quaternion.Add*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Add\n  nameWithType: Quaternion.Add\n- uid: System.Numerics.Quaternion.Concatenate*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Concatenate\n  nameWithType: Quaternion.Concatenate\n- uid: System.Numerics.Quaternion.Conjugate*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Conjugate\n  nameWithType: Quaternion.Conjugate\n- uid: System.Numerics.Quaternion.CreateFromAxisAngle*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: CreateFromAxisAngle\n  nameWithType: Quaternion.CreateFromAxisAngle\n- uid: System.Numerics.Quaternion.CreateFromRotationMatrix*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: CreateFromRotationMatrix\n  nameWithType: Quaternion.CreateFromRotationMatrix\n- uid: System.Numerics.Quaternion.CreateFromYawPitchRoll*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: CreateFromYawPitchRoll\n  nameWithType: Quaternion.CreateFromYawPitchRoll\n- uid: System.Numerics.Quaternion.Divide*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Divide\n  nameWithType: Quaternion.Divide\n- uid: System.Numerics.Quaternion.Dot*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Dot\n  nameWithType: Quaternion.Dot\n- uid: System.Numerics.Quaternion.Equals*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Equals\n  nameWithType: Quaternion.Equals\n- uid: System.Numerics.Quaternion.GetHashCode*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Quaternion.GetHashCode\n- uid: System.Numerics.Quaternion.Identity*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Identity\n  nameWithType: Quaternion.Identity\n- uid: System.Numerics.Quaternion.Inverse*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Inverse\n  nameWithType: Quaternion.Inverse\n- uid: System.Numerics.Quaternion.IsIdentity*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: IsIdentity\n  nameWithType: Quaternion.IsIdentity\n- uid: System.Numerics.Quaternion.Length*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Length\n  nameWithType: Quaternion.Length\n- uid: System.Numerics.Quaternion.LengthSquared*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: LengthSquared\n  nameWithType: Quaternion.LengthSquared\n- uid: System.Numerics.Quaternion.Lerp*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Lerp\n  nameWithType: Quaternion.Lerp\n- uid: System.Numerics.Quaternion.Multiply*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Multiply\n  nameWithType: Quaternion.Multiply\n- uid: System.Numerics.Quaternion.Negate*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Negate\n  nameWithType: Quaternion.Negate\n- uid: System.Numerics.Quaternion.Normalize*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Normalize\n  nameWithType: Quaternion.Normalize\n- uid: System.Numerics.Quaternion.op_Addition*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Addition\n  nameWithType: Quaternion.op_Addition\n- uid: System.Numerics.Quaternion.op_Division*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Division\n  nameWithType: Quaternion.op_Division\n- uid: System.Numerics.Quaternion.op_Equality*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Equality\n  nameWithType: Quaternion.op_Equality\n- uid: System.Numerics.Quaternion.op_Inequality*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Quaternion.op_Inequality\n- uid: System.Numerics.Quaternion.op_Multiply*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Multiply\n  nameWithType: Quaternion.op_Multiply\n- uid: System.Numerics.Quaternion.op_Subtraction*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: Quaternion.op_Subtraction\n- uid: System.Numerics.Quaternion.op_UnaryNegation*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: op_UnaryNegation\n  nameWithType: Quaternion.op_UnaryNegation\n- uid: System.Numerics.Quaternion.Slerp*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Slerp\n  nameWithType: Quaternion.Slerp\n- uid: System.Numerics.Quaternion.Subtract*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: Subtract\n  nameWithType: Quaternion.Subtract\n- uid: System.Numerics.Quaternion.ToString*\n  parent: System.Numerics.Quaternion\n  isExternal: false\n  name: ToString\n  nameWithType: Quaternion.ToString\n"}