{"nodes":[{"pos":[407,448],"content":"Discovers available types at design time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Discovers available types at design time.","pos":[0,41]}]},{"pos":[460,634],"content":"The ITypeDiscoveryService is used to discover available types at design time, when a client of the service does not know the names of existing types or referenced assemblies.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ITypeDiscoveryService is used to discover available types at design time, when a client of the service does not know the names of existing types or referenced assemblies.","pos":[0,174]}]},{"pos":[1227,1265],"content":"Retrieves the list of available types.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the list of available types.","pos":[0,38]}]},{"pos":[1277,1700],"content":"If `baseType` is `null`, all types are returned. Otherwise, only types derived from the specified base type are returned. If `excludeGlobalTypes` is `false`, types from all referenced assemblies are checked. Otherwise, only types from non-Global Assembly Cache (GAC) referenced assemblies are checked. For more information, see [Working with Assemblies and the Global Assembly Cache](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`baseType`</ph> is <ph id=\"ph2\">`null`</ph>, all types are returned.","pos":[0,48],"source":"If `baseType` is `null`, all types are returned."},{"content":"Otherwise, only types derived from the specified base type are returned.","pos":[49,121]},{"content":"If <ph id=\"ph1\">`excludeGlobalTypes`</ph> is <ph id=\"ph2\">`false`</ph>, types from all referenced assemblies are checked.","pos":[122,207],"source":" If `excludeGlobalTypes` is `false`, types from all referenced assemblies are checked."},{"content":"Otherwise, only types from non-Global Assembly Cache (GAC) referenced assemblies are checked.","pos":[208,301]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Assemblies and the Global Assembly Cache<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[302,423],"source":" For more information, see [Working with Assemblies and the Global Assembly Cache](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[1891,1983],"content":"The base type to match. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The base type to match.","pos":[0,23]},{"content":"Can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,92],"source":" Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[2059,2132],"content":"Indicates whether types from all referenced assemblies should be checked.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether types from all referenced assemblies should be checked.","pos":[0,73]}]},{"pos":[2207,2324],"content":"A collection of types that match the criteria specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">baseType</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">excludeGlobalTypes</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A collection of types that match the criteria specified by <code>baseType</code> and <code>excludeGlobalTypes</code>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.ITypeDiscoveryService\n  id: ITypeDiscoveryService\n  children:\n  - System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)\n  langs:\n  - csharp\n  name: ITypeDiscoveryService\n  nameWithType: ITypeDiscoveryService\n  fullName: System.ComponentModel.Design.ITypeDiscoveryService\n  type: Interface\n  summary: Discovers available types at design time.\n  remarks: The ITypeDiscoveryService is used to discover available types at design time, when a client of the service does not know the names of existing types or referenced assemblies.\n  syntax:\n    content: public interface ITypeDiscoveryService\n  implements: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)\n  id: GetTypes(System.Type,System.Boolean)\n  parent: System.ComponentModel.Design.ITypeDiscoveryService\n  langs:\n  - csharp\n  name: GetTypes(Type,Boolean)\n  nameWithType: ITypeDiscoveryService.GetTypes(Type,Boolean)\n  fullName: System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(Type,Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Retrieves the list of available types.\n  remarks: If `baseType` is `null`, all types are returned. Otherwise, only types derived from the specified base type are returned. If `excludeGlobalTypes` is `false`, types from all referenced assemblies are checked. Otherwise, only types from non-Global Assembly Cache (GAC) referenced assemblies are checked. For more information, see [Working with Assemblies and the Global Assembly Cache](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public System.Collections.ICollection GetTypes (Type baseType, bool excludeGlobalTypes);\n    parameters:\n    - id: baseType\n      type: System.Type\n      description: The base type to match. Can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    - id: excludeGlobalTypes\n      type: System.Boolean\n      description: Indicates whether types from all referenced assemblies should be checked.\n    return:\n      type: System.Collections.ICollection\n      description: A collection of types that match the criteria specified by <code>baseType</code> and <code>excludeGlobalTypes</code>.\n  overload: System.ComponentModel.Design.ITypeDiscoveryService.GetTypes*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)\n  parent: System.ComponentModel.Design.ITypeDiscoveryService\n  isExternal: false\n  name: GetTypes(Type,Boolean)\n  nameWithType: ITypeDiscoveryService.GetTypes(Type,Boolean)\n  fullName: System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(Type,Boolean)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Design.ITypeDiscoveryService.GetTypes*\n  parent: System.ComponentModel.Design.ITypeDiscoveryService\n  isExternal: false\n  name: GetTypes\n  nameWithType: ITypeDiscoveryService.GetTypes\n"}