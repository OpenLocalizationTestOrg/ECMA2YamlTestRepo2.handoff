{"nodes":[{"pos":[1087,1212],"content":"Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.","pos":[0,125]}]},{"pos":[1225,5149],"content":"Transactions can track actions that can be undone later. Changes made during a transaction can be reversed by canceling a transaction, which automatically attempts to reverse each change by setting each changed property to its pre-change value. Transactions can also improve performance during a series of operations by deferring updates to the display until the completion of the transaction.       When a transaction is in progress, some components defer their processing until the transaction has completed by listening to the <xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening> and <xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed> events. The Properties window, for example, does not update its display after a transaction has opened until the transaction has closed.       To use transactions for reversible or multiple operations, have your designer create a DesignerTransaction for each operation or series of operations which should be reversible. Be careful not to perform actions outside the transactions that might prevent a sequence of undo events from completing successfully.       You can obtain a new DesignerTransaction by calling the <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A> method of an <xref:System.ComponentModel.Design.IDesignerHost>. Be sure to obtain each DesignerTransaction from the active <xref:System.ComponentModel.Design.IDesignerHost> in order to correctly integrate with the designer transaction processing mechanism, rather than creating a new DesignerTransaction directly.       To perform an action within a transaction, you must first create a transaction. Then you must call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> method before each change or set of changes occurs, and the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> method after each change or set of changes occur. Finally, complete and close the transaction by calling the <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A> method.      > [!NOTE] >  When making changes to property values, use the <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> method of a <xref:System.ComponentModel.PropertyDescriptor>, which calls the component change methods of the <xref:System.ComponentModel.Design.IComponentChangeService> and creates a DesignerTransaction representing the change automatically.       To perform a transaction, complete the following steps:      1.  Call <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A> to obtain a DesignerTransaction that can be used to control the transaction.      2.  Within a `try` block, for each action that you want to track with a DesignerTransaction, call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> method, make the change or changes, then call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> method to signal that the change or changes have been made.      3.  To complete the transaction, call <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A> from within a `finally` block.       In C#, you can use the `using` statement rather than a `try/finally` block, such as in the following example.      ```   using (host.CreateTransaction() {   // Insert your code here.   }   ```       To cancel and attempt to roll back a transaction before it has been committed, call the <xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A> method. When the <xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A> method is invoked, the actions tracked by the DesignerTransaction are reversed to attempt to roll back the changes. To undo actions that occurred as part of earlier transactions, you must use the undo command provided by the development environment.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Transactions can track actions that can be undone later.","pos":[0,56]},{"content":"Changes made during a transaction can be reversed by canceling a transaction, which automatically attempts to reverse each change by setting each changed property to its pre-change value.","pos":[57,244]},{"content":"Transactions can also improve performance during a series of operations by deferring updates to the display until the completion of the transaction.","pos":[245,393]},{"content":"When a transaction is in progress, some components defer their processing until the transaction has completed by listening to the &lt;xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening&gt; and &lt;xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed&gt; events.","pos":[400,678],"source":"       When a transaction is in progress, some components defer their processing until the transaction has completed by listening to the <xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening> and <xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed> events."},{"content":"The Properties window, for example, does not update its display after a transaction has opened until the transaction has closed.","pos":[679,807]},{"content":"To use transactions for reversible or multiple operations, have your designer create a DesignerTransaction for each operation or series of operations which should be reversible.","pos":[814,991]},{"content":"Be careful not to perform actions outside the transactions that might prevent a sequence of undo events from completing successfully.","pos":[992,1125]},{"content":"You can obtain a new DesignerTransaction by calling the &lt;xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A&gt; method of an &lt;xref:System.ComponentModel.Design.IDesignerHost&gt;.","pos":[1132,1322],"source":"       You can obtain a new DesignerTransaction by calling the <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A> method of an <xref:System.ComponentModel.Design.IDesignerHost>."},{"content":"Be sure to obtain each DesignerTransaction from the active &lt;xref:System.ComponentModel.Design.IDesignerHost&gt; in order to correctly integrate with the designer transaction processing mechanism, rather than creating a new DesignerTransaction directly.","pos":[1323,1572],"source":" Be sure to obtain each DesignerTransaction from the active <xref:System.ComponentModel.Design.IDesignerHost> in order to correctly integrate with the designer transaction processing mechanism, rather than creating a new DesignerTransaction directly."},{"content":"To perform an action within a transaction, you must first create a transaction.","pos":[1579,1658]},{"content":"Then you must call the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt; method before each change or set of changes occurs, and the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt; method after each change or set of changes occur.","pos":[1659,1956],"source":" Then you must call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> method before each change or set of changes occurs, and the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> method after each change or set of changes occur."},{"content":"Finally, complete and close the transaction by calling the &lt;xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A&gt; method.","pos":[1957,2089],"source":" Finally, complete and close the transaction by calling the <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When making changes to property values, use the &lt;xref:System.ComponentModel.PropertyDescriptor.SetValue%2A&gt; method of a &lt;xref:System.ComponentModel.PropertyDescriptor&gt;, which calls the component change methods of the &lt;xref:System.ComponentModel.Design.IComponentChangeService&gt; and creates a DesignerTransaction representing the change automatically.","pos":[2095,2457],"source":"      > [!NOTE] >  When making changes to property values, use the <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> method of a <xref:System.ComponentModel.PropertyDescriptor>, which calls the component change methods of the <xref:System.ComponentModel.Design.IComponentChangeService> and creates a DesignerTransaction representing the change automatically."},{"content":"To perform a transaction, complete the following steps:      1.","pos":[2464,2527]},{"content":"Call &lt;xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A&gt; to obtain a DesignerTransaction that can be used to control the transaction.","pos":[2529,2681],"source":"  Call <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A> to obtain a DesignerTransaction that can be used to control the transaction."},{"content":"2.","pos":[2687,2689]},{"content":"Within a <ph id=\"ph1\">`try`</ph> block, for each action that you want to track with a DesignerTransaction, call the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt; method, make the change or changes, then call the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt; method to signal that the change or changes have been made.","pos":[2691,3063],"source":"  Within a `try` block, for each action that you want to track with a DesignerTransaction, call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> method, make the change or changes, then call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> method to signal that the change or changes have been made."},{"content":"3.","pos":[3069,3071]},{"content":"To complete the transaction, call &lt;xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A&gt; from within a <ph id=\"ph1\">`finally`</ph> block.","pos":[3073,3203],"source":"  To complete the transaction, call <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A> from within a `finally` block."},{"content":"In C#, you can use the <ph id=\"ph1\">`using`</ph> statement rather than a <ph id=\"ph2\">`try/finally`</ph> block, such as in the following example.","pos":[3210,3319],"source":"       In C#, you can use the `using` statement rather than a `try/finally` block, such as in the following example."},{"content":"<ph id=\"ph1\">```   using (host.CreateTransaction() {   // Insert your code here.   }   ```</ph>       To cancel and attempt to roll back a transaction before it has been committed, call the &lt;xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A&gt; method.","pos":[3325,3570],"source":"```   using (host.CreateTransaction() {   // Insert your code here.   }   ```       To cancel and attempt to roll back a transaction before it has been committed, call the <xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A> method."},{"content":"When the &lt;xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A&gt; method is invoked, the actions tracked by the DesignerTransaction are reversed to attempt to roll back the changes.","pos":[3571,3761],"source":" When the <xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A> method is invoked, the actions tracked by the DesignerTransaction are reversed to attempt to roll back the changes."},{"content":"To undo actions that occurred as part of earlier transactions, you must use the undo command provided by the development environment.","pos":[3762,3895]}]},{"pos":[7277,7407],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignerTransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with no description.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.DesignerTransaction\"></xref> class with no description."},{"pos":[8064,8218],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignerTransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified transaction description.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.DesignerTransaction\"></xref> class using the specified transaction description."},{"pos":[8230,8306],"content":"This constructor initializes the transaction with the specified description.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor initializes the transaction with the specified description.","pos":[0,76]}]},{"pos":[8465,8500],"content":"A description for this transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"A description for this transaction.","pos":[0,35]}]},{"pos":[8989,9089],"content":"Cancels the transaction and attempts to roll back the changes made by the events of the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the transaction and attempts to roll back the changes made by the events of the transaction.","pos":[0,100]}]},{"pos":[9650,9711],"content":"Gets a value indicating whether the transaction was canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the transaction was canceled.","pos":[0,61]}]},{"pos":[9723,10106],"content":"When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction. Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction. Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.","pos":[0,383],"nodes":[{"content":"When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction.","pos":[0,158]},{"content":"Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.","pos":[159,383]}]}]},{"pos":[10218,10386],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the transaction was canceled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the transaction was canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10878,10903],"content":"Commits this transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Commits this transaction.","pos":[0,25]}]},{"pos":[10916,11221],"content":"When a designer transaction is committed, the transaction is considered complete and does not track further changes.       Once a transaction has been committed, further calls to this method do nothing. Always call this method after creating a transaction to ensure that the transaction closes properly.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a designer transaction is committed, the transaction is considered complete and does not track further changes.       Once a transaction has been committed, further calls to this method do nothing. Always call this method after creating a transaction to ensure that the transaction closes properly.","pos":[0,303],"nodes":[{"content":"When a designer transaction is committed, the transaction is considered complete and does not track further changes.","pos":[0,116]},{"content":"Once a transaction has been committed, further calls to this method do nothing.","pos":[123,202]},{"content":"Always call this method after creating a transaction to ensure that the transaction closes properly.","pos":[203,303]}]}]},{"pos":[11788,11850],"content":"Gets a value indicating whether the transaction was committed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the transaction was committed.","pos":[0,62]}]},{"pos":[11862,11978],"content":"When a designer transaction is committed, the transaction is considered complete and does not track further changes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a designer transaction is committed, the transaction is considered complete and does not track further changes.","pos":[0,116]}]},{"pos":[12091,12260],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the transaction was committed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the transaction was committed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12774,12813],"content":"Gets a description for the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a description for the transaction.","pos":[0,39]}]},{"pos":[12825,12934],"content":"A transaction can have a description that is useful in identifying the nature of the operation or operations.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A transaction can have a description that is useful in identifying the nature of the operation or operations.","pos":[0,109]}]},{"pos":[13050,13084],"content":"A description for the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"A description for the transaction.","pos":[0,34]}]},{"pos":[13637,13798],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignerTransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.ComponentModel.Design.DesignerTransaction\"></xref> and optionally releases the managed resources."},{"pos":[13811,14365],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.DesignerTransaction> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.ComponentModel.Design.DesignerTransaction&gt; references.","pos":[300,482],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.DesignerTransaction> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[483,552],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[14521,14730],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[15231,15354],"content":"Releases the resources associated with this object. This override commits this transaction if it was not already committed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases the resources associated with this object. This override commits this transaction if it was not already committed.","pos":[0,123],"nodes":[{"content":"Releases the resources associated with this object.","pos":[0,51]},{"content":"This override commits this transaction if it was not already committed.","pos":[52,123]}]}]},{"pos":[15367,16161],"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName> and cleans up resources by calling `Dispose(false)`. Override `Dispose(Boolean)` to customize the cleanup.       Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.       For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method overrides &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; and cleans up resources by calling <ph id=\"ph1\">`Dispose(false)`</ph>.","pos":[0,132],"source":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName> and cleans up resources by calling `Dispose(false)`."},{"content":"Override <ph id=\"ph1\">`Dispose(Boolean)`</ph> to customize the cleanup.","pos":[133,186],"source":" Override `Dispose(Boolean)` to customize the cleanup."},{"content":"Application code should not call this method; an object's <ph id=\"ph1\">`Finalize`</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt; method.","pos":[193,470],"source":"       Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Finalize Methods and Destructors<ept id=\"p1\">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id=\"p2\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>, and <bpt id=\"p3\">[</bpt>Overriding the Finalize Method<ept id=\"p3\">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.","pos":[477,790],"source":"       For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."}]},{"pos":[16731,16813],"content":"Raises the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Cancel\" name=\"Cancel\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref uid=\"langword_csharp_Cancel\" name=\"Cancel\" href=\"\"></xref> event."},{"pos":[16825,17208],"content":"When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction. Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction. Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.","pos":[0,383],"nodes":[{"content":"When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction.","pos":[0,158]},{"content":"Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.","pos":[159,383]}]}]},{"pos":[17789,17842],"content":"Performs the actual work of committing a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs the actual work of committing a transaction.","pos":[0,53]}]},{"pos":[17854,17970],"content":"When a designer transaction is committed, the transaction is considered complete and does not track further changes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a designer transaction is committed, the transaction is considered complete and does not track further changes.","pos":[0,116]}]},{"pos":[18655,18760],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignerTransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.ComponentModel.Design.DesignerTransaction\"></xref>."},{"pos":[18772,18820],"content":"When a transaction is disposed, it is committed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a transaction is disposed, it is committed.","pos":[0,48]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.DesignerTransaction\n  id: DesignerTransaction\n  children:\n  - System.ComponentModel.Design.DesignerTransaction.#ctor\n  - System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)\n  - System.ComponentModel.Design.DesignerTransaction.Cancel\n  - System.ComponentModel.Design.DesignerTransaction.Canceled\n  - System.ComponentModel.Design.DesignerTransaction.Commit\n  - System.ComponentModel.Design.DesignerTransaction.Committed\n  - System.ComponentModel.Design.DesignerTransaction.Description\n  - System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)\n  - System.ComponentModel.Design.DesignerTransaction.Finalize\n  - System.ComponentModel.Design.DesignerTransaction.OnCancel\n  - System.ComponentModel.Design.DesignerTransaction.OnCommit\n  - System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose\n  langs:\n  - csharp\n  name: DesignerTransaction\n  nameWithType: DesignerTransaction\n  fullName: System.ComponentModel.Design.DesignerTransaction\n  type: Class\n  summary: Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.\n  remarks: \"Transactions can track actions that can be undone later. Changes made during a transaction can be reversed by canceling a transaction, which automatically attempts to reverse each change by setting each changed property to its pre-change value. Transactions can also improve performance during a series of operations by deferring updates to the display until the completion of the transaction.  \\n  \\n When a transaction is in progress, some components defer their processing until the transaction has completed by listening to the <xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening> and <xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed> events. The Properties window, for example, does not update its display after a transaction has opened until the transaction has closed.  \\n  \\n To use transactions for reversible or multiple operations, have your designer create a DesignerTransaction for each operation or series of operations which should be reversible. Be careful not to perform actions outside the transactions that might prevent a sequence of undo events from completing successfully.  \\n  \\n You can obtain a new DesignerTransaction by calling the <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A> method of an <xref:System.ComponentModel.Design.IDesignerHost>. Be sure to obtain each DesignerTransaction from the active <xref:System.ComponentModel.Design.IDesignerHost> in order to correctly integrate with the designer transaction processing mechanism, rather than creating a new DesignerTransaction directly.  \\n  \\n To perform an action within a transaction, you must first create a transaction. Then you must call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> method before each change or set of changes occurs, and the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> method after each change or set of changes occur. Finally, complete and close the transaction by calling the <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A> method.  \\n  \\n> [!NOTE]\\n>  When making changes to property values, use the <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> method of a <xref:System.ComponentModel.PropertyDescriptor>, which calls the component change methods of the <xref:System.ComponentModel.Design.IComponentChangeService> and creates a DesignerTransaction representing the change automatically.  \\n  \\n To perform a transaction, complete the following steps:  \\n  \\n1.  Call <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A> to obtain a DesignerTransaction that can be used to control the transaction.  \\n  \\n2.  Within a `try` block, for each action that you want to track with a DesignerTransaction, call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> method, make the change or changes, then call the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> method to signal that the change or changes have been made.  \\n  \\n3.  To complete the transaction, call <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A> from within a `finally` block.  \\n  \\n In C#, you can use the `using` statement rather than a `try/finally` block, such as in the following example.  \\n  \\n```  \\nusing (host.CreateTransaction() {  \\n// Insert your code here.  \\n}  \\n```  \\n  \\n To cancel and attempt to roll back a transaction before it has been committed, call the <xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A> method. When the <xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A> method is invoked, the actions tracked by the DesignerTransaction are reversed to attempt to roll back the changes. To undo actions that occurred as part of earlier transactions, you must use the undo command provided by the development environment.\"\n  example:\n  - \"The following code example program demonstrates how to create a DesignerTransaction from a designer. To run this sample, compile the source code into a class library. You must add a reference to the System.Design assembly. In a new project, add a reference to the compiled DLL and add the component in the library to the **Toolbox**.  \\n  \\n There is extensive support for this feature in Visual Studio.  \\n  \\n Also see [Walkthrough: Automatically Populating the Toolbox with Custom Components](http://msdn.microsoft.com/library/fw694kde\\\\(v=vs.110\\\\).aspx).  \\n  \\n The designer can optionally display notifications about designer transaction events. If you add an instance of the `DTComponent` to a form while in design mode, a message box appears asking whether you would like to receive designer transaction event notifications. You may toggle these notifications using the shortcut menu that appears when you right-click an instance of the `DTComponent`. Transactions are created when you change values using the Properties window. You can also have the designer perform a transaction by clicking **Perform Example Transaction** on the shortcut menu for the component.  \\n  \\n [!code-cpp[DesignerTransaction Sample#1](~/add/codesnippet/cpp/t-system.componentmodel._6_1.cpp)]\\n [!code-vb[DesignerTransaction Sample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._6_1.vb)]\\n [!code-cs[DesignerTransaction Sample#1](~/add/codesnippet/csharp/t-system.componentmodel._6_1.cs)]\"\n  syntax:\n    content: 'public abstract class DesignerTransaction : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: DesignerTransaction()\n  nameWithType: DesignerTransaction.DesignerTransaction()\n  fullName: System.ComponentModel.Design.DesignerTransaction.DesignerTransaction()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.DesignerTransaction\"></xref> class with no description.\n  syntax:\n    content: protected DesignerTransaction ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignerTransaction.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: DesignerTransaction(String)\n  nameWithType: DesignerTransaction.DesignerTransaction(String)\n  fullName: System.ComponentModel.Design.DesignerTransaction.DesignerTransaction(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.DesignerTransaction\"></xref> class using the specified transaction description.\n  remarks: This constructor initializes the transaction with the specified description.\n  syntax:\n    content: protected DesignerTransaction (string description);\n    parameters:\n    - id: description\n      type: System.String\n      description: A description for this transaction.\n  overload: System.ComponentModel.Design.DesignerTransaction.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.Cancel\n  id: Cancel\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: Cancel()\n  nameWithType: DesignerTransaction.Cancel()\n  fullName: System.ComponentModel.Design.DesignerTransaction.Cancel()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Cancels the transaction and attempts to roll back the changes made by the events of the transaction.\n  syntax:\n    content: public void Cancel ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignerTransaction.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.Canceled\n  id: Canceled\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: Canceled\n  nameWithType: DesignerTransaction.Canceled\n  fullName: System.ComponentModel.Design.DesignerTransaction.Canceled\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Gets a value indicating whether the transaction was canceled.\n  remarks: When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction. Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.\n  syntax:\n    content: public bool Canceled { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the transaction was canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.Design.DesignerTransaction.Canceled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.Commit\n  id: Commit\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: Commit()\n  nameWithType: DesignerTransaction.Commit()\n  fullName: System.ComponentModel.Design.DesignerTransaction.Commit()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Commits this transaction.\n  remarks: \"When a designer transaction is committed, the transaction is considered complete and does not track further changes.  \\n  \\n Once a transaction has been committed, further calls to this method do nothing. Always call this method after creating a transaction to ensure that the transaction closes properly.\"\n  syntax:\n    content: public void Commit ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignerTransaction.Commit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.Committed\n  id: Committed\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: Committed\n  nameWithType: DesignerTransaction.Committed\n  fullName: System.ComponentModel.Design.DesignerTransaction.Committed\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Gets a value indicating whether the transaction was committed.\n  remarks: When a designer transaction is committed, the transaction is considered complete and does not track further changes.\n  syntax:\n    content: public bool Committed { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the transaction was committed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.Design.DesignerTransaction.Committed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.Description\n  id: Description\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: Description\n  nameWithType: DesignerTransaction.Description\n  fullName: System.ComponentModel.Design.DesignerTransaction.Description\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Gets a description for the transaction.\n  remarks: A transaction can have a description that is useful in identifying the nature of the operation or operations.\n  syntax:\n    content: public string Description { get; }\n    return:\n      type: System.String\n      description: A description for the transaction.\n  overload: System.ComponentModel.Design.DesignerTransaction.Description*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DesignerTransaction.Dispose(Boolean)\n  fullName: System.ComponentModel.Design.DesignerTransaction.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Releases the unmanaged resources used by the <xref href=\"System.ComponentModel.Design.DesignerTransaction\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.DesignerTransaction> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.ComponentModel.Design.DesignerTransaction.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.Finalize\n  id: Finalize\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: DesignerTransaction.Finalize()\n  fullName: System.ComponentModel.Design.DesignerTransaction.Finalize()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Releases the resources associated with this object. This override commits this transaction if it was not already committed.\n  remarks: \"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName> and cleans up resources by calling `Dispose(false)`. Override `Dispose(Boolean)` to customize the cleanup.  \\n  \\n Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \\n  \\n For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).\"\n  syntax:\n    content: ~DesignerTransaction ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignerTransaction.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.OnCancel\n  id: OnCancel\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: OnCancel()\n  nameWithType: DesignerTransaction.OnCancel()\n  fullName: System.ComponentModel.Design.DesignerTransaction.OnCancel()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Raises the <xref uid=\"langword_csharp_Cancel\" name=\"Cancel\" href=\"\"></xref> event.\n  remarks: When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction. Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.\n  syntax:\n    content: protected abstract void OnCancel ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignerTransaction.OnCancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.OnCommit\n  id: OnCommit\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: OnCommit()\n  nameWithType: DesignerTransaction.OnCommit()\n  fullName: System.ComponentModel.Design.DesignerTransaction.OnCommit()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Performs the actual work of committing a transaction.\n  remarks: When a designer transaction is committed, the transaction is considered complete and does not track further changes.\n  syntax:\n    content: protected abstract void OnCommit ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignerTransaction.OnCommit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose\n  id: System#IDisposable#Dispose\n  isEii: true\n  parent: System.ComponentModel.Design.DesignerTransaction\n  langs:\n  - csharp\n  name: System.IDisposable.Dispose()\n  nameWithType: DesignerTransaction.System.IDisposable.Dispose()\n  fullName: System.ComponentModel.Design.DesignerTransaction.System.IDisposable.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Releases all resources used by the <xref href=\"System.ComponentModel.Design.DesignerTransaction\"></xref>.\n  remarks: When a transaction is disposed, it is committed.\n  syntax:\n    content: void IDisposable.Dispose ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.Design.DesignerTransaction.#ctor\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: DesignerTransaction()\n  nameWithType: DesignerTransaction.DesignerTransaction()\n  fullName: System.ComponentModel.Design.DesignerTransaction.DesignerTransaction()\n- uid: System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: DesignerTransaction(String)\n  nameWithType: DesignerTransaction.DesignerTransaction(String)\n  fullName: System.ComponentModel.Design.DesignerTransaction.DesignerTransaction(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.Design.DesignerTransaction.Cancel\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Cancel()\n  nameWithType: DesignerTransaction.Cancel()\n  fullName: System.ComponentModel.Design.DesignerTransaction.Cancel()\n- uid: System.ComponentModel.Design.DesignerTransaction.Canceled\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Canceled\n  nameWithType: DesignerTransaction.Canceled\n  fullName: System.ComponentModel.Design.DesignerTransaction.Canceled\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Design.DesignerTransaction.Commit\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Commit()\n  nameWithType: DesignerTransaction.Commit()\n  fullName: System.ComponentModel.Design.DesignerTransaction.Commit()\n- uid: System.ComponentModel.Design.DesignerTransaction.Committed\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Committed\n  nameWithType: DesignerTransaction.Committed\n  fullName: System.ComponentModel.Design.DesignerTransaction.Committed\n- uid: System.ComponentModel.Design.DesignerTransaction.Description\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Description\n  nameWithType: DesignerTransaction.Description\n  fullName: System.ComponentModel.Design.DesignerTransaction.Description\n- uid: System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DesignerTransaction.Dispose(Boolean)\n  fullName: System.ComponentModel.Design.DesignerTransaction.Dispose(Boolean)\n- uid: System.ComponentModel.Design.DesignerTransaction.Finalize\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Finalize()\n  nameWithType: DesignerTransaction.Finalize()\n  fullName: System.ComponentModel.Design.DesignerTransaction.Finalize()\n- uid: System.ComponentModel.Design.DesignerTransaction.OnCancel\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: OnCancel()\n  nameWithType: DesignerTransaction.OnCancel()\n  fullName: System.ComponentModel.Design.DesignerTransaction.OnCancel()\n- uid: System.ComponentModel.Design.DesignerTransaction.OnCommit\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: OnCommit()\n  nameWithType: DesignerTransaction.OnCommit()\n  fullName: System.ComponentModel.Design.DesignerTransaction.OnCommit()\n- uid: System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: System.IDisposable.Dispose()\n  nameWithType: DesignerTransaction.System.IDisposable.Dispose()\n  fullName: System.ComponentModel.Design.DesignerTransaction.System.IDisposable.Dispose()\n- uid: System.ComponentModel.Design.DesignerTransaction.#ctor*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: DesignerTransaction\n  nameWithType: DesignerTransaction.DesignerTransaction\n- uid: System.ComponentModel.Design.DesignerTransaction.Cancel*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Cancel\n  nameWithType: DesignerTransaction.Cancel\n- uid: System.ComponentModel.Design.DesignerTransaction.Canceled*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Canceled\n  nameWithType: DesignerTransaction.Canceled\n- uid: System.ComponentModel.Design.DesignerTransaction.Commit*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Commit\n  nameWithType: DesignerTransaction.Commit\n- uid: System.ComponentModel.Design.DesignerTransaction.Committed*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Committed\n  nameWithType: DesignerTransaction.Committed\n- uid: System.ComponentModel.Design.DesignerTransaction.Description*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Description\n  nameWithType: DesignerTransaction.Description\n- uid: System.ComponentModel.Design.DesignerTransaction.Dispose*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Dispose\n  nameWithType: DesignerTransaction.Dispose\n- uid: System.ComponentModel.Design.DesignerTransaction.Finalize*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: Finalize\n  nameWithType: DesignerTransaction.Finalize\n- uid: System.ComponentModel.Design.DesignerTransaction.OnCancel*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: OnCancel\n  nameWithType: DesignerTransaction.OnCancel\n- uid: System.ComponentModel.Design.DesignerTransaction.OnCommit*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: OnCommit\n  nameWithType: DesignerTransaction.OnCommit\n- uid: System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose*\n  parent: System.ComponentModel.Design.DesignerTransaction\n  isExternal: false\n  name: System.IDisposable.Dispose\n  nameWithType: DesignerTransaction.System.IDisposable.Dispose\n"}