{"nodes":[{"pos":[514,598],"content":"Represents a point at which a workflow or activity can passively wait to be resumed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a point at which a workflow or activity can passively wait to be resumed.","pos":[0,84]}]},{"pos":[611,1380],"content":"When an activity creates a Bookmark, it becomes idle and waits for the Bookmark to be resumed. If there are other activities in parallel with the activity that created the Bookmark, they will be scheduled for execution.       Bookmarks can be resumed by the host application using one of the <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> overloads.       [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] bookmarks, see [Using WorkflowInvoker and WorkflowApplication](~/add/includes/ajax-current-ext-md.md), [Bookmarks](~/add/includes/ajax-current-ext-md.md), and the [Bookmarks &#91; WF Samples&#93;](~/add/includes/ajax-current-ext-md.md) and [Wait For Input Activity &#91;WF Samples&#93;](~/add/includes/ajax-current-ext-md.md) samples.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When an activity creates a Bookmark, it becomes idle and waits for the Bookmark to be resumed.","pos":[0,94]},{"content":"If there are other activities in parallel with the activity that created the Bookmark, they will be scheduled for execution.","pos":[95,219]},{"content":"Bookmarks can be resumed by the host application using one of the &lt;xref:System.Activities.WorkflowApplication.ResumeBookmark%2A&gt; overloads.","pos":[226,365],"source":"       Bookmarks can be resumed by the host application using one of the <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> overloads."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)]</ph> bookmarks, see <bpt id=\"p1\">[</bpt>Using WorkflowInvoker and WorkflowApplication<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>, <bpt id=\"p2\">[</bpt>Bookmarks<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>, and the <bpt id=\"p3\">[</bpt>Bookmarks &amp;#91; WF Samples&amp;#93;<ept id=\"p3\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p4\">[</bpt>Wait For Input Activity &amp;#91;WF Samples&amp;#93;<ept id=\"p4\">](~/add/includes/ajax-current-ext-md.md)</ept> samples.","pos":[372,765],"source":"[!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] bookmarks, see [Using WorkflowInvoker and WorkflowApplication](~/add/includes/ajax-current-ext-md.md), [Bookmarks](~/add/includes/ajax-current-ext-md.md), and the [Bookmarks &#91; WF Samples&#93;](~/add/includes/ajax-current-ext-md.md) and [Wait For Input Activity &#91;WF Samples&#93;](~/add/includes/ajax-current-ext-md.md) samples."}]},{"pos":[3338,3451],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Activities.Bookmark\"></xref> class using the specified name."},{"pos":[3582,3618],"content":"A name that identifies the bookmark.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name that identifies the bookmark.","pos":[0,36]}]},{"pos":[4088,4284],"content":"Determines whether the current <bpt id=\"p1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified <bpt id=\"p2\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> refer to the same continuation point in a workflow.","needQuote":true,"needEscape":true,"source":"Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified <xref href=\"System.Activities.Bookmark\"></xref> refer to the same continuation point in a workflow."},{"pos":[4453,4477],"content":"The bookmark to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark to compare.","pos":[0,24]}]},{"pos":[4536,4745],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5184,5339],"content":"Determines whether the current <bpt id=\"p1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified object refer to the same continuation point in a workflow.","needQuote":true,"needEscape":true,"source":"Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified object refer to the same continuation point in a workflow."},{"pos":[5480,5502],"content":"The object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare.","pos":[0,22]}]},{"pos":[5561,5770],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6186,6280],"content":"Returns a unique identifier for this <bpt id=\"p1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Returns a unique identifier for this <xref href=\"System.Activities.Bookmark\"></xref> instance."},{"pos":[6415,6502],"content":"The unique identifier of this <bpt id=\"p1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The unique identifier of this <xref href=\"System.Activities.Bookmark\"></xref> instance."},{"pos":[6884,6907],"content":"Gets the bookmark name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the bookmark name.","pos":[0,23]}]},{"pos":[7016,7034],"content":"The bookmark name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark name.","pos":[0,18]}]},{"pos":[7433,7523],"content":"Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.","pos":[0,90]}]},{"pos":[7659,7683],"content":"The bookmark name or ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark name or ID.","pos":[0,24]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Bookmark\n  id: Bookmark\n  children:\n  - System.Activities.Bookmark.#ctor(System.String)\n  - System.Activities.Bookmark.Equals(System.Activities.Bookmark)\n  - System.Activities.Bookmark.Equals(System.Object)\n  - System.Activities.Bookmark.GetHashCode\n  - System.Activities.Bookmark.Name\n  - System.Activities.Bookmark.ToString\n  langs:\n  - csharp\n  name: Bookmark\n  nameWithType: Bookmark\n  fullName: System.Activities.Bookmark\n  type: Class\n  summary: Represents a point at which a workflow or activity can passively wait to be resumed.\n  remarks: \"When an activity creates a Bookmark, it becomes idle and waits for the Bookmark to be resumed. If there are other activities in parallel with the activity that created the Bookmark, they will be scheduled for execution.  \\n  \\n Bookmarks can be resumed by the host application using one of the <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> overloads.  \\n  \\n [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] bookmarks, see [Using WorkflowInvoker and WorkflowApplication](~/add/includes/ajax-current-ext-md.md), [Bookmarks](~/add/includes/ajax-current-ext-md.md), and the [Bookmarks &#91; WF Samples&#93;](~/add/includes/ajax-current-ext-md.md) and [Wait For Input Activity &#91;WF Samples&#93;](~/add/includes/ajax-current-ext-md.md) samples.\"\n  example:\n  - \"In the following example, a `ReadLine` activity is created. When executed, the `ReadLine` activity creates a Bookmark, registers a callback, and then waits for the Bookmark to be resumed. When it is resumed, the `ReadLine` activity assigns the data that was passed with the Bookmark to its <xref:System.Activities.Activity%601.Result%2A> argument.  \\n  \\n<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  \\n In the following example, a workflow is created that uses the `ReadLine` activity to gather the userâ€™s name and display it to the console window. The host application performs the actual work of gathering the input and passes it to the workflow by resuming the Bookmark.  \\n  \\n<CodeContentPlaceHolder>1</CodeContentPlaceHolder>  \\n When the `ReadLine` activity is executed, it creates a Bookmark named `UserName` and then waits for the bookmark to be resumed. The host collects the desired data and then resumes the Bookmark. The workflow resumes, displays the name, and then completes. Note that no synchronization code is required with regard to resuming the bookmark. A Bookmark can only be resumed when the workflow is idle, and if the workflow is not idle, the call to <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> blocks until the workflow becomes idle.\"\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataContract]\n\n      public class Bookmark : IEquatable<System.Activities.Bookmark>\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable<System.Activities.Bookmark>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Activities.Bookmark.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: Bookmark(String)\n  nameWithType: Bookmark.Bookmark(String)\n  fullName: System.Activities.Bookmark.Bookmark(String)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Bookmark\"></xref> class using the specified name.\n  syntax:\n    content: public Bookmark (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: A name that identifies the bookmark.\n  overload: System.Activities.Bookmark.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Bookmark.Equals(System.Activities.Bookmark)\n  id: Equals(System.Activities.Bookmark)\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: Equals(Bookmark)\n  nameWithType: Bookmark.Equals(Bookmark)\n  fullName: System.Activities.Bookmark.Equals(Bookmark)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified <xref href=\"System.Activities.Bookmark\"></xref> refer to the same continuation point in a workflow.\n  syntax:\n    content: public bool Equals (System.Activities.Bookmark other);\n    parameters:\n    - id: other\n      type: System.Activities.Bookmark\n      description: The bookmark to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Bookmark.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Bookmark.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Bookmark.Equals(Object)\n  fullName: System.Activities.Bookmark.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified object refer to the same continuation point in a workflow.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Bookmark.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Bookmark.GetHashCode\n  id: GetHashCode\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Bookmark.GetHashCode()\n  fullName: System.Activities.Bookmark.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns a unique identifier for this <xref href=\"System.Activities.Bookmark\"></xref> instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The unique identifier of this <xref href=\"System.Activities.Bookmark\"></xref> instance.\n  overload: System.Activities.Bookmark.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Bookmark.Name\n  id: Name\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: Name\n  nameWithType: Bookmark.Name\n  fullName: System.Activities.Bookmark.Name\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets the bookmark name.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: The bookmark name.\n  overload: System.Activities.Bookmark.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Bookmark.ToString\n  id: ToString\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Bookmark.ToString()\n  fullName: System.Activities.Bookmark.ToString()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The bookmark name or ID.\n  overload: System.Activities.Bookmark.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Activities.Bookmark.#ctor(System.String)\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Bookmark(String)\n  nameWithType: Bookmark.Bookmark(String)\n  fullName: System.Activities.Bookmark.Bookmark(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.Bookmark.Equals(System.Activities.Bookmark)\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Equals(Bookmark)\n  nameWithType: Bookmark.Equals(Bookmark)\n  fullName: System.Activities.Bookmark.Equals(Bookmark)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Bookmark\n  parent: System.Activities\n  isExternal: false\n  name: Bookmark\n  nameWithType: Bookmark\n  fullName: System.Activities.Bookmark\n- uid: System.Activities.Bookmark.Equals(System.Object)\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Bookmark.Equals(Object)\n  fullName: System.Activities.Bookmark.Equals(Object)\n- uid: System.Activities.Bookmark.GetHashCode\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Bookmark.GetHashCode()\n  fullName: System.Activities.Bookmark.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Activities.Bookmark.Name\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Name\n  nameWithType: Bookmark.Name\n  fullName: System.Activities.Bookmark.Name\n- uid: System.Activities.Bookmark.ToString\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: ToString()\n  nameWithType: Bookmark.ToString()\n  fullName: System.Activities.Bookmark.ToString()\n- uid: System.Activities.Bookmark.#ctor*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Bookmark\n  nameWithType: Bookmark.Bookmark\n- uid: System.Activities.Bookmark.Equals*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Equals\n  nameWithType: Bookmark.Equals\n- uid: System.Activities.Bookmark.GetHashCode*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Bookmark.GetHashCode\n- uid: System.Activities.Bookmark.Name*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Name\n  nameWithType: Bookmark.Name\n- uid: System.Activities.Bookmark.ToString*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: ToString\n  nameWithType: Bookmark.ToString\n"}