{"nodes":[{"pos":[839,920],"content":"Maps a XAML element name to the appropriate CLR <xref:System.Type> in assemblies.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps a XAML element name to the appropriate CLR &lt;xref:System.Type&gt; in assemblies.","pos":[0,81],"source":"Maps a XAML element name to the appropriate CLR <xref:System.Type> in assemblies."}]},{"pos":[933,2620],"content":"XamlTypeMapper is part of an advanced WPF scenario that supplies alternate context for <xref:System.Windows.Markup.XamlReader> and <xref:System.Windows.Markup.XamlWriter>. For [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] WPF applications, you should consider overriding <xref:System.Xaml.XamlSchemaContext> for this scenario, rather than attempting to use XamlTypeMapper.       XamlTypeMapper can be used to provide the XAML parser with custom mapping information through a more direct technique than the application of <xref:System.Windows.Markup.XmlnsDefinitionAttribute> values on the assembly code. This might be useful for consolidation of all CLR namespaces in an assembly, or for referencing types that are XAML-ready in an existing assembly without having to recompile it just to add <xref:System.Windows.Markup.XmlnsDefinitionAttribute> attributing.       You typically create a XamlTypeMapper instance in order to specify the <xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A> property value for a <xref:System.Windows.Markup.ParserContext>. The <xref:System.Windows.Markup.ParserContext> in turn can be used as the context for a <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName>call.      ## Default Mapper    You can obtain a default mapper using the <xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A> static property. The default mapper only works on a default assembly list. No specific information about assemblies (as is specified in XamlTypeMapper constructors) is used.      <a name=\"xamlTextUsage_XamlTypeMapper\"></a>    ## XAML Text Usage","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"XamlTypeMapper is part of an advanced WPF scenario that supplies alternate context for &lt;xref:System.Windows.Markup.XamlReader&gt; and &lt;xref:System.Windows.Markup.XamlWriter&gt;.","pos":[0,171],"source":"XamlTypeMapper is part of an advanced WPF scenario that supplies alternate context for <xref:System.Windows.Markup.XamlReader> and <xref:System.Windows.Markup.XamlWriter>."},{"content":"For <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> WPF applications, you should consider overriding &lt;xref:System.Xaml.XamlSchemaContext&gt; for this scenario, rather than attempting to use XamlTypeMapper.","pos":[172,388],"source":" For [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] WPF applications, you should consider overriding <xref:System.Xaml.XamlSchemaContext> for this scenario, rather than attempting to use XamlTypeMapper."},{"content":"XamlTypeMapper can be used to provide the XAML parser with custom mapping information through a more direct technique than the application of &lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt; values on the assembly code.","pos":[395,619],"source":"       XamlTypeMapper can be used to provide the XAML parser with custom mapping information through a more direct technique than the application of <xref:System.Windows.Markup.XmlnsDefinitionAttribute> values on the assembly code."},{"content":"This might be useful for consolidation of all CLR namespaces in an assembly, or for referencing types that are XAML-ready in an existing assembly without having to recompile it just to add &lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt; attributing.","pos":[620,875],"source":" This might be useful for consolidation of all CLR namespaces in an assembly, or for referencing types that are XAML-ready in an existing assembly without having to recompile it just to add <xref:System.Windows.Markup.XmlnsDefinitionAttribute> attributing."},{"content":"You typically create a XamlTypeMapper instance in order to specify the &lt;xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A&gt; property value for a &lt;xref:System.Windows.Markup.ParserContext&gt;.","pos":[882,1078],"source":"       You typically create a XamlTypeMapper instance in order to specify the <xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A> property value for a <xref:System.Windows.Markup.ParserContext>."},{"content":"The &lt;xref:System.Windows.Markup.ParserContext&gt; in turn can be used as the context for a &lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName&gt;call.","pos":[1079,1301],"source":" The <xref:System.Windows.Markup.ParserContext> in turn can be used as the context for a <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName>call."},{"content":"Default Mapper    You can obtain a default mapper using the &lt;xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A&gt; static property.","pos":[1310,1447],"source":"      ## Default Mapper    You can obtain a default mapper using the <xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A> static property."},{"content":"The default mapper only works on a default assembly list.","pos":[1448,1505]},{"content":"No specific information about assemblies (as is specified in XamlTypeMapper constructors) is used.","pos":[1506,1604]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage","pos":[1610,1675],"source":"<a name=\"xamlTextUsage_XamlTypeMapper\"></a>    ## XAML Text Usage"}]},{"pos":[3203,3420],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying an array of assembly names that the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> should use.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> class by specifying an array of assembly names that the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> should use."},{"pos":[3579,3680],"content":"The array of assembly names the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> should use.","needQuote":true,"needEscape":true,"source":"The array of assembly names the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> should use."},{"pos":[3853,3944],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyNames&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>assemblyNames</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4546,4722],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified array of assembly names and the specified namespace maps.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> class, using the specified array of assembly names and the specified namespace maps."},{"pos":[4938,5039],"content":"The array of assembly names the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> should use.","needQuote":true,"needEscape":true,"source":"The array of assembly names the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> should use."},{"pos":[5137,5238],"content":"The array of namespace maps the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> should use.","needQuote":true,"needEscape":true,"source":"The array of namespace maps the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> should use."},{"pos":[5411,5502],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyNames&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>assemblyNames</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6144,6313],"content":"Defines a mapping between an XML namespace and CLR namespaces in assemblies, and adds these to the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> information.","needQuote":true,"needEscape":true,"source":"Defines a mapping between an XML namespace and CLR namespaces in assemblies, and adds these to the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> information."},{"pos":[6326,6745],"content":"AddMappingProcessingInstruction is a programmatic way to add a mapping.  For example, the different parts of the following XAML mapping instruction correspond to the parameters of the AddMappingProcessingInstruction:      ```   <Window xmlns:SDK=\"clr-namespace:Samples;assembly=SDKSamples\">   ...   ```       The `xmlNamespace` is `SDK`, the `clrNamespace` is `Samples`, and the `assemblyName` is `SDKSamples`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"AddMappingProcessingInstruction is a programmatic way to add a mapping.","pos":[0,71]},{"content":"For example, the different parts of the following XAML mapping instruction correspond to the parameters of the AddMappingProcessingInstruction:      <ph id=\"ph1\">```   &lt;Window xmlns:SDK=\"clr-namespace:Samples;assembly=SDKSamples\"&gt;   ...   ```</ph>       The <ph id=\"ph2\">`xmlNamespace`</ph> is <ph id=\"ph3\">`SDK`</ph>, the <ph id=\"ph4\">`clrNamespace`</ph> is <ph id=\"ph5\">`Samples`</ph>, and the <ph id=\"ph6\">`assemblyName`</ph> is <ph id=\"ph7\">`SDKSamples`</ph>.","pos":[73,410],"source":"  For example, the different parts of the following XAML mapping instruction correspond to the parameters of the AddMappingProcessingInstruction:      ```   <Window xmlns:SDK=\"clr-namespace:Samples;assembly=SDKSamples\">   ...   ```       The `xmlNamespace` is `SDK`, the `clrNamespace` is `Samples`, and the `assemblyName` is `SDKSamples`."}]},{"pos":[6963,6997],"content":"The prefix for the XML namespace..","needQuote":true,"needEscape":true,"nodes":[{"content":"The prefix for the XML namespace..","pos":[0,34]}]},{"pos":[7066,7116],"content":"The CLR  namespace that contains the types to map.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CLR  namespace that contains the types to map.","pos":[0,50]}]},{"pos":[7185,7231],"content":"The assembly that contains the CLR  namespace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The assembly that contains the CLR  namespace.","pos":[0,46]}]},{"pos":[7431,7761],"content":"<ph id=\"ph1\">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>       -or-       <ph id=\"ph2\">&lt;code&gt;clrNamespace&lt;/code&gt;</ph> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>       -or-       <ph id=\"ph3\">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":false,"needEscape":true,"source":"<code>xmlNamespace</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>       -or-       <code>clrNamespace</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>       -or-       <code>assemblyName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8226,8390],"content":"Requests permission for a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> derived type that is called under full trust to access a specific internal type.","needQuote":true,"needEscape":true,"source":"Requests permission for a <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> derived type that is called under full trust to access a specific internal type."},{"pos":[8403,8641],"content":"If not overridden by a subclass, AllowInternalType always returns `false`.       When overridden by a subclass, the behavior should be that AllowInternalType should return `true` if the internal type can be accessed; otherwise, `false`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If not overridden by a subclass, AllowInternalType always returns <ph id=\"ph1\">`false`</ph>.","pos":[0,74],"source":"If not overridden by a subclass, AllowInternalType always returns `false`."},{"content":"When overridden by a subclass, the behavior should be that AllowInternalType should return <ph id=\"ph1\">`true`</ph> if the internal type can be accessed; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[81,236],"source":"       When overridden by a subclass, the behavior should be that AllowInternalType should return `true` if the internal type can be accessed; otherwise, `false`."}]},{"pos":[8794,8813],"content":"The type to access.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type to access.","pos":[0,19]}]},{"pos":[8872,9045],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the internal type can be accessed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the internal type can be accessed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9532,9651],"content":"Gets an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlTypeMapper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use if one has not been specified.","needQuote":true,"needEscape":true,"source":"Gets an instance of the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> to use if one has not been specified."},{"pos":[9664,10444],"content":"The default mapper only works on a default assembly list. No specific information about assemblies (as is specified in <xref:System.Windows.Markup.XamlTypeMapper> constructors) is used. In the current implementation the default assembly list is: `WindowsBase`, `PresentationCore`, `PresentationFramework`.       Using the default mapper does not mean that you cannot use custom assemblies/types in XAML at all. It only means that if you do use custom types/assemblies, you must then use the conventional XAML technique of creating the mappings as `xmlns` attributes in each XAML page where the types/assemblies are referenced, as opposed to a type mapper API. For more information, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default mapper only works on a default assembly list.","pos":[0,57]},{"content":"No specific information about assemblies (as is specified in &lt;xref:System.Windows.Markup.XamlTypeMapper&gt; constructors) is used.","pos":[58,185],"source":" No specific information about assemblies (as is specified in <xref:System.Windows.Markup.XamlTypeMapper> constructors) is used."},{"content":"In the current implementation the default assembly list is: <ph id=\"ph1\">`WindowsBase`</ph>, <ph id=\"ph2\">`PresentationCore`</ph>, <ph id=\"ph3\">`PresentationFramework`</ph>.","pos":[186,305],"source":" In the current implementation the default assembly list is: `WindowsBase`, `PresentationCore`, `PresentationFramework`."},{"content":"Using the default mapper does not mean that you cannot use custom assemblies/types in XAML at all.","pos":[312,410]},{"content":"It only means that if you do use custom types/assemblies, you must then use the conventional XAML technique of creating the mappings as <ph id=\"ph1\">`xmlns`</ph> attributes in each XAML page where the types/assemblies are referenced, as opposed to a type mapper API.","pos":[411,659],"source":" It only means that if you do use custom types/assemblies, you must then use the conventional XAML technique of creating the mappings as `xmlns` attributes in each XAML page where the types/assemblies are referenced, as opposed to a type mapper API."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[660,778],"source":" For more information, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[10623,10647],"content":"The default type mapper.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default type mapper.","pos":[0,24]}]},{"pos":[11201,11331],"content":"Gets the CLR <xref:System.Type> that a given XAML element is mapped to, using the specified XML namespace prefix and element name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the CLR &lt;xref:System.Type&gt; that a given XAML element is mapped to, using the specified XML namespace prefix and element name.","pos":[0,130],"source":"Gets the CLR <xref:System.Type> that a given XAML element is mapped to, using the specified XML namespace prefix and element name."}]},{"pos":[11344,11607],"content":"If a type cannot be found that maps to the provided information, `null` is returned.       Do not include the prefix as part of `localName`. For any prefixed XAML element information, separate it into `xmlNamespace` and `localName` components for this API call.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a type cannot be found that maps to the provided information, <ph id=\"ph1\">`null`</ph> is returned.","pos":[0,84],"source":"If a type cannot be found that maps to the provided information, `null` is returned."},{"content":"Do not include the prefix as part of <ph id=\"ph1\">`localName`</ph>.","pos":[91,140],"source":"       Do not include the prefix as part of `localName`."},{"content":"For any prefixed XAML element information, separate it into <ph id=\"ph1\">`xmlNamespace`</ph> and <ph id=\"ph2\">`localName`</ph> components for this API call.","pos":[141,261],"source":" For any prefixed XAML element information, separate it into `xmlNamespace` and `localName` components for this API call."}]},{"pos":[11777,11812],"content":"The specified XML namespace prefix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified XML namespace prefix.","pos":[0,35]}]},{"pos":[11878,12033],"content":"The \"local\" name of the XAML element to obtain the mapped <xref:System.Type> for. Local in this context means as mapped versus the provided `xmlNamespace`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The \"local\" name of the XAML element to obtain the mapped &lt;xref:System.Type&gt; for.","pos":[0,81],"source":"The \"local\" name of the XAML element to obtain the mapped <xref:System.Type> for."},{"content":"Local in this context means as mapped versus the provided <ph id=\"ph1\">`xmlNamespace`</ph>.","pos":[82,155],"source":" Local in this context means as mapped versus the provided `xmlNamespace`."}]},{"pos":[12089,12224],"content":"The &lt;xref:System.Type&gt; for the object, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no mapping could be resolved.","needQuote":true,"needEscape":true,"source":"The <xref:System.Type> for the object, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no mapping could be resolved."},{"pos":[12400,12610],"content":"<ph id=\"ph1\">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>       -or-       <ph id=\"ph2\">&lt;code&gt;localName&lt;/code&gt;</ph> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":false,"needEscape":true,"source":"<code>xmlNamespace</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>       -or-       <code>localName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13124,13175],"content":"Specifies the path to use when loading an assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the path to use when loading an assembly.","pos":[0,51]}]},{"pos":[13355,13518],"content":"The short name of the assembly without an extension or path specified (equivalent to &lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;).","needQuote":true,"needEscape":true,"nodes":[{"content":"The short name of the assembly without an extension or path specified (equivalent to <ph id=\"ph1\">&amp;lt;</ph>xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>).","pos":[0,163],"source":"The short name of the assembly without an extension or path specified (equivalent to &lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;)."}]},{"pos":[13587,13689],"content":"The file path of the assembly. The assembly path must be a full file path containing a file extension.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file path of the assembly. The assembly path must be a full file path containing a file extension.","pos":[0,102],"nodes":[{"content":"The file path of the assembly.","pos":[0,30]},{"content":"The assembly path must be a full file path containing a file extension.","pos":[31,102]}]}]},{"pos":[13873,14086],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>       -or-       <ph id=\"ph2\">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":false,"needEscape":true,"source":"<code>assemblyName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>       -or-       <code>assemblyPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14215,14435],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>       -or-       <ph id=\"ph3\">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <ph id=\"ph4\">&lt;xref:System.String&gt;</ph>       -or-       <ph id=\"ph5\">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is not a full file path containing a file extension.","needQuote":false,"needEscape":true,"source":"<code>assemblyName</code> is <xref:System.String>       -or-       <code>assemblyPath</code> is <xref:System.String>       -or-       <code>assemblyPath</code> is not a full file path containing a file extension."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Markup.XamlTypeMapper\n  id: XamlTypeMapper\n  children:\n  - System.Windows.Markup.XamlTypeMapper.#ctor(System.String[])\n  - System.Windows.Markup.XamlTypeMapper.#ctor(System.String[],System.Windows.Markup.NamespaceMapEntry[])\n  - System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(System.String,System.String,System.String)\n  - System.Windows.Markup.XamlTypeMapper.AllowInternalType(System.Type)\n  - System.Windows.Markup.XamlTypeMapper.DefaultMapper\n  - System.Windows.Markup.XamlTypeMapper.GetType(System.String,System.String)\n  - System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(System.String,System.String)\n  langs:\n  - csharp\n  name: XamlTypeMapper\n  nameWithType: XamlTypeMapper\n  fullName: System.Windows.Markup.XamlTypeMapper\n  type: Class\n  summary: Maps a XAML element name to the appropriate CLR <xref:System.Type> in assemblies.\n  remarks: \"XamlTypeMapper is part of an advanced WPF scenario that supplies alternate context for <xref:System.Windows.Markup.XamlReader> and <xref:System.Windows.Markup.XamlWriter>. For [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] WPF applications, you should consider overriding <xref:System.Xaml.XamlSchemaContext> for this scenario, rather than attempting to use XamlTypeMapper.  \\n  \\n XamlTypeMapper can be used to provide the XAML parser with custom mapping information through a more direct technique than the application of <xref:System.Windows.Markup.XmlnsDefinitionAttribute> values on the assembly code. This might be useful for consolidation of all CLR namespaces in an assembly, or for referencing types that are XAML-ready in an existing assembly without having to recompile it just to add <xref:System.Windows.Markup.XmlnsDefinitionAttribute> attributing.  \\n  \\n You typically create a XamlTypeMapper instance in order to specify the <xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A> property value for a <xref:System.Windows.Markup.ParserContext>. The <xref:System.Windows.Markup.ParserContext> in turn can be used as the context for a <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName>call.  \\n  \\n## Default Mapper  \\n You can obtain a default mapper using the <xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A> static property. The default mapper only works on a default assembly list. No specific information about assemblies (as is specified in XamlTypeMapper constructors) is used.  \\n  \\n<a name=\\\"xamlTextUsage_XamlTypeMapper\\\"></a>   \\n## XAML Text Usage\"\n  syntax:\n    content: public class XamlTypeMapper\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlTypeMapper.#ctor(System.String[])\n  id: '#ctor(System.String[])'\n  parent: System.Windows.Markup.XamlTypeMapper\n  langs:\n  - csharp\n  name: XamlTypeMapper(String[])\n  nameWithType: XamlTypeMapper.XamlTypeMapper(String[])\n  fullName: System.Windows.Markup.XamlTypeMapper.XamlTypeMapper(String[])\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> class by specifying an array of assembly names that the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> should use.\n  syntax:\n    content: public XamlTypeMapper (string[] assemblyNames);\n    parameters:\n    - id: assemblyNames\n      type: System.String[]\n      description: The array of assembly names the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> should use.\n  overload: System.Windows.Markup.XamlTypeMapper.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyNames</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlTypeMapper.#ctor(System.String[],System.Windows.Markup.NamespaceMapEntry[])\n  id: '#ctor(System.String[],System.Windows.Markup.NamespaceMapEntry[])'\n  parent: System.Windows.Markup.XamlTypeMapper\n  langs:\n  - csharp\n  name: XamlTypeMapper(String[],NamespaceMapEntry[])\n  nameWithType: XamlTypeMapper.XamlTypeMapper(String[],NamespaceMapEntry[])\n  fullName: System.Windows.Markup.XamlTypeMapper.XamlTypeMapper(String[],NamespaceMapEntry[])\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> class, using the specified array of assembly names and the specified namespace maps.\n  syntax:\n    content: public XamlTypeMapper (string[] assemblyNames, System.Windows.Markup.NamespaceMapEntry[] namespaceMaps);\n    parameters:\n    - id: assemblyNames\n      type: System.String[]\n      description: The array of assembly names the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> should use.\n    - id: namespaceMaps\n      type: System.Windows.Markup.NamespaceMapEntry[]\n      description: The array of namespace maps the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> should use.\n  overload: System.Windows.Markup.XamlTypeMapper.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyNames</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(System.String,System.String,System.String)\n  id: AddMappingProcessingInstruction(System.String,System.String,System.String)\n  parent: System.Windows.Markup.XamlTypeMapper\n  langs:\n  - csharp\n  name: AddMappingProcessingInstruction(String,String,String)\n  nameWithType: XamlTypeMapper.AddMappingProcessingInstruction(String,String,String)\n  fullName: System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(String,String,String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Defines a mapping between an XML namespace and CLR namespaces in assemblies, and adds these to the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> information.\n  remarks: \"AddMappingProcessingInstruction is a programmatic way to add a mapping.  For example, the different parts of the following XAML mapping instruction correspond to the parameters of the AddMappingProcessingInstruction:  \\n  \\n```  \\n<Window xmlns:SDK=\\\"clr-namespace:Samples;assembly=SDKSamples\\\">  \\n...  \\n```  \\n  \\n The `xmlNamespace` is `SDK`, the `clrNamespace` is `Samples`, and the `assemblyName` is `SDKSamples`.\"\n  syntax:\n    content: public void AddMappingProcessingInstruction (string xmlNamespace, string clrNamespace, string assemblyName);\n    parameters:\n    - id: xmlNamespace\n      type: System.String\n      description: The prefix for the XML namespace..\n    - id: clrNamespace\n      type: System.String\n      description: The CLR  namespace that contains the types to map.\n    - id: assemblyName\n      type: System.String\n      description: The assembly that contains the CLR  namespace.\n  overload: System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>xmlNamespace</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>clrNamespace</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>assemblyName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlTypeMapper.AllowInternalType(System.Type)\n  id: AllowInternalType(System.Type)\n  parent: System.Windows.Markup.XamlTypeMapper\n  langs:\n  - csharp\n  name: AllowInternalType(Type)\n  nameWithType: XamlTypeMapper.AllowInternalType(Type)\n  fullName: System.Windows.Markup.XamlTypeMapper.AllowInternalType(Type)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Requests permission for a <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> derived type that is called under full trust to access a specific internal type.\n  remarks: \"If not overridden by a subclass, AllowInternalType always returns `false`.  \\n  \\n When overridden by a subclass, the behavior should be that AllowInternalType should return `true` if the internal type can be accessed; otherwise, `false`.\"\n  syntax:\n    content: protected virtual bool AllowInternalType (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type to access.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the internal type can be accessed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Markup.XamlTypeMapper.AllowInternalType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlTypeMapper.DefaultMapper\n  id: DefaultMapper\n  parent: System.Windows.Markup.XamlTypeMapper\n  langs:\n  - csharp\n  name: DefaultMapper\n  nameWithType: XamlTypeMapper.DefaultMapper\n  fullName: System.Windows.Markup.XamlTypeMapper.DefaultMapper\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets an instance of the <xref href=\"System.Windows.Markup.XamlTypeMapper\"></xref> to use if one has not been specified.\n  remarks: \"The default mapper only works on a default assembly list. No specific information about assemblies (as is specified in <xref:System.Windows.Markup.XamlTypeMapper> constructors) is used. In the current implementation the default assembly list is: `WindowsBase`, `PresentationCore`, `PresentationFramework`.  \\n  \\n Using the default mapper does not mean that you cannot use custom assemblies/types in XAML at all. It only means that if you do use custom types/assemblies, you must then use the conventional XAML technique of creating the mappings as `xmlns` attributes in each XAML page where the types/assemblies are referenced, as opposed to a type mapper API. For more information, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static System.Windows.Markup.XamlTypeMapper DefaultMapper { get; }\n    return:\n      type: System.Windows.Markup.XamlTypeMapper\n      description: The default type mapper.\n  overload: System.Windows.Markup.XamlTypeMapper.DefaultMapper*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlTypeMapper.GetType(System.String,System.String)\n  id: GetType(System.String,System.String)\n  parent: System.Windows.Markup.XamlTypeMapper\n  langs:\n  - csharp\n  name: GetType(String,String)\n  nameWithType: XamlTypeMapper.GetType(String,String)\n  fullName: System.Windows.Markup.XamlTypeMapper.GetType(String,String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets the CLR <xref:System.Type> that a given XAML element is mapped to, using the specified XML namespace prefix and element name.\n  remarks: \"If a type cannot be found that maps to the provided information, `null` is returned.  \\n  \\n Do not include the prefix as part of `localName`. For any prefixed XAML element information, separate it into `xmlNamespace` and `localName` components for this API call.\"\n  syntax:\n    content: public Type GetType (string xmlNamespace, string localName);\n    parameters:\n    - id: xmlNamespace\n      type: System.String\n      description: The specified XML namespace prefix.\n    - id: localName\n      type: System.String\n      description: The \"local\" name of the XAML element to obtain the mapped <xref:System.Type> for. Local in this context means as mapped versus the provided `xmlNamespace`.\n    return:\n      type: System.Type\n      description: The <xref:System.Type> for the object, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no mapping could be resolved.\n  overload: System.Windows.Markup.XamlTypeMapper.GetType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>xmlNamespace</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>localName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(System.String,System.String)\n  id: SetAssemblyPath(System.String,System.String)\n  parent: System.Windows.Markup.XamlTypeMapper\n  langs:\n  - csharp\n  name: SetAssemblyPath(String,String)\n  nameWithType: XamlTypeMapper.SetAssemblyPath(String,String)\n  fullName: System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(String,String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Specifies the path to use when loading an assembly.\n  syntax:\n    content: public void SetAssemblyPath (string assemblyName, string assemblyPath);\n    parameters:\n    - id: assemblyName\n      type: System.String\n      description: The short name of the assembly without an extension or path specified (equivalent to &lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;).\n    - id: assemblyPath\n      type: System.String\n      description: The file path of the assembly. The assembly path must be a full file path containing a file extension.\n  overload: System.Windows.Markup.XamlTypeMapper.SetAssemblyPath*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>assemblyName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>assemblyPath</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.Windows.Markup.XamlParseException\n    commentId: T:System.Windows.Markup.XamlParseException\n    description: \"<code>assemblyName</code> is <xref:System.String>  \\n  \\n -or-  \\n  \\n <code>assemblyPath</code> is <xref:System.String>  \\n  \\n -or-  \\n  \\n <code>assemblyPath</code> is not a full file path containing a file extension.\"\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Windows.Markup.XamlParseException\n  parent: System.Windows.Markup\n  isExternal: false\n  name: XamlParseException\n  nameWithType: XamlParseException\n  fullName: System.Windows.Markup.XamlParseException\n- uid: System.Windows.Markup.XamlTypeMapper.#ctor(System.String[])\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: XamlTypeMapper(String[])\n  nameWithType: XamlTypeMapper.XamlTypeMapper(String[])\n  fullName: System.Windows.Markup.XamlTypeMapper.XamlTypeMapper(String[])\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Markup.XamlTypeMapper.#ctor(System.String[],System.Windows.Markup.NamespaceMapEntry[])\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: XamlTypeMapper(String[],NamespaceMapEntry[])\n  nameWithType: XamlTypeMapper.XamlTypeMapper(String[],NamespaceMapEntry[])\n  fullName: System.Windows.Markup.XamlTypeMapper.XamlTypeMapper(String[],NamespaceMapEntry[])\n- uid: System.Windows.Markup.NamespaceMapEntry[]\n  parent: System.Windows.Markup\n  isExternal: false\n  name: NamespaceMapEntry\n  nameWithType: NamespaceMapEntry\n  fullName: System.Windows.Markup.NamespaceMapEntry[]\n  spec.csharp:\n  - uid: System.Windows.Markup.NamespaceMapEntry\n    name: NamespaceMapEntry\n    nameWithType: NamespaceMapEntry\n    fullName: NamespaceMapEntry[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(System.String,System.String,System.String)\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: AddMappingProcessingInstruction(String,String,String)\n  nameWithType: XamlTypeMapper.AddMappingProcessingInstruction(String,String,String)\n  fullName: System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(String,String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Markup.XamlTypeMapper.AllowInternalType(System.Type)\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: AllowInternalType(Type)\n  nameWithType: XamlTypeMapper.AllowInternalType(Type)\n  fullName: System.Windows.Markup.XamlTypeMapper.AllowInternalType(Type)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Markup.XamlTypeMapper.DefaultMapper\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: DefaultMapper\n  nameWithType: XamlTypeMapper.DefaultMapper\n  fullName: System.Windows.Markup.XamlTypeMapper.DefaultMapper\n- uid: System.Windows.Markup.XamlTypeMapper\n  parent: System.Windows.Markup\n  isExternal: false\n  name: XamlTypeMapper\n  nameWithType: XamlTypeMapper\n  fullName: System.Windows.Markup.XamlTypeMapper\n- uid: System.Windows.Markup.XamlTypeMapper.GetType(System.String,System.String)\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: GetType(String,String)\n  nameWithType: XamlTypeMapper.GetType(String,String)\n  fullName: System.Windows.Markup.XamlTypeMapper.GetType(String,String)\n- uid: System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(System.String,System.String)\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: SetAssemblyPath(String,String)\n  nameWithType: XamlTypeMapper.SetAssemblyPath(String,String)\n  fullName: System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(String,String)\n- uid: System.Windows.Markup.XamlTypeMapper.#ctor*\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: XamlTypeMapper\n  nameWithType: XamlTypeMapper.XamlTypeMapper\n- uid: System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction*\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: AddMappingProcessingInstruction\n  nameWithType: XamlTypeMapper.AddMappingProcessingInstruction\n- uid: System.Windows.Markup.XamlTypeMapper.AllowInternalType*\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: AllowInternalType\n  nameWithType: XamlTypeMapper.AllowInternalType\n- uid: System.Windows.Markup.XamlTypeMapper.DefaultMapper*\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: DefaultMapper\n  nameWithType: XamlTypeMapper.DefaultMapper\n- uid: System.Windows.Markup.XamlTypeMapper.GetType*\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: GetType\n  nameWithType: XamlTypeMapper.GetType\n- uid: System.Windows.Markup.XamlTypeMapper.SetAssemblyPath*\n  parent: System.Windows.Markup.XamlTypeMapper\n  isExternal: false\n  name: SetAssemblyPath\n  nameWithType: XamlTypeMapper.SetAssemblyPath\n"}