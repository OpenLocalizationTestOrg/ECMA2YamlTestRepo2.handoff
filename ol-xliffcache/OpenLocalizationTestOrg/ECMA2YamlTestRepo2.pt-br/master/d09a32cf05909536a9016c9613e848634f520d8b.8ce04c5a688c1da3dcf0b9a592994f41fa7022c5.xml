{"nodes":[{"pos":[2836,2962],"content":"Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.","pos":[0,126]}]},{"pos":[2975,4472],"content":"This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) . For most WPF framework-level application development purposes, FrameworkPropertyMetadata is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>. This is true both for existing dependency properties and for most custom dependency property scenarios.       The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.       Several constructor signatures for creating a FrameworkPropertyMetadata instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter. The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after FrameworkPropertyMetadata is constructed. From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.      <a name=\"xamlTextUsage_FrameworkPropertyMetadata\"></a>    ## XAML Text Usage    This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class derives from &lt;xref:System.Windows.PropertyMetadata&gt; (through &lt;xref:System.Windows.UIPropertyMetadata&gt;) .","pos":[0,115],"source":"This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) ."},{"content":"For most WPF framework-level application development purposes, FrameworkPropertyMetadata is the type used for dependency property metadata, rather than the base metadata types &lt;xref:System.Windows.PropertyMetadata&gt; or &lt;xref:System.Windows.UIPropertyMetadata&gt;.","pos":[116,375],"source":" For most WPF framework-level application development purposes, FrameworkPropertyMetadata is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>."},{"content":"This is true both for existing dependency properties and for most custom dependency property scenarios.","pos":[376,479]},{"content":"The members declared by this class that supplement the &lt;xref:System.Windows.PropertyMetadata&gt; base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.","pos":[486,749],"source":"       The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout."},{"content":"Several constructor signatures for creating a FrameworkPropertyMetadata instance take a &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; parameter.","pos":[756,909],"source":"       Several constructor signatures for creating a FrameworkPropertyMetadata instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter."},{"content":"The &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after FrameworkPropertyMetadata is constructed.","pos":[910,1118],"source":" The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after FrameworkPropertyMetadata is constructed."},{"content":"From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.","pos":[1119,1299]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    This class is not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1305,1487],"source":"<a name=\"xamlTextUsage_FrameworkPropertyMetadata\"></a>    ## XAML Text Usage    This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[6355,6457],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class."},{"pos":[6469,6734],"content":"This signature initializes all values of FrameworkPropertyMetadata to their property defaults. <xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This signature initializes all values of FrameworkPropertyMetadata to their property defaults.","pos":[0,94]},{"content":"&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; will be <ph id=\"ph1\">`null`</ph>, and the various &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; Boolean properties will be <ph id=\"ph2\">`false`</ph>.","pos":[95,265],"source":" <xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`."}]},{"pos":[7387,7522],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified default value.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the specified default value."},{"pos":[7535,8265],"content":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,191],"source":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.","pos":[192,387]},{"content":"The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.","pos":[388,557]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.","pos":[564,728],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."}]},{"pos":[8738,8831],"content":"The default value of the dependency property, usually provided as a value of a specific type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value of the dependency property, usually provided as a value of a specific type.","pos":[0,93]}]},{"pos":[9000,9115],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","needQuote":true,"needEscape":true,"source":"<code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks."},{"pos":[9713,9903],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> callback.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> callback."},{"pos":[10484,10612],"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","pos":[0,128]}]},{"pos":[11381,11552],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the provided default value and framework-level metadata options.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework-level metadata options."},{"pos":[11565,12702],"content":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,191],"source":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.","pos":[192,387]},{"content":"The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.","pos":[388,557]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.","pos":[564,728],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."},{"content":"Values marked as set flags in the <ph id=\"ph1\">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id=\"ph2\">`true`</ph>.","pos":[735,969],"source":"       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`."},{"content":"You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","pos":[970,1133]}]},{"pos":[13234,13327],"content":"The default value of the dependency property, usually provided as a value of a specific type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value of the dependency property, usually provided as a value of a specific type.","pos":[0,93]}]},{"pos":[13423,13668],"content":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata option flags (a combination of <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values).","pos":[0,121],"source":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values)."},{"content":"These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","pos":[122,245]}]},{"pos":[13837,13952],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","needQuote":true,"needEscape":true,"source":"<code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks."},{"pos":[14599,14816],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the provided default value and specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> callback.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> callback."},{"pos":[14829,15559],"content":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,191],"source":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.","pos":[192,387]},{"content":"The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.","pos":[388,557]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.","pos":[564,728],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."}]},{"pos":[16096,16189],"content":"The default value of the dependency property, usually provided as a value of a specific type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value of the dependency property, usually provided as a value of a specific type.","pos":[0,93]}]},{"pos":[16294,16422],"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","pos":[0,128]}]},{"pos":[16591,16706],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","needQuote":true,"needEscape":true,"source":"<code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks."},{"pos":[17434,17565],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified callbacks.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the specified callbacks."},{"pos":[17577,17707],"content":"This implementation calls a base initializer and then adds the <ph id=\"ph1\">`coerceValueCallback`</ph> by setting the property on the base instance.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance."},{"pos":[18318,18446],"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","pos":[0,128]}]},{"pos":[18543,18714],"content":"A reference to a handler implementation will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> for this dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; for this dependency property.","pos":[0,171],"source":"A reference to a handler implementation will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> for this dependency property."}]},{"pos":[19633,19882],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, and specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> callback.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework metadata options, and specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> callback."},{"pos":[19895,21025],"content":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,191],"source":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.","pos":[192,387]},{"content":"The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.","pos":[388,557]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.","pos":[564,728],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."},{"content":"Values marked as set flags in the <ph id=\"ph1\">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id=\"ph2\">`true`</ph>.","pos":[735,969],"source":"       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`."},{"content":"You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","pos":[970,1126]}]},{"pos":[21629,21722],"content":"The default value of the dependency property, usually provided as a value of a specific type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value of the dependency property, usually provided as a value of a specific type.","pos":[0,93]}]},{"pos":[21818,22063],"content":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata option flags (a combination of <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values).","pos":[0,121],"source":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values)."},{"content":"These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","pos":[122,245]}]},{"pos":[22168,22296],"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","pos":[0,128]}]},{"pos":[22465,22580],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","needQuote":true,"needEscape":true,"source":"<code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks."},{"pos":[23357,23515],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the provided default value and specified callbacks.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and specified callbacks."},{"pos":[23528,24258],"content":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,191],"source":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.","pos":[192,387]},{"content":"The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.","pos":[388,557]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.","pos":[564,728],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."}]},{"pos":[24851,24933],"content":"The default value of the dependency property, usually provided as a specific type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value of the dependency property, usually provided as a specific type.","pos":[0,82]}]},{"pos":[25038,25166],"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","pos":[0,128]}]},{"pos":[25263,25439],"content":"A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> for this dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; for this dependency property.","pos":[0,176],"source":"A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> for this dependency property."}]},{"pos":[25608,25723],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","needQuote":true,"needEscape":true,"source":"<code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks."},{"pos":[26695,26885],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, and specified callbacks.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework metadata options, and specified callbacks."},{"pos":[26898,28028],"content":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,191],"source":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.","pos":[192,387]},{"content":"The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.","pos":[388,557]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.","pos":[564,728],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."},{"content":"Values marked as set flags in the <ph id=\"ph1\">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id=\"ph2\">`true`</ph>.","pos":[735,969],"source":"       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`."},{"content":"You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","pos":[970,1126]}]},{"pos":[28696,28778],"content":"The default value of the dependency property, usually provided as a specific type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value of the dependency property, usually provided as a specific type.","pos":[0,82]}]},{"pos":[28874,29119],"content":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata option flags (a combination of <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values).","pos":[0,121],"source":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values)."},{"content":"These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","pos":[122,245]}]},{"pos":[29224,29352],"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","pos":[0,128]}]},{"pos":[29449,29618],"content":"A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> against this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.","pos":[0,169],"source":"A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> against this property."}]},{"pos":[29787,29902],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","needQuote":true,"needEscape":true,"source":"<code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks."},{"pos":[30928,31183],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property."},{"pos":[31196,32556],"content":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.       The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,191],"source":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.","pos":[192,387]},{"content":"The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.","pos":[388,557]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.","pos":[564,728],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."},{"content":"The <ph id=\"ph1\">`isAnimationProhibited`</ph> parameter sets the initial value of the &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; property declared by the immediate base &lt;xref:System.Windows.UIPropertyMetadata&gt; class.","pos":[735,956],"source":"       The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class."},{"content":"Values marked as set flags in the <ph id=\"ph1\">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id=\"ph2\">`true`</ph>.","pos":[963,1197],"source":"       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`."},{"content":"You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","pos":[1198,1354]}]},{"pos":[33260,33342],"content":"The default value of the dependency property, usually provided as a specific type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value of the dependency property, usually provided as a specific type.","pos":[0,82]}]},{"pos":[33438,33683],"content":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata option flags (a combination of <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values).","pos":[0,121],"source":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values)."},{"content":"These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","pos":[122,245]}]},{"pos":[33788,33916],"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","pos":[0,128]}]},{"pos":[34013,34188],"content":"A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> on this dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; on this dependency property.","pos":[0,175],"source":"A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> on this dependency property."}]},{"pos":[34267,34718],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to prevent the property system from animating the property that this metadata is applied to. Such properties will raise a run-time exception originating from the property system if animations of them are attempted. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to permit animating the property. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to prevent the property system from animating the property that this metadata is applied to.","pos":[0,153],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to prevent the property system from animating the property that this metadata is applied to."},{"content":"Such properties will raise a run-time exception originating from the property system if animations of them are attempted.","pos":[154,275]},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to permit animating the property.","pos":[276,372],"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to permit animating the property."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[373,451],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[34887,35002],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","needQuote":true,"needEscape":true,"source":"<code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks."},{"pos":[36168,36462],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadata\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default."},{"pos":[36475,37979],"content":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.       The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.       For more information about the update source behavior for bindings, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,191],"source":"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.","pos":[192,387]},{"content":"The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.","pos":[388,557]},{"content":"The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.","pos":[564,728],"source":"       The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."},{"content":"The <ph id=\"ph1\">`isAnimationProhibited`</ph> parameter sets the initial value of the &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; property declared by the immediate base &lt;xref:System.Windows.UIPropertyMetadata&gt; class.","pos":[735,956],"source":"       The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class."},{"content":"For more information about the update source behavior for bindings, see <bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[963,1098],"source":"       For more information about the update source behavior for bindings, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"Values marked as set flags in the <ph id=\"ph1\">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id=\"ph2\">`true`</ph>.","pos":[1105,1339],"source":"       Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`."},{"content":"You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.","pos":[1340,1496]}]},{"pos":[38697,38779],"content":"The default value of the dependency property, usually provided as a specific type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value of the dependency property, usually provided as a specific type.","pos":[0,82]}]},{"pos":[38875,39120],"content":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata option flags (a combination of <bpt id=\"p1\">&lt;xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values).","pos":[0,121],"source":"The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values)."},{"content":"These options specify characteristics of the dependency property that interact with systems such as layout or data binding.","pos":[122,245]}]},{"pos":[39225,39353],"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that the property system will call whenever the effective value of the property changes.","pos":[0,128]}]},{"pos":[39450,39619],"content":"A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> against this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.","pos":[0,169],"source":"A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> against this property."}]},{"pos":[39698,40052],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to prevent the property system from animating the property that this metadata is applied to. Such properties will raise a run-time exception originating from the property system if animations of them are attempted. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to prevent the property system from animating the property that this metadata is applied to.","pos":[0,153],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to prevent the property system from animating the property that this metadata is applied to."},{"content":"Such properties will raise a run-time exception originating from the property system if animations of them are attempted.","pos":[154,275]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[276,354],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[40161,40422],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.UpdateSourceTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use when bindings for this property are applied that have their <bpt id=\"p2\">&lt;xref href=\"System.Windows.Data.UpdateSourceTrigger\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> set to <bpt id=\"p3\">&lt;xref href=\"System.Windows.Data.UpdateSourceTrigger\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref> to use when bindings for this property are applied that have their <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref> set to <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref>."},{"pos":[40591,40706],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; see Remarks.","needQuote":true,"needEscape":true,"source":"<code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks."},{"pos":[41129,41264],"content":"Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.","pos":[0,135]}]},{"pos":[41277,43182],"content":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsArrange set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>). Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsArrange is `true`.       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_AffectsArrange\"></a>    ## XAML Text Usage    Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.","pos":[0,270],"source":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element."},{"content":"As part of that logic, dependency properties that change effective value and have metadata with AffectsArrange set to <ph id=\"ph1\">`true`</ph> will initiate a deferred request to invalidate the visuals for that element (a call to &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;).","pos":[271,537],"source":" As part of that logic, dependency properties that change effective value and have metadata with AffectsArrange set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>)."},{"content":"Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.","pos":[538,779]},{"content":"Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsArrange is <ph id=\"ph1\">`true`</ph>.","pos":[786,970],"source":"       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsArrange is `true`."},{"content":"Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[977,1105],"source":"       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[1106,1175]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[1176,1549],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[1550,1699],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_AffectsArrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are either not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1705,1895],"source":"<a name=\"xamlTextUsage_AffectsArrange\"></a>    ## XAML Text Usage    Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[44136,44445],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,230],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[231,309],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[44639,44785],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[45208,45343],"content":"Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.","pos":[0,135]}]},{"pos":[45356,47189],"content":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsMeasure set to `true` will initiate a deferred request to invalidate the visuals for that element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsMeasure is `true`.       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_AffectsMeasure\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.","pos":[0,270],"source":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element."},{"content":"As part of that logic, dependency properties that change effective value and have metadata with AffectsMeasure set to <ph id=\"ph1\">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.","pos":[271,472],"source":" As part of that logic, dependency properties that change effective value and have metadata with AffectsMeasure set to `true` will initiate a deferred request to invalidate the visuals for that element."},{"content":"Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.","pos":[473,714]},{"content":"Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsMeasure is <ph id=\"ph1\">`true`</ph>.","pos":[721,905],"source":"       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsMeasure is `true`."},{"content":"Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[912,1040],"source":"       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[1041,1110]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[1111,1484],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[1485,1634],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_AffectsMeasure\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1640,1823],"source":"<a name=\"xamlTextUsage_AffectsMeasure\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[48143,48452],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,230],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[231,309],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[48646,48792],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[49245,49411],"content":"Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.","pos":[0,166]}]},{"pos":[49424,52672],"content":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsParentArrange set to `true` will initiate a deferred request to invalidate the visuals for the parent element.       Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using AffectsParentArrange because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`. That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate. AffectsParentArrange is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class. In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering. The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host. For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed. Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> attached property has metadata where AffectsParentArrange is `true`. Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.       Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsParentArrange is `true`.       Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_AffectsParentArrange\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.","pos":[0,270],"source":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element."},{"content":"As part of that logic, dependency properties that change effective value and have metadata with AffectsParentArrange set to <ph id=\"ph1\">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.","pos":[271,484],"source":" As part of that logic, dependency properties that change effective value and have metadata with AffectsParentArrange set to `true` will initiate a deferred request to invalidate the visuals for the parent element."},{"content":"Generally, you do not need to report changes of a &lt;xref:System.Windows.FrameworkElement&gt; property to a parent element using AffectsParentArrange because the element itself would already have its own &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; as <ph id=\"ph1\">`true`</ph>.","pos":[491,766],"source":"       Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using AffectsParentArrange because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`."},{"content":"That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.","pos":[767,885]},{"content":"AffectsParentArrange is sometimes used for a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class.","pos":[886,991],"source":" AffectsParentArrange is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class."},{"content":"In this case, the child element sets a property, but a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class does not control its own rendering.","pos":[992,1142],"source":" In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering."},{"content":"The rendering is handled by a &lt;xref:System.Windows.FrameworkElement&gt; parent element that serves as the content host.","pos":[1143,1259],"source":" The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host."},{"content":"For instance, a change to the value of the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.","pos":[1260,1514],"source":" For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed."},{"content":"Therefore, the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property has metadata where AffectsParentArrange is <ph id=\"ph1\">`true`</ph>.","pos":[1515,1673],"source":" Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> attached property has metadata where AffectsParentArrange is `true`."},{"content":"Another example is &lt;xref:System.Windows.Controls.Control.Padding%2A&gt;; when this property changes, the parent might change the positioning of the child, depending on available space.","pos":[1674,1855],"source":" Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space."},{"content":"Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.","pos":[1862,2109]},{"content":"Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsParentArrange is <ph id=\"ph1\">`true`</ph>.","pos":[2116,2306],"source":"       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsParentArrange is `true`."},{"content":"Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[2313,2445],"source":"       Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[2446,2515]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[2516,2889],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[2890,3039],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_AffectsParentArrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[3045,3234],"source":"<a name=\"xamlTextUsage_AffectsParentArrange\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[52802,53146],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,265],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[266,344],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[53346,53492],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[53945,54111],"content":"Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.","pos":[0,166]}]},{"pos":[54124,57612],"content":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsParentMeasure set to `true` will initiate a deferred request to invalidate the visuals for the parent element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.       Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using AffectsParentMeasure because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`. That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate. AffectsParentMeasure is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class. In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering. The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host. For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size. Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> property has metadata where AffectsParentMeasure is `true`.       Content host elements also frequently look for changes in dependency properties where AffectsParentMeasure is `true`, as part of content host rendering logic. For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsParentMeasure is `true`.       Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_AffectsParentMeasure\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.","pos":[0,270],"source":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element."},{"content":"As part of that logic, dependency properties that change effective value and have metadata with AffectsParentMeasure set to <ph id=\"ph1\">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.","pos":[271,484],"source":" As part of that logic, dependency properties that change effective value and have metadata with AffectsParentMeasure set to `true` will initiate a deferred request to invalidate the visuals for the parent element."},{"content":"Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.","pos":[485,732]},{"content":"Generally, you do not need to report changes of a &lt;xref:System.Windows.FrameworkElement&gt; property to a parent element using AffectsParentMeasure because the element itself would already have its own &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; as <ph id=\"ph1\">`true`</ph>.","pos":[739,1014],"source":"       Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using AffectsParentMeasure because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`."},{"content":"That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.","pos":[1015,1138]},{"content":"AffectsParentMeasure is sometimes used for a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class.","pos":[1139,1244],"source":" AffectsParentMeasure is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class."},{"content":"In this case, the child element sets a property, but a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class does not control its own rendering.","pos":[1245,1395],"source":" In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering."},{"content":"The rendering is handled by a &lt;xref:System.Windows.FrameworkElement&gt; parent element that serves as the content host.","pos":[1396,1512],"source":" The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host."},{"content":"For instance, a change to the value of the &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.","pos":[1513,1811],"source":" For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size."},{"content":"Therefore, the &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; property has metadata where AffectsParentMeasure is <ph id=\"ph1\">`true`</ph>.","pos":[1812,1969],"source":" Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> property has metadata where AffectsParentMeasure is `true`."},{"content":"Content host elements also frequently look for changes in dependency properties where AffectsParentMeasure is <ph id=\"ph1\">`true`</ph>, as part of content host rendering logic.","pos":[1976,2134],"source":"       Content host elements also frequently look for changes in dependency properties where AffectsParentMeasure is `true`, as part of content host rendering logic."},{"content":"For instance, the &lt;xref:System.Windows.Controls.TextBox&gt; element must respond to certain changes within text that might require that the bounding box of the &lt;xref:System.Windows.Controls.TextBox&gt; itself be changed.","pos":[2135,2349],"source":" For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed."},{"content":"Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsParentMeasure is <ph id=\"ph1\">`true`</ph>.","pos":[2356,2546],"source":"       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsParentMeasure is `true`."},{"content":"Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[2553,2685],"source":"       Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[2686,2755]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[2756,3129],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[3130,3279],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_AffectsParentMeasure\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[3285,3474],"source":"<a name=\"xamlTextUsage_AffectsParentMeasure\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[57742,58085],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.The default is <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[58285,58431],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[58849,59058],"content":"Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.","pos":[0,209]}]},{"pos":[59071,60904],"content":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsRender set to `true` will initiate a deferred request to invalidate the visuals for that element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsRender unless you are substantially replacing or modifying the WPF framework-level layout behavior.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsRender is `true`.       Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_AffectsRender\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.","pos":[0,270],"source":"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element."},{"content":"As part of that logic, dependency properties that change effective value and have metadata with AffectsRender set to <ph id=\"ph1\">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.","pos":[271,471],"source":" As part of that logic, dependency properties that change effective value and have metadata with AffectsRender set to `true` will initiate a deferred request to invalidate the visuals for that element."},{"content":"Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsRender unless you are substantially replacing or modifying the WPF framework-level layout behavior.","pos":[472,712]},{"content":"Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsRender is <ph id=\"ph1\">`true`</ph>.","pos":[719,902],"source":"       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsRender is `true`."},{"content":"Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[909,1041],"source":"       Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[1042,1111]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[1112,1485],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[1486,1635],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_AffectsRender\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1641,1823],"source":"<a name=\"xamlTextUsage_AffectsRender\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[61857,62147],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists affects rendering; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists affects rendering; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,211],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists affects rendering; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[212,290],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[62340,62486],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[62939,63021],"content":"Gets or sets a value that indicates whether the property binds two-way by default.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the property binds two-way by default.","pos":[0,82]}]},{"pos":[63034,64780],"content":"In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax.       In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>.       This property only reports the default binding update characteristics of the dependency property in general. Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.       Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_BindsTwoWayByDefault\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In absence of this property being <ph id=\"ph1\">`true`</ph>, binding updates are one-way by default, based on the default behavior of the &lt;xref:System.Windows.Data.Binding&gt; constructors or equivalent <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax.","pos":[0,254],"source":"In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax."},{"content":"In existing elements, you will usually find this property set to <ph id=\"ph1\">`true`</ph> in metadata for dependency properties that both report state and are modifiable by user action, for example &lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;.","pos":[261,531],"source":"       In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>."},{"content":"This property only reports the default binding update characteristics of the dependency property in general.","pos":[538,646]},{"content":"Any binding set to this property on an instance can locally set the &lt;xref:System.Windows.Data.Binding.Mode%2A&gt; property of the binding and change this default.","pos":[647,806],"source":" Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default."},{"content":"Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[813,945],"source":"       Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[946,1015]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[1016,1389],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[1390,1539],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_BindsTwoWayByDefault\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1545,1734],"source":"<a name=\"xamlTextUsage_BindsTwoWayByDefault\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[65740,66037],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists binds two-way by default; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists binds two-way by default; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,218],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists binds two-way by default; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[219,297],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[66237,66383],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[66866,67172],"content":"Gets or sets the default for <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.UpdateSourceTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use when bindings for the property with this metadata are applied, which have their <bpt id=\"p2\">&lt;xref href=\"System.Windows.Data.UpdateSourceTrigger\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> set to <bpt id=\"p3\">&lt;xref href=\"System.Windows.Data.UpdateSourceTrigger\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the default for <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref> to use when bindings for the property with this metadata are applied, which have their <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref> set to <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref>."},{"pos":[67185,68114],"content":"Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_DefaultUpdateSourceTrigger\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[0,128],"source":"Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[129,198]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[199,572],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[573,722],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_DefaultUpdateSourceTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[728,923],"source":"<a name=\"xamlTextUsage_DefaultUpdateSourceTrigger\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[68310,68410],"content":"A value of the enumeration, other than <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.UpdateSourceTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A value of the enumeration, other than <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref>."},{"pos":[68600,68765],"content":"This property is set to <bpt id=\"p1\">&lt;xref href=\"System.Windows.Data.UpdateSourceTrigger\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; the value you set is supposed to become the default when requested by bindings.","needQuote":true,"needEscape":true,"source":"This property is set to <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref>; the value you set is supposed to become the default when requested by bindings."},{"pos":[68876,69022],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[69415,69511],"content":"Gets or sets a value that indicates whether the value of the dependency property is inheritable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the value of the dependency property is inheritable.","pos":[0,96]}]},{"pos":[69524,71491],"content":"Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property. Property value inheritance is not enabled by default, and enabling it does have some performance implications. For details, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify Inherits in the metadata.       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_Inherits\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Property value inheritance is a feature of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.","pos":[0,468],"source":"Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property."},{"content":"Property value inheritance is not enabled by default, and enabling it does have some performance implications.","pos":[469,579]},{"content":"For details, see <bpt id=\"p1\">[</bpt>Property Value Inheritance<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[580,665],"source":" For details, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.","pos":[671,905],"source":"      > [!NOTE] >  Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined."},{"content":"Always use &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; to register properties where you specify Inherits in the metadata.","pos":[906,1044],"source":" Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify Inherits in the metadata."},{"content":"Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[1051,1179],"source":"       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[1180,1249]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[1250,1623],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[1624,1773],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_Inherits\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1779,1956],"source":"<a name=\"xamlTextUsage_Inherits\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[72439,72691],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value is inheritable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the property value is inheritable; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,173],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value is inheritable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[174,252],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[72879,73025],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[73478,73568],"content":"Gets a value that indicates whether data binding is supported for the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether data binding is supported for the dependency property.","pos":[0,90]}]},{"pos":[73581,74713],"content":"This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata. This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.       If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).      <a name=\"xamlTextUsage_IsDataBindingAllowed\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property reports <ph id=\"ph1\">`false`</ph> for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;, is set to <ph id=\"ph2\">`true`</ph> in this metadata.","pos":[0,389],"source":"This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata."},{"content":"This property is exposed as a convenience so that callers do not have to check both &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; and &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;.","pos":[390,600],"source":" This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>."},{"content":"If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; (note the slight naming convention difference versus &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;).","pos":[607,929],"source":"       If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>)."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_IsDataBindingAllowed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[935,1124],"source":"<a name=\"xamlTextUsage_IsDataBindingAllowed\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[75668,75968],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data binding is supported on the dependency property to which this metadata applies; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if data binding is supported on the dependency property to which this metadata applies; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,223],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data binding is supported on the dependency property to which this metadata applies; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[224,300],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[76498,76588],"content":"Gets or sets a value that indicates whether the dependency property supports data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the dependency property supports data binding.","pos":[0,90]}]},{"pos":[76601,79092],"content":"Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties. The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful. Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding. Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.       Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for IsNotDataBindable. This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply. To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead. <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and IsNotDataBindable as a single operation, yielding the expected result.       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_IsNotDataBindable\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Note that this metadata property is set to <ph id=\"ph1\">`true`</ph> specifically for properties that should not support data binding, despite being read-write properties.","pos":[0,152],"source":"Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties."},{"content":"The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.","pos":[153,344]},{"content":"Unlike &lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;, this does not merely change a default that can later be changed on a specific binding.","pos":[345,511],"source":" Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding."},{"content":"Setting this property <ph id=\"ph1\">`true`</ph> in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.","pos":[512,693],"source":" Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property."},{"content":"Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report <ph id=\"ph1\">`false`</ph> for IsNotDataBindable.","pos":[700,873],"source":"       Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for IsNotDataBindable."},{"content":"This is because properties that correspond to a &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.","pos":[874,1148],"source":" This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply."},{"content":"To determine whether a given dependency property permits data binding, you should usually check &lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt; instead.","pos":[1149,1325],"source":" To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead."},{"content":"&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt; is a convenience for checking both &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; and IsNotDataBindable as a single operation, yielding the expected result.","pos":[1326,1560],"source":" <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and IsNotDataBindable as a single operation, yielding the expected result."},{"content":"Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[1567,1695],"source":"       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[1696,1765]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[1766,2139],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[2140,2289],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_IsNotDataBindable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[2295,2481],"source":"<a name=\"xamlTextUsage_IsNotDataBindable\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[79219,79480],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property does not support data binding; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the property does not support data binding; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,182],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property does not support data binding; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[183,261],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[79677,79823],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[80211,80378],"content":"Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.","pos":[0,167]}]},{"pos":[80391,81301],"content":"Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_Journal\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[0,128],"source":"Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[129,198]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[199,572],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[573,722],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_Journal\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[728,904],"source":"<a name=\"xamlTextUsage_Journal\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[81418,81727],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,230],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[231,309],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[81914,82060],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[82681,82739],"content":"Enables a merge of the source metadata with base metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enables a merge of the source metadata with base metadata.","pos":[0,58]}]},{"pos":[82751,82816],"content":"This method is used internally when metadata is being overridden.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is used internally when metadata is being overridden.","pos":[0,65]}]},{"pos":[83058,83085],"content":"The base metadata to merge.","needQuote":true,"needEscape":true,"nodes":[{"content":"The base metadata to merge.","pos":[0,27]}]},{"pos":[83164,83222],"content":"The dependency property this metadata is being applied to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dependency property this metadata is being applied to.","pos":[0,58]}]},{"pos":[83854,83962],"content":"Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.","pos":[0,108]}]},{"pos":[83974,84131],"content":"Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Any mutability of the data structure of a &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; instance should be marked as immutable when this method is invoked.","pos":[0,157],"source":"Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked."}]},{"pos":[84338,84401],"content":"The dependency property to which the metadata has been applied.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dependency property to which the metadata has been applied.","pos":[0,63]}]},{"pos":[84466,84648],"content":"The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type associated with this metadata if this is type-specific metadata.","pos":[0,73]},{"content":"If this is default metadata, this value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[74,182],"source":" If this is default metadata, this value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[85220,85384],"content":"Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.","pos":[0,164]}]},{"pos":[85397,87315],"content":"This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries. The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>. The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control. Specifying metadata with OverridesInheritanceBehavior set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_OverridesInheritanceBehavior\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.","pos":[0,146]},{"content":"The canonical example of such a boundary is the contents of a &lt;xref:System.Windows.Controls.Frame&gt;, where the &lt;xref:System.Windows.Controls.Frame&gt; content might get reloaded independently of the existence of the &lt;xref:System.Windows.Controls.Frame&gt;.","pos":[147,396],"source":" The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>."},{"content":"The desired property system behavior is that property value inheritance should not traverse into the contents of the &lt;xref:System.Windows.Controls.Frame&gt;, because these contents might be elements that the application hosting the frame does not own or control.","pos":[397,656],"source":" The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control."},{"content":"Specifying metadata with OverridesInheritanceBehavior set to <ph id=\"ph1\">`true`</ph>, as well as specifying &lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; as <ph id=\"ph2\">`true`</ph>, will cause the property on which the metadata is applied to be inheritable even across the &lt;xref:System.Windows.Controls.Frame&gt; boundary or similar boundaries.","pos":[657,978],"source":" Specifying metadata with OverridesInheritanceBehavior set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries."},{"content":"Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[985,1113],"source":"       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[1114,1183]},{"content":"However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[1184,1557],"source":" However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[1558,1707],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_OverridesInheritanceBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1713,1910],"source":"<a name=\"xamlTextUsage_OverridesInheritanceBehavior\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[87453,87748],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value inheritance should span across certain content boundaries; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the property value inheritance should span across certain content boundaries; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,216],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value inheritance should span across certain content boundaries; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[217,295],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[87956,88102],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]},{"pos":[88605,88744],"content":"Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.","pos":[0,139]}]},{"pos":[88757,90198],"content":"This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own. Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass. Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.      <a name=\"xamlTextUsage_SubPropertiesDoNotAffectRender\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.","pos":[0,133]},{"content":"Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.","pos":[134,376]},{"content":"Setting this option to <ph id=\"ph1\">`true`</ph> is useful for optimizing performance of the WPF framework level layout system implementation.","pos":[377,500],"source":" Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation."},{"content":"Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.","pos":[507,635],"source":"       Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write."},{"content":"This is so they can be adjusted after initialization of the instance.","pos":[636,705]},{"content":"However, once the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.","pos":[706,1078],"source":" However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable."},{"content":"Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id=\"ph1\">`true`</ph> on this metadata instance will raise an exception.","pos":[1079,1228],"source":" Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_SubPropertiesDoNotAffectRender\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[1234,1433],"source":"<a name=\"xamlTextUsage_SubPropertiesDoNotAffectRender\"></a>    ## XAML Text Usage    Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."}]},{"pos":[90338,90622],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if changes to sub-property values do not affect rendering if changed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if changes to sub-property values do not affect rendering if changed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,205],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if changes to sub-property values do not affect rendering if changed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[206,284],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[90832,90978],"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.","pos":[0,146]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.FrameworkPropertyMetadata\n  id: FrameworkPropertyMetadata\n  children:\n  - System.Windows.FrameworkPropertyMetadata.#ctor\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)\n  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)\n  - System.Windows.FrameworkPropertyMetadata.AffectsArrange\n  - System.Windows.FrameworkPropertyMetadata.AffectsMeasure\n  - System.Windows.FrameworkPropertyMetadata.AffectsParentArrange\n  - System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure\n  - System.Windows.FrameworkPropertyMetadata.AffectsRender\n  - System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault\n  - System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\n  - System.Windows.FrameworkPropertyMetadata.Inherits\n  - System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed\n  - System.Windows.FrameworkPropertyMetadata.IsNotDataBindable\n  - System.Windows.FrameworkPropertyMetadata.Journal\n  - System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  - System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)\n  - System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior\n  - System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata\n  nameWithType: FrameworkPropertyMetadata\n  fullName: System.Windows.FrameworkPropertyMetadata\n  type: Class\n  summary: Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.\n  remarks: \"This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) . For most WPF framework-level application development purposes, FrameworkPropertyMetadata is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>. This is true both for existing dependency properties and for most custom dependency property scenarios.  \\n  \\n The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.  \\n  \\n Several constructor signatures for creating a FrameworkPropertyMetadata instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter. The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after FrameworkPropertyMetadata is constructed. From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.  \\n  \\n<a name=\\\"xamlTextUsage_FrameworkPropertyMetadata\\\"></a>   \\n## XAML Text Usage  \\n This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  example:\n  - \"The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type. That metadata is cast to FrameworkPropertyMetadata. If the cast returned a valid FrameworkPropertyMetadata, then various FrameworkPropertyMetadata property values are reported through a simple UI (not shown).  \\n  \\n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \\n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]\"\n  syntax:\n    content: 'public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata'\n  inheritance:\n  - System.Object\n  - System.Windows.PropertyMetadata\n  - System.Windows.UIPropertyMetadata\n  implements: []\n  inheritedMembers:\n  - System.Windows.PropertyMetadata.CoerceValueCallback\n  - System.Windows.PropertyMetadata.DefaultValue\n  - System.Windows.PropertyMetadata.IsSealed\n  - System.Windows.PropertyMetadata.PropertyChangedCallback\n  - System.Windows.UIPropertyMetadata.IsAnimationProhibited\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor\n  id: '#ctor'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata()\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class.\n  remarks: This signature initializes all values of FrameworkPropertyMetadata to their property defaults. <xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.\n  syntax:\n    content: public FrameworkPropertyMetadata ();\n    parameters: []\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(Object)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the specified default value.\n  remarks: \"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.\"\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor1param)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (object defaultValue);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a value of a specific type.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)\n  id: '#ctor(System.Windows.PropertyChangedCallback)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(PropertyChangedCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> callback.\n  remarks: ''\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor1paramcallback)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);\n    parameters:\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)\n  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework-level metadata options.\n  remarks: \"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \\n  \\n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.\"\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a value of a specific type.\n    - id: flags\n      type: System.Windows.FrameworkPropertyMetadataOptions\n      description: The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)\n  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> callback.\n  remarks: \"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.\"\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor2param)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a value of a specific type.\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  id: '#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the specified callbacks.\n  remarks: This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_pcc_cvc)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);\n    parameters:\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.\n    - id: coerceValueCallback\n      type: System.Windows.CoerceValueCallback\n      description: A reference to a handler implementation will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> for this dependency property.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)\n  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework metadata options, and specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> callback.\n  remarks: \"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \\n  \\n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.\"\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a value of a specific type.\n    - id: flags\n      type: System.Windows.FrameworkPropertyMetadataOptions\n      description: The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and specified callbacks.\n  remarks: \"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.\"\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor3param)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a specific type.\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.\n    - id: coerceValueCallback\n      type: System.Windows.CoerceValueCallback\n      description: A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> for this dependency property.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework metadata options, and specified callbacks.\n  remarks: \"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \\n  \\n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.\"\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a specific type.\n    - id: flags\n      type: System.Windows.FrameworkPropertyMetadataOptions\n      description: The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.\n    - id: coerceValueCallback\n      type: System.Windows.CoerceValueCallback\n      description: A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> against this property.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)\n  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.\n  remarks: \"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \\n  \\n The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.  \\n  \\n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.\"\n  example:\n  - \"The following example calls this constructor signature:  \\n  \\n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a specific type.\n    - id: flags\n      type: System.Windows.FrameworkPropertyMetadataOptions\n      description: The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.\n    - id: coerceValueCallback\n      type: System.Windows.CoerceValueCallback\n      description: A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> on this dependency property.\n    - id: isAnimationProhibited\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to prevent the property system from animating the property that this metadata is applied to. Such properties will raise a run-time exception originating from the property system if animations of them are attempted. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to permit animating the property. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)\n  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)'\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.FrameworkPropertyMetadata\"></xref> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.\n  remarks: \"The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \\n  \\n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \\n  \\n The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.  \\n  \\n For more information about the update source behavior for bindings, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.\"\n  example:\n  - \"[!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \\n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]\"\n  syntax:\n    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a specific type.\n    - id: flags\n      type: System.Windows.FrameworkPropertyMetadataOptions\n      description: The metadata option flags (a combination of <xref href=\"System.Windows.FrameworkPropertyMetadataOptions\"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.\n    - id: coerceValueCallback\n      type: System.Windows.CoerceValueCallback\n      description: A reference to a handler implementation that will be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> against this property.\n    - id: isAnimationProhibited\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to prevent the property system from animating the property that this metadata is applied to. Such properties will raise a run-time exception originating from the property system if animations of them are attempted. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: defaultUpdateSourceTrigger\n      type: System.Windows.Data.UpdateSourceTrigger\n      description: The <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref> to use when bindings for this property are applied that have their <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref> set to <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> is set to <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>; see Remarks.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange\n  id: AffectsArrange\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: AffectsArrange\n  nameWithType: FrameworkPropertyMetadata.AffectsArrange\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.\n  remarks: \"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsArrange set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>). Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \\n  \\n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsArrange is `true`.  \\n  \\n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_AffectsArrange\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  example:\n  - \"The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \\\"metadata browser\\\".  \\n  \\n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \\n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]\"\n  syntax:\n    content: public bool AffectsArrange { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.AffectsArrange*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure\n  id: AffectsMeasure\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: AffectsMeasure\n  nameWithType: FrameworkPropertyMetadata.AffectsMeasure\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.\n  remarks: \"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsMeasure set to `true` will initiate a deferred request to invalidate the visuals for that element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \\n  \\n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsMeasure is `true`.  \\n  \\n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_AffectsMeasure\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  example:\n  - \"The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \\\"metadata browser\\\".  \\n  \\n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \\n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]\"\n  syntax:\n    content: public bool AffectsMeasure { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange\n  id: AffectsParentArrange\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: AffectsParentArrange\n  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.\n  remarks: \"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsParentArrange set to `true` will initiate a deferred request to invalidate the visuals for the parent element.  \\n  \\n Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using AffectsParentArrange because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`. That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate. AffectsParentArrange is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class. In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering. The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host. For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed. Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> attached property has metadata where AffectsParentArrange is `true`. Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.  \\n  \\n Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \\n  \\n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsParentArrange is `true`.  \\n  \\n Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_AffectsParentArrange\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public bool AffectsParentArrange { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure\n  id: AffectsParentMeasure\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: AffectsParentMeasure\n  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.\n  remarks: \"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsParentMeasure set to `true` will initiate a deferred request to invalidate the visuals for the parent element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \\n  \\n Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using AffectsParentMeasure because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`. That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate. AffectsParentMeasure is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class. In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering. The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host. For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size. Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> property has metadata where AffectsParentMeasure is `true`.  \\n  \\n Content host elements also frequently look for changes in dependency properties where AffectsParentMeasure is `true`, as part of content host rendering logic. For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.  \\n  \\n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsParentMeasure is `true`.  \\n  \\n Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_AffectsParentMeasure\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public bool AffectsParentMeasure { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender\n  id: AffectsRender\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: AffectsRender\n  nameWithType: FrameworkPropertyMetadata.AffectsRender\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.\n  remarks: \"<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsRender set to `true` will initiate a deferred request to invalidate the visuals for that element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsRender unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \\n  \\n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where AffectsRender is `true`.  \\n  \\n Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_AffectsRender\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  example:\n  - \"The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \\\"metadata browser\\\".  \\n  \\n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \\n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]\"\n  syntax:\n    content: public bool AffectsRender { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists affects rendering; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.AffectsRender*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault\n  id: BindsTwoWayByDefault\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: BindsTwoWayByDefault\n  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault\n  fullName: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether the property binds two-way by default.\n  remarks: \"In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax.  \\n  \\n In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>.  \\n  \\n This property only reports the default binding update characteristics of the dependency property in general. Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.  \\n  \\n Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_BindsTwoWayByDefault\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  example:\n  - \"The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \\\"metadata browser\\\".  \\n  \\n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \\n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]\"\n  syntax:\n    content: public bool BindsTwoWayByDefault { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the dependency property on which this metadata exists binds two-way by default; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\n  id: DefaultUpdateSourceTrigger\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: DefaultUpdateSourceTrigger\n  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\n  fullName: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the default for <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref> to use when bindings for the property with this metadata are applied, which have their <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref> set to <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref>.\n  remarks: \"Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_DefaultUpdateSourceTrigger\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }\n    return:\n      type: System.Windows.Data.UpdateSourceTrigger\n      description: A value of the enumeration, other than <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: This property is set to <xref href=\"System.Windows.Data.UpdateSourceTrigger\"></xref>; the value you set is supposed to become the default when requested by bindings.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.Inherits\n  id: Inherits\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: Inherits\n  nameWithType: FrameworkPropertyMetadata.Inherits\n  fullName: System.Windows.FrameworkPropertyMetadata.Inherits\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether the value of the dependency property is inheritable.\n  remarks: \"Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property. Property value inheritance is not enabled by default, and enabling it does have some performance implications. For details, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify Inherits in the metadata.  \\n  \\n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_Inherits\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  example:\n  - \"The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \\\"metadata browser\\\".  \\n  \\n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \\n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]\"\n  syntax:\n    content: public bool Inherits { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value is inheritable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.Inherits*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed\n  id: IsDataBindingAllowed\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: IsDataBindingAllowed\n  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed\n  fullName: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets a value that indicates whether data binding is supported for the dependency property.\n  remarks: \"This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata. This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.  \\n  \\n If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).  \\n  \\n<a name=\\\"xamlTextUsage_IsDataBindingAllowed\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  example:\n  - \"The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \\\"metadata browser\\\".  \\n  \\n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \\n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]\"\n  syntax:\n    content: public bool IsDataBindingAllowed { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data binding is supported on the dependency property to which this metadata applies; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable\n  id: IsNotDataBindable\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: IsNotDataBindable\n  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable\n  fullName: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether the dependency property supports data binding.\n  remarks: \"Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties. The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful. Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding. Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.  \\n  \\n Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for IsNotDataBindable. This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply. To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead. <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and IsNotDataBindable as a single operation, yielding the expected result.  \\n  \\n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_IsNotDataBindable\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public bool IsNotDataBindable { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property does not support data binding; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.Journal\n  id: Journal\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: Journal\n  nameWithType: FrameworkPropertyMetadata.Journal\n  fullName: System.Windows.FrameworkPropertyMetadata.Journal\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.\n  remarks: \"Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_Journal\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public bool Journal { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.Journal*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: Merge(PropertyMetadata,DependencyProperty)\n  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)\n  fullName: System.Windows.FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Enables a merge of the source metadata with base metadata.\n  remarks: This method is used internally when metadata is being overridden.\n  syntax:\n    content: protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);\n    parameters:\n    - id: baseMetadata\n      type: System.Windows.PropertyMetadata\n      description: The base metadata to merge.\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The dependency property this metadata is being applied to.\n  overload: System.Windows.FrameworkPropertyMetadata.Merge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)\n  id: OnApply(System.Windows.DependencyProperty,System.Type)\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: OnApply(DependencyProperty,Type)\n  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)\n  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.\n  remarks: Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.\n  syntax:\n    content: protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The dependency property to which the metadata has been applied.\n    - id: targetType\n      type: System.Type\n      description: The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.OnApply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior\n  id: OverridesInheritanceBehavior\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: OverridesInheritanceBehavior\n  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior\n  fullName: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.\n  remarks: \"This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries. The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>. The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control. Specifying metadata with OverridesInheritanceBehavior set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.  \\n  \\n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_OverridesInheritanceBehavior\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public bool OverridesInheritanceBehavior { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property value inheritance should span across certain content boundaries; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\n- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\n  id: SubPropertiesDoNotAffectRender\n  parent: System.Windows.FrameworkPropertyMetadata\n  langs:\n  - csharp\n  name: SubPropertiesDoNotAffectRender\n  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\n  fullName: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.\n  remarks: \"This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own. Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass. Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.  \\n  \\n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_SubPropertiesDoNotAffectRender\\\"></a>   \\n## XAML Text Usage  \\n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public bool SubPropertiesDoNotAffectRender { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if changes to sub-property values do not affect rendering if changed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.UIPropertyMetadata\n  isExternal: false\n  name: System.Windows.UIPropertyMetadata\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata()\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(Object)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(PropertyChangedCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)\n- uid: System.Windows.PropertyChangedCallback\n  parent: System.Windows\n  isExternal: false\n  name: PropertyChangedCallback\n  nameWithType: PropertyChangedCallback\n  fullName: System.Windows.PropertyChangedCallback\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)\n- uid: System.Windows.FrameworkPropertyMetadataOptions\n  parent: System.Windows\n  isExternal: false\n  name: FrameworkPropertyMetadataOptions\n  nameWithType: FrameworkPropertyMetadataOptions\n  fullName: System.Windows.FrameworkPropertyMetadataOptions\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)\n- uid: System.Windows.CoerceValueCallback\n  parent: System.Windows\n  isExternal: false\n  name: CoerceValueCallback\n  nameWithType: CoerceValueCallback\n  fullName: System.Windows.CoerceValueCallback\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)\n  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)\n- uid: System.Windows.Data.UpdateSourceTrigger\n  parent: System.Windows.Data\n  isExternal: false\n  name: UpdateSourceTrigger\n  nameWithType: UpdateSourceTrigger\n  fullName: System.Windows.Data.UpdateSourceTrigger\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsArrange\n  nameWithType: FrameworkPropertyMetadata.AffectsArrange\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsMeasure\n  nameWithType: FrameworkPropertyMetadata.AffectsMeasure\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsParentArrange\n  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsParentMeasure\n  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsRender\n  nameWithType: FrameworkPropertyMetadata.AffectsRender\n  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender\n- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: BindsTwoWayByDefault\n  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault\n  fullName: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault\n- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: DefaultUpdateSourceTrigger\n  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\n  fullName: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\n- uid: System.Windows.FrameworkPropertyMetadata.Inherits\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: Inherits\n  nameWithType: FrameworkPropertyMetadata.Inherits\n  fullName: System.Windows.FrameworkPropertyMetadata.Inherits\n- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: IsDataBindingAllowed\n  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed\n  fullName: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed\n- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: IsNotDataBindable\n  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable\n  fullName: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable\n- uid: System.Windows.FrameworkPropertyMetadata.Journal\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: Journal\n  nameWithType: FrameworkPropertyMetadata.Journal\n  fullName: System.Windows.FrameworkPropertyMetadata.Journal\n- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: Merge(PropertyMetadata,DependencyProperty)\n  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)\n  fullName: System.Windows.FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)\n- uid: System.Windows.PropertyMetadata\n  parent: System.Windows\n  isExternal: false\n  name: PropertyMetadata\n  nameWithType: PropertyMetadata\n  fullName: System.Windows.PropertyMetadata\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: OnApply(DependencyProperty,Type)\n  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)\n  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: OverridesInheritanceBehavior\n  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior\n  fullName: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior\n- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: SubPropertiesDoNotAffectRender\n  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\n  fullName: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\n- uid: System.Windows.FrameworkPropertyMetadata.#ctor*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: FrameworkPropertyMetadata\n  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsArrange\n  nameWithType: FrameworkPropertyMetadata.AffectsArrange\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsMeasure\n  nameWithType: FrameworkPropertyMetadata.AffectsMeasure\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsParentArrange\n  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsParentMeasure\n  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure\n- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: AffectsRender\n  nameWithType: FrameworkPropertyMetadata.AffectsRender\n- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: BindsTwoWayByDefault\n  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault\n- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: DefaultUpdateSourceTrigger\n  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\n- uid: System.Windows.FrameworkPropertyMetadata.Inherits*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: Inherits\n  nameWithType: FrameworkPropertyMetadata.Inherits\n- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: IsDataBindingAllowed\n  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed\n- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: IsNotDataBindable\n  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable\n- uid: System.Windows.FrameworkPropertyMetadata.Journal*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: Journal\n  nameWithType: FrameworkPropertyMetadata.Journal\n- uid: System.Windows.FrameworkPropertyMetadata.Merge*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: Merge\n  nameWithType: FrameworkPropertyMetadata.Merge\n- uid: System.Windows.FrameworkPropertyMetadata.OnApply*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: OnApply\n  nameWithType: FrameworkPropertyMetadata.OnApply\n- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: OverridesInheritanceBehavior\n  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior\n- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*\n  parent: System.Windows.FrameworkPropertyMetadata\n  isExternal: false\n  name: SubPropertiesDoNotAffectRender\n  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\n"}