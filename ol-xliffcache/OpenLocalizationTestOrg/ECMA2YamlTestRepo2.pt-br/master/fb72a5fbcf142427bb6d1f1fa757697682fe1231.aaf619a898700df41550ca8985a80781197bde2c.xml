{"nodes":[{"pos":[2941,2953],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4413,4425],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4499,4511],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5056,5068],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5848,5860],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6637,6649],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7685,7697],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7756,7768],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8406,8418],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8484,8496],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8995,9007],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9650,9662],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10311,10323],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10956,10968],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11556,11568],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11625,11637],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12261,12273],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12330,12342],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12874,12886],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13472,13484],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13536,13548],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14151,14163],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15131,15143],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15202,15214],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15803,15815],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16610,16622],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17392,17404],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18264,18276],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18337,18349],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19129,19141],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19894,19906],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20723,20735],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21478,21490],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21547,21559],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22317,22329],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22388,22400],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23156,23168],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23225,23237],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24041,24053],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24115,24127],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24847,24859],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25578,25590],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26357,26369],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26427,26439],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27186,27198],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28038,28050],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28851,28863],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.EntitySet`1\n  id: EntitySet`1\n  children:\n  - System.Data.Linq.EntitySet`1.#ctor\n  - System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})\n  - System.Data.Linq.EntitySet`1.Add(`0)\n  - System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})\n  - System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})\n  - System.Data.Linq.EntitySet`1.Clear\n  - System.Data.Linq.EntitySet`1.Contains(`0)\n  - System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)\n  - System.Data.Linq.EntitySet`1.Count\n  - System.Data.Linq.EntitySet`1.GetEnumerator\n  - System.Data.Linq.EntitySet`1.GetNewBindingList\n  - System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues\n  - System.Data.Linq.EntitySet`1.IndexOf(`0)\n  - System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)\n  - System.Data.Linq.EntitySet`1.IsDeferred\n  - System.Data.Linq.EntitySet`1.Item(System.Int32)\n  - System.Data.Linq.EntitySet`1.ListChanged\n  - System.Data.Linq.EntitySet`1.Load\n  - System.Data.Linq.EntitySet`1.Remove(`0)\n  - System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)\n  - System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})\n  - System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{TEntity}#IsReadOnly\n  - System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized\n  - System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot\n  - System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)\n  - System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)\n  - System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize\n  - System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly\n  - System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)\n  - System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)\n  - System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection\n  - System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList\n  langs:\n  - csharp\n  name: EntitySet<TEntity>\n  nameWithType: EntitySet<TEntity>\n  fullName: System.Data.Linq.EntitySet<TEntity>\n  type: Class\n  syntax:\n    content: 'public sealed class EntitySet<TEntity> : System.Collections.Generic.ICollection<TEntity>, System.Collections.Generic.IEnumerable<TEntity>, System.Collections.Generic.IList<TEntity>, System.Collections.IList, System.ComponentModel.IListSource where TEntity : class'\n    typeParameters:\n    - id: TEntity\n      description: To be added.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<TEntity>\n  - System.Collections.Generic.IEnumerable<TEntity>\n  - System.Collections.Generic.IList<TEntity>\n  - System.Collections.IList\n  - System.ComponentModel.IListSource\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.#ctor\n  id: '#ctor'\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: EntitySet()\n  nameWithType: EntitySet<TEntity>.EntitySet()\n  fullName: System.Data.Linq.EntitySet<TEntity>.EntitySet()\n  type: Constructor\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public EntitySet ();\n    parameters: []\n  overload: System.Data.Linq.EntitySet`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})\n  id: '#ctor(System.Action{`0},System.Action{`0})'\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: EntitySet(Action<TEntity>,Action<TEntity>)\n  nameWithType: EntitySet<TEntity>.EntitySet(Action<TEntity>,Action<TEntity>)\n  fullName: System.Data.Linq.EntitySet<TEntity>.EntitySet(Action<TEntity>,Action<TEntity>)\n  type: Constructor\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public EntitySet (Action<TEntity> onAdd, Action<TEntity> onRemove);\n    parameters:\n    - id: onAdd\n      type: System.Action{TEntity}\n      description: To be added.\n    - id: onRemove\n      type: System.Action{TEntity}\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Add(`0)\n  id: Add(`0)\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Add(TEntity)\n  nameWithType: EntitySet<TEntity>.Add(TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Add(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void Add (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})\n  id: AddRange(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: AddRange(IEnumerable<TEntity>)\n  nameWithType: EntitySet<TEntity>.AddRange(IEnumerable<TEntity>)\n  fullName: System.Data.Linq.EntitySet<TEntity>.AddRange(IEnumerable<TEntity>)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void AddRange (System.Collections.Generic.IEnumerable<TEntity> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{TEntity}\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.AddRange*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})\n  id: Assign(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Assign(IEnumerable<TEntity>)\n  nameWithType: EntitySet<TEntity>.Assign(IEnumerable<TEntity>)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Assign(IEnumerable<TEntity>)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void Assign (System.Collections.Generic.IEnumerable<TEntity> entitySource);\n    parameters:\n    - id: entitySource\n      type: System.Collections.Generic.IEnumerable{TEntity}\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.Assign*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Clear\n  id: Clear\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: EntitySet<TEntity>.Clear()\n  fullName: System.Data.Linq.EntitySet<TEntity>.Clear()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Data.Linq.EntitySet`1.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Contains(TEntity)\n  nameWithType: EntitySet<TEntity>.Contains(TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Contains(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public bool Contains (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: CopyTo(TEntity[],Int32)\n  nameWithType: EntitySet<TEntity>.CopyTo(TEntity[],Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.CopyTo(TEntity[],Int32)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void CopyTo (TEntity[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: TEntity[]\n      description: To be added.\n    - id: arrayIndex\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Count\n  id: Count\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: EntitySet<TEntity>.Count\n  fullName: System.Data.Linq.EntitySet<TEntity>.Count\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: EntitySet<TEntity>.GetEnumerator()\n  fullName: System.Data.Linq.EntitySet<TEntity>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<TEntity> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{TEntity}\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.GetNewBindingList\n  id: GetNewBindingList\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: GetNewBindingList()\n  nameWithType: EntitySet<TEntity>.GetNewBindingList()\n  fullName: System.Data.Linq.EntitySet<TEntity>.GetNewBindingList()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public System.ComponentModel.IBindingList GetNewBindingList ();\n    parameters: []\n    return:\n      type: System.ComponentModel.IBindingList\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.GetNewBindingList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues\n  id: HasLoadedOrAssignedValues\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: HasLoadedOrAssignedValues\n  nameWithType: EntitySet<TEntity>.HasLoadedOrAssignedValues\n  fullName: System.Data.Linq.EntitySet<TEntity>.HasLoadedOrAssignedValues\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public bool HasLoadedOrAssignedValues { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: IndexOf(TEntity)\n  nameWithType: EntitySet<TEntity>.IndexOf(TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.IndexOf(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public int IndexOf (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)\n  id: Insert(System.Int32,`0)\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Insert(Int32,TEntity)\n  nameWithType: EntitySet<TEntity>.Insert(Int32,TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Insert(Int32,TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void Insert (int index, TEntity entity);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: entity\n      type: TEntity\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.IsDeferred\n  id: IsDeferred\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: IsDeferred\n  nameWithType: EntitySet<TEntity>.IsDeferred\n  fullName: System.Data.Linq.EntitySet<TEntity>.IsDeferred\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public bool IsDeferred { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.IsDeferred*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: EntitySet<TEntity>.Item(Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public TEntity this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: TEntity\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.ListChanged\n  id: ListChanged\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: ListChanged\n  nameWithType: EntitySet<TEntity>.ListChanged\n  fullName: System.Data.Linq.EntitySet<TEntity>.ListChanged\n  type: Event\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public event System.ComponentModel.ListChangedEventHandler ListChanged;\n    return:\n      type: System.ComponentModel.ListChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Load\n  id: Load\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Load()\n  nameWithType: EntitySet<TEntity>.Load()\n  fullName: System.Data.Linq.EntitySet<TEntity>.Load()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void Load ();\n    parameters: []\n  overload: System.Data.Linq.EntitySet`1.Load*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: Remove(TEntity)\n  nameWithType: EntitySet<TEntity>.Remove(TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Remove(TEntity)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public bool Remove (TEntity entity);\n    parameters:\n    - id: entity\n      type: TEntity\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: EntitySet<TEntity>.RemoveAt(Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})\n  id: SetSource(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: SetSource(IEnumerable<TEntity>)\n  nameWithType: EntitySet<TEntity>.SetSource(IEnumerable<TEntity>)\n  fullName: System.Data.Linq.EntitySet<TEntity>.SetSource(IEnumerable<TEntity>)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void SetSource (System.Collections.Generic.IEnumerable<TEntity> entitySource);\n    parameters:\n    - id: entitySource\n      type: System.Collections.Generic.IEnumerable{TEntity}\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.SetSource*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{TEntity}#IsReadOnly\n  id: System#Collections#Generic#ICollection{TEntity}#IsReadOnly\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: EntitySet<TEntity>.System.Collections.Generic.ICollection\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: bool System.Collections.Generic.ICollection<TEntity>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection<TEntity>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.SyncRoot\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: EntitySet<TEntity>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Add(Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IList#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Contains(Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IList#Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IsFixedSize\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IsReadOnly\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Item(Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IList#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Remove(Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#Collections#IList#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection\n  id: System#ComponentModel#IListSource#ContainsListCollection\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: EntitySet<TEntity>.System.ComponentModel.IListSource.ContainsListCollection\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.ComponentModel.IListSource.ContainsListCollection\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList\n  id: System#ComponentModel#IListSource#GetList\n  isEii: true\n  parent: System.Data.Linq.EntitySet`1\n  langs:\n  - csharp\n  name: System.ComponentModel.IListSource.GetList()\n  nameWithType: EntitySet<TEntity>.System.ComponentModel.IListSource.GetList()\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.ComponentModel.IListSource.GetList()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: System.Collections.IList IListSource.GetList ();\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: To be added.\n  overload: System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Linq.EntitySet`1.#ctor\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: EntitySet()\n  nameWithType: EntitySet<TEntity>.EntitySet()\n  fullName: System.Data.Linq.EntitySet<TEntity>.EntitySet()\n- uid: System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: EntitySet(Action<TEntity>,Action<TEntity>)\n  nameWithType: EntitySet<TEntity>.EntitySet(Action<TEntity>,Action<TEntity>)\n  fullName: System.Data.Linq.EntitySet<TEntity>.EntitySet(Action<TEntity>,Action<TEntity>)\n- uid: System.Action{TEntity}\n  parent: System\n  isExternal: true\n  name: Action<TEntity>\n  nameWithType: Action<TEntity>\n  fullName: System.Action<TEntity>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: Action<TEntity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TEntity\n    name: TEntity\n    nameWithType: TEntity\n    fullName: TEntity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.EntitySet`1.Add(`0)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Add(TEntity)\n  nameWithType: EntitySet<TEntity>.Add(TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Add(TEntity)\n- uid: TEntity\n  isExternal: true\n  name: TEntity\n  nameWithType: TEntity\n  fullName: TEntity\n- uid: System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: AddRange(IEnumerable<TEntity>)\n  nameWithType: EntitySet<TEntity>.AddRange(IEnumerable<TEntity>)\n  fullName: System.Data.Linq.EntitySet<TEntity>.AddRange(IEnumerable<TEntity>)\n- uid: System.Collections.Generic.IEnumerable{TEntity}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<TEntity>\n  nameWithType: IEnumerable<TEntity>\n  fullName: System.Collections.Generic.IEnumerable<TEntity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<TEntity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TEntity\n    name: TEntity\n    nameWithType: TEntity\n    fullName: TEntity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Assign(IEnumerable<TEntity>)\n  nameWithType: EntitySet<TEntity>.Assign(IEnumerable<TEntity>)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Assign(IEnumerable<TEntity>)\n- uid: System.Data.Linq.EntitySet`1.Clear\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Clear()\n  nameWithType: EntitySet<TEntity>.Clear()\n  fullName: System.Data.Linq.EntitySet<TEntity>.Clear()\n- uid: System.Data.Linq.EntitySet`1.Contains(`0)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Contains(TEntity)\n  nameWithType: EntitySet<TEntity>.Contains(TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Contains(TEntity)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: CopyTo(TEntity[],Int32)\n  nameWithType: EntitySet<TEntity>.CopyTo(TEntity[],Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.CopyTo(TEntity[],Int32)\n- uid: TEntity[]\n  isExternal: true\n  name: TEntity\n  nameWithType: TEntity\n  fullName: TEntity[]\n  spec.csharp:\n  - uid: TEntity\n    name: TEntity\n    nameWithType: TEntity\n    fullName: TEntity[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.Linq.EntitySet`1.Count\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Count\n  nameWithType: EntitySet<TEntity>.Count\n  fullName: System.Data.Linq.EntitySet<TEntity>.Count\n- uid: System.Data.Linq.EntitySet`1.GetEnumerator\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: EntitySet<TEntity>.GetEnumerator()\n  fullName: System.Data.Linq.EntitySet<TEntity>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{TEntity}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<TEntity>\n  nameWithType: IEnumerator<TEntity>\n  fullName: System.Collections.Generic.IEnumerator<TEntity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<TEntity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TEntity\n    name: TEntity\n    nameWithType: TEntity\n    fullName: TEntity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.EntitySet`1.GetNewBindingList\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: GetNewBindingList()\n  nameWithType: EntitySet<TEntity>.GetNewBindingList()\n  fullName: System.Data.Linq.EntitySet<TEntity>.GetNewBindingList()\n- uid: System.ComponentModel.IBindingList\n  parent: System.ComponentModel\n  isExternal: false\n  name: IBindingList\n  nameWithType: IBindingList\n  fullName: System.ComponentModel.IBindingList\n- uid: System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: HasLoadedOrAssignedValues\n  nameWithType: EntitySet<TEntity>.HasLoadedOrAssignedValues\n  fullName: System.Data.Linq.EntitySet<TEntity>.HasLoadedOrAssignedValues\n- uid: System.Data.Linq.EntitySet`1.IndexOf(`0)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: IndexOf(TEntity)\n  nameWithType: EntitySet<TEntity>.IndexOf(TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.IndexOf(TEntity)\n- uid: System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Insert(Int32,TEntity)\n  nameWithType: EntitySet<TEntity>.Insert(Int32,TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Insert(Int32,TEntity)\n- uid: System.Data.Linq.EntitySet`1.IsDeferred\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: IsDeferred\n  nameWithType: EntitySet<TEntity>.IsDeferred\n  fullName: System.Data.Linq.EntitySet<TEntity>.IsDeferred\n- uid: System.Data.Linq.EntitySet`1.Item(System.Int32)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: EntitySet<TEntity>.Item(Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Item(Int32)\n- uid: System.Data.Linq.EntitySet`1.ListChanged\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: ListChanged\n  nameWithType: EntitySet<TEntity>.ListChanged\n  fullName: System.Data.Linq.EntitySet<TEntity>.ListChanged\n- uid: System.ComponentModel.ListChangedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: ListChangedEventHandler\n  nameWithType: ListChangedEventHandler\n  fullName: System.ComponentModel.ListChangedEventHandler\n- uid: System.Data.Linq.EntitySet`1.Load\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Load()\n  nameWithType: EntitySet<TEntity>.Load()\n  fullName: System.Data.Linq.EntitySet<TEntity>.Load()\n- uid: System.Data.Linq.EntitySet`1.Remove(`0)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Remove(TEntity)\n  nameWithType: EntitySet<TEntity>.Remove(TEntity)\n  fullName: System.Data.Linq.EntitySet<TEntity>.Remove(TEntity)\n- uid: System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: EntitySet<TEntity>.RemoveAt(Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.RemoveAt(Int32)\n- uid: System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: SetSource(IEnumerable<TEntity>)\n  nameWithType: EntitySet<TEntity>.SetSource(IEnumerable<TEntity>)\n  fullName: System.Data.Linq.EntitySet<TEntity>.SetSource(IEnumerable<TEntity>)\n- uid: System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{TEntity}#IsReadOnly\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: EntitySet<TEntity>.System.Collections.Generic.ICollection\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.Generic.ICollection\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.ICollection.IsSynchronized\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.SyncRoot\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.ICollection.SyncRoot\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: EntitySet<TEntity>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Add(Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Add(Object)\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Contains(Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Contains(Object)\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.IndexOf(Object)\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IsFixedSize\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.IsFixedSize\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IsReadOnly\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.IsReadOnly\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Item(Int32)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Item(Int32)\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Remove(Object)\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.Collections.IList.Remove(Object)\n- uid: System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: EntitySet<TEntity>.System.ComponentModel.IListSource.ContainsListCollection\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.ComponentModel.IListSource.ContainsListCollection\n- uid: System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.ComponentModel.IListSource.GetList()\n  nameWithType: EntitySet<TEntity>.System.ComponentModel.IListSource.GetList()\n  fullName: System.Data.Linq.EntitySet<TEntity>.System.ComponentModel.IListSource.GetList()\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: true\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Data.Linq.EntitySet`1.#ctor*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: EntitySet<TEntity>\n  nameWithType: EntitySet<TEntity>.EntitySet<TEntity>\n- uid: System.Data.Linq.EntitySet`1.Add*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Add\n  nameWithType: EntitySet<TEntity>.Add\n- uid: System.Data.Linq.EntitySet`1.AddRange*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: AddRange\n  nameWithType: EntitySet<TEntity>.AddRange\n- uid: System.Data.Linq.EntitySet`1.Assign*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Assign\n  nameWithType: EntitySet<TEntity>.Assign\n- uid: System.Data.Linq.EntitySet`1.Clear*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Clear\n  nameWithType: EntitySet<TEntity>.Clear\n- uid: System.Data.Linq.EntitySet`1.Contains*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Contains\n  nameWithType: EntitySet<TEntity>.Contains\n- uid: System.Data.Linq.EntitySet`1.CopyTo*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: EntitySet<TEntity>.CopyTo\n- uid: System.Data.Linq.EntitySet`1.Count*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Count\n  nameWithType: EntitySet<TEntity>.Count\n- uid: System.Data.Linq.EntitySet`1.GetEnumerator*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: EntitySet<TEntity>.GetEnumerator\n- uid: System.Data.Linq.EntitySet`1.GetNewBindingList*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: GetNewBindingList\n  nameWithType: EntitySet<TEntity>.GetNewBindingList\n- uid: System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: HasLoadedOrAssignedValues\n  nameWithType: EntitySet<TEntity>.HasLoadedOrAssignedValues\n- uid: System.Data.Linq.EntitySet`1.IndexOf*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: IndexOf\n  nameWithType: EntitySet<TEntity>.IndexOf\n- uid: System.Data.Linq.EntitySet`1.Insert*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Insert\n  nameWithType: EntitySet<TEntity>.Insert\n- uid: System.Data.Linq.EntitySet`1.IsDeferred*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: IsDeferred\n  nameWithType: EntitySet<TEntity>.IsDeferred\n- uid: System.Data.Linq.EntitySet`1.Item*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Item\n  nameWithType: EntitySet<TEntity>.Item\n- uid: System.Data.Linq.EntitySet`1.Load*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Load\n  nameWithType: EntitySet<TEntity>.Load\n- uid: System.Data.Linq.EntitySet`1.Remove*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: Remove\n  nameWithType: EntitySet<TEntity>.Remove\n- uid: System.Data.Linq.EntitySet`1.RemoveAt*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: RemoveAt\n  nameWithType: EntitySet<TEntity>.RemoveAt\n- uid: System.Data.Linq.EntitySet`1.SetSource*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: SetSource\n  nameWithType: EntitySet<TEntity>.SetSource\n- uid: System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection<TEntity>#IsReadOnly*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<TEntity>.IsReadOnly\n  nameWithType: EntitySet<TEntity>.System.Collections.Generic.ICollection<TEntity>.IsReadOnly\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.CopyTo\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.IsSynchronized\n- uid: System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: EntitySet<TEntity>.System.Collections.ICollection.SyncRoot\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: EntitySet<TEntity>.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Add*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Add\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Contains*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Contains\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IndexOf\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Insert*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Insert\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IsFixedSize\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.IsReadOnly\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Item*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Item\n- uid: System.Data.Linq.EntitySet`1.System#Collections#IList#Remove*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: EntitySet<TEntity>.System.Collections.IList.Remove\n- uid: System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: EntitySet<TEntity>.System.ComponentModel.IListSource.ContainsListCollection\n- uid: System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList*\n  parent: System.Data.Linq.EntitySet`1\n  isExternal: false\n  name: System.ComponentModel.IListSource.GetList\n  nameWithType: EntitySet<TEntity>.System.ComponentModel.IListSource.GetList\n"}