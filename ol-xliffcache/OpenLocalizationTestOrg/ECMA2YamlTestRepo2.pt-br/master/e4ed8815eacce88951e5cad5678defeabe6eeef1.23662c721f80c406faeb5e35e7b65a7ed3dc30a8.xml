{"nodes":[{"pos":[775,922],"content":"Represents the command that a workflow host executes against an instance store to load runnable instances in the persistence store into the memory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the command that a workflow host executes against an instance store to load runnable instances in the persistence store into the memory.","pos":[0,147]}]},{"pos":[935,2236],"content":"An instance is *runnable*, if it is not in the suspended state or the completed state and satisfies the following conditions:      -   The instance is unlocked and has a pending timer that has expired.      -   The instance is unlocked and its status is **Executing**.      -   The instance has an expired lock on it.       An instance store should periodically search for runnable instances that belong to a workflow host that uses the store. It should raise the <xref:System.Activities.DurableInstancing.HasRunnableWorkflowEvent> when it finds a runnable instance in the persistence store that matches its workflow host type. If the instance store does not find a runnable instance in the persistence store, it should continue to monitor the persistence store for any runnable instances.       After raising the HasRunnableWorkflowEvent, the instance store should stop monitoring the persistence store for runnable instances until it receives and executes the TryLoadRunnableWorkflowCommand. The monitoring continues only if the TryLoadRunnableWorkflowCommand execution does not return any runnable instances.       When a workflow host receives the HasRunnableWorkflowEvent, it executes the TryLoadRunnableWorkflowCommand against the instance store to load the instance into the memory.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An instance is <bpt id=\"p1\">*</bpt>runnable<ept id=\"p1\">*</ept>, if it is not in the suspended state or the completed state and satisfies the following conditions:      -   The instance is unlocked and has a pending timer that has expired.","pos":[0,201],"source":"An instance is *runnable*, if it is not in the suspended state or the completed state and satisfies the following conditions:      -   The instance is unlocked and has a pending timer that has expired."},{"content":"-   The instance is unlocked and its status is <bpt id=\"p1\">**</bpt>Executing<ept id=\"p1\">**</ept>.","pos":[207,268],"source":"      -   The instance is unlocked and its status is **Executing**."},{"content":"-   The instance has an expired lock on it.","pos":[274,317]},{"content":"An instance store should periodically search for runnable instances that belong to a workflow host that uses the store.","pos":[324,443]},{"content":"It should raise the &lt;xref:System.Activities.DurableInstancing.HasRunnableWorkflowEvent&gt; when it finds a runnable instance in the persistence store that matches its workflow host type.","pos":[444,627],"source":" It should raise the <xref:System.Activities.DurableInstancing.HasRunnableWorkflowEvent> when it finds a runnable instance in the persistence store that matches its workflow host type."},{"content":"If the instance store does not find a runnable instance in the persistence store, it should continue to monitor the persistence store for any runnable instances.","pos":[628,789]},{"content":"After raising the HasRunnableWorkflowEvent, the instance store should stop monitoring the persistence store for runnable instances until it receives and executes the TryLoadRunnableWorkflowCommand.","pos":[796,993]},{"content":"The monitoring continues only if the TryLoadRunnableWorkflowCommand execution does not return any runnable instances.","pos":[994,1111]},{"content":"When a workflow host receives the HasRunnableWorkflowEvent, it executes the TryLoadRunnableWorkflowCommand against the instance store to load the instance into the memory.","pos":[1118,1289]}]},{"pos":[3142,3267],"content":"Initializes an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes an instance of the <xref href=\"System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\"></xref> class."},{"pos":[4167,4179],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5046,5058],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6021,6033],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  id: TryLoadRunnableWorkflowCommand\n  children:\n  - System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor\n  - System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock\n  - System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional\n  - System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.Validate(System.Runtime.DurableInstancing.InstanceView)\n  langs:\n  - csharp\n  name: TryLoadRunnableWorkflowCommand\n  nameWithType: TryLoadRunnableWorkflowCommand\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  type: Class\n  summary: Represents the command that a workflow host executes against an instance store to load runnable instances in the persistence store into the memory.\n  remarks: \"An instance is *runnable*, if it is not in the suspended state or the completed state and satisfies the following conditions:  \\n  \\n-   The instance is unlocked and has a pending timer that has expired.  \\n  \\n-   The instance is unlocked and its status is **Executing**.  \\n  \\n-   The instance has an expired lock on it.  \\n  \\n An instance store should periodically search for runnable instances that belong to a workflow host that uses the store. It should raise the <xref:System.Activities.DurableInstancing.HasRunnableWorkflowEvent> when it finds a runnable instance in the persistence store that matches its workflow host type. If the instance store does not find a runnable instance in the persistence store, it should continue to monitor the persistence store for any runnable instances.  \\n  \\n After raising the HasRunnableWorkflowEvent, the instance store should stop monitoring the persistence store for runnable instances until it receives and executes the TryLoadRunnableWorkflowCommand. The monitoring continues only if the TryLoadRunnableWorkflowCommand execution does not return any runnable instances.  \\n  \\n When a workflow host receives the HasRunnableWorkflowEvent, it executes the TryLoadRunnableWorkflowCommand against the instance store to load the instance into the memory.\"\n  syntax:\n    content: 'public sealed class TryLoadRunnableWorkflowCommand : System.Runtime.DurableInstancing.InstancePersistenceCommand'\n  inheritance:\n  - System.Object\n  - System.Runtime.DurableInstancing.InstancePersistenceCommand\n  implements: []\n  inheritedMembers:\n  - System.Runtime.DurableInstancing.InstancePersistenceCommand.Name\n  platform:\n  - net462\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor\n  id: '#ctor'\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  langs:\n  - csharp\n  name: TryLoadRunnableWorkflowCommand()\n  nameWithType: TryLoadRunnableWorkflowCommand.TryLoadRunnableWorkflowCommand()\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.TryLoadRunnableWorkflowCommand()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.DurableInstancing\n  summary: Initializes an instance of the <xref href=\"System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\"></xref> class.\n  syntax:\n    content: public TryLoadRunnableWorkflowCommand ();\n    parameters: []\n  overload: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock\n  id: AutomaticallyAcquiringLock\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  langs:\n  - csharp\n  name: AutomaticallyAcquiringLock\n  nameWithType: TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.DurableInstancing\n  syntax:\n    content: protected override bool AutomaticallyAcquiringLock { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional\n  id: IsTransactionEnlistmentOptional\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  langs:\n  - csharp\n  name: IsTransactionEnlistmentOptional\n  nameWithType: TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.DurableInstancing\n  syntax:\n    content: protected override bool IsTransactionEnlistmentOptional { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.Validate(System.Runtime.DurableInstancing.InstanceView)\n  id: Validate(System.Runtime.DurableInstancing.InstanceView)\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  langs:\n  - csharp\n  name: Validate(InstanceView)\n  nameWithType: TryLoadRunnableWorkflowCommand.Validate(InstanceView)\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.Validate(InstanceView)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.DurableInstancing\n  syntax:\n    content: protected override void Validate (System.Runtime.DurableInstancing.InstanceView view);\n    parameters:\n    - id: view\n      type: System.Runtime.DurableInstancing.InstanceView\n      description: To be added.\n  overload: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.Validate*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.DurableInstancing.InstancePersistenceCommand\n  isExternal: false\n  name: System.Runtime.DurableInstancing.InstancePersistenceCommand\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  isExternal: false\n  name: TryLoadRunnableWorkflowCommand()\n  nameWithType: TryLoadRunnableWorkflowCommand.TryLoadRunnableWorkflowCommand()\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.TryLoadRunnableWorkflowCommand()\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  isExternal: false\n  name: AutomaticallyAcquiringLock\n  nameWithType: TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  isExternal: false\n  name: IsTransactionEnlistmentOptional\n  nameWithType: TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.Validate(System.Runtime.DurableInstancing.InstanceView)\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  isExternal: false\n  name: Validate(InstanceView)\n  nameWithType: TryLoadRunnableWorkflowCommand.Validate(InstanceView)\n  fullName: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.Validate(InstanceView)\n- uid: System.Runtime.DurableInstancing.InstanceView\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceView\n  nameWithType: InstanceView\n  fullName: System.Runtime.DurableInstancing.InstanceView\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor*\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  isExternal: false\n  name: TryLoadRunnableWorkflowCommand\n  nameWithType: TryLoadRunnableWorkflowCommand.TryLoadRunnableWorkflowCommand\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock*\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  isExternal: false\n  name: AutomaticallyAcquiringLock\n  nameWithType: TryLoadRunnableWorkflowCommand.AutomaticallyAcquiringLock\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional*\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  isExternal: false\n  name: IsTransactionEnlistmentOptional\n  nameWithType: TryLoadRunnableWorkflowCommand.IsTransactionEnlistmentOptional\n- uid: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.Validate*\n  parent: System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand\n  isExternal: false\n  name: Validate\n  nameWithType: TryLoadRunnableWorkflowCommand.Validate\n"}