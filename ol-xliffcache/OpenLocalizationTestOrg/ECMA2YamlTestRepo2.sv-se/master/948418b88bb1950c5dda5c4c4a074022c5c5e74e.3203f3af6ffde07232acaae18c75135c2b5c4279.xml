{"nodes":[{"pos":[27386,27511],"content":"Encapsulates a [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] drawing surface. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encapsulates a <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> drawing surface.","pos":[0,93],"source":"Encapsulates a [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] drawing surface."},{"content":"This class cannot be inherited.","pos":[94,125]}]},{"pos":[27524,29870],"content":"The Graphics class provides methods for drawing objects to the display device. A Graphics is associated with a specific device context.       You can obtain a Graphics object by calling the <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=fullName> method on an object that inherits from <xref:System.Windows.Forms.Control?displayProperty=fullName>, or by handling a control's <xref:System.Windows.Forms.Control.Paint?displayProperty=fullName> event and accessing the <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> property of the <xref:System.Windows.Forms.PaintEventArgs?displayProperty=fullName> class. You can also create a Graphics object from an image by using the <xref:System.Drawing.Graphics.FromImage%2A> method. For more information about creating a Graphics object, see [How to: Create Graphics Objects for Drawing](~/add/includes/ajax-current-ext-md.md).       You can draw many different shapes and lines by using a Graphics object. For more information about how to draw lines and shapes, see the specific `Draw`*GraphicalElement* method for the line or shape you want to draw. These methods include <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, and <xref:System.Drawing.Graphics.DrawRectangle%2A>. For more information about how to draw lines and shapes, see [Using a Pen to Draw Lines and Shapes](~/add/includes/ajax-current-ext-md.md) and [Using a Brush to Fill Shapes](~/add/includes/ajax-current-ext-md.md).       You can also draw images and icons by using the <xref:System.Drawing.Graphics.DrawImage%2A> and <xref:System.Drawing.Graphics.DrawIcon%2A> methods, respectively. To perform a bit-block transfer of color data from the screen to the drawing surface of the Graphics object, see <xref:System.Drawing.Graphics.CopyFromScreen%2A>. For more information about how to draw images with a Graphics object, see [Working with Images, Bitmaps, Icons, and Metafiles](~/add/includes/ajax-current-ext-md.md).       In addition, you can manipulate the coordinate system used by the Graphics object. For more information on the coordinate system and how to manipulate it, see [Coordinate Systems and Transformations](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Graphics class provides methods for drawing objects to the display device.","pos":[0,78]},{"content":"A Graphics is associated with a specific device context.","pos":[79,135]},{"content":"You can obtain a Graphics object by calling the &lt;xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=fullName&gt; method on an object that inherits from &lt;xref:System.Windows.Forms.Control?displayProperty=fullName&gt;, or by handling a control's &lt;xref:System.Windows.Forms.Control.Paint?displayProperty=fullName&gt; event and accessing the &lt;xref:System.Windows.Forms.PaintEventArgs.Graphics%2A&gt; property of the &lt;xref:System.Windows.Forms.PaintEventArgs?displayProperty=fullName&gt; class.","pos":[142,633],"source":"       You can obtain a Graphics object by calling the <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=fullName> method on an object that inherits from <xref:System.Windows.Forms.Control?displayProperty=fullName>, or by handling a control's <xref:System.Windows.Forms.Control.Paint?displayProperty=fullName> event and accessing the <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> property of the <xref:System.Windows.Forms.PaintEventArgs?displayProperty=fullName> class."},{"content":"You can also create a Graphics object from an image by using the &lt;xref:System.Drawing.Graphics.FromImage%2A&gt; method.","pos":[634,750],"source":" You can also create a Graphics object from an image by using the <xref:System.Drawing.Graphics.FromImage%2A> method."},{"content":"For more information about creating a Graphics object, see <bpt id=\"p1\">[</bpt>How to: Create Graphics Objects for Drawing<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[751,895],"source":" For more information about creating a Graphics object, see [How to: Create Graphics Objects for Drawing](~/add/includes/ajax-current-ext-md.md)."},{"content":"You can draw many different shapes and lines by using a Graphics object.","pos":[902,974]},{"content":"For more information about how to draw lines and shapes, see the specific <ph id=\"ph1\">`Draw`</ph><bpt id=\"p1\">*</bpt>GraphicalElement<ept id=\"p1\">*</ept> method for the line or shape you want to draw.","pos":[975,1120],"source":" For more information about how to draw lines and shapes, see the specific `Draw`*GraphicalElement* method for the line or shape you want to draw."},{"content":"These methods include &lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;, &lt;xref:System.Drawing.Graphics.DrawArc%2A&gt;, &lt;xref:System.Drawing.Graphics.DrawClosedCurve%2A&gt;, &lt;xref:System.Drawing.Graphics.DrawPolygon%2A&gt;, and &lt;xref:System.Drawing.Graphics.DrawRectangle%2A&gt;.","pos":[1121,1380],"source":" These methods include <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, and <xref:System.Drawing.Graphics.DrawRectangle%2A>."},{"content":"For more information about how to draw lines and shapes, see <bpt id=\"p1\">[</bpt>Using a Pen to Draw Lines and Shapes<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Using a Brush to Fill Shapes<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1381,1594],"source":" For more information about how to draw lines and shapes, see [Using a Pen to Draw Lines and Shapes](~/add/includes/ajax-current-ext-md.md) and [Using a Brush to Fill Shapes](~/add/includes/ajax-current-ext-md.md)."},{"content":"You can also draw images and icons by using the &lt;xref:System.Drawing.Graphics.DrawImage%2A&gt; and &lt;xref:System.Drawing.Graphics.DrawIcon%2A&gt; methods, respectively.","pos":[1601,1762],"source":"       You can also draw images and icons by using the <xref:System.Drawing.Graphics.DrawImage%2A> and <xref:System.Drawing.Graphics.DrawIcon%2A> methods, respectively."},{"content":"To perform a bit-block transfer of color data from the screen to the drawing surface of the Graphics object, see &lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt;.","pos":[1763,1925],"source":" To perform a bit-block transfer of color data from the screen to the drawing surface of the Graphics object, see <xref:System.Drawing.Graphics.CopyFromScreen%2A>."},{"content":"For more information about how to draw images with a Graphics object, see <bpt id=\"p1\">[</bpt>Working with Images, Bitmaps, Icons, and Metafiles<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1926,2092],"source":" For more information about how to draw images with a Graphics object, see [Working with Images, Bitmaps, Icons, and Metafiles](~/add/includes/ajax-current-ext-md.md)."},{"content":"In addition, you can manipulate the coordinate system used by the Graphics object.","pos":[2099,2181]},{"content":"For more information on the coordinate system and how to manipulate it, see <bpt id=\"p1\">[</bpt>Coordinate Systems and Transformations<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2182,2338],"source":" For more information on the coordinate system and how to manipulate it, see [Coordinate Systems and Transformations](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[31756,31839],"content":"Adds a comment to the current <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Imaging.Metafile\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a comment to the current <xref href=\"System.Drawing.Imaging.Metafile\"></xref>."},{"pos":[31851,31976],"content":"This method is valid only if this <xref:System.Drawing.Graphics> is associated with a <xref:System.Drawing.Imaging.Metafile>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is valid only if this &lt;xref:System.Drawing.Graphics&gt; is associated with a &lt;xref:System.Drawing.Imaging.Metafile&gt;.","pos":[0,125],"source":"This method is valid only if this <xref:System.Drawing.Graphics> is associated with a <xref:System.Drawing.Imaging.Metafile>."}]},{"pos":[33622,33663],"content":"Array of bytes that contains the comment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Array of bytes that contains the comment.","pos":[0,41]}]},{"pos":[34088,34235],"content":"Saves a graphics container with the current state of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and opens and uses a new graphics container.","needQuote":true,"needEscape":true,"source":"Saves a graphics container with the current state of this <xref href=\"System.Drawing.Graphics\"></xref> and opens and uses a new graphics container."},{"pos":[34248,37155],"content":"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.       When you call the BeginContainer method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The BeginContainer method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the BeginContainer method call.       Containers can be nested; that is, you can call the BeginContainer method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the BeginContainer method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the BeginContainer method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that BeginContainer method call is removed from the stack, and all information blocks placed on that stack after that BeginContainer method call are also removed.       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the BeginContainer method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a BeginContainer method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.       When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the BeginContainer method) after the corresponding call to the BeginContainer method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the BeginContainer method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.       The graphics state established by the BeginContainer method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.       When you call the BeginContainer method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The BeginContainer method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the BeginContainer method call.       Containers can be nested; that is, you can call the BeginContainer method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the BeginContainer method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the BeginContainer method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that BeginContainer method call is removed from the stack, and all information blocks placed on that stack after that BeginContainer method call are also removed.       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the BeginContainer method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a BeginContainer method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.       When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the BeginContainer method) after the corresponding call to the BeginContainer method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the BeginContainer method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.       The graphics state established by the BeginContainer method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.","pos":[0,2897],"nodes":[{"content":"Use this method with the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method to create nested graphics containers.","pos":[0,116],"source":"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers."},{"content":"Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.","pos":[117,226]},{"content":"When you call the BeginContainer method of a &lt;xref:System.Drawing.Graphics&gt;, an information block that holds the state of the &lt;xref:System.Drawing.Graphics&gt; is put on a stack.","pos":[233,408],"source":"       When you call the BeginContainer method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack."},{"content":"The BeginContainer method returns a &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt; that identifies that information block.","pos":[409,534],"source":" The BeginContainer method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block."},{"content":"When you pass the identifying object to the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, the information block is removed from the stack and is used to restore the &lt;xref:System.Drawing.Graphics&gt; to the state it was in at the time of the BeginContainer method call.","pos":[535,809],"source":" When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the BeginContainer method call."},{"content":"Containers can be nested; that is, you can call the BeginContainer method several times before you call the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method.","pos":[816,978],"source":"       Containers can be nested; that is, you can call the BeginContainer method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method."},{"content":"Each time you call the BeginContainer method, an information block is put on the stack, and you receive a &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt; for the information block.","pos":[979,1161],"source":" Each time you call the BeginContainer method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block."},{"content":"When you pass one of those objects to the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, the &lt;xref:System.Drawing.Graphics&gt; is returned to the state it was in at the time of the BeginContainer method call that returned that particular &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;.","pos":[1162,1455],"source":" When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the BeginContainer method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>."},{"content":"The information block placed on the stack by that BeginContainer method call is removed from the stack, and all information blocks placed on that stack after that BeginContainer method call are also removed.","pos":[1456,1663]},{"content":"Calls to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method place information blocks on the same stack as calls to the BeginContainer method.","pos":[1670,1810],"source":"       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the BeginContainer method."},{"content":"Just as an &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method call is paired with a BeginContainer method call, a &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method call is paired with a &lt;xref:System.Drawing.Graphics.Save%2A&gt; method call.","pos":[1811,2050],"source":" Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a BeginContainer method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call."},{"content":"When you call the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the BeginContainer method) after the corresponding call to the BeginContainer method are removed from the stack.","pos":[2057,2345],"source":"       When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the BeginContainer method) after the corresponding call to the BeginContainer method are removed from the stack."},{"content":"Likewise, when you call the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the BeginContainer method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method are removed from the stack.","pos":[2346,2663],"source":" Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the BeginContainer method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack."},{"content":"The graphics state established by the BeginContainer method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.","pos":[2670,2897]}]}]},{"pos":[38447,38643],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the state of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> at the time of the method call.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"></xref> that represents the state of this <xref href=\"System.Drawing.Graphics\"></xref> at the time of the method call."},{"pos":[39318,39505],"content":"Saves a graphics container with the current state of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and opens and uses a new graphics container with the specified scale transformation.","needQuote":true,"needEscape":true,"source":"Saves a graphics container with the current state of this <xref href=\"System.Drawing.Graphics\"></xref> and opens and uses a new graphics container with the specified scale transformation."},{"pos":[39518,43126],"content":"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.       When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.       Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.       When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.       This method specifies a scale transformation for the new graphics container with the `dstrect` and `srcrect` parameters. The scale is equal to the transformation that, when applied to `srcrect`, results in `dstrect`.       The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method with the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method to create nested graphics containers.","pos":[0,116],"source":"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers."},{"content":"Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.","pos":[117,226]},{"content":"When you call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method of a &lt;xref:System.Drawing.Graphics&gt;, an information block that holds the state of the &lt;xref:System.Drawing.Graphics&gt; is put on a stack.","pos":[233,442],"source":"       When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack."},{"content":"The &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method returns a &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt; that identifies that information block.","pos":[443,602],"source":" The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block."},{"content":"When you pass the identifying object to the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, the information block is removed from the stack and is used to restore the &lt;xref:System.Drawing.Graphics&gt; to the state it was in at the time of the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call.","pos":[603,911],"source":" When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call."},{"content":"Containers can be nested; that is, you can call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method several times before you call the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method.","pos":[918,1114],"source":"       Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method."},{"content":"Each time you call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method, an information block is put on the stack, and you receive a &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt; for the information block.","pos":[1115,1331],"source":" Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block."},{"content":"When you pass one of those objects to the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, the &lt;xref:System.Drawing.Graphics&gt; is returned to the state it was in at the time of the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call that returned that particular &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;.","pos":[1332,1659],"source":" When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>."},{"content":"The information block placed on the stack by that &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call is removed from the stack, and all information blocks placed on that stack after that &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call are also removed.","pos":[1660,1935],"source":" The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed."},{"content":"Calls to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method place information blocks on the same stack as calls to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method.","pos":[1942,2116],"source":"       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method."},{"content":"Just as an &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method call is paired with a &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call, a &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method call is paired with a &lt;xref:System.Drawing.Graphics.Save%2A&gt; method call.","pos":[2117,2390],"source":" Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call."},{"content":"When you call the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method are removed from the stack.","pos":[2397,2753],"source":"       When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack."},{"content":"Likewise, when you call the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method are removed from the stack.","pos":[2754,3105],"source":" Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack."},{"content":"This method specifies a scale transformation for the new graphics container with the <ph id=\"ph1\">`dstrect`</ph> and <ph id=\"ph2\">`srcrect`</ph> parameters.","pos":[3112,3232],"source":"       This method specifies a scale transformation for the new graphics container with the `dstrect` and `srcrect` parameters."},{"content":"The scale is equal to the transformation that, when applied to <ph id=\"ph1\">`srcrect`</ph>, results in <ph id=\"ph2\">`dstrect`</ph>.","pos":[3233,3328],"source":" The scale is equal to the transformation that, when applied to `srcrect`, results in `dstrect`."},{"content":"The graphics state established by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.","pos":[3335,3596],"source":"       The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values."}]},{"pos":[44511,44663],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that, together with the <ph id=\"ph1\">`srcrect`</ph> parameter, specifies a scale transformation for the container.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that, together with the `srcrect` parameter, specifies a scale transformation for the container."},{"pos":[44738,44890],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that, together with the <ph id=\"ph1\">`dstrect`</ph> parameter, specifies a scale transformation for the container.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that, together with the `dstrect` parameter, specifies a scale transformation for the container."},{"pos":[44965,45093],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the unit of measure for the container.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the unit of measure for the container."},{"pos":[45180,45376],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the state of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> at the time of the method call.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"></xref> that represents the state of this <xref href=\"System.Drawing.Graphics\"></xref> at the time of the method call."},{"pos":[46061,46248],"content":"Saves a graphics container with the current state of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and opens and uses a new graphics container with the specified scale transformation.","needQuote":true,"needEscape":true,"source":"Saves a graphics container with the current state of this <xref href=\"System.Drawing.Graphics\"></xref> and opens and uses a new graphics container with the specified scale transformation."},{"pos":[46261,49837],"content":"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.       When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.       Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.       When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the `Save` method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.       This method specifies a scale transformation for the new graphics container with the `dstrect` and `srcrect` parameters. The scale is equal to the transformation that, when applied to `srcrect`, results in `dstrect`.       The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method with the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method to create nested graphics containers.","pos":[0,116],"source":"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers."},{"content":"Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.","pos":[117,226]},{"content":"When you call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method of a &lt;xref:System.Drawing.Graphics&gt;, an information block that holds the state of the &lt;xref:System.Drawing.Graphics&gt; is put on a stack.","pos":[233,442],"source":"       When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack."},{"content":"The &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method returns a &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt; that identifies that information block.","pos":[443,602],"source":" The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block."},{"content":"When you pass the identifying object to the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, the information block is removed from the stack and is used to restore the &lt;xref:System.Drawing.Graphics&gt; to the state it was in at the time of the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call.","pos":[603,911],"source":" When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call."},{"content":"Containers can be nested; that is, you can call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method several times before you call the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method.","pos":[918,1114],"source":"       Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method."},{"content":"Each time you call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method, an information block is put on the stack, and you receive a &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt; for the information block.","pos":[1115,1331],"source":" Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block."},{"content":"When you pass one of those objects to the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, the &lt;xref:System.Drawing.Graphics&gt; is returned to the state it was in at the time of the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call that returned that particular &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;.","pos":[1332,1659],"source":" When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>."},{"content":"The information block placed on the stack by that &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call is removed from the stack, and all information blocks placed on that stack after that &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call are also removed.","pos":[1660,1935],"source":" The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed."},{"content":"Calls to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method place information blocks on the same stack as calls to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method.","pos":[1942,2116],"source":"       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method."},{"content":"Just as an &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method call is paired with a &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call, a &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method call is paired with a &lt;xref:System.Drawing.Graphics.Save%2A&gt; method call.","pos":[2117,2390],"source":" Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call."},{"content":"When you call the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, all information blocks placed on the stack (by the <ph id=\"ph1\">`Save`</ph> method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method are removed from the stack.","pos":[2397,2721],"source":"       When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the `Save` method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack."},{"content":"Likewise, when you call the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method are removed from the stack.","pos":[2722,3073],"source":" Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack."},{"content":"This method specifies a scale transformation for the new graphics container with the <ph id=\"ph1\">`dstrect`</ph> and <ph id=\"ph2\">`srcrect`</ph> parameters.","pos":[3080,3200],"source":"       This method specifies a scale transformation for the new graphics container with the `dstrect` and `srcrect` parameters."},{"content":"The scale is equal to the transformation that, when applied to <ph id=\"ph1\">`srcrect`</ph>, results in <ph id=\"ph2\">`dstrect`</ph>.","pos":[3201,3296],"source":" The scale is equal to the transformation that, when applied to `srcrect`, results in `dstrect`."},{"content":"The graphics state established by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.","pos":[3303,3564],"source":"       The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values."}]},{"pos":[51225,51391],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that, together with the <ph id=\"ph1\">`srcrect`</ph> parameter, specifies a scale transformation for the new graphics container.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that, together with the `srcrect` parameter, specifies a scale transformation for the new graphics container."},{"pos":[51467,51633],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that, together with the <ph id=\"ph1\">`dstrect`</ph> parameter, specifies a scale transformation for the new graphics container.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that, together with the `dstrect` parameter, specifies a scale transformation for the new graphics container."},{"pos":[51708,51836],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the unit of measure for the container.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the unit of measure for the container."},{"pos":[51923,52119],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the state of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> at the time of the method call.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"></xref> that represents the state of this <xref href=\"System.Drawing.Graphics\"></xref> at the time of the method call."},{"pos":[52554,52637],"content":"Clears the entire drawing surface and fills it with the specified background color.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears the entire drawing surface and fills it with the specified background color.","pos":[0,83]}]},{"pos":[52649,53013],"content":"The Clear method clears the state of the graphics object and should not be called when the graphics object cannot be updated. For example, if the Clear method is called on a secure desktop in a terminal server session, an <xref:System.Runtime.InteropServices.ExternalException> may occur, leaving the <xref:System.Drawing.Graphics> object in an inconsistent state.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Clear method clears the state of the graphics object and should not be called when the graphics object cannot be updated. For example, if the Clear method is called on a secure desktop in a terminal server session, an <xref:System.Runtime.InteropServices.ExternalException> may occur, leaving the <xref:System.Drawing.Graphics> object in an inconsistent state.","pos":[0,364],"nodes":[{"content":"The Clear method clears the state of the graphics object and should not be called when the graphics object cannot be updated.","pos":[0,125]},{"content":"For example, if the Clear method is called on a secure desktop in a terminal server session, an &lt;xref:System.Runtime.InteropServices.ExternalException&gt; may occur, leaving the &lt;xref:System.Drawing.Graphics&gt; object in an inconsistent state.","pos":[126,364],"source":" For example, if the Clear method is called on a secure desktop in a terminal server session, an <xref:System.Runtime.InteropServices.ExternalException> may occur, leaving the <xref:System.Drawing.Graphics> object in an inconsistent state."}]}]},{"pos":[53891,54003],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the background color of the drawing surface.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Color\"></xref> structure that represents the background color of the drawing surface."},{"pos":[54361,54503],"content":"Gets or sets a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that limits the drawing region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref href=\"System.Drawing.Region\"></xref> that limits the drawing region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[54515,54929],"content":"Modifying the <xref:System.Drawing.Region> object returned by the Clip property does not affect subsequent drawing with the <xref:System.Drawing.Graphics> object. To change the clip region, replace the Clip property value with a new <xref:System.Drawing.Region> object. To determine whether the clipping region is infinite, retrieve the Clip property and call its <xref:System.Drawing.Region.IsInfinite%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Modifying the <xref:System.Drawing.Region> object returned by the Clip property does not affect subsequent drawing with the <xref:System.Drawing.Graphics> object. To change the clip region, replace the Clip property value with a new <xref:System.Drawing.Region> object. To determine whether the clipping region is infinite, retrieve the Clip property and call its <xref:System.Drawing.Region.IsInfinite%2A> method.","pos":[0,414],"nodes":[{"content":"Modifying the &lt;xref:System.Drawing.Region&gt; object returned by the Clip property does not affect subsequent drawing with the &lt;xref:System.Drawing.Graphics&gt; object.","pos":[0,162],"source":"Modifying the <xref:System.Drawing.Region> object returned by the Clip property does not affect subsequent drawing with the <xref:System.Drawing.Graphics> object."},{"content":"To change the clip region, replace the Clip property value with a new &lt;xref:System.Drawing.Region&gt; object.","pos":[163,269],"source":" To change the clip region, replace the Clip property value with a new <xref:System.Drawing.Region> object."},{"content":"To determine whether the clipping region is infinite, retrieve the Clip property and call its &lt;xref:System.Drawing.Region.IsInfinite%2A&gt; method.","pos":[270,414],"source":" To determine whether the clipping region is infinite, retrieve the Clip property and call its <xref:System.Drawing.Region.IsInfinite%2A> method."}]}]},{"pos":[55740,55902],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that limits the portion of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that is currently available for drawing.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Region\"></xref> that limits the portion of this <xref href=\"System.Drawing.Graphics\"></xref> that is currently available for drawing."},{"pos":[56289,56438],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that bounds the clipping region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Drawing.RectangleF\"></xref> structure that bounds the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[56451,57028],"content":"The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.       If the clipping region is infinite, the ClipBounds property returns a meaningless large rectangle. To determine whether the clipping region is infinite, retrieve the <xref:System.Drawing.Graphics.Clip%2A> property and call its <xref:System.Drawing.Region.IsInfinite%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.       If the clipping region is infinite, the ClipBounds property returns a meaningless large rectangle. To determine whether the clipping region is infinite, retrieve the <xref:System.Drawing.Graphics.Clip%2A> property and call its <xref:System.Drawing.Region.IsInfinite%2A> method.","pos":[0,575],"nodes":[{"content":"The unit for resulting rectangle is designated by the &lt;xref:System.Drawing.Graphics.PageUnit%2A&gt; property.","pos":[0,106],"source":"The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property."},{"content":"The default unit is pixels.","pos":[107,134]},{"content":"A &lt;xref:System.Drawing.Graphics&gt; is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.","pos":[135,291],"source":" A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control."},{"content":"If the clipping region is infinite, the ClipBounds property returns a meaningless large rectangle.","pos":[298,396]},{"content":"To determine whether the clipping region is infinite, retrieve the &lt;xref:System.Drawing.Graphics.Clip%2A&gt; property and call its &lt;xref:System.Drawing.Region.IsInfinite%2A&gt; method.","pos":[397,575],"source":" To determine whether the clipping region is infinite, retrieve the <xref:System.Drawing.Graphics.Clip%2A> property and call its <xref:System.Drawing.Region.IsInfinite%2A> method."}]}]},{"pos":[57175,57348],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents a bounding rectangle for the clipping region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents a bounding rectangle for the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[57766,57879],"content":"Gets a value that specifies how composited images are drawn to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value that specifies how composited images are drawn to this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[57892,58322],"content":"The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels.      > [!NOTE] >  You should not use a CompositingMode property value of <xref:System.Drawing.Drawing2D.CompositingMode> when the <xref:System.Drawing.Graphics.TextRenderingHint%2A> property is set to <xref:System.Drawing.Text.TextRenderingHint>. An exception could occur or the image may not render correctly.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels.","pos":[0,116]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You should not use a CompositingMode property value of &lt;xref:System.Drawing.Drawing2D.CompositingMode&gt; when the &lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt; property is set to &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[122,363],"source":"      > [!NOTE] >  You should not use a CompositingMode property value of <xref:System.Drawing.Drawing2D.CompositingMode> when the <xref:System.Drawing.Graphics.TextRenderingHint%2A> property is set to <xref:System.Drawing.Text.TextRenderingHint>."},{"content":"An exception could occur or the image may not render correctly.","pos":[364,427]}]},{"pos":[58509,58701],"content":"This property specifies a member of the <xref href=\"System.Drawing.Drawing2D.CompositingMode\"></xref> enumeration. The default is <xref href=\"System.Drawing.Drawing2D.CompositingMode\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property specifies a member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CompositingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","pos":[0,114],"source":"This property specifies a member of the <xref href=\"System.Drawing.Drawing2D.CompositingMode\"></xref> enumeration."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CompositingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[115,192],"source":" The default is <xref href=\"System.Drawing.Drawing2D.CompositingMode\"></xref>."}]},{"pos":[59139,59254],"content":"Gets or sets the rendering quality of composited images drawn to this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the rendering quality of composited images drawn to this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[59266,59350],"content":"The compositing quality determines the rendering quality level of composited images.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The compositing quality determines the rendering quality level of composited images.","pos":[0,84]}]},{"pos":[59545,59743],"content":"This property specifies a member of the <xref href=\"System.Drawing.Drawing2D.CompositingQuality\"></xref> enumeration. The default is <xref href=\"System.Drawing.Drawing2D.CompositingQuality\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property specifies a member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CompositingQuality\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","pos":[0,117],"source":"This property specifies a member of the <xref href=\"System.Drawing.Drawing2D.CompositingQuality\"></xref> enumeration."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CompositingQuality\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[118,198],"source":" The default is <xref href=\"System.Drawing.Drawing2D.CompositingQuality\"></xref>."}]},{"pos":[60342,60518],"content":"Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[60530,60808],"content":"The CopyFromScreen methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The CopyFromScreen methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter.","pos":[0,278],"nodes":[{"content":"The CopyFromScreen methods are useful for layering one image on top of another.","pos":[0,79]},{"content":"To specify how the source and destination colors are blended, use one of the &lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt; methods that takes a &lt;xref:System.Drawing.CopyPixelOperation&gt; parameter.","pos":[80,278],"source":" To specify how the source and destination colors are blended, use one of the <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter."}]}]},{"pos":[61672,61731],"content":"The point at the upper-left corner of the source rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point at the upper-left corner of the source rectangle.","pos":[0,59]}]},{"pos":[61815,61879],"content":"The point at the upper-left corner of the destination rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point at the upper-left corner of the destination rectangle.","pos":[0,64]}]},{"pos":[61957,61996],"content":"The size of the area to be transferred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the area to be transferred.","pos":[0,39]}]},{"pos":[62181,62202],"content":"The operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The operation failed.","pos":[0,21]}]},{"pos":[62853,63029],"content":"Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[63041,63299],"content":"The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. The `copyPixelOperation` parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt; methods are useful for layering one image on top of another.","pos":[0,113],"source":"The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another."},{"content":"The <ph id=\"ph1\">`copyPixelOperation`</ph> parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.","pos":[114,258],"source":" The `copyPixelOperation` parameter allows you to specify if and how the source colors should be blended with the colors in the destination area."}]},{"pos":[64217,64276],"content":"The point at the upper-left corner of the source rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point at the upper-left corner of the source rectangle.","pos":[0,59]}]},{"pos":[64360,64424],"content":"The point at the upper-left corner of the destination rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point at the upper-left corner of the destination rectangle.","pos":[0,64]}]},{"pos":[64502,64541],"content":"The size of the area to be transferred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the area to be transferred.","pos":[0,39]}]},{"pos":[64636,64709],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CopyPixelOperation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.CopyPixelOperation\"></xref> values."},{"pos":[64922,65028],"content":"<ph id=\"ph1\">&lt;code&gt;copyPixelOperation&lt;/code&gt;</ph> is not a member of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CopyPixelOperation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>copyPixelOperation</code> is not a member of <xref href=\"System.Drawing.CopyPixelOperation\"></xref>."},{"pos":[65147,65168],"content":"The operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The operation failed.","pos":[0,21]}]},{"pos":[65750,65930],"content":"Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[65942,66220],"content":"The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the CopyFromScreen methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the CopyFromScreen methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter.","pos":[0,278],"nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt; methods are useful for layering one image on top of another.","pos":[0,113],"source":"The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another."},{"content":"To specify how the source and destination colors are blended, use one of the CopyFromScreen methods that takes a &lt;xref:System.Drawing.CopyPixelOperation&gt; parameter.","pos":[114,278],"source":" To specify how the source and destination colors are blended, use one of the CopyFromScreen methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter."}]}]},{"pos":[66845,66924],"content":"The x-coordinate of the point at the upper-left corner of the source rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point at the upper-left corner of the source rectangle.","pos":[0,79]}]},{"pos":[66987,67066],"content":"The y-coordinate of the point at the upper-left corner of the source rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point at the upper-left corner of the source rectangle.","pos":[0,79]}]},{"pos":[67134,67218],"content":"The x-coordinate of the point at the upper-left corner of the destination rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point at the upper-left corner of the destination rectangle.","pos":[0,84]}]},{"pos":[67286,67370],"content":"The y-coordinate of the point at the upper-left corner of the destination rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point at the upper-left corner of the destination rectangle.","pos":[0,84]}]},{"pos":[67448,67487],"content":"The size of the area to be transferred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the area to be transferred.","pos":[0,39]}]},{"pos":[67672,67693],"content":"The operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The operation failed.","pos":[0,21]}]},{"pos":[68400,68580],"content":"Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[68592,68850],"content":"The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. The `copyPixelOperation` parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.CopyFromScreen%2A&gt; methods are useful for layering one image on top of another.","pos":[0,113],"source":"The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another."},{"content":"The <ph id=\"ph1\">`copyPixelOperation`</ph> parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.","pos":[114,258],"source":" The `copyPixelOperation` parameter allows you to specify if and how the source colors should be blended with the colors in the destination area."}]},{"pos":[69733,69812],"content":"The x-coordinate of the point at the upper-left corner of the source rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point at the upper-left corner of the source rectangle.","pos":[0,79]}]},{"pos":[69875,69953],"content":"The y-coordinate of the point at the upper-left corner of the source rectangle","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point at the upper-left corner of the source rectangle","pos":[0,78]}]},{"pos":[70021,70105],"content":"The x-coordinate of the point at the upper-left corner of the destination rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point at the upper-left corner of the destination rectangle.","pos":[0,84]}]},{"pos":[70173,70257],"content":"The y-coordinate of the point at the upper-left corner of the destination rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point at the upper-left corner of the destination rectangle.","pos":[0,84]}]},{"pos":[70335,70374],"content":"The size of the area to be transferred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the area to be transferred.","pos":[0,39]}]},{"pos":[70469,70542],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CopyPixelOperation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.CopyPixelOperation\"></xref> values."},{"pos":[70755,70861],"content":"<ph id=\"ph1\">&lt;code&gt;copyPixelOperation&lt;/code&gt;</ph> is not a member of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CopyPixelOperation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>copyPixelOperation</code> is not a member of <xref href=\"System.Drawing.CopyPixelOperation\"></xref>."},{"pos":[70980,71001],"content":"The operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The operation failed.","pos":[0,21]}]},{"pos":[71318,71399],"content":"Releases all resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[71411,71529],"content":"Calling Dispose allows the resources used by this <xref:System.Drawing.Graphics> to be reallocated for other purposes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling Dispose allows the resources used by this &lt;xref:System.Drawing.Graphics&gt; to be reallocated for other purposes.","pos":[0,118],"source":"Calling Dispose allows the resources used by this <xref:System.Drawing.Graphics> to be reallocated for other purposes."}]},{"pos":[72970,73054],"content":"Gets the horizontal resolution of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the horizontal resolution of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[73067,73203],"content":"For more information about creating high-resolution applications, see       <bpt id=\"p1\">[</bpt>High DPI<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=159804)</ept>.","needQuote":false,"needEscape":true,"extradata":"MT","source":"For more information about creating high-resolution applications, see       [High DPI](http://go.microsoft.com/fwlink/?LinkId=159804)."},{"pos":[73960,74082],"content":"The value, in dots per inch, for the horizontal resolution supported by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value, in dots per inch, for the horizontal resolution supported by this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[74439,74521],"content":"Gets the vertical resolution of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the vertical resolution of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[74534,74670],"content":"For more information about creating high-resolution applications, see       <bpt id=\"p1\">[</bpt>High DPI<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=159804)</ept>.","needQuote":false,"needEscape":true,"extradata":"MT","source":"For more information about creating high-resolution applications, see       [High DPI](http://go.microsoft.com/fwlink/?LinkId=159804)."},{"pos":[75427,75547],"content":"The value, in dots per inch, for the vertical resolution supported by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value, in dots per inch, for the vertical resolution supported by this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[76150,76271],"content":"Draws an arc representing a portion of an ellipse specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Draws an arc representing a portion of an ellipse specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[76283,76552],"content":"This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws an arc that is a portion of the perimeter of an ellipse.","pos":[0,74]},{"content":"The ellipse is defined by the boundaries of a rectangle.","pos":[75,131]},{"content":"The arc is the portion of the perimeter of the ellipse between the <ph id=\"ph1\">`startAngle`</ph> parameter and the <ph id=\"ph2\">`startAngle`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`sweepAngle`</ph> parameters.","pos":[132,269],"source":" The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters."}]},{"pos":[77694,77789],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the arc.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the arc."},{"pos":[77861,77961],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that defines the boundaries of the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that defines the boundaries of the ellipse."},{"pos":[78028,78113],"content":"Angle in degrees measured clockwise from the x-axis to the starting point of the arc.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle in degrees measured clockwise from the x-axis to the starting point of the arc.","pos":[0,85]}]},{"pos":[78180,78275],"content":"Angle in degrees measured clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to ending point of the arc.","needQuote":true,"needEscape":true,"source":"Angle in degrees measured clockwise from the `startAngle` parameter to ending point of the arc."},{"pos":[78437,78518],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[79067,79189],"content":"Draws an arc representing a portion of an ellipse specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Draws an arc representing a portion of an ellipse specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure."},{"pos":[79201,79470],"content":"This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws an arc that is a portion of the perimeter of an ellipse.","pos":[0,74]},{"content":"The ellipse is defined by the boundaries of a rectangle.","pos":[75,131]},{"content":"The arc is the portion of the perimeter of the ellipse between the <ph id=\"ph1\">`startAngle`</ph> parameter and the <ph id=\"ph2\">`startAngle`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`sweepAngle`</ph> parameters.","pos":[132,269],"source":" The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters."}]},{"pos":[80613,80708],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the arc.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the arc."},{"pos":[80781,80881],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that defines the boundaries of the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that defines the boundaries of the ellipse."},{"pos":[80948,81033],"content":"Angle in degrees measured clockwise from the x-axis to the starting point of the arc.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle in degrees measured clockwise from the x-axis to the starting point of the arc.","pos":[0,85]}]},{"pos":[81100,81195],"content":"Angle in degrees measured clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to ending point of the arc.","needQuote":true,"needEscape":true,"source":"Angle in degrees measured clockwise from the `startAngle` parameter to ending point of the arc."},{"pos":[81357,81437],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>"},{"pos":[82067,82175],"content":"Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.","pos":[0,108]}]},{"pos":[82187,82456],"content":"This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws an arc that is a portion of the perimeter of an ellipse.","pos":[0,74]},{"content":"The ellipse is defined by the boundaries of a rectangle.","pos":[75,131]},{"content":"The arc is the portion of the perimeter of the ellipse between the <ph id=\"ph1\">`startAngle`</ph> parameter and the <ph id=\"ph2\">`startAngle`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`sweepAngle`</ph> parameters.","pos":[132,269],"source":" The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters."}]},{"pos":[83625,83720],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the arc.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the arc."},{"pos":[83777,83861],"content":"The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.","pos":[0,84]}]},{"pos":[83918,84002],"content":"The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.","pos":[0,84]}]},{"pos":[84063,84111],"content":"Width of the rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the rectangle that defines the ellipse.","pos":[0,48]}]},{"pos":[84173,84222],"content":"Height of the rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the rectangle that defines the ellipse.","pos":[0,49]}]},{"pos":[84288,84373],"content":"Angle in degrees measured clockwise from the x-axis to the starting point of the arc.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle in degrees measured clockwise from the x-axis to the starting point of the arc.","pos":[0,85]}]},{"pos":[84439,84534],"content":"Angle in degrees measured clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to ending point of the arc.","needQuote":true,"needEscape":true,"source":"Angle in degrees measured clockwise from the `startAngle` parameter to ending point of the arc."},{"pos":[84696,84738],"content":"<ph id=\"ph1\">&lt;code&gt;rects&lt;/code&gt;</ph> is a zero-length array.","needQuote":true,"needEscape":true,"source":"<code>rects</code> is a zero-length array."},{"pos":[85398,85506],"content":"Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.","pos":[0,108]}]},{"pos":[85518,85787],"content":"This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws an arc that is a portion of the perimeter of an ellipse.","pos":[0,74]},{"content":"The ellipse is defined by the boundaries of a rectangle.","pos":[75,131]},{"content":"The arc is the portion of the perimeter of the ellipse between the <ph id=\"ph1\">`startAngle`</ph> parameter and the <ph id=\"ph2\">`startAngle`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`sweepAngle`</ph> parameters.","pos":[132,269],"source":" The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters."}]},{"pos":[86971,87066],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the arc.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the arc."},{"pos":[87124,87208],"content":"The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.","pos":[0,84]}]},{"pos":[87266,87350],"content":"The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.","pos":[0,84]}]},{"pos":[87412,87460],"content":"Width of the rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the rectangle that defines the ellipse.","pos":[0,48]}]},{"pos":[87523,87572],"content":"Height of the rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the rectangle that defines the ellipse.","pos":[0,49]}]},{"pos":[87639,87724],"content":"Angle in degrees measured clockwise from the x-axis to the starting point of the arc.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle in degrees measured clockwise from the x-axis to the starting point of the arc.","pos":[0,85]}]},{"pos":[87791,87886],"content":"Angle in degrees measured clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to ending point of the arc.","needQuote":true,"needEscape":true,"source":"Angle in degrees measured clockwise from the `startAngle` parameter to ending point of the arc."},{"pos":[88048,88129],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[88750,88841],"content":"Draws a Bézier spline defined by four <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a Bézier spline defined by four <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[88853,89006],"content":"The Bézier curve is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Bézier curve is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.","pos":[0,153],"nodes":[{"content":"The Bézier curve is drawn from the first point to the fourth point.","pos":[0,67]},{"content":"The second and third points are control points that determine the shape of the curve.","pos":[68,153]}]}]},{"pos":[90036,90143],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> structure that determines the color, width, and style of the curve."},{"pos":[90210,90310],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the starting point of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure that represents the starting point of the curve."},{"pos":[90377,90483],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the first control point for the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure that represents the first control point for the curve."},{"pos":[90550,90657],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the second control point for the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure that represents the second control point for the curve."},{"pos":[90724,90822],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the ending point of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure that represents the ending point of the curve."},{"pos":[90987,91068],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[91709,91801],"content":"Draws a Bézier spline defined by four <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a Bézier spline defined by four <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[91813,91967],"content":"The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.","pos":[0,154],"nodes":[{"content":"The Bézier spline is drawn from the first point to the fourth point.","pos":[0,68]},{"content":"The second and third points are control points that determine the shape of the curve.","pos":[69,154]}]}]},{"pos":[93001,93098],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[93166,93267],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the starting point of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that represents the starting point of the curve."},{"pos":[93335,93442],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the first control point for the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that represents the first control point for the curve."},{"pos":[93510,93618],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the second control point for the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that represents the second control point for the curve."},{"pos":[93686,93785],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the ending point of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that represents the ending point of the curve."},{"pos":[93950,94031],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[94804,94893],"content":"Draws a Bézier spline defined by four ordered pairs of coordinates that represent points.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a Bézier spline defined by four ordered pairs of coordinates that represent points.","pos":[0,89]}]},{"pos":[94905,95059],"content":"The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.","pos":[0,154],"nodes":[{"content":"The Bézier spline is drawn from the first point to the fourth point.","pos":[0,68]},{"content":"The second and third points are control points that determine the shape of the curve.","pos":[69,154]}]}]},{"pos":[96084,96181],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[96240,96292],"content":"The x-coordinate of the starting point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the starting point of the curve.","pos":[0,52]}]},{"pos":[96351,96403],"content":"The y-coordinate of the starting point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the starting point of the curve.","pos":[0,52]}]},{"pos":[96462,96519],"content":"The x-coordinate of the first control point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the first control point of the curve.","pos":[0,57]}]},{"pos":[96578,96635],"content":"The y-coordinate of the first control point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the first control point of the curve.","pos":[0,57]}]},{"pos":[96694,96752],"content":"The x-coordinate of the second control point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the second control point of the curve.","pos":[0,58]}]},{"pos":[96811,96869],"content":"The y-coordinate of the second control point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the second control point of the curve.","pos":[0,58]}]},{"pos":[96928,96978],"content":"The x-coordinate of the ending point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the ending point of the curve.","pos":[0,50]}]},{"pos":[97037,97087],"content":"The y-coordinate of the ending point of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the ending point of the curve.","pos":[0,50]}]},{"pos":[97252,97333],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[97789,97892],"content":"Draws a series of Bézier splines from an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a series of Bézier splines from an array of <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[97905,98435],"content":"The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier spline is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier spline is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.","pos":[0,530],"nodes":[{"content":"The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each.","pos":[0,154]},{"content":"The first Bézier spline is drawn from the first point to the fourth point in the point array.","pos":[155,248]},{"content":"The second and third points are control points that determine the shape of the curve.","pos":[249,334]},{"content":"Each subsequent curve needs exactly three more points: two more control points and an ending point.","pos":[335,434]},{"content":"The ending point of the previous curve is used as the starting point for each additional curve.","pos":[435,530]}]}]},{"pos":[99474,99571],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[99643,99845],"content":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.","needQuote":true,"needEscape":true,"nodes":[{"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the points that determine the curve.","pos":[0,113],"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the points that determine the curve."},{"content":"The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.","pos":[114,202]}]},{"pos":[100012,100211],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[100673,100777],"content":"Draws a series of Bézier splines from an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a series of Bézier splines from an array of <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[100790,101319],"content":"The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier curve is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier curve is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.","pos":[0,529],"nodes":[{"content":"The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each.","pos":[0,154]},{"content":"The first Bézier curve is drawn from the first point to the fourth point in the point array.","pos":[155,247]},{"content":"The second and third points are control points that determine the shape of the curve.","pos":[248,333]},{"content":"Each subsequent curve needs exactly three more points: two more control points and an ending point.","pos":[334,433]},{"content":"The ending point of the previous curve is used as the starting point for each additional curve.","pos":[434,529]}]}]},{"pos":[102350,102447],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[102520,102723],"content":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.","needQuote":true,"needEscape":true,"nodes":[{"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the points that determine the curve.","pos":[0,114],"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points that determine the curve."},{"content":"The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.","pos":[115,203]}]},{"pos":[102890,103089],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[103566,103673],"content":"Draws a closed cardinal spline defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a closed cardinal spline defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[103686,104066],"content":"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       This method uses a default tension of 0.5.","pos":[0,376],"nodes":[{"content":"This method draws a closed cardinal spline that passes through each point in the array.","pos":[0,87]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.","pos":[88,234]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.Point&gt; structures.","pos":[241,327],"source":"       The array of points must contain at least four <xref:System.Drawing.Point> structures."},{"content":"This method uses a default tension of 0.5.","pos":[334,376]}]}]},{"pos":[105172,105270],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and height of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve."},{"pos":[105342,105427],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline."},{"pos":[105598,105797],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[106279,106387],"content":"Draws a closed cardinal spline defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a closed cardinal spline defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[106400,106773],"content":"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.PointF> structures.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.PointF> structures.       This method uses a default tension of 0.5.","pos":[0,369],"nodes":[{"content":"This method draws a closed cardinal spline that passes through each point in the array.","pos":[0,87]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[88,226]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.PointF&gt; structures.","pos":[233,320],"source":"       The array of points must contain at least four <xref:System.Drawing.PointF> structures."},{"content":"This method uses a default tension of 0.5.","pos":[327,369]}]}]},{"pos":[107880,107978],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and height of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve."},{"pos":[108051,108137],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline."},{"pos":[108308,108507],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[109128,109261],"content":"Draws a closed cardinal spline defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using a specified tension.","needQuote":true,"needEscape":true,"source":"Draws a closed cardinal spline defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures using a specified tension."},{"pos":[109274,109882],"content":"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a closed cardinal spline that passes through each point in the array.","pos":[0,87]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[88,226]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.Point&gt; structures.","pos":[233,319],"source":"       The array of points must contain at least four <xref:System.Drawing.Point> structures."},{"content":"The <ph id=\"ph1\">`tension`</ph> parameter determines the shape of the spline.","pos":[326,385],"source":"       The `tension` parameter determines the shape of the spline."},{"content":"If the value of the <ph id=\"ph1\">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.","pos":[386,498],"source":" If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points."},{"content":"Usually, the <ph id=\"ph1\">`tension`</ph> parameter is less than or equal to 1.0F.","pos":[499,562],"source":" Usually, the `tension` parameter is less than or equal to 1.0F."},{"content":"Values over 1.0F produce unusual results.","pos":[563,604]}]},{"pos":[111132,111230],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and height of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve."},{"pos":[111302,111387],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline."},{"pos":[111451,111527],"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","pos":[0,76]}]},{"pos":[111612,111773],"content":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled. This parameter is required but ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how the curve is filled.","pos":[0,121],"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled."},{"content":"This parameter is required but ignored.","pos":[122,161]}]},{"pos":[111944,112143],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[112769,112903],"content":"Draws a closed cardinal spline defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using a specified tension.","needQuote":true,"needEscape":true,"source":"Draws a closed cardinal spline defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures using a specified tension."},{"pos":[112916,113525],"content":"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.PointF> structures.       The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a closed cardinal spline that passes through each point in the array.","pos":[0,87]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[88,226]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.PointF&gt; structures.","pos":[233,320],"source":"       The array of points must contain at least four <xref:System.Drawing.PointF> structures."},{"content":"The <ph id=\"ph1\">`tension`</ph> parameter determines the shape of the spline.","pos":[327,386],"source":"       The `tension` parameter determines the shape of the spline."},{"content":"If the value of the <ph id=\"ph1\">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.","pos":[387,499],"source":" If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points."},{"content":"Usually, the <ph id=\"ph1\">`tension`</ph> parameter is less than or equal to 1.0F.","pos":[500,563],"source":" Usually, the `tension` parameter is less than or equal to 1.0F."},{"content":"Values over 1.0F produce unusual results.","pos":[564,605]}]},{"pos":[114776,114874],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and height of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve."},{"pos":[114947,115033],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline."},{"pos":[115097,115173],"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","pos":[0,76]}]},{"pos":[115258,115422],"content":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled. This parameter is required but is ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how the curve is filled.","pos":[0,121],"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled."},{"content":"This parameter is required but is ignored.","pos":[122,164]}]},{"pos":[115593,115792],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[116239,116345],"content":"Draws a cardinal spline through a specified array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[116358,116609],"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.       This method uses a default tension of 0.5.","pos":[0,247],"nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.","pos":[0,80]},{"content":"The array of points must contain at least three &lt;xref:System.Drawing.Point&gt; structures for a curve to be drawn.","pos":[87,198],"source":"       The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn."},{"content":"This method uses a default tension of 0.5.","pos":[205,247]}]}]},{"pos":[117720,117818],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and height of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve."},{"pos":[117890,117975],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline."},{"pos":[118140,118339],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[118791,118898],"content":"Draws a cardinal spline through a specified array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[118911,119163],"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.       This method uses a default tension of 0.5.","pos":[0,248],"nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.","pos":[0,80]},{"content":"The array of points must contain at least three &lt;xref:System.Drawing.PointF&gt; structures for a curve to be drawn.","pos":[87,199],"source":"       The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn."},{"content":"This method uses a default tension of 0.5.","pos":[206,248]}]}]},{"pos":[120275,120372],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[120445,120531],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline."},{"pos":[120696,120895],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[121391,121523],"content":"Draws a cardinal spline through a specified array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using a specified tension.","needQuote":true,"needEscape":true,"source":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.Point\"></xref> structures using a specified tension."},{"pos":[121536,122023],"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.       The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.","pos":[0,80]},{"content":"The array of points must contain at least three &lt;xref:System.Drawing.Point&gt; structures for a curve to be drawn.","pos":[87,198],"source":"       The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn."},{"content":"The <ph id=\"ph1\">`tension`</ph> parameter determines the shape of the spline.","pos":[205,264],"source":"       The `tension` parameter determines the shape of the spline."},{"content":"If the value of the <ph id=\"ph1\">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.","pos":[265,377],"source":" If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points."},{"content":"Usually, the <ph id=\"ph1\">`tension`</ph> parameter is less than or equal to 1.0F.","pos":[378,441],"source":" Usually, the `tension` parameter is less than or equal to 1.0F."},{"content":"Values over 1.0F produce unusual results.","pos":[442,483]}]},{"pos":[123179,123276],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[123348,123433],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline."},{"pos":[123497,123573],"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","pos":[0,76]}]},{"pos":[123738,123937],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[124438,124571],"content":"Draws a cardinal spline through a specified array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using a specified tension.","needQuote":true,"needEscape":true,"source":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures using a specified tension."},{"pos":[124584,125072],"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.       The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.","pos":[0,80]},{"content":"The array of points must contain at least three &lt;xref:System.Drawing.PointF&gt; structures for a curve to be drawn.","pos":[87,199],"source":"       The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn."},{"content":"The <ph id=\"ph1\">`tension`</ph> parameter determines the shape of the spline.","pos":[206,265],"source":"       The `tension` parameter determines the shape of the spline."},{"content":"If the value of the <ph id=\"ph1\">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.","pos":[266,378],"source":" If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points."},{"content":"Usually, the <ph id=\"ph1\">`tension`</ph> parameter is less than or equal to 1.0F.","pos":[379,442],"source":" Usually, the `tension` parameter is less than or equal to 1.0F."},{"content":"Values over 1.0F produce unusual results.","pos":[443,484]}]},{"pos":[126229,126326],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[126399,126510],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the points that define the curve.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points that define the curve."},{"pos":[126574,126650],"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","pos":[0,76]}]},{"pos":[126815,127014],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[127554,127720],"content":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures. The drawing begins offset from the beginning of the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a cardinal spline through a specified array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","pos":[0,107],"source":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures."},{"content":"The drawing begins offset from the beginning of the array.","pos":[108,166]}]},{"pos":[127733,128543],"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.       The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.       The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.","pos":[0,80]},{"content":"The array of points must contain at least three &lt;xref:System.Drawing.PointF&gt; structures for a curve to be drawn.","pos":[87,199],"source":"       The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn."},{"content":"The value of the <ph id=\"ph1\">`offset`</ph> parameter specifies the number of elements to skip in the array.","pos":[206,296],"source":"       The value of the `offset` parameter specifies the number of elements to skip in the array."},{"content":"The first element after the skipped elements represents the starting point of the curve.","pos":[297,385]},{"content":"The value of the <ph id=\"ph1\">`numberOfSegments`</ph> parameter specifies the number of segments, after the starting point, to draw in the curve.","pos":[392,519],"source":"       The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve."},{"content":"The value of the <ph id=\"ph1\">`numberOfSegments`</ph> parameter must be at least 1.","pos":[520,585],"source":" The value of the `numberOfSegments` parameter must be at least 1."},{"content":"The value of the <ph id=\"ph1\">`offset`</ph> parameter plus the value of the <ph id=\"ph2\">`numberOfSegments`</ph> parameter must be less than the number of elements in the array of the <ph id=\"ph3\">`points`</ph> parameter.","pos":[586,753],"source":" The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter."},{"content":"This method uses a default tension of 0.5.","pos":[760,802]}]},{"pos":[129783,129880],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[129953,130039],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline."},{"pos":[130101,130205],"content":"Offset from the first element in the array of the <ph id=\"ph1\">`points`</ph> parameter to the starting point in the curve.","needQuote":true,"needEscape":true,"source":"Offset from the first element in the array of the `points` parameter to the starting point in the curve."},{"pos":[130277,130345],"content":"Number of segments after the starting point to include in the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number of segments after the starting point to include in the curve.","pos":[0,68]}]},{"pos":[130510,130709],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[131293,131425],"content":"Draws a cardinal spline through a specified array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using a specified tension.","needQuote":true,"needEscape":true,"source":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.Point\"></xref> structures using a specified tension."},{"pos":[131438,132483],"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.       The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.       The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.       The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.","pos":[0,80]},{"content":"The array of points must contain at least three &lt;xref:System.Drawing.Point&gt; structures for a curve to be drawn.","pos":[87,198],"source":"       The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn."},{"content":"The value of the <ph id=\"ph1\">`offset`</ph> parameter specifies the number of elements to skip in the array.","pos":[205,295],"source":"       The value of the `offset` parameter specifies the number of elements to skip in the array."},{"content":"The first element after the skipped elements represents the starting point of the curve.","pos":[296,384]},{"content":"The value of the <ph id=\"ph1\">`numberOfSegments`</ph> parameter specifies the number of segments, after the starting point, to draw in the curve.","pos":[391,518],"source":"       The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve."},{"content":"The value of the <ph id=\"ph1\">`numberOfSegments`</ph> parameter must be at least 1.","pos":[519,584],"source":" The value of the `numberOfSegments` parameter must be at least 1."},{"content":"The value of the <ph id=\"ph1\">`offset`</ph> parameter plus the value of the <ph id=\"ph2\">`numberOfSegments`</ph> parameter must be less than the number of elements in the array of the <ph id=\"ph3\">`points`</ph> parameter.","pos":[585,752],"source":" The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter."},{"content":"The <ph id=\"ph1\">`tension`</ph> parameter determines the shape of the spline.","pos":[759,818],"source":"       The `tension` parameter determines the shape of the spline."},{"content":"If the value of the <ph id=\"ph1\">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.","pos":[819,931],"source":" If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points."},{"content":"Usually, the <ph id=\"ph1\">`tension`</ph> parameter is less than or equal to 1.0F.","pos":[932,995],"source":" Usually, the `tension` parameter is less than or equal to 1.0F."},{"content":"Values over 1.0F produce unusual results.","pos":[996,1037]}]},{"pos":[133763,133860],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[133932,134017],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline."},{"pos":[134079,134183],"content":"Offset from the first element in the array of the <ph id=\"ph1\">`points`</ph> parameter to the starting point in the curve.","needQuote":true,"needEscape":true,"source":"Offset from the first element in the array of the `points` parameter to the starting point in the curve."},{"pos":[134255,134323],"content":"Number of segments after the starting point to include in the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number of segments after the starting point to include in the curve.","pos":[0,68]}]},{"pos":[134387,134463],"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","pos":[0,76]}]},{"pos":[134628,134827],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[135416,135608],"content":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures using a specified tension. The drawing begins offset from the beginning of the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a cardinal spline through a specified array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using a specified tension.","pos":[0,133],"source":"Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures using a specified tension."},{"content":"The drawing begins offset from the beginning of the array.","pos":[134,192]}]},{"pos":[135621,136665],"content":"This method draws a cardinal spline that passes through each point in the array.       The array of points must contain at least three <xref:System.Drawing.PointF> structures for curve to be drawn.       The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.       The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.       The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a cardinal spline that passes through each point in the array.","pos":[0,80]},{"content":"The array of points must contain at least three &lt;xref:System.Drawing.PointF&gt; structures for curve to be drawn.","pos":[87,197],"source":"       The array of points must contain at least three <xref:System.Drawing.PointF> structures for curve to be drawn."},{"content":"The value of the <ph id=\"ph1\">`offset`</ph> parameter specifies the number of elements to skip in the array.","pos":[204,294],"source":"       The value of the `offset` parameter specifies the number of elements to skip in the array."},{"content":"The first element after the skipped elements represents the starting point of the curve.","pos":[295,383]},{"content":"The value of the <ph id=\"ph1\">`numberOfSegments`</ph> parameter specifies the number of segments, after the starting point, to draw in the curve.","pos":[390,517],"source":"       The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve."},{"content":"The value of the <ph id=\"ph1\">`numberOfSegments`</ph> parameter must be at least 1.","pos":[518,583],"source":" The value of the `numberOfSegments` parameter must be at least 1."},{"content":"The value of the <ph id=\"ph1\">`offset`</ph> parameter plus the value of the <ph id=\"ph2\">`numberOfSegments`</ph> parameter must be less than the number of elements in the array of the <ph id=\"ph3\">`points`</ph> parameter.","pos":[584,751],"source":" The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter."},{"content":"The <ph id=\"ph1\">`tension`</ph> parameter determines the shape of the spline.","pos":[758,817],"source":"       The `tension` parameter determines the shape of the spline."},{"content":"If the value of the <ph id=\"ph1\">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.","pos":[818,930],"source":" If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points."},{"content":"Usually, the <ph id=\"ph1\">`tension`</ph> parameter is less than or equal to 1.0F.","pos":[931,994],"source":" Usually, the `tension` parameter is less than or equal to 1.0F."},{"content":"Values over 1.0F produce unusual results.","pos":[995,1036]}]},{"pos":[137946,138043],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the curve.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve."},{"pos":[138116,138202],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline."},{"pos":[138264,138368],"content":"Offset from the first element in the array of the <ph id=\"ph1\">`points`</ph> parameter to the starting point in the curve.","needQuote":true,"needEscape":true,"source":"Offset from the first element in the array of the `points` parameter to the starting point in the curve."},{"pos":[138440,138508],"content":"Number of segments after the starting point to include in the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number of segments after the starting point to include in the curve.","pos":[0,68]}]},{"pos":[138572,138648],"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","pos":[0,76]}]},{"pos":[138813,139012],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[139479,139576],"content":"Draws an ellipse specified by a bounding <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Draws an ellipse specified by a bounding <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[139588,139693],"content":"This method draws an ellipse that is defined by the bounding rectangle specified by the <ph id=\"ph1\">`rect`</ph> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method draws an ellipse that is defined by the bounding rectangle specified by the `rect` parameter."},{"pos":[140625,140724],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the ellipse."},{"pos":[140796,140895],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that defines the boundaries of the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that defines the boundaries of the ellipse."},{"pos":[141061,141142],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[141613,141699],"content":"Draws an ellipse defined by a bounding <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Draws an ellipse defined by a bounding <xref href=\"System.Drawing.RectangleF\"></xref>."},{"pos":[141711,141816],"content":"This method draws an ellipse that is defined by the bounding rectangle specified by the <ph id=\"ph1\">`rect`</ph> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method draws an ellipse that is defined by the bounding rectangle specified by the `rect` parameter."},{"pos":[142749,142848],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the ellipse."},{"pos":[142921,143021],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that defines the boundaries of the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that defines the boundaries of the ellipse."},{"pos":[143187,143268],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[143830,143970],"content":"Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.","pos":[0,140]}]},{"pos":[143982,144113],"content":"This method draws an ellipse that is defined by the bounding rectangle described by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method draws an ellipse that is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters."},{"pos":[145076,145175],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the ellipse."},{"pos":[145232,145325],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[145382,145475],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[145536,145593],"content":"Width of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the bounding rectangle that defines the ellipse.","pos":[0,57]}]},{"pos":[145655,145713],"content":"Height of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the bounding rectangle that defines the ellipse.","pos":[0,58]}]},{"pos":[145879,145960],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[146542,146649],"content":"Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.","pos":[0,107]}]},{"pos":[146661,146792],"content":"This method draws an ellipse that is defined by the bounding rectangle described by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method draws an ellipse that is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters."},{"pos":[147763,147862],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the ellipse."},{"pos":[147920,148013],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[148071,148164],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[148226,148283],"content":"Width of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the bounding rectangle that defines the ellipse.","pos":[0,57]}]},{"pos":[148346,148404],"content":"Height of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the bounding rectangle that defines the ellipse.","pos":[0,58]}]},{"pos":[148570,148651],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[149107,149280],"content":"Draws the image represented by the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Icon\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> within the area specified by a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Draws the image represented by the specified <xref href=\"System.Drawing.Icon\"></xref> within the area specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[150452,150501],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Icon\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Icon\"></xref> to draw."},{"pos":[150579,150816],"content":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the resulting image on the display surface. The image contained in the `icon` parameter is scaled to the dimensions of this rectangular area.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the resulting image on the display surface.","pos":[0,139],"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the resulting image on the display surface."},{"content":"The image contained in the <ph id=\"ph1\">`icon`</ph> parameter is scaled to the dimensions of this rectangular area.","pos":[140,237],"source":" The image contained in the `icon` parameter is scaled to the dimensions of this rectangular area."}]},{"pos":[150979,151061],"content":"<ph id=\"ph1\">&lt;code&gt;icon&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>icon</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[151525,151640],"content":"Draws the image represented by the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Icon\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified coordinates.","needQuote":true,"needEscape":true,"source":"Draws the image represented by the specified <xref href=\"System.Drawing.Icon\"></xref> at the specified coordinates."},{"pos":[152703,152752],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Icon\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Icon\"></xref> to draw."},{"pos":[152809,152870],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[152927,152988],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[153151,153233],"content":"<ph id=\"ph1\">&lt;code&gt;icon&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>icon</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[153744,153856],"content":"Draws the image represented by the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Icon\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> without scaling the image.","needQuote":true,"needEscape":true,"source":"Draws the image represented by the specified <xref href=\"System.Drawing.Icon\"></xref> without scaling the image."},{"pos":[155004,155053],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Icon\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Icon\"></xref> to draw."},{"pos":[155131,155400],"content":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the resulting image. The image is not scaled to fit this rectangle, but retains its original size. If the image is larger than the rectangle, it is clipped to fit inside it.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the resulting image.","pos":[0,116],"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the resulting image."},{"content":"The image is not scaled to fit this rectangle, but retains its original size.","pos":[117,194]},{"content":"If the image is larger than the rectangle, it is clipped to fit inside it.","pos":[195,269]}]},{"pos":[155574,155656],"content":"<ph id=\"ph1\">&lt;code&gt;icon&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>icon</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[156102,156225],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, using its original physical size, at the specified location.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref>, using its original physical size, at the specified location."},{"pos":[156238,157097],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[0,857],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,590]},{"content":"For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[591,694]},{"content":"If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[695,857]}]}]},{"pos":[158133,158183],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[158252,158377],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the location of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure that represents the location of the upper-left corner of the drawn image."},{"pos":[158541,158624],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[159080,159206],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified shape and size.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified shape and size."},{"pos":[159219,159657],"content":"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.       The image represented by the `image` parameter is scaled and sheared to fit the shape of the parallelogram specified by the `destPoints` parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`destPoints`</ph> parameter specifies three points of a parallelogram.","pos":[0,69],"source":"The `destPoints` parameter specifies three points of a parallelogram."},{"content":"The three &lt;xref:System.Drawing.Point&gt; structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.","pos":[70,202],"source":" The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram."},{"content":"The fourth point is extrapolated from the first three to form a parallelogram.","pos":[203,281]},{"content":"The image represented by the <ph id=\"ph1\">`image`</ph> parameter is scaled and sheared to fit the shape of the parallelogram specified by the <ph id=\"ph2\">`destPoints`</ph> parameters.","pos":[288,436],"source":"       The image represented by the `image` parameter is scaled and sheared to fit the shape of the parallelogram specified by the `destPoints` parameters."}]},{"pos":[160903,160953],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[161029,161125],"content":"Array of three <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram.","needQuote":true,"needEscape":true,"source":"Array of three <xref href=\"System.Drawing.Point\"></xref> structures that define a parallelogram."},{"pos":[161289,161372],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[161823,161946],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, using its original physical size, at the specified location.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref>, using its original physical size, at the specified location."},{"pos":[161959,162818],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[0,857],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,590]},{"content":"For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[591,694]},{"content":"If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[695,857]}]}]},{"pos":[163855,163905],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[163975,164085],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that represents the upper-left corner of the drawn image."},{"pos":[164249,164332],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[164793,164919],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified shape and size.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified shape and size."},{"pos":[164932,165367],"content":"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.       The image represented by the `image` object is scaled and sheared to fit the shape of the parallelogram specified by the `destPoints` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`destPoints`</ph> parameter specifies three points of a parallelogram.","pos":[0,69],"source":"The `destPoints` parameter specifies three points of a parallelogram."},{"content":"The three &lt;xref:System.Drawing.PointF&gt; structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.","pos":[70,203],"source":" The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram."},{"content":"The fourth point is extrapolated from the first three to form a parallelogram.","pos":[204,282]},{"content":"The image represented by the <ph id=\"ph1\">`image`</ph> object is scaled and sheared to fit the shape of the parallelogram specified by the <ph id=\"ph2\">`destPoints`</ph> parameter.","pos":[289,433],"source":"       The image represented by the `image` object is scaled and sheared to fit the shape of the parallelogram specified by the `destPoints` parameter."}]},{"pos":[166605,166655],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[166732,166829],"content":"Array of three <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram.","needQuote":true,"needEscape":true,"source":"Array of three <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram."},{"pos":[166993,167076],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[167542,167658],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[167670,167766],"content":"The image represented by the <ph id=\"ph1\">`image`</ph> object is scaled to the dimensions of the <ph id=\"ph2\">`rect`</ph> rectangle.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The image represented by the `image` object is scaled to the dimensions of the `rect` rectangle."},{"pos":[168944,168994],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[169066,169178],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the drawn image.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image."},{"pos":[169342,169425],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[169896,170012],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[170024,170120],"content":"The image represented by the <ph id=\"ph1\">`image`</ph> object is scaled to the dimensions of the <ph id=\"ph2\">`rect`</ph> rectangle.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The image represented by the `image` object is scaled to the dimensions of the `rect` rectangle."},{"pos":[171302,171352],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[171425,171538],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the drawn image.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location and size of the drawn image."},{"pos":[171702,171785],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[172259,172367],"content":"Draws the specified image, using its original physical size, at the location specified by a coordinate pair.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws the specified image, using its original physical size, at the location specified by a coordinate pair.","pos":[0,108]}]},{"pos":[172380,173246],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImage method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImage to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImage method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImage to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[0,864],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"The DrawImage method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,599]},{"content":"For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[600,703]},{"content":"If you call DrawImage to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[704,864]}]}]},{"pos":[174309,174359],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[174416,174477],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[174534,174595],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[174759,174842],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[175326,175449],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, using its original physical size, at the specified location.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref>, using its original physical size, at the specified location."},{"pos":[175462,176321],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[0,857],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,590]},{"content":"For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[591,694]},{"content":"If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[695,857]}]}]},{"pos":[177360,177410],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[177468,177529],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[177587,177648],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[177812,177895],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[178526,178667],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[178680,179164],"content":"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.       The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`destPoints`</ph> parameter specifies three points of a parallelogram.","pos":[0,69],"source":"The `destPoints` parameter specifies three points of a parallelogram."},{"content":"The three &lt;xref:System.Drawing.Point&gt; structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.","pos":[70,202],"source":" The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram."},{"content":"The fourth point is extrapolated from the first three to form a parallelogram.","pos":[203,281]},{"content":"The <ph id=\"ph1\">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id=\"ph2\">`image`</ph> object to draw.","pos":[288,374],"source":"       The `srcRect` parameter specifies a rectangular portion of the `image` object to draw."},{"content":"This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id=\"ph1\">`destPoints`</ph> parameter.","pos":[375,482],"source":" This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter."}]},{"pos":[180594,180644],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[180720,180816],"content":"Array of three <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram.","needQuote":true,"needEscape":true,"source":"Array of three <xref href=\"System.Drawing.Point\"></xref> structures that define a parallelogram."},{"pos":[180891,181004],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the portion of the <ph id=\"ph1\">`image`</ph> object to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the portion of the `image` object to draw."},{"pos":[181082,181225],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used by the <ph id=\"ph1\">`srcRect`</ph> parameter.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter."},{"pos":[181389,181472],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[182113,182254],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[182267,182752],"content":"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.       The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`destPoints`</ph> parameter specifies three points of a parallelogram.","pos":[0,69],"source":"The `destPoints` parameter specifies three points of a parallelogram."},{"content":"The three &lt;xref:System.Drawing.PointF&gt; structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.","pos":[70,203],"source":" The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram."},{"content":"The fourth point is extrapolated from the first three to form a parallelogram.","pos":[204,282]},{"content":"The <ph id=\"ph1\">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id=\"ph2\">`image`</ph> object to draw.","pos":[289,375],"source":"       The `srcRect` parameter specifies a rectangular portion of the `image` object to draw."},{"content":"This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id=\"ph1\">`destPoints`</ph> parameter.","pos":[376,483],"source":" This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter."}]},{"pos":[184351,184401],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[184478,184575],"content":"Array of three <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram.","needQuote":true,"needEscape":true,"source":"Array of three <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram."},{"pos":[184651,184765],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the portion of the <ph id=\"ph1\">`image`</ph> object to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the portion of the `image` object to draw."},{"pos":[184843,184986],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used by the <ph id=\"ph1\">`srcRect`</ph> parameter.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter."},{"pos":[185150,185233],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[185874,186015],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[186027,186203],"content":"The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id=\"ph2\">`image`</ph> object to draw.","pos":[0,86],"source":"The `srcRect` parameter specifies a rectangular portion of the `image` object to draw."},{"content":"This portion is scaled to fit inside the rectangle specified by the <ph id=\"ph1\">`destRect`</ph> parameter.","pos":[87,176],"source":" This portion is scaled to fit inside the rectangle specified by the `destRect` parameter."}]},{"pos":[187727,187777],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[187853,188007],"content":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the drawn image.","pos":[0,112],"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image."},{"content":"The image is scaled to fit the rectangle.","pos":[113,154]}]},{"pos":[188082,188195],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the portion of the <ph id=\"ph1\">`image`</ph> object to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the portion of the `image` object to draw."},{"pos":[188273,188416],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used by the <ph id=\"ph1\">`srcRect`</ph> parameter.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter."},{"pos":[188580,188663],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[189314,189455],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[189467,189643],"content":"The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id=\"ph2\">`image`</ph> object to draw.","pos":[0,86],"source":"The `srcRect` parameter specifies a rectangular portion of the `image` object to draw."},{"content":"This portion is scaled to fit inside the rectangle specified by the <ph id=\"ph1\">`destRect`</ph> parameter.","pos":[87,176],"source":" This portion is scaled to fit inside the rectangle specified by the `destRect` parameter."}]},{"pos":[191172,191222],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[191299,191454],"content":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the drawn image.","pos":[0,113],"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location and size of the drawn image."},{"content":"The image is scaled to fit the rectangle.","pos":[114,155]}]},{"pos":[191530,191644],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the portion of the <ph id=\"ph1\">`image`</ph> object to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the portion of the `image` object to draw."},{"pos":[191722,191865],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used by the <ph id=\"ph1\">`srcRect`</ph> parameter.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter."},{"pos":[192029,192112],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[192869,192982],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location."},{"pos":[192995,193478],"content":"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.       The `srcRect` parameter specifies a rectangular portion of the`image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`destPoints`</ph> parameter specifies three points of a parallelogram.","pos":[0,69],"source":"The `destPoints` parameter specifies three points of a parallelogram."},{"content":"The three &lt;xref:System.Drawing.Point&gt; structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.","pos":[70,202],"source":" The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram."},{"content":"The fourth point is extrapolated from the first three to form a parallelogram.","pos":[203,281]},{"content":"The <ph id=\"ph1\">`srcRect`</ph> parameter specifies a rectangular portion of the<ph id=\"ph2\">`image`</ph> object to draw.","pos":[288,373],"source":"       The `srcRect` parameter specifies a rectangular portion of the`image` object to draw."},{"content":"This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id=\"ph1\">`destPoints`</ph> parameter.","pos":[374,481],"source":" This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter."}]},{"pos":[195230,195280],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[195356,195452],"content":"Array of three <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram.","needQuote":true,"needEscape":true,"source":"Array of three <xref href=\"System.Drawing.Point\"></xref> structures that define a parallelogram."},{"pos":[195527,195640],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the portion of the <ph id=\"ph1\">`image`</ph> object to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the portion of the `image` object to draw."},{"pos":[195718,195861],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used by the <ph id=\"ph1\">`srcRect`</ph> parameter.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter."},{"pos":[195952,196083],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Imaging.ImageAttributes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies recoloring and gamma information for the <ph id=\"ph1\">`image`</ph> object.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Imaging.ImageAttributes\"></xref> that specifies recoloring and gamma information for the `image` object."},{"pos":[196247,196330],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[197097,197238],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[197251,197736],"content":"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.       The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`destPoints`</ph> parameter specifies three points of a parallelogram.","pos":[0,69],"source":"The `destPoints` parameter specifies three points of a parallelogram."},{"content":"The three &lt;xref:System.Drawing.PointF&gt; structures represent the upper-left, upper-right, and lower-left corners of the parallelogram.","pos":[70,203],"source":" The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram."},{"content":"The fourth point is extrapolated from the first three to form a parallelogram.","pos":[204,282]},{"content":"The <ph id=\"ph1\">`srcRect`</ph> parameter specifies a rectangular portion of the <ph id=\"ph2\">`image`</ph> object to draw.","pos":[289,375],"source":"       The `srcRect` parameter specifies a rectangular portion of the `image` object to draw."},{"content":"This portion is scaled and sheared to fit inside the parallelogram specified by the <ph id=\"ph1\">`destPoints`</ph> parameter.","pos":[376,483],"source":" This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter."}]},{"pos":[199657,199707],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[199784,199881],"content":"Array of three <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define a parallelogram.","needQuote":true,"needEscape":true,"source":"Array of three <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram."},{"pos":[199957,200071],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the portion of the <ph id=\"ph1\">`image`</ph> object to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the portion of the `image` object to draw."},{"pos":[200149,200292],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used by the <ph id=\"ph1\">`srcRect`</ph> parameter.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter."},{"pos":[200383,200514],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Imaging.ImageAttributes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies recoloring and gamma information for the <ph id=\"ph1\">`image`</ph> object.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Imaging.ImageAttributes\"></xref> that specifies recoloring and gamma information for the `image` object."},{"pos":[200678,200761],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[201410,201462],"content":"Draws a portion of an image at a specified location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a portion of an image at a specified location.","pos":[0,52]}]},{"pos":[201475,202379],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.       This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.       This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.","pos":[0,902],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,611]},{"content":"For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[612,723]},{"content":"If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.","pos":[724,902]}]}]},{"pos":[203740,203790],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[203847,203908],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[203965,204026],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[204101,204214],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the portion of the <ph id=\"ph1\">`image`</ph> object to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the portion of the `image` object to draw."},{"pos":[204292,204435],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used by the <ph id=\"ph1\">`srcRect`</ph> parameter.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter."},{"pos":[204599,204682],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[205244,205360],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[205372,205496],"content":"The rectangle defined by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters determines the position and size of the drawn image.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The rectangle defined by the `x`, `y`, `width`, and `height` parameters determines the position and size of the drawn image."},{"pos":[206708,206758],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[206815,206876],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[206933,206994],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[207055,207080],"content":"Width of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the drawn image.","pos":[0,25]}]},{"pos":[207142,207168],"content":"Height of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the drawn image.","pos":[0,26]}]},{"pos":[207332,207415],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[208079,208131],"content":"Draws a portion of an image at a specified location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a portion of an image at a specified location.","pos":[0,52]}]},{"pos":[208144,209048],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.       This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.       This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.","pos":[0,902],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,611]},{"content":"For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[612,723]},{"content":"If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.","pos":[724,902]}]}]},{"pos":[210414,210464],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[210522,210583],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[210641,210702],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[210778,210919],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the portion of the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the portion of the <xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[210997,211140],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used by the <ph id=\"ph1\">`srcRect`</ph> parameter.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter."},{"pos":[211304,211387],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[211969,212085],"content":"Draws the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[212097,212221],"content":"The rectangle defined by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters determines the position and size of the drawn image.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The rectangle defined by the `x`, `y`, `width`, and `height` parameters determines the position and size of the drawn image."},{"pos":[213441,213491],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[213549,213610],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[213668,213729],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[213791,213816],"content":"Width of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the drawn image.","pos":[0,25]}]},{"pos":[213879,213905],"content":"Height of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the drawn image.","pos":[0,26]}]},{"pos":[214069,214152],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[215412,215424],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[215500,215512],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[215587,215599],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[215677,215689],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[215780,215792],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[215882,215894],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[217230,217242],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[217319,217331],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[217407,217419],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[217497,217509],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[217600,217612],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[217702,217714],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[219100,219112],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[219188,219200],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[219275,219287],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[219365,219377],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[219468,219480],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[219570,219582],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[219650,219662],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[221060,221072],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[221149,221161],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[221237,221249],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[221327,221339],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[221430,221442],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[221532,221544],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[221612,221624],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[222425,222566],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[222578,222860],"content":"The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`srcX`</ph>, <ph id=\"ph2\">`srcY`</ph>, <ph id=\"ph3\">`srcWidth`</ph>, and <ph id=\"ph4\">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id=\"ph5\">`image`</ph> object to draw.","pos":[0,120],"source":"The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw."},{"content":"The rectangle is relative to the upper-left corner of the source image.","pos":[121,192]},{"content":"This portion is scaled to fit inside the rectangle specified by the <ph id=\"ph1\">`destRect`</ph> parameter.","pos":[193,282],"source":" This portion is scaled to fit inside the rectangle specified by the `destRect` parameter."}]},{"pos":[224422,224472],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[224548,224702],"content":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the drawn image.","pos":[0,112],"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image."},{"content":"The image is scaled to fit the rectangle.","pos":[113,154]}]},{"pos":[224762,224847],"content":"The x-coordinate of the upper-left corner of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the portion of the source image to draw.","pos":[0,85]}]},{"pos":[224907,224992],"content":"The y-coordinate of the upper-left corner of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the portion of the source image to draw.","pos":[0,85]}]},{"pos":[225056,225105],"content":"Width of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the portion of the source image to draw.","pos":[0,49]}]},{"pos":[225170,225220],"content":"Height of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the portion of the source image to draw.","pos":[0,50]}]},{"pos":[225298,225448],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used to determine the source rectangle.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used to determine the source rectangle."},{"pos":[225612,225695],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[226452,226593],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[226605,226887],"content":"The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`srcX`</ph>, <ph id=\"ph2\">`srcY`</ph>, <ph id=\"ph3\">`srcWidth`</ph>, and <ph id=\"ph4\">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id=\"ph5\">`image`</ph> object to draw.","pos":[0,120],"source":"The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw."},{"content":"The rectangle is relative to the upper-left corner of the source image.","pos":[121,192]},{"content":"This portion is scaled to fit inside the rectangle specified by the <ph id=\"ph1\">`destRect`</ph> parameter.","pos":[193,282],"source":" This portion is scaled to fit inside the rectangle specified by the `destRect` parameter."}]},{"pos":[228453,228503],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[228579,228733],"content":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the drawn image.","pos":[0,112],"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image."},{"content":"The image is scaled to fit the rectangle.","pos":[113,154]}]},{"pos":[228794,228879],"content":"The x-coordinate of the upper-left corner of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the portion of the source image to draw.","pos":[0,85]}]},{"pos":[228940,229025],"content":"The y-coordinate of the upper-left corner of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the portion of the source image to draw.","pos":[0,85]}]},{"pos":[229090,229139],"content":"Width of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the portion of the source image to draw.","pos":[0,49]}]},{"pos":[229205,229255],"content":"Height of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the portion of the source image to draw.","pos":[0,50]}]},{"pos":[229333,229483],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used to determine the source rectangle.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used to determine the source rectangle."},{"pos":[229647,229730],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[230593,230734],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[230746,231028],"content":"The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`srcX`</ph>, <ph id=\"ph2\">`srcY`</ph>, <ph id=\"ph3\">`srcWidth`</ph>, and <ph id=\"ph4\">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id=\"ph5\">`image`</ph> object to draw.","pos":[0,120],"source":"The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw."},{"content":"The rectangle is relative to the upper-left corner of the source image.","pos":[121,192]},{"content":"This portion is scaled to fit inside the rectangle specified by the <ph id=\"ph1\">`destRect`</ph> parameter.","pos":[193,282],"source":" This portion is scaled to fit inside the rectangle specified by the `destRect` parameter."}]},{"pos":[232908,232958],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[233034,233188],"content":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the drawn image.","pos":[0,112],"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image."},{"content":"The image is scaled to fit the rectangle.","pos":[113,154]}]},{"pos":[233248,233333],"content":"The x-coordinate of the upper-left corner of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the portion of the source image to draw.","pos":[0,85]}]},{"pos":[233393,233478],"content":"The y-coordinate of the upper-left corner of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the portion of the source image to draw.","pos":[0,85]}]},{"pos":[233542,233591],"content":"Width of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the portion of the source image to draw.","pos":[0,49]}]},{"pos":[233656,233706],"content":"Height of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the portion of the source image to draw.","pos":[0,50]}]},{"pos":[233784,233934],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used to determine the source rectangle.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used to determine the source rectangle."},{"pos":[234025,234156],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Imaging.ImageAttributes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies recoloring and gamma information for the <ph id=\"ph1\">`image`</ph> object.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Imaging.ImageAttributes\"></xref> that specifies recoloring and gamma information for the `image` object."},{"pos":[234320,234403],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[235286,235427],"content":"Draws the specified portion of the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified location and with the specified size.","needQuote":true,"needEscape":true,"source":"Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size."},{"pos":[235439,235721],"content":"The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`srcX`</ph>, <ph id=\"ph2\">`srcY`</ph>, <ph id=\"ph3\">`srcWidth`</ph>, and <ph id=\"ph4\">`srcHeight`</ph> parameters specify a rectangular portion, of the <ph id=\"ph5\">`image`</ph> object to draw.","pos":[0,120],"source":"The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw."},{"content":"The rectangle is relative to the upper-left corner of the source image.","pos":[121,192]},{"content":"This portion is scaled to fit inside the rectangle specified by the <ph id=\"ph1\">`destRect`</ph> parameter.","pos":[193,282],"source":" This portion is scaled to fit inside the rectangle specified by the `destRect` parameter."}]},{"pos":[237610,237660],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[237736,237890],"content":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location and size of the drawn image.","pos":[0,112],"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image."},{"content":"The image is scaled to fit the rectangle.","pos":[113,154]}]},{"pos":[237951,238036],"content":"The x-coordinate of the upper-left corner of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the portion of the source image to draw.","pos":[0,85]}]},{"pos":[238097,238182],"content":"The y-coordinate of the upper-left corner of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the portion of the source image to draw.","pos":[0,85]}]},{"pos":[238247,238296],"content":"Width of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the portion of the source image to draw.","pos":[0,49]}]},{"pos":[238362,238412],"content":"Height of the portion of the source image to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the portion of the source image to draw.","pos":[0,50]}]},{"pos":[238490,238640],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the units of measure used to determine the source rectangle.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used to determine the source rectangle."},{"pos":[238732,238863],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Imaging.ImageAttributes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies recoloring and gamma information for the <ph id=\"ph1\">`image`</ph> object.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Imaging.ImageAttributes\"></xref> that specifies recoloring and gamma information for the `image` object."},{"pos":[239027,239110],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[240491,240503],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[240579,240591],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[240651,240663],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[240723,240735],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[240799,240811],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[240876,240888],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[240966,240978],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[241069,241081],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[241171,241183],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[242657,242669],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[242745,242757],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[242818,242830],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[242891,242903],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[242968,242980],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[243046,243058],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[243136,243148],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[243240,243252],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[243342,243354],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[244870,244882],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[244958,244970],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[245030,245042],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[245102,245114],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[245178,245190],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[245255,245267],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[245345,245357],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[245449,245461],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[245551,245563],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[245632,245644],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247188,247200],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247276,247288],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247349,247361],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247422,247434],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247499,247511],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247577,247589],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247667,247679],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247771,247783],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247873,247885],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[247954,247966],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[248516,248597],"content":"Draws a specified image using its original physical size at a specified location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a specified image using its original physical size at a specified location.","pos":[0,81]}]},{"pos":[248610,249492],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[0,880],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,607]},{"content":"For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[608,711]},{"content":"If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[712,880]}]}]},{"pos":[250538,250588],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[250657,250765],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure that specifies the upper-left corner of the drawn image."},{"pos":[250937,251020],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[251526,251607],"content":"Draws a specified image using its original physical size at a specified location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a specified image using its original physical size at a specified location.","pos":[0,81]}]},{"pos":[251620,252502],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[0,880],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,607]},{"content":"For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[608,711]},{"content":"If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[712,880]}]}]},{"pos":[252702,252752],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[252824,253042],"content":"<xref href=\"System.Drawing.Rectangle\"></xref> that specifies the upper-left corner of the drawn image. The X and Y properties of the rectangle specify the upper-left corner. The Width and Height properties are ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the upper-left corner of the drawn image.","pos":[0,102],"source":"<xref href=\"System.Drawing.Rectangle\"></xref> that specifies the upper-left corner of the drawn image."},{"content":"The X and Y properties of the rectangle specify the upper-left corner.","pos":[103,173]},{"content":"The Width and Height properties are ignored.","pos":[174,218]}]},{"pos":[253214,253297],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[253811,253917],"content":"Draws the specified image using its original physical size at the location specified by a coordinate pair.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws the specified image using its original physical size at the location specified by a coordinate pair.","pos":[0,106]}]},{"pos":[253930,254812],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[0,880],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,607]},{"content":"For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[608,711]},{"content":"If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[712,880]}]}]},{"pos":[255846,255896],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[255953,256014],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[256071,256132],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[256304,256387],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[256989,257070],"content":"Draws a specified image using its original physical size at a specified location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a specified image using its original physical size at a specified location.","pos":[0,81]}]},{"pos":[257083,257965],"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.       The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[0,880],"nodes":[{"content":"An &lt;xref:System.Drawing.Image&gt; stores a value for pixel width and a value for horizontal resolution (dots per inch).","pos":[0,116],"source":"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch)."},{"content":"The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution.","pos":[117,225]},{"content":"For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches.","pos":[226,355]},{"content":"Similar remarks apply to pixel height and physical height.","pos":[356,414]},{"content":"The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device.","pos":[421,607]},{"content":"For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch.","pos":[608,711]},{"content":"If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.","pos":[712,880]}]}]},{"pos":[258171,258221],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[258278,258339],"content":"The x-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[258396,258457],"content":"The y-coordinate of the upper-left corner of the drawn image.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn image.","pos":[0,61]}]},{"pos":[258518,258527],"content":"Not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not used.","pos":[0,9]}]},{"pos":[258589,258598],"content":"Not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Not used.","pos":[0,9]}]},{"pos":[258770,258853],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[259409,259513],"content":"Draws the specified image without scaling and clips it, if necessary, to fit in the specified rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws the specified image without scaling and clips it, if necessary, to fit in the specified rectangle.","pos":[0,104]}]},{"pos":[260354,260408],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Image\"></xref> to draw."},{"pos":[260480,260557],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to draw the image.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Rectangle\"></xref> in which to draw the image."},{"pos":[260739,260822],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[261313,261394],"content":"Draws a line connecting two <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a line connecting two <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[262363,262459],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the line.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line."},{"pos":[262526,262621],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the first point to connect.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure that represents the first point to connect."},{"pos":[262688,262784],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the second point to connect.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure that represents the second point to connect."},{"pos":[262947,263028],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[263529,263611],"content":"Draws a line connecting two <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a line connecting two <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[263623,263717],"content":"This method draws a line connecting the two points specified by the <ph id=\"ph1\">`pt1`</ph> and p<ph id=\"ph2\">`2`</ph> parameters.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method draws a line connecting the two points specified by the `pt1` and p`2` parameters."},{"pos":[264674,264770],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the line.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line."},{"pos":[264838,264934],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the first point to connect.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that represents the first point to connect."},{"pos":[265002,265099],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the second point to connect.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that represents the second point to connect."},{"pos":[265262,265343],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[265890,265963],"content":"Draws a line connecting the two points specified by the coordinate pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a line connecting the two points specified by the coordinate pairs.","pos":[0,73]}]},{"pos":[265975,266081],"content":"This method draws a line connecting the two points specified by the <ph id=\"ph1\">`x1`</ph>, <ph id=\"ph2\">`y1`</ph>, <ph id=\"ph3\">`x2`</ph>, and <ph id=\"ph4\">`y2`</ph> parameters.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method draws a line connecting the two points specified by the `x1`, `y1`, `x2`, and `y2` parameters."},{"pos":[267024,267120],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the line.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line."},{"pos":[267178,267214],"content":"The x-coordinate of the first point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the first point.","pos":[0,36]}]},{"pos":[267272,267308],"content":"The y-coordinate of the first point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the first point.","pos":[0,36]}]},{"pos":[267366,267403],"content":"The x-coordinate of the second point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the second point.","pos":[0,37]}]},{"pos":[267461,267498],"content":"The y-coordinate of the second point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the second point.","pos":[0,37]}]},{"pos":[267661,267742],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[268309,268382],"content":"Draws a line connecting the two points specified by the coordinate pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a line connecting the two points specified by the coordinate pairs.","pos":[0,73]}]},{"pos":[268394,268500],"content":"This method draws a line connecting the two points specified by the <ph id=\"ph1\">`x1`</ph>, <ph id=\"ph2\">`y1`</ph>, <ph id=\"ph3\">`x2`</ph>, and <ph id=\"ph4\">`y2`</ph> parameters.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method draws a line connecting the two points specified by the `x1`, `y1`, `x2`, and `y2` parameters."},{"pos":[269451,269547],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the line.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line."},{"pos":[269606,269642],"content":"The x-coordinate of the first point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the first point.","pos":[0,36]}]},{"pos":[269701,269737],"content":"The y-coordinate of the first point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the first point.","pos":[0,36]}]},{"pos":[269796,269833],"content":"The x-coordinate of the second point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the second point.","pos":[0,37]}]},{"pos":[269892,269929],"content":"The y-coordinate of the second point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the second point.","pos":[0,37]}]},{"pos":[270092,270173],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[270619,270729],"content":"Draws a series of line segments that connect an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a series of line segments that connect an array of <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[270741,271001],"content":"This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.","pos":[0,260],"nodes":[{"content":"This method draws a series of lines connecting an array of ending points.","pos":[0,73]},{"content":"The first two points in the array specify the first line.","pos":[74,131]},{"content":"Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.","pos":[132,260]}]}]},{"pos":[271967,272072],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the line segments.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line segments."},{"pos":[272144,272243],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the points to connect.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the points to connect."},{"pos":[272408,272607],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[273059,273170],"content":"Draws a series of line segments that connect an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a series of line segments that connect an array of <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[273182,273442],"content":"This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.","pos":[0,260],"nodes":[{"content":"This method draws a series of lines connecting an array of ending points.","pos":[0,73]},{"content":"The first two points in the array specify the first line.","pos":[74,131]},{"content":"Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.","pos":[132,260]}]}]},{"pos":[274417,274522],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the line segments.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line segments."},{"pos":[274595,274695],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the points to connect.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points to connect."},{"pos":[274860,275059],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[275546,275613],"content":"Draws a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Draws a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[275625,275757],"content":"The current transformation in the graphic context is applied to the <xref:System.Drawing.Drawing2D.GraphicsPath> before it is drawn.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current transformation in the graphic context is applied to the &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt; before it is drawn.","pos":[0,132],"source":"The current transformation in the graphic context is applied to the <xref:System.Drawing.Drawing2D.GraphicsPath> before it is drawn."}]},{"pos":[276725,276821],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the path.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the path."},{"pos":[276906,276973],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to draw.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to draw."},{"pos":[277137,277334],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,181],"source":"       -or-       <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[277879,278011],"content":"Draws a pie shape defined by an ellipse specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure and two radial lines.","needQuote":true,"needEscape":true,"source":"Draws a pie shape defined by an ellipse specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure and two radial lines."},{"pos":[278024,278552],"content":"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.","pos":[0,132]},{"content":"The ellipse is defined by the bounding rectangle.","pos":[133,182]},{"content":"The pie shape consists of the two radial lines defined by the <ph id=\"ph1\">`startAngle`</ph> and <ph id=\"ph2\">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.","pos":[183,364],"source":" The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse."},{"content":"If the <ph id=\"ph1\">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","pos":[371,526],"source":"       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."}]},{"pos":[279675,279776],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the pie shape.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the pie shape."},{"pos":[279848,279999],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes."},{"pos":[280066,280153],"content":"Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.","pos":[0,87]}]},{"pos":[280220,280324],"content":"Angle measured in degrees clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to the second side of the pie shape.","needQuote":true,"needEscape":true,"source":"Angle measured in degrees clockwise from the `startAngle` parameter to the second side of the pie shape."},{"pos":[280486,280567],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[281116,281249],"content":"Draws a pie shape defined by an ellipse specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure and two radial lines.","needQuote":true,"needEscape":true,"source":"Draws a pie shape defined by an ellipse specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure and two radial lines."},{"pos":[281262,281790],"content":"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.","pos":[0,132]},{"content":"The ellipse is defined by the bounding rectangle.","pos":[133,182]},{"content":"The pie shape consists of the two radial lines defined by the <ph id=\"ph1\">`startAngle`</ph> and <ph id=\"ph2\">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.","pos":[183,364],"source":" The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse."},{"content":"If the <ph id=\"ph1\">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","pos":[371,526],"source":"       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."}]},{"pos":[282914,283015],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the pie shape.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the pie shape."},{"pos":[283088,283240],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes."},{"pos":[283307,283394],"content":"Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.","pos":[0,87]}]},{"pos":[283461,283565],"content":"Angle measured in degrees clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to the second side of the pie shape.","needQuote":true,"needEscape":true,"source":"Angle measured in degrees clockwise from the `startAngle` parameter to the second side of the pie shape."},{"pos":[283727,283808],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[284438,284550],"content":"Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.","pos":[0,112]}]},{"pos":[284563,285151],"content":"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.","pos":[0,132]},{"content":"The ellipse is defined by the bounding rectangle described by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters.","pos":[133,242],"source":" The ellipse is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters."},{"content":"The pie shape consists of the two radial lines defined by the <ph id=\"ph1\">`startAngle`</ph> and <ph id=\"ph2\">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.","pos":[243,424],"source":" The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse."},{"content":"If the <ph id=\"ph1\">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","pos":[431,586],"source":"       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."}]},{"pos":[286299,286400],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the pie shape.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the pie shape."},{"pos":[286457,286581],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.","pos":[0,124]}]},{"pos":[286638,286762],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.","pos":[0,124]}]},{"pos":[286823,286911],"content":"Width of the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the bounding rectangle that defines the ellipse from which the pie shape comes.","pos":[0,88]}]},{"pos":[286973,287062],"content":"Height of the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the bounding rectangle that defines the ellipse from which the pie shape comes.","pos":[0,89]}]},{"pos":[287128,287215],"content":"Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.","pos":[0,87]}]},{"pos":[287281,287385],"content":"Angle measured in degrees clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to the second side of the pie shape.","needQuote":true,"needEscape":true,"source":"Angle measured in degrees clockwise from the `startAngle` parameter to the second side of the pie shape."},{"pos":[287547,287628],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[288288,288400],"content":"Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.","pos":[0,112]}]},{"pos":[288413,289001],"content":"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.","pos":[0,132]},{"content":"The ellipse is defined by the bounding rectangle described by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters.","pos":[133,242],"source":" The ellipse is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters."},{"content":"The pie shape consists of the two radial lines defined by the <ph id=\"ph1\">`startAngle`</ph> and <ph id=\"ph2\">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.","pos":[243,424],"source":" The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse."},{"content":"If the <ph id=\"ph1\">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","pos":[431,586],"source":"       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."}]},{"pos":[290163,290264],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the pie shape.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the pie shape."},{"pos":[290322,290446],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.","pos":[0,124]}]},{"pos":[290504,290628],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.","pos":[0,124]}]},{"pos":[290690,290778],"content":"Width of the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the bounding rectangle that defines the ellipse from which the pie shape comes.","pos":[0,88]}]},{"pos":[290841,290930],"content":"Height of the bounding rectangle that defines the ellipse from which the pie shape comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the bounding rectangle that defines the ellipse from which the pie shape comes.","pos":[0,89]}]},{"pos":[290997,291084],"content":"Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.","pos":[0,87]}]},{"pos":[291151,291255],"content":"Angle measured in degrees clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to the second side of the pie shape.","needQuote":true,"needEscape":true,"source":"Angle measured in degrees clockwise from the `startAngle` parameter to the second side of the pie shape."},{"pos":[291417,291498],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[291954,292046],"content":"Draws a polygon defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a polygon defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[292058,292264],"content":"Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.","pos":[0,206],"nodes":[{"content":"Every pair of two consecutive points in the array specifies a side of the polygon.","pos":[0,82]},{"content":"In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.","pos":[83,206]}]}]},{"pos":[293233,293332],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the polygon.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the polygon."},{"pos":[293404,293509],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the vertices of the polygon.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the vertices of the polygon."},{"pos":[293675,293756],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[294217,294310],"content":"Draws a polygon defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a polygon defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[294322,294528],"content":"Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.","pos":[0,206],"nodes":[{"content":"Every pair of two consecutive points in the array specifies a side of the polygon.","pos":[0,82]},{"content":"In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.","pos":[83,206]}]}]},{"pos":[295489,295588],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the polygon.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the polygon."},{"pos":[295661,295767],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the vertices of the polygon.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the vertices of the polygon."},{"pos":[295934,296133],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,183],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[296610,296699],"content":"Draws a rectangle specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Draws a rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[296711,296959],"content":"For information about how to draw a &lt;xref:System.Drawing.RectangleF&gt;, see<bpt id=\"p1\">[</bpt>DrawRectangles(Pen, RectangleF<ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph>)<ept id=\"p1\">](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&amp;autoUpgrade=False)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For information about how to draw a <xref:System.Drawing.RectangleF>, see[DrawRectangles(Pen, RectangleF\\[\\])](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&autoUpgrade=False)."},{"pos":[297878,297981],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the rectangle.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the rectangle."},{"pos":[298053,298149],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the rectangle to draw.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the rectangle to draw."},{"pos":[298317,298398],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[298970,299042],"content":"Draws a rectangle specified by a coordinate pair, a width, and a height.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a rectangle specified by a coordinate pair, a width, and a height.","pos":[0,72]}]},{"pos":[299054,299303],"content":"For information about how to draw a &lt;xref:System.Drawing.RectangleF&gt;, see <bpt id=\"p1\">[</bpt>DrawRectangles(Pen, RectangleF<ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph>)<ept id=\"p1\">](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&amp;autoUpgrade=False)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For information about how to draw a <xref:System.Drawing.RectangleF>, see [DrawRectangles(Pen, RectangleF\\[\\])](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&autoUpgrade=False)."},{"pos":[300253,300354],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the rectangle.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the rectangle."},{"pos":[300411,300478],"content":"The x-coordinate of the upper-left corner of the rectangle to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangle to draw.","pos":[0,67]}]},{"pos":[300535,300602],"content":"The y-coordinate of the upper-left corner of the rectangle to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangle to draw.","pos":[0,67]}]},{"pos":[300663,300694],"content":"Width of the rectangle to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the rectangle to draw.","pos":[0,31]}]},{"pos":[300756,300788],"content":"Height of the rectangle to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the rectangle to draw.","pos":[0,32]}]},{"pos":[300956,301037],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[301629,301701],"content":"Draws a rectangle specified by a coordinate pair, a width, and a height.","needQuote":true,"needEscape":true,"nodes":[{"content":"Draws a rectangle specified by a coordinate pair, a width, and a height.","pos":[0,72]}]},{"pos":[301713,301962],"content":"For information about how to draw a &lt;xref:System.Drawing.RectangleF&gt;, see <bpt id=\"p1\">[</bpt>DrawRectangles(Pen, RectangleF<ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph>)<ept id=\"p1\">](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&amp;autoUpgrade=False)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For information about how to draw a <xref:System.Drawing.RectangleF>, see [DrawRectangles(Pen, RectangleF\\[\\])](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&autoUpgrade=False)."},{"pos":[302920,303023],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the rectangle.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the rectangle."},{"pos":[303081,303148],"content":"The x-coordinate of the upper-left corner of the rectangle to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangle to draw.","pos":[0,67]}]},{"pos":[303206,303273],"content":"The y-coordinate of the upper-left corner of the rectangle to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangle to draw.","pos":[0,67]}]},{"pos":[303335,303370],"content":"The width of the rectangle to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the rectangle to draw.","pos":[0,35]}]},{"pos":[303433,303469],"content":"The height of the rectangle to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the rectangle to draw.","pos":[0,36]}]},{"pos":[303637,303718],"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[304209,304308],"content":"Draws a series of rectangles specified by <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a series of rectangles specified by <xref href=\"System.Drawing.Rectangle\"></xref> structures."},{"pos":[305263,305381],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the outlines of the rectangles.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the outlines of the rectangles."},{"pos":[305456,305560],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the rectangles to draw.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Rectangle\"></xref> structures that represent the rectangles to draw."},{"pos":[305730,305928],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>rects</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;rects&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,182],"source":"       -or-       <code>rects</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[306024,306066],"content":"<ph id=\"ph1\">&lt;code&gt;rects&lt;/code&gt;</ph> is a zero-length array.","needQuote":true,"needEscape":true,"source":"<code>rects</code> is a zero-length array."},{"pos":[306562,306662],"content":"Draws a series of rectangles specified by <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Draws a series of rectangles specified by <xref href=\"System.Drawing.RectangleF\"></xref> structures."},{"pos":[307618,307736],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color, width, and style of the outlines of the rectangles.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the outlines of the rectangles."},{"pos":[307812,307917],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the rectangles to draw.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.RectangleF\"></xref> structures that represent the rectangles to draw."},{"pos":[308087,308285],"content":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>rects</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;pen&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"<code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;rects&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[88,182],"source":"       -or-       <code>rects</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[308381,308423],"content":"<ph id=\"ph1\">&lt;code&gt;rects&lt;/code&gt;</ph> is a zero-length array.","needQuote":true,"needEscape":true,"source":"<code>rects</code> is a zero-length array."},{"pos":[308983,309155],"content":"Draws the specified text string at the specified location with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Draws the specified text string at the specified location with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects."},{"pos":[310315,310330],"content":"String to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to draw.","pos":[0,15]}]},{"pos":[310397,310481],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[310550,310648],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color and texture of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text."},{"pos":[310718,310826],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the upper-left corner of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that specifies the upper-left corner of the drawn text."},{"pos":[310992,311188],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,180],"source":"       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[311769,311942],"content":"Draws the specified text string in the specified rectangle with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Draws the specified text string in the specified rectangle with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects."},{"pos":[311954,312335],"content":"The text represented by the `s` parameter is drawn inside the rectangle represented by the `layoutRectangle` parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word. To further manipulate how the string is drawn inside the rectangle use the <xref:System.Drawing.Graphics.DrawString%2A> overload that takes a <xref:System.Drawing.StringFormat>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text represented by the <ph id=\"ph1\">`s`</ph> parameter is drawn inside the rectangle represented by the <ph id=\"ph2\">`layoutRectangle`</ph> parameter.","pos":[0,119],"source":"The text represented by the `s` parameter is drawn inside the rectangle represented by the `layoutRectangle` parameter."},{"content":"If the text does not fit inside the rectangle, it is truncated at the nearest word.","pos":[120,203]},{"content":"To further manipulate how the string is drawn inside the rectangle use the &lt;xref:System.Drawing.Graphics.DrawString%2A&gt; overload that takes a &lt;xref:System.Drawing.StringFormat&gt;.","pos":[204,381],"source":" To further manipulate how the string is drawn inside the rectangle use the <xref:System.Drawing.Graphics.DrawString%2A> overload that takes a <xref:System.Drawing.StringFormat>."}]},{"pos":[313523,313538],"content":"String to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to draw.","pos":[0,15]}]},{"pos":[313605,313689],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[313758,313856],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color and texture of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text."},{"pos":[313940,314043],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location of the drawn text."},{"pos":[314209,314405],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,180],"source":"       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[315061,315331],"content":"Draws the specified text string at the specified location with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects using the formatting attributes of the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Draws the specified text string at the specified location with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects using the formatting attributes of the specified <xref href=\"System.Drawing.StringFormat\"></xref>."},{"pos":[316596,316611],"content":"String to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to draw.","pos":[0,15]}]},{"pos":[316678,316762],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[316831,316929],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color and texture of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text."},{"pos":[316999,317107],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the upper-left corner of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that specifies the upper-left corner of the drawn text."},{"pos":[317184,317342],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.StringFormat\"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text."},{"pos":[317508,317704],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,180],"source":"       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[318380,318651],"content":"Draws the specified text string in the specified rectangle with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects using the formatting attributes of the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Draws the specified text string in the specified rectangle with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects using the formatting attributes of the specified <xref href=\"System.Drawing.StringFormat\"></xref>."},{"pos":[318663,318922],"content":"The text represented by the `s` parameter is drawn inside the rectangle represented by the `layoutRectangle` parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word, unless otherwise specified with the `format` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text represented by the <ph id=\"ph1\">`s`</ph> parameter is drawn inside the rectangle represented by the <ph id=\"ph2\">`layoutRectangle`</ph> parameter.","pos":[0,119],"source":"The text represented by the `s` parameter is drawn inside the rectangle represented by the `layoutRectangle` parameter."},{"content":"If the text does not fit inside the rectangle, it is truncated at the nearest word, unless otherwise specified with the <ph id=\"ph1\">`format`</ph> parameter.","pos":[120,259],"source":" If the text does not fit inside the rectangle, it is truncated at the nearest word, unless otherwise specified with the `format` parameter."}]},{"pos":[320222,320237],"content":"String to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to draw.","pos":[0,15]}]},{"pos":[320304,320388],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[320457,320555],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color and texture of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text."},{"pos":[320639,320742],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the location of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location of the drawn text."},{"pos":[320819,320977],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.StringFormat\"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text."},{"pos":[321143,321339],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,180],"source":"       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[321933,322105],"content":"Draws the specified text string at the specified location with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Draws the specified text string at the specified location with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects."},{"pos":[323253,323268],"content":"String to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to draw.","pos":[0,15]}]},{"pos":[323335,323419],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[323488,323586],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color and texture of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text."},{"pos":[323644,323704],"content":"The x-coordinate of the upper-left corner of the drawn text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn text.","pos":[0,60]}]},{"pos":[323762,323822],"content":"The y-coordinate of the upper-left corner of the drawn text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn text.","pos":[0,60]}]},{"pos":[323988,324184],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,180],"source":"       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[324873,325143],"content":"Draws the specified text string at the specified location with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects using the formatting attributes of the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Draws the specified text string at the specified location with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects using the formatting attributes of the specified <xref href=\"System.Drawing.StringFormat\"></xref>."},{"pos":[326415,326430],"content":"String to draw.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to draw.","pos":[0,15]}]},{"pos":[326497,326581],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[326650,326748],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the color and texture of the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text."},{"pos":[326806,326866],"content":"The x-coordinate of the upper-left corner of the drawn text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the drawn text.","pos":[0,60]}]},{"pos":[326924,326984],"content":"The y-coordinate of the upper-left corner of the drawn text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the drawn text.","pos":[0,60]}]},{"pos":[327061,327219],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.StringFormat\"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text."},{"pos":[327385,327581],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,180],"source":"       -or-       <code>s</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[328063,328267],"content":"Closes the current graphics container and restores the state of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the state saved by a call to the &lt;xref:System.Drawing.Graphics.BeginContainer*&gt; method.","needQuote":true,"needEscape":true,"source":"Closes the current graphics container and restores the state of this <xref href=\"System.Drawing.Graphics\"></xref> to the state saved by a call to the <xref:System.Drawing.Graphics.BeginContainer*> method."},{"pos":[328280,331225],"content":"Use this method with the <xref:System.Drawing.Graphics.BeginContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.       When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the EndContainer method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.       Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the EndContainer method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the EndContainer method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an EndContainer method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.       When you call the EndContainer method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method with the <xref:System.Drawing.Graphics.BeginContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.       When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the EndContainer method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.       Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the EndContainer method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the EndContainer method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an EndContainer method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.       When you call the EndContainer method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.","pos":[0,2937],"nodes":[{"content":"Use this method with the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method to create nested graphics containers.","pos":[0,118],"source":"Use this method with the <xref:System.Drawing.Graphics.BeginContainer%2A> method to create nested graphics containers."},{"content":"Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.","pos":[119,228]},{"content":"When you call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method of a &lt;xref:System.Drawing.Graphics&gt;, an information block that holds the state of the &lt;xref:System.Drawing.Graphics&gt; is put on a stack.","pos":[235,444],"source":"       When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack."},{"content":"The &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method returns a &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt; that identifies that information block.","pos":[445,604],"source":" The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block."},{"content":"When you pass the identifying object to the EndContainer method, the information block is removed from the stack and is used to restore the &lt;xref:System.Drawing.Graphics&gt; to the state it was in at the time of the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call.","pos":[605,879],"source":" When you pass the identifying object to the EndContainer method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call."},{"content":"Containers can be nested; that is, you can call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method several times before you call the EndContainer method.","pos":[886,1048],"source":"       Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the EndContainer method."},{"content":"Each time you call the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method, an information block is put on the stack, and you receive a &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt; for the information block.","pos":[1049,1265],"source":" Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block."},{"content":"When you pass one of those objects to the EndContainer method, the &lt;xref:System.Drawing.Graphics&gt; is returned to the state it was in at the time of the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call that returned that particular &lt;xref:System.Drawing.Drawing2D.GraphicsContainer&gt;.","pos":[1266,1559],"source":" When you pass one of those objects to the EndContainer method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>."},{"content":"The information block placed on the stack by that &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call is removed from the stack, and all information blocks placed on that stack after that &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call are also removed.","pos":[1560,1835],"source":" The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed."},{"content":"Calls to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method place information blocks on the same stack as calls to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method.","pos":[1842,2016],"source":"       Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method."},{"content":"Just as an EndContainer method call is paired with a &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call, a &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method call is paired with a &lt;xref:System.Drawing.Graphics.Save%2A&gt; method call.","pos":[2017,2256],"source":" Just as an EndContainer method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call."},{"content":"When you call the EndContainer method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method are removed from the stack.","pos":[2263,2585],"source":"       When you call the EndContainer method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack."},{"content":"Likewise, when you call the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method are removed from the stack.","pos":[2586,2937],"source":" Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack."}]}]},{"pos":[332534,332649],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the container this method restores.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"></xref> that represents the container this method restores."},{"pos":[333690,333702],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[333775,333787],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[333884,333896],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[334955,334967],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[335043,335055],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[335152,335164],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[336216,336228],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[336302,336314],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[336411,336423],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[337488,337500],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[337577,337589],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[337686,337698],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[338767,338779],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[338855,338867],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[338964,338976],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[340051,340063],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[340140,340152],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[340249,340261],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[341377,341389],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[341462,341474],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[341571,341583],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[341652,341664],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[342793,342805],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[342881,342893],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[342990,343002],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[343071,343083],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[344205,344217],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[344291,344303],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[344400,344412],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[344481,344493],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[345628,345640],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[345717,345729],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[345826,345838],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[345907,345919],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[347058,347070],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[347146,347158],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[347255,347267],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[347336,347348],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[348493,348505],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[348582,348594],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[348691,348703],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[348772,348784],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[350076,350088],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[350161,350173],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[350270,350282],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[350351,350363],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[350454,350466],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[351758,351770],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[351843,351855],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[351930,351942],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[352020,352032],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[352129,352141],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[353446,353458],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[353534,353546],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[353643,353655],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[353724,353736],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[353827,353839],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[355144,355156],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[355232,355244],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[355319,355331],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[355409,355421],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[355518,355530],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[356828,356840],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[356914,356926],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[357023,357035],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[357104,357116],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[357207,357219],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[358523,358535],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[358609,358621],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[358697,358709],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[358787,358799],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[358896,358908],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[360219,360231],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[360308,360320],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[360417,360429],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[360498,360510],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[360601,360613],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[361930,361942],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[362019,362031],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[362107,362119],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[362197,362209],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[362306,362318],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[363633,363645],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[363721,363733],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[363830,363842],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[363911,363923],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[364014,364026],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[365341,365353],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[365429,365441],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[365516,365528],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[365606,365618],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[365715,365727],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[367048,367060],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[367137,367149],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[367246,367258],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[367327,367339],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[367430,367442],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[368769,368781],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[368858,368870],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[368946,368958],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[369036,369048],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[369145,369157],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[370519,370531],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[370604,370616],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[370691,370703],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[370781,370793],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[370890,370902],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[370971,370983],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[372358,372370],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[372446,372458],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[372533,372545],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[372623,372635],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[372732,372744],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[372813,372825],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[374199,374211],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[374285,374297],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[374373,374385],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[374463,374475],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[374572,374584],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[374653,374665],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[376052,376064],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[376141,376153],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[376229,376241],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[376319,376331],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[376428,376440],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[376509,376521],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[377906,377918],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[377994,378006],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[378081,378093],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[378171,378183],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[378280,378292],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[378361,378373],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[379770,379782],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[379859,379871],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[379947,379959],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[380037,380049],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[380146,380158],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[380227,380239],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[381774,381786],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[381859,381871],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[381946,381958],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[382033,382045],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[382142,382154],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[382223,382235],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[382326,382338],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[383886,383898],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[383974,383986],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[384061,384073],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[384148,384160],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[384257,384269],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[384338,384350],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[384441,384453],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[386000,386012],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[386086,386098],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[386174,386186],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[386261,386273],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[386370,386382],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[386451,386463],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[386554,386566],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[388126,388138],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[388215,388227],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[388303,388315],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[388390,388402],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[388499,388511],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[388580,388592],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[388683,388695],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[390253,390265],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[390341,390353],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[390428,390440],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[390515,390527],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[390624,390636],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[390705,390717],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[390808,390820],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[392390,392402],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[392479,392491],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[392567,392579],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[392654,392666],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[392763,392775],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[392844,392856],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[392947,392959],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[393447,393615],"content":"Updates the clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to exclude the area specified by a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to exclude the area specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[393627,393845],"content":"This method excludes the area specified by the <ph id=\"ph1\">`rect`</ph> parameter from the current clip region and assigns the resulting area to the &lt;xref:System.Drawing.Graphics.Clip%2A&gt; property of this &lt;xref:System.Drawing.Graphics&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method excludes the area specified by the `rect` parameter from the current clip region and assigns the resulting area to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics>."},{"pos":[395105,395222],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the rectangle to exclude from the clip region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the rectangle to exclude from the clip region."},{"pos":[395689,395844],"content":"Updates the clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to exclude the area specified by a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to exclude the area specified by a <xref href=\"System.Drawing.Region\"></xref>."},{"pos":[395856,396076],"content":"This method excludes the area specified by the <ph id=\"ph1\">`region`</ph> parameter from the current clip region and assigns the resulting area to the &lt;xref:System.Drawing.Graphics.Clip%2A&gt; property of this &lt;xref:System.Drawing.Graphics&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method excludes the area specified by the `region` parameter from the current clip region and assigns the resulting area to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics>."},{"pos":[397269,397370],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the region to exclude from the clip region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Region\"></xref> that specifies the region to exclude from the clip region."},{"pos":[397922,398051],"content":"Fills the interior of a closed cardinal spline curve defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[398064,398452],"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       This method uses a default tension of 0.5.","pos":[0,384],"nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array.","pos":[0,103]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[104,242]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.Point&gt; structures.","pos":[249,335],"source":"       The array of points must contain at least four <xref:System.Drawing.Point> structures."},{"content":"This method uses a default tension of 0.5.","pos":[342,384]}]}]},{"pos":[399463,399553],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[399625,399710],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline."},{"pos":[399881,400082],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[400574,400704],"content":"Fills the interior of a closed cardinal spline curve defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[400717,401106],"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.PointF> structures.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.PointF> structures.       This method uses a default tension of 0.5.","pos":[0,385],"nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array.","pos":[0,103]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[104,242]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.PointF&gt; structures.","pos":[249,336],"source":"       The array of points must contain at least four <xref:System.Drawing.PointF> structures."},{"content":"This method uses a default tension of 0.5.","pos":[343,385]}]}]},{"pos":[402118,402208],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[402281,402367],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline."},{"pos":[402538,402739],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[403321,403480],"content":"Fills the interior of a closed cardinal spline curve defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using the specified fill mode.","needQuote":true,"needEscape":true,"source":"Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures using the specified fill mode."},{"pos":[403493,403881],"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       This method uses a default tension of 0.5.","pos":[0,384],"nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array.","pos":[0,103]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[104,242]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.Point&gt; structures.","pos":[249,335],"source":"       The array of points must contain at least four <xref:System.Drawing.Point> structures."},{"content":"This method uses a default tension of 0.5.","pos":[342,384]}]}]},{"pos":[405011,405101],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[405173,405258],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline."},{"pos":[405343,405464],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how the curve is filled.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled."},{"pos":[405635,405836],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[406423,406583],"content":"Fills the interior of a closed cardinal spline curve defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using the specified fill mode.","needQuote":true,"needEscape":true,"source":"Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures using the specified fill mode."},{"pos":[406596,406984],"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       This method uses a default tension of 0.5.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       This method uses a default tension of 0.5.","pos":[0,384],"nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array.","pos":[0,103]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[104,242]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.Point&gt; structures.","pos":[249,335],"source":"       The array of points must contain at least four <xref:System.Drawing.Point> structures."},{"content":"This method uses a default tension of 0.5.","pos":[342,384]}]}]},{"pos":[408115,408205],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[408278,408364],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline."},{"pos":[408449,408570],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how the curve is filled.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled."},{"pos":[408741,408942],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[409573,409744],"content":"Fills the interior of a closed cardinal spline curve defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using the specified fill mode and tension.","needQuote":true,"needEscape":true,"source":"Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures using the specified fill mode and tension."},{"pos":[409757,410381],"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array.","pos":[0,103]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[104,242]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.Point&gt; structures.","pos":[249,335],"source":"       The array of points must contain at least four <xref:System.Drawing.Point> structures."},{"content":"The <ph id=\"ph1\">`tension`</ph> parameter determines the shape of the spline.","pos":[342,401],"source":"       The `tension` parameter determines the shape of the spline."},{"content":"If the value of the <ph id=\"ph1\">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.","pos":[402,514],"source":" If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points."},{"content":"Usually, the <ph id=\"ph1\">`tension`</ph> parameter is less than or equal to 1.0F.","pos":[515,578],"source":" Usually, the `tension` parameter is less than or equal to 1.0F."},{"content":"Values over 1.0F produce unusual results.","pos":[579,620]}]},{"pos":[411514,411604],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[411676,411761],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline."},{"pos":[411846,411967],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how the curve is filled.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled."},{"pos":[412031,412107],"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","pos":[0,76]}]},{"pos":[412278,412479],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[413115,413287],"content":"Fills the interior of a closed cardinal spline curve defined by an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using the specified fill mode and tension.","needQuote":true,"needEscape":true,"source":"Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures using the specified fill mode and tension."},{"pos":[413300,413924],"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.       The array of points must contain at least four <xref:System.Drawing.Point> structures.       The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a closed cardinal spline that passes through each point in the array.","pos":[0,103]},{"content":"If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.","pos":[104,242]},{"content":"The array of points must contain at least four &lt;xref:System.Drawing.Point&gt; structures.","pos":[249,335],"source":"       The array of points must contain at least four <xref:System.Drawing.Point> structures."},{"content":"The <ph id=\"ph1\">`tension`</ph> parameter determines the shape of the spline.","pos":[342,401],"source":"       The `tension` parameter determines the shape of the spline."},{"content":"If the value of the <ph id=\"ph1\">`tension`</ph> parameter is 0.0F, this method draws straight line segments to connect the points.","pos":[402,514],"source":" If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points."},{"content":"Usually, the <ph id=\"ph1\">`tension`</ph> parameter is less than or equal to 1.0F.","pos":[515,578],"source":" Usually, the `tension` parameter is less than or equal to 1.0F."},{"content":"Values over 1.0F produce unusual results.","pos":[579,620]}]},{"pos":[415058,415150],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[415223,415309],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that define the spline.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline."},{"pos":[415394,415515],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines how the curve is filled.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled."},{"pos":[415579,415655],"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value greater than or equal to 0.0F that specifies the tension of the curve.","pos":[0,76]}]},{"pos":[415826,416027],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[416504,416640],"content":"Fills the interior of an ellipse defined by a bounding rectangle specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Fills the interior of an ellipse defined by a bounding rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[416652,416818],"content":"This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `rect` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of an ellipse with a &lt;xref:System.Drawing.Brush&gt;.","pos":[0,80],"source":"This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>."},{"content":"The ellipse is defined by the bounding rectangle represented by the <ph id=\"ph1\">`rect`</ph> parameter.","pos":[81,166],"source":" The ellipse is defined by the bounding rectangle represented by the `rect` parameter."}]},{"pos":[417770,417860],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[417932,418052],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the bounding rectangle that defines the ellipse."},{"pos":[418218,418301],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[418782,418919],"content":"Fills the interior of an ellipse defined by a bounding rectangle specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Fills the interior of an ellipse defined by a bounding rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure."},{"pos":[418931,419097],"content":"This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `rect` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of an ellipse with a &lt;xref:System.Drawing.Brush&gt;.","pos":[0,80],"source":"This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>."},{"content":"The ellipse is defined by the bounding rectangle represented by the <ph id=\"ph1\">`rect`</ph> parameter.","pos":[81,166],"source":" The ellipse is defined by the bounding rectangle represented by the `rect` parameter."}]},{"pos":[420053,420143],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[420216,420337],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the bounding rectangle that defines the ellipse."},{"pos":[420503,420586],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[421158,421281],"content":"Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.","pos":[0,123]}]},{"pos":[421293,421485],"content":"This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `x`, `y`, `width`, and `height` parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of an ellipse with a &lt;xref:System.Drawing.Brush&gt;.","pos":[0,80],"source":"This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>."},{"content":"The ellipse is defined by the bounding rectangle represented by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters.","pos":[81,192],"source":" The ellipse is defined by the bounding rectangle represented by the `x`, `y`, `width`, and `height` parameters."}]},{"pos":[422471,422561],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[422618,422711],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[422768,422861],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[422922,422979],"content":"Width of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the bounding rectangle that defines the ellipse.","pos":[0,57]}]},{"pos":[423041,423099],"content":"Height of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the bounding rectangle that defines the ellipse.","pos":[0,58]}]},{"pos":[423265,423348],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[423940,424063],"content":"Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.","pos":[0,123]}]},{"pos":[424075,424267],"content":"This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `x`, `y`, `width`, and `height` parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of an ellipse with a &lt;xref:System.Drawing.Brush&gt;.","pos":[0,80],"source":"This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>."},{"content":"The ellipse is defined by the bounding rectangle represented by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters.","pos":[81,192],"source":" The ellipse is defined by the bounding rectangle represented by the `x`, `y`, `width`, and `height` parameters."}]},{"pos":[425261,425351],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[425409,425502],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[425560,425653],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.","pos":[0,93]}]},{"pos":[425715,425772],"content":"Width of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the bounding rectangle that defines the ellipse.","pos":[0,57]}]},{"pos":[425835,425893],"content":"Height of the bounding rectangle that defines the ellipse.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the bounding rectangle that defines the ellipse.","pos":[0,58]}]},{"pos":[426059,426142],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[426638,426721],"content":"Fills the interior of a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Fills the interior of a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[426733,426980],"content":"A <xref:System.Drawing.Drawing2D.GraphicsPath> consists of a series of line and curve segments. If the path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt; consists of a series of line and curve segments.","pos":[0,95],"source":"A <xref:System.Drawing.Drawing2D.GraphicsPath> consists of a series of line and curve segments."},{"content":"If the path represented by the <ph id=\"ph1\">`path`</ph> parameter is not closed, an additional segment is added from the last point to the first point to close the path.","pos":[96,247],"source":" If the path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path."}]},{"pos":[427979,428069],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[428154,428246],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the path to fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> that represents the path to fill."},{"pos":[428410,428609],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,183],"source":"       -or-       <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[429164,429315],"content":"Fills the interior of a pie section defined by an ellipse specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure and two radial lines.","needQuote":true,"needEscape":true,"source":"Fills the interior of a pie section defined by an ellipse specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure and two radial lines."},{"pos":[429328,429875],"content":"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters and the arc between the intersections of those radial lines with the ellipse.       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.","pos":[0,150]},{"content":"The ellipse is defined by the bounding rectangle.","pos":[151,200]},{"content":"The pie section consists of the two radial lines defined by the <ph id=\"ph1\">`startAngle`</ph> and <ph id=\"ph2\">`sweepAngle`</ph> parameters and the arc between the intersections of those radial lines with the ellipse.","pos":[201,383],"source":" The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters and the arc between the intersections of those radial lines with the ellipse."},{"content":"If the <ph id=\"ph1\">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","pos":[390,545],"source":"       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."}]},{"pos":[430999,431089],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[431161,431314],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes."},{"pos":[431381,431470],"content":"Angle in degrees measured clockwise from the x-axis to the first side of the pie section.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle in degrees measured clockwise from the x-axis to the first side of the pie section.","pos":[0,89]}]},{"pos":[431537,431643],"content":"Angle in degrees measured clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to the second side of the pie section.","needQuote":true,"needEscape":true,"source":"Angle in degrees measured clockwise from the `startAngle` parameter to the second side of the pie section."},{"pos":[431805,431888],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[432528,432662],"content":"Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.","pos":[0,134]}]},{"pos":[432675,433222],"content":"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters and the arc between the intersections of those radial lines with the ellipse.       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.","pos":[0,150]},{"content":"The ellipse is defined by the bounding rectangle.","pos":[151,200]},{"content":"The pie section consists of the two radial lines defined by the <ph id=\"ph1\">`startAngle`</ph> and <ph id=\"ph2\">`sweepAngle`</ph> parameters and the arc between the intersections of those radial lines with the ellipse.","pos":[201,383],"source":" The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters and the arc between the intersections of those radial lines with the ellipse."},{"content":"If the <ph id=\"ph1\">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","pos":[390,545],"source":"       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."}]},{"pos":[434373,434463],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[434520,434646],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.","pos":[0,126]}]},{"pos":[434703,434829],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.","pos":[0,126]}]},{"pos":[434890,434980],"content":"Width of the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the bounding rectangle that defines the ellipse from which the pie section comes.","pos":[0,90]}]},{"pos":[435042,435133],"content":"Height of the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the bounding rectangle that defines the ellipse from which the pie section comes.","pos":[0,91]}]},{"pos":[435199,435288],"content":"Angle in degrees measured clockwise from the x-axis to the first side of the pie section.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle in degrees measured clockwise from the x-axis to the first side of the pie section.","pos":[0,89]}]},{"pos":[435354,435460],"content":"Angle in degrees measured clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to the second side of the pie section.","needQuote":true,"needEscape":true,"source":"Angle in degrees measured clockwise from the `startAngle` parameter to the second side of the pie section."},{"pos":[435622,435705],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[436375,436509],"content":"Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.","pos":[0,134]}]},{"pos":[436522,437070],"content":"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc.","pos":[0,150]},{"content":"The ellipse is defined by the bounding rectangle.","pos":[151,200]},{"content":"The pie section consists of the two radial lines defined by the <ph id=\"ph1\">`startAngle`</ph> and <ph id=\"ph2\">`sweepAngle`</ph> parameters, and the arc between the intersections of those radial lines with the ellipse.","pos":[201,384],"source":" The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse."},{"content":"If the <ph id=\"ph1\">`sweepAngle`</ph> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.","pos":[391,546],"source":"       If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."}]},{"pos":[438233,438323],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[438381,438507],"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.","pos":[0,126]}]},{"pos":[438565,438691],"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.","pos":[0,126]}]},{"pos":[438753,438843],"content":"Width of the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the bounding rectangle that defines the ellipse from which the pie section comes.","pos":[0,90]}]},{"pos":[438906,438997],"content":"Height of the bounding rectangle that defines the ellipse from which the pie section comes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the bounding rectangle that defines the ellipse from which the pie section comes.","pos":[0,91]}]},{"pos":[439064,439153],"content":"Angle in degrees measured clockwise from the x-axis to the first side of the pie section.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle in degrees measured clockwise from the x-axis to the first side of the pie section.","pos":[0,89]}]},{"pos":[439220,439326],"content":"Angle in degrees measured clockwise from the <ph id=\"ph1\">`startAngle`</ph> parameter to the second side of the pie section.","needQuote":true,"needEscape":true,"source":"Angle in degrees measured clockwise from the `startAngle` parameter to the second side of the pie section."},{"pos":[439488,439571],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[440037,440165],"content":"Fills the interior of a polygon defined by an array of points specified by <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Fills the interior of a polygon defined by an array of points specified by <xref href=\"System.Drawing.Point\"></xref> structures."},{"pos":[440177,440363],"content":"Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","pos":[0,186],"nodes":[{"content":"Every two consecutive points in the array specify a side of the polygon.","pos":[0,72]},{"content":"In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","pos":[73,186]}]}]},{"pos":[441336,441426],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[441498,441611],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the vertices of the polygon to fill.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the vertices of the polygon to fill."},{"pos":[441778,441979],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[442451,442580],"content":"Fills the interior of a polygon defined by an array of points specified by <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Fills the interior of a polygon defined by an array of points specified by <xref href=\"System.Drawing.PointF\"></xref> structures."},{"pos":[442592,442778],"content":"Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","pos":[0,186],"nodes":[{"content":"Every two consecutive points in the array specify a side of the polygon.","pos":[0,72]},{"content":"In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","pos":[73,186]}]}]},{"pos":[443752,443842],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[443915,444029],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the vertices of the polygon to fill.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the vertices of the polygon to fill."},{"pos":[444196,444397],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[444959,445117],"content":"Fills the interior of a polygon defined by an array of points specified by <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using the specified fill mode.","needQuote":true,"needEscape":true,"source":"Fills the interior of a polygon defined by an array of points specified by <xref href=\"System.Drawing.Point\"></xref> structures using the specified fill mode."},{"pos":[445129,445315],"content":"Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","pos":[0,186],"nodes":[{"content":"Every two consecutive points in the array specify a side of the polygon.","pos":[0,72]},{"content":"In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","pos":[73,186]}]}]},{"pos":[446407,446497],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[446569,446682],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the vertices of the polygon to fill.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the vertices of the polygon to fill."},{"pos":[446767,446886],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines the style of the fill.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines the style of the fill."},{"pos":[447053,447254],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[447821,447980],"content":"Fills the interior of a polygon defined by an array of points specified by <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures using the specified fill mode.","needQuote":true,"needEscape":true,"source":"Fills the interior of a polygon defined by an array of points specified by <xref href=\"System.Drawing.PointF\"></xref> structures using the specified fill mode."},{"pos":[447992,448178],"content":"Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","pos":[0,186],"nodes":[{"content":"Every two consecutive points in the array specify a side of the polygon.","pos":[0,72]},{"content":"In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.","pos":[73,186]}]}]},{"pos":[449270,449360],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[449433,449547],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the vertices of the polygon to fill.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the vertices of the polygon to fill."},{"pos":[449632,449751],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FillMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines the style of the fill.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines the style of the fill."},{"pos":[449918,450119],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;points&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>points</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[450606,450711],"content":"Fills the interior of a rectangle specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Fills the interior of a rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[450723,450894],"content":"This method fills the interior of the rectangle defined by the <ph id=\"ph1\">`rect`</ph> parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method fills the interior of the rectangle defined by the `rect` parameter, including the specified upper-left corner and up to the calculated lower and bottom edges."},{"pos":[451837,451927],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[451999,452093],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the rectangle to fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the rectangle to fill."},{"pos":[452261,452344],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[452835,452941],"content":"Fills the interior of a rectangle specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Fills the interior of a rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure."},{"pos":[452953,453124],"content":"This method fills the interior of the rectangle defined by the <ph id=\"ph1\">`rect`</ph> parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method fills the interior of the rectangle defined by the `rect` parameter, including the specified upper-left corner and up to the calculated lower and bottom edges."},{"pos":[454068,454158],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[454231,454326],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the rectangle to fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the rectangle to fill."},{"pos":[454494,454577],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[455159,455251],"content":"Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.","pos":[0,92]}]},{"pos":[455263,455459],"content":"This method fills the interior of the rectangle defined by the<ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method fills the interior of the rectangle defined by the`x`, `y`, `width`, and `height` parameters, including the specified upper-left corner and up to the calculated lower and bottom edges."},{"pos":[456433,456523],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[456580,456647],"content":"The x-coordinate of the upper-left corner of the rectangle to fill.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangle to fill.","pos":[0,67]}]},{"pos":[456704,456771],"content":"The y-coordinate of the upper-left corner of the rectangle to fill.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangle to fill.","pos":[0,67]}]},{"pos":[456832,456863],"content":"Width of the rectangle to fill.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the rectangle to fill.","pos":[0,31]}]},{"pos":[456925,456957],"content":"Height of the rectangle to fill.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the rectangle to fill.","pos":[0,32]}]},{"pos":[457125,457208],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[457810,457902],"content":"Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.","pos":[0,92]}]},{"pos":[457914,458111],"content":"This method fills the interior of the rectangle defined by the <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`y`</ph>, <ph id=\"ph3\">`width`</ph>, and <ph id=\"ph4\">`height`</ph> parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method fills the interior of the rectangle defined by the `x`, `y`, `width`, and `height` parameters, including the specified upper-left corner and up to the calculated lower and bottom edges."},{"pos":[459093,459183],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[459241,459308],"content":"The x-coordinate of the upper-left corner of the rectangle to fill.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangle to fill.","pos":[0,67]}]},{"pos":[459366,459433],"content":"The y-coordinate of the upper-left corner of the rectangle to fill.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangle to fill.","pos":[0,67]}]},{"pos":[459495,459526],"content":"Width of the rectangle to fill.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the rectangle to fill.","pos":[0,31]}]},{"pos":[459589,459621],"content":"Height of the rectangle to fill.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the rectangle to fill.","pos":[0,32]}]},{"pos":[459789,459872],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[460373,460489],"content":"Fills the interiors of a series of rectangles specified by <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Fills the interiors of a series of rectangles specified by <xref href=\"System.Drawing.Rectangle\"></xref> structures."},{"pos":[461474,461564],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[461639,461743],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the rectangles to fill.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Rectangle\"></xref> structures that represent the rectangles to fill."},{"pos":[461913,462113],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>rects</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;rects&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,184],"source":"       -or-       <code>rects</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[462209,462251],"content":"<ph id=\"ph1\">&lt;code&gt;rects&lt;/code&gt;</ph> is a zero-length array.","needQuote":true,"needEscape":true,"source":"<code>rects</code> is a zero-length array."},{"pos":[462757,462874],"content":"Fills the interiors of a series of rectangles specified by <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures.","needQuote":true,"needEscape":true,"source":"Fills the interiors of a series of rectangles specified by <xref href=\"System.Drawing.RectangleF\"></xref> structures."},{"pos":[463860,463950],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[464026,464131],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the rectangles to fill.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.RectangleF\"></xref> structures that represent the rectangles to fill."},{"pos":[464301,464501],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>rects</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;rects&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,184],"source":"       -or-       <code>rects</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[464597,464639],"content":"<ph id=\"ph1\">&lt;code&gt;Rects&lt;/code&gt;</ph> is a zero-length array.","needQuote":true,"needEscape":true,"source":"<code>Rects</code> is a zero-length array."},{"pos":[465095,465162],"content":"Fills the interior of a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Fills the interior of a <xref href=\"System.Drawing.Region\"></xref>."},{"pos":[465174,465353],"content":"A <xref:System.Drawing.Region> is composed of rectangles and paths. If the region is not closed, an additional segment is added from the last point to the first point to close it.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.Drawing.Region> is composed of rectangles and paths. If the region is not closed, an additional segment is added from the last point to the first point to close it.","pos":[0,179],"nodes":[{"content":"A &lt;xref:System.Drawing.Region&gt; is composed of rectangles and paths.","pos":[0,67],"source":"A <xref:System.Drawing.Region> is composed of rectangles and paths."},{"content":"If the region is not closed, an additional segment is added from the last point to the first point to close it.","pos":[68,179]}]}]},{"pos":[466344,466434],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of the fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill."},{"pos":[466505,466581],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the area to fill.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Region\"></xref> that represents the area to fill."},{"pos":[466747,466948],"content":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>region</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;region&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,185],"source":"       -or-       <code>region</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[467271,467395],"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","pos":[0,124]}]},{"pos":[467821,467942],"content":"Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.","needQuote":true,"needEscape":true,"nodes":[{"content":"Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.","pos":[0,121]}]},{"pos":[467954,468078],"content":"This method starts a flush and returns immediately without waiting for any currently executing graphics operation to finish.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method starts a flush and returns immediately without waiting for any currently executing graphics operation to finish.","pos":[0,124]}]},{"pos":[468633,468778],"content":"Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to return before the operations finish.","needQuote":true,"needEscape":true,"nodes":[{"content":"Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to return before the operations finish.","pos":[0,145]}]},{"pos":[468790,469099],"content":"A value of &lt;xref:System.Drawing.Drawing2D.FlushIntention&gt; for the <ph id=\"ph1\">`intention`</ph> parameter specifies that the method return immediately after beginning the flush, while a value of &lt;xref:System.Drawing.Drawing2D.FlushIntention&gt; specifies that the method wait before returning until any existing operations finish.","needQuote":true,"needEscape":true,"extradata":"MT","source":"A value of <xref:System.Drawing.Drawing2D.FlushIntention> for the `intention` parameter specifies that the method return immediately after beginning the flush, while a value of <xref:System.Drawing.Drawing2D.FlushIntention> specifies that the method wait before returning until any existing operations finish."},{"pos":[469301,469489],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.FlushIntention\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies whether the method returns immediately or waits for any existing operations to finish.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.FlushIntention\"></xref> enumeration that specifies whether the method returns immediately or waits for any existing operations to finish."},{"pos":[469914,470019],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified handle to a device context.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Drawing.Graphics\"></xref> from the specified handle to a device context."},{"pos":[470032,470920],"content":"You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHdc method.       Even if the display device has an associated ICM color profile, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] will not use that profile by default. To enable ICM for a <xref:System.Drawing.Graphics>, construct the <xref:System.Drawing.Graphics> from an HDC after you pass the HDC (and ICM_ON) to the `SetICMMode` function. Then any drawing done by the <xref:System.Drawing.Graphics> will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.       The state of the device context (mapping mode, logical unit, and the like) at the time you call FromHdc can affect rendering done by the <xref:System.Drawing.Graphics>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You should always call the &lt;xref:System.Drawing.Graphics.Dispose%2A&gt; method to release the &lt;xref:System.Drawing.Graphics&gt; and related resources created by the FromHdc method.","pos":[0,174],"source":"You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHdc method."},{"content":"Even if the display device has an associated ICM color profile, <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> will not use that profile by default.","pos":[181,344],"source":"       Even if the display device has an associated ICM color profile, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] will not use that profile by default."},{"content":"To enable ICM for a &lt;xref:System.Drawing.Graphics&gt;, construct the &lt;xref:System.Drawing.Graphics&gt; from an HDC after you pass the HDC (and ICM_ON) to the <ph id=\"ph1\">`SetICMMode`</ph> function.","pos":[345,519],"source":" To enable ICM for a <xref:System.Drawing.Graphics>, construct the <xref:System.Drawing.Graphics> from an HDC after you pass the HDC (and ICM_ON) to the `SetICMMode` function."},{"content":"Then any drawing done by the &lt;xref:System.Drawing.Graphics&gt; will be adjusted according to the ICM profile associated with the display device.","pos":[520,661],"source":" Then any drawing done by the <xref:System.Drawing.Graphics> will be adjusted according to the ICM profile associated with the display device."},{"content":"Enabling ICM will result in slower performance.","pos":[662,709]},{"content":"The state of the device context (mapping mode, logical unit, and the like) at the time you call FromHdc can affect rendering done by the &lt;xref:System.Drawing.Graphics&gt;.","pos":[716,884],"source":"       The state of the device context (mapping mode, logical unit, and the like) at the time you call FromHdc can affect rendering done by the <xref:System.Drawing.Graphics>."}]},{"pos":[472042,472069],"content":"Handle to a device context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle to a device context.","pos":[0,27]}]},{"pos":[472137,472241],"content":"This method returns a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified device context.","needQuote":true,"needEscape":true,"source":"This method returns a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified device context."},{"pos":[472717,472845],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified handle to a device context and handle to a device.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Drawing.Graphics\"></xref> from the specified handle to a device context and handle to a device."},{"pos":[472858,473830],"content":"You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHdc method.       Even if the display device has an associated ICM color profile, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] will not use that profile by default. To enable ICM for a <xref:System.Drawing.Graphics>, construct the <xref:System.Drawing.Graphics> from an HDC after you pass the HDC (and ICM_ON) to the `SetICMMode` function. Then any drawing done by the <xref:System.Drawing.Graphics> will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.       The state of the device context (mapping mode, logical unit, and the like) at the time you call FromHdc can affect rendering done by the <xref:System.Drawing.Graphics>.       The device handle is typically used to query specific printer capabilities.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You should always call the &lt;xref:System.Drawing.Graphics.Dispose%2A&gt; method to release the &lt;xref:System.Drawing.Graphics&gt; and related resources created by the FromHdc method.","pos":[0,174],"source":"You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHdc method."},{"content":"Even if the display device has an associated ICM color profile, <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> will not use that profile by default.","pos":[181,344],"source":"       Even if the display device has an associated ICM color profile, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] will not use that profile by default."},{"content":"To enable ICM for a &lt;xref:System.Drawing.Graphics&gt;, construct the &lt;xref:System.Drawing.Graphics&gt; from an HDC after you pass the HDC (and ICM_ON) to the <ph id=\"ph1\">`SetICMMode`</ph> function.","pos":[345,519],"source":" To enable ICM for a <xref:System.Drawing.Graphics>, construct the <xref:System.Drawing.Graphics> from an HDC after you pass the HDC (and ICM_ON) to the `SetICMMode` function."},{"content":"Then any drawing done by the &lt;xref:System.Drawing.Graphics&gt; will be adjusted according to the ICM profile associated with the display device.","pos":[520,661],"source":" Then any drawing done by the <xref:System.Drawing.Graphics> will be adjusted according to the ICM profile associated with the display device."},{"content":"Enabling ICM will result in slower performance.","pos":[662,709]},{"content":"The state of the device context (mapping mode, logical unit, and the like) at the time you call FromHdc can affect rendering done by the &lt;xref:System.Drawing.Graphics&gt;.","pos":[716,884],"source":"       The state of the device context (mapping mode, logical unit, and the like) at the time you call FromHdc can affect rendering done by the <xref:System.Drawing.Graphics>."},{"content":"The device handle is typically used to query specific printer capabilities.","pos":[891,966]}]},{"pos":[474006,474033],"content":"Handle to a device context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle to a device context.","pos":[0,27]}]},{"pos":[474097,474116],"content":"Handle to a device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle to a device.","pos":[0,19]}]},{"pos":[474184,474299],"content":"This method returns a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified device context and device.","needQuote":true,"needEscape":true,"source":"This method returns a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified device context and device."},{"pos":[474766,474854],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified device context.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Drawing.Graphics\"></xref> for the specified device context."},{"pos":[474866,474897],"content":"This method should not be used.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method should not be used.","pos":[0,31]}]},{"pos":[475064,475091],"content":"Handle to a device context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle to a device context.","pos":[0,27]}]},{"pos":[475159,475239],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified device context.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Graphics\"></xref> for the specified device context."},{"pos":[475679,475776],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified handle to a window.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Drawing.Graphics\"></xref> from the specified handle to a window."},{"pos":[475788,475962],"content":"You should always call the<xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHwnd method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You should always call the&lt;xref:System.Drawing.Graphics.Dispose%2A&gt; method to release the &lt;xref:System.Drawing.Graphics&gt; and related resources created by the FromHwnd method.","pos":[0,174],"source":"You should always call the<xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHwnd method."}]},{"pos":[477163,477182],"content":"Handle to a window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle to a window.","pos":[0,19]}]},{"pos":[477250,477353],"content":"This method returns a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified window handle.","needQuote":true,"needEscape":true,"source":"This method returns a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified window handle."},{"pos":[477826,477918],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified windows handle.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified windows handle."},{"pos":[477930,477961],"content":"This method should not be used.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method should not be used.","pos":[0,31]}]},{"pos":[478131,478150],"content":"Handle to a window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle to a window.","pos":[0,19]}]},{"pos":[478218,478297],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified window handle.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Graphics\"></xref> for the specified window handle."},{"pos":[478754,478874],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Drawing.Graphics\"></xref> from the specified <xref href=\"System.Drawing.Image\"></xref>."},{"pos":[478887,480022],"content":"If the image has an indexed pixel format, this method throws an exception with the message, \"A Graphics object cannot be created from an image that has an indexed pixel format.\" The indexed pixel formats are shown in the following list.      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>       You can save the indexed image as another format by using the <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> method and then retrieve a <xref:System.Drawing.Graphics> object for the new image.       This method also throws an exception if the image has any of the following pixel formats.      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>       You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromImage method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the image has an indexed pixel format, this method throws an exception with the message, \"A Graphics object cannot be created from an image that has an indexed pixel format.\" The indexed pixel formats are shown in the following list.      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>       You can save the indexed image as another format by using the <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> method and then retrieve a <xref:System.Drawing.Graphics> object for the new image.       This method also throws an exception if the image has any of the following pixel formats.      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>       You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromImage method.","pos":[0,1113],"nodes":[{"content":"If the image has an indexed pixel format, this method throws an exception with the message, \"A Graphics object cannot be created from an image that has an indexed pixel format.\"","pos":[0,177]},{"content":"The indexed pixel formats are shown in the following list.","pos":[178,236]},{"content":"-   &lt;xref:System.Drawing.Imaging.PixelFormat&gt;      -   &lt;xref:System.Drawing.Imaging.PixelFormat&gt;      -   &lt;xref:System.Drawing.Imaging.PixelFormat&gt;       You can save the indexed image as another format by using the &lt;xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29&gt; method and then retrieve a &lt;xref:System.Drawing.Graphics&gt; object for the new image.","pos":[242,630],"source":"      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>       You can save the indexed image as another format by using the <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> method and then retrieve a <xref:System.Drawing.Graphics> object for the new image."},{"content":"This method also throws an exception if the image has any of the following pixel formats.","pos":[637,726]},{"content":"-   &lt;xref:System.Drawing.Imaging.PixelFormat&gt;      -   &lt;xref:System.Drawing.Imaging.PixelFormat&gt;      -   &lt;xref:System.Drawing.Imaging.PixelFormat&gt;      -   &lt;xref:System.Drawing.Imaging.PixelFormat&gt;       You should always call the &lt;xref:System.Drawing.Graphics.Dispose%2A&gt; method to release the &lt;xref:System.Drawing.Graphics&gt; and related resources created by the FromImage method.","pos":[732,1113],"source":"      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>      -   <xref:System.Drawing.Imaging.PixelFormat>       You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromImage method."}]}]},{"pos":[481226,481342],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to create the new <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Image\"></xref> from which to create the new <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[481410,481541],"content":"This method returns a new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Image\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified <xref href=\"System.Drawing.Image\"></xref>."},{"pos":[481705,481788],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[481867,481941],"content":"<ph id=\"ph1\">&lt;code&gt;image&lt;/code&gt;</ph> has an indexed pixel format or its format is undefined.","needQuote":true,"needEscape":true,"source":"<code>image</code> has an indexed pixel format or its format is undefined."},{"pos":[482293,482330],"content":"Gets the cumulative graphics context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the cumulative graphics context.","pos":[0,37]}]},{"pos":[482342,482512],"content":"The return value is an object array where the first element contains the cumulative clip region and the second element contains the cumulative translate/transform matrix.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The return value is an object array where the first element contains the cumulative clip region and the second element contains the cumulative translate/transform matrix.","pos":[0,170]}]},{"pos":[482645,482714],"content":"An <xref:System.Object> representing the cumulative graphics context.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; representing the cumulative graphics context.","pos":[0,69],"source":"An <xref:System.Object> representing the cumulative graphics context."}]},{"pos":[483155,483209],"content":"Gets a handle to the current Windows halftone palette.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a handle to the current Windows halftone palette.","pos":[0,54]}]},{"pos":[483221,483494],"content":"The purpose of the GetHalftonePalette method is to enable [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] to produce a better quality halftone when the display uses 8 bits per pixel. To display an image using the halftone palette, use the following procedure.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The purpose of the GetHalftonePalette method is to enable <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> to produce a better quality halftone when the display uses 8 bits per pixel.","pos":[0,196],"source":"The purpose of the GetHalftonePalette method is to enable [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] to produce a better quality halftone when the display uses 8 bits per pixel."},{"content":"To display an image using the halftone palette, use the following procedure.","pos":[197,273]}]},{"pos":[485262,485320],"content":"Internal pointer that specifies the handle to the palette.","needQuote":true,"needEscape":true,"nodes":[{"content":"Internal pointer that specifies the handle to the palette.","pos":[0,58]}]},{"pos":[485705,485809],"content":"Gets the handle to the device context associated with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the handle to the device context associated with this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[485822,486951],"content":"The device context is a Windows structure based on [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output. This method returns that device context with the exception of a font. Because a font is not selected, calls to the <xref:System.Drawing.Font.FromHdc%2A> method using a handle returned from the GetHdc method will fail.       Calls to the GetHdc and <xref:System.Drawing.Graphics.ReleaseHdc%2A> methods must appear in pairs. During the scope of a GetHdc and <xref:System.Drawing.Graphics.ReleaseHdc%2A> method pair, you usually make only calls to [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] functions. Calls in that scope made to [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] methods of the <xref:System.Drawing.Graphics> that produced the `hdc` parameter fail with an `ObjectBusy` error. Also, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] ignores any state changes made to the <xref:System.Drawing.Graphics> of the `hdc` parameter in subsequent operations.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The device context is a Windows structure based on <ph id=\"ph1\">[!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)]</ph> that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.","pos":[0,228],"source":"The device context is a Windows structure based on [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output."},{"content":"This method returns that device context with the exception of a font.","pos":[229,298]},{"content":"Because a font is not selected, calls to the &lt;xref:System.Drawing.Font.FromHdc%2A&gt; method using a handle returned from the GetHdc method will fail.","pos":[299,446],"source":" Because a font is not selected, calls to the <xref:System.Drawing.Font.FromHdc%2A> method using a handle returned from the GetHdc method will fail."},{"content":"Calls to the GetHdc and &lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt; methods must appear in pairs.","pos":[453,551],"source":"       Calls to the GetHdc and <xref:System.Drawing.Graphics.ReleaseHdc%2A> methods must appear in pairs."},{"content":"During the scope of a GetHdc and &lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt; method pair, you usually make only calls to <ph id=\"ph1\">[!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)]</ph> functions.","pos":[552,738],"source":" During the scope of a GetHdc and <xref:System.Drawing.Graphics.ReleaseHdc%2A> method pair, you usually make only calls to [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] functions."},{"content":"Calls in that scope made to <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> methods of the &lt;xref:System.Drawing.Graphics&gt; that produced the <ph id=\"ph2\">`hdc`</ph> parameter fail with an <ph id=\"ph3\">`ObjectBusy`</ph> error.","pos":[739,941],"source":" Calls in that scope made to [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] methods of the <xref:System.Drawing.Graphics> that produced the `hdc` parameter fail with an `ObjectBusy` error."},{"content":"Also, <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> ignores any state changes made to the &lt;xref:System.Drawing.Graphics&gt; of the <ph id=\"ph2\">`hdc`</ph> parameter in subsequent operations.","pos":[942,1127],"source":" Also, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] ignores any state changes made to the <xref:System.Drawing.Graphics> of the `hdc` parameter in subsequent operations."}]},{"pos":[488839,488934],"content":"Handle to the device context associated with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Handle to the device context associated with this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[489411,489503],"content":"Gets the nearest color to the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Gets the nearest color to the specified <xref href=\"System.Drawing.Color\"></xref> structure."},{"pos":[490842,490920],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure for which to find a match.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Color\"></xref> structure for which to find a match."},{"pos":[490985,491132],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the nearest color to the one specified with the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">color</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Color\"></xref> structure that represents the nearest color to the one specified with the <code>color</code> parameter."},{"pos":[491565,491667],"content":"Gets or sets the interpolation mode associated with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the interpolation mode associated with this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[491679,491774],"content":"The interpolation mode determines how intermediate values between two endpoints are calculated.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The interpolation mode determines how intermediate values between two endpoints are calculated.","pos":[0,95]}]},{"pos":[491966,492048],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.InterpolationMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.Drawing2D.InterpolationMode\"></xref> values."},{"pos":[492546,492744],"content":"Updates the clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the intersection of the current clip region and the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to the intersection of the current clip region and the specified <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[492756,492990],"content":"This method assigns to the &lt;xref:System.Drawing.Graphics.Clip%2A&gt; property of this &lt;xref:System.Drawing.Graphics&gt; the area represented by the intersection of the current clip region and the rectangle specified by the <ph id=\"ph1\">`rect`</ph> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the rectangle specified by the `rect` parameter."},{"pos":[494505,494603],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to intersect with the current clip region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure to intersect with the current clip region."},{"pos":[495102,495301],"content":"Updates the clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the intersection of the current clip region and the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to the intersection of the current clip region and the specified <xref href=\"System.Drawing.RectangleF\"></xref> structure."},{"pos":[495313,495547],"content":"This method assigns to the &lt;xref:System.Drawing.Graphics.Clip%2A&gt; property of this &lt;xref:System.Drawing.Graphics&gt; the area represented by the intersection of the current clip region and the rectangle specified by the <ph id=\"ph1\">`rect`</ph> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the rectangle specified by the `rect` parameter."},{"pos":[497064,497163],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to intersect with the current clip region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure to intersect with the current clip region."},{"pos":[497642,497827],"content":"Updates the clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the intersection of the current clip region and the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to the intersection of the current clip region and the specified <xref href=\"System.Drawing.Region\"></xref>."},{"pos":[497839,498072],"content":"This method assigns to the &lt;xref:System.Drawing.Graphics.Clip%2A&gt; property of this &lt;xref:System.Drawing.Graphics&gt; the area represented by the intersection of the current clip region and the region specified by the <ph id=\"ph1\">`region`</ph> parameter.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the region specified by the `region` parameter."},{"pos":[499760,499840],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to intersect with the current region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Region\"></xref> to intersect with the current region."},{"pos":[500241,500355],"content":"Gets a value indicating whether the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is empty.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> is empty."},{"pos":[500470,500691],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the clipping region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is empty; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> is empty; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[501143,501324],"content":"Indicates whether the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure is contained within the visible clip region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified <xref href=\"System.Drawing.Point\"></xref> structure is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[502539,502614],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to test for visibility.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Point\"></xref> structure to test for visibility."},{"pos":[502673,502965],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the point specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">point</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is contained within the visible clip region of this <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point specified by the <code>point</code> parameter is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[503420,503602],"content":"Indicates whether the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure is contained within the visible clip region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified <xref href=\"System.Drawing.PointF\"></xref> structure is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[504815,504891],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to test for visibility.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure to test for visibility."},{"pos":[504950,505242],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the point specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">point</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is contained within the visible clip region of this <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point specified by the <code>point</code> parameter is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[505712,505912],"content":"Indicates whether the rectangle specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure is contained within the visible clip region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[507171,507250],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to test for visibility.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure to test for visibility."},{"pos":[507309,507604],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangle specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">rect</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is contained within the visible clip region of this <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle specified by the <code>rect</code> parameter is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[508079,508280],"content":"Indicates whether the rectangle specified by a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure is contained within the visible clip region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[509517,509597],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to test for visibility.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure to test for visibility."},{"pos":[509656,509951],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangle specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">rect</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is contained within the visible clip region of this <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle specified by the <code>rect</code> parameter is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[510429,510589],"content":"Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[511781,511834],"content":"The x-coordinate of the point to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test for visibility.","pos":[0,53]}]},{"pos":[511891,511944],"content":"The y-coordinate of the point to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test for visibility.","pos":[0,53]}]},{"pos":[512003,512309],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the point defined by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameters is contained within the visible clip region of this <bpt id=\"p4\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point defined by the <code>x</code> and <code>y</code> parameters is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[512797,512957],"content":"Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[514154,514207],"content":"The x-coordinate of the point to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the point to test for visibility.","pos":[0,53]}]},{"pos":[514265,514318],"content":"The y-coordinate of the point to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the point to test for visibility.","pos":[0,53]}]},{"pos":[514377,514683],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the point defined by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameters is contained within the visible clip region of this <bpt id=\"p4\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point defined by the <code>x</code> and <code>y</code> parameters is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[515249,515436],"content":"Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[516678,516760],"content":"The x-coordinate of the upper-left corner of the rectangle to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangle to test for visibility.","pos":[0,82]}]},{"pos":[516817,516899],"content":"The y-coordinate of the upper-left corner of the rectangle to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangle to test for visibility.","pos":[0,82]}]},{"pos":[516960,517006],"content":"Width of the rectangle to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the rectangle to test for visibility.","pos":[0,46]}]},{"pos":[517068,517115],"content":"Height of the rectangle to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the rectangle to test for visibility.","pos":[0,47]}]},{"pos":[517174,517526],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangle defined by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p3\">&lt;/code&gt;</ept>, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">width</ph><ept id=\"p4\">&lt;/code&gt;</ept>, and <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph4\">height</ph><ept id=\"p5\">&lt;/code&gt;</ept> parameters is contained within the visible clip region of this <bpt id=\"p6\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p6\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p7\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p7\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle defined by the <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code> parameters is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[518112,518299],"content":"Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[519550,519632],"content":"The x-coordinate of the upper-left corner of the rectangle to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the upper-left corner of the rectangle to test for visibility.","pos":[0,82]}]},{"pos":[519690,519772],"content":"The y-coordinate of the upper-left corner of the rectangle to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the upper-left corner of the rectangle to test for visibility.","pos":[0,82]}]},{"pos":[519834,519880],"content":"Width of the rectangle to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"Width of the rectangle to test for visibility.","pos":[0,46]}]},{"pos":[519943,519990],"content":"Height of the rectangle to test for visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"Height of the rectangle to test for visibility.","pos":[0,47]}]},{"pos":[520049,520401],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the rectangle defined by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p3\">&lt;/code&gt;</ept>, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">width</ph><ept id=\"p4\">&lt;/code&gt;</ept>, and <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph4\">height</ph><ept id=\"p5\">&lt;/code&gt;</ept> parameters is contained within the visible clip region of this <bpt id=\"p6\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p6\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p7\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p7\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle defined by the <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code> parameters is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[520833,520955],"content":"Gets a value indicating whether the visible clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is empty.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the visible clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> is empty."},{"pos":[520967,521095],"content":"The visible clipping region is the intersection of the clipping region of this <ph id=\"ph1\">`Graphics`</ph> and the clipping region of the window.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The visible clipping region is the intersection of the clipping region of this `Graphics` and the clipping region of the window."},{"pos":[521217,521461],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the visible portion of the clipping region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is empty; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the visible portion of the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> is empty; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[522209,522358],"content":"Gets an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects, each of which bounds a range of character positions within the specified string.","needQuote":true,"needEscape":true,"source":"Gets an array of <xref href=\"System.Drawing.Region\"></xref> objects, each of which bounds a range of character positions within the specified string."},{"pos":[522370,522580],"content":"The regions returned by this method are resolution-dependent, so there might be a slight loss of accuracy if strings are recorded in a metafile at one resolution and later played back at a different resolution.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The regions returned by this method are resolution-dependent, so there might be a slight loss of accuracy if strings are recorded in a metafile at one resolution and later played back at a different resolution.","pos":[0,210]}]},{"pos":[524223,524241],"content":"String to measure.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to measure.","pos":[0,18]}]},{"pos":[524308,524392],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[524471,524579],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the layout rectangle for the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the layout rectangle for the string."},{"pos":[524662,524788],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents formatting information, such as line spacing, for the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string."},{"pos":[524856,525020],"content":"This method returns an array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects, each of which bounds a range of character positions within the specified string.","needQuote":true,"needEscape":true,"source":"This method returns an array of <xref href=\"System.Drawing.Region\"></xref> objects, each of which bounds a range of character positions within the specified string."},{"pos":[525547,525648],"content":"Measures the specified string when drawn with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref>."},{"pos":[525660,526601],"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","pos":[0,941],"nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.","pos":[0,206],"source":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs."},{"content":"Also, the &lt;xref:System.Drawing.Graphics.DrawString%2A&gt; method adjusts glyph points to optimize display quality and might display a string narrower than reported by &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;.","pos":[207,419],"source":" Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>."},{"content":"To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the &lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt; method or one of the &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; methods that takes a &lt;xref:System.Drawing.StringFormat&gt;, and pass &lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;.","pos":[420,784],"source":" To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>."},{"content":"Also, ensure the &lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt; for the &lt;xref:System.Drawing.Graphics&gt; is &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[785,941],"source":" Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>."}]}]},{"pos":[527752,527770],"content":"String to measure.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to measure.","pos":[0,18]}]},{"pos":[527837,527921],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[527986,528272],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the size, in the units specified by the &lt;xref:System.Drawing.Graphics.PageUnit*&gt; property, of the string specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter as drawn with the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">font</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter."},{"pos":[528432,528514],"content":"<ph id=\"ph1\">&lt;code&gt;font&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[529024,529158],"content":"Measures the specified string when drawn with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> within the specified layout area.","needQuote":true,"needEscape":true,"source":"Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> within the specified layout area."},{"pos":[529170,530111],"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","pos":[0,941],"nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.","pos":[0,206],"source":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs."},{"content":"Also, the &lt;xref:System.Drawing.Graphics.DrawString%2A&gt; method adjusts glyph points to optimize display quality and might display a string narrower than reported by &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;.","pos":[207,419],"source":" Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>."},{"content":"To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the &lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt; method or one of the &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; methods that takes a &lt;xref:System.Drawing.StringFormat&gt;, and pass &lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;.","pos":[420,784],"source":" To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>."},{"content":"Also, ensure the &lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt; for the &lt;xref:System.Drawing.Graphics&gt; is &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[785,941],"source":" Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>."}]}]},{"pos":[531343,531361],"content":"String to measure.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to measure.","pos":[0,18]}]},{"pos":[531428,531507],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> defines the text format of the string."},{"pos":[531581,531685],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the maximum layout area for the text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.SizeF\"></xref> structure that specifies the maximum layout area for the text."},{"pos":[531750,532036],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the size, in the units specified by the &lt;xref:System.Drawing.Graphics.PageUnit*&gt; property, of the string specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter as drawn with the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">font</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter."},{"pos":[532196,532278],"content":"<ph id=\"ph1\">&lt;code&gt;font&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[532772,532873],"content":"Measures the specified string when drawn with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref>."},{"pos":[532886,534417],"content":"The `width` parameter specifies the maximum value of the width component of the returned <xref:System.Drawing.SizeF> structure (<xref:System.Drawing.SizeF.Width%2A>). If the `width` parameter is less than the actual width of the string, the returned <xref:System.Drawing.SizeF.Width%2A> component is truncated to a value representing the maximum number of characters that will fit within the specified width. To accommodate the entire string, the returned <xref:System.Drawing.SizeF.Height%2A> component is adjusted to a value that allows displaying the string with character wrap.       The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`width`</ph> parameter specifies the maximum value of the width component of the returned &lt;xref:System.Drawing.SizeF&gt; structure (&lt;xref:System.Drawing.SizeF.Width%2A&gt;).","pos":[0,166],"source":"The `width` parameter specifies the maximum value of the width component of the returned <xref:System.Drawing.SizeF> structure (<xref:System.Drawing.SizeF.Width%2A>)."},{"content":"If the <ph id=\"ph1\">`width`</ph> parameter is less than the actual width of the string, the returned &lt;xref:System.Drawing.SizeF.Width%2A&gt; component is truncated to a value representing the maximum number of characters that will fit within the specified width.","pos":[167,408],"source":" If the `width` parameter is less than the actual width of the string, the returned <xref:System.Drawing.SizeF.Width%2A> component is truncated to a value representing the maximum number of characters that will fit within the specified width."},{"content":"To accommodate the entire string, the returned &lt;xref:System.Drawing.SizeF.Height%2A&gt; component is adjusted to a value that allows displaying the string with character wrap.","pos":[409,581],"source":" To accommodate the entire string, the returned <xref:System.Drawing.SizeF.Height%2A> component is adjusted to a value that allows displaying the string with character wrap."},{"content":"The &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.","pos":[588,794],"source":"       The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs."},{"content":"Also, the &lt;xref:System.Drawing.Graphics.DrawString%2A&gt; method adjusts glyph points to optimize display quality and might display a string narrower than reported by &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;.","pos":[795,1007],"source":" Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>."},{"content":"To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the &lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt; method or one of the &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; methods that takes a &lt;xref:System.Drawing.StringFormat&gt;, and pass &lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;.","pos":[1008,1372],"source":" To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>."},{"content":"Also, ensure the &lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt; for the &lt;xref:System.Drawing.Graphics&gt; is &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[1373,1529],"source":" Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>."}]},{"pos":[535623,535641],"content":"String to measure.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to measure.","pos":[0,18]}]},{"pos":[535708,535787],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the format of the string."},{"pos":[535848,535886],"content":"Maximum width of the string in pixels.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maximum width of the string in pixels.","pos":[0,38]}]},{"pos":[535951,536237],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the size, in the units specified by the &lt;xref:System.Drawing.Graphics.PageUnit*&gt; property, of the string specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter as drawn with the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">font</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter."},{"pos":[536397,536479],"content":"<ph id=\"ph1\">&lt;code&gt;font&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[537089,537272],"content":"Measures the specified string when drawn with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and formatted with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> and formatted with the specified <xref href=\"System.Drawing.StringFormat\"></xref>."},{"pos":[537284,538191],"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the MeasureString methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the MeasureString methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","pos":[0,907],"nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.","pos":[0,206],"source":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs."},{"content":"Also, the &lt;xref:System.Drawing.Graphics.DrawString%2A&gt; method adjusts glyph points to optimize display quality and might display a string narrower than reported by &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;.","pos":[207,419],"source":" Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>."},{"content":"To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the &lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt; method or one of the MeasureString methods that takes a &lt;xref:System.Drawing.StringFormat&gt;, and pass &lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;.","pos":[420,750],"source":" To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the MeasureString methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>."},{"content":"Also, ensure the &lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt; for the &lt;xref:System.Drawing.Graphics&gt; is &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[751,907],"source":" Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>."}]}]},{"pos":[539739,539757],"content":"String to measure.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to measure.","pos":[0,18]}]},{"pos":[539824,539903],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> defines the text format of the string."},{"pos":[539974,540079],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the upper-left corner of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.PointF\"></xref> structure that represents the upper-left corner of the string."},{"pos":[540162,540288],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents formatting information, such as line spacing, for the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string."},{"pos":[540353,540683],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the size, in the units specified by the &lt;xref:System.Drawing.Graphics.PageUnit*&gt; property, of the string specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter as drawn with the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">font</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter and the <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">stringFormat</ph><ept id=\"p4\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter."},{"pos":[540843,540925],"content":"<ph id=\"ph1\">&lt;code&gt;font&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[541530,541713],"content":"Measures the specified string when drawn with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and formatted with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> and formatted with the specified <xref href=\"System.Drawing.StringFormat\"></xref>."},{"pos":[541725,542666],"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","pos":[0,941],"nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.","pos":[0,206],"source":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs."},{"content":"Also, the &lt;xref:System.Drawing.Graphics.DrawString%2A&gt; method adjusts glyph points to optimize display quality and might display a string narrower than reported by &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;.","pos":[207,419],"source":" Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>."},{"content":"To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the &lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt; method or one of the &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; methods that takes a &lt;xref:System.Drawing.StringFormat&gt;, and pass &lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;.","pos":[420,784],"source":" To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>."},{"content":"Also, ensure the &lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt; for the &lt;xref:System.Drawing.Graphics&gt; is &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[785,941],"source":" Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>."}]}]},{"pos":[544171,544189],"content":"String to measure.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to measure.","pos":[0,18]}]},{"pos":[544256,544335],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> defines the text format of the string."},{"pos":[544409,544513],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the maximum layout area for the text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.SizeF\"></xref> structure that specifies the maximum layout area for the text."},{"pos":[544596,544722],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents formatting information, such as line spacing, for the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string."},{"pos":[544787,545117],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the size, in the units specified by the &lt;xref:System.Drawing.Graphics.PageUnit*&gt; property, of the string specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter as drawn with the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">font</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter and the <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">stringFormat</ph><ept id=\"p4\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter."},{"pos":[545277,545359],"content":"<ph id=\"ph1\">&lt;code&gt;font&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[545948,546131],"content":"Measures the specified string when drawn with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and formatted with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> and formatted with the specified <xref href=\"System.Drawing.StringFormat\"></xref>."},{"pos":[546143,547084],"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","pos":[0,941],"nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.","pos":[0,206],"source":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs."},{"content":"Also, the &lt;xref:System.Drawing.Graphics.DrawString%2A&gt; method adjusts glyph points to optimize display quality and might display a string narrower than reported by &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;.","pos":[207,419],"source":" Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>."},{"content":"To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the &lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt; method or one of the &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; methods that takes a &lt;xref:System.Drawing.StringFormat&gt;, and pass &lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;.","pos":[420,784],"source":" To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>."},{"content":"Also, ensure the &lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt; for the &lt;xref:System.Drawing.Graphics&gt; is &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[785,941],"source":" Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>."}]}]},{"pos":[548561,548579],"content":"String to measure.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to measure.","pos":[0,18]}]},{"pos":[548646,548730],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[548791,548819],"content":"Maximum width of the string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maximum width of the string.","pos":[0,28]}]},{"pos":[548896,549022],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents formatting information, such as line spacing, for the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string."},{"pos":[549087,549417],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the size, in the units specified by the &lt;xref:System.Drawing.Graphics.PageUnit*&gt; property, of the string specified in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter as drawn with the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">font</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter and the <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">stringFormat</ph><ept id=\"p4\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter."},{"pos":[549577,549659],"content":"<ph id=\"ph1\">&lt;code&gt;font&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[550356,550539],"content":"Measures the specified string when drawn with the specified <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and formatted with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> and formatted with the specified <xref href=\"System.Drawing.StringFormat\"></xref>."},{"pos":[550551,551490],"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat> and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat> and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.","pos":[0,939],"nodes":[{"content":"The &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs.","pos":[0,206],"source":"The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs."},{"content":"Also, the &lt;xref:System.Drawing.Graphics.DrawString%2A&gt; method adjusts glyph points to optimize display quality and might display a string narrower than reported by &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt;.","pos":[207,419],"source":" Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>."},{"content":"To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the &lt;xref:System.Drawing.Graphics.MeasureCharacterRanges%2A&gt; method or one of the &lt;xref:System.Drawing.Graphics.MeasureString%2A&gt; methods that takes a &lt;xref:System.Drawing.StringFormat&gt; and pass &lt;xref:System.Drawing.StringFormat.GenericTypographic%2A&gt;.","pos":[420,783],"source":" To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat> and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>."},{"content":"Also ensure the &lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt; for the &lt;xref:System.Drawing.Graphics&gt; is &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[784,939],"source":" Also ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>."}]}]},{"pos":[553259,553277],"content":"String to measure.","needQuote":true,"needEscape":true,"nodes":[{"content":"String to measure.","pos":[0,18]}]},{"pos":[553344,553428],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the text format of the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string."},{"pos":[553502,553606],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that specifies the maximum layout area for the text.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.SizeF\"></xref> structure that specifies the maximum layout area for the text."},{"pos":[553689,553815],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringFormat\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents formatting information, such as line spacing, for the string.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string."},{"pos":[553887,553922],"content":"Number of characters in the string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number of characters in the string.","pos":[0,35]}]},{"pos":[553989,554024],"content":"Number of text lines in the string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number of text lines in the string.","pos":[0,35]}]},{"pos":[554089,554409],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.SizeF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the size of the string, in the units specified by the &lt;xref:System.Drawing.Graphics.PageUnit*&gt; property, of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">text</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter as drawn with the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">font</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter and the <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">stringFormat</ph><ept id=\"p4\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size of the string, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter."},{"pos":[554569,554651],"content":"<ph id=\"ph1\">&lt;code&gt;font&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[555102,555262],"content":"Multiplies the world transformation of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and specified the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Multiplies the world transformation of this <xref href=\"System.Drawing.Graphics\"></xref> and specified the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[555274,555397],"content":"This method prepends the matrix specified by the <ph id=\"ph1\">`matrix`</ph> parameter, so that the result is <ph id=\"ph2\">`matrix`</ph> x world transformation.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method prepends the matrix specified by the `matrix` parameter, so that the result is `matrix` x world transformation."},{"pos":[556784,556882],"content":"4x4 <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that multiplies the world transformation.","needQuote":true,"needEscape":true,"source":"4x4 <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that multiplies the world transformation."},{"pos":[557515,557698],"content":"Multiplies the world transformation of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and specified the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in the specified order.","needQuote":true,"needEscape":true,"source":"Multiplies the world transformation of this <xref href=\"System.Drawing.Graphics\"></xref> and specified the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order."},{"pos":[557710,558022],"content":"A value of<xref:System.Drawing.Drawing2D.MatrixOrder> for the `order` parameter specifies that the order of the multiplication is `matrix` x world transformation. A value of <xref:System.Drawing.Drawing2D.MatrixOrder> for `order` specifies that the order of the multiplication is world transformation x `matrix`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A value of&lt;xref:System.Drawing.Drawing2D.MatrixOrder&gt; for the <ph id=\"ph1\">`order`</ph> parameter specifies that the order of the multiplication is <ph id=\"ph2\">`matrix`</ph> x world transformation.","pos":[0,162],"source":"A value of<xref:System.Drawing.Drawing2D.MatrixOrder> for the `order` parameter specifies that the order of the multiplication is `matrix` x world transformation."},{"content":"A value of &lt;xref:System.Drawing.Drawing2D.MatrixOrder&gt; for <ph id=\"ph1\">`order`</ph> specifies that the order of the multiplication is world transformation x <ph id=\"ph2\">`matrix`</ph>.","pos":[163,312],"source":" A value of <xref:System.Drawing.Drawing2D.MatrixOrder> for `order` specifies that the order of the multiplication is world transformation x `matrix`."}]},{"pos":[559443,559541],"content":"4x4 <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that multiplies the world transformation.","needQuote":true,"needEscape":true,"source":"4x4 <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that multiplies the world transformation."},{"pos":[559626,559758],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that determines the order of the multiplication.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> enumeration that determines the order of the multiplication."},{"pos":[560153,560267],"content":"Gets or sets the scaling between world units and page units for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the scaling between world units and page units for this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[561221,561358],"content":"This property specifies a value for the scaling between world units and page units for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property specifies a value for the scaling between world units and page units for this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[561740,561852],"content":"Gets or sets the unit of measure used for page coordinates in this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the unit of measure used for page coordinates in this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[561864,561970],"content":"The graphics unit is the unit of measure used for page coordinates in this <xref:System.Drawing.Graphics>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The graphics unit is the unit of measure used for page coordinates in this &lt;xref:System.Drawing.Graphics&gt;.","pos":[0,106],"source":"The graphics unit is the unit of measure used for page coordinates in this <xref:System.Drawing.Graphics>."}]},{"pos":[562821,562948],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values other than <bpt id=\"p2\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> values other than <xref href=\"System.Drawing.GraphicsUnit\"></xref>."},{"pos":[563155,563253],"content":"PageUnit is set to <bpt id=\"p1\">&lt;xref href=\"System.Drawing.GraphicsUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which is not a physical unit.","needQuote":true,"needEscape":true,"source":"PageUnit is set to <xref href=\"System.Drawing.GraphicsUnit\"></xref>, which is not a physical unit."},{"pos":[563606,563729],"content":"Gets or set a value specifying how pixels are offset during rendering of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or set a value specifying how pixels are offset during rendering of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[563741,563906],"content":"Use this property to specify either higher quality, slower rendering, or lower quality, faster rendering of the contents of this<xref:System.Drawing.Graphics>object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this property to specify either higher quality, slower rendering, or lower quality, faster rendering of the contents of this&lt;xref:System.Drawing.Graphics&gt;object.","pos":[0,165],"source":"Use this property to specify either higher quality, slower rendering, or lower quality, faster rendering of the contents of this<xref:System.Drawing.Graphics>object."}]},{"pos":[564092,564205],"content":"This property specifies a member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PixelOffsetMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration","needQuote":true,"needEscape":true,"source":"This property specifies a member of the <xref href=\"System.Drawing.Drawing2D.PixelOffsetMode\"></xref> enumeration"},{"pos":[564607,564774],"content":"Releases a device context handle obtained by a previous call to the &lt;xref:System.Drawing.Graphics.GetHdc*&gt; method of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases a device context handle obtained by a previous call to the <xref:System.Drawing.Graphics.GetHdc*> method of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[564786,565141],"content":"<xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> are two methods that allow you to get and release the handle for a Windows device. You should always follow a call to <xref:System.Drawing.Graphics.GetHdc%2A> with a call to <xref:System.Drawing.Graphics.ReleaseHdc%2A> when you are finished with the Windows handle.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"<xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> are two methods that allow you to get and release the handle for a Windows device. You should always follow a call to <xref:System.Drawing.Graphics.GetHdc%2A> with a call to <xref:System.Drawing.Graphics.ReleaseHdc%2A> when you are finished with the Windows handle.","pos":[0,355],"nodes":[{"content":"&lt;xref:System.Drawing.Graphics.GetHdc%2A&gt; and &lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt; are two methods that allow you to get and release the handle for a Windows device.","pos":[0,172],"source":"<xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> are two methods that allow you to get and release the handle for a Windows device."},{"content":"You should always follow a call to &lt;xref:System.Drawing.Graphics.GetHdc%2A&gt; with a call to &lt;xref:System.Drawing.Graphics.ReleaseHdc%2A&gt; when you are finished with the Windows handle.","pos":[173,355],"source":" You should always follow a call to <xref:System.Drawing.Graphics.GetHdc%2A> with a call to <xref:System.Drawing.Graphics.ReleaseHdc%2A> when you are finished with the Windows handle."}]}]},{"pos":[565655,565822],"content":"Releases a device context handle obtained by a previous call to the &lt;xref:System.Drawing.Graphics.GetHdc*&gt; method of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases a device context handle obtained by a previous call to the <xref:System.Drawing.Graphics.GetHdc*> method of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[565835,566746],"content":"The device context is a Windows structure based on [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.       Calls to the <xref:System.Drawing.Graphics.GetHdc%2A> and ReleaseHdc methods must appear in pairs. During the scope of a <xref:System.Drawing.Graphics.GetHdc%2A> and ReleaseHdc method pair, you usually make calls only to [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] functions. Calls in that scope made to [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] methods of the <xref:System.Drawing.Graphics> that produced the `hdc` parameter fail with an `ObjectBusy` error. Also, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] ignores any state changes made to the <xref:System.Drawing.Graphics> of the `hdc` parameter in subsequent operations.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The device context is a Windows structure based on <ph id=\"ph1\">[!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)]</ph> that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.","pos":[0,228],"source":"The device context is a Windows structure based on [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output."},{"content":"Calls to the &lt;xref:System.Drawing.Graphics.GetHdc%2A&gt; and ReleaseHdc methods must appear in pairs.","pos":[235,333],"source":"       Calls to the <xref:System.Drawing.Graphics.GetHdc%2A> and ReleaseHdc methods must appear in pairs."},{"content":"During the scope of a &lt;xref:System.Drawing.Graphics.GetHdc%2A&gt; and ReleaseHdc method pair, you usually make calls only to <ph id=\"ph1\">[!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)]</ph> functions.","pos":[334,520],"source":" During the scope of a <xref:System.Drawing.Graphics.GetHdc%2A> and ReleaseHdc method pair, you usually make calls only to [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] functions."},{"content":"Calls in that scope made to <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> methods of the &lt;xref:System.Drawing.Graphics&gt; that produced the <ph id=\"ph2\">`hdc`</ph> parameter fail with an <ph id=\"ph3\">`ObjectBusy`</ph> error.","pos":[521,723],"source":" Calls in that scope made to [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] methods of the <xref:System.Drawing.Graphics> that produced the `hdc` parameter fail with an `ObjectBusy` error."},{"content":"Also, <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]</ph> ignores any state changes made to the &lt;xref:System.Drawing.Graphics&gt; of the <ph id=\"ph2\">`hdc`</ph> parameter in subsequent operations.","pos":[724,909],"source":" Also, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] ignores any state changes made to the <xref:System.Drawing.Graphics> of the `hdc` parameter in subsequent operations."}]},{"pos":[568641,568802],"content":"Handle to a device context obtained by a previous call to the &lt;xref:System.Drawing.Graphics.GetHdc*&gt; method of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Handle to a device context obtained by a previous call to the <xref:System.Drawing.Graphics.GetHdc*> method of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[569287,569325],"content":"Releases a handle to a device context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases a handle to a device context.","pos":[0,38]}]},{"pos":[569469,569496],"content":"Handle to a device context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle to a device context.","pos":[0,27]}]},{"pos":[569922,570045],"content":"Gets or sets the rendering origin of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for dithering and for hatch brushes.","needQuote":true,"needEscape":true,"source":"Gets or sets the rendering origin of this <xref href=\"System.Drawing.Graphics\"></xref> for dithering and for hatch brushes."},{"pos":[570191,570385],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the dither origin for 8-bits-per-pixel and 16-bits-per-pixel dithering and is also used to set the origin for hatch brushes.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Point\"></xref> structure that represents the dither origin for 8-bits-per-pixel and 16-bits-per-pixel dithering and is also used to set the origin for hatch brushes."},{"pos":[570782,570880],"content":"Resets the clip region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to an infinite region.","needQuote":true,"needEscape":true,"source":"Resets the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to an infinite region."},{"pos":[570892,571035],"content":"When the clipping region of a <xref:System.Drawing.Graphics> is infinite, items that this <xref:System.Drawing.Graphics> draws are not clipped.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the clipping region of a &lt;xref:System.Drawing.Graphics&gt; is infinite, items that this &lt;xref:System.Drawing.Graphics&gt; draws are not clipped.","pos":[0,143],"source":"When the clipping region of a <xref:System.Drawing.Graphics> is infinite, items that this <xref:System.Drawing.Graphics> draws are not clipped."}]},{"pos":[572864,572979],"content":"Resets the world transformation matrix of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the identity matrix.","needQuote":true,"needEscape":true,"source":"Resets the world transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> to the identity matrix."},{"pos":[572991,573265],"content":"The identity matrix represents a transformation with no scaling, rotation, or translation. Resetting the world transformation of this <xref:System.Drawing.Graphics> to the identity matrix means that its world transformation does not change the geometry of transformed items.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The identity matrix represents a transformation with no scaling, rotation, or translation. Resetting the world transformation of this <xref:System.Drawing.Graphics> to the identity matrix means that its world transformation does not change the geometry of transformed items.","pos":[0,274],"nodes":[{"content":"The identity matrix represents a transformation with no scaling, rotation, or translation.","pos":[0,90]},{"content":"Resetting the world transformation of this &lt;xref:System.Drawing.Graphics&gt; to the identity matrix means that its world transformation does not change the geometry of transformed items.","pos":[91,274],"source":" Resetting the world transformation of this <xref:System.Drawing.Graphics> to the identity matrix means that its world transformation does not change the geometry of transformed items."}]}]},{"pos":[574914,575076],"content":"Restores the state of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the state represented by a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Restores the state of this <xref href=\"System.Drawing.Graphics\"></xref> to the state represented by a <xref href=\"System.Drawing.Drawing2D.GraphicsState\"></xref>."},{"pos":[575089,577948],"content":"When you call the <xref:System.Drawing.Graphics.Save%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.Save%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block. When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to theRestore method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call. Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the <xref:System.Drawing.Graphics.Save%2A> method can be passed only once to the `Restore` method.       Calls to the <xref:System.Drawing.Graphics.Save%2A> method can be nested; that is, you can call the <xref:System.Drawing.Graphics.Save%2A> method several times before you call the Restore method. Each time you call the <xref:System.Drawing.Graphics.Save%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsState> for the information block. When you pass one of those objects to the Restore method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>. The information block placed on the stack by that <xref:System.Drawing.Graphics.Save%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.Save%2A> method call are also removed.       Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.Save%2A> method. Just as a Restore call is paired with a <xref:System.Drawing.Graphics.Save%2A> call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call.       When you call the Restore method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you call the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method of a &lt;xref:System.Drawing.Graphics&gt;, an information block that holds the state of the &lt;xref:System.Drawing.Graphics&gt; is put on a stack.","pos":[0,199],"source":"When you call the <xref:System.Drawing.Graphics.Save%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack."},{"content":"The &lt;xref:System.Drawing.Graphics.Save%2A&gt; method returns a &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt; that identifies that information block.","pos":[200,345],"source":" The <xref:System.Drawing.Graphics.Save%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block."},{"content":"When you pass the identifying &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt; to theRestore method, the information block is removed from the stack and is used to restore the &lt;xref:System.Drawing.Graphics&gt; to the state it was in at the time of the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method call.","pos":[346,643],"source":" When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to theRestore method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call."},{"content":"Note that the &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt; returned by a given call to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method can be passed only once to the <ph id=\"ph1\">`Restore`</ph> method.","pos":[644,830],"source":" Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the <xref:System.Drawing.Graphics.Save%2A> method can be passed only once to the `Restore` method."},{"content":"Calls to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method can be nested; that is, you can call the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method several times before you call the Restore method.","pos":[837,1032],"source":"       Calls to the <xref:System.Drawing.Graphics.Save%2A> method can be nested; that is, you can call the <xref:System.Drawing.Graphics.Save%2A> method several times before you call the Restore method."},{"content":"Each time you call the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method, an information block is put on the stack, and you receive a &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt; for the information block.","pos":[1033,1235],"source":" Each time you call the <xref:System.Drawing.Graphics.Save%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsState> for the information block."},{"content":"When you pass one of those objects to the Restore method, the &lt;xref:System.Drawing.Graphics&gt; is returned to the state it was in at the time of the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method call that returned that particular &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;.","pos":[1236,1510],"source":" When you pass one of those objects to the Restore method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>."},{"content":"The information block placed on the stack by that &lt;xref:System.Drawing.Graphics.Save%2A&gt; method call is removed from the stack, and all information blocks placed on that stack after that &lt;xref:System.Drawing.Graphics.Save%2A&gt; method call are also removed.","pos":[1511,1766],"source":" The information block placed on the stack by that <xref:System.Drawing.Graphics.Save%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.Save%2A> method call are also removed."},{"content":"Calls to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method place information blocks on the same stack as calls to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method.","pos":[1773,1947],"source":"       Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.Save%2A> method."},{"content":"Just as a Restore call is paired with a &lt;xref:System.Drawing.Graphics.Save%2A&gt; call, a &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method call is paired with a &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call.","pos":[1948,2172],"source":" Just as a Restore call is paired with a <xref:System.Drawing.Graphics.Save%2A> call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call."},{"content":"When you call the Restore method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method are removed from the stack.","pos":[2179,2486],"source":"       When you call the Restore method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack."},{"content":"Likewise, when you call the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, all information blocks placed on the stack (by the &lt;xref:System.Drawing.Graphics.Save%2A&gt; method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method are removed from the stack.","pos":[2487,2853],"source":" Likewise, when you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack."}]},{"pos":[579226,579382],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the state to which to restore this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Drawing2D.GraphicsState\"></xref> that represents the state to which to restore this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[579849,579962],"content":"Applies the specified rotation to the transformation matrix of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Applies the specified rotation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[579974,580193],"content":"The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the `angle` parameter. This method applies the rotation by prepending it to the transformation matrix.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the <ph id=\"ph1\">`angle`</ph> parameter.","pos":[0,139],"source":"The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the `angle` parameter."},{"content":"This method applies the rotation by prepending it to the transformation matrix.","pos":[140,219]}]},{"pos":[581271,581300],"content":"Angle of rotation in degrees.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle of rotation in degrees.","pos":[0,29]}]},{"pos":[581885,582021],"content":"Applies the specified rotation to the transformation matrix of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the specified order.","needQuote":true,"needEscape":true,"source":"Applies the specified rotation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> in the specified order."},{"pos":[582033,582327],"content":"The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the `angle` parameter. This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the rotation matrix according to the `order` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the <ph id=\"ph1\">`angle`</ph> parameter.","pos":[0,139],"source":"The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the `angle` parameter."},{"content":"This method prepends or appends the transformation matrix of the &lt;xref:System.Drawing.Graphics&gt; by the rotation matrix according to the <ph id=\"ph1\">`order`</ph> parameter.","pos":[140,294],"source":" This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the rotation matrix according to the `order` parameter."}]},{"pos":[583483,583512],"content":"Angle of rotation in degrees.","needQuote":true,"needEscape":true,"nodes":[{"content":"Angle of rotation in degrees.","pos":[0,29]}]},{"pos":[583597,583771],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies whether the rotation is appended or prepended to the matrix transformation.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> enumeration that specifies whether the rotation is appended or prepended to the matrix transformation."},{"pos":[584143,584318],"content":"Saves the current state of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and identifies the saved state with a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Saves the current state of this <xref href=\"System.Drawing.Graphics\"></xref> and identifies the saved state with a <xref href=\"System.Drawing.Drawing2D.GraphicsState\"></xref>."},{"pos":[584331,586882],"content":"When you call the Save method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The Save method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block. When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to the <xref:System.Drawing.Graphics.Restore%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the Save method call. Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the Save method can be passed only once to the <xref:System.Drawing.Graphics.Restore%2A> method.       Calls to the Save method can be nested; that is, you can call the Save method several times before you call the <xref:System.Drawing.Graphics.Restore%2A> method. Each time you call the Save method, an information block is put on the stack, and you receive a<xref:System.Drawing.Drawing2D.GraphicsState> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.Restore%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the Save method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>. The information block placed on the stack by that Save method call is removed from the stack, and all information blocks placed on that stack after that Save method call are also removed.       Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the Save method. Just as a <xref:System.Drawing.Graphics.Restore%2A> call is paired with a Save call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call.       When you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the Save method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the Save method are removed from the stack. Likewise, When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the Save method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you call the Save method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The Save method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block. When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to the <xref:System.Drawing.Graphics.Restore%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the Save method call. Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the Save method can be passed only once to the <xref:System.Drawing.Graphics.Restore%2A> method.       Calls to the Save method can be nested; that is, you can call the Save method several times before you call the <xref:System.Drawing.Graphics.Restore%2A> method. Each time you call the Save method, an information block is put on the stack, and you receive a<xref:System.Drawing.Drawing2D.GraphicsState> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.Restore%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the Save method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>. The information block placed on the stack by that Save method call is removed from the stack, and all information blocks placed on that stack after that Save method call are also removed.       Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the Save method. Just as a <xref:System.Drawing.Graphics.Restore%2A> call is paired with a Save call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call.       When you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the Save method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the Save method are removed from the stack. Likewise, When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the Save method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack.","pos":[0,2545],"nodes":[{"content":"When you call the Save method of a &lt;xref:System.Drawing.Graphics&gt;, an information block that holds the state of the &lt;xref:System.Drawing.Graphics&gt; is put on a stack.","pos":[0,165],"source":"When you call the Save method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack."},{"content":"The Save method returns a &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt; that identifies that information block.","pos":[166,277],"source":" The Save method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block."},{"content":"When you pass the identifying &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt; to the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method, the information block is removed from the stack and is used to restore the &lt;xref:System.Drawing.Graphics&gt; to the state it was in at the time of the Save method call.","pos":[278,576],"source":" When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to the <xref:System.Drawing.Graphics.Restore%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the Save method call."},{"content":"Note that the &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt; returned by a given call to the Save method can be passed only once to the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method.","pos":[577,761],"source":" Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the Save method can be passed only once to the <xref:System.Drawing.Graphics.Restore%2A> method."},{"content":"Calls to the Save method can be nested; that is, you can call the Save method several times before you call the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method.","pos":[768,929],"source":"       Calls to the Save method can be nested; that is, you can call the Save method several times before you call the <xref:System.Drawing.Graphics.Restore%2A> method."},{"content":"Each time you call the Save method, an information block is put on the stack, and you receive a&lt;xref:System.Drawing.Drawing2D.GraphicsState&gt; for the information block.","pos":[930,1097],"source":" Each time you call the Save method, an information block is put on the stack, and you receive a<xref:System.Drawing.Drawing2D.GraphicsState> for the information block."},{"content":"When you pass one of those objects to the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method, the &lt;xref:System.Drawing.Graphics&gt; is returned to the state it was in at the time of the Save method call that returned that particular &lt;xref:System.Drawing.Drawing2D.GraphicsState&gt;.","pos":[1098,1372],"source":" When you pass one of those objects to the <xref:System.Drawing.Graphics.Restore%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the Save method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>."},{"content":"The information block placed on the stack by that Save method call is removed from the stack, and all information blocks placed on that stack after that Save method call are also removed.","pos":[1373,1560]},{"content":"Calls to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method place information blocks on the same stack as calls to the Save method.","pos":[1567,1707],"source":"       Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the Save method."},{"content":"Just as a &lt;xref:System.Drawing.Graphics.Restore%2A&gt; call is paired with a Save call, a &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method call is paired with a &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method call.","pos":[1708,1932],"source":" Just as a <xref:System.Drawing.Graphics.Restore%2A> call is paired with a Save call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call."},{"content":"When you call the &lt;xref:System.Drawing.Graphics.Restore%2A&gt; method, all information blocks placed on the stack (by the Save method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the Save method are removed from the stack.","pos":[1939,2212],"source":"       When you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the Save method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the Save method are removed from the stack."},{"content":"Likewise, When you call the &lt;xref:System.Drawing.Graphics.EndContainer%2A&gt; method, all information blocks placed on the stack (by the Save method or by the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method) after the corresponding call to the &lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt; method are removed from the stack.","pos":[2213,2545],"source":" Likewise, When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the Save method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack."}]}]},{"pos":[588227,588394],"content":"This method returns a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the saved state of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This method returns a <xref href=\"System.Drawing.Drawing2D.GraphicsState\"></xref> that represents the saved state of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[588902,589079],"content":"Applies the specified scaling operation to the transformation matrix of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by prepending it to the object's transformation matrix.","needQuote":true,"needEscape":true,"source":"Applies the specified scaling operation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> by prepending it to the object's transformation matrix."},{"pos":[589091,589327],"content":"The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (`sx`, `sy`, 1). This method prepends the transformation matrix of the <xref:System.Drawing.Graphics> by the scaling matrix.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (<ph id=\"ph1\">`sx`</ph>, <ph id=\"ph2\">`sy`</ph>, 1).","pos":[0,128],"source":"The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (`sx`, `sy`, 1)."},{"content":"This method prepends the transformation matrix of the &lt;xref:System.Drawing.Graphics&gt; by the scaling matrix.","pos":[129,236],"source":" This method prepends the transformation matrix of the <xref:System.Drawing.Graphics> by the scaling matrix."}]},{"pos":[590442,590474],"content":"Scale factor in the x direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Scale factor in the x direction.","pos":[0,32]}]},{"pos":[590533,590565],"content":"Scale factor in the y direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Scale factor in the y direction.","pos":[0,32]}]},{"pos":[591193,591338],"content":"Applies the specified scaling operation to the transformation matrix of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the specified order.","needQuote":true,"needEscape":true,"source":"Applies the specified scaling operation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> in the specified order."},{"pos":[591350,591632],"content":"The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (`sx`, `sy`, 1). This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the scaling matrix according to the `order` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (<ph id=\"ph1\">`sx`</ph>, <ph id=\"ph2\">`sy`</ph>, 1).","pos":[0,128],"source":"The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (`sx`, `sy`, 1)."},{"content":"This method prepends or appends the transformation matrix of the &lt;xref:System.Drawing.Graphics&gt; by the scaling matrix according to the <ph id=\"ph1\">`order`</ph> parameter.","pos":[129,282],"source":" This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the scaling matrix according to the `order` parameter."}]},{"pos":[592839,592871],"content":"Scale factor in the x direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Scale factor in the x direction.","pos":[0,32]}]},{"pos":[592930,592962],"content":"Scale factor in the y direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Scale factor in the y direction.","pos":[0,32]}]},{"pos":[593047,593230],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix."},{"pos":[593730,593884],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the specified <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[593896,594056],"content":"If the graphics path represented by the <ph id=\"ph1\">`path`</ph> parameter is not closed, an additional segment is added from the last point to the first point to close the path.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If the graphics path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path."},{"pos":[595113,595208],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the new clip region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> that represents the new clip region."},{"pos":[595661,595878],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Clip\" name=\"Clip\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> property of the specified <bpt id=\"p3\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the <xref uid=\"langword_csharp_Clip\" name=\"Clip\" href=\"\"></xref> property of the specified <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[597231,597315],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from which to take the new clip region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Graphics\"></xref> from which to take the new clip region."},{"pos":[597773,597939],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the rectangle specified by a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[598984,599076],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the new clip region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the new clip region."},{"pos":[599539,599706],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the rectangle specified by a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure."},{"pos":[600750,600843],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the new clip region.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the new clip region."},{"pos":[601446,601676],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the result of the specified operation combining the current clip region and the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified operation combining the current clip region and the specified <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>."},{"pos":[601688,601848],"content":"If the graphics path represented by the <ph id=\"ph1\">`path`</ph> parameter is not closed, an additional segment is added from the last point to the first point to close the path.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If the graphics path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path."},{"pos":[603009,603079],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.GraphicsPath\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to combine.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to combine."},{"pos":[603170,603300],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CombineMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the combining operation to use.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use."},{"pos":[603863,604135],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the result of the specified combining operation of the current clip region and the &lt;xref:System.Drawing.Graphics.Clip*&gt; property of the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified combining operation of the current clip region and the <xref:System.Drawing.Graphics.Clip*> property of the specified <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[605583,605670],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the clip region to combine.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Graphics\"></xref> that specifies the clip region to combine."},{"pos":[605761,605891],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CombineMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the combining operation to use.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use."},{"pos":[606459,606701],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the result of the specified operation combining the current clip region and the rectangle specified by a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified operation combining the current clip region and the rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure."},{"pos":[607847,607914],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Rectangle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to combine.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Rectangle\"></xref> structure to combine."},{"pos":[608005,608135],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CombineMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the combining operation to use.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use."},{"pos":[608708,608951],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the result of the specified operation combining the current clip region and the rectangle specified by a <bpt id=\"p2\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified operation combining the current clip region and the rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure."},{"pos":[610099,610167],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to combine.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.RectangleF\"></xref> structure to combine."},{"pos":[610258,610388],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CombineMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the combining operation to use.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use."},{"pos":[610941,611155],"content":"Sets the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the result of the specified operation combining the current clip region and the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified operation combining the current clip region and the specified <xref href=\"System.Drawing.Region\"></xref>."},{"pos":[612299,612353],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Drawing.Region\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to combine.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Drawing.Region\"></xref> to combine."},{"pos":[612444,612576],"content":"Member from the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CombineMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the combining operation to use.","needQuote":true,"needEscape":true,"source":"Member from the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use."},{"pos":[612981,613070],"content":"Gets or sets the rendering quality for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the rendering quality for this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[613082,613430],"content":"The smoothing mode specifies whether lines, curves, and the edges of filled areas use smoothing (also called antialiasing). One exception is that path gradient brushes do not obey the smoothing mode. Areas filled using a <xref:System.Drawing.Drawing2D.PathGradientBrush> are rendered the same way (aliased) regardless of the SmoothingMode property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The smoothing mode specifies whether lines, curves, and the edges of filled areas use smoothing (also called antialiasing). One exception is that path gradient brushes do not obey the smoothing mode. Areas filled using a <xref:System.Drawing.Drawing2D.PathGradientBrush> are rendered the same way (aliased) regardless of the SmoothingMode property.","pos":[0,348],"nodes":[{"content":"The smoothing mode specifies whether lines, curves, and the edges of filled areas use smoothing (also called antialiasing).","pos":[0,123]},{"content":"One exception is that path gradient brushes do not obey the smoothing mode.","pos":[124,199]},{"content":"Areas filled using a &lt;xref:System.Drawing.Drawing2D.PathGradientBrush&gt; are rendered the same way (aliased) regardless of the SmoothingMode property.","pos":[200,348],"source":" Areas filled using a <xref:System.Drawing.Drawing2D.PathGradientBrush> are rendered the same way (aliased) regardless of the SmoothingMode property."}]}]},{"pos":[614582,614660],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.SmoothingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.Drawing2D.SmoothingMode\"></xref> values."},{"pos":[615066,615125],"content":"Gets or sets the gamma correction value for rendering text.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the gamma correction value for rendering text.","pos":[0,59]}]},{"pos":[615137,615213],"content":"The gamma correction value must be between 0 and 12. The default value is 4.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The gamma correction value must be between 0 and 12. The default value is 4.","pos":[0,76],"nodes":[{"content":"The gamma correction value must be between 0 and 12.","pos":[0,52]},{"content":"The default value is 4.","pos":[53,76]}]}]},{"pos":[616103,616180],"content":"The gamma correction value used for rendering antialiased and ClearType text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The gamma correction value used for rendering antialiased and ClearType text.","pos":[0,77]}]},{"pos":[616610,616717],"content":"Gets or sets the rendering mode for text associated with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the rendering mode for text associated with this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[616730,617117],"content":"The text rendering hint specifies whether text renders with antialiasing.      > [!NOTE] >  You should not use a <xref:System.Drawing.Graphics.CompositingMode%2A> property value of <xref:System.Drawing.Drawing2D.CompositingMode> when the TextRenderingHint property is set to <xref:System.Drawing.Text.TextRenderingHint>. An exception could occur or the image may not render correctly.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text rendering hint specifies whether text renders with antialiasing.","pos":[0,73]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You should not use a &lt;xref:System.Drawing.Graphics.CompositingMode%2A&gt; property value of &lt;xref:System.Drawing.Drawing2D.CompositingMode&gt; when the TextRenderingHint property is set to &lt;xref:System.Drawing.Text.TextRenderingHint&gt;.","pos":[79,320],"source":"      > [!NOTE] >  You should not use a <xref:System.Drawing.Graphics.CompositingMode%2A> property value of <xref:System.Drawing.Drawing2D.CompositingMode> when the TextRenderingHint property is set to <xref:System.Drawing.Text.TextRenderingHint>."},{"content":"An exception could occur or the image may not render correctly.","pos":[321,384]}]},{"pos":[618072,618149],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Text.TextRenderingHint\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.Text.TextRenderingHint\"></xref> values."},{"pos":[618544,618656],"content":"Gets or sets a copy of the geometric world transformation for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a copy of the geometric world transformation for this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[618669,619367],"content":"GDI+ uses three coordinate spaces: world, page, and device. World coordinates are the coordinates used to model a particular graphic world and are the coordinates you pass to methods in the .NET Framework. Page coordinates refer to the coordinate system used by a drawing surface, such as a form or a control. Device coordinates are the coordinates used by the physical device being drawn on, such as a screen or a printer. The Transform property represents the world transformation, which maps world coordinates to page coordinates.       Because the matrix returned and by the Transform property is a copy of the geometric transform, you should dispose of the matrix when you no longer need it.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"GDI+ uses three coordinate spaces: world, page, and device. World coordinates are the coordinates used to model a particular graphic world and are the coordinates you pass to methods in the .NET Framework. Page coordinates refer to the coordinate system used by a drawing surface, such as a form or a control. Device coordinates are the coordinates used by the physical device being drawn on, such as a screen or a printer. The Transform property represents the world transformation, which maps world coordinates to page coordinates.       Because the matrix returned and by the Transform property is a copy of the geometric transform, you should dispose of the matrix when you no longer need it.","pos":[0,696],"nodes":[{"content":"GDI+ uses three coordinate spaces: world, page, and device.","pos":[0,59]},{"content":"World coordinates are the coordinates used to model a particular graphic world and are the coordinates you pass to methods in the .NET Framework.","pos":[60,205]},{"content":"Page coordinates refer to the coordinate system used by a drawing surface, such as a form or a control.","pos":[206,309]},{"content":"Device coordinates are the coordinates used by the physical device being drawn on, such as a screen or a printer.","pos":[310,423]},{"content":"The Transform property represents the world transformation, which maps world coordinates to page coordinates.","pos":[424,533]},{"content":"Because the matrix returned and by the Transform property is a copy of the geometric transform, you should dispose of the matrix when you no longer need it.","pos":[540,696]}]}]},{"pos":[619530,619702],"content":"A copy of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the geometric world transformation for this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A copy of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that represents the geometric world transformation for this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[620452,620621],"content":"Transforms an array of points from one coordinate space to another using the current world and page transformations of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Transforms an array of points from one coordinate space to another using the current world and page transformations of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[622095,622231],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the destination coordinate space.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"></xref> enumeration that specifies the destination coordinate space."},{"pos":[622323,622454],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the source coordinate space.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"></xref> enumeration that specifies the source coordinate space."},{"pos":[622523,622630],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Point\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represents the points to transformation.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transformation."},{"pos":[623391,623560],"content":"Transforms an array of points from one coordinate space to another using the current world and page transformations of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Transforms an array of points from one coordinate space to another using the current world and page transformations of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[625027,625163],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the destination coordinate space.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"></xref> enumeration that specifies the destination coordinate space."},{"pos":[625255,625386],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the source coordinate space.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"></xref> enumeration that specifies the source coordinate space."},{"pos":[625456,625558],"content":"Array of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.PointF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures that represent the points to transform.","needQuote":true,"needEscape":true,"source":"Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points to transform."},{"pos":[626062,626209],"content":"Translates the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by specified amounts in the horizontal and vertical directions.","needQuote":true,"needEscape":true,"source":"Translates the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> by specified amounts in the horizontal and vertical directions."},{"pos":[627293,627329],"content":"The x-coordinate of the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the translation.","pos":[0,36]}]},{"pos":[627387,627423],"content":"The y-coordinate of the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the translation.","pos":[0,36]}]},{"pos":[627935,628082],"content":"Translates the clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by specified amounts in the horizontal and vertical directions.","needQuote":true,"needEscape":true,"source":"Translates the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> by specified amounts in the horizontal and vertical directions."},{"pos":[629177,629213],"content":"The x-coordinate of the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the translation.","pos":[0,36]}]},{"pos":[629272,629308],"content":"The y-coordinate of the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the translation.","pos":[0,36]}]},{"pos":[629845,630011],"content":"Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[630023,630345],"content":"The origin is typically the upper-left-hand corner of the drawing surface.  The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the `dx` and `dy` parameters. This method applies the translation by prepending the translation matrix to the transformation matrix.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The origin is typically the upper-left-hand corner of the drawing surface.","pos":[0,74]},{"content":"The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the <ph id=\"ph1\">`dx`</ph> and <ph id=\"ph2\">`dy`</ph> parameters.","pos":[76,219],"source":"  The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the `dx` and `dy` parameters."},{"content":"This method applies the translation by prepending the translation matrix to the transformation matrix.","pos":[220,322]}]},{"pos":[631636,631672],"content":"The x-coordinate of the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the translation.","pos":[0,36]}]},{"pos":[631731,631767],"content":"The y-coordinate of the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the translation.","pos":[0,36]}]},{"pos":[632419,632606],"content":"Changes the origin of the coordinate system by applying the specified translation to the transformation matrix of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the specified order.","needQuote":true,"needEscape":true,"source":"Changes the origin of the coordinate system by applying the specified translation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> in the specified order."},{"pos":[632618,632919],"content":"The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the `dx` and `dy` parameters. This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the translation matrix according to the `order` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the <ph id=\"ph1\">`dx`</ph> and <ph id=\"ph2\">`dy`</ph> parameters.","pos":[0,143],"source":"The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the `dx` and `dy` parameters."},{"content":"This method prepends or appends the transformation matrix of the &lt;xref:System.Drawing.Graphics&gt; by the translation matrix according to the <ph id=\"ph1\">`order`</ph> parameter.","pos":[144,301],"source":" This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the translation matrix according to the `order` parameter."}]},{"pos":[634031,634067],"content":"The x-coordinate of the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the translation.","pos":[0,36]}]},{"pos":[634126,634162],"content":"The y-coordinate of the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the translation.","pos":[0,36]}]},{"pos":[634247,634424],"content":"Member of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies whether the translation is prepended or appended to the transformation matrix.","needQuote":true,"needEscape":true,"source":"Member of the <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> enumeration that specifies whether the translation is prepended or appended to the transformation matrix."},{"pos":[634860,634972],"content":"Gets the bounding rectangle of the visible clipping region of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the bounding rectangle of the visible clipping region of this <xref href=\"System.Drawing.Graphics\"></xref>."},{"pos":[634985,635433],"content":"The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.       The visible clipping region is the intersection of the clipping region of this <xref:System.Drawing.Graphics> and the clipping region of the window.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.       The visible clipping region is the intersection of the clipping region of this <xref:System.Drawing.Graphics> and the clipping region of the window.","pos":[0,446],"nodes":[{"content":"The unit for resulting rectangle is designated by the &lt;xref:System.Drawing.Graphics.PageUnit%2A&gt; property.","pos":[0,106],"source":"The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property."},{"content":"The default unit is pixels.","pos":[107,134]},{"content":"A &lt;xref:System.Drawing.Graphics&gt; is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.","pos":[135,291],"source":" A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control."},{"content":"The visible clipping region is the intersection of the clipping region of this &lt;xref:System.Drawing.Graphics&gt; and the clipping region of the window.","pos":[298,446],"source":"       The visible clipping region is the intersection of the clipping region of this <xref:System.Drawing.Graphics> and the clipping region of the window."}]}]},{"pos":[635587,635768],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.RectangleF\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents a bounding rectangle for the visible clipping region of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents a bounding rectangle for the visible clipping region of this <xref href=\"System.Drawing.Graphics\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Drawing.Graphics\n  id: Graphics\n  children:\n  - System.Drawing.Graphics.AddMetafileComment(System.Byte[])\n  - System.Drawing.Graphics.BeginContainer\n  - System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.Clear(System.Drawing.Color)\n  - System.Drawing.Graphics.Clip\n  - System.Drawing.Graphics.ClipBounds\n  - System.Drawing.Graphics.CompositingMode\n  - System.Drawing.Graphics.CompositingQuality\n  - System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)\n  - System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)\n  - System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)\n  - System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)\n  - System.Drawing.Graphics.Dispose\n  - System.Drawing.Graphics.DpiX\n  - System.Drawing.Graphics.DpiY\n  - System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)\n  - System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)\n  - System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])\n  - System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])\n  - System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])\n  - System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])\n  - System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])\n  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])\n  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)\n  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)\n  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)\n  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)\n  - System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)\n  - System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)\n  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)\n  - System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)\n  - System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)\n  - System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)\n  - System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])\n  - System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])\n  - System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)\n  - System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])\n  - System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])\n  - System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])\n  - System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])\n  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)\n  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)\n  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)\n  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)\n  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)\n  - System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  - System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)\n  - System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)\n  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])\n  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])\n  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)\n  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)\n  - System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)\n  - System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)\n  - System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)\n  - System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])\n  - System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])\n  - System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)\n  - System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)\n  - System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)\n  - System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])\n  - System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])\n  - System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)\n  - System.Drawing.Graphics.Finalize\n  - System.Drawing.Graphics.Flush\n  - System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)\n  - System.Drawing.Graphics.FromHdc(System.IntPtr)\n  - System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)\n  - System.Drawing.Graphics.FromHdcInternal(System.IntPtr)\n  - System.Drawing.Graphics.FromHwnd(System.IntPtr)\n  - System.Drawing.Graphics.FromHwndInternal(System.IntPtr)\n  - System.Drawing.Graphics.FromImage(System.Drawing.Image)\n  - System.Drawing.Graphics.GetContextInfo\n  - System.Drawing.Graphics.GetHalftonePalette\n  - System.Drawing.Graphics.GetHdc\n  - System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)\n  - System.Drawing.Graphics.InterpolationMode\n  - System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)\n  - System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)\n  - System.Drawing.Graphics.IntersectClip(System.Drawing.Region)\n  - System.Drawing.Graphics.IsClipEmpty\n  - System.Drawing.Graphics.IsVisible(System.Drawing.Point)\n  - System.Drawing.Graphics.IsVisible(System.Drawing.PointF)\n  - System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)\n  - System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)\n  - System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)\n  - System.Drawing.Graphics.IsVisible(System.Single,System.Single)\n  - System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)\n  - System.Drawing.Graphics.IsVisibleClipEmpty\n  - System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)\n  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)\n  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)\n  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)\n  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)\n  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)\n  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)\n  - System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)\n  - System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Graphics.PageScale\n  - System.Drawing.Graphics.PageUnit\n  - System.Drawing.Graphics.PixelOffsetMode\n  - System.Drawing.Graphics.ReleaseHdc\n  - System.Drawing.Graphics.ReleaseHdc(System.IntPtr)\n  - System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)\n  - System.Drawing.Graphics.RenderingOrigin\n  - System.Drawing.Graphics.ResetClip\n  - System.Drawing.Graphics.ResetTransform\n  - System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)\n  - System.Drawing.Graphics.RotateTransform(System.Single)\n  - System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Graphics.Save\n  - System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)\n  - System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)\n  - System.Drawing.Graphics.SetClip(System.Drawing.Graphics)\n  - System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)\n  - System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)\n  - System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)\n  - System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)\n  - System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)\n  - System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)\n  - System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)\n  - System.Drawing.Graphics.SmoothingMode\n  - System.Drawing.Graphics.TextContrast\n  - System.Drawing.Graphics.TextRenderingHint\n  - System.Drawing.Graphics.Transform\n  - System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])\n  - System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])\n  - System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)\n  - System.Drawing.Graphics.TranslateClip(System.Single,System.Single)\n  - System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)\n  - System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Graphics.VisibleClipBounds\n  langs:\n  - csharp\n  name: Graphics\n  nameWithType: Graphics\n  fullName: System.Drawing.Graphics\n  type: Class\n  summary: Encapsulates a [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] drawing surface. This class cannot be inherited.\n  remarks: \"The Graphics class provides methods for drawing objects to the display device. A Graphics is associated with a specific device context.  \\n  \\n You can obtain a Graphics object by calling the <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=fullName> method on an object that inherits from <xref:System.Windows.Forms.Control?displayProperty=fullName>, or by handling a control's <xref:System.Windows.Forms.Control.Paint?displayProperty=fullName> event and accessing the <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> property of the <xref:System.Windows.Forms.PaintEventArgs?displayProperty=fullName> class. You can also create a Graphics object from an image by using the <xref:System.Drawing.Graphics.FromImage%2A> method. For more information about creating a Graphics object, see [How to: Create Graphics Objects for Drawing](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You can draw many different shapes and lines by using a Graphics object. For more information about how to draw lines and shapes, see the specific `Draw`*GraphicalElement* method for the line or shape you want to draw. These methods include <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, and <xref:System.Drawing.Graphics.DrawRectangle%2A>. For more information about how to draw lines and shapes, see [Using a Pen to Draw Lines and Shapes](~/add/includes/ajax-current-ext-md.md) and [Using a Brush to Fill Shapes](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You can also draw images and icons by using the <xref:System.Drawing.Graphics.DrawImage%2A> and <xref:System.Drawing.Graphics.DrawIcon%2A> methods, respectively. To perform a bit-block transfer of color data from the screen to the drawing surface of the Graphics object, see <xref:System.Drawing.Graphics.CopyFromScreen%2A>. For more information about how to draw images with a Graphics object, see [Working with Images, Bitmaps, Icons, and Metafiles](~/add/includes/ajax-current-ext-md.md).  \\n  \\n In addition, you can manipulate the coordinate system used by the Graphics object. For more information on the coordinate system and how to manipulate it, see [Coordinate Systems and Transformations](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example is designed for use with Windows Forms and requires a <xref:System.Windows.Forms.PaintEventArgs> object. The <xref:System.Windows.Forms.PaintEventArgs> object is named `e` and is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file. The file is named SampImag.jpg and is located in the folder of the example.  \\n  \\n-   Creates a point at which to draw the upper-left corner of the image.  \\n  \\n-   Draws the unscaled image to the screen by using a Graphics object.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/add/codesnippet/cpp/t-system.drawing.graphics_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#40](~/add/codesnippet/csharp/t-system.drawing.graphics_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/add/codesnippet/visualbasic/t-system.drawing.graphics_1.vb)]\"\n  syntax:\n    content: 'public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Drawing.IDeviceContext\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.AddMetafileComment(System.Byte[])\n  id: AddMetafileComment(System.Byte[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: AddMetafileComment(Byte[])\n  nameWithType: Graphics.AddMetafileComment(Byte[])\n  fullName: System.Drawing.Graphics.AddMetafileComment(Byte[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Adds a comment to the current <xref href=\"System.Drawing.Imaging.Metafile\"></xref>.\n  remarks: This method is valid only if this <xref:System.Drawing.Graphics> is associated with a <xref:System.Drawing.Imaging.Metafile>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler, as well as `thisForm`, the <xref:System.Windows.Forms.Form> for the example. The code performs the following actions:  \\n  \\n-   Creates a temporary <xref:System.Drawing.Graphics> for creating the metafile and gets an `hdc`, a handle to its device context.  \\n  \\n-   Creates a new metafile using the `hdc`.  \\n  \\n-   Creates a <xref:System.Drawing.Graphics> for display of the metafile from the <xref:System.Drawing.Imaging.Metafile>.  \\n  \\n-   Draws a rectangle to the metafile.  \\n  \\n-   Adds a comment to the metafile.  \\n  \\n-   Disposes the <xref:System.Drawing.Graphics> for the metafile-which closes the metafile.  \\n  \\n-   Disposes the metafile.  \\n  \\n-   Releases the temporary `hdc`.  \\n  \\n-   Disposes the temporary <xref:System.Drawing.Graphics>.  \\n  \\n-   Creates a second metafile from the previously created file.  \\n  \\n-   Draws the metafile to the screen.  \\n  \\n-   Disposes the metafile.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/add/codesnippet/cpp/m-system.drawing.graphic_35_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#1](~/add/codesnippet/csharp/m-system.drawing.graphic_35_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/add/codesnippet/visualbasic/m-system.drawing.graphic_35_1.vb)]\"\n  syntax:\n    content: public void AddMetafileComment (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Array of bytes that contains the comment.\n  overload: System.Drawing.Graphics.AddMetafileComment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.BeginContainer\n  id: BeginContainer\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: BeginContainer()\n  nameWithType: Graphics.BeginContainer()\n  fullName: System.Drawing.Graphics.BeginContainer()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Saves a graphics container with the current state of this <xref href=\"System.Drawing.Graphics\"></xref> and opens and uses a new graphics container.\n  remarks: \"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.  \\n  \\n When you call the BeginContainer method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The BeginContainer method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the BeginContainer method call.  \\n  \\n Containers can be nested; that is, you can call the BeginContainer method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the BeginContainer method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the BeginContainer method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that BeginContainer method call is removed from the stack, and all information blocks placed on that stack after that BeginContainer method call are also removed.  \\n  \\n Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the BeginContainer method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a BeginContainer method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.  \\n  \\n When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the BeginContainer method) after the corresponding call to the BeginContainer method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the BeginContainer method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.  \\n  \\n The graphics state established by the BeginContainer method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Opens a new graphics container and saves the old container.  \\n  \\n-   Translates the world coordinates in the container.  \\n  \\n-   Fills a red rectangle in the (translated coordinates of the) new container.  \\n  \\n-   Closes the new container and restores the saved container.  \\n  \\n-   Fills a green rectangle (to the untranslated coordinates) of the saved container.  \\n  \\n The result is a green rectangle that overlies a red rectangle of the same size.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/add/codesnippet/cpp/m-system.drawing.graphic_7_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#2](~/add/codesnippet/csharp/m-system.drawing.graphic_7_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/add/codesnippet/visualbasic/m-system.drawing.graphic_7_1.vb)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();\n    parameters: []\n    return:\n      type: System.Drawing.Drawing2D.GraphicsContainer\n      description: This method returns a <xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"></xref> that represents the state of this <xref href=\"System.Drawing.Graphics\"></xref> at the time of the method call.\n  overload: System.Drawing.Graphics.BeginContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  id: BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: BeginContainer(Rectangle,Rectangle,GraphicsUnit)\n  nameWithType: Graphics.BeginContainer(Rectangle,Rectangle,GraphicsUnit)\n  fullName: System.Drawing.Graphics.BeginContainer(Rectangle,Rectangle,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Saves a graphics container with the current state of this <xref href=\"System.Drawing.Graphics\"></xref> and opens and uses a new graphics container with the specified scale transformation.\n  remarks: \"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.  \\n  \\n When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \\n  \\n Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.  \\n  \\n Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.  \\n  \\n When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.  \\n  \\n This method specifies a scale transformation for the new graphics container with the `dstrect` and `srcrect` parameters. The scale is equal to the transformation that, when applied to `srcrect`, results in `dstrect`.  \\n  \\n The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates two rectangles to specify a scale transformation for the new container.  \\n  \\n-   Opens the new graphics container and saves the old container.  \\n  \\n-   Fills a red rectangle in the (scaled coordinates of the) new container.  \\n  \\n-   Closes the new container and restores the saved container.  \\n  \\n-   Fills a green rectangle (to the unscaled coordinates) of the saved container.  \\n  \\n The result is a green rectangle that overlies a smaller red rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/add/codesnippet/cpp/87d94b02-87d7-4889-aab2-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#3](~/add/codesnippet/csharp/87d94b02-87d7-4889-aab2-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/add/codesnippet/visualbasic/87d94b02-87d7-4889-aab2-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);\n    parameters:\n    - id: dstrect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that, together with the `srcrect` parameter, specifies a scale transformation for the container.\n    - id: srcrect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that, together with the `dstrect` parameter, specifies a scale transformation for the container.\n    - id: unit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the unit of measure for the container.\n    return:\n      type: System.Drawing.Drawing2D.GraphicsContainer\n      description: This method returns a <xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"></xref> that represents the state of this <xref href=\"System.Drawing.Graphics\"></xref> at the time of the method call.\n  overload: System.Drawing.Graphics.BeginContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  id: BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: BeginContainer(RectangleF,RectangleF,GraphicsUnit)\n  nameWithType: Graphics.BeginContainer(RectangleF,RectangleF,GraphicsUnit)\n  fullName: System.Drawing.Graphics.BeginContainer(RectangleF,RectangleF,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Saves a graphics container with the current state of this <xref href=\"System.Drawing.Graphics\"></xref> and opens and uses a new graphics container with the specified scale transformation.\n  remarks: \"Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.  \\n  \\n When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \\n  \\n Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.  \\n  \\n Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.  \\n  \\n When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the `Save` method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.  \\n  \\n This method specifies a scale transformation for the new graphics container with the `dstrect` and `srcrect` parameters. The scale is equal to the transformation that, when applied to `srcrect`, results in `dstrect`.  \\n  \\n The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates two rectangles to specify a scale transformation for the new container.  \\n  \\n-   Opens the new graphics container and saves the old container.  \\n  \\n-   Fills a red rectangle in the (scaled coordinates of the) new container.  \\n  \\n-   Closes the new container and restores the saved container.  \\n  \\n-   Fills a green rectangle (to the unscaled coordinates) of the saved container.  \\n  \\n The result is a green rectangle that overlies a smaller red rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/add/codesnippet/cpp/5890f59d-213c-41f2-9949-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#4](~/add/codesnippet/csharp/5890f59d-213c-41f2-9949-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/add/codesnippet/visualbasic/5890f59d-213c-41f2-9949-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);\n    parameters:\n    - id: dstrect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that, together with the `srcrect` parameter, specifies a scale transformation for the new graphics container.\n    - id: srcrect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that, together with the `dstrect` parameter, specifies a scale transformation for the new graphics container.\n    - id: unit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the unit of measure for the container.\n    return:\n      type: System.Drawing.Drawing2D.GraphicsContainer\n      description: This method returns a <xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"></xref> that represents the state of this <xref href=\"System.Drawing.Graphics\"></xref> at the time of the method call.\n  overload: System.Drawing.Graphics.BeginContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Clear(System.Drawing.Color)\n  id: Clear(System.Drawing.Color)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Clear(Color)\n  nameWithType: Graphics.Clear(Color)\n  fullName: System.Drawing.Graphics.Clear(Color)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Clears the entire drawing surface and fills it with the specified background color.\n  remarks: The Clear method clears the state of the graphics object and should not be called when the graphics object cannot be updated. For example, if the Clear method is called on a secure desktop in a terminal server session, an <xref:System.Runtime.InteropServices.ExternalException> may occur, leaving the <xref:System.Drawing.Graphics> object in an inconsistent state.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code clears the drawing surface of the <xref:System.Drawing.Graphics> and sets the background color to the system-defined teal color.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/add/codesnippet/cpp/m-system.drawing.graphic_11_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#5](~/add/codesnippet/csharp/m-system.drawing.graphic_11_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/add/codesnippet/visualbasic/m-system.drawing.graphic_11_1.vb)]\"\n  syntax:\n    content: public void Clear (System.Drawing.Color color);\n    parameters:\n    - id: color\n      type: System.Drawing.Color\n      description: <xref href=\"System.Drawing.Color\"></xref> structure that represents the background color of the drawing surface.\n  overload: System.Drawing.Graphics.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Clip\n  id: Clip\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Clip\n  nameWithType: Graphics.Clip\n  fullName: System.Drawing.Graphics.Clip\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets a <xref href=\"System.Drawing.Region\"></xref> that limits the drawing region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: Modifying the <xref:System.Drawing.Region> object returned by the Clip property does not affect subsequent drawing with the <xref:System.Drawing.Graphics> object. To change the clip region, replace the Clip property value with a new <xref:System.Drawing.Region> object. To determine whether the clipping region is infinite, retrieve the Clip property and call its <xref:System.Drawing.Region.IsInfinite%2A> method.\n  example:\n  - \"The following code example demonstrates the use of the Clip property. This example is designed to be used with Windows Forms. Paste the code into a form and call the `SetAndFillClip` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cpp[System.Drawing.GraphicsProperties#4](~/add/codesnippet/cpp/p-system.drawing.graphic_6_1.cpp)]\\n [!code-vb[System.Drawing.GraphicsProperties#4](~/add/codesnippet/visualbasic/p-system.drawing.graphic_6_1.vb)]\\n [!code-cs[System.Drawing.GraphicsProperties#4](~/add/codesnippet/csharp/p-system.drawing.graphic_6_1.cs)]\"\n  syntax:\n    content: public System.Drawing.Region Clip { get; set; }\n    return:\n      type: System.Drawing.Region\n      description: A <xref href=\"System.Drawing.Region\"></xref> that limits the portion of this <xref href=\"System.Drawing.Graphics\"></xref> that is currently available for drawing.\n  overload: System.Drawing.Graphics.Clip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ClipBounds\n  id: ClipBounds\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ClipBounds\n  nameWithType: Graphics.ClipBounds\n  fullName: System.Drawing.Graphics.ClipBounds\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets a <xref href=\"System.Drawing.RectangleF\"></xref> structure that bounds the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.  \\n  \\n If the clipping region is infinite, the ClipBounds property returns a meaningless large rectangle. To determine whether the clipping region is infinite, retrieve the <xref:System.Drawing.Graphics.Clip%2A> property and call its <xref:System.Drawing.Region.IsInfinite%2A> method.\"\n  syntax:\n    content: public System.Drawing.RectangleF ClipBounds { get; }\n    return:\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents a bounding rectangle for the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.ClipBounds*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.CompositingMode\n  id: CompositingMode\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: CompositingMode\n  nameWithType: Graphics.CompositingMode\n  fullName: System.Drawing.Graphics.CompositingMode\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets a value that specifies how composited images are drawn to this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels.  \\n  \\n> [!NOTE]\\n>  You should not use a CompositingMode property value of <xref:System.Drawing.Drawing2D.CompositingMode> when the <xref:System.Drawing.Graphics.TextRenderingHint%2A> property is set to <xref:System.Drawing.Text.TextRenderingHint>. An exception could occur or the image may not render correctly.\"\n  syntax:\n    content: public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.CompositingMode\n      description: This property specifies a member of the <xref href=\"System.Drawing.Drawing2D.CompositingMode\"></xref> enumeration. The default is <xref href=\"System.Drawing.Drawing2D.CompositingMode\"></xref>.\n  overload: System.Drawing.Graphics.CompositingMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.CompositingQuality\n  id: CompositingQuality\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: CompositingQuality\n  nameWithType: Graphics.CompositingQuality\n  fullName: System.Drawing.Graphics.CompositingQuality\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the rendering quality of composited images drawn to this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The compositing quality determines the rendering quality level of composited images.\n  syntax:\n    content: public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.CompositingQuality\n      description: This property specifies a member of the <xref href=\"System.Drawing.Drawing2D.CompositingQuality\"></xref> enumeration. The default is <xref href=\"System.Drawing.Drawing2D.CompositingQuality\"></xref>.\n  overload: System.Drawing.Graphics.CompositingQuality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)\n  id: CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: CopyFromScreen(Point,Point,Size)\n  nameWithType: Graphics.CopyFromScreen(Point,Point,Size)\n  fullName: System.Drawing.Graphics.CopyFromScreen(Point,Point,Size)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The CopyFromScreen methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter.\n  example:\n  - \"The following example demonstrates how to use the CopyFromScreen method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CopyPixels1` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/add/codesnippet/visualbasic/f034ccae-68c0-49a1-b18f-_1.vb)]\\n [!code-cs[System.Drawing.MiscWhidbeySnippets#4](~/add/codesnippet/csharp/f034ccae-68c0-49a1-b18f-_1.cs)]\"\n  syntax:\n    content: public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);\n    parameters:\n    - id: upperLeftSource\n      type: System.Drawing.Point\n      description: The point at the upper-left corner of the source rectangle.\n    - id: upperLeftDestination\n      type: System.Drawing.Point\n      description: The point at the upper-left corner of the destination rectangle.\n    - id: blockRegionSize\n      type: System.Drawing.Size\n      description: The size of the area to be transferred.\n  overload: System.Drawing.Graphics.CopyFromScreen*\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: The operation failed.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)\n  id: CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: CopyFromScreen(Point,Point,Size,CopyPixelOperation)\n  nameWithType: Graphics.CopyFromScreen(Point,Point,Size,CopyPixelOperation)\n  fullName: System.Drawing.Graphics.CopyFromScreen(Point,Point,Size,CopyPixelOperation)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. The `copyPixelOperation` parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.\n  example:\n  - \"The following example demonstrates how to use the CopyFromScreen method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CopyPixels2` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/add/codesnippet/visualbasic/4f8cba74-e878-4407-b71b-_1.vb)]\\n [!code-cs[System.Drawing.MiscWhidbeySnippets#5](~/add/codesnippet/csharp/4f8cba74-e878-4407-b71b-_1.cs)]\"\n  syntax:\n    content: public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);\n    parameters:\n    - id: upperLeftSource\n      type: System.Drawing.Point\n      description: The point at the upper-left corner of the source rectangle.\n    - id: upperLeftDestination\n      type: System.Drawing.Point\n      description: The point at the upper-left corner of the destination rectangle.\n    - id: blockRegionSize\n      type: System.Drawing.Size\n      description: The size of the area to be transferred.\n    - id: copyPixelOperation\n      type: System.Drawing.CopyPixelOperation\n      description: One of the <xref href=\"System.Drawing.CopyPixelOperation\"></xref> values.\n  overload: System.Drawing.Graphics.CopyFromScreen*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>copyPixelOperation</code> is not a member of <xref href=\"System.Drawing.CopyPixelOperation\"></xref>.\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: The operation failed.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)\n  id: CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: CopyFromScreen(Int32,Int32,Int32,Int32,Size)\n  nameWithType: Graphics.CopyFromScreen(Int32,Int32,Int32,Int32,Size)\n  fullName: System.Drawing.Graphics.CopyFromScreen(Int32,Int32,Int32,Int32,Size)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the CopyFromScreen methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Drawing.Graphics.CopyFromScreen%2A> for printing a copy of the current form.  \\n  \\n [!code-cs[System.Drawing.Graphics.CopyFromScreen#1](~/add/codesnippet/csharp/374af905-18c0-4d48-aa6c-_1.cs)]\\n [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/add/codesnippet/visualbasic/374af905-18c0-4d48-aa6c-_1.vb)]\"\n  syntax:\n    content: public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);\n    parameters:\n    - id: sourceX\n      type: System.Int32\n      description: The x-coordinate of the point at the upper-left corner of the source rectangle.\n    - id: sourceY\n      type: System.Int32\n      description: The y-coordinate of the point at the upper-left corner of the source rectangle.\n    - id: destinationX\n      type: System.Int32\n      description: The x-coordinate of the point at the upper-left corner of the destination rectangle.\n    - id: destinationY\n      type: System.Int32\n      description: The y-coordinate of the point at the upper-left corner of the destination rectangle.\n    - id: blockRegionSize\n      type: System.Drawing.Size\n      description: The size of the area to be transferred.\n  overload: System.Drawing.Graphics.CopyFromScreen*\n  exceptions:\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: The operation failed.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)\n  id: CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: CopyFromScreen(Int32,Int32,Int32,Int32,Size,CopyPixelOperation)\n  nameWithType: Graphics.CopyFromScreen(Int32,Int32,Int32,Int32,Size,CopyPixelOperation)\n  fullName: System.Drawing.Graphics.CopyFromScreen(Int32,Int32,Int32,Int32,Size,CopyPixelOperation)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. The `copyPixelOperation` parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.\n  example:\n  - \"The following example demonstrates how to use the CopyFromScreen method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CopyPixels4` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/add/codesnippet/visualbasic/f1d5c2c4-f05b-4fb9-a6ef-_1.vb)]\\n [!code-cs[System.Drawing.MiscWhidbeySnippets#7](~/add/codesnippet/csharp/f1d5c2c4-f05b-4fb9-a6ef-_1.cs)]\"\n  syntax:\n    content: public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);\n    parameters:\n    - id: sourceX\n      type: System.Int32\n      description: The x-coordinate of the point at the upper-left corner of the source rectangle.\n    - id: sourceY\n      type: System.Int32\n      description: The y-coordinate of the point at the upper-left corner of the source rectangle\n    - id: destinationX\n      type: System.Int32\n      description: The x-coordinate of the point at the upper-left corner of the destination rectangle.\n    - id: destinationY\n      type: System.Int32\n      description: The y-coordinate of the point at the upper-left corner of the destination rectangle.\n    - id: blockRegionSize\n      type: System.Drawing.Size\n      description: The size of the area to be transferred.\n    - id: copyPixelOperation\n      type: System.Drawing.CopyPixelOperation\n      description: One of the <xref href=\"System.Drawing.CopyPixelOperation\"></xref> values.\n  overload: System.Drawing.Graphics.CopyFromScreen*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>copyPixelOperation</code> is not a member of <xref href=\"System.Drawing.CopyPixelOperation\"></xref>.\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: The operation failed.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Dispose\n  id: Dispose\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Graphics.Dispose()\n  fullName: System.Drawing.Graphics.Dispose()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Releases all resources used by this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: Calling Dispose allows the resources used by this <xref:System.Drawing.Graphics> to be reallocated for other purposes.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an <xref:System.Drawing.Image> from a graphics file SampImag.jpg in the example directory.  \\n  \\n-   Creates a <xref:System.Drawing.Graphics> from the <xref:System.Drawing.Image>.  \\n  \\n-   Alters the image by filling a rectangle within it.  \\n  \\n-   Draws the <xref:System.Drawing.Image> to the screen.  \\n  \\n-   Releases the created <xref:System.Drawing.Graphics>.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/add/codesnippet/cpp/m-system.drawing.graphic_23_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#6](~/add/codesnippet/csharp/m-system.drawing.graphic_23_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.graphic_23_1.vb)]\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Drawing.Graphics.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DpiX\n  id: DpiX\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DpiX\n  nameWithType: Graphics.DpiX\n  fullName: System.Drawing.Graphics.DpiX\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets the horizontal resolution of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"For more information about creating high-resolution applications, see  \\n  \\n [High DPI](http://go.microsoft.com/fwlink/?LinkId=159804).\"\n  example:\n  - \"The following method shows the use of the DpiX and <xref:System.Drawing.Graphics.DpiY%2A> properties. This example is designed for use with a Windows Form. To run this example, paste it into a form that contains a <xref:System.Windows.Forms.ListBox> named listBox1 and call this method from the form's constructor.  \\n  \\n [!code-cs[System.Drawing.MiscExamples#4](~/add/codesnippet/csharp/p-system.drawing.graphic_5_1.cs)]\\n [!code-cpp[System.Drawing.MiscExamples#4](~/add/codesnippet/cpp/p-system.drawing.graphic_5_1.cpp)]\\n [!code-vb[System.Drawing.MiscExamples#4](~/add/codesnippet/visualbasic/p-system.drawing.graphic_5_1.vb)]\"\n  syntax:\n    content: public float DpiX { get; }\n    return:\n      type: System.Single\n      description: The value, in dots per inch, for the horizontal resolution supported by this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.DpiX*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DpiY\n  id: DpiY\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DpiY\n  nameWithType: Graphics.DpiY\n  fullName: System.Drawing.Graphics.DpiY\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets the vertical resolution of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"For more information about creating high-resolution applications, see  \\n  \\n [High DPI](http://go.microsoft.com/fwlink/?LinkId=159804).\"\n  example:\n  - \"The following method shows the use of the <xref:System.Drawing.Graphics.DpiX%2A> and DpiY properties. This example is designed for use with a Windows Form. To run this example, paste it into a form that contains a <xref:System.Windows.Forms.ListBox> named listBox1 and call this method from the form's constructor.  \\n  \\n [!code-cs[System.Drawing.MiscExamples#4](~/add/codesnippet/csharp/p-system.drawing.graphic_0_1.cs)]\\n [!code-cpp[System.Drawing.MiscExamples#4](~/add/codesnippet/cpp/p-system.drawing.graphic_0_1.cpp)]\\n [!code-vb[System.Drawing.MiscExamples#4](~/add/codesnippet/visualbasic/p-system.drawing.graphic_0_1.vb)]\"\n  syntax:\n    content: public float DpiY { get; }\n    return:\n      type: System.Single\n      description: The value, in dots per inch, for the vertical resolution supported by this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.DpiY*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)\n  id: DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawArc(Pen,Rectangle,Single,Single)\n  nameWithType: Graphics.DrawArc(Pen,Rectangle,Single,Single)\n  fullName: System.Drawing.Graphics.DrawArc(Pen,Rectangle,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws an arc representing a portion of an ellipse specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates a rectangle to bound an ellipse.  \\n  \\n-   Defines the start (45 degrees) and sweep (270 degrees) angles.  \\n  \\n-   Draws the elliptical arc to the screen.  \\n  \\n The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/add/codesnippet/cpp/6b29678d-50bf-4f47-b318-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#7](~/add/codesnippet/csharp/6b29678d-50bf-4f47-b318-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/add/codesnippet/visualbasic/6b29678d-50bf-4f47-b318-_1.vb)]\"\n  syntax:\n    content: public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the arc.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that defines the boundaries of the ellipse.\n    - id: startAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the x-axis to the starting point of the arc.\n    - id: sweepAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the `startAngle` parameter to ending point of the arc.\n  overload: System.Drawing.Graphics.DrawArc*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)\n  id: DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawArc(Pen,RectangleF,Single,Single)\n  nameWithType: Graphics.DrawArc(Pen,RectangleF,Single,Single)\n  fullName: System.Drawing.Graphics.DrawArc(Pen,RectangleF,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws an arc representing a portion of an ellipse specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure.\n  remarks: This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates a rectangle to bound an ellipse.  \\n  \\n-   Defines the start (45 degrees) and sweep (270 degrees) angles.  \\n  \\n-   Draws the elliptical arc to the screen.  \\n  \\n The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/add/codesnippet/cpp/f55c55b1-d88f-4896-ae59-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#8](~/add/codesnippet/csharp/f55c55b1-d88f-4896-ae59-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/add/codesnippet/visualbasic/f55c55b1-d88f-4896-ae59-_1.vb)]\"\n  syntax:\n    content: public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the arc.\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that defines the boundaries of the ellipse.\n    - id: startAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the x-axis to the starting point of the arc.\n    - id: sweepAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the `startAngle` parameter to ending point of the arc.\n  overload: System.Drawing.Graphics.DrawArc*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawArc(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawArc(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawArc(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.\n  remarks: This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the position and size of a rectangle to bound an ellipse.  \\n  \\n-   Defines the start (45 degrees) and sweep (270 degrees) angles.  \\n  \\n-   Draws the elliptical arc to the screen.  \\n  \\n The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/add/codesnippet/cpp/3589ea58-fd85-4ba4-9361-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#9](~/add/codesnippet/csharp/3589ea58-fd85-4ba4-9361-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/add/codesnippet/visualbasic/3589ea58-fd85-4ba4-9361-_1.vb)]\"\n  syntax:\n    content: public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the arc.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.\n    - id: width\n      type: System.Int32\n      description: Width of the rectangle that defines the ellipse.\n    - id: height\n      type: System.Int32\n      description: Height of the rectangle that defines the ellipse.\n    - id: startAngle\n      type: System.Int32\n      description: Angle in degrees measured clockwise from the x-axis to the starting point of the arc.\n    - id: sweepAngle\n      type: System.Int32\n      description: Angle in degrees measured clockwise from the `startAngle` parameter to ending point of the arc.\n  overload: System.Drawing.Graphics.DrawArc*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rects</code> is a zero-length array.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  id: DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawArc(Pen,Single,Single,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawArc(Pen,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawArc(Pen,Single,Single,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.\n  remarks: This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the position and size of a rectangle to bound an ellipse.  \\n  \\n-   Defines the start (45 degrees) and sweep (270 degrees) angles.  \\n  \\n-   Draws the elliptical arc to the screen.  \\n  \\n The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/add/codesnippet/cpp/066bd569-1a5d-4fa1-9898-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#10](~/add/codesnippet/csharp/066bd569-1a5d-4fa1-9898-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/add/codesnippet/visualbasic/066bd569-1a5d-4fa1-9898-_1.vb)]\"\n  syntax:\n    content: public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the arc.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.\n    - id: width\n      type: System.Single\n      description: Width of the rectangle that defines the ellipse.\n    - id: height\n      type: System.Single\n      description: Height of the rectangle that defines the ellipse.\n    - id: startAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the x-axis to the starting point of the arc.\n    - id: sweepAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the `startAngle` parameter to ending point of the arc.\n  overload: System.Drawing.Graphics.DrawArc*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)\n  id: DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawBezier(Pen,Point,Point,Point,Point)\n  nameWithType: Graphics.DrawBezier(Pen,Point,Point,Point,Point)\n  fullName: System.Drawing.Graphics.DrawBezier(Pen,Point,Point,Point,Point)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a Bézier spline defined by four <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: The Bézier curve is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the start, end, and two control points for the curve.  \\n  \\n-   Draws the Bézier curve to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/add/codesnippet/cpp/64d14328-9929-49d1-880b-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#11](~/add/codesnippet/csharp/64d14328-9929-49d1-880b-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/add/codesnippet/visualbasic/64d14328-9929-49d1-880b-_1.vb)]\"\n  syntax:\n    content: public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> structure that determines the color, width, and style of the curve.\n    - id: pt1\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure that represents the starting point of the curve.\n    - id: pt2\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure that represents the first control point for the curve.\n    - id: pt3\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure that represents the second control point for the curve.\n    - id: pt4\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure that represents the ending point of the curve.\n  overload: System.Drawing.Graphics.DrawBezier*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)\n  id: DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawBezier(Pen,PointF,PointF,PointF,PointF)\n  nameWithType: Graphics.DrawBezier(Pen,PointF,PointF,PointF,PointF)\n  fullName: System.Drawing.Graphics.DrawBezier(Pen,PointF,PointF,PointF,PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a Bézier spline defined by four <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the start, end, and two control points for the curve.  \\n  \\n-   Draws the Bézier curve to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/add/codesnippet/cpp/f50f06d6-012a-49b5-bdea-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#12](~/add/codesnippet/csharp/f50f06d6-012a-49b5-bdea-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/add/codesnippet/visualbasic/f50f06d6-012a-49b5-bdea-_1.vb)]\"\n  syntax:\n    content: public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: pt1\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that represents the starting point of the curve.\n    - id: pt2\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that represents the first control point for the curve.\n    - id: pt3\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that represents the second control point for the curve.\n    - id: pt4\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that represents the ending point of the curve.\n  overload: System.Drawing.Graphics.DrawBezier*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  id: DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawBezier(Pen,Single,Single,Single,Single,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawBezier(Pen,Single,Single,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawBezier(Pen,Single,Single,Single,Single,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a Bézier spline defined by four ordered pairs of coordinates that represent points.\n  remarks: The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the coordinates of the start, end, and two control points for the curve.  \\n  \\n-   Draws the Bézier curve to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/add/codesnippet/cpp/baa8b588-7355-4d59-ad6c-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#13](~/add/codesnippet/csharp/baa8b588-7355-4d59-ad6c-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/add/codesnippet/visualbasic/baa8b588-7355-4d59-ad6c-_1.vb)]\"\n  syntax:\n    content: public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: x1\n      type: System.Single\n      description: The x-coordinate of the starting point of the curve.\n    - id: y1\n      type: System.Single\n      description: The y-coordinate of the starting point of the curve.\n    - id: x2\n      type: System.Single\n      description: The x-coordinate of the first control point of the curve.\n    - id: y2\n      type: System.Single\n      description: The y-coordinate of the first control point of the curve.\n    - id: x3\n      type: System.Single\n      description: The x-coordinate of the second control point of the curve.\n    - id: y3\n      type: System.Single\n      description: The y-coordinate of the second control point of the curve.\n    - id: x4\n      type: System.Single\n      description: The x-coordinate of the ending point of the curve.\n    - id: y4\n      type: System.Single\n      description: The y-coordinate of the ending point of the curve.\n  overload: System.Drawing.Graphics.DrawBezier*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])\n  id: DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawBeziers(Pen,Point[])\n  nameWithType: Graphics.DrawBeziers(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawBeziers(Pen,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a series of Bézier splines from an array of <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: 'The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier spline is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.'\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the start, end, and two control points for a first curve and endpoint and two control points for a second curve.  \\n  \\n-   Draws the successive Bézier curves to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/add/codesnippet/cpp/m-system.drawing.graphic_46_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#14](~/add/codesnippet/csharp/m-system.drawing.graphic_46_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/add/codesnippet/visualbasic/m-system.drawing.graphic_46_1.vb)]\"\n  syntax:\n    content: public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.\n  overload: System.Drawing.Graphics.DrawBeziers*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])\n  id: DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawBeziers(Pen,PointF[])\n  nameWithType: Graphics.DrawBeziers(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawBeziers(Pen,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a series of Bézier splines from an array of <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: 'The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier curve is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.'\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the start, end, and two control points for a first curve and endpoint and two control points for a second curve.  \\n  \\n-   Draws the successive Bézier curves to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/add/codesnippet/cpp/6d8590a5-9b64-4d74-acab-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#15](~/add/codesnippet/csharp/6d8590a5-9b64-4d74-acab-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/add/codesnippet/visualbasic/6d8590a5-9b64-4d74-acab-_1.vb)]\"\n  syntax:\n    content: public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.\n  overload: System.Drawing.Graphics.DrawBeziers*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])\n  id: DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawClosedCurve(Pen,Point[])\n  nameWithType: Graphics.DrawClosedCurve(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawClosedCurve(Pen,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a closed cardinal spline defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: \"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define a curve.  \\n  \\n-   Draws seven red straight lines between the seven points to form a closed polygon.  \\n  \\n-   Draws a green closed curve through the seven points.  \\n  \\n The method uses a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/add/codesnippet/cpp/fec8cc4c-2307-4c6d-92d0-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#16](~/add/codesnippet/csharp/fec8cc4c-2307-4c6d-92d0-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/add/codesnippet/visualbasic/fec8cc4c-2307-4c6d-92d0-_1.vb)]\"\n  syntax:\n    content: public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline.\n  overload: System.Drawing.Graphics.DrawClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])\n  id: DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawClosedCurve(Pen,PointF[])\n  nameWithType: Graphics.DrawClosedCurve(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawClosedCurve(Pen,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a closed cardinal spline defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: \"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.PointF> structures.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define a curve.  \\n  \\n-   Draws seven red straight lines between the seven points to form a closed polygon.  \\n  \\n-   Draws a green closed curve through the seven points.  \\n  \\n The method uses a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/add/codesnippet/cpp/67309f1b-9d1b-4f3b-a3af-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#18](~/add/codesnippet/csharp/67309f1b-9d1b-4f3b-a3af-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/add/codesnippet/visualbasic/67309f1b-9d1b-4f3b-a3af-_1.vb)]\"\n  syntax:\n    content: public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline.\n  overload: System.Drawing.Graphics.DrawClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)\n  id: DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawClosedCurve(Pen,Point[],Single,FillMode)\n  nameWithType: Graphics.DrawClosedCurve(Pen,Point[],Single,FillMode)\n  fullName: System.Drawing.Graphics.DrawClosedCurve(Pen,Point[],Single,FillMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a closed cardinal spline defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures using a specified tension.\n  remarks: \"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \\n  \\n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define the curve.  \\n  \\n-   Draws seven red straight lines between the seven points to form a polygon.  \\n  \\n-   Creates tension and fill mode settings.  \\n  \\n-   Draws a green closed curve through the seven points.  \\n  \\n The method uses a tension of 1.0 and sets the fill mode to `FillMode.Alternate`.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/add/codesnippet/cpp/cc1f225a-0c69-45b9-a725-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#17](~/add/codesnippet/csharp/cc1f225a-0c69-45b9-a725-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/add/codesnippet/visualbasic/cc1f225a-0c69-45b9-a725-_1.vb)]\"\n  syntax:\n    content: public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline.\n    - id: tension\n      type: System.Single\n      description: Value greater than or equal to 0.0F that specifies the tension of the curve.\n    - id: fillmode\n      type: System.Drawing.Drawing2D.FillMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled. This parameter is required but ignored.\n  overload: System.Drawing.Graphics.DrawClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)\n  id: DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawClosedCurve(Pen,PointF[],Single,FillMode)\n  nameWithType: Graphics.DrawClosedCurve(Pen,PointF[],Single,FillMode)\n  fullName: System.Drawing.Graphics.DrawClosedCurve(Pen,PointF[],Single,FillMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a closed cardinal spline defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures using a specified tension.\n  remarks: \"This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.PointF> structures.  \\n  \\n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define the curve.  \\n  \\n-   Draws seven red straight lines between the seven points to form a polygon.  \\n  \\n-   Creates tension and fill mode settings.  \\n  \\n-   Draws a green closed curve through the seven points.  \\n  \\n The method uses a tension of 1.0 and sets the fill mode to `FillMode.Alternate`.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/add/codesnippet/cpp/0472ed0c-ecfc-4bdd-b3f2-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#19](~/add/codesnippet/csharp/0472ed0c-ecfc-4bdd-b3f2-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/add/codesnippet/visualbasic/0472ed0c-ecfc-4bdd-b3f2-_1.vb)]\"\n  syntax:\n    content: public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline.\n    - id: tension\n      type: System.Single\n      description: Value greater than or equal to 0.0F that specifies the tension of the curve.\n    - id: fillmode\n      type: System.Drawing.Drawing2D.FillMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled. This parameter is required but is ignored.\n  overload: System.Drawing.Graphics.DrawClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])\n  id: DrawCurve(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawCurve(Pen,Point[])\n  nameWithType: Graphics.DrawCurve(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: \"This method draws a cardinal spline that passes through each point in the array.  \\n  \\n The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define a curve.  \\n  \\n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \\n  \\n-   Draws an open green curve through the seven points.  \\n  \\n The method uses a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/add/codesnippet/cpp/m-system.drawing.graphic_47_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#20](~/add/codesnippet/csharp/m-system.drawing.graphic_47_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/add/codesnippet/visualbasic/m-system.drawing.graphic_47_1.vb)]\"\n  syntax:\n    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and height of the curve.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline.\n  overload: System.Drawing.Graphics.DrawCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])\n  id: DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawCurve(Pen,PointF[])\n  nameWithType: Graphics.DrawCurve(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: \"This method draws a cardinal spline that passes through each point in the array.  \\n  \\n The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define a curve.  \\n  \\n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \\n  \\n-   Draws an open green curve through the seven points.  \\n  \\n The method uses a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/add/codesnippet/cpp/m-system.drawing.graphic_20_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#23](~/add/codesnippet/csharp/m-system.drawing.graphic_20_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/add/codesnippet/visualbasic/m-system.drawing.graphic_20_1.vb)]\"\n  syntax:\n    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline.\n  overload: System.Drawing.Graphics.DrawCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)\n  id: DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawCurve(Pen,Point[],Single)\n  nameWithType: Graphics.DrawCurve(Pen,Point[],Single)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,Point[],Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.Point\"></xref> structures using a specified tension.\n  remarks: \"This method draws a cardinal spline that passes through each point in the array.  \\n  \\n The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.  \\n  \\n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define the curve.  \\n  \\n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \\n  \\n-   Creates a tension setting.  \\n  \\n-   Draws an open green closed curve through the seven points.  \\n  \\n The method uses a tension of 1.0.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/add/codesnippet/cpp/6180a257-cc1e-4474-b752-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#22](~/add/codesnippet/csharp/6180a257-cc1e-4474-b752-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/add/codesnippet/visualbasic/6180a257-cc1e-4474-b752-_1.vb)]\"\n  syntax:\n    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline.\n    - id: tension\n      type: System.Single\n      description: Value greater than or equal to 0.0F that specifies the tension of the curve.\n  overload: System.Drawing.Graphics.DrawCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)\n  id: DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawCurve(Pen,PointF[],Single)\n  nameWithType: Graphics.DrawCurve(Pen,PointF[],Single)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,PointF[],Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures using a specified tension.\n  remarks: \"This method draws a cardinal spline that passes through each point in the array.  \\n  \\n The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.  \\n  \\n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define the curve.  \\n  \\n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \\n  \\n-   Creates a tension setting.  \\n  \\n-   Draws an open green closed curve through the seven points.  \\n  \\n The method uses a tension of 1.0.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/add/codesnippet/cpp/dfe0ec8e-90de-4e02-8192-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#26](~/add/codesnippet/csharp/dfe0ec8e-90de-4e02-8192-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/add/codesnippet/visualbasic/dfe0ec8e-90de-4e02-8192-_1.vb)]\"\n  syntax:\n    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points that define the curve.\n    - id: tension\n      type: System.Single\n      description: Value greater than or equal to 0.0F that specifies the tension of the curve.\n  overload: System.Drawing.Graphics.DrawCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)\n  id: DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawCurve(Pen,PointF[],Int32,Int32)\n  nameWithType: Graphics.DrawCurve(Pen,PointF[],Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,PointF[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures. The drawing begins offset from the beginning of the array.\n  remarks: \"This method draws a cardinal spline that passes through each point in the array.  \\n  \\n The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.  \\n  \\n The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  \\n  \\n The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define a curve.  \\n  \\n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \\n  \\n-   Defines the starting point offset and number of segments.  \\n  \\n-   Draws an open green curve (starting at the third point) through the last five points.  \\n  \\n The method uses a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/add/codesnippet/cpp/f4f8f79d-25e2-48b4-ba79-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#24](~/add/codesnippet/csharp/f4f8f79d-25e2-48b4-ba79-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/add/codesnippet/visualbasic/f4f8f79d-25e2-48b4-ba79-_1.vb)]\"\n  syntax:\n    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline.\n    - id: offset\n      type: System.Int32\n      description: Offset from the first element in the array of the `points` parameter to the starting point in the curve.\n    - id: numberOfSegments\n      type: System.Int32\n      description: Number of segments after the starting point to include in the curve.\n  overload: System.Drawing.Graphics.DrawCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)\n  id: DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawCurve(Pen,Point[],Int32,Int32,Single)\n  nameWithType: Graphics.DrawCurve(Pen,Point[],Int32,Int32,Single)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,Point[],Int32,Int32,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.Point\"></xref> structures using a specified tension.\n  remarks: \"This method draws a cardinal spline that passes through each point in the array.  \\n  \\n The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.  \\n  \\n The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  \\n  \\n The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.  \\n  \\n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define a curve.  \\n  \\n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \\n  \\n-   Defines the starting point offset and number of segments.  \\n  \\n-   Defines the tension.  \\n  \\n-   Draws an open green curve (starting at the third point) through the last five points.  \\n  \\n The method sets the tension to 1.0.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/add/codesnippet/cpp/ed232e1e-25c0-4d3a-a280-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#21](~/add/codesnippet/csharp/ed232e1e-25c0-4d3a-a280-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/add/codesnippet/visualbasic/ed232e1e-25c0-4d3a-a280-_1.vb)]\"\n  syntax:\n    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline.\n    - id: offset\n      type: System.Int32\n      description: Offset from the first element in the array of the `points` parameter to the starting point in the curve.\n    - id: numberOfSegments\n      type: System.Int32\n      description: Number of segments after the starting point to include in the curve.\n    - id: tension\n      type: System.Single\n      description: Value greater than or equal to 0.0F that specifies the tension of the curve.\n  overload: System.Drawing.Graphics.DrawCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)\n  id: DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawCurve(Pen,PointF[],Int32,Int32,Single)\n  nameWithType: Graphics.DrawCurve(Pen,PointF[],Int32,Int32,Single)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,PointF[],Int32,Int32,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a cardinal spline through a specified array of <xref href=\"System.Drawing.PointF\"></xref> structures using a specified tension. The drawing begins offset from the beginning of the array.\n  remarks: \"This method draws a cardinal spline that passes through each point in the array.  \\n  \\n The array of points must contain at least three <xref:System.Drawing.PointF> structures for curve to be drawn.  \\n  \\n The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  \\n  \\n The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.  \\n  \\n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates red and green pens.  \\n  \\n-   Creates seven points to define a curve.  \\n  \\n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \\n  \\n-   Defines the starting point offset and number of segments.  \\n  \\n-   Defines the tension.  \\n  \\n-   Draws an open green curve (starting at the third point) through the last five points.  \\n  \\n The method sets the tension to 1.0.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/add/codesnippet/cpp/e4652aea-fc05-4bd2-9300-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#25](~/add/codesnippet/csharp/e4652aea-fc05-4bd2-9300-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/add/codesnippet/visualbasic/e4652aea-fc05-4bd2-9300-_1.vb)]\"\n  syntax:\n    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the curve.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline.\n    - id: offset\n      type: System.Int32\n      description: Offset from the first element in the array of the `points` parameter to the starting point in the curve.\n    - id: numberOfSegments\n      type: System.Int32\n      description: Number of segments after the starting point to include in the curve.\n    - id: tension\n      type: System.Single\n      description: Value greater than or equal to 0.0F that specifies the tension of the curve.\n  overload: System.Drawing.Graphics.DrawCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)\n  id: DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawEllipse(Pen,Rectangle)\n  nameWithType: Graphics.DrawEllipse(Pen,Rectangle)\n  fullName: System.Drawing.Graphics.DrawEllipse(Pen,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws an ellipse specified by a bounding <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: This method draws an ellipse that is defined by the bounding rectangle specified by the `rect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates a rectangle to bound an ellipse.  \\n  \\n-   Draws the ellipse to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/add/codesnippet/cpp/4155a034-950c-4182-bd85-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#27](~/add/codesnippet/csharp/4155a034-950c-4182-bd85-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/add/codesnippet/visualbasic/4155a034-950c-4182-bd85-_1.vb)]\"\n  syntax:\n    content: public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the ellipse.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that defines the boundaries of the ellipse.\n  overload: System.Drawing.Graphics.DrawEllipse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)\n  id: DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawEllipse(Pen,RectangleF)\n  nameWithType: Graphics.DrawEllipse(Pen,RectangleF)\n  fullName: System.Drawing.Graphics.DrawEllipse(Pen,RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws an ellipse defined by a bounding <xref href=\"System.Drawing.RectangleF\"></xref>.\n  remarks: This method draws an ellipse that is defined by the bounding rectangle specified by the `rect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates a rectangle to bound an ellipse.  \\n  \\n-   Draws the ellipse to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/add/codesnippet/cpp/c36ab4a5-56d0-4c3b-ab8b-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#28](~/add/codesnippet/csharp/c36ab4a5-56d0-4c3b-ab8b-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/add/codesnippet/visualbasic/c36ab4a5-56d0-4c3b-ab8b-_1.vb)]\"\n  syntax:\n    content: public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the ellipse.\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that defines the boundaries of the ellipse.\n  overload: System.Drawing.Graphics.DrawEllipse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawEllipse(Pen,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawEllipse(Pen,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawEllipse(Pen,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.\n  remarks: This method draws an ellipse that is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the position and size of a rectangle to bound an ellipse.  \\n  \\n-   Draws the ellipse to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/add/codesnippet/cpp/72dbe1e1-2974-4511-8ef1-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#29](~/add/codesnippet/csharp/72dbe1e1-2974-4511-8ef1-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/add/codesnippet/visualbasic/72dbe1e1-2974-4511-8ef1-_1.vb)]\"\n  syntax:\n    content: public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the ellipse.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: width\n      type: System.Int32\n      description: Width of the bounding rectangle that defines the ellipse.\n    - id: height\n      type: System.Int32\n      description: Height of the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Graphics.DrawEllipse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  id: DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawEllipse(Pen,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawEllipse(Pen,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawEllipse(Pen,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.\n  remarks: This method draws an ellipse that is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the position and size of a rectangle to bound an ellipse.  \\n  \\n-   Draws the ellipse to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/add/codesnippet/cpp/b63a980e-47de-4888-8a36-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#30](~/add/codesnippet/csharp/b63a980e-47de-4888-8a36-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/add/codesnippet/visualbasic/b63a980e-47de-4888-8a36-_1.vb)]\"\n  syntax:\n    content: public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the ellipse.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: width\n      type: System.Single\n      description: Width of the bounding rectangle that defines the ellipse.\n    - id: height\n      type: System.Single\n      description: Height of the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Graphics.DrawEllipse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)\n  id: DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawIcon(Icon,Rectangle)\n  nameWithType: Graphics.DrawIcon(Icon,Rectangle)\n  fullName: System.Drawing.Graphics.DrawIcon(Icon,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the image represented by the specified <xref href=\"System.Drawing.Icon\"></xref> within the area specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  \\n  \\n-   Creates a rectangle in which to draw the icon.  \\n  \\n-   Draws the icon to the screen.  \\n  \\n The position of the rectangle locates the icon on the screen, and the size of the rectangle determines the scaling of the drawn icon.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/add/codesnippet/cpp/m-system.drawing.graphic_44_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#31](~/add/codesnippet/csharp/m-system.drawing.graphic_44_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/add/codesnippet/visualbasic/m-system.drawing.graphic_44_1.vb)]\"\n  syntax:\n    content: public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);\n    parameters:\n    - id: icon\n      type: System.Drawing.Icon\n      description: <xref href=\"System.Drawing.Icon\"></xref> to draw.\n    - id: targetRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the resulting image on the display surface. The image contained in the `icon` parameter is scaled to the dimensions of this rectangular area.\n  overload: System.Drawing.Graphics.DrawIcon*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>icon</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)\n  id: DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawIcon(Icon,Int32,Int32)\n  nameWithType: Graphics.DrawIcon(Icon,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawIcon(Icon,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the image represented by the specified <xref href=\"System.Drawing.Icon\"></xref> at the specified coordinates.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  \\n  \\n-   Creates the coordinates of the upper-left corner at which to draw the icon.  \\n  \\n-   Draws the icon to the screen.  \\n  \\n The drawn icon is unscaled.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/add/codesnippet/cpp/eacdb009-057e-4fdc-abff-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#32](~/add/codesnippet/csharp/eacdb009-057e-4fdc-abff-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/add/codesnippet/visualbasic/eacdb009-057e-4fdc-abff-_1.vb)]\"\n  syntax:\n    content: public void DrawIcon (System.Drawing.Icon icon, int x, int y);\n    parameters:\n    - id: icon\n      type: System.Drawing.Icon\n      description: <xref href=\"System.Drawing.Icon\"></xref> to draw.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the drawn image.\n  overload: System.Drawing.Graphics.DrawIcon*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>icon</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)\n  id: DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawIconUnstretched(Icon,Rectangle)\n  nameWithType: Graphics.DrawIconUnstretched(Icon,Rectangle)\n  fullName: System.Drawing.Graphics.DrawIconUnstretched(Icon,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the image represented by the specified <xref href=\"System.Drawing.Icon\"></xref> without scaling the image.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  \\n  \\n-   Creates a rectangle in which to draw the icon.  \\n  \\n-   Draws the icon to the screen.  \\n  \\n The position of the rectangle locates the icon on the screen, and the drawn icon is unscaled and unclipped.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/add/codesnippet/cpp/3bd2037f-76e5-4588-a42d-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#33](~/add/codesnippet/csharp/3bd2037f-76e5-4588-a42d-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/add/codesnippet/visualbasic/3bd2037f-76e5-4588-a42d-_1.vb)]\"\n  syntax:\n    content: public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);\n    parameters:\n    - id: icon\n      type: System.Drawing.Icon\n      description: <xref href=\"System.Drawing.Icon\"></xref> to draw.\n    - id: targetRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the resulting image. The image is not scaled to fit this rectangle, but retains its original size. If the image is larger than the rectangle, it is clipped to fit inside it.\n  overload: System.Drawing.Graphics.DrawIconUnstretched*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>icon</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Point)\n  nameWithType: Graphics.DrawImage(Image,Point)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref>, using its original physical size, at the specified location.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a point at which to draw the upper-left corner of the image.  \\n  \\n-   Draws the unscaled image to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/add/codesnippet/cpp/m-system.drawing.graphic_18_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#34](~/add/codesnippet/csharp/m-system.drawing.graphic_18_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/add/codesnippet/visualbasic/m-system.drawing.graphic_18_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: point\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure that represents the location of the upper-left corner of the drawn image.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])\n  id: DrawImage(System.Drawing.Image,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Point[])\n  nameWithType: Graphics.DrawImage(Image,Point[])\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified shape and size.\n  remarks: \"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \\n  \\n The image represented by the `image` parameter is scaled and sheared to fit the shape of the parallelogram specified by the `destPoints` parameters.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates points that define a parallelogram in which to draw the image.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the parallelogram locates the image on the screen, and the size of the original image and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/add/codesnippet/cpp/m-system.drawing.graphic_42_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#35](~/add/codesnippet/csharp/m-system.drawing.graphic_42_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/add/codesnippet/visualbasic/m-system.drawing.graphic_42_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: Array of three <xref href=\"System.Drawing.Point\"></xref> structures that define a parallelogram.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)\n  id: DrawImage(System.Drawing.Image,System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,PointF)\n  nameWithType: Graphics.DrawImage(Image,PointF)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref>, using its original physical size, at the specified location.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a point at which to draw the upper-left corner of the image.  \\n  \\n-   Draws the unscaled image to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/add/codesnippet/cpp/m-system.drawing.graphic_19_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#40](~/add/codesnippet/csharp/m-system.drawing.graphic_19_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/add/codesnippet/visualbasic/m-system.drawing.graphic_19_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: point\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that represents the upper-left corner of the drawn image.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])\n  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,PointF[])\n  nameWithType: Graphics.DrawImage(Image,PointF[])\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified shape and size.\n  remarks: \"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \\n  \\n The image represented by the `image` object is scaled and sheared to fit the shape of the parallelogram specified by the `destPoints` parameter.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates points that define a parallelogram in which to draw the image.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the parallelogram locates the image on the screen, and the size of the original image and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/add/codesnippet/cpp/d1011ba3-7a66-459f-8c2e-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#41](~/add/codesnippet/csharp/d1011ba3-7a66-459f-8c2e-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/add/codesnippet/visualbasic/d1011ba3-7a66-459f-8c2e-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: Array of three <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle)\n  nameWithType: Graphics.DrawImage(Image,Rectangle)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The image represented by the `image` object is scaled to the dimensions of the `rect` rectangle.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a rectangle in which to draw the image.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/add/codesnippet/cpp/b2a72c58-befd-40af-b6a8-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#46](~/add/codesnippet/csharp/b2a72c58-befd-40af-b6a8-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/add/codesnippet/visualbasic/b2a72c58-befd-40af-b6a8-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)\n  id: DrawImage(System.Drawing.Image,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,RectangleF)\n  nameWithType: Graphics.DrawImage(Image,RectangleF)\n  fullName: System.Drawing.Graphics.DrawImage(Image,RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The image represented by the `image` object is scaled to the dimensions of the `rect` rectangle.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a rectangle in which to draw the image.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the rectangle locates the image on the screen, and the original size of the image and the size of the rectangle determines the scaling of the drawn image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/add/codesnippet/cpp/6f0c41d2-6855-4f5b-b775-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#56](~/add/codesnippet/csharp/6f0c41d2-6855-4f5b-b775-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/add/codesnippet/visualbasic/6f0c41d2-6855-4f5b-b775-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location and size of the drawn image.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)\n  id: DrawImage(System.Drawing.Image,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Int32,Int32)\n  nameWithType: Graphics.DrawImage(Image,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified image, using its original physical size, at the location specified by a coordinate pair.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n The DrawImage method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImage to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example SampImag.jpg in the folder of the example.  \\n  \\n-   Creates the coordinates of a point at which to draw the upper-left corner of the image.  \\n  \\n-   Draws the unscaled image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/add/codesnippet/cpp/ab9189bb-a438-4f96-9c99-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#58](~/add/codesnippet/csharp/ab9189bb-a438-4f96-9c99-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/add/codesnippet/visualbasic/ab9189bb-a438-4f96-9c99-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, int x, int y);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the drawn image.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)\n  id: DrawImage(System.Drawing.Image,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Single,Single)\n  nameWithType: Graphics.DrawImage(Image,Single,Single)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref>, using its original physical size, at the specified location.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates the coordinates of a point at which to draw the upper-left corner of the image.  \\n  \\n-   Draws the unscaled image to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/add/codesnippet/cpp/84c935d5-87a0-43c2-8402-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#61](~/add/codesnippet/csharp/84c935d5-87a0-43c2-8402-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/add/codesnippet/visualbasic/84c935d5-87a0-43c2-8402-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, float x, float y);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the drawn image.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Point[],Rectangle,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: \"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \\n  \\n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates points that define a parallelogram in which to draw the image.  \\n  \\n-   Creates a rectangle to select the portion of the image to draw.  \\n  \\n-   Sets the graphics drawing unit to pixel.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the parallelogram locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/add/codesnippet/cpp/6dd53b7b-1b38-4016-b9e0-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#36](~/add/codesnippet/csharp/6dd53b7b-1b38-4016-b9e0-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/add/codesnippet/visualbasic/6dd53b7b-1b38-4016-b9e0-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: Array of three <xref href=\"System.Drawing.Point\"></xref> structures that define a parallelogram.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the portion of the `image` object to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,PointF[],RectangleF,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: \"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \\n  \\n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates points that define a destination parallelogram in which to draw the image.  \\n  \\n-   Creates a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the destination parallelogram locates the image on the screen, the size of the source rectangle and the size and shape of the destination parallelogram determines the scaling and shearing of the drawn image, and the size of the rectangle determines what portion of the original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/add/codesnippet/cpp/bc8f7cbd-f1b7-4dce-b971-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#42](~/add/codesnippet/csharp/bc8f7cbd-f1b7-4dce-b971-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/add/codesnippet/visualbasic/bc8f7cbd-f1b7-4dce-b971-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: Array of three <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the portion of the `image` object to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Rectangle,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Rectangle,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Rectangle,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a destination rectangle in which to draw the image.  \\n  \\n-   Creates a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/add/codesnippet/cpp/c5d7b66c-1518-48ae-83a4-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#47](~/add/codesnippet/csharp/c5d7b66c-1518-48ae-83a4-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/add/codesnippet/visualbasic/c5d7b66c-1518-48ae-83a4-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the portion of the `image` object to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  id: DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,RectangleF,RectangleF,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,RectangleF,RectangleF,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,RectangleF,RectangleF,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a destination rectangle in which to draw the image.  \\n  \\n-   Creates a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/add/codesnippet/cpp/d16e9371-9711-4277-9719-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#57](~/add/codesnippet/csharp/d16e9371-9711-4277-9719-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/add/codesnippet/visualbasic/d16e9371-9711-4277-9719-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destRect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the portion of the `image` object to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes)\n  nameWithType: Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location.\n  remarks: \"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \\n  \\n The `srcRect` parameter specifies a rectangular portion of the`image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates points that define a parallelogram in which to draw the image.  \\n  \\n-   Creates a rectangle to select the portion of the image to draw.  \\n  \\n-   Sets the graphics drawing unit to pixel.  \\n  \\n-   Draws the original image to the screen.  \\n  \\n-   Creates an additional parallelogram in which to draw an adjusted image.  \\n  \\n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \\n  \\n-   Draws the adjusted image to the screen.  \\n  \\n For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/add/codesnippet/cpp/fd322d76-6837-44d1-9e35-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#37](~/add/codesnippet/csharp/fd322d76-6837-44d1-9e35-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/add/codesnippet/visualbasic/fd322d76-6837-44d1-9e35-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: Array of three <xref href=\"System.Drawing.Point\"></xref> structures that define a parallelogram.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the portion of the `image` object to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: <xref href=\"System.Drawing.Imaging.ImageAttributes\"></xref> that specifies recoloring and gamma information for the `image` object.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes)\n  nameWithType: Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: \"The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \\n  \\n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates points that define a destination parallelogram in which to draw the image.  \\n  \\n-   Creates a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the original image to the screen.  \\n  \\n-   Creates an additional parallelogram in which to draw an adjusted image.  \\n  \\n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \\n  \\n-   Draws the adjusted image to the screen.  \\n  \\n For the original, unadjusted destination parallelogram, the position locates the image on the screen, the size of the source rectangle and the size and shape of the destination parallelogram determines the scaling and shearing of the drawn image, and the size of the rectangle determines what portion of the original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/add/codesnippet/cpp/6b0afdfb-af32-486b-87bf-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#43](~/add/codesnippet/csharp/6b0afdfb-af32-486b-87bf-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/add/codesnippet/visualbasic/6b0afdfb-af32-486b-87bf-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: Array of three <xref href=\"System.Drawing.PointF\"></xref> structures that define a parallelogram.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the portion of the `image` object to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: <xref href=\"System.Drawing.Imaging.ImageAttributes\"></xref> that specifies recoloring and gamma information for the `image` object.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  id: DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Int32,Int32,Rectangle,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Int32,Int32,Rectangle,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Int32,Int32,Rectangle,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a portion of an image at a specified location.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates the coordinates at which to draw the upper-left corner of the image.  \\n  \\n-   Creates a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The size of the source rectangle determines what portion of the unscaled original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/add/codesnippet/cpp/f904b742-3271-432e-b54b-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#59](~/add/codesnippet/csharp/f904b742-3271-432e-b54b-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/add/codesnippet/visualbasic/f904b742-3271-432e-b54b-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the drawn image.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the portion of the `image` object to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawImage(Image,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The rectangle defined by the `x`, `y`, `width`, and `height` parameters determines the position and size of the drawn image.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates the position and size of a rectangle in which to draw the image.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/add/codesnippet/cpp/dc519bdd-d8f5-446f-a257-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#60](~/add/codesnippet/csharp/dc519bdd-d8f5-446f-a257-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/add/codesnippet/visualbasic/dc519bdd-d8f5-446f-a257-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the drawn image.\n    - id: width\n      type: System.Int32\n      description: Width of the drawn image.\n    - id: height\n      type: System.Int32\n      description: Height of the drawn image.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  id: DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Single,Single,RectangleF,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Single,Single,RectangleF,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Single,Single,RectangleF,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a portion of an image at a specified location.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates the coordinates at which to draw the upper-left corner of the image.  \\n  \\n-   Creates a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The size of the source rectangle determines what portion of the unscaled original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/add/codesnippet/cpp/9a0fe4d8-ea0f-4f65-9ec1-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#62](~/add/codesnippet/csharp/9a0fe4d8-ea0f-4f65-9ec1-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/add/codesnippet/visualbasic/9a0fe4d8-ea0f-4f65-9ec1-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the drawn image.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the portion of the <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used by the `srcRect` parameter.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)\n  id: DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawImage(Image,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The rectangle defined by the `x`, `y`, `width`, and `height` parameters determines the position and size of the drawn image.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates the position and size of a rectangle in which to draw the image.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/add/codesnippet/cpp/c499f938-82a0-46ba-ab2e-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#63](~/add/codesnippet/csharp/c499f938-82a0-46ba-ab2e-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/add/codesnippet/visualbasic/c499f938-82a0-46ba-ab2e-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the drawn image.\n    - id: width\n      type: System.Single\n      description: Width of the drawn image.\n    - id: height\n      type: System.Single\n      description: Height of the drawn image.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  nameWithType: Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.DrawImageAbort\n      description: To be added.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  nameWithType: Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.DrawImageAbort\n      description: To be added.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  nameWithType: Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.DrawImageAbort\n      description: To be added.\n    - id: callbackData\n      type: System.Int32\n      description: To be added.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)\n  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  nameWithType: Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.DrawImageAbort\n      description: To be added.\n    - id: callbackData\n      type: System.Int32\n      description: To be added.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a destination rectangle in which to draw the image.  \\n  \\n-   Creates the coordinates of a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the destination rectangle locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/add/codesnippet/cpp/223fb7be-dae4-4ad9-b0a7-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#48](~/add/codesnippet/csharp/223fb7be-dae4-4ad9-b0a7-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/add/codesnippet/visualbasic/223fb7be-dae4-4ad9-b0a7-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.\n    - id: srcX\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.\n    - id: srcY\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.\n    - id: srcWidth\n      type: System.Int32\n      description: Width of the portion of the source image to draw.\n    - id: srcHeight\n      type: System.Int32\n      description: Height of the portion of the source image to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used to determine the source rectangle.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates the coordinates of a destination rectangle in which to draw the image.  \\n  \\n-   Creates a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the image to the screen.  \\n  \\n The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/add/codesnippet/cpp/6a64b030-f9b9-4136-9958-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#52](~/add/codesnippet/csharp/6a64b030-f9b9-4136-9958-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/add/codesnippet/visualbasic/6a64b030-f9b9-4136-9958-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.\n    - id: srcX\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.\n    - id: srcY\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.\n    - id: srcWidth\n      type: System.Single\n      description: Width of the portion of the source image to draw.\n    - id: srcHeight\n      type: System.Single\n      description: Height of the portion of the source image to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used to determine the source rectangle.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a destination rectangle in which to draw the image.  \\n  \\n-   Creates the coordinates of a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the original image to the screen.  \\n  \\n-   Creates an additional rectangle in which to draw an adjusted image.  \\n  \\n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \\n  \\n-   Draws the adjusted image to the screen.  \\n  \\n For the original, unadjusted destination rectangle, the position locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/add/codesnippet/cpp/e2928ae3-f4ea-4e28-84d2-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#49](~/add/codesnippet/csharp/e2928ae3-f4ea-4e28-84d2-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/add/codesnippet/visualbasic/e2928ae3-f4ea-4e28-84d2-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.\n    - id: srcX\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.\n    - id: srcY\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.\n    - id: srcWidth\n      type: System.Int32\n      description: Width of the portion of the source image to draw.\n    - id: srcHeight\n      type: System.Int32\n      description: Height of the portion of the source image to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used to determine the source rectangle.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: <xref href=\"System.Drawing.Imaging.ImageAttributes\"></xref> that specifies recoloring and gamma information for the `image` object.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified portion of the specified <xref href=\"System.Drawing.Image\"></xref> at the specified location and with the specified size.\n  remarks: The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a destination rectangle in which to draw the image.  \\n  \\n-   Creates the coordinates of a source rectangle from which to extract a portion of the image.  \\n  \\n-   Sets the unit of measure of the source rectangle to pixels.  \\n  \\n-   Draws the original image to the screen.  \\n  \\n-   Creates an additional rectangle in which to draw an adjusted image.  \\n  \\n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \\n  \\n-   Draws the adjusted image to the screen.  \\n  \\n For the original, unadjusted destination rectangle, the position locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/add/codesnippet/cpp/8cbc1478-f554-4214-b657-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples#53](~/add/codesnippet/csharp/8cbc1478-f554-4214-b657-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/add/codesnippet/visualbasic/8cbc1478-f554-4214-b657-_1.vb)]\"\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.\n    - id: srcX\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.\n    - id: srcY\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.\n    - id: srcWidth\n      type: System.Single\n      description: Width of the portion of the source image to draw.\n    - id: srcHeight\n      type: System.Single\n      description: Height of the portion of the source image to draw.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: Member of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> enumeration that specifies the units of measure used to determine the source rectangle.\n    - id: imageAttrs\n      type: System.Drawing.Imaging.ImageAttributes\n      description: <xref href=\"System.Drawing.Imaging.ImageAttributes\"></xref> that specifies recoloring and gamma information for the `image` object.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcX\n      type: System.Int32\n      description: To be added.\n    - id: srcY\n      type: System.Int32\n      description: To be added.\n    - id: srcWidth\n      type: System.Int32\n      description: To be added.\n    - id: srcHeight\n      type: System.Int32\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.DrawImageAbort\n      description: To be added.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcX\n      type: System.Single\n      description: To be added.\n    - id: srcY\n      type: System.Single\n      description: To be added.\n    - id: srcWidth\n      type: System.Single\n      description: To be added.\n    - id: srcHeight\n      type: System.Single\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: imageAttrs\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.DrawImageAbort\n      description: To be added.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcX\n      type: System.Int32\n      description: To be added.\n    - id: srcY\n      type: System.Int32\n      description: To be added.\n    - id: srcWidth\n      type: System.Int32\n      description: To be added.\n    - id: srcHeight\n      type: System.Int32\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: imageAttrs\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.DrawImageAbort\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)\n  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcX\n      type: System.Single\n      description: To be added.\n    - id: srcY\n      type: System.Single\n      description: To be added.\n    - id: srcWidth\n      type: System.Single\n      description: To be added.\n    - id: srcHeight\n      type: System.Single\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: imageAttrs\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.DrawImageAbort\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.DrawImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)\n  id: DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImageUnscaled(Image,Point)\n  nameWithType: Graphics.DrawImageUnscaled(Image,Point)\n  fullName: System.Drawing.Graphics.DrawImageUnscaled(Image,Point)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a specified image using its original physical size at a specified location.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \\n  \\n-   Creates a point at which to draw the upper-left corner of the image.  \\n  \\n-   Draws the entire image using its physical size.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/add/codesnippet/cpp/e51ffdca-5554-49de-bd37-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#64](~/add/codesnippet/csharp/e51ffdca-5554-49de-bd37-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/add/codesnippet/visualbasic/e51ffdca-5554-49de-bd37-_1.vb)]\"\n  syntax:\n    content: public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: point\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure that specifies the upper-left corner of the drawn image.\n  overload: System.Drawing.Graphics.DrawImageUnscaled*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)\n  id: DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImageUnscaled(Image,Rectangle)\n  nameWithType: Graphics.DrawImageUnscaled(Image,Rectangle)\n  fullName: System.Drawing.Graphics.DrawImageUnscaled(Image,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a specified image using its original physical size at a specified location.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.\"\n  syntax:\n    content: public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> that specifies the upper-left corner of the drawn image. The X and Y properties of the rectangle specify the upper-left corner. The Width and Height properties are ignored.\n  overload: System.Drawing.Graphics.DrawImageUnscaled*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)\n  id: DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImageUnscaled(Image,Int32,Int32)\n  nameWithType: Graphics.DrawImageUnscaled(Image,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawImageUnscaled(Image,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified image using its original physical size at the location specified by a coordinate pair.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an image from a JPEG file, SampImag.jpg, in the folder of the example.  \\n  \\n-   Creates a point at which to draw the upper-left corner of the image.  \\n  \\n-   Draws the entire image using its physical size.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/add/codesnippet/cpp/979e5b64-1221-4b16-aa62-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#65](~/add/codesnippet/csharp/979e5b64-1221-4b16-aa62-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/add/codesnippet/visualbasic/979e5b64-1221-4b16-aa62-_1.vb)]\"\n  syntax:\n    content: public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the drawn image.\n  overload: System.Drawing.Graphics.DrawImageUnscaled*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImageUnscaled(Image,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawImageUnscaled(Image,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawImageUnscaled(Image,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a specified image using its original physical size at a specified location.\n  remarks: \"An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \\n  \\n The DrawImageUnscaled method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call DrawImageUnscaled to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.\"\n  syntax:\n    content: public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the drawn image.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the drawn image.\n    - id: width\n      type: System.Int32\n      description: Not used.\n    - id: height\n      type: System.Int32\n      description: Not used.\n  overload: System.Drawing.Graphics.DrawImageUnscaled*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)\n  id: DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawImageUnscaledAndClipped(Image,Rectangle)\n  nameWithType: Graphics.DrawImageUnscaledAndClipped(Image,Rectangle)\n  fullName: System.Drawing.Graphics.DrawImageUnscaledAndClipped(Image,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified image without scaling and clips it, if necessary, to fit in the specified rectangle.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the DrawImageUnscaledAndClipped method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawImageUnscaled` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/add/codesnippet/visualbasic/8e586d21-d392-4457-b1a8-_1.vb)]\\n [!code-cs[System.Drawing.MiscWhidbeySnippets#8](~/add/codesnippet/csharp/8e586d21-d392-4457-b1a8-_1.cs)]\"\n  syntax:\n    content: public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: The <xref href=\"System.Drawing.Image\"></xref> to draw.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: The <xref href=\"System.Drawing.Rectangle\"></xref> in which to draw the image.\n  overload: System.Drawing.Graphics.DrawImageUnscaledAndClipped*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)\n  id: DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawLine(Pen,Point,Point)\n  nameWithType: Graphics.DrawLine(Pen,Point,Point)\n  fullName: System.Drawing.Graphics.DrawLine(Pen,Point,Point)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a line connecting two <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates points for the endpoints of the line.  \\n  \\n-   Draws the line to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/add/codesnippet/cpp/7a5f2393-b88a-42cd-943c-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#66](~/add/codesnippet/csharp/7a5f2393-b88a-42cd-943c-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/add/codesnippet/visualbasic/7a5f2393-b88a-42cd-943c-_1.vb)]\"\n  syntax:\n    content: public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line.\n    - id: pt1\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure that represents the first point to connect.\n    - id: pt2\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure that represents the second point to connect.\n  overload: System.Drawing.Graphics.DrawLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)\n  id: DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawLine(Pen,PointF,PointF)\n  nameWithType: Graphics.DrawLine(Pen,PointF,PointF)\n  fullName: System.Drawing.Graphics.DrawLine(Pen,PointF,PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a line connecting two <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: This method draws a line connecting the two points specified by the `pt1` and p`2` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates points for the endpoints of the line.  \\n  \\n-   Draws the line to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/add/codesnippet/cpp/eafdb748-e1a5-46b1-a524-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#67](~/add/codesnippet/csharp/eafdb748-e1a5-46b1-a524-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/add/codesnippet/visualbasic/eafdb748-e1a5-46b1-a524-_1.vb)]\"\n  syntax:\n    content: public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line.\n    - id: pt1\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that represents the first point to connect.\n    - id: pt2\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that represents the second point to connect.\n  overload: System.Drawing.Graphics.DrawLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawLine(Pen,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawLine(Pen,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawLine(Pen,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a line connecting the two points specified by the coordinate pairs.\n  remarks: This method draws a line connecting the two points specified by the `x1`, `y1`, `x2`, and `y2` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the coordinates of the endpoints of the line.  \\n  \\n-   Draws the line to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/add/codesnippet/cpp/0cb21819-9d21-4c0c-b7b3-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#68](~/add/codesnippet/csharp/0cb21819-9d21-4c0c-b7b3-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/add/codesnippet/visualbasic/0cb21819-9d21-4c0c-b7b3-_1.vb)]\"\n  syntax:\n    content: public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line.\n    - id: x1\n      type: System.Int32\n      description: The x-coordinate of the first point.\n    - id: y1\n      type: System.Int32\n      description: The y-coordinate of the first point.\n    - id: x2\n      type: System.Int32\n      description: The x-coordinate of the second point.\n    - id: y2\n      type: System.Int32\n      description: The y-coordinate of the second point.\n  overload: System.Drawing.Graphics.DrawLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  id: DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawLine(Pen,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawLine(Pen,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawLine(Pen,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a line connecting the two points specified by the coordinate pairs.\n  remarks: This method draws a line connecting the two points specified by the `x1`, `y1`, `x2`, and `y2` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the coordinates of the endpoints of the line.  \\n  \\n-   Draws the line to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/add/codesnippet/cpp/cd23e492-13d6-4787-a27b-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#69](~/add/codesnippet/csharp/cd23e492-13d6-4787-a27b-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/add/codesnippet/visualbasic/cd23e492-13d6-4787-a27b-_1.vb)]\"\n  syntax:\n    content: public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line.\n    - id: x1\n      type: System.Single\n      description: The x-coordinate of the first point.\n    - id: y1\n      type: System.Single\n      description: The y-coordinate of the first point.\n    - id: x2\n      type: System.Single\n      description: The x-coordinate of the second point.\n    - id: y2\n      type: System.Single\n      description: The y-coordinate of the second point.\n  overload: System.Drawing.Graphics.DrawLine*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])\n  id: DrawLines(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawLines(Pen,Point[])\n  nameWithType: Graphics.DrawLines(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawLines(Pen,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a series of line segments that connect an array of <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates an array of points of segments of the line.  \\n  \\n-   Draws the connected line segments to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/add/codesnippet/cpp/m-system.drawing.graphic_5_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#70](~/add/codesnippet/csharp/m-system.drawing.graphic_5_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/add/codesnippet/visualbasic/m-system.drawing.graphic_5_1.vb)]\"\n  syntax:\n    content: public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line segments.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the points to connect.\n  overload: System.Drawing.Graphics.DrawLines*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])\n  id: DrawLines(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawLines(Pen,PointF[])\n  nameWithType: Graphics.DrawLines(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawLines(Pen,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a series of line segments that connect an array of <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Code creates a black pen.  \\n  \\n-   Creates an array of points of segments of the line.  \\n  \\n-   Draws the connected line segments to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/add/codesnippet/cpp/m-system.drawing.graphic_27_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#71](~/add/codesnippet/csharp/m-system.drawing.graphic_27_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/add/codesnippet/visualbasic/m-system.drawing.graphic_27_1.vb)]\"\n  syntax:\n    content: public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the line segments.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points to connect.\n  overload: System.Drawing.Graphics.DrawLines*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)\n  id: DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawPath(Pen,GraphicsPath)\n  nameWithType: Graphics.DrawPath(Pen,GraphicsPath)\n  fullName: System.Drawing.Graphics.DrawPath(Pen,GraphicsPath)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: The current transformation in the graphic context is applied to the <xref:System.Drawing.Drawing2D.GraphicsPath> before it is drawn.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a graphics path object and adds an ellipse to it.  \\n  \\n-   Creates a black pen.  \\n  \\n-   Draws the graphics path to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/add/codesnippet/cpp/a718a784-9a44-4465-a94a-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#72](~/add/codesnippet/csharp/a718a784-9a44-4465-a94a-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/add/codesnippet/visualbasic/a718a784-9a44-4465-a94a-_1.vb)]\"\n  syntax:\n    content: public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the path.\n    - id: path\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to draw.\n  overload: System.Drawing.Graphics.DrawPath*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>path</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)\n  id: DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawPie(Pen,Rectangle,Single,Single)\n  nameWithType: Graphics.DrawPie(Pen,Rectangle,Single,Single)\n  fullName: System.Drawing.Graphics.DrawPie(Pen,Rectangle,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a pie shape defined by an ellipse specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure and two radial lines.\n  remarks: \"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \\n  \\n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates a rectangle that bounds a complete ellipse.  \\n  \\n-   Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).  \\n  \\n-   Draws the pie segment to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/add/codesnippet/cpp/1a04a061-dceb-4fd4-b376-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#73](~/add/codesnippet/csharp/1a04a061-dceb-4fd4-b376-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/add/codesnippet/visualbasic/1a04a061-dceb-4fd4-b376-_1.vb)]\"\n  syntax:\n    content: public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the pie shape.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: startAngle\n      type: System.Single\n      description: Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.\n    - id: sweepAngle\n      type: System.Single\n      description: Angle measured in degrees clockwise from the `startAngle` parameter to the second side of the pie shape.\n  overload: System.Drawing.Graphics.DrawPie*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)\n  id: DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawPie(Pen,RectangleF,Single,Single)\n  nameWithType: Graphics.DrawPie(Pen,RectangleF,Single,Single)\n  fullName: System.Drawing.Graphics.DrawPie(Pen,RectangleF,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a pie shape defined by an ellipse specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure and two radial lines.\n  remarks: \"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \\n  \\n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates a rectangle that bounds a complete ellipse.  \\n  \\n-   Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).  \\n  \\n-   Draws the pie segment to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/add/codesnippet/cpp/2cc07759-8996-434e-ab19-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#74](~/add/codesnippet/csharp/2cc07759-8996-434e-ab19-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/add/codesnippet/visualbasic/2cc07759-8996-434e-ab19-_1.vb)]\"\n  syntax:\n    content: public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the pie shape.\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: startAngle\n      type: System.Single\n      description: Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.\n    - id: sweepAngle\n      type: System.Single\n      description: Angle measured in degrees clockwise from the `startAngle` parameter to the second side of the pie shape.\n  overload: System.Drawing.Graphics.DrawPie*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawPie(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawPie(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawPie(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.\n  remarks: \"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \\n  \\n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the position and size of a rectangle that bounds a complete ellipse.  \\n  \\n-   Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).  \\n  \\n-   Draws the pie shape to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/add/codesnippet/cpp/efda9570-fb8e-43e9-9bc9-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#75](~/add/codesnippet/csharp/efda9570-fb8e-43e9-9bc9-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/add/codesnippet/visualbasic/efda9570-fb8e-43e9-9bc9-_1.vb)]\"\n  syntax:\n    content: public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the pie shape.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: width\n      type: System.Int32\n      description: Width of the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: height\n      type: System.Int32\n      description: Height of the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: startAngle\n      type: System.Int32\n      description: Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.\n    - id: sweepAngle\n      type: System.Int32\n      description: Angle measured in degrees clockwise from the `startAngle` parameter to the second side of the pie shape.\n  overload: System.Drawing.Graphics.DrawPie*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  id: DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawPie(Pen,Single,Single,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawPie(Pen,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawPie(Pen,Single,Single,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.\n  remarks: \"This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \\n  \\n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the position and size of a rectangle that bounds a complete ellipse.  \\n  \\n-   Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).  \\n  \\n-   Draws the pie segment to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/add/codesnippet/cpp/91960442-0c73-4809-a8b7-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#76](~/add/codesnippet/csharp/91960442-0c73-4809-a8b7-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/add/codesnippet/visualbasic/91960442-0c73-4809-a8b7-_1.vb)]\"\n  syntax:\n    content: public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the pie shape.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: width\n      type: System.Single\n      description: Width of the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: height\n      type: System.Single\n      description: Height of the bounding rectangle that defines the ellipse from which the pie shape comes.\n    - id: startAngle\n      type: System.Single\n      description: Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.\n    - id: sweepAngle\n      type: System.Single\n      description: Angle measured in degrees clockwise from the `startAngle` parameter to the second side of the pie shape.\n  overload: System.Drawing.Graphics.DrawPie*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])\n  id: DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawPolygon(Pen,Point[])\n  nameWithType: Graphics.DrawPolygon(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawPolygon(Pen,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a polygon defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates an array of seven points for the vertices of the polygon.  \\n  \\n-   Draws the polygon to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/add/codesnippet/cpp/m-system.drawing.graphic_24_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#78](~/add/codesnippet/csharp/m-system.drawing.graphic_24_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/add/codesnippet/visualbasic/m-system.drawing.graphic_24_1.vb)]\"\n  syntax:\n    content: public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the polygon.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the vertices of the polygon.\n  overload: System.Drawing.Graphics.DrawPolygon*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])\n  id: DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawPolygon(Pen,PointF[])\n  nameWithType: Graphics.DrawPolygon(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawPolygon(Pen,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a polygon defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates an array of seven points for the vertices of the polygon.  \\n  \\n-   Draws the polygon to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/add/codesnippet/cpp/16b9f60c-1099-497e-96b6-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#77](~/add/codesnippet/csharp/16b9f60c-1099-497e-96b6-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/add/codesnippet/visualbasic/16b9f60c-1099-497e-96b6-_1.vb)]\"\n  syntax:\n    content: public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the polygon.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the vertices of the polygon.\n  overload: System.Drawing.Graphics.DrawPolygon*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)\n  id: DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawRectangle(Pen,Rectangle)\n  nameWithType: Graphics.DrawRectangle(Pen,Rectangle)\n  fullName: System.Drawing.Graphics.DrawRectangle(Pen,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: For information about how to draw a <xref:System.Drawing.RectangleF>, see[DrawRectangles(Pen, RectangleF\\[\\])](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&autoUpgrade=False).\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates a rectangle.  \\n  \\n-   Draws the rectangle to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/add/codesnippet/cpp/7220a29d-c2cf-4eb5-a772-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#79](~/add/codesnippet/csharp/7220a29d-c2cf-4eb5-a772-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/add/codesnippet/visualbasic/7220a29d-c2cf-4eb5-a772-_1.vb)]\"\n  syntax:\n    content: public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: A <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the rectangle.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: A <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the rectangle to draw.\n  overload: System.Drawing.Graphics.DrawRectangle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawRectangle(Pen,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawRectangle(Pen,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawRectangle(Pen,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a rectangle specified by a coordinate pair, a width, and a height.\n  remarks: For information about how to draw a <xref:System.Drawing.RectangleF>, see [DrawRectangles(Pen, RectangleF\\[\\])](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&autoUpgrade=False).\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the position and size of a rectangle.  \\n  \\n-   Draws the rectangle to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/add/codesnippet/cpp/7deab914-35e6-41bb-8525-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#80](~/add/codesnippet/csharp/7deab914-35e6-41bb-8525-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/add/codesnippet/visualbasic/7deab914-35e6-41bb-8525-_1.vb)]\"\n  syntax:\n    content: public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the rectangle.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the rectangle to draw.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the rectangle to draw.\n    - id: width\n      type: System.Int32\n      description: Width of the rectangle to draw.\n    - id: height\n      type: System.Int32\n      description: Height of the rectangle to draw.\n  overload: System.Drawing.Graphics.DrawRectangle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  id: DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawRectangle(Pen,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawRectangle(Pen,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawRectangle(Pen,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a rectangle specified by a coordinate pair, a width, and a height.\n  remarks: For information about how to draw a <xref:System.Drawing.RectangleF>, see [DrawRectangles(Pen, RectangleF\\[\\])](assetId:///M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])?qualifyHint=False&autoUpgrade=False).\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates the position and size of a rectangle.  \\n  \\n-   Draws the rectangle to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/add/codesnippet/cpp/02312e17-0d5f-4ea1-a1de-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#81](~/add/codesnippet/csharp/02312e17-0d5f-4ea1-a1de-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/add/codesnippet/visualbasic/02312e17-0d5f-4ea1-a1de-_1.vb)]\"\n  syntax:\n    content: public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: A <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the rectangle.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the rectangle to draw.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the rectangle to draw.\n    - id: width\n      type: System.Single\n      description: The width of the rectangle to draw.\n    - id: height\n      type: System.Single\n      description: The height of the rectangle to draw.\n  overload: System.Drawing.Graphics.DrawRectangle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pen</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])\n  id: DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawRectangles(Pen,Rectangle[])\n  nameWithType: Graphics.DrawRectangles(Pen,Rectangle[])\n  fullName: System.Drawing.Graphics.DrawRectangles(Pen,Rectangle[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a series of rectangles specified by <xref href=\"System.Drawing.Rectangle\"></xref> structures.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates an array of three rectangles.  \\n  \\n-   Draws the rectangles to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/add/codesnippet/cpp/fbc2bd3d-0796-4b81-9906-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#82](~/add/codesnippet/csharp/fbc2bd3d-0796-4b81-9906-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/add/codesnippet/visualbasic/fbc2bd3d-0796-4b81-9906-_1.vb)]\"\n  syntax:\n    content: public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the outlines of the rectangles.\n    - id: rects\n      type: System.Drawing.Rectangle[]\n      description: Array of <xref href=\"System.Drawing.Rectangle\"></xref> structures that represent the rectangles to draw.\n  overload: System.Drawing.Graphics.DrawRectangles*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>rects</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>rects</code> is a zero-length array.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])\n  id: DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawRectangles(Pen,RectangleF[])\n  nameWithType: Graphics.DrawRectangles(Pen,RectangleF[])\n  fullName: System.Drawing.Graphics.DrawRectangles(Pen,RectangleF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws a series of rectangles specified by <xref href=\"System.Drawing.RectangleF\"></xref> structures.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a black pen.  \\n  \\n-   Creates an array of three rectangles.  \\n  \\n-   Draws the rectangles to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/add/codesnippet/cpp/6724fe05-90a2-4c2b-9273-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#83](~/add/codesnippet/csharp/6724fe05-90a2-4c2b-9273-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/add/codesnippet/visualbasic/6724fe05-90a2-4c2b-9273-_1.vb)]\"\n  syntax:\n    content: public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);\n    parameters:\n    - id: pen\n      type: System.Drawing.Pen\n      description: <xref href=\"System.Drawing.Pen\"></xref> that determines the color, width, and style of the outlines of the rectangles.\n    - id: rects\n      type: System.Drawing.RectangleF[]\n      description: Array of <xref href=\"System.Drawing.RectangleF\"></xref> structures that represent the rectangles to draw.\n  overload: System.Drawing.Graphics.DrawRectangles*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>pen</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>rects</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>rects</code> is a zero-length array.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)\n  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawString(String,Font,Brush,PointF)\n  nameWithType: Graphics.DrawString(String,Font,Brush,PointF)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified text string at the specified location with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a text string to draw.  \\n  \\n-   Defines the font as Arial (16pt).  \\n  \\n-   Creates a solid, black brush to draw with.  \\n  \\n-   Creates a point for the upper-left corner at which to draw the text.  \\n  \\n-   Draws the string to the screen using the font, brush, and destination point.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/add/codesnippet/cpp/e8b9f7ba-fcb1-40c1-b944-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#84](~/add/codesnippet/csharp/e8b9f7ba-fcb1-40c1-b944-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/add/codesnippet/visualbasic/e8b9f7ba-fcb1-40c1-b944-_1.vb)]\"\n  syntax:\n    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);\n    parameters:\n    - id: s\n      type: System.String\n      description: String to draw.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text.\n    - id: point\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that specifies the upper-left corner of the drawn text.\n  overload: System.Drawing.Graphics.DrawString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>s</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)\n  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawString(String,Font,Brush,RectangleF)\n  nameWithType: Graphics.DrawString(String,Font,Brush,RectangleF)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified text string in the specified rectangle with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects.\n  remarks: The text represented by the `s` parameter is drawn inside the rectangle represented by the `layoutRectangle` parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word. To further manipulate how the string is drawn inside the rectangle use the <xref:System.Drawing.Graphics.DrawString%2A> overload that takes a <xref:System.Drawing.StringFormat>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a text string to draw.  \\n  \\n-   Defines the font as Arial (16pt).  \\n  \\n-   Creates a solid, black brush to draw with.  \\n  \\n-   Creates a rectangle in which to draw the text.  \\n  \\n-   Draws the rectangle to the screen.  \\n  \\n-   Draws the string to the screen using the font, brush, and destination rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/add/codesnippet/cpp/88dcbdf3-31ac-495d-b92e-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#86](~/add/codesnippet/csharp/88dcbdf3-31ac-495d-b92e-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/add/codesnippet/visualbasic/88dcbdf3-31ac-495d-b92e-_1.vb)]\"\n  syntax:\n    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);\n    parameters:\n    - id: s\n      type: System.String\n      description: String to draw.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text.\n    - id: layoutRectangle\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location of the drawn text.\n  overload: System.Drawing.Graphics.DrawString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>s</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)\n  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawString(String,Font,Brush,PointF,StringFormat)\n  nameWithType: Graphics.DrawString(String,Font,Brush,PointF,StringFormat)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,PointF,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified text string at the specified location with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects using the formatting attributes of the specified <xref href=\"System.Drawing.StringFormat\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a text string to draw.  \\n  \\n-   Defines the font as Arial (16pt).  \\n  \\n-   Creates a solid, black brush to draw with.  \\n  \\n-   Creates a point for the upper-left corner at which to draw the text.  \\n  \\n-   Sets the format of the string to draw vertically.  \\n  \\n-   Draws the string to the screen using the font, brush, destination point, and format.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/add/codesnippet/cpp/9695d0f1-6916-4c96-a710-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#85](~/add/codesnippet/csharp/9695d0f1-6916-4c96-a710-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/add/codesnippet/visualbasic/9695d0f1-6916-4c96-a710-_1.vb)]\"\n  syntax:\n    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);\n    parameters:\n    - id: s\n      type: System.String\n      description: String to draw.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text.\n    - id: point\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that specifies the upper-left corner of the drawn text.\n    - id: format\n      type: System.Drawing.StringFormat\n      description: <xref href=\"System.Drawing.StringFormat\"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.\n  overload: System.Drawing.Graphics.DrawString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>s</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawString(String,Font,Brush,RectangleF,StringFormat)\n  nameWithType: Graphics.DrawString(String,Font,Brush,RectangleF,StringFormat)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,RectangleF,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified text string in the specified rectangle with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects using the formatting attributes of the specified <xref href=\"System.Drawing.StringFormat\"></xref>.\n  remarks: The text represented by the `s` parameter is drawn inside the rectangle represented by the `layoutRectangle` parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word, unless otherwise specified with the `format` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a text string to draw.  \\n  \\n-   Defines the font as Arial (16pt).  \\n  \\n-   Creates a solid, black brush to draw with.  \\n  \\n-   Creates a rectangle in which to draw the text.  \\n  \\n-   Draws the rectangle to the screen.  \\n  \\n-   Sets the format of the string to center it within the rectangle.  \\n  \\n-   Draws the string to the screen using the font, brush, and destination rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/add/codesnippet/cpp/711c2875-30db-41dc-b400-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#87](~/add/codesnippet/csharp/711c2875-30db-41dc-b400-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/add/codesnippet/visualbasic/711c2875-30db-41dc-b400-_1.vb)]\"\n  syntax:\n    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);\n    parameters:\n    - id: s\n      type: System.String\n      description: String to draw.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text.\n    - id: layoutRectangle\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the location of the drawn text.\n    - id: format\n      type: System.Drawing.StringFormat\n      description: <xref href=\"System.Drawing.StringFormat\"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.\n  overload: System.Drawing.Graphics.DrawString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>s</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)\n  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawString(String,Font,Brush,Single,Single)\n  nameWithType: Graphics.DrawString(String,Font,Brush,Single,Single)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified text string at the specified location with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a text string to draw.  \\n  \\n-   Defines the font as Arial (16pt).  \\n  \\n-   Creates a solid black brush to draw with.  \\n  \\n-   Creates a point for the upper-left corner at which to draw the text.  \\n  \\n-   Draws the string to the screen using the font, brush, and destination point.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/add/codesnippet/cpp/770eeee0-f64d-405f-a03c-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#88](~/add/codesnippet/csharp/770eeee0-f64d-405f-a03c-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/add/codesnippet/visualbasic/770eeee0-f64d-405f-a03c-_1.vb)]\"\n  syntax:\n    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);\n    parameters:\n    - id: s\n      type: System.String\n      description: String to draw.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the drawn text.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the drawn text.\n  overload: System.Drawing.Graphics.DrawString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>s</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)\n  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: DrawString(String,Font,Brush,Single,Single,StringFormat)\n  nameWithType: Graphics.DrawString(String,Font,Brush,Single,Single,StringFormat)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,Single,Single,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Draws the specified text string at the specified location with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref href=\"System.Drawing.Font\"></xref> objects using the formatting attributes of the specified <xref href=\"System.Drawing.StringFormat\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a text string to draw.  \\n  \\n-   Defines the font as Arial (16pt).  \\n  \\n-   Creates a solid, black brush to draw with.  \\n  \\n-   Creates the coordinates of a point for the upper-left corner at which to draw the text.  \\n  \\n-   Sets the format of the string to draw vertically  \\n  \\n-   Draws the string to the screen using the font, brush, destination point, and format.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/add/codesnippet/cpp/d180666f-5277-4a3e-9c46-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#89](~/add/codesnippet/csharp/d180666f-5277-4a3e-9c46-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/add/codesnippet/visualbasic/d180666f-5277-4a3e-9c46-_1.vb)]\"\n  syntax:\n    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);\n    parameters:\n    - id: s\n      type: System.String\n      description: String to draw.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the color and texture of the drawn text.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the drawn text.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the drawn text.\n    - id: format\n      type: System.Drawing.StringFormat\n      description: <xref href=\"System.Drawing.StringFormat\"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.\n  overload: System.Drawing.Graphics.DrawString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>s</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)\n  id: EndContainer(System.Drawing.Drawing2D.GraphicsContainer)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EndContainer(GraphicsContainer)\n  nameWithType: Graphics.EndContainer(GraphicsContainer)\n  fullName: System.Drawing.Graphics.EndContainer(GraphicsContainer)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Closes the current graphics container and restores the state of this <xref href=\"System.Drawing.Graphics\"></xref> to the state saved by a call to the <xref:System.Drawing.Graphics.BeginContainer*> method.\n  remarks: \"Use this method with the <xref:System.Drawing.Graphics.BeginContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.  \\n  \\n When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the EndContainer method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \\n  \\n Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the EndContainer method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the EndContainer method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.  \\n  \\n Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an EndContainer method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.  \\n  \\n When you call the EndContainer method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Opens a new graphics container and saves the old container.  \\n  \\n-   Translates the world coordinates in the container.  \\n  \\n-   Fills a red rectangle in the (translated coordinates of the) new container.  \\n  \\n-   Closes the new container and restores the saved container.  \\n  \\n-   Fills a green rectangle (to the untranslated coordinates) of the saved container.  \\n  \\n The result is a green rectangle that overlies a red rectangle of the same size.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/add/codesnippet/cpp/e4c99678-fc56-4e9c-af9b-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#90](~/add/codesnippet/csharp/e4c99678-fc56-4e9c-af9b-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/add/codesnippet/visualbasic/e4c99678-fc56-4e9c-af9b-_1.vb)]\"\n  syntax:\n    content: public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);\n    parameters:\n    - id: container\n      type: System.Drawing.Drawing2D.GraphicsContainer\n      description: <xref href=\"System.Drawing.Drawing2D.GraphicsContainer\"></xref> that represents the container this method restores.\n  overload: System.Drawing.Graphics.EndContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.Point\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.PointF\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.Point\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.PointF\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.Point\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.Point\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.PointF\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.PointF\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.Point\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.PointF\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcUnit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.Point\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: unit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.Point[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: unit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoint\n      type: System.Drawing.PointF\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: unit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destPoints\n      type: System.Drawing.PointF[]\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: unit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.Rectangle\n      description: To be added.\n    - id: unit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  syntax:\n    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);\n    parameters:\n    - id: metafile\n      type: System.Drawing.Imaging.Metafile\n      description: To be added.\n    - id: destRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: srcRect\n      type: System.Drawing.RectangleF\n      description: To be added.\n    - id: unit\n      type: System.Drawing.GraphicsUnit\n      description: To be added.\n    - id: callback\n      type: System.Drawing.Graphics.EnumerateMetafileProc\n      description: To be added.\n    - id: callbackData\n      type: System.IntPtr\n      description: To be added.\n    - id: imageAttr\n      type: System.Drawing.Imaging.ImageAttributes\n      description: To be added.\n  overload: System.Drawing.Graphics.EnumerateMetafile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)\n  id: ExcludeClip(System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ExcludeClip(Rectangle)\n  nameWithType: Graphics.ExcludeClip(Rectangle)\n  fullName: System.Drawing.Graphics.ExcludeClip(Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to exclude the area specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: This method excludes the area specified by the `rect` parameter from the current clip region and assigns the resulting area to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a 100 pixel by 100 pixel rectangle whose upper-left corner is at the coordinate (100, 100).  \\n  \\n-   Creates a region defined by the rectangle.  \\n  \\n-   Sets the clipping region to exclude the rectangular region.  \\n  \\n-   Fills a 300 pixel by 300 pixel rectangle whose upper-left corner is at the coordinate (0, 0) with a solid blue brush.  \\n  \\n The result is a blue rectangle with a square region toward its lower-right corner missing.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/add/codesnippet/cpp/m-system.drawing.graphic_0_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#92](~/add/codesnippet/csharp/m-system.drawing.graphic_0_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/add/codesnippet/visualbasic/m-system.drawing.graphic_0_1.vb)]\"\n  syntax:\n    content: public void ExcludeClip (System.Drawing.Rectangle rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that specifies the rectangle to exclude from the clip region.\n  overload: System.Drawing.Graphics.ExcludeClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)\n  id: ExcludeClip(System.Drawing.Region)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ExcludeClip(Region)\n  nameWithType: Graphics.ExcludeClip(Region)\n  fullName: System.Drawing.Graphics.ExcludeClip(Region)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to exclude the area specified by a <xref href=\"System.Drawing.Region\"></xref>.\n  remarks: This method excludes the area specified by the `region` parameter from the current clip region and assigns the resulting area to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a 100 pixel by 100 pixel rectangle whose upper-left corner is at the coordinate (100, 100).  \\n  \\n-   Sets the clipping region to exclude the rectangle.  \\n  \\n-   Fills a 300 pixel by 300 pixel rectangle whose upper-left corner is at the coordinate (0, 0) with a solid blue brush.  \\n  \\n The result is a blue rectangle with a square area toward its lower-right corner missing.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/add/codesnippet/cpp/m-system.drawing.graphic_3_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#91](~/add/codesnippet/csharp/m-system.drawing.graphic_3_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/add/codesnippet/visualbasic/m-system.drawing.graphic_3_1.vb)]\"\n  syntax:\n    content: public void ExcludeClip (System.Drawing.Region region);\n    parameters:\n    - id: region\n      type: System.Drawing.Region\n      description: <xref href=\"System.Drawing.Region\"></xref> that specifies the region to exclude from the clip region.\n  overload: System.Drawing.Graphics.ExcludeClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])\n  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillClosedCurve(Brush,Point[])\n  nameWithType: Graphics.FillClosedCurve(Brush,Point[])\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: \"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates an array of four points to define a spline.  \\n  \\n-   Fills the curve on the screen.  \\n  \\n The curve has a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/add/codesnippet/cpp/c7de0d70-1d4a-415d-8e0a-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#93](~/add/codesnippet/csharp/c7de0d70-1d4a-415d-8e0a-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/add/codesnippet/visualbasic/c7de0d70-1d4a-415d-8e0a-_1.vb)]\"\n  syntax:\n    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline.\n  overload: System.Drawing.Graphics.FillClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])\n  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillClosedCurve(Brush,PointF[])\n  nameWithType: Graphics.FillClosedCurve(Brush,PointF[])\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: \"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.PointF> structures.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates an array of four points to define a spline.  \\n  \\n-   Fills the curve on the screen.  \\n  \\n The curve has a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/add/codesnippet/cpp/27ae27b1-8fc7-46da-97c2-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#96](~/add/codesnippet/csharp/27ae27b1-8fc7-46da-97c2-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/add/codesnippet/visualbasic/27ae27b1-8fc7-46da-97c2-_1.vb)]\"\n  syntax:\n    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline.\n  overload: System.Drawing.Graphics.FillClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)\n  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillClosedCurve(Brush,Point[],FillMode)\n  nameWithType: Graphics.FillClosedCurve(Brush,Point[],FillMode)\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,Point[],FillMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures using the specified fill mode.\n  remarks: \"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates an array of four points to define a spline.  \\n  \\n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode>.  \\n  \\n-   Fills the curve on the screen.  \\n  \\n The curve has a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/add/codesnippet/cpp/d8cdaeb5-d9cb-4113-8859-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#94](~/add/codesnippet/csharp/d8cdaeb5-d9cb-4113-8859-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/add/codesnippet/visualbasic/d8cdaeb5-d9cb-4113-8859-_1.vb)]\"\n  syntax:\n    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline.\n    - id: fillmode\n      type: System.Drawing.Drawing2D.FillMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled.\n  overload: System.Drawing.Graphics.FillClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)\n  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillClosedCurve(Brush,PointF[],FillMode)\n  nameWithType: Graphics.FillClosedCurve(Brush,PointF[],FillMode)\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,PointF[],FillMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures using the specified fill mode.\n  remarks: \"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \\n  \\n This method uses a default tension of 0.5.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates an array of four points to define a spline.  \\n  \\n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode>.  \\n  \\n-   Fills the curve on the screen.  \\n  \\n The curve has a default tension of 0.5.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/add/codesnippet/cpp/eba35974-b853-45cc-982b-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#97](~/add/codesnippet/csharp/eba35974-b853-45cc-982b-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/add/codesnippet/visualbasic/eba35974-b853-45cc-982b-_1.vb)]\"\n  syntax:\n    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline.\n    - id: fillmode\n      type: System.Drawing.Drawing2D.FillMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled.\n  overload: System.Drawing.Graphics.FillClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)\n  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillClosedCurve(Brush,Point[],FillMode,Single)\n  nameWithType: Graphics.FillClosedCurve(Brush,Point[],FillMode,Single)\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,Point[],FillMode,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.Point\"></xref> structures using the specified fill mode and tension.\n  remarks: \"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \\n  \\n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates an array of four points to define a spline.  \\n  \\n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode>.  \\n  \\n-   Sets the tension to 1.0.  \\n  \\n-   Fills the curve on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/add/codesnippet/cpp/a2a6c4a4-a444-44ec-86d2-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#95](~/add/codesnippet/csharp/a2a6c4a4-a444-44ec-86d2-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/add/codesnippet/visualbasic/a2a6c4a4-a444-44ec-86d2-_1.vb)]\"\n  syntax:\n    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that define the spline.\n    - id: fillmode\n      type: System.Drawing.Drawing2D.FillMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled.\n    - id: tension\n      type: System.Single\n      description: Value greater than or equal to 0.0F that specifies the tension of the curve.\n  overload: System.Drawing.Graphics.FillClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)\n  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillClosedCurve(Brush,PointF[],FillMode,Single)\n  nameWithType: Graphics.FillClosedCurve(Brush,PointF[],FillMode,Single)\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,PointF[],FillMode,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href=\"System.Drawing.PointF\"></xref> structures using the specified fill mode and tension.\n  remarks: \"This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \\n  \\n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \\n  \\n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates an array of four points to define a spline.  \\n  \\n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode>.  \\n  \\n-   Sets the tension to 1.0.  \\n  \\n-   Fills the curve on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/add/codesnippet/cpp/0df0de76-385f-475b-bd9e-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#98](~/add/codesnippet/csharp/0df0de76-385f-475b-bd9e-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/add/codesnippet/visualbasic/0df0de76-385f-475b-bd9e-_1.vb)]\"\n  syntax:\n    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: A <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that define the spline.\n    - id: fillmode\n      type: System.Drawing.Drawing2D.FillMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines how the curve is filled.\n    - id: tension\n      type: System.Single\n      description: Value greater than or equal to 0.0F that specifies the tension of the curve.\n  overload: System.Drawing.Graphics.FillClosedCurve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)\n  id: FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillEllipse(Brush,Rectangle)\n  nameWithType: Graphics.FillEllipse(Brush,Rectangle)\n  fullName: System.Drawing.Graphics.FillEllipse(Brush,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of an ellipse defined by a bounding rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `rect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates a rectangle that bounds an ellipse.  \\n  \\n-   Fills the ellipse on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/add/codesnippet/cpp/1db3c93b-c561-45c2-82d1-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#99](~/add/codesnippet/csharp/1db3c93b-c561-45c2-82d1-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/add/codesnippet/visualbasic/1db3c93b-c561-45c2-82d1-_1.vb)]\"\n  syntax:\n    content: public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Graphics.FillEllipse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)\n  id: FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillEllipse(Brush,RectangleF)\n  nameWithType: Graphics.FillEllipse(Brush,RectangleF)\n  fullName: System.Drawing.Graphics.FillEllipse(Brush,RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of an ellipse defined by a bounding rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure.\n  remarks: This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `rect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates a rectangle that bounds an ellipse.  \\n  \\n-   Fills the ellipse on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/add/codesnippet/cpp/beddd307-c00b-4344-8ad5-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#100](~/add/codesnippet/csharp/beddd307-c00b-4344-8ad5-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/add/codesnippet/visualbasic/beddd307-c00b-4344-8ad5-_1.vb)]\"\n  syntax:\n    content: public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Graphics.FillEllipse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillEllipse(Brush,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.FillEllipse(Brush,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.FillEllipse(Brush,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.\n  remarks: This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `x`, `y`, `width`, and `height` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates the location and size of a rectangle that bounds an ellipse.  \\n  \\n-   Fills the ellipse on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/add/codesnippet/cpp/0631ab9a-0826-4ecd-a349-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#101](~/add/codesnippet/csharp/0631ab9a-0826-4ecd-a349-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/add/codesnippet/visualbasic/0631ab9a-0826-4ecd-a349-_1.vb)]\"\n  syntax:\n    content: public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: width\n      type: System.Int32\n      description: Width of the bounding rectangle that defines the ellipse.\n    - id: height\n      type: System.Int32\n      description: Height of the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Graphics.FillEllipse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)\n  id: FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillEllipse(Brush,Single,Single,Single,Single)\n  nameWithType: Graphics.FillEllipse(Brush,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.FillEllipse(Brush,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.\n  remarks: This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `x`, `y`, `width`, and `height` parameters.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates the location and size of a rectangle that bounds an ellipse.  \\n  \\n-   Fills the ellipse on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/add/codesnippet/cpp/a7ad2be7-2424-4c4e-be93-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#102](~/add/codesnippet/csharp/a7ad2be7-2424-4c4e-be93-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/add/codesnippet/visualbasic/a7ad2be7-2424-4c4e-be93-_1.vb)]\"\n  syntax:\n    content: public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.\n    - id: width\n      type: System.Single\n      description: Width of the bounding rectangle that defines the ellipse.\n    - id: height\n      type: System.Single\n      description: Height of the bounding rectangle that defines the ellipse.\n  overload: System.Drawing.Graphics.FillEllipse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)\n  id: FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillPath(Brush,GraphicsPath)\n  nameWithType: Graphics.FillPath(Brush,GraphicsPath)\n  fullName: System.Drawing.Graphics.FillPath(Brush,GraphicsPath)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: A <xref:System.Drawing.Drawing2D.GraphicsPath> consists of a series of line and curve segments. If the path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates a graphics path object.  \\n  \\n-   Adds an ellipse to the graphics path.  \\n  \\n-   Fills the path on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/add/codesnippet/cpp/bd82f623-b5ed-4a80-9aac-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#103](~/add/codesnippet/csharp/bd82f623-b5ed-4a80-9aac-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/add/codesnippet/visualbasic/bd82f623-b5ed-4a80-9aac-_1.vb)]\"\n  syntax:\n    content: public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: path\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> that represents the path to fill.\n  overload: System.Drawing.Graphics.FillPath*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>path</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)\n  id: FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillPie(Brush,Rectangle,Single,Single)\n  nameWithType: Graphics.FillPie(Brush,Rectangle,Single,Single)\n  fullName: System.Drawing.Graphics.FillPie(Brush,Rectangle,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a pie section defined by an ellipse specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure and two radial lines.\n  remarks: \"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters and the arc between the intersections of those radial lines with the ellipse.  \\n  \\n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates a rectangle that bounds an ellipse.  \\n  \\n-   Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).  \\n  \\n-   Fills the pie-shaped area of the ellipse on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/add/codesnippet/cpp/35752974-fb8e-4190-89b3-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#104](~/add/codesnippet/csharp/35752974-fb8e-4190-89b3-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/add/codesnippet/visualbasic/35752974-fb8e-4190-89b3-_1.vb)]\"\n  syntax:\n    content: public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: startAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the x-axis to the first side of the pie section.\n    - id: sweepAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the `startAngle` parameter to the second side of the pie section.\n  overload: System.Drawing.Graphics.FillPie*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillPie(Brush,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.FillPie(Brush,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.FillPie(Brush,Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.\n  remarks: \"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters and the arc between the intersections of those radial lines with the ellipse.  \\n  \\n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates the location and size of a rectangle that bounds an ellipse.  \\n  \\n-   Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).  \\n  \\n-   Fills the pie-shaped area of the ellipse on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/add/codesnippet/cpp/cd01f2a4-bda4-4661-8de0-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#105](~/add/codesnippet/csharp/cd01f2a4-bda4-4661-8de0-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/add/codesnippet/visualbasic/cd01f2a4-bda4-4661-8de0-_1.vb)]\"\n  syntax:\n    content: public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: width\n      type: System.Int32\n      description: Width of the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: height\n      type: System.Int32\n      description: Height of the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: startAngle\n      type: System.Int32\n      description: Angle in degrees measured clockwise from the x-axis to the first side of the pie section.\n    - id: sweepAngle\n      type: System.Int32\n      description: Angle in degrees measured clockwise from the `startAngle` parameter to the second side of the pie section.\n  overload: System.Drawing.Graphics.FillPie*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  id: FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillPie(Brush,Single,Single,Single,Single,Single,Single)\n  nameWithType: Graphics.FillPie(Brush,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.FillPie(Brush,Single,Single,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.\n  remarks: \"This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \\n  \\n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid red brush.  \\n  \\n-   Creates the location and size of a rectangle that bounds an ellipse.  \\n  \\n-   Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).  \\n  \\n-   Fills the pie-shaped area of the ellipse on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/add/codesnippet/cpp/696347c5-468c-4f10-8ec4-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#106](~/add/codesnippet/csharp/696347c5-468c-4f10-8ec4-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/add/codesnippet/visualbasic/696347c5-468c-4f10-8ec4-_1.vb)]\"\n  syntax:\n    content: public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: width\n      type: System.Single\n      description: Width of the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: height\n      type: System.Single\n      description: Height of the bounding rectangle that defines the ellipse from which the pie section comes.\n    - id: startAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the x-axis to the first side of the pie section.\n    - id: sweepAngle\n      type: System.Single\n      description: Angle in degrees measured clockwise from the `startAngle` parameter to the second side of the pie section.\n  overload: System.Drawing.Graphics.FillPie*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])\n  id: FillPolygon(System.Drawing.Brush,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillPolygon(Brush,Point[])\n  nameWithType: Graphics.FillPolygon(Brush,Point[])\n  fullName: System.Drawing.Graphics.FillPolygon(Brush,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a polygon defined by an array of points specified by <xref href=\"System.Drawing.Point\"></xref> structures.\n  remarks: Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates an array of seven points to define a polygon.  \\n  \\n-   Fills the polygonal area on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/add/codesnippet/cpp/8c42bd4c-a5b4-4787-a3af-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#107](~/add/codesnippet/csharp/8c42bd4c-a5b4-4787-a3af-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/add/codesnippet/visualbasic/8c42bd4c-a5b4-4787-a3af-_1.vb)]\"\n  syntax:\n    content: public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the vertices of the polygon to fill.\n  overload: System.Drawing.Graphics.FillPolygon*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])\n  id: FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillPolygon(Brush,PointF[])\n  nameWithType: Graphics.FillPolygon(Brush,PointF[])\n  fullName: System.Drawing.Graphics.FillPolygon(Brush,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a polygon defined by an array of points specified by <xref href=\"System.Drawing.PointF\"></xref> structures.\n  remarks: Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates an array of seven points to define a polygon.  \\n  \\n-   Fills the polygonal area on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/add/codesnippet/cpp/ed54e036-19c0-4e81-8255-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#109](~/add/codesnippet/csharp/ed54e036-19c0-4e81-8255-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/add/codesnippet/visualbasic/ed54e036-19c0-4e81-8255-_1.vb)]\"\n  syntax:\n    content: public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the vertices of the polygon to fill.\n  overload: System.Drawing.Graphics.FillPolygon*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)\n  id: FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillPolygon(Brush,Point[],FillMode)\n  nameWithType: Graphics.FillPolygon(Brush,Point[],FillMode)\n  fullName: System.Drawing.Graphics.FillPolygon(Brush,Point[],FillMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a polygon defined by an array of points specified by <xref href=\"System.Drawing.Point\"></xref> structures using the specified fill mode.\n  remarks: Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates an array of seven points to define a polygon.  \\n  \\n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode>.  \\n  \\n-   Fills the polygonal area on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/add/codesnippet/cpp/ad884b76-3209-4ec3-b1c6-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#108](~/add/codesnippet/csharp/ad884b76-3209-4ec3-b1c6-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/add/codesnippet/visualbasic/ad884b76-3209-4ec3-b1c6-_1.vb)]\"\n  syntax:\n    content: public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that represent the vertices of the polygon to fill.\n    - id: fillMode\n      type: System.Drawing.Drawing2D.FillMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines the style of the fill.\n  overload: System.Drawing.Graphics.FillPolygon*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)\n  id: FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillPolygon(Brush,PointF[],FillMode)\n  nameWithType: Graphics.FillPolygon(Brush,PointF[],FillMode)\n  fullName: System.Drawing.Graphics.FillPolygon(Brush,PointF[],FillMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a polygon defined by an array of points specified by <xref href=\"System.Drawing.PointF\"></xref> structures using the specified fill mode.\n  remarks: Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates an array of seven points to define a polygon.  \\n  \\n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode>.  \\n  \\n-   Fills the polygonal area on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/add/codesnippet/cpp/62d0b4ff-f244-4431-9034-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples2#110](~/add/codesnippet/csharp/62d0b4ff-f244-4431-9034-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/add/codesnippet/visualbasic/62d0b4ff-f244-4431-9034-_1.vb)]\"\n  syntax:\n    content: public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: points\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the vertices of the polygon to fill.\n    - id: fillMode\n      type: System.Drawing.Drawing2D.FillMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FillMode\"></xref> enumeration that determines the style of the fill.\n  overload: System.Drawing.Graphics.FillPolygon*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>points</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)\n  id: FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillRectangle(Brush,Rectangle)\n  nameWithType: Graphics.FillRectangle(Brush,Rectangle)\n  fullName: System.Drawing.Graphics.FillRectangle(Brush,Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: This method fills the interior of the rectangle defined by the `rect` parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates a rectangle.  \\n  \\n-   Fills the rectangular area on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/add/codesnippet/cpp/6be38582-3c2a-4e5e-b5a0-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#111](~/add/codesnippet/csharp/6be38582-3c2a-4e5e-b5a0-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/add/codesnippet/visualbasic/6be38582-3c2a-4e5e-b5a0-_1.vb)]\"\n  syntax:\n    content: public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the rectangle to fill.\n  overload: System.Drawing.Graphics.FillRectangle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)\n  id: FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillRectangle(Brush,RectangleF)\n  nameWithType: Graphics.FillRectangle(Brush,RectangleF)\n  fullName: System.Drawing.Graphics.FillRectangle(Brush,RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure.\n  remarks: This method fills the interior of the rectangle defined by the `rect` parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates a rectangle.  \\n  \\n-   Fills the rectangular area on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/add/codesnippet/cpp/e5a08c2a-7ade-4531-a080-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#112](~/add/codesnippet/csharp/e5a08c2a-7ade-4531-a080-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/add/codesnippet/visualbasic/e5a08c2a-7ade-4531-a080-_1.vb)]\"\n  syntax:\n    content: public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the rectangle to fill.\n  overload: System.Drawing.Graphics.FillRectangle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillRectangle(Brush,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.FillRectangle(Brush,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.FillRectangle(Brush,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.\n  remarks: This method fills the interior of the rectangle defined by the`x`, `y`, `width`, and `height` parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates the location and size of a rectangle.  \\n  \\n-   Fills the rectangular area on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/add/codesnippet/cpp/146a0316-72ff-4e5e-9cbc-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#113](~/add/codesnippet/csharp/146a0316-72ff-4e5e-9cbc-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/add/codesnippet/visualbasic/146a0316-72ff-4e5e-9cbc-_1.vb)]\"\n  syntax:\n    content: public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the rectangle to fill.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the rectangle to fill.\n    - id: width\n      type: System.Int32\n      description: Width of the rectangle to fill.\n    - id: height\n      type: System.Int32\n      description: Height of the rectangle to fill.\n  overload: System.Drawing.Graphics.FillRectangle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)\n  id: FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillRectangle(Brush,Single,Single,Single,Single)\n  nameWithType: Graphics.FillRectangle(Brush,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.FillRectangle(Brush,Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.\n  remarks: This method fills the interior of the rectangle defined by the `x`, `y`, `width`, and `height` parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates the location and size of a rectangle.  \\n  \\n-   Fills the rectangular area on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/add/codesnippet/cpp/135842c8-bb57-4e26-91ec-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#114](~/add/codesnippet/csharp/135842c8-bb57-4e26-91ec-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/add/codesnippet/visualbasic/135842c8-bb57-4e26-91ec-_1.vb)]\"\n  syntax:\n    content: public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the rectangle to fill.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the rectangle to fill.\n    - id: width\n      type: System.Single\n      description: Width of the rectangle to fill.\n    - id: height\n      type: System.Single\n      description: Height of the rectangle to fill.\n  overload: System.Drawing.Graphics.FillRectangle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])\n  id: FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillRectangles(Brush,Rectangle[])\n  nameWithType: Graphics.FillRectangles(Brush,Rectangle[])\n  fullName: System.Drawing.Graphics.FillRectangles(Brush,Rectangle[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interiors of a series of rectangles specified by <xref href=\"System.Drawing.Rectangle\"></xref> structures.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates an array of three rectangles.  \\n  \\n-   Fills the three rectangular areas on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/add/codesnippet/cpp/4d10e835-c952-4b03-ba4f-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#115](~/add/codesnippet/csharp/4d10e835-c952-4b03-ba4f-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/add/codesnippet/visualbasic/4d10e835-c952-4b03-ba4f-_1.vb)]\"\n  syntax:\n    content: public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: rects\n      type: System.Drawing.Rectangle[]\n      description: Array of <xref href=\"System.Drawing.Rectangle\"></xref> structures that represent the rectangles to fill.\n  overload: System.Drawing.Graphics.FillRectangles*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>rects</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>rects</code> is a zero-length array.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])\n  id: FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillRectangles(Brush,RectangleF[])\n  nameWithType: Graphics.FillRectangles(Brush,RectangleF[])\n  fullName: System.Drawing.Graphics.FillRectangles(Brush,RectangleF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interiors of a series of rectangles specified by <xref href=\"System.Drawing.RectangleF\"></xref> structures.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates an array of three rectangles.  \\n  \\n-   Fills the three rectangular areas on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/add/codesnippet/cpp/8405bee3-4e81-48b5-91a1-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#116](~/add/codesnippet/csharp/8405bee3-4e81-48b5-91a1-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/add/codesnippet/visualbasic/8405bee3-4e81-48b5-91a1-_1.vb)]\"\n  syntax:\n    content: public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: rects\n      type: System.Drawing.RectangleF[]\n      description: Array of <xref href=\"System.Drawing.RectangleF\"></xref> structures that represent the rectangles to fill.\n  overload: System.Drawing.Graphics.FillRectangles*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>rects</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Rects</code> is a zero-length array.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)\n  id: FillRegion(System.Drawing.Brush,System.Drawing.Region)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FillRegion(Brush,Region)\n  nameWithType: Graphics.FillRegion(Brush,Region)\n  fullName: System.Drawing.Graphics.FillRegion(Brush,Region)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Fills the interior of a <xref href=\"System.Drawing.Region\"></xref>.\n  remarks: A <xref:System.Drawing.Region> is composed of rectangles and paths. If the region is not closed, an additional segment is added from the last point to the first point to close it.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates a solid blue brush.  \\n  \\n-   Creates a rectangle.  \\n  \\n-   Creates a rectangular region.  \\n  \\n-   Fills the rectangular region on the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/add/codesnippet/cpp/m-system.drawing.graphic_13_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#117](~/add/codesnippet/csharp/m-system.drawing.graphic_13_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/add/codesnippet/visualbasic/m-system.drawing.graphic_13_1.vb)]\"\n  syntax:\n    content: public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of the fill.\n    - id: region\n      type: System.Drawing.Region\n      description: <xref href=\"System.Drawing.Region\"></xref> that represents the area to fill.\n  overload: System.Drawing.Graphics.FillRegion*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>brush</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>region</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Finalize\n  id: Finalize\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: Graphics.Finalize()\n  fullName: System.Drawing.Graphics.Finalize()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.\n  syntax:\n    content: ~Graphics ();\n    parameters: []\n  overload: System.Drawing.Graphics.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Flush\n  id: Flush\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: Graphics.Flush()\n  fullName: System.Drawing.Graphics.Flush()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.\n  remarks: This method starts a flush and returns immediately without waiting for any currently executing graphics operation to finish.\n  syntax:\n    content: public void Flush ();\n    parameters: []\n  overload: System.Drawing.Graphics.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)\n  id: Flush(System.Drawing.Drawing2D.FlushIntention)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Flush(FlushIntention)\n  nameWithType: Graphics.Flush(FlushIntention)\n  fullName: System.Drawing.Graphics.Flush(FlushIntention)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to return before the operations finish.\n  remarks: A value of <xref:System.Drawing.Drawing2D.FlushIntention> for the `intention` parameter specifies that the method return immediately after beginning the flush, while a value of <xref:System.Drawing.Drawing2D.FlushIntention> specifies that the method wait before returning until any existing operations finish.\n  syntax:\n    content: public void Flush (System.Drawing.Drawing2D.FlushIntention intention);\n    parameters:\n    - id: intention\n      type: System.Drawing.Drawing2D.FlushIntention\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.FlushIntention\"></xref> enumeration that specifies whether the method returns immediately or waits for any existing operations to finish.\n  overload: System.Drawing.Graphics.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FromHdc(System.IntPtr)\n  id: FromHdc(System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FromHdc(IntPtr)\n  nameWithType: Graphics.FromHdc(IntPtr)\n  fullName: System.Drawing.Graphics.FromHdc(IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Creates a new <xref href=\"System.Drawing.Graphics\"></xref> from the specified handle to a device context.\n  remarks: \"You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHdc method.  \\n  \\n Even if the display device has an associated ICM color profile, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] will not use that profile by default. To enable ICM for a <xref:System.Drawing.Graphics>, construct the <xref:System.Drawing.Graphics> from an HDC after you pass the HDC (and ICM_ON) to the `SetICMMode` function. Then any drawing done by the <xref:System.Drawing.Graphics> will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.  \\n  \\n The state of the device context (mapping mode, logical unit, and the like) at the time you call FromHdc can affect rendering done by the <xref:System.Drawing.Graphics>.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates an internal pointer type variable `hdc` and sets it to the handle to the device context of the graphics object of the form.  \\n  \\n-   Creates a new graphics object using `hdc`.  \\n  \\n-   Draws a rectangle with the new graphics object (on the screen).  \\n  \\n-   Releases the new graphics object using `hdc`.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/add/codesnippet/cpp/m-system.drawing.graphic_31_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#118](~/add/codesnippet/csharp/m-system.drawing.graphic_31_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/add/codesnippet/visualbasic/m-system.drawing.graphic_31_1.vb)]\"\n  syntax:\n    content: public static System.Drawing.Graphics FromHdc (IntPtr hdc);\n    parameters:\n    - id: hdc\n      type: System.IntPtr\n      description: Handle to a device context.\n    return:\n      type: System.Drawing.Graphics\n      description: This method returns a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified device context.\n  overload: System.Drawing.Graphics.FromHdc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)\n  id: FromHdc(System.IntPtr,System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FromHdc(IntPtr,IntPtr)\n  nameWithType: Graphics.FromHdc(IntPtr,IntPtr)\n  fullName: System.Drawing.Graphics.FromHdc(IntPtr,IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Creates a new <xref href=\"System.Drawing.Graphics\"></xref> from the specified handle to a device context and handle to a device.\n  remarks: \"You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHdc method.  \\n  \\n Even if the display device has an associated ICM color profile, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] will not use that profile by default. To enable ICM for a <xref:System.Drawing.Graphics>, construct the <xref:System.Drawing.Graphics> from an HDC after you pass the HDC (and ICM_ON) to the `SetICMMode` function. Then any drawing done by the <xref:System.Drawing.Graphics> will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.  \\n  \\n The state of the device context (mapping mode, logical unit, and the like) at the time you call FromHdc can affect rendering done by the <xref:System.Drawing.Graphics>.  \\n  \\n The device handle is typically used to query specific printer capabilities.\"\n  syntax:\n    content: public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);\n    parameters:\n    - id: hdc\n      type: System.IntPtr\n      description: Handle to a device context.\n    - id: hdevice\n      type: System.IntPtr\n      description: Handle to a device.\n    return:\n      type: System.Drawing.Graphics\n      description: This method returns a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified device context and device.\n  overload: System.Drawing.Graphics.FromHdc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FromHdcInternal(System.IntPtr)\n  id: FromHdcInternal(System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FromHdcInternal(IntPtr)\n  nameWithType: Graphics.FromHdcInternal(IntPtr)\n  fullName: System.Drawing.Graphics.FromHdcInternal(IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Returns a <xref href=\"System.Drawing.Graphics\"></xref> for the specified device context.\n  remarks: This method should not be used.\n  syntax:\n    content: public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);\n    parameters:\n    - id: hdc\n      type: System.IntPtr\n      description: Handle to a device context.\n    return:\n      type: System.Drawing.Graphics\n      description: A <xref href=\"System.Drawing.Graphics\"></xref> for the specified device context.\n  overload: System.Drawing.Graphics.FromHdcInternal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FromHwnd(System.IntPtr)\n  id: FromHwnd(System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FromHwnd(IntPtr)\n  nameWithType: Graphics.FromHwnd(IntPtr)\n  fullName: System.Drawing.Graphics.FromHwnd(IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Creates a new <xref href=\"System.Drawing.Graphics\"></xref> from the specified handle to a window.\n  remarks: You should always call the<xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromHwnd method.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler, as well as `thisForm`, the <xref:System.Windows.Forms.Form> for the example. The code performs the following actions:  \\n  \\n-   Creates a new internal pointer variable `hwnd` and sets it to the handle of the example's form.  \\n  \\n-   Creates a new <xref:System.Drawing.Graphics> from the handle.  \\n  \\n-   Draws a rectangle to the new <xref:System.Drawing.Graphics> using a red pen.  \\n  \\n-   Disposes the new <xref:System.Drawing.Graphics>.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/add/codesnippet/cpp/m-system.drawing.graphic_17_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#119](~/add/codesnippet/csharp/m-system.drawing.graphic_17_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/add/codesnippet/visualbasic/m-system.drawing.graphic_17_1.vb)]\"\n  syntax:\n    content: public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);\n    parameters:\n    - id: hwnd\n      type: System.IntPtr\n      description: Handle to a window.\n    return:\n      type: System.Drawing.Graphics\n      description: This method returns a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified window handle.\n  overload: System.Drawing.Graphics.FromHwnd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FromHwndInternal(System.IntPtr)\n  id: FromHwndInternal(System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FromHwndInternal(IntPtr)\n  nameWithType: Graphics.FromHwndInternal(IntPtr)\n  fullName: System.Drawing.Graphics.FromHwndInternal(IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Creates a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified windows handle.\n  remarks: This method should not be used.\n  syntax:\n    content: public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);\n    parameters:\n    - id: hwnd\n      type: System.IntPtr\n      description: Handle to a window.\n    return:\n      type: System.Drawing.Graphics\n      description: A <xref href=\"System.Drawing.Graphics\"></xref> for the specified window handle.\n  overload: System.Drawing.Graphics.FromHwndInternal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.FromImage(System.Drawing.Image)\n  id: FromImage(System.Drawing.Image)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: FromImage(Image)\n  nameWithType: Graphics.FromImage(Image)\n  fullName: System.Drawing.Graphics.FromImage(Image)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Creates a new <xref href=\"System.Drawing.Graphics\"></xref> from the specified <xref href=\"System.Drawing.Image\"></xref>.\n  remarks: \"If the image has an indexed pixel format, this method throws an exception with the message, \\\"A Graphics object cannot be created from an image that has an indexed pixel format.\\\" The indexed pixel formats are shown in the following list.  \\n  \\n-   <xref:System.Drawing.Imaging.PixelFormat>  \\n  \\n-   <xref:System.Drawing.Imaging.PixelFormat>  \\n  \\n-   <xref:System.Drawing.Imaging.PixelFormat>  \\n  \\n You can save the indexed image as another format by using the <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> method and then retrieve a <xref:System.Drawing.Graphics> object for the new image.  \\n  \\n This method also throws an exception if the image has any of the following pixel formats.  \\n  \\n-   <xref:System.Drawing.Imaging.PixelFormat>  \\n  \\n-   <xref:System.Drawing.Imaging.PixelFormat>  \\n  \\n-   <xref:System.Drawing.Imaging.PixelFormat>  \\n  \\n-   <xref:System.Drawing.Imaging.PixelFormat>  \\n  \\n You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the FromImage method.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \\n  \\n-   Creates an <xref:System.Drawing.Image> from a graphics file SampImag.jpg in the example folder.  \\n  \\n-   Creates a <xref:System.Drawing.Graphics> from the <xref:System.Drawing.Image>.  \\n  \\n-   Alters the image by filling a rectangle within it.  \\n  \\n-   Draws the <xref:System.Drawing.Image> to the screen.  \\n  \\n-   Releases the created <xref:System.Drawing.Graphics>.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/add/codesnippet/cpp/m-system.drawing.graphic_8_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#120](~/add/codesnippet/csharp/m-system.drawing.graphic_8_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/add/codesnippet/visualbasic/m-system.drawing.graphic_8_1.vb)]\"\n  syntax:\n    content: public static System.Drawing.Graphics FromImage (System.Drawing.Image image);\n    parameters:\n    - id: image\n      type: System.Drawing.Image\n      description: <xref href=\"System.Drawing.Image\"></xref> from which to create the new <xref href=\"System.Drawing.Graphics\"></xref>.\n    return:\n      type: System.Drawing.Graphics\n      description: This method returns a new <xref href=\"System.Drawing.Graphics\"></xref> for the specified <xref href=\"System.Drawing.Image\"></xref>.\n  overload: System.Drawing.Graphics.FromImage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>image</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: <code>image</code> has an indexed pixel format or its format is undefined.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.GetContextInfo\n  id: GetContextInfo\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: GetContextInfo()\n  nameWithType: Graphics.GetContextInfo()\n  fullName: System.Drawing.Graphics.GetContextInfo()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets the cumulative graphics context.\n  remarks: The return value is an object array where the first element contains the cumulative clip region and the second element contains the cumulative translate/transform matrix.\n  syntax:\n    content: public object GetContextInfo ();\n    parameters: []\n    return:\n      type: System.Object\n      description: An <xref:System.Object> representing the cumulative graphics context.\n  overload: System.Drawing.Graphics.GetContextInfo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.GetHalftonePalette\n  id: GetHalftonePalette\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: GetHalftonePalette()\n  nameWithType: Graphics.GetHalftonePalette()\n  fullName: System.Drawing.Graphics.GetHalftonePalette()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets a handle to the current Windows halftone palette.\n  remarks: The purpose of the GetHalftonePalette method is to enable [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] to produce a better quality halftone when the display uses 8 bits per pixel. To display an image using the halftone palette, use the following procedure.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Defines interoperability <xref:System.Runtime.InteropServices.DllImportAttribute> attributes for the Windows DLL file gdi32.dll, which contains the necessary [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] functions.  \\n  \\n-   Defines the `SelectPalette` and `RealizePalette` functions in that DLL as external.  \\n  \\n-   Creates an image from an existing image file SampImag.jpg (which must be in the same folder as the example code file) and draws the image to the screen.  \\n  \\n-   Creates internal pointer type variables and sets their values to the handle to the graphics object and to the current Windows halftone palette, respectively.  \\n  \\n-   Selects and realizes the halftone palette.  \\n  \\n-   Creates a new graphics object using the `hdc` parameter.  \\n  \\n-   Draws the image again.  \\n  \\n-   Releases the handle to the device context.  \\n  \\n The result is two renderings of the sample image: one with the 16-bit palette and one with the 8-bit palette.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/add/codesnippet/cpp/m-system.drawing.graphic_40_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#121](~/add/codesnippet/csharp/m-system.drawing.graphic_40_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/add/codesnippet/visualbasic/m-system.drawing.graphic_40_1.vb)]\"\n  syntax:\n    content: public static IntPtr GetHalftonePalette ();\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: Internal pointer that specifies the handle to the palette.\n  overload: System.Drawing.Graphics.GetHalftonePalette*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.GetHdc\n  id: GetHdc\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: GetHdc()\n  nameWithType: Graphics.GetHdc()\n  fullName: System.Drawing.Graphics.GetHdc()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets the handle to the device context associated with this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"The device context is a Windows structure based on [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output. This method returns that device context with the exception of a font. Because a font is not selected, calls to the <xref:System.Drawing.Font.FromHdc%2A> method using a handle returned from the GetHdc method will fail.  \\n  \\n Calls to the GetHdc and <xref:System.Drawing.Graphics.ReleaseHdc%2A> methods must appear in pairs. During the scope of a GetHdc and <xref:System.Drawing.Graphics.ReleaseHdc%2A> method pair, you usually make only calls to [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] functions. Calls in that scope made to [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] methods of the <xref:System.Drawing.Graphics> that produced the `hdc` parameter fail with an `ObjectBusy` error. Also, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] ignores any state changes made to the <xref:System.Drawing.Graphics> of the `hdc` parameter in subsequent operations.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The example illustrates calling a Windows [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] function to perform the same task as a [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> method. The code performs the following actions:  \\n  \\n-   Defines the interoperability <xref:System.Runtime.InteropServices.DllImportAttribute> attribute for the Windows DLL file gdi32.dll. This DLL contains the desired [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] function.  \\n  \\n-   Defines the <xref:System.Drawing.Rectangle> function in that DLL as external.  \\n  \\n-   Creates a red pen.  \\n  \\n-   With the pen, draws a rectangle to the screen using the [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> method.  \\n  \\n-   Defines an internal pointer type variable `hdc` and sets its value to the handle to the device context of the form.  \\n  \\n-   Draws a rectangle to the screen using the [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> function.  \\n  \\n-   Releases the device context represented by the `hdc` parameter.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/add/codesnippet/cpp/m-system.drawing.graphic_12_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#122](~/add/codesnippet/csharp/m-system.drawing.graphic_12_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/add/codesnippet/visualbasic/m-system.drawing.graphic_12_1.vb)]\"\n  syntax:\n    content: public IntPtr GetHdc ();\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: Handle to the device context associated with this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.GetHdc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)\n  id: GetNearestColor(System.Drawing.Color)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: GetNearestColor(Color)\n  nameWithType: Graphics.GetNearestColor(Color)\n  fullName: System.Drawing.Graphics.GetNearestColor(Color)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets the nearest color to the specified <xref href=\"System.Drawing.Color\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates an arbitrary color with ARGB coordinates (255, 165, 63, 136).  \\n  \\n-   Creates a solid brush and sets its color to the specified color.  \\n  \\n-   Fills an ellipse using the arbitrary color.  \\n  \\n-   Creates a second color and sets its value to the nearest system ARGB color.  \\n  \\n-   Fills a second ellipse with this color.  \\n  \\n The result is two ellipses: the first drawn with the arbitrary specified color and the second drawn with the system color nearest the specified color.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/add/codesnippet/cpp/m-system.drawing.graphic_43_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#123](~/add/codesnippet/csharp/m-system.drawing.graphic_43_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/add/codesnippet/visualbasic/m-system.drawing.graphic_43_1.vb)]\"\n  syntax:\n    content: public System.Drawing.Color GetNearestColor (System.Drawing.Color color);\n    parameters:\n    - id: color\n      type: System.Drawing.Color\n      description: <xref href=\"System.Drawing.Color\"></xref> structure for which to find a match.\n    return:\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> structure that represents the nearest color to the one specified with the <code>color</code> parameter.\n  overload: System.Drawing.Graphics.GetNearestColor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.InterpolationMode\n  id: InterpolationMode\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: InterpolationMode\n  nameWithType: Graphics.InterpolationMode\n  fullName: System.Drawing.Graphics.InterpolationMode\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the interpolation mode associated with this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The interpolation mode determines how intermediate values between two endpoints are calculated.\n  syntax:\n    content: public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.InterpolationMode\n      description: One of the <xref href=\"System.Drawing.Drawing2D.InterpolationMode\"></xref> values.\n  overload: System.Drawing.Graphics.InterpolationMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)\n  id: IntersectClip(System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IntersectClip(Rectangle)\n  nameWithType: Graphics.IntersectClip(Rectangle)\n  fullName: System.Drawing.Graphics.IntersectClip(Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to the intersection of the current clip region and the specified <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the rectangle specified by the `rect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.  \\n  \\n-   Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).  \\n  \\n-   Fills a large rectangle that includes both previous rectangles with a solid blue brush.  \\n  \\n-   Resets the clipping region to infinite.  \\n  \\n-   Draws rectangles around the two clipping regions. It uses a black pen for the first clipping rectangle and a red pen for the second clipping region.  \\n  \\n The result is that only the intersection of the two rectangles is filled with blue.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/add/codesnippet/cpp/m-system.drawing.graphic_32_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#124](~/add/codesnippet/csharp/m-system.drawing.graphic_32_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/add/codesnippet/visualbasic/m-system.drawing.graphic_32_1.vb)]\"\n  syntax:\n    content: public void IntersectClip (System.Drawing.Rectangle rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure to intersect with the current clip region.\n  overload: System.Drawing.Graphics.IntersectClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)\n  id: IntersectClip(System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IntersectClip(RectangleF)\n  nameWithType: Graphics.IntersectClip(RectangleF)\n  fullName: System.Drawing.Graphics.IntersectClip(RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to the intersection of the current clip region and the specified <xref href=\"System.Drawing.RectangleF\"></xref> structure.\n  remarks: This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the rectangle specified by the `rect` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.  \\n  \\n-   Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).  \\n  \\n-   Fills a large rectangle that includes both previous rectangles with a solid blue brush.  \\n  \\n-   Resets the clipping region to infinite.  \\n  \\n-   Draws rectangles around the two clipping regions. It uses a black pen for the first clipping rectangle and a red pen for the second clipping region.  \\n  \\n The result is that only the intersection of the two rectangles is filled with blue.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/add/codesnippet/cpp/m-system.drawing.graphic_36_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#125](~/add/codesnippet/csharp/m-system.drawing.graphic_36_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/add/codesnippet/visualbasic/m-system.drawing.graphic_36_1.vb)]\"\n  syntax:\n    content: public void IntersectClip (System.Drawing.RectangleF rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure to intersect with the current clip region.\n  overload: System.Drawing.Graphics.IntersectClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.Region)\n  id: IntersectClip(System.Drawing.Region)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IntersectClip(Region)\n  nameWithType: Graphics.IntersectClip(Region)\n  fullName: System.Drawing.Graphics.IntersectClip(Region)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Updates the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to the intersection of the current clip region and the specified <xref href=\"System.Drawing.Region\"></xref>.\n  remarks: This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the region specified by the `region` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangle with upper-left corner at (0, 0).  \\n  \\n-   Creates a region and sets it to the rectangle, and sets the clipping region to this region.  \\n  \\n-   Creates a second rectangle with upper-left corner at (100, 100).  \\n  \\n-   Creates a region and sets it to the second rectangle, and sets the clipping region to the intersection of this region and the current clipping region (the first rectangle) using a combine mode of <xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Fills a large rectangle that includes both previous regions with a solid blue brush.  \\n  \\n-   Resets the clipping region to infinite.  \\n  \\n-   Draws rectangles around the two clipping regions. It uses a black pen for the first clipping region and a red pen for the second clipping region.  \\n  \\n The result is that only the intersection of the two regions is filled with blue.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/add/codesnippet/cpp/m-system.drawing.graphic_9_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#126](~/add/codesnippet/csharp/m-system.drawing.graphic_9_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/add/codesnippet/visualbasic/m-system.drawing.graphic_9_1.vb)]\"\n  syntax:\n    content: public void IntersectClip (System.Drawing.Region region);\n    parameters:\n    - id: region\n      type: System.Drawing.Region\n      description: <xref href=\"System.Drawing.Region\"></xref> to intersect with the current region.\n  overload: System.Drawing.Graphics.IntersectClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsClipEmpty\n  id: IsClipEmpty\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsClipEmpty\n  nameWithType: Graphics.IsClipEmpty\n  fullName: System.Drawing.Graphics.IsClipEmpty\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets a value indicating whether the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> is empty.\n  syntax:\n    content: public bool IsClipEmpty { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> is empty; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsClipEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisible(System.Drawing.Point)\n  id: IsVisible(System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisible(Point)\n  nameWithType: Graphics.IsVisible(Point)\n  fullName: System.Drawing.Graphics.IsVisible(Point)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Indicates whether the specified <xref href=\"System.Drawing.Point\"></xref> structure is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Creates two points, one inside the clipping region and one outside.  \\n  \\n-   Tests each of the points for visibility and draws only the visible one.  \\n  \\n The result is one small red circle, which is within the clip region.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/add/codesnippet/cpp/m-system.drawing.graphic_6_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#127](~/add/codesnippet/csharp/m-system.drawing.graphic_6_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/add/codesnippet/visualbasic/m-system.drawing.graphic_6_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (System.Drawing.Point point);\n    parameters:\n    - id: point\n      type: System.Drawing.Point\n      description: <xref href=\"System.Drawing.Point\"></xref> structure to test for visibility.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point specified by the <code>point</code> parameter is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisible(System.Drawing.PointF)\n  id: IsVisible(System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisible(PointF)\n  nameWithType: Graphics.IsVisible(PointF)\n  fullName: System.Drawing.Graphics.IsVisible(PointF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Indicates whether the specified <xref href=\"System.Drawing.PointF\"></xref> structure is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics of the form using <xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Creates two points, one inside the clipping region and one outside.  \\n  \\n-   Tests each of the points for visibility and draws only the visible one.  \\n  \\n The result is one small red circle, which is within the clip region.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/add/codesnippet/cpp/m-system.drawing.graphic_39_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#128](~/add/codesnippet/csharp/m-system.drawing.graphic_39_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/add/codesnippet/visualbasic/m-system.drawing.graphic_39_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (System.Drawing.PointF point);\n    parameters:\n    - id: point\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure to test for visibility.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point specified by the <code>point</code> parameter is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)\n  id: IsVisible(System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisible(Rectangle)\n  nameWithType: Graphics.IsVisible(Rectangle)\n  fullName: System.Drawing.Graphics.IsVisible(Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Indicates whether the rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using<xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Creates the location and size of two rectangles, one inside the clipping region and one outside.  \\n  \\n-   Tests each of the rectangles for visibility and draws only the visible one.  \\n  \\n The result is one small red rectangle, which is within the clip region.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/add/codesnippet/cpp/m-system.drawing.graphic_28_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#129](~/add/codesnippet/csharp/m-system.drawing.graphic_28_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/add/codesnippet/visualbasic/m-system.drawing.graphic_28_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (System.Drawing.Rectangle rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure to test for visibility.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle specified by the <code>rect</code> parameter is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)\n  id: IsVisible(System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisible(RectangleF)\n  nameWithType: Graphics.IsVisible(RectangleF)\n  fullName: System.Drawing.Graphics.IsVisible(RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Indicates whether the rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Creates two rectangles, one inside the clipping region and one outside.  \\n  \\n-   Tests each of the rectangles for visibility and draws only the visible one.  \\n  \\n The result is one small red rectangle, which is within the clip region.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/add/codesnippet/cpp/m-system.drawing.graphic_21_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#130](~/add/codesnippet/csharp/m-system.drawing.graphic_21_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/add/codesnippet/visualbasic/m-system.drawing.graphic_21_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (System.Drawing.RectangleF rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure to test for visibility.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle specified by the <code>rect</code> parameter is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)\n  id: IsVisible(System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisible(Int32,Int32)\n  nameWithType: Graphics.IsVisible(Int32,Int32)\n  fullName: System.Drawing.Graphics.IsVisible(Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Creates two points, one inside the clipping region and one outside.  \\n  \\n-   Tests each of the points for visibility and draws only the visible one.  \\n  \\n The result is one small red circle, which is within the clip region.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/add/codesnippet/cpp/m-system.drawing.graphic_15_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#131](~/add/codesnippet/csharp/m-system.drawing.graphic_15_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/add/codesnippet/visualbasic/m-system.drawing.graphic_15_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (int x, int y);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the point to test for visibility.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the point to test for visibility.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point defined by the <code>x</code> and <code>y</code> parameters is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisible(System.Single,System.Single)\n  id: IsVisible(System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisible(Single,Single)\n  nameWithType: Graphics.IsVisible(Single,Single)\n  fullName: System.Drawing.Graphics.IsVisible(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Creates two points, one inside the clipping region and one outside.  \\n  \\n-   Tests each of the points for visibility and draws only the visible one.  \\n  \\n The result is one small red circle, which is within the clip region.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/add/codesnippet/cpp/m-system.drawing.graphic_16_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#133](~/add/codesnippet/csharp/m-system.drawing.graphic_16_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/add/codesnippet/visualbasic/m-system.drawing.graphic_16_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (float x, float y);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the point to test for visibility.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the point to test for visibility.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the point defined by the <code>x</code> and <code>y</code> parameters is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisible(Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.IsVisible(Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.IsVisible(Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Creates the location and size of two rectangles, one inside the clipping region and one outside.  \\n  \\n-   Tests each of the rectangles for visibility and draws only the visible one.  \\n  \\n The result is one small red rectangle, which is within the clip region.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/add/codesnippet/cpp/83916884-8aa7-484f-8684-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#132](~/add/codesnippet/csharp/83916884-8aa7-484f-8684-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/add/codesnippet/visualbasic/83916884-8aa7-484f-8684-_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (int x, int y, int width, int height);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the upper-left corner of the rectangle to test for visibility.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the upper-left corner of the rectangle to test for visibility.\n    - id: width\n      type: System.Int32\n      description: Width of the rectangle to test for visibility.\n    - id: height\n      type: System.Int32\n      description: Height of the rectangle to test for visibility.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle defined by the <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code> parameters is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)\n  id: IsVisible(System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisible(Single,Single,Single,Single)\n  nameWithType: Graphics.IsVisible(Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.IsVisible(Single,Single,Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode>.  \\n  \\n-   Creates the location and size of two rectangles, one inside the clipping region and one outside.  \\n  \\n-   Tests each of the rectangles for visibility and draws only the visible one.  \\n  \\n The result is one small red rectangle, which is within the clip region.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/add/codesnippet/cpp/26cd12b3-b0de-4137-a2c1-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#134](~/add/codesnippet/csharp/26cd12b3-b0de-4137-a2c1-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/add/codesnippet/visualbasic/26cd12b3-b0de-4137-a2c1-_1.vb)]\"\n  syntax:\n    content: public bool IsVisible (float x, float y, float width, float height);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The x-coordinate of the upper-left corner of the rectangle to test for visibility.\n    - id: y\n      type: System.Single\n      description: The y-coordinate of the upper-left corner of the rectangle to test for visibility.\n    - id: width\n      type: System.Single\n      description: Width of the rectangle to test for visibility.\n    - id: height\n      type: System.Single\n      description: Height of the rectangle to test for visibility.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the rectangle defined by the <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code> parameters is contained within the visible clip region of this <xref href=\"System.Drawing.Graphics\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.IsVisibleClipEmpty\n  id: IsVisibleClipEmpty\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: IsVisibleClipEmpty\n  nameWithType: Graphics.IsVisibleClipEmpty\n  fullName: System.Drawing.Graphics.IsVisibleClipEmpty\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets a value indicating whether the visible clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> is empty.\n  remarks: The visible clipping region is the intersection of the clipping region of this `Graphics` and the clipping region of the window.\n  syntax:\n    content: public bool IsVisibleClipEmpty { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the visible portion of the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> is empty; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.Graphics.IsVisibleClipEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  id: MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MeasureCharacterRanges(String,Font,RectangleF,StringFormat)\n  nameWithType: Graphics.MeasureCharacterRanges(String,Font,RectangleF,StringFormat)\n  fullName: System.Drawing.Graphics.MeasureCharacterRanges(String,Font,RectangleF,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets an array of <xref href=\"System.Drawing.Region\"></xref> objects, each of which bounds a range of character positions within the specified string.\n  remarks: The regions returned by this method are resolution-dependent, so there might be a slight loss of accuracy if strings are recorded in a metafile at one resolution and later played back at a different resolution.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Sets a string \\\"First and Second ranges\\\" and a font for display of the string (\\\"Times New Roman\\\", 16 point).  \\n  \\n-   Sets two character ranges within the string (which correspond to the words \\\"First\\\" and \\\"Second\\\").  \\n  \\n-   Creates a rectangle in which to display the string.  \\n  \\n-   Sets the formatting of the string ¾ including the two character ranges.  \\n  \\n-   Draws the string to the screen.  \\n  \\n-   Measures the character ranges, determines rectangles that bound the two specified ranges.  \\n  \\n-   Draws the two rectangles to the screen.  \\n  \\n The result is the displayed string with the first range (\\\"First\\\") bounded by a red rectangle and the second range (\\\"Second\\\") bounded by a blue rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/add/codesnippet/cpp/edc4cf5e-df25-4e32-9c4e-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#135](~/add/codesnippet/csharp/edc4cf5e-df25-4e32-9c4e-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/add/codesnippet/visualbasic/edc4cf5e-df25-4e32-9c4e-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);\n    parameters:\n    - id: text\n      type: System.String\n      description: String to measure.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: layoutRect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that specifies the layout rectangle for the string.\n    - id: stringFormat\n      type: System.Drawing.StringFormat\n      description: <xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string.\n    return:\n      type: System.Drawing.Region[]\n      description: This method returns an array of <xref href=\"System.Drawing.Region\"></xref> objects, each of which bounds a range of character positions within the specified string.\n  overload: System.Drawing.Graphics.MeasureCharacterRanges*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)\n  id: MeasureString(System.String,System.Drawing.Font)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MeasureString(String,Font)\n  nameWithType: Graphics.MeasureString(String,Font)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref>.\n  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a string to measure.  \\n  \\n-   Creates a font object and sets it to Arial (16 point).  \\n  \\n-   Creates a size object and uses it and the font object to measure the size of the string.  \\n  \\n-   Draws a red rectangle using the measured size of the string.  \\n  \\n-   Draws the string within the drawn rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/add/codesnippet/cpp/m-system.drawing.graphic_34_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#136](~/add/codesnippet/csharp/m-system.drawing.graphic_34_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/add/codesnippet/visualbasic/m-system.drawing.graphic_34_1.vb)]\"\n  syntax:\n    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);\n    parameters:\n    - id: text\n      type: System.String\n      description: String to measure.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    return:\n      type: System.Drawing.SizeF\n      description: This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter.\n  overload: System.Drawing.Graphics.MeasureString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)\n  id: MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MeasureString(String,Font,SizeF)\n  nameWithType: Graphics.MeasureString(String,Font,SizeF)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,SizeF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> within the specified layout area.\n  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a string to measure and a font object set to Arial (16 point).  \\n  \\n-   Sets the maximum layout size of the string.  \\n  \\n-   Creates a size object and uses it, the font object, and the maximum layout size to measure the size of the string.  \\n  \\n-   Draws a red rectangle using the measured size of the string.  \\n  \\n-   Draws the string within the drawn rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/add/codesnippet/cpp/50dd89a3-bb2e-48a0-9927-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#138](~/add/codesnippet/csharp/50dd89a3-bb2e-48a0-9927-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/add/codesnippet/visualbasic/50dd89a3-bb2e-48a0-9927-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);\n    parameters:\n    - id: text\n      type: System.String\n      description: String to measure.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> defines the text format of the string.\n    - id: layoutArea\n      type: System.Drawing.SizeF\n      description: <xref href=\"System.Drawing.SizeF\"></xref> structure that specifies the maximum layout area for the text.\n    return:\n      type: System.Drawing.SizeF\n      description: This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter.\n  overload: System.Drawing.Graphics.MeasureString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)\n  id: MeasureString(System.String,System.Drawing.Font,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MeasureString(String,Font,Int32)\n  nameWithType: Graphics.MeasureString(String,Font,Int32)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref>.\n  remarks: \"The `width` parameter specifies the maximum value of the width component of the returned <xref:System.Drawing.SizeF> structure (<xref:System.Drawing.SizeF.Width%2A>). If the `width` parameter is less than the actual width of the string, the returned <xref:System.Drawing.SizeF.Width%2A> component is truncated to a value representing the maximum number of characters that will fit within the specified width. To accommodate the entire string, the returned <xref:System.Drawing.SizeF.Height%2A> component is adjusted to a value that allows displaying the string with character wrap.  \\n  \\n The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a string to measure and a font object set to Arial (16 point).  \\n  \\n-   Sets the maximum width of the string.  \\n  \\n-   Creates a size object and uses it, the font object, and the maximum string width to measure the size of the string.  \\n  \\n-   Draws a red rectangle using the measured size of the string.  \\n  \\n-   Draws the string within the drawn rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/add/codesnippet/cpp/ff03a9b3-c4b1-47e3-8c4c-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#141](~/add/codesnippet/csharp/ff03a9b3-c4b1-47e3-8c4c-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/add/codesnippet/visualbasic/ff03a9b3-c4b1-47e3-8c4c-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);\n    parameters:\n    - id: text\n      type: System.String\n      description: String to measure.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the format of the string.\n    - id: width\n      type: System.Int32\n      description: Maximum width of the string in pixels.\n    return:\n      type: System.Drawing.SizeF\n      description: This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter.\n  overload: System.Drawing.Graphics.MeasureString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)\n  id: MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MeasureString(String,Font,PointF,StringFormat)\n  nameWithType: Graphics.MeasureString(String,Font,PointF,StringFormat)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,PointF,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> and formatted with the specified <xref href=\"System.Drawing.StringFormat\"></xref>.\n  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the MeasureString methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a string to measure and a font object set to Arial (16 point)  \\n  \\n-   Creates a point to locate the upper-left corner of the string.  \\n  \\n-   Creates a string format object and sets its format flags to <xref:System.Drawing.StringFormatFlags>.  \\n  \\n-   Creates a size object to measure the string.  \\n  \\n-   Measures the size of the string, using the string, the font object, the locating point, and the string format.  \\n  \\n-   Draws a red rectangle using the locating point and the measured size of the string.  \\n  \\n-   Draws the string within the drawn rectangle.  \\n  \\n The result is a vertical rectangle enclosing a vertical string.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/add/codesnippet/cpp/bf732ea7-b026-45c6-903e-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#137](~/add/codesnippet/csharp/bf732ea7-b026-45c6-903e-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/add/codesnippet/visualbasic/bf732ea7-b026-45c6-903e-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);\n    parameters:\n    - id: text\n      type: System.String\n      description: String to measure.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> defines the text format of the string.\n    - id: origin\n      type: System.Drawing.PointF\n      description: <xref href=\"System.Drawing.PointF\"></xref> structure that represents the upper-left corner of the string.\n    - id: stringFormat\n      type: System.Drawing.StringFormat\n      description: <xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string.\n    return:\n      type: System.Drawing.SizeF\n      description: This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter.\n  overload: System.Drawing.Graphics.MeasureString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)\n  id: MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MeasureString(String,Font,SizeF,StringFormat)\n  nameWithType: Graphics.MeasureString(String,Font,SizeF,StringFormat)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,SizeF,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> and formatted with the specified <xref href=\"System.Drawing.StringFormat\"></xref>.\n  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a string to measure and a font object set to Arial (16 point).  \\n  \\n-   Sets the maximum layout size of the string, creating a size object to measure the string.  \\n  \\n-   Creates a string format object and sets its format flags to <xref:System.Drawing.StringFormatFlags>.  \\n  \\n-   Measures the size of the string, using the string, the font object, the maximum layout size, and the string format.  \\n  \\n-   Draws a red rectangle using the measured size of the string.  \\n  \\n-   Draws the string within the drawn rectangle.  \\n  \\n The result is a vertical rectangle enclosing a vertical string.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/add/codesnippet/cpp/c825d94b-4b0b-4b74-8f63-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#139](~/add/codesnippet/csharp/c825d94b-4b0b-4b74-8f63-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/add/codesnippet/visualbasic/c825d94b-4b0b-4b74-8f63-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);\n    parameters:\n    - id: text\n      type: System.String\n      description: String to measure.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> defines the text format of the string.\n    - id: layoutArea\n      type: System.Drawing.SizeF\n      description: <xref href=\"System.Drawing.SizeF\"></xref> structure that specifies the maximum layout area for the text.\n    - id: stringFormat\n      type: System.Drawing.StringFormat\n      description: <xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string.\n    return:\n      type: System.Drawing.SizeF\n      description: This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter.\n  overload: System.Drawing.Graphics.MeasureString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)\n  id: MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MeasureString(String,Font,Int32,StringFormat)\n  nameWithType: Graphics.MeasureString(String,Font,Int32,StringFormat)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,Int32,StringFormat)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> and formatted with the specified <xref href=\"System.Drawing.StringFormat\"></xref>.\n  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a string to measure and a font object set it to Arial (16 point).  \\n  \\n-   Sets the maximum width of the string.  \\n  \\n-   Creates a string format object and sets its format flags to<xref:System.Drawing.StringFormatFlags>.  \\n  \\n-   Creates a size object to measure the string.  \\n  \\n-   Measures the size of the string, using the string, the font object, the maximum width, and the string format.  \\n  \\n-   Draws a red rectangle using the measured size of the string.  \\n  \\n-   Draws the string within the drawn rectangle.  \\n  \\n The result is a vertical rectangle enclosing a vertical string.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/add/codesnippet/cpp/75feefaf-ae55-4db8-a351-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#142](~/add/codesnippet/csharp/75feefaf-ae55-4db8-a351-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/add/codesnippet/visualbasic/75feefaf-ae55-4db8-a351-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);\n    parameters:\n    - id: text\n      type: System.String\n      description: String to measure.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: width\n      type: System.Int32\n      description: Maximum width of the string.\n    - id: format\n      type: System.Drawing.StringFormat\n      description: <xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string.\n    return:\n      type: System.Drawing.SizeF\n      description: This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter.\n  overload: System.Drawing.Graphics.MeasureString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)\n  id: MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MeasureString(String,Font,SizeF,StringFormat,Int32,Int32)\n  nameWithType: Graphics.MeasureString(String,Font,SizeF,StringFormat,Int32,Int32)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,SizeF,StringFormat,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Measures the specified string when drawn with the specified <xref href=\"System.Drawing.Font\"></xref> and formatted with the specified <xref href=\"System.Drawing.StringFormat\"></xref>.\n  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat> and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint>.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a string to measure and a font object set to Arial (16 point)  \\n  \\n-   Sets the maximum layout size of the string.  \\n  \\n-   Creates a string format object and sets its format flags to <xref:System.Drawing.StringFormatFlags>.  \\n  \\n-   Creates the integer variables `charactersFitted` and `linesFilled` and a size object to measure the string.  \\n  \\n-   Measures the size of the string and determines the number of characters fitted and lines filled, using the string, the font object, the maximum layout size, and the string format.  \\n  \\n-   Draws a red rectangle using the measured size of the string.  \\n  \\n-   Draws the string within the drawn rectangle.  \\n  \\n-   Draws the values of the number of characters fitted and lines filled.  \\n  \\n The result is a vertical rectangle enclosing a vertical string.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/add/codesnippet/cpp/bb658a94-1822-409c-9d7b-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#140](~/add/codesnippet/csharp/bb658a94-1822-409c-9d7b-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/add/codesnippet/visualbasic/bb658a94-1822-409c-9d7b-_1.vb)]\"\n  syntax:\n    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);\n    parameters:\n    - id: text\n      type: System.String\n      description: String to measure.\n    - id: font\n      type: System.Drawing.Font\n      description: <xref href=\"System.Drawing.Font\"></xref> that defines the text format of the string.\n    - id: layoutArea\n      type: System.Drawing.SizeF\n      description: <xref href=\"System.Drawing.SizeF\"></xref> structure that specifies the maximum layout area for the text.\n    - id: stringFormat\n      type: System.Drawing.StringFormat\n      description: <xref href=\"System.Drawing.StringFormat\"></xref> that represents formatting information, such as line spacing, for the string.\n    - id: charactersFitted\n      type: System.Int32\n      description: Number of characters in the string.\n    - id: linesFilled\n      type: System.Int32\n      description: Number of text lines in the string.\n    return:\n      type: System.Drawing.SizeF\n      description: This method returns a <xref href=\"System.Drawing.SizeF\"></xref> structure that represents the size of the string, in the units specified by the <xref:System.Drawing.Graphics.PageUnit*> property, of the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter.\n  overload: System.Drawing.Graphics.MeasureString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>font</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)\n  id: MultiplyTransform(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MultiplyTransform(Matrix)\n  nameWithType: Graphics.MultiplyTransform(Matrix)\n  fullName: System.Drawing.Graphics.MultiplyTransform(Matrix)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Multiplies the world transformation of this <xref href=\"System.Drawing.Graphics\"></xref> and specified the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  remarks: This method prepends the matrix specified by the `matrix` parameter, so that the result is `matrix` x world transformation.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a `transformMatrix` matrix (a two by two identity matrix plus a zero-translation vector).  \\n  \\n-   Translates the transform matrix by a vector (200, 100).  \\n  \\n-   Rotates the world transformation matrix of the Windows Form by 30 degrees, prepends the rotation matrix for 30 degrees to the form's transformation matrix.  \\n  \\n-   Multiplies the rotated world transformation matrix by the translated `transformMatrix`, and prepends the `transformMatrix` to the world transformation matrix.  \\n  \\n-   Draws a rotated, translated ellipse.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/add/codesnippet/cpp/m-system.drawing.graphic_10_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#143](~/add/codesnippet/csharp/m-system.drawing.graphic_10_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/add/codesnippet/visualbasic/m-system.drawing.graphic_10_1.vb)]\"\n  syntax:\n    content: public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: 4x4 <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that multiplies the world transformation.\n  overload: System.Drawing.Graphics.MultiplyTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  id: MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: MultiplyTransform(Matrix,MatrixOrder)\n  nameWithType: Graphics.MultiplyTransform(Matrix,MatrixOrder)\n  fullName: System.Drawing.Graphics.MultiplyTransform(Matrix,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Multiplies the world transformation of this <xref href=\"System.Drawing.Graphics\"></xref> and specified the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order.\n  remarks: A value of<xref:System.Drawing.Drawing2D.MatrixOrder> for the `order` parameter specifies that the order of the multiplication is `matrix` x world transformation. A value of <xref:System.Drawing.Drawing2D.MatrixOrder> for `order` specifies that the order of the multiplication is world transformation x `matrix`.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a `transformMatrix` matrix (a two by two identity matrix plus a zero-translation vector).  \\n  \\n-   Translates the transform matrix by a vector (200, 100).  \\n  \\n-   Rotates the world transformation matrix of the Windows Form by 30 degrees, prepending the rotation matrix for 30 degrees to the form's transformation matrix.  \\n  \\n-   Multiplies the rotated world transformation matrix by the translated `transformMatrix`, appending the `transformMatrix` to the world transformation matrix.  \\n  \\n-   Draws a rotated, translated ellipse.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/add/codesnippet/cpp/cc5350a1-ed7f-4ad4-a876-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#144](~/add/codesnippet/csharp/cc5350a1-ed7f-4ad4-a876-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/add/codesnippet/visualbasic/cc5350a1-ed7f-4ad4-a876-_1.vb)]\"\n  syntax:\n    content: public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: 4x4 <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that multiplies the world transformation.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> enumeration that determines the order of the multiplication.\n  overload: System.Drawing.Graphics.MultiplyTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.PageScale\n  id: PageScale\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: PageScale\n  nameWithType: Graphics.PageScale\n  fullName: System.Drawing.Graphics.PageScale\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the scaling between world units and page units for this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the PageScale and <xref:System.Drawing.Graphics.TranslateTransform%2A> members to change the scale and origin when you draw a rectangle.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ChangePageScaleAndTranslateTransform` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cpp[System.Drawing.GraphicsProperties#2](~/add/codesnippet/cpp/p-system.drawing.graphic_1_1.cpp)]\\n [!code-vb[System.Drawing.GraphicsProperties#2](~/add/codesnippet/visualbasic/p-system.drawing.graphic_1_1.vb)]\\n [!code-cs[System.Drawing.GraphicsProperties#2](~/add/codesnippet/csharp/p-system.drawing.graphic_1_1.cs)]\"\n  syntax:\n    content: public float PageScale { get; set; }\n    return:\n      type: System.Single\n      description: This property specifies a value for the scaling between world units and page units for this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.PageScale*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.PageUnit\n  id: PageUnit\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: PageUnit\n  nameWithType: Graphics.PageUnit\n  fullName: System.Drawing.Graphics.PageUnit\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the unit of measure used for page coordinates in this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The graphics unit is the unit of measure used for page coordinates in this <xref:System.Drawing.Graphics>.\n  example:\n  - \"The following code example demonstrates the effect of changing the PageUnit property.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ChangePageUnit` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cpp[System.Drawing.GraphicsProperties#3](~/add/codesnippet/cpp/p-system.drawing.graphic_3_1.cpp)]\\n [!code-vb[System.Drawing.GraphicsProperties#3](~/add/codesnippet/visualbasic/p-system.drawing.graphic_3_1.vb)]\\n [!code-cs[System.Drawing.GraphicsProperties#3](~/add/codesnippet/csharp/p-system.drawing.graphic_3_1.cs)]\"\n  syntax:\n    content: public System.Drawing.GraphicsUnit PageUnit { get; set; }\n    return:\n      type: System.Drawing.GraphicsUnit\n      description: One of the <xref href=\"System.Drawing.GraphicsUnit\"></xref> values other than <xref href=\"System.Drawing.GraphicsUnit\"></xref>.\n  overload: System.Drawing.Graphics.PageUnit*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: PageUnit is set to <xref href=\"System.Drawing.GraphicsUnit\"></xref>, which is not a physical unit.\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.PixelOffsetMode\n  id: PixelOffsetMode\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: PixelOffsetMode\n  nameWithType: Graphics.PixelOffsetMode\n  fullName: System.Drawing.Graphics.PixelOffsetMode\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or set a value specifying how pixels are offset during rendering of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: Use this property to specify either higher quality, slower rendering, or lower quality, faster rendering of the contents of this<xref:System.Drawing.Graphics>object.\n  syntax:\n    content: public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.PixelOffsetMode\n      description: This property specifies a member of the <xref href=\"System.Drawing.Drawing2D.PixelOffsetMode\"></xref> enumeration\n  overload: System.Drawing.Graphics.PixelOffsetMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ReleaseHdc\n  id: ReleaseHdc\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ReleaseHdc()\n  nameWithType: Graphics.ReleaseHdc()\n  fullName: System.Drawing.Graphics.ReleaseHdc()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Releases a device context handle obtained by a previous call to the <xref:System.Drawing.Graphics.GetHdc*> method of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: <xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> are two methods that allow you to get and release the handle for a Windows device. You should always follow a call to <xref:System.Drawing.Graphics.GetHdc%2A> with a call to <xref:System.Drawing.Graphics.ReleaseHdc%2A> when you are finished with the Windows handle.\n  syntax:\n    content: public void ReleaseHdc ();\n    parameters: []\n  overload: System.Drawing.Graphics.ReleaseHdc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ReleaseHdc(System.IntPtr)\n  id: ReleaseHdc(System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ReleaseHdc(IntPtr)\n  nameWithType: Graphics.ReleaseHdc(IntPtr)\n  fullName: System.Drawing.Graphics.ReleaseHdc(IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Releases a device context handle obtained by a previous call to the <xref:System.Drawing.Graphics.GetHdc*> method of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"The device context is a Windows structure based on [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.  \\n  \\n Calls to the <xref:System.Drawing.Graphics.GetHdc%2A> and ReleaseHdc methods must appear in pairs. During the scope of a <xref:System.Drawing.Graphics.GetHdc%2A> and ReleaseHdc method pair, you usually make calls only to [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] functions. Calls in that scope made to [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] methods of the <xref:System.Drawing.Graphics> that produced the `hdc` parameter fail with an `ObjectBusy` error. Also, [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] ignores any state changes made to the <xref:System.Drawing.Graphics> of the `hdc` parameter in subsequent operations.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The example illustrates calling a Windows [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] function to perform the same task as a [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> method. The code performs the following actions:  \\n  \\n-   Defines the interoperability <xref:System.Runtime.InteropServices.DllImportAttribute> attribute for the Windows DLL file gdi32.dll. This DLL contains the desired [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] function, and it defines the <xref:System.Drawing.Rectangle> function in that DLL as external.  \\n  \\n-   Creates a red pen.  \\n  \\n-   With the pen, draws a rectangle to the screen using the [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> method.  \\n  \\n-   Defines an internal pointer type variable `hdc` and sets its value to the handle to the device context of the form.  \\n  \\n-   Draws a rectangle to the screen using the [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> function.  \\n  \\n-   Releases the device context represented by the `hdc` parameter.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/add/codesnippet/cpp/m-system.drawing.graphic_14_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#145](~/add/codesnippet/csharp/m-system.drawing.graphic_14_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/add/codesnippet/visualbasic/m-system.drawing.graphic_14_1.vb)]\"\n  syntax:\n    content: public void ReleaseHdc (IntPtr hdc);\n    parameters:\n    - id: hdc\n      type: System.IntPtr\n      description: Handle to a device context obtained by a previous call to the <xref:System.Drawing.Graphics.GetHdc*> method of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.ReleaseHdc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)\n  id: ReleaseHdcInternal(System.IntPtr)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ReleaseHdcInternal(IntPtr)\n  nameWithType: Graphics.ReleaseHdcInternal(IntPtr)\n  fullName: System.Drawing.Graphics.ReleaseHdcInternal(IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Releases a handle to a device context.\n  syntax:\n    content: public void ReleaseHdcInternal (IntPtr hdc);\n    parameters:\n    - id: hdc\n      type: System.IntPtr\n      description: Handle to a device context.\n  overload: System.Drawing.Graphics.ReleaseHdcInternal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.RenderingOrigin\n  id: RenderingOrigin\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: RenderingOrigin\n  nameWithType: Graphics.RenderingOrigin\n  fullName: System.Drawing.Graphics.RenderingOrigin\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the rendering origin of this <xref href=\"System.Drawing.Graphics\"></xref> for dithering and for hatch brushes.\n  syntax:\n    content: public System.Drawing.Point RenderingOrigin { get; set; }\n    return:\n      type: System.Drawing.Point\n      description: A <xref href=\"System.Drawing.Point\"></xref> structure that represents the dither origin for 8-bits-per-pixel and 16-bits-per-pixel dithering and is also used to set the origin for hatch brushes.\n  overload: System.Drawing.Graphics.RenderingOrigin*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ResetClip\n  id: ResetClip\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ResetClip()\n  nameWithType: Graphics.ResetClip()\n  fullName: System.Drawing.Graphics.ResetClip()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Resets the clip region of this <xref href=\"System.Drawing.Graphics\"></xref> to an infinite region.\n  remarks: When the clipping region of a <xref:System.Drawing.Graphics> is infinite, items that this <xref:System.Drawing.Graphics> draws are not clipped.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.  \\n  \\n-   Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).  \\n  \\n-   Fills a large rectangle that includes both previous rectangles with a solid blue brush.  \\n  \\n-   Resets the clipping region to infinite.  \\n  \\n-   Draws rectangles around the two clipping regions; it uses a black pen for the first clipping rectangle and a red pen for the second clipping region.  \\n  \\n The result is that only the intersection of the two rectangles is filled with blue.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/add/codesnippet/cpp/m-system.drawing.graphic_29_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#146](~/add/codesnippet/csharp/m-system.drawing.graphic_29_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/add/codesnippet/visualbasic/m-system.drawing.graphic_29_1.vb)]\"\n  syntax:\n    content: public void ResetClip ();\n    parameters: []\n  overload: System.Drawing.Graphics.ResetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ResetTransform\n  id: ResetTransform\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ResetTransform()\n  nameWithType: Graphics.ResetTransform()\n  fullName: System.Drawing.Graphics.ResetTransform()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Resets the world transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> to the identity matrix.\n  remarks: The identity matrix represents a transformation with no scaling, rotation, or translation. Resetting the world transformation of this <xref:System.Drawing.Graphics> to the identity matrix means that its world transformation does not change the geometry of transformed items.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Translates the world transform of the Windows Form by a vector (100, 0).  \\n  \\n-   Saves the graphics state of the form.  \\n  \\n-   Resets the world transform of the form to an identity and fills a rectangle with a solid red brush.  \\n  \\n-   Restores the translated graphics state and fills a rectangle with a solid blue brush.  \\n  \\n The result is an untranslated red-filled rectangle and a translated blue-filled rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/add/codesnippet/cpp/m-system.drawing.graphic_4_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#147](~/add/codesnippet/csharp/m-system.drawing.graphic_4_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/add/codesnippet/visualbasic/m-system.drawing.graphic_4_1.vb)]\"\n  syntax:\n    content: public void ResetTransform ();\n    parameters: []\n  overload: System.Drawing.Graphics.ResetTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)\n  id: Restore(System.Drawing.Drawing2D.GraphicsState)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Restore(GraphicsState)\n  nameWithType: Graphics.Restore(GraphicsState)\n  fullName: System.Drawing.Graphics.Restore(GraphicsState)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Restores the state of this <xref href=\"System.Drawing.Graphics\"></xref> to the state represented by a <xref href=\"System.Drawing.Drawing2D.GraphicsState\"></xref>.\n  remarks: \"When you call the <xref:System.Drawing.Graphics.Save%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.Save%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block. When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to theRestore method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call. Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the <xref:System.Drawing.Graphics.Save%2A> method can be passed only once to the `Restore` method.  \\n  \\n Calls to the <xref:System.Drawing.Graphics.Save%2A> method can be nested; that is, you can call the <xref:System.Drawing.Graphics.Save%2A> method several times before you call the Restore method. Each time you call the <xref:System.Drawing.Graphics.Save%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsState> for the information block. When you pass one of those objects to the Restore method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>. The information block placed on the stack by that <xref:System.Drawing.Graphics.Save%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.Save%2A> method call are also removed.  \\n  \\n Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.Save%2A> method. Just as a Restore call is paired with a <xref:System.Drawing.Graphics.Save%2A> call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \\n  \\n When you call the Restore method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Translates the world transform of the Windows Form by a vector (100, 0).  \\n  \\n-   Saves the graphics state of the form.  \\n  \\n-   Resets the world transform of the form to an identity and fills a rectangle with a solid red brush.  \\n  \\n-   Restores the translated graphics state and fills a second rectangle with a solid blue brush.  \\n  \\n The result is an untranslated red-filled rectangle and a translated blue-filled rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/add/codesnippet/cpp/m-system.drawing.graphic_22_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#148](~/add/codesnippet/csharp/m-system.drawing.graphic_22_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/add/codesnippet/visualbasic/m-system.drawing.graphic_22_1.vb)]\"\n  syntax:\n    content: public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);\n    parameters:\n    - id: gstate\n      type: System.Drawing.Drawing2D.GraphicsState\n      description: <xref href=\"System.Drawing.Drawing2D.GraphicsState\"></xref> that represents the state to which to restore this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.Restore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.RotateTransform(System.Single)\n  id: RotateTransform(System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: RotateTransform(Single)\n  nameWithType: Graphics.RotateTransform(Single)\n  fullName: System.Drawing.Graphics.RotateTransform(Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Applies the specified rotation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the `angle` parameter. This method applies the rotation by prepending it to the transformation matrix.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Translates the world transformation matrix of the Windows Form by the vector (100, 0).  \\n  \\n-   Rotates the world transformation by an angle of 30 degrees, prepending the rotation matrix to the world transformation matrix.  \\n  \\n-   Draws a rotated, translated ellipse with a blue pen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/add/codesnippet/cpp/m-system.drawing.graphic_37_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#149](~/add/codesnippet/csharp/m-system.drawing.graphic_37_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/add/codesnippet/visualbasic/m-system.drawing.graphic_37_1.vb)]\"\n  syntax:\n    content: public void RotateTransform (float angle);\n    parameters:\n    - id: angle\n      type: System.Single\n      description: Angle of rotation in degrees.\n  overload: System.Drawing.Graphics.RotateTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: RotateTransform(Single,MatrixOrder)\n  nameWithType: Graphics.RotateTransform(Single,MatrixOrder)\n  fullName: System.Drawing.Graphics.RotateTransform(Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Applies the specified rotation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> in the specified order.\n  remarks: The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the `angle` parameter. This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the rotation matrix according to the `order` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Translates the world transformation matrix of the Windows Form by the vector (100, 0).  \\n  \\n-   Rotates the world transform by an angle of 30 degrees, appending the rotation matrix to the world transformation matrix with <xref:System.Drawing.Drawing2D.MatrixOrder>.  \\n  \\n-   Draws a translated, rotated ellipse with a blue pen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/add/codesnippet/cpp/7da2dce8-ff40-4659-a74e-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#150](~/add/codesnippet/csharp/7da2dce8-ff40-4659-a74e-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/add/codesnippet/visualbasic/7da2dce8-ff40-4659-a74e-_1.vb)]\"\n  syntax:\n    content: public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: angle\n      type: System.Single\n      description: Angle of rotation in degrees.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> enumeration that specifies whether the rotation is appended or prepended to the matrix transformation.\n  overload: System.Drawing.Graphics.RotateTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Save\n  id: Save\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Save()\n  nameWithType: Graphics.Save()\n  fullName: System.Drawing.Graphics.Save()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Saves the current state of this <xref href=\"System.Drawing.Graphics\"></xref> and identifies the saved state with a <xref href=\"System.Drawing.Drawing2D.GraphicsState\"></xref>.\n  remarks: \"When you call the Save method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The Save method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block. When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to the <xref:System.Drawing.Graphics.Restore%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the Save method call. Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the Save method can be passed only once to the <xref:System.Drawing.Graphics.Restore%2A> method.  \\n  \\n Calls to the Save method can be nested; that is, you can call the Save method several times before you call the <xref:System.Drawing.Graphics.Restore%2A> method. Each time you call the Save method, an information block is put on the stack, and you receive a<xref:System.Drawing.Drawing2D.GraphicsState> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.Restore%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the Save method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>. The information block placed on the stack by that Save method call is removed from the stack, and all information blocks placed on that stack after that Save method call are also removed.  \\n  \\n Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the Save method. Just as a <xref:System.Drawing.Graphics.Restore%2A> call is paired with a Save call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \\n  \\n When you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the Save method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the Save method are removed from the stack. Likewise, When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the Save method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack.\"\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Translates the world transform of the Windows Form by a vector (100, 0).  \\n  \\n-   Saves the graphics state of the form.  \\n  \\n-   Resets the world transform of the form to an identity (2x2 identity matrix plus a zero-vector translation) and fills a rectangle with a solid red brush.  \\n  \\n-   Restores the translated graphics state and fills a rectangle with a solid blue brush.  \\n  \\n The result is an untranslated red-filled rectangle on the left and a translated blue-filled rectangle on the right of the form.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/add/codesnippet/cpp/m-system.drawing.graphic_26_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#151](~/add/codesnippet/csharp/m-system.drawing.graphic_26_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/add/codesnippet/visualbasic/m-system.drawing.graphic_26_1.vb)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.GraphicsState Save ();\n    parameters: []\n    return:\n      type: System.Drawing.Drawing2D.GraphicsState\n      description: This method returns a <xref href=\"System.Drawing.Drawing2D.GraphicsState\"></xref> that represents the saved state of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.Save*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)\n  id: ScaleTransform(System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ScaleTransform(Single,Single)\n  nameWithType: Graphics.ScaleTransform(Single,Single)\n  fullName: System.Drawing.Graphics.ScaleTransform(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Applies the specified scaling operation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> by prepending it to the object's transformation matrix.\n  remarks: The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (`sx`, `sy`, 1). This method prepends the transformation matrix of the <xref:System.Drawing.Graphics> by the scaling matrix.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Rotates the world transformation matrix of the Windows Form by 30 degrees.  \\n  \\n-   Scales that matrix by a factor of 3 in the x direction and a factor of 1 in the y direction by prepending the scaling transformation.  \\n  \\n-   Draws a scaled, rotated rectangle with a blue pen.  \\n  \\n The result is still a rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/add/codesnippet/cpp/m-system.drawing.graphic_38_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#152](~/add/codesnippet/csharp/m-system.drawing.graphic_38_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/add/codesnippet/visualbasic/m-system.drawing.graphic_38_1.vb)]\"\n  syntax:\n    content: public void ScaleTransform (float sx, float sy);\n    parameters:\n    - id: sx\n      type: System.Single\n      description: Scale factor in the x direction.\n    - id: sy\n      type: System.Single\n      description: Scale factor in the y direction.\n  overload: System.Drawing.Graphics.ScaleTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: ScaleTransform(Single,Single,MatrixOrder)\n  nameWithType: Graphics.ScaleTransform(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Graphics.ScaleTransform(Single,Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Applies the specified scaling operation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> in the specified order.\n  remarks: The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (`sx`, `sy`, 1). This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the scaling matrix according to the `order` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Rotates the world transformation matrix of the Windows Form by 30 degrees.  \\n  \\n-   Scales that matrix by a factor of 3 in the x direction and a factor of 1 in the y direction by appending the scaling transformation with the <xref:System.Drawing.Drawing2D.MatrixOrder> member.  \\n  \\n-   Draws a rotated, scaled rectangle with a blue pen.  \\n  \\n The result is a parallelogram.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/add/codesnippet/cpp/cafee882-3251-403e-970d-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#153](~/add/codesnippet/csharp/cafee882-3251-403e-970d-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/add/codesnippet/visualbasic/cafee882-3251-403e-970d-_1.vb)]\"\n  syntax:\n    content: public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: sx\n      type: System.Single\n      description: Scale factor in the x direction.\n    - id: sy\n      type: System.Single\n      description: Scale factor in the y direction.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix.\n  overload: System.Drawing.Graphics.ScaleTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)\n  id: SetClip(System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(GraphicsPath)\n  nameWithType: Graphics.SetClip(GraphicsPath)\n  fullName: System.Drawing.Graphics.SetClip(GraphicsPath)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the specified <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: If the graphics path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a graphics path and adds an ellipse to the path.  \\n  \\n-   Sets the clipping region to the elliptical path.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a filled, black ellipse.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/add/codesnippet/cpp/m-system.drawing.graphic_2_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#154](~/add/codesnippet/csharp/m-system.drawing.graphic_2_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/add/codesnippet/visualbasic/m-system.drawing.graphic_2_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);\n    parameters:\n    - id: path\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> that represents the new clip region.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Graphics)\n  id: SetClip(System.Drawing.Graphics)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(Graphics)\n  nameWithType: Graphics.SetClip(Graphics)\n  fullName: System.Drawing.Graphics.SetClip(Graphics)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the <xref uid=\"langword_csharp_Clip\" name=\"Clip\" href=\"\"></xref> property of the specified <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler, as well as `thisForm`, the <xref:System.Windows.Forms.Form> for the example. The code performs the following actions:  \\n  \\n-   Creates a temporary <xref:System.Drawing.Graphics> from the `thisForm`<xref:System.Windows.Forms.Form> of the example.  \\n  \\n-   Sets the clipping region of the temporary <xref:System.Drawing.Graphics> to a small square.  \\n  \\n-   Updates the clipping region of the form's graphic object to that of the temporary <xref:System.Drawing.Graphics>.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a small, filled, black square.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/add/codesnippet/cpp/m-system.drawing.graphic_41_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#156](~/add/codesnippet/csharp/m-system.drawing.graphic_41_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/add/codesnippet/visualbasic/m-system.drawing.graphic_41_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.Graphics g);\n    parameters:\n    - id: g\n      type: System.Drawing.Graphics\n      description: <xref href=\"System.Drawing.Graphics\"></xref> from which to take the new clip region.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)\n  id: SetClip(System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(Rectangle)\n  nameWithType: Graphics.SetClip(Rectangle)\n  fullName: System.Drawing.Graphics.SetClip(Rectangle)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a small rectangle for the clipping region.  \\n  \\n-   Sets the clipping region to the rectangle.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a small, filled, black rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/add/codesnippet/cpp/m-system.drawing.graphic_25_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#158](~/add/codesnippet/csharp/m-system.drawing.graphic_25_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/add/codesnippet/visualbasic/m-system.drawing.graphic_25_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.Rectangle rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure that represents the new clip region.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)\n  id: SetClip(System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(RectangleF)\n  nameWithType: Graphics.SetClip(RectangleF)\n  fullName: System.Drawing.Graphics.SetClip(RectangleF)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a small rectangle for the clipping region.  \\n  \\n-   Sets the clipping region to the rectangle.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a small, filled, black rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/add/codesnippet/cpp/m-system.drawing.graphic_1_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#160](~/add/codesnippet/csharp/m-system.drawing.graphic_1_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/add/codesnippet/visualbasic/m-system.drawing.graphic_1_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.RectangleF rect);\n    parameters:\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents the new clip region.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)\n  id: SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(GraphicsPath,CombineMode)\n  nameWithType: Graphics.SetClip(GraphicsPath,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(GraphicsPath,CombineMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified operation combining the current clip region and the specified <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref>.\n  remarks: If the graphics path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a graphics path and adds an ellipse to the path.  \\n  \\n-   Sets the clipping region to the elliptical path with the <xref:System.Drawing.Drawing2D.CombineMode> member.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a filled, black ellipse.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/add/codesnippet/cpp/13cc8f76-0e6b-45ee-a0ec-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#155](~/add/codesnippet/csharp/13cc8f76-0e6b-45ee-a0ec-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/add/codesnippet/visualbasic/13cc8f76-0e6b-45ee-a0ec-_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);\n    parameters:\n    - id: path\n      type: System.Drawing.Drawing2D.GraphicsPath\n      description: <xref href=\"System.Drawing.Drawing2D.GraphicsPath\"></xref> to combine.\n    - id: combineMode\n      type: System.Drawing.Drawing2D.CombineMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)\n  id: SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(Graphics,CombineMode)\n  nameWithType: Graphics.SetClip(Graphics,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(Graphics,CombineMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified combining operation of the current clip region and the <xref:System.Drawing.Graphics.Clip*> property of the specified <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler, as well as `thisForm`, the <xref:System.Windows.Forms.Form> for the example. The code performs the following actions:  \\n  \\n-   Creates a temporary <xref:System.Drawing.Graphics> from the `thisForm`<xref:System.Windows.Forms.Form> of the example.  \\n  \\n-   Sets the clipping region of the temporary <xref:System.Drawing.Graphics> to a small square.  \\n  \\n-   Updates the clipping region of the form's graphic object to that of the new <xref:System.Drawing.Graphics> with the <xref:System.Drawing.Drawing2D.CombineMode> member.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a small, filled, black square.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/add/codesnippet/cpp/8bb7563e-771b-4cba-9f13-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#157](~/add/codesnippet/csharp/8bb7563e-771b-4cba-9f13-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/add/codesnippet/visualbasic/8bb7563e-771b-4cba-9f13-_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);\n    parameters:\n    - id: g\n      type: System.Drawing.Graphics\n      description: <xref href=\"System.Drawing.Graphics\"></xref> that specifies the clip region to combine.\n    - id: combineMode\n      type: System.Drawing.Drawing2D.CombineMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)\n  id: SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(Rectangle,CombineMode)\n  nameWithType: Graphics.SetClip(Rectangle,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(Rectangle,CombineMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified operation combining the current clip region and the rectangle specified by a <xref href=\"System.Drawing.Rectangle\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a small rectangle for the clipping region.  \\n  \\n-   Sets the clipping region to the rectangle with the <xref:System.Drawing.Drawing2D.CombineMode> member.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a small, filled, black rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/add/codesnippet/cpp/f07a12db-73e5-41d7-82f8-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#159](~/add/codesnippet/csharp/f07a12db-73e5-41d7-82f8-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/add/codesnippet/visualbasic/f07a12db-73e5-41d7-82f8-_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);\n    parameters:\n    - id: rect\n      type: System.Drawing.Rectangle\n      description: <xref href=\"System.Drawing.Rectangle\"></xref> structure to combine.\n    - id: combineMode\n      type: System.Drawing.Drawing2D.CombineMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)\n  id: SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(RectangleF,CombineMode)\n  nameWithType: Graphics.SetClip(RectangleF,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(RectangleF,CombineMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified operation combining the current clip region and the rectangle specified by a <xref href=\"System.Drawing.RectangleF\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a small rectangle for the clipping region.  \\n  \\n-   Sets the clipping region to the rectangle with the <xref:System.Drawing.Drawing2D.CombineMode> member.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a small, filled, black rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/add/codesnippet/cpp/f4e1c983-a6f4-4609-8adb-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#161](~/add/codesnippet/csharp/f4e1c983-a6f4-4609-8adb-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/add/codesnippet/visualbasic/f4e1c983-a6f4-4609-8adb-_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);\n    parameters:\n    - id: rect\n      type: System.Drawing.RectangleF\n      description: <xref href=\"System.Drawing.RectangleF\"></xref> structure to combine.\n    - id: combineMode\n      type: System.Drawing.Drawing2D.CombineMode\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)\n  id: SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SetClip(Region,CombineMode)\n  nameWithType: Graphics.SetClip(Region,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(Region,CombineMode)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> to the result of the specified operation combining the current clip region and the specified <xref href=\"System.Drawing.Region\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a small rectangle for the clipping region.  \\n  \\n-   Sets the clipping region to the rectangle with the <xref:System.Drawing.Drawing2D.CombineMode> member.  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a small, filled, black rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/add/codesnippet/cpp/2a66fa51-570c-4e4a-8879-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#162](~/add/codesnippet/csharp/2a66fa51-570c-4e4a-8879-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/add/codesnippet/visualbasic/2a66fa51-570c-4e4a-8879-_1.vb)]\"\n  syntax:\n    content: public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);\n    parameters:\n    - id: region\n      type: System.Drawing.Region\n      description: <xref href=\"System.Drawing.Region\"></xref> to combine.\n    - id: combineMode\n      type: System.Drawing.Drawing2D.CombineMode\n      description: Member from the <xref href=\"System.Drawing.Drawing2D.CombineMode\"></xref> enumeration that specifies the combining operation to use.\n  overload: System.Drawing.Graphics.SetClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.SmoothingMode\n  id: SmoothingMode\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: SmoothingMode\n  nameWithType: Graphics.SmoothingMode\n  fullName: System.Drawing.Graphics.SmoothingMode\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the rendering quality for this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The smoothing mode specifies whether lines, curves, and the edges of filled areas use smoothing (also called antialiasing). One exception is that path gradient brushes do not obey the smoothing mode. Areas filled using a <xref:System.Drawing.Drawing2D.PathGradientBrush> are rendered the same way (aliased) regardless of the SmoothingMode property.\n  example:\n  - \"The following method demonstrates the effects of setting the <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, and SmoothingMode properties. The output of the example is shown in the following illustration.  \\n  \\n ![Lines with and without smoothing applied.](~/add/media/gdi-smoothingmode.png \\\"Lines with and without smoothing applied.\\\")  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowPensAndSmoothingMode` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#3](~/add/codesnippet/csharp/p-system.drawing.graphic_4_1.cs)]\\n [!code-vb[System.Drawing.PensExample#3](~/add/codesnippet/visualbasic/p-system.drawing.graphic_4_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#3](~/add/codesnippet/cpp/p-system.drawing.graphic_4_1.cpp)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.SmoothingMode\n      description: One of the <xref href=\"System.Drawing.Drawing2D.SmoothingMode\"></xref> values.\n  overload: System.Drawing.Graphics.SmoothingMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.TextContrast\n  id: TextContrast\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: TextContrast\n  nameWithType: Graphics.TextContrast\n  fullName: System.Drawing.Graphics.TextContrast\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the gamma correction value for rendering text.\n  remarks: The gamma correction value must be between 0 and 12. The default value is 4.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Drawing.Graphics.TextRenderingHint%2A> and TextContrast properties.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ChangeTextRenderingHintAndTextContrast` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cpp[System.Drawing.GraphicsProperties#5](~/add/codesnippet/cpp/p-system.drawing.graphic_2_1.cpp)]\\n [!code-vb[System.Drawing.GraphicsProperties#5](~/add/codesnippet/visualbasic/p-system.drawing.graphic_2_1.vb)]\\n [!code-cs[System.Drawing.GraphicsProperties#5](~/add/codesnippet/csharp/p-system.drawing.graphic_2_1.cs)]\"\n  syntax:\n    content: public int TextContrast { get; set; }\n    return:\n      type: System.Int32\n      description: The gamma correction value used for rendering antialiased and ClearType text.\n  overload: System.Drawing.Graphics.TextContrast*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.TextRenderingHint\n  id: TextRenderingHint\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: TextRenderingHint\n  nameWithType: Graphics.TextRenderingHint\n  fullName: System.Drawing.Graphics.TextRenderingHint\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the rendering mode for text associated with this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"The text rendering hint specifies whether text renders with antialiasing.  \\n  \\n> [!NOTE]\\n>  You should not use a <xref:System.Drawing.Graphics.CompositingMode%2A> property value of <xref:System.Drawing.Drawing2D.CompositingMode> when the TextRenderingHint property is set to <xref:System.Drawing.Text.TextRenderingHint>. An exception could occur or the image may not render correctly.\"\n  example:\n  - \"The following code example demonstrates the use of the TextRenderingHint and <xref:System.Drawing.Graphics.TextContrast%2A> properties.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ChangeTextRenderingHintAndTextContrast` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cpp[System.Drawing.GraphicsProperties#5](~/add/codesnippet/cpp/p-system.drawing.graphic_7_1.cpp)]\\n [!code-vb[System.Drawing.GraphicsProperties#5](~/add/codesnippet/visualbasic/p-system.drawing.graphic_7_1.vb)]\\n [!code-cs[System.Drawing.GraphicsProperties#5](~/add/codesnippet/csharp/p-system.drawing.graphic_7_1.cs)]\"\n  syntax:\n    content: public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }\n    return:\n      type: System.Drawing.Text.TextRenderingHint\n      description: One of the <xref href=\"System.Drawing.Text.TextRenderingHint\"></xref> values.\n  overload: System.Drawing.Graphics.TextRenderingHint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.Transform\n  id: Transform\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: Transform\n  nameWithType: Graphics.Transform\n  fullName: System.Drawing.Graphics.Transform\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets a copy of the geometric world transformation for this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"GDI+ uses three coordinate spaces: world, page, and device. World coordinates are the coordinates used to model a particular graphic world and are the coordinates you pass to methods in the .NET Framework. Page coordinates refer to the coordinate system used by a drawing surface, such as a form or a control. Device coordinates are the coordinates used by the physical device being drawn on, such as a screen or a printer. The Transform property represents the world transformation, which maps world coordinates to page coordinates.  \\n  \\n Because the matrix returned and by the Transform property is a copy of the geometric transform, you should dispose of the matrix when you no longer need it.\"\n  syntax:\n    content: public System.Drawing.Drawing2D.Matrix Transform { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.Matrix\n      description: A copy of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that represents the geometric world transformation for this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])\n  id: TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: TransformPoints(CoordinateSpace,CoordinateSpace,Point[])\n  nameWithType: Graphics.TransformPoints(CoordinateSpace,CoordinateSpace,Point[])\n  fullName: System.Drawing.Graphics.TransformPoints(CoordinateSpace,CoordinateSpace,Point[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Transforms an array of points from one coordinate space to another using the current world and page transformations of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates two points and draws a blue line between them.  \\n  \\n-   Sets the world transform to translate by amounts 40 in the x direction and 30 in the y direction.  \\n  \\n-   Transforms the points from world coordinates (<xref:System.Drawing.Drawing2D.CoordinateSpace>) to page coordinates (<xref:System.Drawing.Drawing2D.CoordinateSpace>).  \\n  \\n-   Resets the world transformation to the identity.  \\n  \\n-   Draws a red line between the transformed points.  \\n  \\n The result is a blue line and a translated red line below it.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/add/codesnippet/cpp/7346647a-cbf8-4ed4-9d18-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#163](~/add/codesnippet/csharp/7346647a-cbf8-4ed4-9d18-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/add/codesnippet/visualbasic/7346647a-cbf8-4ed4-9d18-_1.vb)]\"\n  syntax:\n    content: public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);\n    parameters:\n    - id: destSpace\n      type: System.Drawing.Drawing2D.CoordinateSpace\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"></xref> enumeration that specifies the destination coordinate space.\n    - id: srcSpace\n      type: System.Drawing.Drawing2D.CoordinateSpace\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"></xref> enumeration that specifies the source coordinate space.\n    - id: pts\n      type: System.Drawing.Point[]\n      description: Array of <xref href=\"System.Drawing.Point\"></xref> structures that represents the points to transformation.\n  overload: System.Drawing.Graphics.TransformPoints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])\n  id: TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: TransformPoints(CoordinateSpace,CoordinateSpace,PointF[])\n  nameWithType: Graphics.TransformPoints(CoordinateSpace,CoordinateSpace,PointF[])\n  fullName: System.Drawing.Graphics.TransformPoints(CoordinateSpace,CoordinateSpace,PointF[])\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Transforms an array of points from one coordinate space to another using the current world and page transformations of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates two points and draws a blue line between them.  \\n  \\n-   Sets the world transform to translate by amounts 40 in the x direction and 30 in the y direction.  \\n  \\n-   Transforms the points from world coordinates (<xref:System.Drawing.Drawing2D.CoordinateSpace>) to page coordinates (<xref:System.Drawing.Drawing2D.CoordinateSpace>).  \\n  \\n-   Resets the world transformation to the identity and draws a red line between the transformed points.  \\n  \\n The result is a blue line and a translated red line below it.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/add/codesnippet/cpp/9caccfd4-27c9-4ec4-8e81-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#164](~/add/codesnippet/csharp/9caccfd4-27c9-4ec4-8e81-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/add/codesnippet/visualbasic/9caccfd4-27c9-4ec4-8e81-_1.vb)]\"\n  syntax:\n    content: public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);\n    parameters:\n    - id: destSpace\n      type: System.Drawing.Drawing2D.CoordinateSpace\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"></xref> enumeration that specifies the destination coordinate space.\n    - id: srcSpace\n      type: System.Drawing.Drawing2D.CoordinateSpace\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.CoordinateSpace\"></xref> enumeration that specifies the source coordinate space.\n    - id: pts\n      type: System.Drawing.PointF[]\n      description: Array of <xref href=\"System.Drawing.PointF\"></xref> structures that represent the points to transform.\n  overload: System.Drawing.Graphics.TransformPoints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)\n  id: TranslateClip(System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: TranslateClip(Int32,Int32)\n  nameWithType: Graphics.TranslateClip(Int32,Int32)\n  fullName: System.Drawing.Graphics.TranslateClip(Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Translates the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> by specified amounts in the horizontal and vertical directions.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangle for the clipping region.  \\n  \\n-   Sets the clipping region to the rectangle.  \\n  \\n-   Translates the clipping region by a vector (50, 50).  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a translated, small, black rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/add/codesnippet/cpp/m-system.drawing.graphic_33_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#165](~/add/codesnippet/csharp/m-system.drawing.graphic_33_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/add/codesnippet/visualbasic/m-system.drawing.graphic_33_1.vb)]\"\n  syntax:\n    content: public void TranslateClip (int dx, int dy);\n    parameters:\n    - id: dx\n      type: System.Int32\n      description: The x-coordinate of the translation.\n    - id: dy\n      type: System.Int32\n      description: The y-coordinate of the translation.\n  overload: System.Drawing.Graphics.TranslateClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.TranslateClip(System.Single,System.Single)\n  id: TranslateClip(System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: TranslateClip(Single,Single)\n  nameWithType: Graphics.TranslateClip(Single,Single)\n  fullName: System.Drawing.Graphics.TranslateClip(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Translates the clipping region of this <xref href=\"System.Drawing.Graphics\"></xref> by specified amounts in the horizontal and vertical directions.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a rectangle for the clipping region.  \\n  \\n-   Sets the clipping region to the rectangle.  \\n  \\n-   Translates the clipping region by a vector (50.0F, 50.0F).  \\n  \\n-   Fills a large rectangle with a solid black brush.  \\n  \\n The result is a translated, small, black rectangle.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/add/codesnippet/cpp/m-system.drawing.graphic_45_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#166](~/add/codesnippet/csharp/m-system.drawing.graphic_45_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/add/codesnippet/visualbasic/m-system.drawing.graphic_45_1.vb)]\"\n  syntax:\n    content: public void TranslateClip (float dx, float dy);\n    parameters:\n    - id: dx\n      type: System.Single\n      description: The x-coordinate of the translation.\n    - id: dy\n      type: System.Single\n      description: The y-coordinate of the translation.\n  overload: System.Drawing.Graphics.TranslateClip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)\n  id: TranslateTransform(System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: TranslateTransform(Single,Single)\n  nameWithType: Graphics.TranslateTransform(Single,Single)\n  fullName: System.Drawing.Graphics.TranslateTransform(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: The origin is typically the upper-left-hand corner of the drawing surface.  The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the `dx` and `dy` parameters. This method applies the translation by prepending the translation matrix to the transformation matrix.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Rotates the world transformation matrix of the Windows Form by 30.0F degrees.  \\n  \\n-   Moves the origin of the graphics object by calling TranslateTransform, prepending the translation to the transformation matrix.  \\n  \\n-   Draws a translated, rotated ellipse with a blue pen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/add/codesnippet/cpp/m-system.drawing.graphic_30_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#167](~/add/codesnippet/csharp/m-system.drawing.graphic_30_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/add/codesnippet/visualbasic/m-system.drawing.graphic_30_1.vb)]  \\n  \\n The following illustration shows the output of running the previous code example.  \\n  \\n ![Translated and transformed ellipse](~/add/media/ndp-tranlatetransform.png \\\"Translated and transformed ellipse\\\")\"\n  syntax:\n    content: public void TranslateTransform (float dx, float dy);\n    parameters:\n    - id: dx\n      type: System.Single\n      description: The x-coordinate of the translation.\n    - id: dy\n      type: System.Single\n      description: The y-coordinate of the translation.\n  overload: System.Drawing.Graphics.TranslateTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: TranslateTransform(Single,Single,MatrixOrder)\n  nameWithType: Graphics.TranslateTransform(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Graphics.TranslateTransform(Single,Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Changes the origin of the coordinate system by applying the specified translation to the transformation matrix of this <xref href=\"System.Drawing.Graphics\"></xref> in the specified order.\n  remarks: The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the `dx` and `dy` parameters. This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the translation matrix according to the `order` parameter.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Rotates the world transformation matrix of the Windows Form by 30.0F degrees.  \\n  \\n-   Moves the graphics object's origin by calling TranslateTransform, appending the translation to the world transformation matrix.  \\n  \\n-   Draws a rotated, translated ellipse with a blue pen.  \\n  \\n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/add/codesnippet/cpp/3a1adcd8-df73-46ba-bf3e-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicGraphicsExamples3#168](~/add/codesnippet/csharp/3a1adcd8-df73-46ba-bf3e-_1.cs)]\\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/add/codesnippet/visualbasic/3a1adcd8-df73-46ba-bf3e-_1.vb)]\"\n  syntax:\n    content: public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: dx\n      type: System.Single\n      description: The x-coordinate of the translation.\n    - id: dy\n      type: System.Single\n      description: The y-coordinate of the translation.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: Member of the <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> enumeration that specifies whether the translation is prepended or appended to the transformation matrix.\n  overload: System.Drawing.Graphics.TranslateTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Graphics.VisibleClipBounds\n  id: VisibleClipBounds\n  parent: System.Drawing.Graphics\n  langs:\n  - csharp\n  name: VisibleClipBounds\n  nameWithType: Graphics.VisibleClipBounds\n  fullName: System.Drawing.Graphics.VisibleClipBounds\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets the bounding rectangle of the visible clipping region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  remarks: \"The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.  \\n  \\n The visible clipping region is the intersection of the clipping region of this <xref:System.Drawing.Graphics> and the clipping region of the window.\"\n  syntax:\n    content: public System.Drawing.RectangleF VisibleClipBounds { get; }\n    return:\n      type: System.Drawing.RectangleF\n      description: A <xref href=\"System.Drawing.RectangleF\"></xref> structure that represents a bounding rectangle for the visible clipping region of this <xref href=\"System.Drawing.Graphics\"></xref>.\n  overload: System.Drawing.Graphics.VisibleClipBounds*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.ComponentModel.Win32Exception\n  parent: System.ComponentModel\n  isExternal: false\n  name: Win32Exception\n  nameWithType: Win32Exception\n  fullName: System.ComponentModel.Win32Exception\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Exception\n  isExternal: true\n  name: System.Exception\n- uid: System.Drawing.Graphics.AddMetafileComment(System.Byte[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: AddMetafileComment(Byte[])\n  nameWithType: Graphics.AddMetafileComment(Byte[])\n  fullName: System.Drawing.Graphics.AddMetafileComment(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Graphics.BeginContainer\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: BeginContainer()\n  nameWithType: Graphics.BeginContainer()\n  fullName: System.Drawing.Graphics.BeginContainer()\n- uid: System.Drawing.Drawing2D.GraphicsContainer\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: GraphicsContainer\n  nameWithType: GraphicsContainer\n  fullName: System.Drawing.Drawing2D.GraphicsContainer\n- uid: System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: BeginContainer(Rectangle,Rectangle,GraphicsUnit)\n  nameWithType: Graphics.BeginContainer(Rectangle,Rectangle,GraphicsUnit)\n  fullName: System.Drawing.Graphics.BeginContainer(Rectangle,Rectangle,GraphicsUnit)\n- uid: System.Drawing.Rectangle\n  parent: System.Drawing\n  isExternal: false\n  name: Rectangle\n  nameWithType: Rectangle\n  fullName: System.Drawing.Rectangle\n- uid: System.Drawing.GraphicsUnit\n  parent: System.Drawing\n  isExternal: false\n  name: GraphicsUnit\n  nameWithType: GraphicsUnit\n  fullName: System.Drawing.GraphicsUnit\n- uid: System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: BeginContainer(RectangleF,RectangleF,GraphicsUnit)\n  nameWithType: Graphics.BeginContainer(RectangleF,RectangleF,GraphicsUnit)\n  fullName: System.Drawing.Graphics.BeginContainer(RectangleF,RectangleF,GraphicsUnit)\n- uid: System.Drawing.RectangleF\n  parent: System.Drawing\n  isExternal: false\n  name: RectangleF\n  nameWithType: RectangleF\n  fullName: System.Drawing.RectangleF\n- uid: System.Drawing.Graphics.Clear(System.Drawing.Color)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Clear(Color)\n  nameWithType: Graphics.Clear(Color)\n  fullName: System.Drawing.Graphics.Clear(Color)\n- uid: System.Drawing.Color\n  parent: System.Drawing\n  isExternal: false\n  name: Color\n  nameWithType: Color\n  fullName: System.Drawing.Color\n- uid: System.Drawing.Graphics.Clip\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Clip\n  nameWithType: Graphics.Clip\n  fullName: System.Drawing.Graphics.Clip\n- uid: System.Drawing.Region\n  parent: System.Drawing\n  isExternal: false\n  name: Region\n  nameWithType: Region\n  fullName: System.Drawing.Region\n- uid: System.Drawing.Graphics.ClipBounds\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ClipBounds\n  nameWithType: Graphics.ClipBounds\n  fullName: System.Drawing.Graphics.ClipBounds\n- uid: System.Drawing.Graphics.CompositingMode\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CompositingMode\n  nameWithType: Graphics.CompositingMode\n  fullName: System.Drawing.Graphics.CompositingMode\n- uid: System.Drawing.Drawing2D.CompositingMode\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: CompositingMode\n  nameWithType: CompositingMode\n  fullName: System.Drawing.Drawing2D.CompositingMode\n- uid: System.Drawing.Graphics.CompositingQuality\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CompositingQuality\n  nameWithType: Graphics.CompositingQuality\n  fullName: System.Drawing.Graphics.CompositingQuality\n- uid: System.Drawing.Drawing2D.CompositingQuality\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: CompositingQuality\n  nameWithType: CompositingQuality\n  fullName: System.Drawing.Drawing2D.CompositingQuality\n- uid: System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CopyFromScreen(Point,Point,Size)\n  nameWithType: Graphics.CopyFromScreen(Point,Point,Size)\n  fullName: System.Drawing.Graphics.CopyFromScreen(Point,Point,Size)\n- uid: System.Drawing.Point\n  parent: System.Drawing\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Drawing.Point\n- uid: System.Drawing.Size\n  parent: System.Drawing\n  isExternal: false\n  name: Size\n  nameWithType: Size\n  fullName: System.Drawing.Size\n- uid: System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CopyFromScreen(Point,Point,Size,CopyPixelOperation)\n  nameWithType: Graphics.CopyFromScreen(Point,Point,Size,CopyPixelOperation)\n  fullName: System.Drawing.Graphics.CopyFromScreen(Point,Point,Size,CopyPixelOperation)\n- uid: System.Drawing.CopyPixelOperation\n  parent: System.Drawing\n  isExternal: false\n  name: CopyPixelOperation\n  nameWithType: CopyPixelOperation\n  fullName: System.Drawing.CopyPixelOperation\n- uid: System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CopyFromScreen(Int32,Int32,Int32,Int32,Size)\n  nameWithType: Graphics.CopyFromScreen(Int32,Int32,Int32,Int32,Size)\n  fullName: System.Drawing.Graphics.CopyFromScreen(Int32,Int32,Int32,Int32,Size)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CopyFromScreen(Int32,Int32,Int32,Int32,Size,CopyPixelOperation)\n  nameWithType: Graphics.CopyFromScreen(Int32,Int32,Int32,Int32,Size,CopyPixelOperation)\n  fullName: System.Drawing.Graphics.CopyFromScreen(Int32,Int32,Int32,Int32,Size,CopyPixelOperation)\n- uid: System.Drawing.Graphics.Dispose\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Dispose()\n  nameWithType: Graphics.Dispose()\n  fullName: System.Drawing.Graphics.Dispose()\n- uid: System.Drawing.Graphics.DpiX\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DpiX\n  nameWithType: Graphics.DpiX\n  fullName: System.Drawing.Graphics.DpiX\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Drawing.Graphics.DpiY\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DpiY\n  nameWithType: Graphics.DpiY\n  fullName: System.Drawing.Graphics.DpiY\n- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawArc(Pen,Rectangle,Single,Single)\n  nameWithType: Graphics.DrawArc(Pen,Rectangle,Single,Single)\n  fullName: System.Drawing.Graphics.DrawArc(Pen,Rectangle,Single,Single)\n- uid: System.Drawing.Pen\n  parent: System.Drawing\n  isExternal: false\n  name: Pen\n  nameWithType: Pen\n  fullName: System.Drawing.Pen\n- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawArc(Pen,RectangleF,Single,Single)\n  nameWithType: Graphics.DrawArc(Pen,RectangleF,Single,Single)\n  fullName: System.Drawing.Graphics.DrawArc(Pen,RectangleF,Single,Single)\n- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawArc(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawArc(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawArc(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawArc(Pen,Single,Single,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawArc(Pen,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawArc(Pen,Single,Single,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawBezier(Pen,Point,Point,Point,Point)\n  nameWithType: Graphics.DrawBezier(Pen,Point,Point,Point,Point)\n  fullName: System.Drawing.Graphics.DrawBezier(Pen,Point,Point,Point,Point)\n- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawBezier(Pen,PointF,PointF,PointF,PointF)\n  nameWithType: Graphics.DrawBezier(Pen,PointF,PointF,PointF,PointF)\n  fullName: System.Drawing.Graphics.DrawBezier(Pen,PointF,PointF,PointF,PointF)\n- uid: System.Drawing.PointF\n  parent: System.Drawing\n  isExternal: false\n  name: PointF\n  nameWithType: PointF\n  fullName: System.Drawing.PointF\n- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawBezier(Pen,Single,Single,Single,Single,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawBezier(Pen,Single,Single,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawBezier(Pen,Single,Single,Single,Single,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawBeziers(Pen,Point[])\n  nameWithType: Graphics.DrawBeziers(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawBeziers(Pen,Point[])\n- uid: System.Drawing.Point[]\n  parent: System.Drawing\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Drawing.Point[]\n  spec.csharp:\n  - uid: System.Drawing.Point\n    name: Point\n    nameWithType: Point\n    fullName: Point[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawBeziers(Pen,PointF[])\n  nameWithType: Graphics.DrawBeziers(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawBeziers(Pen,PointF[])\n- uid: System.Drawing.PointF[]\n  parent: System.Drawing\n  isExternal: false\n  name: PointF\n  nameWithType: PointF\n  fullName: System.Drawing.PointF[]\n  spec.csharp:\n  - uid: System.Drawing.PointF\n    name: PointF\n    nameWithType: PointF\n    fullName: PointF[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawClosedCurve(Pen,Point[])\n  nameWithType: Graphics.DrawClosedCurve(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawClosedCurve(Pen,Point[])\n- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawClosedCurve(Pen,PointF[])\n  nameWithType: Graphics.DrawClosedCurve(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawClosedCurve(Pen,PointF[])\n- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawClosedCurve(Pen,Point[],Single,FillMode)\n  nameWithType: Graphics.DrawClosedCurve(Pen,Point[],Single,FillMode)\n  fullName: System.Drawing.Graphics.DrawClosedCurve(Pen,Point[],Single,FillMode)\n- uid: System.Drawing.Drawing2D.FillMode\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: FillMode\n  nameWithType: FillMode\n  fullName: System.Drawing.Drawing2D.FillMode\n- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawClosedCurve(Pen,PointF[],Single,FillMode)\n  nameWithType: Graphics.DrawClosedCurve(Pen,PointF[],Single,FillMode)\n  fullName: System.Drawing.Graphics.DrawClosedCurve(Pen,PointF[],Single,FillMode)\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawCurve(Pen,Point[])\n  nameWithType: Graphics.DrawCurve(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,Point[])\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawCurve(Pen,PointF[])\n  nameWithType: Graphics.DrawCurve(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,PointF[])\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawCurve(Pen,Point[],Single)\n  nameWithType: Graphics.DrawCurve(Pen,Point[],Single)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,Point[],Single)\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawCurve(Pen,PointF[],Single)\n  nameWithType: Graphics.DrawCurve(Pen,PointF[],Single)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,PointF[],Single)\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawCurve(Pen,PointF[],Int32,Int32)\n  nameWithType: Graphics.DrawCurve(Pen,PointF[],Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,PointF[],Int32,Int32)\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawCurve(Pen,Point[],Int32,Int32,Single)\n  nameWithType: Graphics.DrawCurve(Pen,Point[],Int32,Int32,Single)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,Point[],Int32,Int32,Single)\n- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawCurve(Pen,PointF[],Int32,Int32,Single)\n  nameWithType: Graphics.DrawCurve(Pen,PointF[],Int32,Int32,Single)\n  fullName: System.Drawing.Graphics.DrawCurve(Pen,PointF[],Int32,Int32,Single)\n- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawEllipse(Pen,Rectangle)\n  nameWithType: Graphics.DrawEllipse(Pen,Rectangle)\n  fullName: System.Drawing.Graphics.DrawEllipse(Pen,Rectangle)\n- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawEllipse(Pen,RectangleF)\n  nameWithType: Graphics.DrawEllipse(Pen,RectangleF)\n  fullName: System.Drawing.Graphics.DrawEllipse(Pen,RectangleF)\n- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawEllipse(Pen,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawEllipse(Pen,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawEllipse(Pen,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawEllipse(Pen,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawEllipse(Pen,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawEllipse(Pen,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawIcon(Icon,Rectangle)\n  nameWithType: Graphics.DrawIcon(Icon,Rectangle)\n  fullName: System.Drawing.Graphics.DrawIcon(Icon,Rectangle)\n- uid: System.Drawing.Icon\n  parent: System.Drawing\n  isExternal: false\n  name: Icon\n  nameWithType: Icon\n  fullName: System.Drawing.Icon\n- uid: System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawIcon(Icon,Int32,Int32)\n  nameWithType: Graphics.DrawIcon(Icon,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawIcon(Icon,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawIconUnstretched(Icon,Rectangle)\n  nameWithType: Graphics.DrawIconUnstretched(Icon,Rectangle)\n  fullName: System.Drawing.Graphics.DrawIconUnstretched(Icon,Rectangle)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Point)\n  nameWithType: Graphics.DrawImage(Image,Point)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point)\n- uid: System.Drawing.Image\n  parent: System.Drawing\n  isExternal: false\n  name: Image\n  nameWithType: Image\n  fullName: System.Drawing.Image\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Point[])\n  nameWithType: Graphics.DrawImage(Image,Point[])\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[])\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,PointF)\n  nameWithType: Graphics.DrawImage(Image,PointF)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,PointF[])\n  nameWithType: Graphics.DrawImage(Image,PointF[])\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[])\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle)\n  nameWithType: Graphics.DrawImage(Image,Rectangle)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,RectangleF)\n  nameWithType: Graphics.DrawImage(Image,RectangleF)\n  fullName: System.Drawing.Graphics.DrawImage(Image,RectangleF)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Int32,Int32)\n  nameWithType: Graphics.DrawImage(Image,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Single,Single)\n  nameWithType: Graphics.DrawImage(Image,Single,Single)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Single,Single)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Point[],Rectangle,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,PointF[],RectangleF,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Rectangle,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Rectangle,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Rectangle,GraphicsUnit)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,RectangleF,RectangleF,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,RectangleF,RectangleF,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,RectangleF,RectangleF,GraphicsUnit)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes)\n  nameWithType: Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes)\n- uid: System.Drawing.Imaging.ImageAttributes\n  parent: System.Drawing.Imaging\n  isExternal: false\n  name: ImageAttributes\n  nameWithType: ImageAttributes\n  fullName: System.Drawing.Imaging.ImageAttributes\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes)\n  nameWithType: Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Int32,Int32,Rectangle,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Int32,Int32,Rectangle,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Int32,Int32,Rectangle,GraphicsUnit)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawImage(Image,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Single,Single,RectangleF,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Single,Single,RectangleF,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Single,Single,RectangleF,GraphicsUnit)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawImage(Image,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  nameWithType: Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n- uid: System.Drawing.Graphics.DrawImageAbort\n  parent: System.Drawing\n  isExternal: false\n  name: Graphics+DrawImageAbort\n  nameWithType: Graphics+DrawImageAbort\n  fullName: System.Drawing.Graphics+DrawImageAbort\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  nameWithType: Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  nameWithType: Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Point[],Rectangle,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  nameWithType: Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n  fullName: System.Drawing.Graphics.DrawImage(Image,PointF[],RectangleF,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,Int32)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort)\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Int32,Int32,Int32,Int32,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  nameWithType: Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n  fullName: System.Drawing.Graphics.DrawImage(Image,Rectangle,Single,Single,Single,Single,GraphicsUnit,ImageAttributes,Graphics+DrawImageAbort,IntPtr)\n- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImageUnscaled(Image,Point)\n  nameWithType: Graphics.DrawImageUnscaled(Image,Point)\n  fullName: System.Drawing.Graphics.DrawImageUnscaled(Image,Point)\n- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImageUnscaled(Image,Rectangle)\n  nameWithType: Graphics.DrawImageUnscaled(Image,Rectangle)\n  fullName: System.Drawing.Graphics.DrawImageUnscaled(Image,Rectangle)\n- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImageUnscaled(Image,Int32,Int32)\n  nameWithType: Graphics.DrawImageUnscaled(Image,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawImageUnscaled(Image,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImageUnscaled(Image,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawImageUnscaled(Image,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawImageUnscaled(Image,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImageUnscaledAndClipped(Image,Rectangle)\n  nameWithType: Graphics.DrawImageUnscaledAndClipped(Image,Rectangle)\n  fullName: System.Drawing.Graphics.DrawImageUnscaledAndClipped(Image,Rectangle)\n- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawLine(Pen,Point,Point)\n  nameWithType: Graphics.DrawLine(Pen,Point,Point)\n  fullName: System.Drawing.Graphics.DrawLine(Pen,Point,Point)\n- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawLine(Pen,PointF,PointF)\n  nameWithType: Graphics.DrawLine(Pen,PointF,PointF)\n  fullName: System.Drawing.Graphics.DrawLine(Pen,PointF,PointF)\n- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawLine(Pen,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawLine(Pen,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawLine(Pen,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawLine(Pen,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawLine(Pen,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawLine(Pen,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawLines(Pen,Point[])\n  nameWithType: Graphics.DrawLines(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawLines(Pen,Point[])\n- uid: System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawLines(Pen,PointF[])\n  nameWithType: Graphics.DrawLines(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawLines(Pen,PointF[])\n- uid: System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPath(Pen,GraphicsPath)\n  nameWithType: Graphics.DrawPath(Pen,GraphicsPath)\n  fullName: System.Drawing.Graphics.DrawPath(Pen,GraphicsPath)\n- uid: System.Drawing.Drawing2D.GraphicsPath\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: GraphicsPath\n  nameWithType: GraphicsPath\n  fullName: System.Drawing.Drawing2D.GraphicsPath\n- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPie(Pen,Rectangle,Single,Single)\n  nameWithType: Graphics.DrawPie(Pen,Rectangle,Single,Single)\n  fullName: System.Drawing.Graphics.DrawPie(Pen,Rectangle,Single,Single)\n- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPie(Pen,RectangleF,Single,Single)\n  nameWithType: Graphics.DrawPie(Pen,RectangleF,Single,Single)\n  fullName: System.Drawing.Graphics.DrawPie(Pen,RectangleF,Single,Single)\n- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPie(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawPie(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawPie(Pen,Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPie(Pen,Single,Single,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawPie(Pen,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawPie(Pen,Single,Single,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPolygon(Pen,Point[])\n  nameWithType: Graphics.DrawPolygon(Pen,Point[])\n  fullName: System.Drawing.Graphics.DrawPolygon(Pen,Point[])\n- uid: System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPolygon(Pen,PointF[])\n  nameWithType: Graphics.DrawPolygon(Pen,PointF[])\n  fullName: System.Drawing.Graphics.DrawPolygon(Pen,PointF[])\n- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawRectangle(Pen,Rectangle)\n  nameWithType: Graphics.DrawRectangle(Pen,Rectangle)\n  fullName: System.Drawing.Graphics.DrawRectangle(Pen,Rectangle)\n- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawRectangle(Pen,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.DrawRectangle(Pen,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.DrawRectangle(Pen,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawRectangle(Pen,Single,Single,Single,Single)\n  nameWithType: Graphics.DrawRectangle(Pen,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.DrawRectangle(Pen,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawRectangles(Pen,Rectangle[])\n  nameWithType: Graphics.DrawRectangles(Pen,Rectangle[])\n  fullName: System.Drawing.Graphics.DrawRectangles(Pen,Rectangle[])\n- uid: System.Drawing.Rectangle[]\n  parent: System.Drawing\n  isExternal: false\n  name: Rectangle\n  nameWithType: Rectangle\n  fullName: System.Drawing.Rectangle[]\n  spec.csharp:\n  - uid: System.Drawing.Rectangle\n    name: Rectangle\n    nameWithType: Rectangle\n    fullName: Rectangle[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawRectangles(Pen,RectangleF[])\n  nameWithType: Graphics.DrawRectangles(Pen,RectangleF[])\n  fullName: System.Drawing.Graphics.DrawRectangles(Pen,RectangleF[])\n- uid: System.Drawing.RectangleF[]\n  parent: System.Drawing\n  isExternal: false\n  name: RectangleF\n  nameWithType: RectangleF\n  fullName: System.Drawing.RectangleF[]\n  spec.csharp:\n  - uid: System.Drawing.RectangleF\n    name: RectangleF\n    nameWithType: RectangleF\n    fullName: RectangleF[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawString(String,Font,Brush,PointF)\n  nameWithType: Graphics.DrawString(String,Font,Brush,PointF)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,PointF)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Drawing.Font\n  parent: System.Drawing\n  isExternal: false\n  name: Font\n  nameWithType: Font\n  fullName: System.Drawing.Font\n- uid: System.Drawing.Brush\n  parent: System.Drawing\n  isExternal: false\n  name: Brush\n  nameWithType: Brush\n  fullName: System.Drawing.Brush\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawString(String,Font,Brush,RectangleF)\n  nameWithType: Graphics.DrawString(String,Font,Brush,RectangleF)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,RectangleF)\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawString(String,Font,Brush,PointF,StringFormat)\n  nameWithType: Graphics.DrawString(String,Font,Brush,PointF,StringFormat)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,PointF,StringFormat)\n- uid: System.Drawing.StringFormat\n  parent: System.Drawing\n  isExternal: false\n  name: StringFormat\n  nameWithType: StringFormat\n  fullName: System.Drawing.StringFormat\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawString(String,Font,Brush,RectangleF,StringFormat)\n  nameWithType: Graphics.DrawString(String,Font,Brush,RectangleF,StringFormat)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,RectangleF,StringFormat)\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawString(String,Font,Brush,Single,Single)\n  nameWithType: Graphics.DrawString(String,Font,Brush,Single,Single)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,Single,Single)\n- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawString(String,Font,Brush,Single,Single,StringFormat)\n  nameWithType: Graphics.DrawString(String,Font,Brush,Single,Single,StringFormat)\n  fullName: System.Drawing.Graphics.DrawString(String,Font,Brush,Single,Single,StringFormat)\n- uid: System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EndContainer(GraphicsContainer)\n  nameWithType: Graphics.EndContainer(GraphicsContainer)\n  fullName: System.Drawing.Graphics.EndContainer(GraphicsContainer)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Imaging.Metafile\n  parent: System.Drawing.Imaging\n  isExternal: false\n  name: Metafile\n  nameWithType: Metafile\n  fullName: System.Drawing.Imaging.Metafile\n- uid: System.Drawing.Graphics.EnumerateMetafileProc\n  parent: System.Drawing\n  isExternal: false\n  name: Graphics+EnumerateMetafileProc\n  nameWithType: Graphics+EnumerateMetafileProc\n  fullName: System.Drawing.Graphics+EnumerateMetafileProc\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Point[],Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,PointF[],RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,Rectangle,Rectangle,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  nameWithType: Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n  fullName: System.Drawing.Graphics.EnumerateMetafile(Metafile,RectangleF,RectangleF,GraphicsUnit,Graphics+EnumerateMetafileProc,IntPtr,ImageAttributes)\n- uid: System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ExcludeClip(Rectangle)\n  nameWithType: Graphics.ExcludeClip(Rectangle)\n  fullName: System.Drawing.Graphics.ExcludeClip(Rectangle)\n- uid: System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ExcludeClip(Region)\n  nameWithType: Graphics.ExcludeClip(Region)\n  fullName: System.Drawing.Graphics.ExcludeClip(Region)\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillClosedCurve(Brush,Point[])\n  nameWithType: Graphics.FillClosedCurve(Brush,Point[])\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,Point[])\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillClosedCurve(Brush,PointF[])\n  nameWithType: Graphics.FillClosedCurve(Brush,PointF[])\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,PointF[])\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillClosedCurve(Brush,Point[],FillMode)\n  nameWithType: Graphics.FillClosedCurve(Brush,Point[],FillMode)\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,Point[],FillMode)\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillClosedCurve(Brush,PointF[],FillMode)\n  nameWithType: Graphics.FillClosedCurve(Brush,PointF[],FillMode)\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,PointF[],FillMode)\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillClosedCurve(Brush,Point[],FillMode,Single)\n  nameWithType: Graphics.FillClosedCurve(Brush,Point[],FillMode,Single)\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,Point[],FillMode,Single)\n- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillClosedCurve(Brush,PointF[],FillMode,Single)\n  nameWithType: Graphics.FillClosedCurve(Brush,PointF[],FillMode,Single)\n  fullName: System.Drawing.Graphics.FillClosedCurve(Brush,PointF[],FillMode,Single)\n- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillEllipse(Brush,Rectangle)\n  nameWithType: Graphics.FillEllipse(Brush,Rectangle)\n  fullName: System.Drawing.Graphics.FillEllipse(Brush,Rectangle)\n- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillEllipse(Brush,RectangleF)\n  nameWithType: Graphics.FillEllipse(Brush,RectangleF)\n  fullName: System.Drawing.Graphics.FillEllipse(Brush,RectangleF)\n- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillEllipse(Brush,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.FillEllipse(Brush,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.FillEllipse(Brush,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillEllipse(Brush,Single,Single,Single,Single)\n  nameWithType: Graphics.FillEllipse(Brush,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.FillEllipse(Brush,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPath(Brush,GraphicsPath)\n  nameWithType: Graphics.FillPath(Brush,GraphicsPath)\n  fullName: System.Drawing.Graphics.FillPath(Brush,GraphicsPath)\n- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPie(Brush,Rectangle,Single,Single)\n  nameWithType: Graphics.FillPie(Brush,Rectangle,Single,Single)\n  fullName: System.Drawing.Graphics.FillPie(Brush,Rectangle,Single,Single)\n- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPie(Brush,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.FillPie(Brush,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.FillPie(Brush,Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPie(Brush,Single,Single,Single,Single,Single,Single)\n  nameWithType: Graphics.FillPie(Brush,Single,Single,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.FillPie(Brush,Single,Single,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPolygon(Brush,Point[])\n  nameWithType: Graphics.FillPolygon(Brush,Point[])\n  fullName: System.Drawing.Graphics.FillPolygon(Brush,Point[])\n- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPolygon(Brush,PointF[])\n  nameWithType: Graphics.FillPolygon(Brush,PointF[])\n  fullName: System.Drawing.Graphics.FillPolygon(Brush,PointF[])\n- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPolygon(Brush,Point[],FillMode)\n  nameWithType: Graphics.FillPolygon(Brush,Point[],FillMode)\n  fullName: System.Drawing.Graphics.FillPolygon(Brush,Point[],FillMode)\n- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPolygon(Brush,PointF[],FillMode)\n  nameWithType: Graphics.FillPolygon(Brush,PointF[],FillMode)\n  fullName: System.Drawing.Graphics.FillPolygon(Brush,PointF[],FillMode)\n- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRectangle(Brush,Rectangle)\n  nameWithType: Graphics.FillRectangle(Brush,Rectangle)\n  fullName: System.Drawing.Graphics.FillRectangle(Brush,Rectangle)\n- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRectangle(Brush,RectangleF)\n  nameWithType: Graphics.FillRectangle(Brush,RectangleF)\n  fullName: System.Drawing.Graphics.FillRectangle(Brush,RectangleF)\n- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRectangle(Brush,Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.FillRectangle(Brush,Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.FillRectangle(Brush,Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRectangle(Brush,Single,Single,Single,Single)\n  nameWithType: Graphics.FillRectangle(Brush,Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.FillRectangle(Brush,Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRectangles(Brush,Rectangle[])\n  nameWithType: Graphics.FillRectangles(Brush,Rectangle[])\n  fullName: System.Drawing.Graphics.FillRectangles(Brush,Rectangle[])\n- uid: System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRectangles(Brush,RectangleF[])\n  nameWithType: Graphics.FillRectangles(Brush,RectangleF[])\n  fullName: System.Drawing.Graphics.FillRectangles(Brush,RectangleF[])\n- uid: System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRegion(Brush,Region)\n  nameWithType: Graphics.FillRegion(Brush,Region)\n  fullName: System.Drawing.Graphics.FillRegion(Brush,Region)\n- uid: System.Drawing.Graphics.Finalize\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Finalize()\n  nameWithType: Graphics.Finalize()\n  fullName: System.Drawing.Graphics.Finalize()\n- uid: System.Drawing.Graphics.Flush\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Flush()\n  nameWithType: Graphics.Flush()\n  fullName: System.Drawing.Graphics.Flush()\n- uid: System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Flush(FlushIntention)\n  nameWithType: Graphics.Flush(FlushIntention)\n  fullName: System.Drawing.Graphics.Flush(FlushIntention)\n- uid: System.Drawing.Drawing2D.FlushIntention\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: FlushIntention\n  nameWithType: FlushIntention\n  fullName: System.Drawing.Drawing2D.FlushIntention\n- uid: System.Drawing.Graphics.FromHdc(System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHdc(IntPtr)\n  nameWithType: Graphics.FromHdc(IntPtr)\n  fullName: System.Drawing.Graphics.FromHdc(IntPtr)\n- uid: System.Drawing.Graphics\n  parent: System.Drawing\n  isExternal: false\n  name: Graphics\n  nameWithType: Graphics\n  fullName: System.Drawing.Graphics\n- uid: System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHdc(IntPtr,IntPtr)\n  nameWithType: Graphics.FromHdc(IntPtr,IntPtr)\n  fullName: System.Drawing.Graphics.FromHdc(IntPtr,IntPtr)\n- uid: System.Drawing.Graphics.FromHdcInternal(System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHdcInternal(IntPtr)\n  nameWithType: Graphics.FromHdcInternal(IntPtr)\n  fullName: System.Drawing.Graphics.FromHdcInternal(IntPtr)\n- uid: System.Drawing.Graphics.FromHwnd(System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHwnd(IntPtr)\n  nameWithType: Graphics.FromHwnd(IntPtr)\n  fullName: System.Drawing.Graphics.FromHwnd(IntPtr)\n- uid: System.Drawing.Graphics.FromHwndInternal(System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHwndInternal(IntPtr)\n  nameWithType: Graphics.FromHwndInternal(IntPtr)\n  fullName: System.Drawing.Graphics.FromHwndInternal(IntPtr)\n- uid: System.Drawing.Graphics.FromImage(System.Drawing.Image)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromImage(Image)\n  nameWithType: Graphics.FromImage(Image)\n  fullName: System.Drawing.Graphics.FromImage(Image)\n- uid: System.Drawing.Graphics.GetContextInfo\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: GetContextInfo()\n  nameWithType: Graphics.GetContextInfo()\n  fullName: System.Drawing.Graphics.GetContextInfo()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Drawing.Graphics.GetHalftonePalette\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: GetHalftonePalette()\n  nameWithType: Graphics.GetHalftonePalette()\n  fullName: System.Drawing.Graphics.GetHalftonePalette()\n- uid: System.Drawing.Graphics.GetHdc\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: GetHdc()\n  nameWithType: Graphics.GetHdc()\n  fullName: System.Drawing.Graphics.GetHdc()\n- uid: System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: GetNearestColor(Color)\n  nameWithType: Graphics.GetNearestColor(Color)\n  fullName: System.Drawing.Graphics.GetNearestColor(Color)\n- uid: System.Drawing.Graphics.InterpolationMode\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: InterpolationMode\n  nameWithType: Graphics.InterpolationMode\n  fullName: System.Drawing.Graphics.InterpolationMode\n- uid: System.Drawing.Drawing2D.InterpolationMode\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: InterpolationMode\n  nameWithType: InterpolationMode\n  fullName: System.Drawing.Drawing2D.InterpolationMode\n- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IntersectClip(Rectangle)\n  nameWithType: Graphics.IntersectClip(Rectangle)\n  fullName: System.Drawing.Graphics.IntersectClip(Rectangle)\n- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IntersectClip(RectangleF)\n  nameWithType: Graphics.IntersectClip(RectangleF)\n  fullName: System.Drawing.Graphics.IntersectClip(RectangleF)\n- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.Region)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IntersectClip(Region)\n  nameWithType: Graphics.IntersectClip(Region)\n  fullName: System.Drawing.Graphics.IntersectClip(Region)\n- uid: System.Drawing.Graphics.IsClipEmpty\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsClipEmpty\n  nameWithType: Graphics.IsClipEmpty\n  fullName: System.Drawing.Graphics.IsClipEmpty\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Drawing.Graphics.IsVisible(System.Drawing.Point)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible(Point)\n  nameWithType: Graphics.IsVisible(Point)\n  fullName: System.Drawing.Graphics.IsVisible(Point)\n- uid: System.Drawing.Graphics.IsVisible(System.Drawing.PointF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible(PointF)\n  nameWithType: Graphics.IsVisible(PointF)\n  fullName: System.Drawing.Graphics.IsVisible(PointF)\n- uid: System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible(Rectangle)\n  nameWithType: Graphics.IsVisible(Rectangle)\n  fullName: System.Drawing.Graphics.IsVisible(Rectangle)\n- uid: System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible(RectangleF)\n  nameWithType: Graphics.IsVisible(RectangleF)\n  fullName: System.Drawing.Graphics.IsVisible(RectangleF)\n- uid: System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible(Int32,Int32)\n  nameWithType: Graphics.IsVisible(Int32,Int32)\n  fullName: System.Drawing.Graphics.IsVisible(Int32,Int32)\n- uid: System.Drawing.Graphics.IsVisible(System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible(Single,Single)\n  nameWithType: Graphics.IsVisible(Single,Single)\n  fullName: System.Drawing.Graphics.IsVisible(Single,Single)\n- uid: System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible(Int32,Int32,Int32,Int32)\n  nameWithType: Graphics.IsVisible(Int32,Int32,Int32,Int32)\n  fullName: System.Drawing.Graphics.IsVisible(Int32,Int32,Int32,Int32)\n- uid: System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible(Single,Single,Single,Single)\n  nameWithType: Graphics.IsVisible(Single,Single,Single,Single)\n  fullName: System.Drawing.Graphics.IsVisible(Single,Single,Single,Single)\n- uid: System.Drawing.Graphics.IsVisibleClipEmpty\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisibleClipEmpty\n  nameWithType: Graphics.IsVisibleClipEmpty\n  fullName: System.Drawing.Graphics.IsVisibleClipEmpty\n- uid: System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureCharacterRanges(String,Font,RectangleF,StringFormat)\n  nameWithType: Graphics.MeasureCharacterRanges(String,Font,RectangleF,StringFormat)\n  fullName: System.Drawing.Graphics.MeasureCharacterRanges(String,Font,RectangleF,StringFormat)\n- uid: System.Drawing.Region[]\n  parent: System.Drawing\n  isExternal: false\n  name: Region\n  nameWithType: Region\n  fullName: System.Drawing.Region[]\n  spec.csharp:\n  - uid: System.Drawing.Region\n    name: Region\n    nameWithType: Region\n    fullName: Region[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureString(String,Font)\n  nameWithType: Graphics.MeasureString(String,Font)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font)\n- uid: System.Drawing.SizeF\n  parent: System.Drawing\n  isExternal: false\n  name: SizeF\n  nameWithType: SizeF\n  fullName: System.Drawing.SizeF\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureString(String,Font,SizeF)\n  nameWithType: Graphics.MeasureString(String,Font,SizeF)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,SizeF)\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureString(String,Font,Int32)\n  nameWithType: Graphics.MeasureString(String,Font,Int32)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,Int32)\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureString(String,Font,PointF,StringFormat)\n  nameWithType: Graphics.MeasureString(String,Font,PointF,StringFormat)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,PointF,StringFormat)\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureString(String,Font,SizeF,StringFormat)\n  nameWithType: Graphics.MeasureString(String,Font,SizeF,StringFormat)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,SizeF,StringFormat)\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureString(String,Font,Int32,StringFormat)\n  nameWithType: Graphics.MeasureString(String,Font,Int32,StringFormat)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,Int32,StringFormat)\n- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureString(String,Font,SizeF,StringFormat,Int32,Int32)\n  nameWithType: Graphics.MeasureString(String,Font,SizeF,StringFormat,Int32,Int32)\n  fullName: System.Drawing.Graphics.MeasureString(String,Font,SizeF,StringFormat,Int32,Int32)\n- uid: System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MultiplyTransform(Matrix)\n  nameWithType: Graphics.MultiplyTransform(Matrix)\n  fullName: System.Drawing.Graphics.MultiplyTransform(Matrix)\n- uid: System.Drawing.Drawing2D.Matrix\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: Matrix\n  nameWithType: Matrix\n  fullName: System.Drawing.Drawing2D.Matrix\n- uid: System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MultiplyTransform(Matrix,MatrixOrder)\n  nameWithType: Graphics.MultiplyTransform(Matrix,MatrixOrder)\n  fullName: System.Drawing.Graphics.MultiplyTransform(Matrix,MatrixOrder)\n- uid: System.Drawing.Drawing2D.MatrixOrder\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: MatrixOrder\n  nameWithType: MatrixOrder\n  fullName: System.Drawing.Drawing2D.MatrixOrder\n- uid: System.Drawing.Graphics.PageScale\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: PageScale\n  nameWithType: Graphics.PageScale\n  fullName: System.Drawing.Graphics.PageScale\n- uid: System.Drawing.Graphics.PageUnit\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: PageUnit\n  nameWithType: Graphics.PageUnit\n  fullName: System.Drawing.Graphics.PageUnit\n- uid: System.Drawing.Graphics.PixelOffsetMode\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: PixelOffsetMode\n  nameWithType: Graphics.PixelOffsetMode\n  fullName: System.Drawing.Graphics.PixelOffsetMode\n- uid: System.Drawing.Drawing2D.PixelOffsetMode\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: PixelOffsetMode\n  nameWithType: PixelOffsetMode\n  fullName: System.Drawing.Drawing2D.PixelOffsetMode\n- uid: System.Drawing.Graphics.ReleaseHdc\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ReleaseHdc()\n  nameWithType: Graphics.ReleaseHdc()\n  fullName: System.Drawing.Graphics.ReleaseHdc()\n- uid: System.Drawing.Graphics.ReleaseHdc(System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ReleaseHdc(IntPtr)\n  nameWithType: Graphics.ReleaseHdc(IntPtr)\n  fullName: System.Drawing.Graphics.ReleaseHdc(IntPtr)\n- uid: System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ReleaseHdcInternal(IntPtr)\n  nameWithType: Graphics.ReleaseHdcInternal(IntPtr)\n  fullName: System.Drawing.Graphics.ReleaseHdcInternal(IntPtr)\n- uid: System.Drawing.Graphics.RenderingOrigin\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: RenderingOrigin\n  nameWithType: Graphics.RenderingOrigin\n  fullName: System.Drawing.Graphics.RenderingOrigin\n- uid: System.Drawing.Graphics.ResetClip\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ResetClip()\n  nameWithType: Graphics.ResetClip()\n  fullName: System.Drawing.Graphics.ResetClip()\n- uid: System.Drawing.Graphics.ResetTransform\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ResetTransform()\n  nameWithType: Graphics.ResetTransform()\n  fullName: System.Drawing.Graphics.ResetTransform()\n- uid: System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Restore(GraphicsState)\n  nameWithType: Graphics.Restore(GraphicsState)\n  fullName: System.Drawing.Graphics.Restore(GraphicsState)\n- uid: System.Drawing.Drawing2D.GraphicsState\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: GraphicsState\n  nameWithType: GraphicsState\n  fullName: System.Drawing.Drawing2D.GraphicsState\n- uid: System.Drawing.Graphics.RotateTransform(System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: RotateTransform(Single)\n  nameWithType: Graphics.RotateTransform(Single)\n  fullName: System.Drawing.Graphics.RotateTransform(Single)\n- uid: System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: RotateTransform(Single,MatrixOrder)\n  nameWithType: Graphics.RotateTransform(Single,MatrixOrder)\n  fullName: System.Drawing.Graphics.RotateTransform(Single,MatrixOrder)\n- uid: System.Drawing.Graphics.Save\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Save()\n  nameWithType: Graphics.Save()\n  fullName: System.Drawing.Graphics.Save()\n- uid: System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ScaleTransform(Single,Single)\n  nameWithType: Graphics.ScaleTransform(Single,Single)\n  fullName: System.Drawing.Graphics.ScaleTransform(Single,Single)\n- uid: System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ScaleTransform(Single,Single,MatrixOrder)\n  nameWithType: Graphics.ScaleTransform(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Graphics.ScaleTransform(Single,Single,MatrixOrder)\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(GraphicsPath)\n  nameWithType: Graphics.SetClip(GraphicsPath)\n  fullName: System.Drawing.Graphics.SetClip(GraphicsPath)\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Graphics)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(Graphics)\n  nameWithType: Graphics.SetClip(Graphics)\n  fullName: System.Drawing.Graphics.SetClip(Graphics)\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(Rectangle)\n  nameWithType: Graphics.SetClip(Rectangle)\n  fullName: System.Drawing.Graphics.SetClip(Rectangle)\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(RectangleF)\n  nameWithType: Graphics.SetClip(RectangleF)\n  fullName: System.Drawing.Graphics.SetClip(RectangleF)\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(GraphicsPath,CombineMode)\n  nameWithType: Graphics.SetClip(GraphicsPath,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(GraphicsPath,CombineMode)\n- uid: System.Drawing.Drawing2D.CombineMode\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: CombineMode\n  nameWithType: CombineMode\n  fullName: System.Drawing.Drawing2D.CombineMode\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(Graphics,CombineMode)\n  nameWithType: Graphics.SetClip(Graphics,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(Graphics,CombineMode)\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(Rectangle,CombineMode)\n  nameWithType: Graphics.SetClip(Rectangle,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(Rectangle,CombineMode)\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(RectangleF,CombineMode)\n  nameWithType: Graphics.SetClip(RectangleF,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(RectangleF,CombineMode)\n- uid: System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip(Region,CombineMode)\n  nameWithType: Graphics.SetClip(Region,CombineMode)\n  fullName: System.Drawing.Graphics.SetClip(Region,CombineMode)\n- uid: System.Drawing.Graphics.SmoothingMode\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SmoothingMode\n  nameWithType: Graphics.SmoothingMode\n  fullName: System.Drawing.Graphics.SmoothingMode\n- uid: System.Drawing.Drawing2D.SmoothingMode\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: SmoothingMode\n  nameWithType: SmoothingMode\n  fullName: System.Drawing.Drawing2D.SmoothingMode\n- uid: System.Drawing.Graphics.TextContrast\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TextContrast\n  nameWithType: Graphics.TextContrast\n  fullName: System.Drawing.Graphics.TextContrast\n- uid: System.Drawing.Graphics.TextRenderingHint\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TextRenderingHint\n  nameWithType: Graphics.TextRenderingHint\n  fullName: System.Drawing.Graphics.TextRenderingHint\n- uid: System.Drawing.Text.TextRenderingHint\n  parent: System.Drawing.Text\n  isExternal: false\n  name: TextRenderingHint\n  nameWithType: TextRenderingHint\n  fullName: System.Drawing.Text.TextRenderingHint\n- uid: System.Drawing.Graphics.Transform\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Transform\n  nameWithType: Graphics.Transform\n  fullName: System.Drawing.Graphics.Transform\n- uid: System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TransformPoints(CoordinateSpace,CoordinateSpace,Point[])\n  nameWithType: Graphics.TransformPoints(CoordinateSpace,CoordinateSpace,Point[])\n  fullName: System.Drawing.Graphics.TransformPoints(CoordinateSpace,CoordinateSpace,Point[])\n- uid: System.Drawing.Drawing2D.CoordinateSpace\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: CoordinateSpace\n  nameWithType: CoordinateSpace\n  fullName: System.Drawing.Drawing2D.CoordinateSpace\n- uid: System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TransformPoints(CoordinateSpace,CoordinateSpace,PointF[])\n  nameWithType: Graphics.TransformPoints(CoordinateSpace,CoordinateSpace,PointF[])\n  fullName: System.Drawing.Graphics.TransformPoints(CoordinateSpace,CoordinateSpace,PointF[])\n- uid: System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TranslateClip(Int32,Int32)\n  nameWithType: Graphics.TranslateClip(Int32,Int32)\n  fullName: System.Drawing.Graphics.TranslateClip(Int32,Int32)\n- uid: System.Drawing.Graphics.TranslateClip(System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TranslateClip(Single,Single)\n  nameWithType: Graphics.TranslateClip(Single,Single)\n  fullName: System.Drawing.Graphics.TranslateClip(Single,Single)\n- uid: System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TranslateTransform(Single,Single)\n  nameWithType: Graphics.TranslateTransform(Single,Single)\n  fullName: System.Drawing.Graphics.TranslateTransform(Single,Single)\n- uid: System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TranslateTransform(Single,Single,MatrixOrder)\n  nameWithType: Graphics.TranslateTransform(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Graphics.TranslateTransform(Single,Single,MatrixOrder)\n- uid: System.Drawing.Graphics.VisibleClipBounds\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: VisibleClipBounds\n  nameWithType: Graphics.VisibleClipBounds\n  fullName: System.Drawing.Graphics.VisibleClipBounds\n- uid: System.Drawing.Graphics.AddMetafileComment*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: AddMetafileComment\n  nameWithType: Graphics.AddMetafileComment\n- uid: System.Drawing.Graphics.BeginContainer*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: BeginContainer\n  nameWithType: Graphics.BeginContainer\n- uid: System.Drawing.Graphics.Clear*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Clear\n  nameWithType: Graphics.Clear\n- uid: System.Drawing.Graphics.Clip*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Clip\n  nameWithType: Graphics.Clip\n- uid: System.Drawing.Graphics.ClipBounds*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ClipBounds\n  nameWithType: Graphics.ClipBounds\n- uid: System.Drawing.Graphics.CompositingMode*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CompositingMode\n  nameWithType: Graphics.CompositingMode\n- uid: System.Drawing.Graphics.CompositingQuality*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CompositingQuality\n  nameWithType: Graphics.CompositingQuality\n- uid: System.Drawing.Graphics.CopyFromScreen*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: CopyFromScreen\n  nameWithType: Graphics.CopyFromScreen\n- uid: System.Drawing.Graphics.Dispose*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Dispose\n  nameWithType: Graphics.Dispose\n- uid: System.Drawing.Graphics.DpiX*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DpiX\n  nameWithType: Graphics.DpiX\n- uid: System.Drawing.Graphics.DpiY*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DpiY\n  nameWithType: Graphics.DpiY\n- uid: System.Drawing.Graphics.DrawArc*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawArc\n  nameWithType: Graphics.DrawArc\n- uid: System.Drawing.Graphics.DrawBezier*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawBezier\n  nameWithType: Graphics.DrawBezier\n- uid: System.Drawing.Graphics.DrawBeziers*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawBeziers\n  nameWithType: Graphics.DrawBeziers\n- uid: System.Drawing.Graphics.DrawClosedCurve*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawClosedCurve\n  nameWithType: Graphics.DrawClosedCurve\n- uid: System.Drawing.Graphics.DrawCurve*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawCurve\n  nameWithType: Graphics.DrawCurve\n- uid: System.Drawing.Graphics.DrawEllipse*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawEllipse\n  nameWithType: Graphics.DrawEllipse\n- uid: System.Drawing.Graphics.DrawIcon*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawIcon\n  nameWithType: Graphics.DrawIcon\n- uid: System.Drawing.Graphics.DrawIconUnstretched*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawIconUnstretched\n  nameWithType: Graphics.DrawIconUnstretched\n- uid: System.Drawing.Graphics.DrawImage*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImage\n  nameWithType: Graphics.DrawImage\n- uid: System.Drawing.Graphics.DrawImageUnscaled*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImageUnscaled\n  nameWithType: Graphics.DrawImageUnscaled\n- uid: System.Drawing.Graphics.DrawImageUnscaledAndClipped*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawImageUnscaledAndClipped\n  nameWithType: Graphics.DrawImageUnscaledAndClipped\n- uid: System.Drawing.Graphics.DrawLine*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawLine\n  nameWithType: Graphics.DrawLine\n- uid: System.Drawing.Graphics.DrawLines*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawLines\n  nameWithType: Graphics.DrawLines\n- uid: System.Drawing.Graphics.DrawPath*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPath\n  nameWithType: Graphics.DrawPath\n- uid: System.Drawing.Graphics.DrawPie*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPie\n  nameWithType: Graphics.DrawPie\n- uid: System.Drawing.Graphics.DrawPolygon*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawPolygon\n  nameWithType: Graphics.DrawPolygon\n- uid: System.Drawing.Graphics.DrawRectangle*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawRectangle\n  nameWithType: Graphics.DrawRectangle\n- uid: System.Drawing.Graphics.DrawRectangles*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawRectangles\n  nameWithType: Graphics.DrawRectangles\n- uid: System.Drawing.Graphics.DrawString*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: DrawString\n  nameWithType: Graphics.DrawString\n- uid: System.Drawing.Graphics.EndContainer*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EndContainer\n  nameWithType: Graphics.EndContainer\n- uid: System.Drawing.Graphics.EnumerateMetafile*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: EnumerateMetafile\n  nameWithType: Graphics.EnumerateMetafile\n- uid: System.Drawing.Graphics.ExcludeClip*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ExcludeClip\n  nameWithType: Graphics.ExcludeClip\n- uid: System.Drawing.Graphics.FillClosedCurve*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillClosedCurve\n  nameWithType: Graphics.FillClosedCurve\n- uid: System.Drawing.Graphics.FillEllipse*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillEllipse\n  nameWithType: Graphics.FillEllipse\n- uid: System.Drawing.Graphics.FillPath*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPath\n  nameWithType: Graphics.FillPath\n- uid: System.Drawing.Graphics.FillPie*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPie\n  nameWithType: Graphics.FillPie\n- uid: System.Drawing.Graphics.FillPolygon*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillPolygon\n  nameWithType: Graphics.FillPolygon\n- uid: System.Drawing.Graphics.FillRectangle*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRectangle\n  nameWithType: Graphics.FillRectangle\n- uid: System.Drawing.Graphics.FillRectangles*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRectangles\n  nameWithType: Graphics.FillRectangles\n- uid: System.Drawing.Graphics.FillRegion*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FillRegion\n  nameWithType: Graphics.FillRegion\n- uid: System.Drawing.Graphics.Finalize*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Finalize\n  nameWithType: Graphics.Finalize\n- uid: System.Drawing.Graphics.Flush*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Flush\n  nameWithType: Graphics.Flush\n- uid: System.Drawing.Graphics.FromHdc*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHdc\n  nameWithType: Graphics.FromHdc\n- uid: System.Drawing.Graphics.FromHdcInternal*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHdcInternal\n  nameWithType: Graphics.FromHdcInternal\n- uid: System.Drawing.Graphics.FromHwnd*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHwnd\n  nameWithType: Graphics.FromHwnd\n- uid: System.Drawing.Graphics.FromHwndInternal*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromHwndInternal\n  nameWithType: Graphics.FromHwndInternal\n- uid: System.Drawing.Graphics.FromImage*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: FromImage\n  nameWithType: Graphics.FromImage\n- uid: System.Drawing.Graphics.GetContextInfo*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: GetContextInfo\n  nameWithType: Graphics.GetContextInfo\n- uid: System.Drawing.Graphics.GetHalftonePalette*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: GetHalftonePalette\n  nameWithType: Graphics.GetHalftonePalette\n- uid: System.Drawing.Graphics.GetHdc*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: GetHdc\n  nameWithType: Graphics.GetHdc\n- uid: System.Drawing.Graphics.GetNearestColor*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: GetNearestColor\n  nameWithType: Graphics.GetNearestColor\n- uid: System.Drawing.Graphics.InterpolationMode*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: InterpolationMode\n  nameWithType: Graphics.InterpolationMode\n- uid: System.Drawing.Graphics.IntersectClip*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IntersectClip\n  nameWithType: Graphics.IntersectClip\n- uid: System.Drawing.Graphics.IsClipEmpty*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsClipEmpty\n  nameWithType: Graphics.IsClipEmpty\n- uid: System.Drawing.Graphics.IsVisible*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisible\n  nameWithType: Graphics.IsVisible\n- uid: System.Drawing.Graphics.IsVisibleClipEmpty*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: IsVisibleClipEmpty\n  nameWithType: Graphics.IsVisibleClipEmpty\n- uid: System.Drawing.Graphics.MeasureCharacterRanges*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureCharacterRanges\n  nameWithType: Graphics.MeasureCharacterRanges\n- uid: System.Drawing.Graphics.MeasureString*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MeasureString\n  nameWithType: Graphics.MeasureString\n- uid: System.Drawing.Graphics.MultiplyTransform*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: MultiplyTransform\n  nameWithType: Graphics.MultiplyTransform\n- uid: System.Drawing.Graphics.PageScale*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: PageScale\n  nameWithType: Graphics.PageScale\n- uid: System.Drawing.Graphics.PageUnit*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: PageUnit\n  nameWithType: Graphics.PageUnit\n- uid: System.Drawing.Graphics.PixelOffsetMode*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: PixelOffsetMode\n  nameWithType: Graphics.PixelOffsetMode\n- uid: System.Drawing.Graphics.ReleaseHdc*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ReleaseHdc\n  nameWithType: Graphics.ReleaseHdc\n- uid: System.Drawing.Graphics.ReleaseHdcInternal*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ReleaseHdcInternal\n  nameWithType: Graphics.ReleaseHdcInternal\n- uid: System.Drawing.Graphics.RenderingOrigin*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: RenderingOrigin\n  nameWithType: Graphics.RenderingOrigin\n- uid: System.Drawing.Graphics.ResetClip*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ResetClip\n  nameWithType: Graphics.ResetClip\n- uid: System.Drawing.Graphics.ResetTransform*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ResetTransform\n  nameWithType: Graphics.ResetTransform\n- uid: System.Drawing.Graphics.Restore*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Restore\n  nameWithType: Graphics.Restore\n- uid: System.Drawing.Graphics.RotateTransform*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: RotateTransform\n  nameWithType: Graphics.RotateTransform\n- uid: System.Drawing.Graphics.Save*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Save\n  nameWithType: Graphics.Save\n- uid: System.Drawing.Graphics.ScaleTransform*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: ScaleTransform\n  nameWithType: Graphics.ScaleTransform\n- uid: System.Drawing.Graphics.SetClip*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SetClip\n  nameWithType: Graphics.SetClip\n- uid: System.Drawing.Graphics.SmoothingMode*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: SmoothingMode\n  nameWithType: Graphics.SmoothingMode\n- uid: System.Drawing.Graphics.TextContrast*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TextContrast\n  nameWithType: Graphics.TextContrast\n- uid: System.Drawing.Graphics.TextRenderingHint*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TextRenderingHint\n  nameWithType: Graphics.TextRenderingHint\n- uid: System.Drawing.Graphics.Transform*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: Transform\n  nameWithType: Graphics.Transform\n- uid: System.Drawing.Graphics.TransformPoints*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TransformPoints\n  nameWithType: Graphics.TransformPoints\n- uid: System.Drawing.Graphics.TranslateClip*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TranslateClip\n  nameWithType: Graphics.TranslateClip\n- uid: System.Drawing.Graphics.TranslateTransform*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: TranslateTransform\n  nameWithType: Graphics.TranslateTransform\n- uid: System.Drawing.Graphics.VisibleClipBounds*\n  parent: System.Drawing.Graphics\n  isExternal: false\n  name: VisibleClipBounds\n  nameWithType: Graphics.VisibleClipBounds\n"}