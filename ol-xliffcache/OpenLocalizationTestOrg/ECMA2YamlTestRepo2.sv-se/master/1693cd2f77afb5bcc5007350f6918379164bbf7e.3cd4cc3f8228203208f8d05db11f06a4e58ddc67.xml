{"nodes":[{"pos":[693,705],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1324,1336],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2006,2018],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  id: IEnumeratorContract`1\n  children:\n  - System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent\n  - System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext\n  - System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset\n  langs:\n  - csharp\n  name: IEnumeratorContract<C>\n  nameWithType: IEnumeratorContract<C>\n  fullName: System.AddIn.Contract.Collections.IEnumeratorContract<C>\n  type: Interface\n  syntax:\n    content: 'public interface IEnumeratorContract<C> : System.AddIn.Contract.IContract where C : IContract'\n    typeParameters:\n    - id: C\n      description: To be added.\n  implements:\n  - System.AddIn.Contract.IContract\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent\n  id: GetCurrent\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  langs:\n  - csharp\n  name: GetCurrent()\n  nameWithType: IEnumeratorContract<C>.GetCurrent()\n  fullName: System.AddIn.Contract.Collections.IEnumeratorContract<C>.GetCurrent()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public C GetCurrent ();\n    parameters: []\n    return:\n      type: C\n      description: To be added.\n  overload: System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext\n  id: MoveNext\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  langs:\n  - csharp\n  name: MoveNext()\n  nameWithType: IEnumeratorContract<C>.MoveNext()\n  fullName: System.AddIn.Contract.Collections.IEnumeratorContract<C>.MoveNext()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public bool MoveNext ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset\n  id: Reset\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: IEnumeratorContract<C>.Reset()\n  fullName: System.AddIn.Contract.Collections.IEnumeratorContract<C>.Reset()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  isExternal: false\n  name: GetCurrent()\n  nameWithType: IEnumeratorContract<C>.GetCurrent()\n  fullName: System.AddIn.Contract.Collections.IEnumeratorContract<C>.GetCurrent()\n- uid: C\n  isExternal: true\n  name: C\n  nameWithType: C\n  fullName: C\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  isExternal: false\n  name: MoveNext()\n  nameWithType: IEnumeratorContract<C>.MoveNext()\n  fullName: System.AddIn.Contract.Collections.IEnumeratorContract<C>.MoveNext()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  isExternal: false\n  name: Reset()\n  nameWithType: IEnumeratorContract<C>.Reset()\n  fullName: System.AddIn.Contract.Collections.IEnumeratorContract<C>.Reset()\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent*\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  isExternal: false\n  name: GetCurrent\n  nameWithType: IEnumeratorContract<C>.GetCurrent\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext*\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  isExternal: false\n  name: MoveNext\n  nameWithType: IEnumeratorContract<C>.MoveNext\n- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset*\n  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1\n  isExternal: false\n  name: Reset\n  nameWithType: IEnumeratorContract<C>.Reset\n"}