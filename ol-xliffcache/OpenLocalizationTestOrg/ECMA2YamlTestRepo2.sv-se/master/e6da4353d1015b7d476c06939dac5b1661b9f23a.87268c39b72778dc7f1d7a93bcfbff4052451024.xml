{"nodes":[{"pos":[2704,2716],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4743,4755],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5607,5619],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5673,5685],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7343,7355],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7414,7426],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8294,8306],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8365,8377],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9532,9544],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9610,9622],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10230,10242],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11197,11209],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11386,11398],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12405,12417],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12594,12606],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13536,13548],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14196,14208],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15051,15063],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15113,15125],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15876,15888],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16966,16978],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17037,17049],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17885,17897],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17956,17968],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18861,18873],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19820,19832],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19886,19898],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19957,19969],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20663,20675],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  id: MessageQueryTable`1\n  children:\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.ServiceModel.Dispatcher.MessageQuery,`0)\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Count\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.Message)\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Item(System.ServiceModel.Dispatcher.MessageQuery)\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.ServiceModel.Dispatcher.MessageQuery)\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)\n  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Values\n  langs:\n  - csharp\n  name: MessageQueryTable<TItem>\n  nameWithType: MessageQueryTable<TItem>\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>\n  type: Class\n  syntax:\n    content: 'public class MessageQueryTable<TItem> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>, System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageQuery,TItem>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>'\n    typeParameters:\n    - id: TItem\n      description: To be added.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>\n  - System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageQuery,TItem>\n  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: MessageQueryTable()\n  nameWithType: MessageQueryTable<TItem>.MessageQueryTable()\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.MessageQueryTable()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public MessageQueryTable ();\n    parameters: []\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  id: Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Add(KeyValuePair<MessageQuery,TItem>)\n  nameWithType: MessageQueryTable<TItem>.Add(KeyValuePair<MessageQuery,TItem>)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Add(KeyValuePair<MessageQuery,TItem>)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public void Add (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem> item);\n    parameters:\n    - id: item\n      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.ServiceModel.Dispatcher.MessageQuery,`0)\n  id: Add(System.ServiceModel.Dispatcher.MessageQuery,`0)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Add(MessageQuery,TItem)\n  nameWithType: MessageQueryTable<TItem>.Add(MessageQuery,TItem)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Add(MessageQuery,TItem)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public void Add (System.ServiceModel.Dispatcher.MessageQuery key, TItem value);\n    parameters:\n    - id: key\n      type: System.ServiceModel.Dispatcher.MessageQuery\n      description: To be added.\n    - id: value\n      type: TItem\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear\n  id: Clear\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: MessageQueryTable<TItem>.Clear()\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Clear()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  id: Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Contains(KeyValuePair<MessageQuery,TItem>)\n  nameWithType: MessageQueryTable<TItem>.Contains(KeyValuePair<MessageQuery,TItem>)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Contains(KeyValuePair<MessageQuery,TItem>)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public bool Contains (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem> item);\n    parameters:\n    - id: item\n      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)\n  id: ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: ContainsKey(MessageQuery)\n  nameWithType: MessageQueryTable<TItem>.ContainsKey(MessageQuery)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.ContainsKey(MessageQuery)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public bool ContainsKey (System.ServiceModel.Dispatcher.MessageQuery key);\n    parameters:\n    - id: key\n      type: System.ServiceModel.Dispatcher.MessageQuery\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)\n  id: CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)\n  nameWithType: MessageQueryTable<TItem>.CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public void CopyTo (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}[]\n      description: To be added.\n    - id: arrayIndex\n      type: System.Int32\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Count\n  id: Count\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: MessageQueryTable<TItem>.Count\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Count\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.Message)\n  id: Evaluate``1(System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Evaluate(Message)\n  nameWithType: MessageQueryTable<TItem>.Evaluate(Message)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Evaluate(Message)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>> Evaluate<TResult> (System.ServiceModel.Channels.Message message);\n    parameters:\n    - id: message\n      type: System.ServiceModel.Channels.Message\n      description: To be added.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TResult}}\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate<TResult>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)\n  id: Evaluate``1(System.ServiceModel.Channels.MessageBuffer)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Evaluate(MessageBuffer)\n  nameWithType: MessageQueryTable<TItem>.Evaluate(MessageBuffer)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Evaluate(MessageBuffer)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>> Evaluate<TResult> (System.ServiceModel.Channels.MessageBuffer buffer);\n    parameters:\n    - id: buffer\n      type: System.ServiceModel.Channels.MessageBuffer\n      description: To be added.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TResult}}\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate<TResult>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: MessageQueryTable<TItem>.GetEnumerator()\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}}\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly\n  id: IsReadOnly\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: MessageQueryTable<TItem>.IsReadOnly\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.IsReadOnly\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Item(System.ServiceModel.Dispatcher.MessageQuery)\n  id: Item(System.ServiceModel.Dispatcher.MessageQuery)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Item(MessageQuery)\n  nameWithType: MessageQueryTable<TItem>.Item(MessageQuery)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Item(MessageQuery)\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public TItem this[System.ServiceModel.Dispatcher.MessageQuery key] { get; set; }\n    parameters:\n    - id: key\n      type: System.ServiceModel.Dispatcher.MessageQuery\n      description: To be added.\n    return:\n      type: TItem\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys\n  id: Keys\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: MessageQueryTable<TItem>.Keys\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Keys\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageQuery> Keys { get; }\n    return:\n      type: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageQuery}\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  id: Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Remove(KeyValuePair<MessageQuery,TItem>)\n  nameWithType: MessageQueryTable<TItem>.Remove(KeyValuePair<MessageQuery,TItem>)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Remove(KeyValuePair<MessageQuery,TItem>)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public bool Remove (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem> item);\n    parameters:\n    - id: item\n      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.ServiceModel.Dispatcher.MessageQuery)\n  id: Remove(System.ServiceModel.Dispatcher.MessageQuery)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Remove(MessageQuery)\n  nameWithType: MessageQueryTable<TItem>.Remove(MessageQuery)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Remove(MessageQuery)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public bool Remove (System.ServiceModel.Dispatcher.MessageQuery key);\n    parameters:\n    - id: key\n      type: System.ServiceModel.Dispatcher.MessageQuery\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)\n  id: TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: TryGetValue(MessageQuery,TItem)\n  nameWithType: MessageQueryTable<TItem>.TryGetValue(MessageQuery,TItem)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.TryGetValue(MessageQuery,TItem)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public bool TryGetValue (System.ServiceModel.Dispatcher.MessageQuery key, out TItem value);\n    parameters:\n    - id: key\n      type: System.ServiceModel.Dispatcher.MessageQuery\n      description: To be added.\n    - id: value\n      type: TItem\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Values\n  id: Values\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  langs:\n  - csharp\n  name: Values\n  nameWithType: MessageQueryTable<TItem>.Values\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Values\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  syntax:\n    content: public System.Collections.Generic.ICollection<TItem> Values { get; }\n    return:\n      type: System.Collections.Generic.ICollection{TItem}\n      description: To be added.\n  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Values*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: MessageQueryTable()\n  nameWithType: MessageQueryTable<TItem>.MessageQueryTable()\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.MessageQueryTable()\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Add(KeyValuePair<MessageQuery,TItem>)\n  nameWithType: MessageQueryTable<TItem>.Add(KeyValuePair<MessageQuery,TItem>)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Add(KeyValuePair<MessageQuery,TItem>)\n- uid: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: KeyValuePair<MessageQuery,TItem>\n  nameWithType: KeyValuePair<MessageQuery,TItem>\n  fullName: System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ServiceModel.Dispatcher.MessageQuery\n    name: MessageQuery\n    nameWithType: MessageQuery\n    fullName: MessageQuery\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TItem\n    name: TItem\n    nameWithType: TItem\n    fullName: TItem\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.ServiceModel.Dispatcher.MessageQuery,`0)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Add(MessageQuery,TItem)\n  nameWithType: MessageQueryTable<TItem>.Add(MessageQuery,TItem)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Add(MessageQuery,TItem)\n- uid: System.ServiceModel.Dispatcher.MessageQuery\n  parent: System.ServiceModel.Dispatcher\n  isExternal: false\n  name: MessageQuery\n  nameWithType: MessageQuery\n  fullName: System.ServiceModel.Dispatcher.MessageQuery\n- uid: TItem\n  isExternal: true\n  name: TItem\n  nameWithType: TItem\n  fullName: TItem\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Clear()\n  nameWithType: MessageQueryTable<TItem>.Clear()\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Clear()\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Contains(KeyValuePair<MessageQuery,TItem>)\n  nameWithType: MessageQueryTable<TItem>.Contains(KeyValuePair<MessageQuery,TItem>)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Contains(KeyValuePair<MessageQuery,TItem>)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: ContainsKey(MessageQuery)\n  nameWithType: MessageQueryTable<TItem>.ContainsKey(MessageQuery)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.ContainsKey(MessageQuery)\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)\n  nameWithType: MessageQueryTable<TItem>.CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)\n- uid: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}[]\n  parent: System.Collections.Generic\n  isExternal: true\n  name: KeyValuePair<MessageQuery,TItem>\n  nameWithType: KeyValuePair<MessageQuery,TItem>\n  fullName: System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>[]\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>[]\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ServiceModel.Dispatcher.MessageQuery\n    name: MessageQuery\n    nameWithType: MessageQuery\n    fullName: MessageQuery\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TItem\n    name: TItem\n    nameWithType: TItem\n    fullName: TItem\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Count\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Count\n  nameWithType: MessageQueryTable<TItem>.Count\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Count\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Evaluate(Message)\n  nameWithType: MessageQueryTable<TItem>.Evaluate(Message)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Evaluate(Message)\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TResult}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<KeyValuePair<MessageQuery,TResult>>\n  nameWithType: IEnumerable<KeyValuePair<MessageQuery,TResult>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ServiceModel.Dispatcher.MessageQuery\n    name: MessageQuery\n    nameWithType: MessageQuery\n    fullName: MessageQuery\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Evaluate(MessageBuffer)\n  nameWithType: MessageQueryTable<TItem>.Evaluate(MessageBuffer)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Evaluate(MessageBuffer)\n- uid: System.ServiceModel.Channels.MessageBuffer\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: MessageBuffer\n  nameWithType: MessageBuffer\n  fullName: System.ServiceModel.Channels.MessageBuffer\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: MessageQueryTable<TItem>.GetEnumerator()\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<KeyValuePair<MessageQuery,TItem>>\n  nameWithType: IEnumerator<KeyValuePair<MessageQuery,TItem>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ServiceModel.Dispatcher.MessageQuery\n    name: MessageQuery\n    nameWithType: MessageQuery\n    fullName: MessageQuery\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TItem\n    name: TItem\n    nameWithType: TItem\n    fullName: TItem\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: MessageQueryTable<TItem>.IsReadOnly\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.IsReadOnly\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Item(System.ServiceModel.Dispatcher.MessageQuery)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Item(MessageQuery)\n  nameWithType: MessageQueryTable<TItem>.Item(MessageQuery)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Item(MessageQuery)\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Keys\n  nameWithType: MessageQueryTable<TItem>.Keys\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Keys\n- uid: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageQuery}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<MessageQuery>\n  nameWithType: ICollection<MessageQuery>\n  fullName: System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageQuery>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<System.ServiceModel.Dispatcher.MessageQuery>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ServiceModel.Dispatcher.MessageQuery\n    name: MessageQuery\n    nameWithType: MessageQuery\n    fullName: MessageQuery\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Remove(KeyValuePair<MessageQuery,TItem>)\n  nameWithType: MessageQueryTable<TItem>.Remove(KeyValuePair<MessageQuery,TItem>)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Remove(KeyValuePair<MessageQuery,TItem>)\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.ServiceModel.Dispatcher.MessageQuery)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Remove(MessageQuery)\n  nameWithType: MessageQueryTable<TItem>.Remove(MessageQuery)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Remove(MessageQuery)\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: TryGetValue(MessageQuery,TItem)\n  nameWithType: MessageQueryTable<TItem>.TryGetValue(MessageQuery,TItem)\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.TryGetValue(MessageQuery,TItem)\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Values\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Values\n  nameWithType: MessageQueryTable<TItem>.Values\n  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Values\n- uid: System.Collections.Generic.ICollection{TItem}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<TItem>\n  nameWithType: ICollection<TItem>\n  fullName: System.Collections.Generic.ICollection<TItem>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<TItem>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TItem\n    name: TItem\n    nameWithType: TItem\n    fullName: TItem\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: MessageQueryTable<TItem>\n  nameWithType: MessageQueryTable<TItem>.MessageQueryTable<TItem>\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Add\n  nameWithType: MessageQueryTable<TItem>.Add\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Clear\n  nameWithType: MessageQueryTable<TItem>.Clear\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Contains\n  nameWithType: MessageQueryTable<TItem>.Contains\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: ContainsKey\n  nameWithType: MessageQueryTable<TItem>.ContainsKey\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: MessageQueryTable<TItem>.CopyTo\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Count*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Count\n  nameWithType: MessageQueryTable<TItem>.Count\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate<TResult>*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Evaluate<TResult>\n  nameWithType: MessageQueryTable<TItem>.Evaluate<TResult>\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: MessageQueryTable<TItem>.GetEnumerator\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: MessageQueryTable<TItem>.IsReadOnly\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Item*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Item\n  nameWithType: MessageQueryTable<TItem>.Item\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Keys\n  nameWithType: MessageQueryTable<TItem>.Keys\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Remove\n  nameWithType: MessageQueryTable<TItem>.Remove\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: TryGetValue\n  nameWithType: MessageQueryTable<TItem>.TryGetValue\n- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Values*\n  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1\n  isExternal: false\n  name: Values\n  nameWithType: MessageQueryTable<TItem>.Values\n"}