{"nodes":[{"pos":[1562,1750],"content":"Provides constants and static methods for trigonometric functions, logarithmic functions, and other common mathematical functions. This class belongs to the built-in object model category.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides constants and static methods for trigonometric functions, logarithmic functions, and other common mathematical functions. This class belongs to the built-in object model category.","pos":[0,188],"nodes":[{"content":"Provides constants and static methods for trigonometric functions, logarithmic functions, and other common mathematical functions.","pos":[0,130]},{"content":"This class belongs to the built-in object model category.","pos":[131,188]}]}]},{"pos":[4944,4998],"content":"Calculates the absolute value of the specified number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the absolute value of the specified number.","pos":[0,54]}]},{"pos":[5132,5178],"content":"The number to calculate the absolute value of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to calculate the absolute value of.","pos":[0,46]}]},{"pos":[5236,5273],"content":"The absolute value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The absolute value of <code>d</code>."},{"pos":[5709,5763],"content":"Calculates the inverse cosine of the specified number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the inverse cosine of the specified number.","pos":[0,54]}]},{"pos":[5898,5944],"content":"The number to calculate the inverse cosine of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to calculate the inverse cosine of.","pos":[0,46]}]},{"pos":[6002,6060],"content":"The inverse cosine of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, measured in radians.","needQuote":true,"needEscape":true,"source":"The inverse cosine of <code>x</code>, measured in radians."},{"pos":[6497,6549],"content":"Calculates the inverse sine of the specified number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the inverse sine of the specified number.","pos":[0,52]}]},{"pos":[6684,6728],"content":"The number to calculate the inverse sine of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to calculate the inverse sine of.","pos":[0,44]}]},{"pos":[6786,6842],"content":"The inverse sine of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, measured in radians.","needQuote":true,"needEscape":true,"source":"The inverse sine of <code>x</code>, measured in radians."},{"pos":[7279,7334],"content":"Calculates the inverse tangent of the specified number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the inverse tangent of the specified number.","pos":[0,55]}]},{"pos":[7469,7516],"content":"The number to calculate the inverse tangent of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to calculate the inverse tangent of.","pos":[0,47]}]},{"pos":[7574,7633],"content":"The inverse tangent of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, measured in radians.","needQuote":true,"needEscape":true,"source":"The inverse tangent of <code>x</code>, measured in radians."},{"pos":[8124,8196],"content":"Calculates the inverse tangent of the quotient of the specified numbers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the inverse tangent of the quotient of the specified numbers.","pos":[0,72]}]},{"pos":[8345,8411],"content":"The numerator of the quotient to calculate the inverse tangent of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The numerator of the quotient to calculate the inverse tangent of.","pos":[0,66]}]},{"pos":[8470,8538],"content":"The denominator of the quotient to calculate the inverse tangent of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The denominator of the quotient to calculate the inverse tangent of.","pos":[0,68]}]},{"pos":[8596,8672],"content":"The inverse tangent of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dy</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\">/</ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">dx</ph><ept id=\"p2\">&lt;/code&gt;</ept>, measured in radians.","needQuote":true,"needEscape":true,"source":"The inverse tangent of <code>dy</code>/<code>dx</code>, measured in radians."},{"pos":[9110,9242],"content":"Calculates the ceiling of the specified number, which is the smallest integer that is greater than or equal to the specified number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the ceiling of the specified number, which is the smallest integer that is greater than or equal to the specified number.","pos":[0,132]}]},{"pos":[9377,9416],"content":"The number to calculate the ceiling of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to calculate the ceiling of.","pos":[0,39]}]},{"pos":[9474,9504],"content":"The ceiling of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The ceiling of <code>x</code>."},{"pos":[9936,9981],"content":"Calculates the cosine of the specified angle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the cosine of the specified angle.","pos":[0,45]}]},{"pos":[10115,10145],"content":"An angle, measured in radians.","needQuote":true,"needEscape":true,"nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]},{"pos":[10203,10232],"content":"The cosine of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The cosine of <code>x</code>."},{"pos":[10598,10719],"content":"Stores a value that represents Euler's constant, which is the base of the natural logarithm, specified by the constant e.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stores a value that represents Euler's constant, which is the base of the natural logarithm, specified by the constant e.","pos":[0,121]}]},{"pos":[10842,10854],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11239,11357],"content":"Calculates the number e to the raised specified power, where e is Euler's constant, the base of the natural logarithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the number e to the raised specified power, where e is Euler's constant, the base of the natural logarithm.","pos":[0,118]}]},{"pos":[11491,11517],"content":"The power to raise <ph id=\"ph1\">`e`</ph> to.","needQuote":true,"needEscape":true,"source":"The power to raise `e` to."},{"pos":[11575,11623],"content":"The number e raised to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> power.","needQuote":true,"needEscape":true,"source":"The number e raised to the <code>x</code> power."},{"pos":[12064,12190],"content":"Calculates the floor of the specified number, which is the largest integer that is less than or equal to the specified number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the floor of the specified number, which is the largest integer that is less than or equal to the specified number.","pos":[0,126]}]},{"pos":[12326,12363],"content":"The number to calculate the floor of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to calculate the floor of.","pos":[0,37]}]},{"pos":[12421,12449],"content":"The floor of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The floor of <code>x</code>."},{"pos":[12832,12919],"content":"Stores a value that represents the logarithm base e of 10, the natural logarithm of 10.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stores a value that represents the logarithm base e of 10, the natural logarithm of 10.","pos":[0,87]}]},{"pos":[13045,13057],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13387,13472],"content":"Stores a value that represents the logarithm base e of 2, the natural logarithm of 2.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stores a value that represents the logarithm base e of 2, the natural logarithm of 2.","pos":[0,85]}]},{"pos":[13598,13610],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13995,14107],"content":"Calculates the logarithm base e of the specified number, which is the natural logarithm of the specified number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the logarithm base e of the specified number, which is the natural logarithm of the specified number.","pos":[0,112]}]},{"pos":[14241,14290],"content":"The number to calculate the natural logarithm of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to calculate the natural logarithm of.","pos":[0,49]}]},{"pos":[14348,14388],"content":"The natural logarithm of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The natural logarithm of <code>x</code>."},{"pos":[14779,14864],"content":"Stores a value that represents the logarithm base 10 of e, the common logarithm of e.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stores a value that represents the logarithm base 10 of e, the common logarithm of e.","pos":[0,85]}]},{"pos":[14993,15005],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15345,15429],"content":"Stores a value that represents the logarithm base 2 of e, the binary logarithm of e.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stores a value that represents the logarithm base 2 of e, the binary logarithm of e.","pos":[0,84]}]},{"pos":[15556,15568],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16061,16114],"content":"Returns the largest of two or more specified numbers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the largest of two or more specified numbers.","pos":[0,53]}]},{"pos":[16273,16301],"content":"The first number to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first number to compare.","pos":[0,28]}]},{"pos":[16359,16388],"content":"The second number to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second number to compare.","pos":[0,29]}]},{"pos":[16451,16481],"content":"Additional numbers to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"Additional numbers to compare.","pos":[0,30]}]},{"pos":[16539,16642],"content":"The largest of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and the numbers that are contained in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">args</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The largest of <code>x</code>, <code>y</code>, and the numbers that are contained in <code>args</code>."},{"pos":[17181,17235],"content":"Returns the smallest of two or more specified numbers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the smallest of two or more specified numbers.","pos":[0,54]}]},{"pos":[17394,17422],"content":"The first number to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first number to compare.","pos":[0,28]}]},{"pos":[17480,17509],"content":"The second number to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second number to compare.","pos":[0,29]}]},{"pos":[17572,17602],"content":"Additional numbers to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"Additional numbers to compare.","pos":[0,30]}]},{"pos":[17660,17764],"content":"The smallest of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and the numbers that are contained in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">args</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The smallest of <code>x</code>, <code>y</code>, and the numbers that are contained in <code>args</code>."},{"pos":[18135,18254],"content":"Stores a value that represents the ratio of the circumference of a circle to its diameter, specified by the constant π.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stores a value that represents the ratio of the circumference of a circle to its diameter, specified by the constant π.","pos":[0,119]}]},{"pos":[18378,18390],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18824,18886],"content":"Calculates the specified number raised to the specified power.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the specified number raised to the specified power.","pos":[0,62]}]},{"pos":[19033,19071],"content":"The number to raise to the <ph id=\"ph1\">`dy`</ph> power.","needQuote":true,"needEscape":true,"source":"The number to raise to the `dy` power."},{"pos":[19130,19157],"content":"The power to raise <ph id=\"ph1\">`dx`</ph> to.","needQuote":true,"needEscape":true,"source":"The power to raise `dx` to."},{"pos":[19215,19278],"content":"The number <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dx</ph><ept id=\"p1\">&lt;/code&gt;</ept> raised to the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">dy</ph><ept id=\"p2\">&lt;/code&gt;</ept> power.","needQuote":true,"needEscape":true,"source":"The number <code>dx</code> raised to the <code>dy</code> power."},{"pos":[19676,19790],"content":"Generates a random number between 0 and 1. This method does not generate a cryptographically secure random number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a random number between 0 and 1. This method does not generate a cryptographically secure random number.","pos":[0,114],"nodes":[{"content":"Generates a random number between 0 and 1.","pos":[0,42]},{"content":"This method does not generate a cryptographically secure random number.","pos":[43,114]}]}]},{"pos":[19922,19983],"content":"A number that is greater than or equal to 0, and less than 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number that is greater than or equal to 0, and less than 1.","pos":[0,61]}]},{"pos":[20427,20489],"content":"Rounds the specified number down or up to the nearest integer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rounds the specified number down or up to the nearest integer.","pos":[0,62]}]},{"pos":[20625,20645],"content":"The number to round.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to round.","pos":[0,20]}]},{"pos":[20703,20922],"content":"If the fractional part of <code>d</code> is less than halfway to the next integer, <code>d</code> rounded down. If the fractional part of <code>d</code> is halfway or more to the next integer, <code>d</code> rounded up.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the fractional part of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than halfway to the next integer, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">d</ph><ept id=\"p2\">&lt;/code&gt;</ept> rounded down.","pos":[0,111],"source":"If the fractional part of <code>d</code> is less than halfway to the next integer, <code>d</code> rounded down."},{"content":"If the fractional part of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> is halfway or more to the next integer, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">d</ph><ept id=\"p2\">&lt;/code&gt;</ept> rounded up.","pos":[112,219],"source":" If the fractional part of <code>d</code> is halfway or more to the next integer, <code>d</code> rounded up."}]},{"pos":[21355,21398],"content":"Calculates the sine of the specified angle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the sine of the specified angle.","pos":[0,43]}]},{"pos":[21532,21562],"content":"An angle, measured in radians.","needQuote":true,"needEscape":true,"nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]},{"pos":[21620,21647],"content":"The sine of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The sine of <code>x</code>."},{"pos":[22083,22134],"content":"Calculates the square root of the specified number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the square root of the specified number.","pos":[0,51]}]},{"pos":[22269,22312],"content":"The number to calculate the square root of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number to calculate the square root of.","pos":[0,43]}]},{"pos":[22370,22404],"content":"The square root of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The square root of <code>x</code>."},{"pos":[22802,22891],"content":"Stores a value that represents the following equivalent values: (√2)/2, √(½), and 1/(√2).","needQuote":false,"needEscape":true,"nodes":[{"content":"Stores a value that represents the following equivalent values: (√2)/2, √(½), and 1/(√2).","pos":[0,89]}]},{"pos":[23022,23034],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23374,23408],"content":"Stores a value that represents √2.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stores a value that represents √2.","pos":[0,34]}]},{"pos":[23534,23546],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23931,23977],"content":"Calculates the tangent of the specified angle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the tangent of the specified angle.","pos":[0,46]}]},{"pos":[24111,24141],"content":"An angle, measured in radians.","needQuote":true,"needEscape":true,"nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]},{"pos":[24199,24229],"content":"The tangent of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The tangent of <code>x</code>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.JScript.MathObject\n  id: MathObject\n  children:\n  - Microsoft.JScript.MathObject.abs(System.Double)\n  - Microsoft.JScript.MathObject.acos(System.Double)\n  - Microsoft.JScript.MathObject.asin(System.Double)\n  - Microsoft.JScript.MathObject.atan(System.Double)\n  - Microsoft.JScript.MathObject.atan2(System.Double,System.Double)\n  - Microsoft.JScript.MathObject.ceil(System.Double)\n  - Microsoft.JScript.MathObject.cos(System.Double)\n  - Microsoft.JScript.MathObject.E\n  - Microsoft.JScript.MathObject.exp(System.Double)\n  - Microsoft.JScript.MathObject.floor(System.Double)\n  - Microsoft.JScript.MathObject.LN10\n  - Microsoft.JScript.MathObject.LN2\n  - Microsoft.JScript.MathObject.log(System.Double)\n  - Microsoft.JScript.MathObject.LOG10E\n  - Microsoft.JScript.MathObject.LOG2E\n  - Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])\n  - Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])\n  - Microsoft.JScript.MathObject.PI\n  - Microsoft.JScript.MathObject.pow(System.Double,System.Double)\n  - Microsoft.JScript.MathObject.random\n  - Microsoft.JScript.MathObject.round(System.Double)\n  - Microsoft.JScript.MathObject.sin(System.Double)\n  - Microsoft.JScript.MathObject.sqrt(System.Double)\n  - Microsoft.JScript.MathObject.SQRT1_2\n  - Microsoft.JScript.MathObject.SQRT2\n  - Microsoft.JScript.MathObject.tan(System.Double)\n  langs:\n  - csharp\n  name: MathObject\n  nameWithType: MathObject\n  fullName: Microsoft.JScript.MathObject\n  type: Class\n  summary: Provides constants and static methods for trigonometric functions, logarithmic functions, and other common mathematical functions. This class belongs to the built-in object model category.\n  syntax:\n    content: 'public class MathObject : Microsoft.JScript.JSObject'\n  inheritance:\n  - System.Object\n  - Microsoft.JScript.ScriptObject\n  - Microsoft.JScript.JSObject\n  implements: []\n  inheritedMembers:\n  - Microsoft.JScript.JSObject.AddField(System.String)\n  - Microsoft.JScript.JSObject.field_table\n  - Microsoft.JScript.JSObject.GetMember(System.String,System.Reflection.BindingFlags)\n  - Microsoft.JScript.JSObject.GetMembers(System.Reflection.BindingFlags)\n  - Microsoft.JScript.JSObject.SetMemberValue2(System.String,System.Object)\n  - Microsoft.JScript.JSObject.System#Collections#IEnumerable#GetEnumerator\n  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)\n  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)\n  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)\n  - Microsoft.JScript.JSObject.ToString\n  - Microsoft.JScript.ScriptObject.engine\n  - Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)\n  - Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)\n  - Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)\n  - Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])\n  - Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)\n  - Microsoft.JScript.ScriptObject.GetParent\n  - Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)\n  - Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)\n  - Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  - Microsoft.JScript.ScriptObject.Item(System.Double)\n  - Microsoft.JScript.ScriptObject.Item(System.Int32)\n  - Microsoft.JScript.ScriptObject.Item(System.Object[])\n  - Microsoft.JScript.ScriptObject.Item(System.String)\n  - Microsoft.JScript.ScriptObject.parent\n  - Microsoft.JScript.ScriptObject.UnderlyingSystemType\n  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)\n  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)\n  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.abs(System.Double)\n  id: abs(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: abs(Double)\n  nameWithType: MathObject.abs(Double)\n  fullName: Microsoft.JScript.MathObject.abs(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the absolute value of the specified number.\n  syntax:\n    content: public static double abs (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: The number to calculate the absolute value of.\n    return:\n      type: System.Double\n      description: The absolute value of <code>d</code>.\n  overload: Microsoft.JScript.MathObject.abs*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.acos(System.Double)\n  id: acos(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: acos(Double)\n  nameWithType: MathObject.acos(Double)\n  fullName: Microsoft.JScript.MathObject.acos(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the inverse cosine of the specified number.\n  syntax:\n    content: public static double acos (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The number to calculate the inverse cosine of.\n    return:\n      type: System.Double\n      description: The inverse cosine of <code>x</code>, measured in radians.\n  overload: Microsoft.JScript.MathObject.acos*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.asin(System.Double)\n  id: asin(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: asin(Double)\n  nameWithType: MathObject.asin(Double)\n  fullName: Microsoft.JScript.MathObject.asin(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the inverse sine of the specified number.\n  syntax:\n    content: public static double asin (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The number to calculate the inverse sine of.\n    return:\n      type: System.Double\n      description: The inverse sine of <code>x</code>, measured in radians.\n  overload: Microsoft.JScript.MathObject.asin*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.atan(System.Double)\n  id: atan(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: atan(Double)\n  nameWithType: MathObject.atan(Double)\n  fullName: Microsoft.JScript.MathObject.atan(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the inverse tangent of the specified number.\n  syntax:\n    content: public static double atan (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The number to calculate the inverse tangent of.\n    return:\n      type: System.Double\n      description: The inverse tangent of <code>x</code>, measured in radians.\n  overload: Microsoft.JScript.MathObject.atan*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.atan2(System.Double,System.Double)\n  id: atan2(System.Double,System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: atan2(Double,Double)\n  nameWithType: MathObject.atan2(Double,Double)\n  fullName: Microsoft.JScript.MathObject.atan2(Double,Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the inverse tangent of the quotient of the specified numbers.\n  syntax:\n    content: public static double atan2 (double dy, double dx);\n    parameters:\n    - id: dy\n      type: System.Double\n      description: The numerator of the quotient to calculate the inverse tangent of.\n    - id: dx\n      type: System.Double\n      description: The denominator of the quotient to calculate the inverse tangent of.\n    return:\n      type: System.Double\n      description: The inverse tangent of <code>dy</code>/<code>dx</code>, measured in radians.\n  overload: Microsoft.JScript.MathObject.atan2*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.ceil(System.Double)\n  id: ceil(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: ceil(Double)\n  nameWithType: MathObject.ceil(Double)\n  fullName: Microsoft.JScript.MathObject.ceil(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the ceiling of the specified number, which is the smallest integer that is greater than or equal to the specified number.\n  syntax:\n    content: public static double ceil (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The number to calculate the ceiling of.\n    return:\n      type: System.Double\n      description: The ceiling of <code>x</code>.\n  overload: Microsoft.JScript.MathObject.ceil*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.cos(System.Double)\n  id: cos(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: cos(Double)\n  nameWithType: MathObject.cos(Double)\n  fullName: Microsoft.JScript.MathObject.cos(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the cosine of the specified angle.\n  syntax:\n    content: public static double cos (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The cosine of <code>x</code>.\n  overload: Microsoft.JScript.MathObject.cos*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.E\n  id: E\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: E\n  nameWithType: MathObject.E\n  fullName: Microsoft.JScript.MathObject.E\n  type: Field\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Stores a value that represents Euler's constant, which is the base of the natural logarithm, specified by the constant e.\n  syntax:\n    content: public const double E = 2.71828182845905;\n    return:\n      type: System.Double\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.exp(System.Double)\n  id: exp(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: exp(Double)\n  nameWithType: MathObject.exp(Double)\n  fullName: Microsoft.JScript.MathObject.exp(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the number e to the raised specified power, where e is Euler's constant, the base of the natural logarithm.\n  syntax:\n    content: public static double exp (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The power to raise `e` to.\n    return:\n      type: System.Double\n      description: The number e raised to the <code>x</code> power.\n  overload: Microsoft.JScript.MathObject.exp*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.floor(System.Double)\n  id: floor(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: floor(Double)\n  nameWithType: MathObject.floor(Double)\n  fullName: Microsoft.JScript.MathObject.floor(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the floor of the specified number, which is the largest integer that is less than or equal to the specified number.\n  syntax:\n    content: public static double floor (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The number to calculate the floor of.\n    return:\n      type: System.Double\n      description: The floor of <code>x</code>.\n  overload: Microsoft.JScript.MathObject.floor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.LN10\n  id: LN10\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: LN10\n  nameWithType: MathObject.LN10\n  fullName: Microsoft.JScript.MathObject.LN10\n  type: Field\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Stores a value that represents the logarithm base e of 10, the natural logarithm of 10.\n  syntax:\n    content: public const double LN10 = 2.30258509299405;\n    return:\n      type: System.Double\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.LN2\n  id: LN2\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: LN2\n  nameWithType: MathObject.LN2\n  fullName: Microsoft.JScript.MathObject.LN2\n  type: Field\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Stores a value that represents the logarithm base e of 2, the natural logarithm of 2.\n  syntax:\n    content: public const double LN2 = 0.693147180559945;\n    return:\n      type: System.Double\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.log(System.Double)\n  id: log(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: log(Double)\n  nameWithType: MathObject.log(Double)\n  fullName: Microsoft.JScript.MathObject.log(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the logarithm base e of the specified number, which is the natural logarithm of the specified number.\n  syntax:\n    content: public static double log (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The number to calculate the natural logarithm of.\n    return:\n      type: System.Double\n      description: The natural logarithm of <code>x</code>.\n  overload: Microsoft.JScript.MathObject.log*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.LOG10E\n  id: LOG10E\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: LOG10E\n  nameWithType: MathObject.LOG10E\n  fullName: Microsoft.JScript.MathObject.LOG10E\n  type: Field\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Stores a value that represents the logarithm base 10 of e, the common logarithm of e.\n  syntax:\n    content: public const double LOG10E = 0.434294481903252;\n    return:\n      type: System.Double\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.LOG2E\n  id: LOG2E\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: LOG2E\n  nameWithType: MathObject.LOG2E\n  fullName: Microsoft.JScript.MathObject.LOG2E\n  type: Field\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Stores a value that represents the logarithm base 2 of e, the binary logarithm of e.\n  syntax:\n    content: public const double LOG2E = 1.44269504088896;\n    return:\n      type: System.Double\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])\n  id: max(System.Object,System.Object,System.Object[])\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: max(Object,Object,Object[])\n  nameWithType: MathObject.max(Object,Object,Object[])\n  fullName: Microsoft.JScript.MathObject.max(Object,Object,Object[])\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Returns the largest of two or more specified numbers.\n  syntax:\n    content: public static double max (object x, object y, object[] args);\n    parameters:\n    - id: x\n      type: System.Object\n      description: The first number to compare.\n    - id: y\n      type: System.Object\n      description: The second number to compare.\n    - id: args\n      type: System.Object[]\n      description: Additional numbers to compare.\n    return:\n      type: System.Double\n      description: The largest of <code>x</code>, <code>y</code>, and the numbers that are contained in <code>args</code>.\n  overload: Microsoft.JScript.MathObject.max*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])\n  id: min(System.Object,System.Object,System.Object[])\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: min(Object,Object,Object[])\n  nameWithType: MathObject.min(Object,Object,Object[])\n  fullName: Microsoft.JScript.MathObject.min(Object,Object,Object[])\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Returns the smallest of two or more specified numbers.\n  syntax:\n    content: public static double min (object x, object y, object[] args);\n    parameters:\n    - id: x\n      type: System.Object\n      description: The first number to compare.\n    - id: y\n      type: System.Object\n      description: The second number to compare.\n    - id: args\n      type: System.Object[]\n      description: Additional numbers to compare.\n    return:\n      type: System.Double\n      description: The smallest of <code>x</code>, <code>y</code>, and the numbers that are contained in <code>args</code>.\n  overload: Microsoft.JScript.MathObject.min*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.PI\n  id: PI\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: PI\n  nameWithType: MathObject.PI\n  fullName: Microsoft.JScript.MathObject.PI\n  type: Field\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Stores a value that represents the ratio of the circumference of a circle to its diameter, specified by the constant π.\n  syntax:\n    content: public const double PI = 3.14159265358979;\n    return:\n      type: System.Double\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.pow(System.Double,System.Double)\n  id: pow(System.Double,System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: pow(Double,Double)\n  nameWithType: MathObject.pow(Double,Double)\n  fullName: Microsoft.JScript.MathObject.pow(Double,Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the specified number raised to the specified power.\n  syntax:\n    content: public static double pow (double dx, double dy);\n    parameters:\n    - id: dx\n      type: System.Double\n      description: The number to raise to the `dy` power.\n    - id: dy\n      type: System.Double\n      description: The power to raise `dx` to.\n    return:\n      type: System.Double\n      description: The number <code>dx</code> raised to the <code>dy</code> power.\n  overload: Microsoft.JScript.MathObject.pow*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.random\n  id: random\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: random()\n  nameWithType: MathObject.random()\n  fullName: Microsoft.JScript.MathObject.random()\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Generates a random number between 0 and 1. This method does not generate a cryptographically secure random number.\n  syntax:\n    content: public static double random ();\n    parameters: []\n    return:\n      type: System.Double\n      description: A number that is greater than or equal to 0, and less than 1.\n  overload: Microsoft.JScript.MathObject.random*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.round(System.Double)\n  id: round(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: round(Double)\n  nameWithType: MathObject.round(Double)\n  fullName: Microsoft.JScript.MathObject.round(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Rounds the specified number down or up to the nearest integer.\n  syntax:\n    content: public static double round (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: The number to round.\n    return:\n      type: System.Double\n      description: If the fractional part of <code>d</code> is less than halfway to the next integer, <code>d</code> rounded down. If the fractional part of <code>d</code> is halfway or more to the next integer, <code>d</code> rounded up.\n  overload: Microsoft.JScript.MathObject.round*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.sin(System.Double)\n  id: sin(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: sin(Double)\n  nameWithType: MathObject.sin(Double)\n  fullName: Microsoft.JScript.MathObject.sin(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the sine of the specified angle.\n  syntax:\n    content: public static double sin (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The sine of <code>x</code>.\n  overload: Microsoft.JScript.MathObject.sin*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.sqrt(System.Double)\n  id: sqrt(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: sqrt(Double)\n  nameWithType: MathObject.sqrt(Double)\n  fullName: Microsoft.JScript.MathObject.sqrt(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the square root of the specified number.\n  syntax:\n    content: public static double sqrt (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The number to calculate the square root of.\n    return:\n      type: System.Double\n      description: The square root of <code>x</code>.\n  overload: Microsoft.JScript.MathObject.sqrt*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.SQRT1_2\n  id: SQRT1_2\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: SQRT1_2\n  nameWithType: MathObject.SQRT1_2\n  fullName: Microsoft.JScript.MathObject.SQRT1_2\n  type: Field\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: 'Stores a value that represents the following equivalent values: (√2)/2, √(½), and 1/(√2).'\n  syntax:\n    content: public const double SQRT1_2 = 0.707106781186548;\n    return:\n      type: System.Double\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.SQRT2\n  id: SQRT2\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: SQRT2\n  nameWithType: MathObject.SQRT2\n  fullName: Microsoft.JScript.MathObject.SQRT2\n  type: Field\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Stores a value that represents √2.\n  syntax:\n    content: public const double SQRT2 = 1.4142135623731;\n    return:\n      type: System.Double\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.JScript.MathObject.tan(System.Double)\n  id: tan(System.Double)\n  parent: Microsoft.JScript.MathObject\n  langs:\n  - csharp\n  name: tan(Double)\n  nameWithType: MathObject.tan(Double)\n  fullName: Microsoft.JScript.MathObject.tan(Double)\n  type: Method\n  assemblies:\n  - Microsoft.JScript\n  namespace: Microsoft.JScript\n  summary: Calculates the tangent of the specified angle.\n  syntax:\n    content: public static double tan (double x);\n    parameters:\n    - id: x\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The tangent of <code>x</code>.\n  overload: Microsoft.JScript.MathObject.tan*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.JScript.JSObject\n  isExternal: false\n  name: Microsoft.JScript.JSObject\n- uid: Microsoft.JScript.MathObject.abs(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: abs(Double)\n  nameWithType: MathObject.abs(Double)\n  fullName: Microsoft.JScript.MathObject.abs(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: Microsoft.JScript.MathObject.acos(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: acos(Double)\n  nameWithType: MathObject.acos(Double)\n  fullName: Microsoft.JScript.MathObject.acos(Double)\n- uid: Microsoft.JScript.MathObject.asin(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: asin(Double)\n  nameWithType: MathObject.asin(Double)\n  fullName: Microsoft.JScript.MathObject.asin(Double)\n- uid: Microsoft.JScript.MathObject.atan(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: atan(Double)\n  nameWithType: MathObject.atan(Double)\n  fullName: Microsoft.JScript.MathObject.atan(Double)\n- uid: Microsoft.JScript.MathObject.atan2(System.Double,System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: atan2(Double,Double)\n  nameWithType: MathObject.atan2(Double,Double)\n  fullName: Microsoft.JScript.MathObject.atan2(Double,Double)\n- uid: Microsoft.JScript.MathObject.ceil(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: ceil(Double)\n  nameWithType: MathObject.ceil(Double)\n  fullName: Microsoft.JScript.MathObject.ceil(Double)\n- uid: Microsoft.JScript.MathObject.cos(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: cos(Double)\n  nameWithType: MathObject.cos(Double)\n  fullName: Microsoft.JScript.MathObject.cos(Double)\n- uid: Microsoft.JScript.MathObject.E\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: E\n  nameWithType: MathObject.E\n  fullName: Microsoft.JScript.MathObject.E\n- uid: Microsoft.JScript.MathObject.exp(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: exp(Double)\n  nameWithType: MathObject.exp(Double)\n  fullName: Microsoft.JScript.MathObject.exp(Double)\n- uid: Microsoft.JScript.MathObject.floor(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: floor(Double)\n  nameWithType: MathObject.floor(Double)\n  fullName: Microsoft.JScript.MathObject.floor(Double)\n- uid: Microsoft.JScript.MathObject.LN10\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: LN10\n  nameWithType: MathObject.LN10\n  fullName: Microsoft.JScript.MathObject.LN10\n- uid: Microsoft.JScript.MathObject.LN2\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: LN2\n  nameWithType: MathObject.LN2\n  fullName: Microsoft.JScript.MathObject.LN2\n- uid: Microsoft.JScript.MathObject.log(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: log(Double)\n  nameWithType: MathObject.log(Double)\n  fullName: Microsoft.JScript.MathObject.log(Double)\n- uid: Microsoft.JScript.MathObject.LOG10E\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: LOG10E\n  nameWithType: MathObject.LOG10E\n  fullName: Microsoft.JScript.MathObject.LOG10E\n- uid: Microsoft.JScript.MathObject.LOG2E\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: LOG2E\n  nameWithType: MathObject.LOG2E\n  fullName: Microsoft.JScript.MathObject.LOG2E\n- uid: Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: max(Object,Object,Object[])\n  nameWithType: MathObject.max(Object,Object,Object[])\n  fullName: Microsoft.JScript.MathObject.max(Object,Object,Object[])\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: min(Object,Object,Object[])\n  nameWithType: MathObject.min(Object,Object,Object[])\n  fullName: Microsoft.JScript.MathObject.min(Object,Object,Object[])\n- uid: Microsoft.JScript.MathObject.PI\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: PI\n  nameWithType: MathObject.PI\n  fullName: Microsoft.JScript.MathObject.PI\n- uid: Microsoft.JScript.MathObject.pow(System.Double,System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: pow(Double,Double)\n  nameWithType: MathObject.pow(Double,Double)\n  fullName: Microsoft.JScript.MathObject.pow(Double,Double)\n- uid: Microsoft.JScript.MathObject.random\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: random()\n  nameWithType: MathObject.random()\n  fullName: Microsoft.JScript.MathObject.random()\n- uid: Microsoft.JScript.MathObject.round(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: round(Double)\n  nameWithType: MathObject.round(Double)\n  fullName: Microsoft.JScript.MathObject.round(Double)\n- uid: Microsoft.JScript.MathObject.sin(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: sin(Double)\n  nameWithType: MathObject.sin(Double)\n  fullName: Microsoft.JScript.MathObject.sin(Double)\n- uid: Microsoft.JScript.MathObject.sqrt(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: sqrt(Double)\n  nameWithType: MathObject.sqrt(Double)\n  fullName: Microsoft.JScript.MathObject.sqrt(Double)\n- uid: Microsoft.JScript.MathObject.SQRT1_2\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: SQRT1_2\n  nameWithType: MathObject.SQRT1_2\n  fullName: Microsoft.JScript.MathObject.SQRT1_2\n- uid: Microsoft.JScript.MathObject.SQRT2\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: SQRT2\n  nameWithType: MathObject.SQRT2\n  fullName: Microsoft.JScript.MathObject.SQRT2\n- uid: Microsoft.JScript.MathObject.tan(System.Double)\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: tan(Double)\n  nameWithType: MathObject.tan(Double)\n  fullName: Microsoft.JScript.MathObject.tan(Double)\n- uid: Microsoft.JScript.MathObject.abs*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: abs\n  nameWithType: MathObject.abs\n- uid: Microsoft.JScript.MathObject.acos*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: acos\n  nameWithType: MathObject.acos\n- uid: Microsoft.JScript.MathObject.asin*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: asin\n  nameWithType: MathObject.asin\n- uid: Microsoft.JScript.MathObject.atan*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: atan\n  nameWithType: MathObject.atan\n- uid: Microsoft.JScript.MathObject.atan2*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: atan2\n  nameWithType: MathObject.atan2\n- uid: Microsoft.JScript.MathObject.ceil*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: ceil\n  nameWithType: MathObject.ceil\n- uid: Microsoft.JScript.MathObject.cos*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: cos\n  nameWithType: MathObject.cos\n- uid: Microsoft.JScript.MathObject.exp*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: exp\n  nameWithType: MathObject.exp\n- uid: Microsoft.JScript.MathObject.floor*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: floor\n  nameWithType: MathObject.floor\n- uid: Microsoft.JScript.MathObject.log*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: log\n  nameWithType: MathObject.log\n- uid: Microsoft.JScript.MathObject.max*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: max\n  nameWithType: MathObject.max\n- uid: Microsoft.JScript.MathObject.min*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: min\n  nameWithType: MathObject.min\n- uid: Microsoft.JScript.MathObject.pow*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: pow\n  nameWithType: MathObject.pow\n- uid: Microsoft.JScript.MathObject.random*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: random\n  nameWithType: MathObject.random\n- uid: Microsoft.JScript.MathObject.round*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: round\n  nameWithType: MathObject.round\n- uid: Microsoft.JScript.MathObject.sin*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: sin\n  nameWithType: MathObject.sin\n- uid: Microsoft.JScript.MathObject.sqrt*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: sqrt\n  nameWithType: MathObject.sqrt\n- uid: Microsoft.JScript.MathObject.tan*\n  parent: Microsoft.JScript.MathObject\n  isExternal: false\n  name: tan\n  nameWithType: MathObject.tan\n"}