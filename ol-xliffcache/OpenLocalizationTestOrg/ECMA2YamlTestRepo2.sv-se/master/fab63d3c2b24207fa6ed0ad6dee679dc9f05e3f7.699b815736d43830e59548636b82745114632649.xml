{"nodes":[{"pos":[2080,2092],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2151,2163],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2836,2848],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2907,2919],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3567,3579],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4165,4177],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4768,4780],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5893,5905],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6000,6012],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6071,6083],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7213,7225],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7320,7332],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7391,7403],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8044,8056],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8945,8957],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9015,9027],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Specialized.BitVector32.Section\n  id: BitVector32.Section\n  children:\n  - System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n  - System.Collections.Specialized.BitVector32.Section.GetHashCode\n  - System.Collections.Specialized.BitVector32.Section.Mask\n  - System.Collections.Specialized.BitVector32.Section.Offset\n  - System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Section.ToString\n  - System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)\n  langs:\n  - csharp\n  name: BitVector32+Section\n  nameWithType: BitVector32+Section\n  fullName: System.Collections.Specialized.BitVector32+Section\n  type: Struct\n  syntax:\n    content: public struct BitVector32.Section\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)\n  id: Equals(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: Equals(BitVector32+Section)\n  nameWithType: BitVector32+Section.Equals(BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32+Section.Equals(BitVector32+Section)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public bool Equals (System.Collections.Specialized.BitVector32.Section obj);\n    parameters:\n    - id: obj\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: BitVector32+Section.Equals(Object)\n  fullName: System.Collections.Specialized.BitVector32+Section.Equals(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.GetHashCode\n  id: GetHashCode\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: BitVector32+Section.GetHashCode()\n  fullName: System.Collections.Specialized.BitVector32+Section.GetHashCode()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.Mask\n  id: Mask\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: Mask\n  nameWithType: BitVector32+Section.Mask\n  fullName: System.Collections.Specialized.BitVector32+Section.Mask\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public short Mask { get; }\n    return:\n      type: System.Int16\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.Mask*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.Offset\n  id: Offset\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: Offset\n  nameWithType: BitVector32+Section.Offset\n  fullName: System.Collections.Specialized.BitVector32+Section.Offset\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public short Offset { get; }\n    return:\n      type: System.Int16\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.Offset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  id: op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: op_Equality(BitVector32+Section,BitVector32+Section)\n  nameWithType: BitVector32+Section.op_Equality(BitVector32+Section,BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32+Section.op_Equality(BitVector32+Section,BitVector32+Section)\n  type: Operator\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public static bool op_Equality (System.Collections.Specialized.BitVector32.Section a, System.Collections.Specialized.BitVector32.Section b);\n    parameters:\n    - id: a\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n    - id: b\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  id: op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: op_Inequality(BitVector32+Section,BitVector32+Section)\n  nameWithType: BitVector32+Section.op_Inequality(BitVector32+Section,BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32+Section.op_Inequality(BitVector32+Section,BitVector32+Section)\n  type: Operator\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public static bool op_Inequality (System.Collections.Specialized.BitVector32.Section a, System.Collections.Specialized.BitVector32.Section b);\n    parameters:\n    - id: a\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n    - id: b\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.ToString\n  id: ToString\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: BitVector32+Section.ToString()\n  fullName: System.Collections.Specialized.BitVector32+Section.ToString()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)\n  id: ToString(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  name: ToString(BitVector32+Section)\n  nameWithType: BitVector32+Section.ToString(BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32+Section.ToString(BitVector32+Section)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  syntax:\n    content: public static string ToString (System.Collections.Specialized.BitVector32.Section value);\n    parameters:\n    - id: value\n      type: System.Collections.Specialized.BitVector32.Section\n      description: To be added.\n    return:\n      type: System.String\n      description: To be added.\n  overload: System.Collections.Specialized.BitVector32.Section.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: Equals(BitVector32+Section)\n  nameWithType: BitVector32+Section.Equals(BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32+Section.Equals(BitVector32+Section)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Specialized.BitVector32.Section\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: BitVector32+Section\n  nameWithType: BitVector32+Section\n  fullName: System.Collections.Specialized.BitVector32+Section\n- uid: System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: BitVector32+Section.Equals(Object)\n  fullName: System.Collections.Specialized.BitVector32+Section.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Specialized.BitVector32.Section.GetHashCode\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: BitVector32+Section.GetHashCode()\n  fullName: System.Collections.Specialized.BitVector32+Section.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Specialized.BitVector32.Section.Mask\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: Mask\n  nameWithType: BitVector32+Section.Mask\n  fullName: System.Collections.Specialized.BitVector32+Section.Mask\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Collections.Specialized.BitVector32.Section.Offset\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: Offset\n  nameWithType: BitVector32+Section.Offset\n  fullName: System.Collections.Specialized.BitVector32+Section.Offset\n- uid: System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: op_Equality(BitVector32+Section,BitVector32+Section)\n  nameWithType: BitVector32+Section.op_Equality(BitVector32+Section,BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32+Section.op_Equality(BitVector32+Section,BitVector32+Section)\n- uid: System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: op_Inequality(BitVector32+Section,BitVector32+Section)\n  nameWithType: BitVector32+Section.op_Inequality(BitVector32+Section,BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32+Section.op_Inequality(BitVector32+Section,BitVector32+Section)\n- uid: System.Collections.Specialized.BitVector32.Section.ToString\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: ToString()\n  nameWithType: BitVector32+Section.ToString()\n  fullName: System.Collections.Specialized.BitVector32+Section.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: ToString(BitVector32+Section)\n  nameWithType: BitVector32+Section.ToString(BitVector32+Section)\n  fullName: System.Collections.Specialized.BitVector32+Section.ToString(BitVector32+Section)\n- uid: System.Collections.Specialized.BitVector32.Section.Equals*\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: Equals\n  nameWithType: BitVector32+Section.Equals\n- uid: System.Collections.Specialized.BitVector32.Section.GetHashCode*\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: GetHashCode\n  nameWithType: BitVector32+Section.GetHashCode\n- uid: System.Collections.Specialized.BitVector32.Section.Mask*\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: Mask\n  nameWithType: BitVector32+Section.Mask\n- uid: System.Collections.Specialized.BitVector32.Section.Offset*\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: Offset\n  nameWithType: BitVector32+Section.Offset\n- uid: System.Collections.Specialized.BitVector32.Section.op_Equality*\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: op_Equality\n  nameWithType: BitVector32+Section.op_Equality\n- uid: System.Collections.Specialized.BitVector32.Section.op_Inequality*\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: op_Inequality\n  nameWithType: BitVector32+Section.op_Inequality\n- uid: System.Collections.Specialized.BitVector32.Section.ToString*\n  parent: System.Collections.Specialized.BitVector32.Section\n  isExternal: false\n  name: ToString\n  nameWithType: BitVector32+Section.ToString\n"}