{"nodes":[{"pos":[1015,1122],"content":"Displays a text box control and a browse button that enable users to select a file to upload to the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"Displays a text box control and a browse button that enable users to select a file to upload to the server.","pos":[0,107]}]},{"pos":[24435,24533],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> class."},{"pos":[24545,24988],"content":"Use the FileUpload constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FileUpload> class. The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically save a file to the server after the user selects the file to upload. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user clicks to upload the file.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the FileUpload constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FileUpload> class. The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically save a file to the server after the user selects the file to upload. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user clicks to upload the file.","pos":[0,443],"nodes":[{"content":"Use the FileUpload constructor to initialize a new instance of the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; class.","pos":[0,117],"source":"Use the FileUpload constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FileUpload> class."},{"content":"The &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control does not automatically save a file to the server after the user selects the file to upload.","pos":[118,265],"source":" The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically save a file to the server after the user selects the file to upload."},{"content":"You must explicitly provide a control or mechanism to allow the user to submit the specified file.","pos":[266,364]},{"content":"For example, you can provide a button that the user clicks to upload the file.","pos":[365,443]}]}]},{"pos":[26152,26343],"content":"Adds the HTML attributes and styles of a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control to render to the specified <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.HtmlTextWriter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Adds the HTML attributes and styles of a <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control to render to the specified <xref href=\"System.Web.UI.HtmlTextWriter\"></xref> object."},{"pos":[26355,26765],"content":"The AddAttributesToRender method is primarily used by control developers to insert the appropriate attributes and styles to the <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> output stream for a <xref:System.Web.UI.WebControls.FileUpload> control. The AddAttributesToRender method overrides the <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=fullName> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The AddAttributesToRender method is primarily used by control developers to insert the appropriate attributes and styles to the <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> output stream for a <xref:System.Web.UI.WebControls.FileUpload> control. The AddAttributesToRender method overrides the <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=fullName> method.","pos":[0,410],"nodes":[{"content":"The AddAttributesToRender method is primarily used by control developers to insert the appropriate attributes and styles to the &lt;xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName&gt; output stream for a &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control.","pos":[0,261],"source":"The AddAttributesToRender method is primarily used by control developers to insert the appropriate attributes and styles to the <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> output stream for a <xref:System.Web.UI.WebControls.FileUpload> control."},{"content":"The AddAttributesToRender method overrides the &lt;xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=fullName&gt; method.","pos":[262,410],"source":" The AddAttributesToRender method overrides the <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=fullName> method."}]}]},{"pos":[26967,27091],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.HtmlTextWriter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the output stream to render HTML content on the client.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.UI.HtmlTextWriter\"></xref> that represents the output stream to render HTML content on the client."},{"pos":[27571,27657],"content":"Gets or sets a value that specifies whether multiple files can be selected for upload.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that specifies whether multiple files can be selected for upload.","pos":[0,86]}]},{"pos":[27787,27957],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if multiple files can be selected; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple files can be selected; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[28409,28541],"content":"Gets an array of the bytes in a file that is specified by using a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets an array of the bytes in a file that is specified by using a <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control."},{"pos":[28554,29574],"content":"The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically read the file from the client. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user can click to upload the file. The code that you write to save the specified file could call the FileBytes property, which returns the contents of the file.       Before calling the FileBytes property, you should use the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> property to verify that the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload. If the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> returns `true`, call the FileBytes property. If it returns `false`, display a message to the user indicating that the control does not contain a file. If you do not provide error-handling code to verify that a file exists, an attempt to save a nonexistent file throws an <xref:System.Web.HttpException> exception.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control does not automatically read the file from the client.","pos":[0,109],"source":"The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically read the file from the client."},{"content":"You must explicitly provide a control or mechanism to allow the user to submit the specified file.","pos":[110,208]},{"content":"For example, you can provide a button that the user can click to upload the file.","pos":[209,290]},{"content":"The code that you write to save the specified file could call the FileBytes property, which returns the contents of the file.","pos":[291,416]},{"content":"Before calling the FileBytes property, you should use the &lt;xref:System.Web.UI.WebControls.FileUpload.HasFile%2A&gt; property to verify that the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control contains a file to upload.","pos":[423,642],"source":"       Before calling the FileBytes property, you should use the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> property to verify that the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload."},{"content":"If the &lt;xref:System.Web.UI.WebControls.FileUpload.HasFile%2A&gt; returns <ph id=\"ph1\">`true`</ph>, call the FileBytes property.","pos":[643,749],"source":" If the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> returns `true`, call the FileBytes property."},{"content":"If it returns <ph id=\"ph1\">`false`</ph>, display a message to the user indicating that the control does not contain a file.","pos":[750,855],"source":" If it returns `false`, display a message to the user indicating that the control does not contain a file."},{"content":"If you do not provide error-handling code to verify that a file exists, an attempt to save a nonexistent file throws an &lt;xref:System.Web.HttpException&gt; exception.","pos":[856,1018],"source":" If you do not provide error-handling code to verify that a file exists, an attempt to save a nonexistent file throws an <xref:System.Web.HttpException> exception."}]},{"pos":[30209,30285],"content":"A <xref:System.Byte> array that contains the contents of the specified file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains the contents of the specified file.","pos":[0,76],"source":"A <xref:System.Byte> array that contains the contents of the specified file."}]},{"pos":[30454,30483],"content":"The entire file was not read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The entire file was not read.","pos":[0,29]}]},{"pos":[30864,31010],"content":"Gets a &lt;xref:System.IO.Stream&gt; object that points to a file to upload using the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets a <xref:System.IO.Stream> object that points to a file to upload using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control."},{"pos":[31022,31415],"content":"The FileContent property gets a <xref:System.IO.Stream> object that points to a file to upload by using the <xref:System.Web.UI.WebControls.FileUpload> control. Use the FileContent property to access the contents of the file. For example, you can use the <xref:System.IO.Stream> object that is returned by this property to read the contents of the file as bytes and store them in a byte array.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The FileContent property gets a <xref:System.IO.Stream> object that points to a file to upload by using the <xref:System.Web.UI.WebControls.FileUpload> control. Use the FileContent property to access the contents of the file. For example, you can use the <xref:System.IO.Stream> object that is returned by this property to read the contents of the file as bytes and store them in a byte array.","pos":[0,393],"nodes":[{"content":"The FileContent property gets a &lt;xref:System.IO.Stream&gt; object that points to a file to upload by using the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control.","pos":[0,160],"source":"The FileContent property gets a <xref:System.IO.Stream> object that points to a file to upload by using the <xref:System.Web.UI.WebControls.FileUpload> control."},{"content":"Use the FileContent property to access the contents of the file.","pos":[161,225]},{"content":"For example, you can use the &lt;xref:System.IO.Stream&gt; object that is returned by this property to read the contents of the file as bytes and store them in a byte array.","pos":[226,393],"source":" For example, you can use the <xref:System.IO.Stream> object that is returned by this property to read the contents of the file as bytes and store them in a byte array."}]}]},{"pos":[32087,32213],"content":"A &lt;xref:System.IO.Stream&gt; that points to a file to upload using the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.IO.Stream> that points to a file to upload using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref>."},{"pos":[32658,32780],"content":"Gets the name of a file on a client to upload using the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets the name of a file on a client to upload using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control."},{"pos":[32792,33002],"content":"Gets the name of a file on a client to upload using the <xref:System.Web.UI.WebControls.FileUpload> control. The file name that the FileName property returns does not include the path of the file on the client.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Gets the name of a file on a client to upload using the <xref:System.Web.UI.WebControls.FileUpload> control. The file name that the FileName property returns does not include the path of the file on the client.","pos":[0,210],"nodes":[{"content":"Gets the name of a file on a client to upload using the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control.","pos":[0,108],"source":"Gets the name of a file on a client to upload using the <xref:System.Web.UI.WebControls.FileUpload> control."},{"content":"The file name that the FileName property returns does not include the path of the file on the client.","pos":[109,210]}]}]},{"pos":[33997,34130],"content":"A string that specifies the name of a file on a client to upload using the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that specifies the name of a file on a client to upload using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref>."},{"pos":[34567,34685],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control contains a file.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control contains a file."},{"pos":[34697,35311],"content":"The HasFile property gets a value indicating whether the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload. Use this property to verify that a file to upload exists before performing operations on the file. For example, before calling the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method to save the file to disk, use the HasFile property to verify that the file exists. If HasFile returns `true`, call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method. If it returns `false`, display a message to the user indicating that the control does not contain a file.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The HasFile property gets a value indicating whether the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control contains a file to upload.","pos":[0,135],"source":"The HasFile property gets a value indicating whether the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload."},{"content":"Use this property to verify that a file to upload exists before performing operations on the file.","pos":[136,234]},{"content":"For example, before calling the &lt;xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A&gt; method to save the file to disk, use the HasFile property to verify that the file exists.","pos":[235,410],"source":" For example, before calling the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method to save the file to disk, use the HasFile property to verify that the file exists."},{"content":"If HasFile returns <ph id=\"ph1\">`true`</ph>, call the &lt;xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A&gt; method.","pos":[411,508],"source":" If HasFile returns `true`, call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method."},{"content":"If it returns <ph id=\"ph1\">`false`</ph>, display a message to the user indicating that the control does not contain a file.","pos":[509,614],"source":" If it returns `false`, display a message to the user indicating that the control does not contain a file."}]},{"pos":[36267,36484],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains a file; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> contains a file; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[36925,36990],"content":"Gets a value that indicates whether any files have been uploaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether any files have been uploaded.","pos":[0,65]}]},{"pos":[37002,37077],"content":"This method also returns <ph id=\"ph1\">`false`</ph> if an empty file (zero bytes) is uploaded.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method also returns `false` if an empty file (zero bytes) is uploaded."},{"pos":[37189,37357],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if any files have been uploaded; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if any files have been uploaded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[37881,38025],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control.PreRender\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event for the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Web.UI.Control.PreRender\"></xref> event for the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control."},{"pos":[38037,38217],"content":"The OnPreRender method notifies the <xref:System.Web.UI.WebControls.FileUpload> control to perform any necessary pre-rendering steps before saving view state and rendering content.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The OnPreRender method notifies the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control to perform any necessary pre-rendering steps before saving view state and rendering content.","pos":[0,180],"source":"The OnPreRender method notifies the <xref:System.Web.UI.WebControls.FileUpload> control to perform any necessary pre-rendering steps before saving view state and rendering content."}]},{"pos":[38368,38462],"content":"An &lt;xref:System.EventArgs?displayProperty=fullName&gt; object that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <ph id=\"ph1\">&amp;lt;</ph>xref:System.EventArgs?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> object that contains the event data.","pos":[0,94],"source":"An &lt;xref:System.EventArgs?displayProperty=fullName&gt; object that contains the event data."}]},{"pos":[38917,39098],"content":"Gets the underlying <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpPostedFile\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for a file that is uploaded by using the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets the underlying <xref href=\"System.Web.HttpPostedFile\"></xref> object for a file that is uploaded by using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control."},{"pos":[39111,40088],"content":"The PostedFile property gets the underlying <xref:System.Web.HttpPostedFile> object for a file that is uploaded by using the <xref:System.Web.UI.WebControls.FileUpload> control. Use this property to access additional properties on the uploaded file.       You can use the <xref:System.Web.HttpPostedFile.ContentLength%2A> property to get the length of the file. You can use the <xref:System.Web.HttpPostedFile.ContentType%2A> property to get the MIME content type of the file. In addition, you can use the PostedFile property to access the <xref:System.Web.HttpPostedFile.FileName%2A> property, the <xref:System.Web.HttpPostedFile.InputStream%2A> property, and the <xref:System.Web.HttpPostedFile.SaveAs%2A> method. However, the same functionality is provided by the <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> property, the <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property, and the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The PostedFile property gets the underlying <xref:System.Web.HttpPostedFile> object for a file that is uploaded by using the <xref:System.Web.UI.WebControls.FileUpload> control. Use this property to access additional properties on the uploaded file.       You can use the <xref:System.Web.HttpPostedFile.ContentLength%2A> property to get the length of the file. You can use the <xref:System.Web.HttpPostedFile.ContentType%2A> property to get the MIME content type of the file. In addition, you can use the PostedFile property to access the <xref:System.Web.HttpPostedFile.FileName%2A> property, the <xref:System.Web.HttpPostedFile.InputStream%2A> property, and the <xref:System.Web.HttpPostedFile.SaveAs%2A> method. However, the same functionality is provided by the <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> property, the <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property, and the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method.","pos":[0,975],"nodes":[{"content":"The PostedFile property gets the underlying &lt;xref:System.Web.HttpPostedFile&gt; object for a file that is uploaded by using the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control.","pos":[0,177],"source":"The PostedFile property gets the underlying <xref:System.Web.HttpPostedFile> object for a file that is uploaded by using the <xref:System.Web.UI.WebControls.FileUpload> control."},{"content":"Use this property to access additional properties on the uploaded file.","pos":[178,249]},{"content":"You can use the &lt;xref:System.Web.HttpPostedFile.ContentLength%2A&gt; property to get the length of the file.","pos":[256,361],"source":"       You can use the <xref:System.Web.HttpPostedFile.ContentLength%2A> property to get the length of the file."},{"content":"You can use the &lt;xref:System.Web.HttpPostedFile.ContentType%2A&gt; property to get the MIME content type of the file.","pos":[362,476],"source":" You can use the <xref:System.Web.HttpPostedFile.ContentType%2A> property to get the MIME content type of the file."},{"content":"In addition, you can use the PostedFile property to access the &lt;xref:System.Web.HttpPostedFile.FileName%2A&gt; property, the &lt;xref:System.Web.HttpPostedFile.InputStream%2A&gt; property, and the &lt;xref:System.Web.HttpPostedFile.SaveAs%2A&gt; method.","pos":[477,715],"source":" In addition, you can use the PostedFile property to access the <xref:System.Web.HttpPostedFile.FileName%2A> property, the <xref:System.Web.HttpPostedFile.InputStream%2A> property, and the <xref:System.Web.HttpPostedFile.SaveAs%2A> method."},{"content":"However, the same functionality is provided by the &lt;xref:System.Web.UI.WebControls.FileUpload.FileName%2A&gt; property, the &lt;xref:System.Web.UI.WebControls.FileUpload.FileContent%2A&gt; property, and the &lt;xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A&gt; method.","pos":[716,975],"source":" However, the same functionality is provided by the <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> property, the <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property, and the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method."}]}]},{"pos":[40991,41132],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpPostedFile\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for a file uploaded by using the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.HttpPostedFile\"></xref> for a file uploaded by using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref>."},{"pos":[41591,41629],"content":"Gets the collection of uploaded files.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of uploaded files.","pos":[0,38]}]},{"pos":[41844,41877],"content":"The collection of uploaded files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection of uploaded files.","pos":[0,33]}]},{"pos":[42418,42626],"content":"Sends the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control content to the specified <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.HtmlTextWriter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object, which writes the content to render on the client.","needQuote":true,"needEscape":true,"source":"Sends the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control content to the specified <xref href=\"System.Web.UI.HtmlTextWriter\"></xref> object, which writes the content to render on the client."},{"pos":[42638,42861],"content":"The Render method sends the <xref:System.Web.UI.WebControls.FileUpload> control content to the specified <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> object, which writes the content to render on the client.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Render method sends the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control content to the specified &lt;xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName&gt; object, which writes the content to render on the client.","pos":[0,223],"source":"The Render method sends the <xref:System.Web.UI.WebControls.FileUpload> control content to the specified <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> object, which writes the content to render on the client."}]},{"pos":[43048,43201],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.HtmlTextWriter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that receives the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.FileUpload\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control content.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.HtmlTextWriter\"></xref> object that receives the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control content."},{"pos":[43683,43760],"content":"Saves the contents of an uploaded file to a specified path on the Web server.","needQuote":true,"needEscape":true,"nodes":[{"content":"Saves the contents of an uploaded file to a specified path on the Web server.","pos":[0,77]}]},{"pos":[43773,47021],"content":"The SaveAs method saves the contents of an uploaded file to a specified path on the Web server.       The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically save a file to the server after the user selects the file to upload. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user clicks to upload the file. The code that you write to save the specified file should call the SaveAs method, which saves the contents of a file to a specified path on the server. Typically, the SaveAs method is called in an event-handling method for an event that raises a post back to the server. For example, if you provide a button to submit a file, the code to save the file to the server could then be included inside the event-handling method for the click event.       When you call the SaveAs method, you must specify the full path of the directory on the server in which to save the uploaded file. If you do not explicitly specify a path in your application code, an <xref:System.Web.HttpException> exception is thrown when a user attempts to upload a file. This behavior helps keep the files on the server secure, by not allowing users to specify a path in which to save the files that they upload.       Before calling the SaveAs method, you should use the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> property to verify that the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload. If the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> returns `true`, call the SaveAs method. If it returns `false`, display a message to the user indicating that the control does not contain a file. If you do not provide error-handling code to verify that a file exists, an attempt to save a nonexistent file throws an <xref:System.Web.HttpException> exception.       For a call to the SaveAs to work, the ASP.NET application must have write access to the directory on the server. There are two ways that the application can get write access. You can explicitly grant write access to the account under which the application is running, in the directory in which the uploaded files will be saved. Alternatively, you can increase the level of trust that is granted to the ASP.NET application. To get write access to the executing directory for the application, the application must be granted the <xref:System.Web.AspNetHostingPermission> object with the trust level set to the <xref:System.Web.AspNetHostingPermissionLevel?displayProperty=fullName> value. Increasing the level of trust increases the application's access to resources on the server. Note that this is not a secure approach, because a malicious user who gains control of your application will also be able to run under this higher level of trust. It is a best practice to run an ASP.NET application in the context of a user who has the minimum privileges that are required for the application to run. For more information about security in ASP.NET applications, see [Basic Security Practices for Web Applications](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Trust Levels and Policy Files](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SaveAs method saves the contents of an uploaded file to a specified path on the Web server.","pos":[0,95]},{"content":"The &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control does not automatically save a file to the server after the user selects the file to upload.","pos":[102,249],"source":"       The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically save a file to the server after the user selects the file to upload."},{"content":"You must explicitly provide a control or mechanism to allow the user to submit the specified file.","pos":[250,348]},{"content":"For example, you can provide a button that the user clicks to upload the file.","pos":[349,427]},{"content":"The code that you write to save the specified file should call the SaveAs method, which saves the contents of a file to a specified path on the server.","pos":[428,579]},{"content":"Typically, the SaveAs method is called in an event-handling method for an event that raises a post back to the server.","pos":[580,698]},{"content":"For example, if you provide a button to submit a file, the code to save the file to the server could then be included inside the event-handling method for the click event.","pos":[699,870]},{"content":"When you call the SaveAs method, you must specify the full path of the directory on the server in which to save the uploaded file.","pos":[877,1007]},{"content":"If you do not explicitly specify a path in your application code, an &lt;xref:System.Web.HttpException&gt; exception is thrown when a user attempts to upload a file.","pos":[1008,1167],"source":" If you do not explicitly specify a path in your application code, an <xref:System.Web.HttpException> exception is thrown when a user attempts to upload a file."},{"content":"This behavior helps keep the files on the server secure, by not allowing users to specify a path in which to save the files that they upload.","pos":[1168,1309]},{"content":"Before calling the SaveAs method, you should use the &lt;xref:System.Web.UI.WebControls.FileUpload.HasFile%2A&gt; property to verify that the &lt;xref:System.Web.UI.WebControls.FileUpload&gt; control contains a file to upload.","pos":[1316,1530],"source":"       Before calling the SaveAs method, you should use the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> property to verify that the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload."},{"content":"If the &lt;xref:System.Web.UI.WebControls.FileUpload.HasFile%2A&gt; returns <ph id=\"ph1\">`true`</ph>, call the SaveAs method.","pos":[1531,1632],"source":" If the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> returns `true`, call the SaveAs method."},{"content":"If it returns <ph id=\"ph1\">`false`</ph>, display a message to the user indicating that the control does not contain a file.","pos":[1633,1738],"source":" If it returns `false`, display a message to the user indicating that the control does not contain a file."},{"content":"If you do not provide error-handling code to verify that a file exists, an attempt to save a nonexistent file throws an &lt;xref:System.Web.HttpException&gt; exception.","pos":[1739,1901],"source":" If you do not provide error-handling code to verify that a file exists, an attempt to save a nonexistent file throws an <xref:System.Web.HttpException> exception."},{"content":"For a call to the SaveAs to work, the ASP.NET application must have write access to the directory on the server.","pos":[1908,2020]},{"content":"There are two ways that the application can get write access.","pos":[2021,2082]},{"content":"You can explicitly grant write access to the account under which the application is running, in the directory in which the uploaded files will be saved.","pos":[2083,2235]},{"content":"Alternatively, you can increase the level of trust that is granted to the ASP.NET application.","pos":[2236,2330]},{"content":"To get write access to the executing directory for the application, the application must be granted the &lt;xref:System.Web.AspNetHostingPermission&gt; object with the trust level set to the &lt;xref:System.Web.AspNetHostingPermissionLevel?displayProperty=fullName&gt; value.","pos":[2331,2594],"source":" To get write access to the executing directory for the application, the application must be granted the <xref:System.Web.AspNetHostingPermission> object with the trust level set to the <xref:System.Web.AspNetHostingPermissionLevel?displayProperty=fullName> value."},{"content":"Increasing the level of trust increases the application's access to resources on the server.","pos":[2595,2687]},{"content":"Note that this is not a secure approach, because a malicious user who gains control of your application will also be able to run under this higher level of trust.","pos":[2688,2850]},{"content":"It is a best practice to run an ASP.NET application in the context of a user who has the minimum privileges that are required for the application to run.","pos":[2851,3004]},{"content":"For more information about security in ASP.NET applications, see <bpt id=\"p1\">[</bpt>Basic Security Practices for Web Applications<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>ASP.NET Trust Levels and Policy Files<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3005,3240],"source":" For more information about security in ASP.NET applications, see [Basic Security Practices for Web Applications](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Trust Levels and Policy Files](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[47984,48087],"content":"A string that specifies the full path of the location of the server on which to save the uploaded file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that specifies the full path of the location of the server on which to save the uploaded file.","pos":[0,103]}]},{"pos":[48253,48294],"content":"<ph id=\"ph1\">&lt;code&gt;filename&lt;/code&gt;</ph> is not a full path.","needQuote":true,"needEscape":true,"source":"<code>filename</code> is not a full path."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.FileUpload\n  id: FileUpload\n  children:\n  - System.Web.UI.WebControls.FileUpload.#ctor\n  - System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.FileUpload.AllowMultiple\n  - System.Web.UI.WebControls.FileUpload.FileBytes\n  - System.Web.UI.WebControls.FileUpload.FileContent\n  - System.Web.UI.WebControls.FileUpload.FileName\n  - System.Web.UI.WebControls.FileUpload.HasFile\n  - System.Web.UI.WebControls.FileUpload.HasFiles\n  - System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)\n  - System.Web.UI.WebControls.FileUpload.PostedFile\n  - System.Web.UI.WebControls.FileUpload.PostedFiles\n  - System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.FileUpload.SaveAs(System.String)\n  langs:\n  - csharp\n  name: FileUpload\n  nameWithType: FileUpload\n  fullName: System.Web.UI.WebControls.FileUpload\n  type: Class\n  summary: Displays a text box control and a browse button that enable users to select a file to upload to the server.\n  remarks: \"In this topic:  \\n  \\n-   [Introduction](#introduction)  \\n  \\n-   [Saving Uploaded Files](#saving_uploaded_files)  \\n  \\n-   [Security Considerations](#security_considerations)  \\n  \\n-   [Memory Limitations](#memory_limitations)  \\n  \\n-   [Using the FileUpload Control with the UpdatePanel Control](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  \\n  \\n-   [Declarative Syntax](#DeclarativeSyntax)  \\n  \\n<a name=\\\"introduction\\\"></a>   \\n## Introduction  \\n The FileUpload class displays a text box control and a browse button that enable users to select a file on the client and upload it to the Web server. The user specifies the file to upload by entering the full path of the file on the local computer (for example, **C:\\\\MyFiles\\\\TestFile.txt**) in the text box of the control. Alternately, the user can select the file by clicking the **Browse** button, and then locating it in the **Choose File** dialog box.  \\n  \\n Use the <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> property to get the name of a file on a client to upload by using the FileUpload control. The file name that this property returns does not include the path of the file on the client.  \\n  \\n The <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property gets a <xref:System.IO.Stream> object that points to a file to upload. Use this property to access the contents of the file as bytes. For example, you can use the <xref:System.IO.Stream> object that is returned by the <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property to read the contents of the file as bytes and store them in a byte array. Alternatively, you can use the <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> property to retrieve all the bytes in the file.  \\n  \\n The <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property gets the underlying <xref:System.Web.HttpPostedFile> object for the file to upload. You can use this property to access additional properties on the file. The <xref:System.Web.HttpPostedFile.ContentLength%2A> property gets the length of the file. The <xref:System.Web.HttpPostedFile.ContentType%2A> property gets the MIME content type of the file. In addition, you can use the <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property to access the <xref:System.Web.HttpPostedFile.FileName%2A> property, the <xref:System.Web.HttpPostedFile.InputStream%2A> property, and the <xref:System.Web.HttpPostedFile.SaveAs%2A> method. However, the same functionality is provided by the <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> property, the <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property, and the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method.  \\n  \\n<a name=\\\"saving_uploaded_files\\\"></a>   \\n## Saving Uploaded Files  \\n The FileUpload control does not automatically save a file to the server after the user selects the file to upload. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user clicks to upload the file. The code that you write to save the specified file should call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method, which saves the contents of a file to a specified path on the server. Typically, the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called in an event-handling method for an event that raises a post back to the server. For example, if you provide a button to submit a file, you could include the code to save the file inside the event-handling method for the click event.  \\n  \\n Before calling the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method to save the file to the server, use the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> property to verify that the FileUpload control contains a file. If the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> returns `true`, call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method. If it returns `false`, display a message to the user indicating that the control does not contain a file. Do not check the <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property to determine whether a file to upload exists because, by default, this property contains 0 bytes. As a result, even when the FileUpload control is blank, the <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property returns a non-null value.  \\n  \\n<a name=\\\"security_considerations\\\"></a>   \\n## Security Considerations  \\n When you call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method, you must specify the full path of the directory in which to save the uploaded file. If you do not explicitly specify a path in your application code, an exception is thrown when a user attempts to upload a file. This behavior helps keep the files on the server secure by preventing users from being able to write to arbitrary locations in your application's directory structure, as well as preventing access to sensitive root directories.  \\n  \\n The <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method writes the uploaded file to the specified directory. Therefore, the ASP.NET application must have write access to the directory on the server. There are two ways that the application can get write access. You can explicitly grant write access to the account under which the application is running, in the directory in which the uploaded files will be saved. Alternatively, you can increase the level of trust that is granted to the ASP.NET application. To get write access to the executing directory for the application, the application must be granted the <xref:System.Web.AspNetHostingPermission> object with the trust level set to the <xref:System.Web.AspNetHostingPermissionLevel?displayProperty=fullName> value. Increasing the level of trust increases the application's access to resources on the server. Note that this is not a secure approach, because a malicious user who gains control of your application will also be able to run under this higher level of trust. It is a best practice to run an ASP.NET application in the context of a user with the minimum privileges that are required for the application to run. For more information about security in ASP.NET applications, see [Basic Security Practices for Web Applications](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Trust Levels and Policy Files](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"memory_limitations\\\"></a>   \\n## Memory Limitations  \\n One way to guard against denial of service attacks is to limit the size of the files that can be uploaded by using the FileUpload control. You should set a size limit that is appropriate for the types of files that you expect to be uploaded. The default size limit is 4096 kilobytes (KB), or 4 megabytes (MB). You can allow larger files to be uploaded by setting the `maxRequestLength` attribute of the  element. To increase the maximum allowable file size for the entire application, set the `maxRequestLength` attribute in the Web.config file. To increase the maximum allowable file size for a specified page, set the `maxRequestLength` attribute inside the `location` element in Web.config. For an example, see [location Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5).  \\n  \\n When uploading large files, a user might also receive the following error message:  \\n  \\n `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  \\n  \\n If your users encounter this error message, increase the value of the `memoryLimit` attribute in the  of element the Web.config file for the application. The `memoryLimit` attribute specifies the maximum amount of memory that a worker process can use. If the worker process exceeds the `memoryLimit` amount, a new process is created to replace it, and all current requests are reassigned to the new process.  \\n  \\n To control whether the file to upload is temporarily stored in memory or on the server while the request is being processed, set the `requestLengthDiskThreshold` attribute of the  element. This attribute enables you to manage the size of the input stream buffer. The default is 256 bytes. The value that you specify should not exceed the value that you specify for the `maxRequestLength` attribute.  \\n  \\n<a name=\\\"using_the_FileUpload_Control_with_the_UpdatePanel_control\\\"></a>   \\n## Using the FileUpload Control with the UpdatePanel Control  \\n The FileUpload control is designed to be used only in postback scenarios and not in asynchronous postback scenarios during partial-page rendering. When you use a FileUpload control inside an <xref:System.Web.UI.UpdatePanel> control, the file must be uploaded by using a control that is a <xref:System.Web.UI.PostBackTrigger> object for the panel. <xref:System.Web.UI.UpdatePanel> controls are used to update selected regions of a page instead of updating the whole page with a postback. For more information, see [UpdatePanel Control Overview](~/add/includes/ajax-current-ext-md.md) and [Partial-Page Rendering Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n<a name=\\\"DeclarativeSyntax\\\"></a>   \\n## Declarative Syntax  \\n  \\n```  \\n<asp:FileUpload  \\n    AccessKey=\\\"string\\\"  \\n    BackColor=\\\"color name|#dddddd\\\"  \\n    BorderColor=\\\"color name|#dddddd\\\"  \\n    BorderStyle=\\\"NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  \\n        Inset|Outset\\\"  \\n    BorderWidth=\\\"size\\\"  \\n    CssClass=\\\"string\\\"  \\n    Enabled=\\\"True|False\\\"  \\n    EnableTheming=\\\"True|False\\\"  \\n    EnableViewState=\\\"True|False\\\"  \\n    Font-Bold=\\\"True|False\\\"  \\n    Font-Italic=\\\"True|False\\\"  \\n    Font-Names=\\\"string\\\"  \\n    Font-Overline=\\\"True|False\\\"  \\n    Font-Size=\\\"string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  \\n        Large|X-Large|XX-Large\\\"  \\n    Font-Strikeout=\\\"True|False\\\"  \\n    Font-Underline=\\\"True|False\\\"  \\n    ForeColor=\\\"color name|#dddddd\\\"  \\n    Height=\\\"size\\\"  \\n    ID=\\\"string\\\"  \\n    OnDataBinding=\\\"DataBinding event handler\\\"  \\n    OnDisposed=\\\"Disposed event handler\\\"  \\n    OnInit=\\\"Init event handler\\\"  \\n    OnLoad=\\\"Load event handler\\\"  \\n    OnPreRender=\\\"PreRender event handler\\\"  \\n    OnUnload=\\\"Unload event handler\\\"  \\n    runat=\\\"server\\\"  \\n    SkinID=\\\"string\\\"  \\n    Style=\\\"string\\\"  \\n    TabIndex=\\\"integer\\\"  \\n    ToolTip=\\\"string\\\"  \\n    Visible=\\\"True|False\\\"  \\n    Width=\\\"size\\\"  \\n/>  \\n```\"\n  example:\n  - \"A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=191897).  \\n  \\n This section contains the following four examples:  \\n  \\n-   The first example demonstrates how to create a FileUpload control that saves files to a path that is specified in code.  \\n  \\n-   The second example demonstrates how to create a FileUpload control that saves files to a specified directory in the file system for the application.  \\n  \\n-   The third example demonstrates how to create a FileUpload control that saves files to a specified path and limits the size of the file that can be uploaded.  \\n  \\n-   The fourth example demonstrates how to create a FileUpload control that saves files to a specified path and allows only files that have the .doc or .xls file name extensions to be uploaded.  \\n  \\n> [!CAUTION]\\n>  These examples demonstrate the basic syntax for the FileUpload control, but they do not demonstrate all the necessary error checking that should be completed before to saving the file. For a more complete example, see <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  \\n  \\n The following example demonstrates how to create a FileUpload control that saves files to a path that is specified in code. The <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server.  \\n  \\n [!code-vb[FileUploadClass1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_338_1.aspx)]\\n [!code-cs[FileUploadClass1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_338_1.aspx)]  \\n  \\n The following example demonstrates how to create a FileUpload control that saves files to a specified directory in the file system for the application. The <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=fullName> property is used to get the physical file system path of the root directory for the currently executing server application. The <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server.  \\n  \\n [!code-vb[FileUploadClass2#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_338_2.aspx)]\\n [!code-cs[FileUploadClass2#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_338_2.aspx)]  \\n  \\n The following example demonstrates how to create a FileUpload control that saves files to a path that is specified in the code. The control limits the size of the file that can be uploaded to 5 MB. The <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property is used to access the underlying <xref:System.Web.HttpPostedFile.ContentLength%2A> property and return the size of the file. If the size of the file to upload is less than 2 MB, the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server. In addition to checking for the maximum file size setting in your application code, you can set the `maxRequestLength` attribute of the  element to a maximum allowable size in the configuration file for your application.  \\n  \\n [!code-vb[FileUploadClass3#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_338_3.aspx)]\\n [!code-cs[FileUploadClass3#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_338_3.aspx)]  \\n  \\n The following example demonstrates how to create a FileUpload control that saves files to a path that is specified in the code. This example allows only files that have the .doc or .xls file name extensions to be uploaded. The <xref:System.IO.Path.GetExtension%2A?displayProperty=fullName> method is called to return the extension of the file to upload. If the file has a .doc or .xls file name extension, the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server.  \\n  \\n [!code-vb[FileUploadClass4#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_338_4.aspx)]\\n [!code-cs[FileUploadClass4#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_338_4.aspx)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Designer(\"System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.Web.UI.ControlValueProperty(\"FileBytes\")]\n\n      [System.Web.UI.ValidationProperty(\"FileName\")]\n\n      public class FileUpload : System.Web.UI.WebControls.WebControl\n  inheritance:\n  - System.Object\n  - System.Web.UI.Control\n  - System.Web.UI.WebControls.WebControl\n  implements: []\n  inheritedMembers:\n  - System.Web.UI.Control.Adapter\n  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)\n  - System.Web.UI.Control.AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)\n  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory\n  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.BindingContainer\n  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)\n  - System.Web.UI.Control.ChildControlsCreated\n  - System.Web.UI.Control.ClearCachedClientID\n  - System.Web.UI.Control.ClearChildControlState\n  - System.Web.UI.Control.ClearChildState\n  - System.Web.UI.Control.ClearChildViewState\n  - System.Web.UI.Control.ClearEffectiveClientIDMode\n  - System.Web.UI.Control.ClientID\n  - System.Web.UI.Control.ClientIDMode\n  - System.Web.UI.Control.ClientIDSeparator\n  - System.Web.UI.Control.Context\n  - System.Web.UI.Control.Controls\n  - System.Web.UI.Control.CreateChildControls\n  - System.Web.UI.Control.CreateControlCollection\n  - System.Web.UI.Control.DataBind\n  - System.Web.UI.Control.DataBind(System.Boolean)\n  - System.Web.UI.Control.DataBindChildren\n  - System.Web.UI.Control.DataBinding\n  - System.Web.UI.Control.DataItemContainer\n  - System.Web.UI.Control.DataKeysContainer\n  - System.Web.UI.Control.DesignMode\n  - System.Web.UI.Control.Dispose\n  - System.Web.UI.Control.Disposed\n  - System.Web.UI.Control.EnableViewState\n  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.EnsureChildControls\n  - System.Web.UI.Control.EnsureID\n  - System.Web.UI.Control.Events\n  - System.Web.UI.Control.FindControl(System.String)\n  - System.Web.UI.Control.FindControl(System.String,System.Int32)\n  - System.Web.UI.Control.Focus\n  - System.Web.UI.Control.GetDesignModeState\n  - System.Web.UI.Control.GetRouteUrl(System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)\n  - System.Web.UI.Control.HasChildViewState\n  - System.Web.UI.Control.HasControls\n  - System.Web.UI.Control.HasEvents\n  - System.Web.UI.Control.ID\n  - System.Web.UI.Control.IdSeparator\n  - System.Web.UI.Control.Init\n  - System.Web.UI.Control.IsChildControlStateCleared\n  - System.Web.UI.Control.IsLiteralContent\n  - System.Web.UI.Control.IsTrackingViewState\n  - System.Web.UI.Control.IsViewStateEnabled\n  - System.Web.UI.Control.Load\n  - System.Web.UI.Control.LoadControlState(System.Object)\n  - System.Web.UI.Control.LoadViewStateByID\n  - System.Web.UI.Control.MapPathSecure(System.String)\n  - System.Web.UI.Control.NamingContainer\n  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.OnDataBinding(System.EventArgs)\n  - System.Web.UI.Control.OnInit(System.EventArgs)\n  - System.Web.UI.Control.OnLoad(System.EventArgs)\n  - System.Web.UI.Control.OnUnload(System.EventArgs)\n  - System.Web.UI.Control.OpenFile(System.String)\n  - System.Web.UI.Control.Page\n  - System.Web.UI.Control.Parent\n  - System.Web.UI.Control.PreRender\n  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)\n  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)\n  - System.Web.UI.Control.RenderingCompatibility\n  - System.Web.UI.Control.ResolveAdapter\n  - System.Web.UI.Control.ResolveClientUrl(System.String)\n  - System.Web.UI.Control.ResolveUrl(System.String)\n  - System.Web.UI.Control.SaveControlState\n  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)\n  - System.Web.UI.Control.Site\n  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions\n  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.TemplateControl\n  - System.Web.UI.Control.TemplateSourceDirectory\n  - System.Web.UI.Control.UniqueID\n  - System.Web.UI.Control.Unload\n  - System.Web.UI.Control.ValidateRequestMode\n  - System.Web.UI.Control.ViewState\n  - System.Web.UI.Control.ViewStateIgnoresCase\n  - System.Web.UI.Control.ViewStateMode\n  - System.Web.UI.Control.Visible\n  - System.Web.UI.WebControls.WebControl.AccessKey\n  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)\n  - System.Web.UI.WebControls.WebControl.Attributes\n  - System.Web.UI.WebControls.WebControl.BackColor\n  - System.Web.UI.WebControls.WebControl.BorderColor\n  - System.Web.UI.WebControls.WebControl.BorderStyle\n  - System.Web.UI.WebControls.WebControl.BorderWidth\n  - System.Web.UI.WebControls.WebControl.ControlStyle\n  - System.Web.UI.WebControls.WebControl.ControlStyleCreated\n  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)\n  - System.Web.UI.WebControls.WebControl.CreateControlStyle\n  - System.Web.UI.WebControls.WebControl.CssClass\n  - System.Web.UI.WebControls.WebControl.DisabledCssClass\n  - System.Web.UI.WebControls.WebControl.Enabled\n  - System.Web.UI.WebControls.WebControl.EnableTheming\n  - System.Web.UI.WebControls.WebControl.Font\n  - System.Web.UI.WebControls.WebControl.ForeColor\n  - System.Web.UI.WebControls.WebControl.HasAttributes\n  - System.Web.UI.WebControls.WebControl.Height\n  - System.Web.UI.WebControls.WebControl.IsEnabled\n  - System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)\n  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)\n  - System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.WebControl.RenderContents(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.WebControl.SaveViewState\n  - System.Web.UI.WebControls.WebControl.SkinID\n  - System.Web.UI.WebControls.WebControl.Style\n  - System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute\n  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)\n  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)\n  - System.Web.UI.WebControls.WebControl.TabIndex\n  - System.Web.UI.WebControls.WebControl.TagKey\n  - System.Web.UI.WebControls.WebControl.TagName\n  - System.Web.UI.WebControls.WebControl.ToolTip\n  - System.Web.UI.WebControls.WebControl.TrackViewState\n  - System.Web.UI.WebControls.WebControl.Width\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: FileUpload()\n  nameWithType: FileUpload.FileUpload()\n  fullName: System.Web.UI.WebControls.FileUpload.FileUpload()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> class.\n  remarks: Use the FileUpload constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FileUpload> class. The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically save a file to the server after the user selects the file to upload. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user clicks to upload the file.\n  example:\n  - \"The following example demonstrates how to initialize a new instance of the <xref:System.Web.UI.WebControls.FileUpload> class. Note that this example demonstrates the constructor syntax but does not add functionality to the control after it is created.  \\n  \\n This example is part of a larger example provided for the <xref:System.Web.UI.WebControls.FileUpload> class.  \\n  \\n [!code-vb[FileUploadCstr#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_212_1.aspx)]\"\n  syntax:\n    content: public FileUpload ();\n    parameters: []\n  overload: System.Web.UI.WebControls.FileUpload.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)\n  id: AddAttributesToRender(System.Web.UI.HtmlTextWriter)\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: AddAttributesToRender(HtmlTextWriter)\n  nameWithType: FileUpload.AddAttributesToRender(HtmlTextWriter)\n  fullName: System.Web.UI.WebControls.FileUpload.AddAttributesToRender(HtmlTextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Adds the HTML attributes and styles of a <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control to render to the specified <xref href=\"System.Web.UI.HtmlTextWriter\"></xref> object.\n  remarks: The AddAttributesToRender method is primarily used by control developers to insert the appropriate attributes and styles to the <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> output stream for a <xref:System.Web.UI.WebControls.FileUpload> control. The AddAttributesToRender method overrides the <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=fullName> method.\n  syntax:\n    content: protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);\n    parameters:\n    - id: writer\n      type: System.Web.UI.HtmlTextWriter\n      description: An <xref href=\"System.Web.UI.HtmlTextWriter\"></xref> that represents the output stream to render HTML content on the client.\n  overload: System.Web.UI.WebControls.FileUpload.AddAttributesToRender*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.AllowMultiple\n  id: AllowMultiple\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: AllowMultiple\n  nameWithType: FileUpload.AllowMultiple\n  fullName: System.Web.UI.WebControls.FileUpload.AllowMultiple\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value that specifies whether multiple files can be selected for upload.\n  syntax:\n    content: public virtual bool AllowMultiple { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple files can be selected; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.FileUpload.AllowMultiple*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.FileBytes\n  id: FileBytes\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: FileBytes\n  nameWithType: FileUpload.FileBytes\n  fullName: System.Web.UI.WebControls.FileUpload.FileBytes\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets an array of the bytes in a file that is specified by using a <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control.\n  remarks: \"The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically read the file from the client. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user can click to upload the file. The code that you write to save the specified file could call the FileBytes property, which returns the contents of the file.  \\n  \\n Before calling the FileBytes property, you should use the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> property to verify that the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload. If the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> returns `true`, call the FileBytes property. If it returns `false`, display a message to the user indicating that the control does not contain a file. If you do not provide error-handling code to verify that a file exists, an attempt to save a nonexistent file throws an <xref:System.Web.HttpException> exception.\"\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control. When the user clicks the **Upload file** button, the contents of the file are displayed as bytes in a text box on the page. This example uses the FileBytes property to upload the entire file.  \\n  \\n [!code-cs[FileUploadFileBytes#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_816_1.aspx)]\\n [!code-vb[FileUploadFileBytes#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_816_1.aspx)]\"\n  syntax:\n    content: public byte[] FileBytes { get; }\n    return:\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains the contents of the specified file.\n  overload: System.Web.UI.WebControls.FileUpload.FileBytes*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The entire file was not read.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.FileContent\n  id: FileContent\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: FileContent\n  nameWithType: FileUpload.FileContent\n  fullName: System.Web.UI.WebControls.FileUpload.FileContent\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a <xref:System.IO.Stream> object that points to a file to upload using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control.\n  remarks: The FileContent property gets a <xref:System.IO.Stream> object that points to a file to upload by using the <xref:System.Web.UI.WebControls.FileUpload> control. Use the FileContent property to access the contents of the file. For example, you can use the <xref:System.IO.Stream> object that is returned by this property to read the contents of the file as bytes and store them in a byte array.\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control. The FileContent property is used to read the contents of the file into a byte array. When the user clicks the **Upload file** button, the contents of the file are displayed as bytes in a text box on the page.  \\n  \\n [!code-cs[FileUpload.FileContent#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_458_1.aspx)]\\n [!code-vb[FileUpload.FileContent#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_458_1.aspx)]\"\n  syntax:\n    content: public System.IO.Stream FileContent { get; }\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> that points to a file to upload using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref>.\n  overload: System.Web.UI.WebControls.FileUpload.FileContent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.FileName\n  id: FileName\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: FileName\n  nameWithType: FileUpload.FileName\n  fullName: System.Web.UI.WebControls.FileUpload.FileName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the name of a file on a client to upload using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control.\n  remarks: Gets the name of a file on a client to upload using the <xref:System.Web.UI.WebControls.FileUpload> control. The file name that the FileName property returns does not include the path of the file on the client.\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control that saves files to a path that is specified in code. The FileName property is used to get the name of the file to upload. The <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server, using the same name the file has on the client. Note that this example demonstrates the basic syntax for this control, but does not demonstrate all the necessary error checking that should be done before saving the file. For a more complete example, see <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  \\n  \\n [!code-vb[FileUploadClass1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_813_1.aspx)]\\n [!code-cs[FileUploadClass1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_813_1.aspx)]\"\n  syntax:\n    content: public string FileName { get; }\n    return:\n      type: System.String\n      description: A string that specifies the name of a file on a client to upload using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref>.\n  overload: System.Web.UI.WebControls.FileUpload.FileName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.HasFile\n  id: HasFile\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: HasFile\n  nameWithType: FileUpload.HasFile\n  fullName: System.Web.UI.WebControls.FileUpload.HasFile\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a value indicating whether the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control contains a file.\n  remarks: The HasFile property gets a value indicating whether the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload. Use this property to verify that a file to upload exists before performing operations on the file. For example, before calling the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method to save the file to disk, use the HasFile property to verify that the file exists. If HasFile returns `true`, call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method. If it returns `false`, display a message to the user indicating that the control does not contain a file.\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control that performs error checking. Before saving the file, the HasFile method is called to verify that the control contains a file to upload. In addition, the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method is called to check whether a file with the same name already occurs in the path. If it does, the name of the file to upload is prefixed with an underscore character before the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called. This prevents the existing file from being overwritten.  \\n  \\n [!code-vb[FileUpload.SaveAs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_287_1.aspx)]\\n [!code-cs[FileUpload.SaveAs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_287_1.aspx)]\"\n  syntax:\n    content: public bool HasFile { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> contains a file; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.FileUpload.HasFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.HasFiles\n  id: HasFiles\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: HasFiles\n  nameWithType: FileUpload.HasFiles\n  fullName: System.Web.UI.WebControls.FileUpload.HasFiles\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a value that indicates whether any files have been uploaded.\n  remarks: This method also returns `false` if an empty file (zero bytes) is uploaded.\n  syntax:\n    content: public bool HasFiles { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if any files have been uploaded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.FileUpload.HasFiles*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)\n  id: OnPreRender(System.EventArgs)\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: OnPreRender(EventArgs)\n  nameWithType: FileUpload.OnPreRender(EventArgs)\n  fullName: System.Web.UI.WebControls.FileUpload.OnPreRender(EventArgs)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Raises the <xref href=\"System.Web.UI.Control.PreRender\"></xref> event for the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control.\n  remarks: The OnPreRender method notifies the <xref:System.Web.UI.WebControls.FileUpload> control to perform any necessary pre-rendering steps before saving view state and rendering content.\n  syntax:\n    content: protected override void OnPreRender (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An &lt;xref:System.EventArgs?displayProperty=fullName&gt; object that contains the event data.\n  overload: System.Web.UI.WebControls.FileUpload.OnPreRender*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.PostedFile\n  id: PostedFile\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: PostedFile\n  nameWithType: FileUpload.PostedFile\n  fullName: System.Web.UI.WebControls.FileUpload.PostedFile\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the underlying <xref href=\"System.Web.HttpPostedFile\"></xref> object for a file that is uploaded by using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control.\n  remarks: \"The PostedFile property gets the underlying <xref:System.Web.HttpPostedFile> object for a file that is uploaded by using the <xref:System.Web.UI.WebControls.FileUpload> control. Use this property to access additional properties on the uploaded file.  \\n  \\n You can use the <xref:System.Web.HttpPostedFile.ContentLength%2A> property to get the length of the file. You can use the <xref:System.Web.HttpPostedFile.ContentType%2A> property to get the MIME content type of the file. In addition, you can use the PostedFile property to access the <xref:System.Web.HttpPostedFile.FileName%2A> property, the <xref:System.Web.HttpPostedFile.InputStream%2A> property, and the <xref:System.Web.HttpPostedFile.SaveAs%2A> method. However, the same functionality is provided by the <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> property, the <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property, and the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method.\"\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control. When the user clicks the **Upload file** button, the contents of the file are displayed as bytes in a text box on the page. This example uses the PostedFile property to access the <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=fullName> property. The <xref:System.Web.HttpPostedFile.ContentLength%2A> property is used to determine the length of the file before copying the file contents to a byte array.  \\n  \\n [!code-cs[FileUpload.FileContent#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_462_1.aspx)]\\n [!code-vb[FileUpload.FileContent#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_462_1.aspx)]\"\n  syntax:\n    content: public System.Web.HttpPostedFile PostedFile { get; }\n    return:\n      type: System.Web.HttpPostedFile\n      description: An <xref href=\"System.Web.HttpPostedFile\"></xref> for a file uploaded by using the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref>.\n  overload: System.Web.UI.WebControls.FileUpload.PostedFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.PostedFiles\n  id: PostedFiles\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: PostedFiles\n  nameWithType: FileUpload.PostedFiles\n  fullName: System.Web.UI.WebControls.FileUpload.PostedFiles\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the collection of uploaded files.\n  syntax:\n    content: public System.Collections.Generic.IList<System.Web.HttpPostedFile> PostedFiles { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Web.HttpPostedFile}\n      description: The collection of uploaded files.\n  overload: System.Web.UI.WebControls.FileUpload.PostedFiles*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)\n  id: Render(System.Web.UI.HtmlTextWriter)\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: Render(HtmlTextWriter)\n  nameWithType: FileUpload.Render(HtmlTextWriter)\n  fullName: System.Web.UI.WebControls.FileUpload.Render(HtmlTextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Sends the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control content to the specified <xref href=\"System.Web.UI.HtmlTextWriter\"></xref> object, which writes the content to render on the client.\n  remarks: The Render method sends the <xref:System.Web.UI.WebControls.FileUpload> control content to the specified <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> object, which writes the content to render on the client.\n  syntax:\n    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);\n    parameters:\n    - id: writer\n      type: System.Web.UI.HtmlTextWriter\n      description: The <xref href=\"System.Web.UI.HtmlTextWriter\"></xref> object that receives the <xref href=\"System.Web.UI.WebControls.FileUpload\"></xref> control content.\n  overload: System.Web.UI.WebControls.FileUpload.Render*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FileUpload.SaveAs(System.String)\n  id: SaveAs(System.String)\n  parent: System.Web.UI.WebControls.FileUpload\n  langs:\n  - csharp\n  name: SaveAs(String)\n  nameWithType: FileUpload.SaveAs(String)\n  fullName: System.Web.UI.WebControls.FileUpload.SaveAs(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Saves the contents of an uploaded file to a specified path on the Web server.\n  remarks: \"The SaveAs method saves the contents of an uploaded file to a specified path on the Web server.  \\n  \\n The <xref:System.Web.UI.WebControls.FileUpload> control does not automatically save a file to the server after the user selects the file to upload. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user clicks to upload the file. The code that you write to save the specified file should call the SaveAs method, which saves the contents of a file to a specified path on the server. Typically, the SaveAs method is called in an event-handling method for an event that raises a post back to the server. For example, if you provide a button to submit a file, the code to save the file to the server could then be included inside the event-handling method for the click event.  \\n  \\n When you call the SaveAs method, you must specify the full path of the directory on the server in which to save the uploaded file. If you do not explicitly specify a path in your application code, an <xref:System.Web.HttpException> exception is thrown when a user attempts to upload a file. This behavior helps keep the files on the server secure, by not allowing users to specify a path in which to save the files that they upload.  \\n  \\n Before calling the SaveAs method, you should use the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> property to verify that the <xref:System.Web.UI.WebControls.FileUpload> control contains a file to upload. If the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> returns `true`, call the SaveAs method. If it returns `false`, display a message to the user indicating that the control does not contain a file. If you do not provide error-handling code to verify that a file exists, an attempt to save a nonexistent file throws an <xref:System.Web.HttpException> exception.  \\n  \\n For a call to the SaveAs to work, the ASP.NET application must have write access to the directory on the server. There are two ways that the application can get write access. You can explicitly grant write access to the account under which the application is running, in the directory in which the uploaded files will be saved. Alternatively, you can increase the level of trust that is granted to the ASP.NET application. To get write access to the executing directory for the application, the application must be granted the <xref:System.Web.AspNetHostingPermission> object with the trust level set to the <xref:System.Web.AspNetHostingPermissionLevel?displayProperty=fullName> value. Increasing the level of trust increases the application's access to resources on the server. Note that this is not a secure approach, because a malicious user who gains control of your application will also be able to run under this higher level of trust. It is a best practice to run an ASP.NET application in the context of a user who has the minimum privileges that are required for the application to run. For more information about security in ASP.NET applications, see [Basic Security Practices for Web Applications](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Trust Levels and Policy Files](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control that performs error checking. Before the file is saved, the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> method is called to verify that a file to upload exists. In addition, the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method is called to check whether a file that has the same name already exists in the path. If it does, the name of the file to upload is prefixed with a number before the SaveAs method is called. This prevents the existing file from being overwritten.  \\n  \\n [!code-vb[FileUpload.SaveAs#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_81_1.aspx)]\\n [!code-cs[FileUpload.SaveAs#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_81_1.aspx)]\"\n  syntax:\n    content: public void SaveAs (string filename);\n    parameters:\n    - id: filename\n      type: System.String\n      description: A string that specifies the full path of the location of the server on which to save the uploaded file.\n  overload: System.Web.UI.WebControls.FileUpload.SaveAs*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: <code>filename</code> is not a full path.\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.WebControls.WebControl\n  isExternal: false\n  name: System.Web.UI.WebControls.WebControl\n- uid: System.Web.HttpException\n  parent: System.Web\n  isExternal: false\n  name: HttpException\n  nameWithType: HttpException\n  fullName: System.Web.HttpException\n- uid: System.Web.UI.WebControls.FileUpload.#ctor\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: FileUpload()\n  nameWithType: FileUpload.FileUpload()\n  fullName: System.Web.UI.WebControls.FileUpload.FileUpload()\n- uid: System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: AddAttributesToRender(HtmlTextWriter)\n  nameWithType: FileUpload.AddAttributesToRender(HtmlTextWriter)\n  fullName: System.Web.UI.WebControls.FileUpload.AddAttributesToRender(HtmlTextWriter)\n- uid: System.Web.UI.HtmlTextWriter\n  parent: System.Web.UI\n  isExternal: false\n  name: HtmlTextWriter\n  nameWithType: HtmlTextWriter\n  fullName: System.Web.UI.HtmlTextWriter\n- uid: System.Web.UI.WebControls.FileUpload.AllowMultiple\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: AllowMultiple\n  nameWithType: FileUpload.AllowMultiple\n  fullName: System.Web.UI.WebControls.FileUpload.AllowMultiple\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.FileUpload.FileBytes\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: FileBytes\n  nameWithType: FileUpload.FileBytes\n  fullName: System.Web.UI.WebControls.FileUpload.FileBytes\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Web.UI.WebControls.FileUpload.FileContent\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: FileContent\n  nameWithType: FileUpload.FileContent\n  fullName: System.Web.UI.WebControls.FileUpload.FileContent\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Web.UI.WebControls.FileUpload.FileName\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: FileName\n  nameWithType: FileUpload.FileName\n  fullName: System.Web.UI.WebControls.FileUpload.FileName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.WebControls.FileUpload.HasFile\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: HasFile\n  nameWithType: FileUpload.HasFile\n  fullName: System.Web.UI.WebControls.FileUpload.HasFile\n- uid: System.Web.UI.WebControls.FileUpload.HasFiles\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: HasFiles\n  nameWithType: FileUpload.HasFiles\n  fullName: System.Web.UI.WebControls.FileUpload.HasFiles\n- uid: System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: OnPreRender(EventArgs)\n  nameWithType: FileUpload.OnPreRender(EventArgs)\n  fullName: System.Web.UI.WebControls.FileUpload.OnPreRender(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Web.UI.WebControls.FileUpload.PostedFile\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: PostedFile\n  nameWithType: FileUpload.PostedFile\n  fullName: System.Web.UI.WebControls.FileUpload.PostedFile\n- uid: System.Web.HttpPostedFile\n  parent: System.Web\n  isExternal: false\n  name: HttpPostedFile\n  nameWithType: HttpPostedFile\n  fullName: System.Web.HttpPostedFile\n- uid: System.Web.UI.WebControls.FileUpload.PostedFiles\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: PostedFiles\n  nameWithType: FileUpload.PostedFiles\n  fullName: System.Web.UI.WebControls.FileUpload.PostedFiles\n- uid: System.Collections.Generic.IList{System.Web.HttpPostedFile}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<HttpPostedFile>\n  nameWithType: IList<HttpPostedFile>\n  fullName: System.Collections.Generic.IList<System.Web.HttpPostedFile>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Web.HttpPostedFile>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Web.HttpPostedFile\n    name: HttpPostedFile\n    nameWithType: HttpPostedFile\n    fullName: HttpPostedFile\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: Render(HtmlTextWriter)\n  nameWithType: FileUpload.Render(HtmlTextWriter)\n  fullName: System.Web.UI.WebControls.FileUpload.Render(HtmlTextWriter)\n- uid: System.Web.UI.WebControls.FileUpload.SaveAs(System.String)\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: SaveAs(String)\n  nameWithType: FileUpload.SaveAs(String)\n  fullName: System.Web.UI.WebControls.FileUpload.SaveAs(String)\n- uid: System.Web.UI.WebControls.FileUpload.#ctor*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: FileUpload\n  nameWithType: FileUpload.FileUpload\n- uid: System.Web.UI.WebControls.FileUpload.AddAttributesToRender*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: AddAttributesToRender\n  nameWithType: FileUpload.AddAttributesToRender\n- uid: System.Web.UI.WebControls.FileUpload.AllowMultiple*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: AllowMultiple\n  nameWithType: FileUpload.AllowMultiple\n- uid: System.Web.UI.WebControls.FileUpload.FileBytes*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: FileBytes\n  nameWithType: FileUpload.FileBytes\n- uid: System.Web.UI.WebControls.FileUpload.FileContent*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: FileContent\n  nameWithType: FileUpload.FileContent\n- uid: System.Web.UI.WebControls.FileUpload.FileName*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: FileName\n  nameWithType: FileUpload.FileName\n- uid: System.Web.UI.WebControls.FileUpload.HasFile*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: HasFile\n  nameWithType: FileUpload.HasFile\n- uid: System.Web.UI.WebControls.FileUpload.HasFiles*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: HasFiles\n  nameWithType: FileUpload.HasFiles\n- uid: System.Web.UI.WebControls.FileUpload.OnPreRender*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: OnPreRender\n  nameWithType: FileUpload.OnPreRender\n- uid: System.Web.UI.WebControls.FileUpload.PostedFile*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: PostedFile\n  nameWithType: FileUpload.PostedFile\n- uid: System.Web.UI.WebControls.FileUpload.PostedFiles*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: PostedFiles\n  nameWithType: FileUpload.PostedFiles\n- uid: System.Web.UI.WebControls.FileUpload.Render*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: Render\n  nameWithType: FileUpload.Render\n- uid: System.Web.UI.WebControls.FileUpload.SaveAs*\n  parent: System.Web.UI.WebControls.FileUpload\n  isExternal: false\n  name: SaveAs\n  nameWithType: FileUpload.SaveAs\n"}