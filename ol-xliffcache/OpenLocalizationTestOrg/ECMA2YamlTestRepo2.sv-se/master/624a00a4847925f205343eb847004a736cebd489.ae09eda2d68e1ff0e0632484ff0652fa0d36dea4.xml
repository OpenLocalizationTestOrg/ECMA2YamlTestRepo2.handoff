{"nodes":[{"pos":[548,655],"content":"Defines an installer that either succeeds completely or fails and leaves the computer in its initial state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines an installer that either succeeds completely or fails and leaves the computer in its initial state.","pos":[0,107]}]},{"pos":[667,825],"content":"To run installers in a transaction, add them to the <xref:System.Configuration.Install.Installer.Installers%2A> property of this TransactedInstaller instance.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To run installers in a transaction, add them to the &lt;xref:System.Configuration.Install.Installer.Installers%2A&gt; property of this TransactedInstaller instance.","pos":[0,158],"source":"To run installers in a transaction, add them to the <xref:System.Configuration.Install.Installer.Installers%2A> property of this TransactedInstaller instance."}]},{"pos":[4965,5075],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.Install.TransactedInstaller\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Configuration.Install.TransactedInstaller\"></xref> class."},{"pos":[5761,5787],"content":"Performs the installation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs the installation.","pos":[0,26]}]},{"pos":[5799,6365],"content":"This method calls the Install method of each installer contained in the <xref:System.Configuration.Install.Installer.Installers%2A> property of this instance. The <xref:System.Collections.IDictionary> object referenced by the `savedState` parameter is updated to reflect the status of the installation after the contained installers have run. If all the Install methods succeed, the <xref:System.Configuration.Install.Installer.Commit%2A> method is called. Otherwise, the <xref:System.Configuration.Install.Installer.Rollback%2A> method is called for each installer.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method calls the Install method of each installer contained in the &lt;xref:System.Configuration.Install.Installer.Installers%2A&gt; property of this instance.","pos":[0,158],"source":"This method calls the Install method of each installer contained in the <xref:System.Configuration.Install.Installer.Installers%2A> property of this instance."},{"content":"The &lt;xref:System.Collections.IDictionary&gt; object referenced by the <ph id=\"ph1\">`savedState`</ph> parameter is updated to reflect the status of the installation after the contained installers have run.","pos":[159,342],"source":" The <xref:System.Collections.IDictionary> object referenced by the `savedState` parameter is updated to reflect the status of the installation after the contained installers have run."},{"content":"If all the Install methods succeed, the &lt;xref:System.Configuration.Install.Installer.Commit%2A&gt; method is called.","pos":[343,456],"source":" If all the Install methods succeed, the <xref:System.Configuration.Install.Installer.Commit%2A> method is called."},{"content":"Otherwise, the &lt;xref:System.Configuration.Install.Installer.Rollback%2A&gt; method is called for each installer.","pos":[457,566],"source":" Otherwise, the <xref:System.Configuration.Install.Installer.Rollback%2A> method is called for each installer."}]},{"pos":[7605,7746],"content":"An <xref:System.Collections.IDictionary> in which this method saves information needed to perform a commit, rollback, or uninstall operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IDictionary&gt; in which this method saves information needed to perform a commit, rollback, or uninstall operation.","pos":[0,141],"source":"An <xref:System.Collections.IDictionary> in which this method saves information needed to perform a commit, rollback, or uninstall operation."}]},{"pos":[7925,8027],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">savedState</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>savedState</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8106,8156],"content":"The installation failed, and is being rolled back.","needQuote":true,"needEscape":true,"nodes":[{"content":"The installation failed, and is being rolled back.","pos":[0,50]}]},{"pos":[8694,8718],"content":"Removes an installation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes an installation.","pos":[0,24]}]},{"pos":[8731,9534],"content":"Call this method to remove a previously completed installation. This Uninstall method calls the <xref:System.Configuration.Install.Installer.Uninstall%2A> method of each installer in the <xref:System.Configuration.Install.Installer.Installers%2A> property to uninstall any resources set during installation. Any exceptions during uninstallation are ignored.      > [!NOTE] >  Although the <xref:System.Configuration.Install.Installer.Install%2A> and <xref:System.Configuration.Install.Installer.Commit%2A> methods save the state of the computer after the installations, the file containing the <xref:System.Collections.IDictionary> from the `savedState` parameter might have been deleted at some point after the installation was complete. If the file is deleted, the `savedState` parameter is `null`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method to remove a previously completed installation.","pos":[0,63]},{"content":"This Uninstall method calls the &lt;xref:System.Configuration.Install.Installer.Uninstall%2A&gt; method of each installer in the &lt;xref:System.Configuration.Install.Installer.Installers%2A&gt; property to uninstall any resources set during installation.","pos":[64,307],"source":" This Uninstall method calls the <xref:System.Configuration.Install.Installer.Uninstall%2A> method of each installer in the <xref:System.Configuration.Install.Installer.Installers%2A> property to uninstall any resources set during installation."},{"content":"Any exceptions during uninstallation are ignored.","pos":[308,357]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Although the &lt;xref:System.Configuration.Install.Installer.Install%2A&gt; and &lt;xref:System.Configuration.Install.Installer.Commit%2A&gt; methods save the state of the computer after the installations, the file containing the &lt;xref:System.Collections.IDictionary&gt; from the <ph id=\"ph2\">`savedState`</ph> parameter might have been deleted at some point after the installation was complete.","pos":[363,738],"source":"      > [!NOTE] >  Although the <xref:System.Configuration.Install.Installer.Install%2A> and <xref:System.Configuration.Install.Installer.Commit%2A> methods save the state of the computer after the installations, the file containing the <xref:System.Collections.IDictionary> from the `savedState` parameter might have been deleted at some point after the installation was complete."},{"content":"If the file is deleted, the <ph id=\"ph1\">`savedState`</ph> parameter is <ph id=\"ph2\">`null`</ph>.","pos":[739,800],"source":" If the file is deleted, the `savedState` parameter is `null`."}]},{"pos":[10843,10957],"content":"An <xref:System.Collections.IDictionary> that contains the state of the computer after the installation completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IDictionary&gt; that contains the state of the computer after the installation completed.","pos":[0,114],"source":"An <xref:System.Collections.IDictionary> that contains the state of the computer after the installation completed."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.Install.TransactedInstaller\n  id: TransactedInstaller\n  children:\n  - System.Configuration.Install.TransactedInstaller.#ctor\n  - System.Configuration.Install.TransactedInstaller.Install(System.Collections.IDictionary)\n  - System.Configuration.Install.TransactedInstaller.Uninstall(System.Collections.IDictionary)\n  langs:\n  - csharp\n  name: TransactedInstaller\n  nameWithType: TransactedInstaller\n  fullName: System.Configuration.Install.TransactedInstaller\n  type: Class\n  summary: Defines an installer that either succeeds completely or fails and leaves the computer in its initial state.\n  remarks: To run installers in a transaction, add them to the <xref:System.Configuration.Install.Installer.Installers%2A> property of this TransactedInstaller instance.\n  example:\n  - \"The following example demonstrates the <xref:System.Configuration.Install.TransactedInstaller.%23ctor%2A>, <xref:System.Configuration.Install.TransactedInstaller.Install%2A> and <xref:System.Configuration.Install.TransactedInstaller.Uninstall%2A> methods of the TransactedInstaller class.  \\n  \\n This example provides an implementation similar to that of [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md). It installs assemblies with the options preceding that particular assembly. If an option is not specified for an assembly, the previous assembly's options are used if there is a previous assembly in the list. If either the \\\"/u\\\" or \\\"/uninstall\\\" option is specified, the assemblies are uninstalled. If the \\\"/?\\\" or \\\"/help\\\" option is provided, the help information is displayed to the console.  \\n  \\n [!code-cpp[TransactedInstaller#1](~/add/codesnippet/cpp/t-system.configuration.i_8_1.cpp)]\\n [!code-vb[TransactedInstaller#1](~/add/codesnippet/visualbasic/t-system.configuration.i_8_1.vb)]\\n [!code-cs[TransactedInstaller#1](~/add/codesnippet/csharp/t-system.configuration.i_8_1.cs)]\"\n  syntax:\n    content: 'public class TransactedInstaller : System.Configuration.Install.Installer'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Configuration.Install.Installer\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Configuration.Install.Installer.AfterInstall\n  - System.Configuration.Install.Installer.AfterRollback\n  - System.Configuration.Install.Installer.AfterUninstall\n  - System.Configuration.Install.Installer.BeforeInstall\n  - System.Configuration.Install.Installer.BeforeRollback\n  - System.Configuration.Install.Installer.BeforeUninstall\n  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Committed\n  - System.Configuration.Install.Installer.Committing\n  - System.Configuration.Install.Installer.Context\n  - System.Configuration.Install.Installer.HelpText\n  - System.Configuration.Install.Installer.Installers\n  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)\n  - System.Configuration.Install.Installer.Parent\n  - System.Configuration.Install.Installer.Rollback(System.Collections.IDictionary)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Configuration.Install.TransactedInstaller.#ctor\n  id: '#ctor'\n  parent: System.Configuration.Install.TransactedInstaller\n  langs:\n  - csharp\n  name: TransactedInstaller()\n  nameWithType: TransactedInstaller.TransactedInstaller()\n  fullName: System.Configuration.Install.TransactedInstaller.TransactedInstaller()\n  type: Constructor\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Configuration.Install\n  summary: Initializes a new instance of the <xref href=\"System.Configuration.Install.TransactedInstaller\"></xref> class.\n  syntax:\n    content: public TransactedInstaller ();\n    parameters: []\n  overload: System.Configuration.Install.TransactedInstaller.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.Install.TransactedInstaller.Install(System.Collections.IDictionary)\n  id: Install(System.Collections.IDictionary)\n  parent: System.Configuration.Install.TransactedInstaller\n  langs:\n  - csharp\n  name: Install(IDictionary)\n  nameWithType: TransactedInstaller.Install(IDictionary)\n  fullName: System.Configuration.Install.TransactedInstaller.Install(IDictionary)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Configuration.Install\n  summary: Performs the installation.\n  remarks: This method calls the Install method of each installer contained in the <xref:System.Configuration.Install.Installer.Installers%2A> property of this instance. The <xref:System.Collections.IDictionary> object referenced by the `savedState` parameter is updated to reflect the status of the installation after the contained installers have run. If all the Install methods succeed, the <xref:System.Configuration.Install.Installer.Commit%2A> method is called. Otherwise, the <xref:System.Configuration.Install.Installer.Rollback%2A> method is called for each installer.\n  example:\n  - \"The following example demonstrates the <xref:System.Configuration.Install.TransactedInstaller.%23ctor%2A>, Install and <xref:System.Configuration.Install.TransactedInstaller.Uninstall%2A> methods of the <xref:System.Configuration.Install.TransactedInstaller> class.  \\n  \\n This example provides an implementation similar to that of InstallUtil.exe. It installs assemblies with the options preceding that particular assembly. If an option is not specified for an assembly, the previous assemblies options are taken if there is a previous assembly in the list. If the '/u' or '/uninstall' option is specified then the assemblies are uninstalled. If the '/?' or '/help' option is provided then the help information is printed to the console.  \\n  \\n [!code-cpp[TransactedInstaller#1](~/add/codesnippet/cpp/4da9ed08-6dc0-426b-afe8-_1.cpp)]\\n [!code-vb[TransactedInstaller#1](~/add/codesnippet/visualbasic/4da9ed08-6dc0-426b-afe8-_1.vb)]\\n [!code-cs[TransactedInstaller#1](~/add/codesnippet/csharp/4da9ed08-6dc0-426b-afe8-_1.cs)]\"\n  syntax:\n    content: public override void Install (System.Collections.IDictionary savedState);\n    parameters:\n    - id: savedState\n      type: System.Collections.IDictionary\n      description: An <xref:System.Collections.IDictionary> in which this method saves information needed to perform a commit, rollback, or uninstall operation.\n  overload: System.Configuration.Install.TransactedInstaller.Install*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>savedState</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: The installation failed, and is being rolled back.\n  platform:\n  - net462\n- uid: System.Configuration.Install.TransactedInstaller.Uninstall(System.Collections.IDictionary)\n  id: Uninstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.TransactedInstaller\n  langs:\n  - csharp\n  name: Uninstall(IDictionary)\n  nameWithType: TransactedInstaller.Uninstall(IDictionary)\n  fullName: System.Configuration.Install.TransactedInstaller.Uninstall(IDictionary)\n  type: Method\n  assemblies:\n  - System.Configuration.Install\n  namespace: System.Configuration.Install\n  summary: Removes an installation.\n  remarks: \"Call this method to remove a previously completed installation. This Uninstall method calls the <xref:System.Configuration.Install.Installer.Uninstall%2A> method of each installer in the <xref:System.Configuration.Install.Installer.Installers%2A> property to uninstall any resources set during installation. Any exceptions during uninstallation are ignored.  \\n  \\n> [!NOTE]\\n>  Although the <xref:System.Configuration.Install.Installer.Install%2A> and <xref:System.Configuration.Install.Installer.Commit%2A> methods save the state of the computer after the installations, the file containing the <xref:System.Collections.IDictionary> from the `savedState` parameter might have been deleted at some point after the installation was complete. If the file is deleted, the `savedState` parameter is `null`.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Configuration.Install.TransactedInstaller.%23ctor%2A>, <xref:System.Configuration.Install.TransactedInstaller.Install%2A> and Uninstall methods of the <xref:System.Configuration.Install.TransactedInstaller> class.  \\n  \\n This example provides an implementation similar to that of [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md). It installs assemblies with the options preceding that particular assembly. If an option is not specified for an assembly, the previous assembly's options are used if there is a previous assembly in the list. If either the \\\"/u\\\" or \\\"/uninstall\\\" option is specified, the assemblies are uninstalled. If the \\\"/?\\\" or \\\"/help\\\" option is provided, the help information is displayed to the console.  \\n  \\n [!code-cpp[TransactedInstaller#1](~/add/codesnippet/cpp/cbb5706c-5d1b-4a61-92b9-_1.cpp)]\\n [!code-vb[TransactedInstaller#1](~/add/codesnippet/visualbasic/cbb5706c-5d1b-4a61-92b9-_1.vb)]\\n [!code-cs[TransactedInstaller#1](~/add/codesnippet/csharp/cbb5706c-5d1b-4a61-92b9-_1.cs)]\"\n  syntax:\n    content: public override void Uninstall (System.Collections.IDictionary savedState);\n    parameters:\n    - id: savedState\n      type: System.Collections.IDictionary\n      description: An <xref:System.Collections.IDictionary> that contains the state of the computer after the installation completed.\n  overload: System.Configuration.Install.TransactedInstaller.Uninstall*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.Install.Installer\n  isExternal: false\n  name: System.Configuration.Install.Installer\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Exception\n  isExternal: true\n  name: System.Exception\n- uid: System.Configuration.Install.TransactedInstaller.#ctor\n  parent: System.Configuration.Install.TransactedInstaller\n  isExternal: false\n  name: TransactedInstaller()\n  nameWithType: TransactedInstaller.TransactedInstaller()\n  fullName: System.Configuration.Install.TransactedInstaller.TransactedInstaller()\n- uid: System.Configuration.Install.TransactedInstaller.Install(System.Collections.IDictionary)\n  parent: System.Configuration.Install.TransactedInstaller\n  isExternal: false\n  name: Install(IDictionary)\n  nameWithType: TransactedInstaller.Install(IDictionary)\n  fullName: System.Configuration.Install.TransactedInstaller.Install(IDictionary)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Configuration.Install.TransactedInstaller.Uninstall(System.Collections.IDictionary)\n  parent: System.Configuration.Install.TransactedInstaller\n  isExternal: false\n  name: Uninstall(IDictionary)\n  nameWithType: TransactedInstaller.Uninstall(IDictionary)\n  fullName: System.Configuration.Install.TransactedInstaller.Uninstall(IDictionary)\n- uid: System.Configuration.Install.TransactedInstaller.#ctor*\n  parent: System.Configuration.Install.TransactedInstaller\n  isExternal: false\n  name: TransactedInstaller\n  nameWithType: TransactedInstaller.TransactedInstaller\n- uid: System.Configuration.Install.TransactedInstaller.Install*\n  parent: System.Configuration.Install.TransactedInstaller\n  isExternal: false\n  name: Install\n  nameWithType: TransactedInstaller.Install\n- uid: System.Configuration.Install.TransactedInstaller.Uninstall*\n  parent: System.Configuration.Install.TransactedInstaller\n  isExternal: false\n  name: Uninstall\n  nameWithType: TransactedInstaller.Uninstall\n"}