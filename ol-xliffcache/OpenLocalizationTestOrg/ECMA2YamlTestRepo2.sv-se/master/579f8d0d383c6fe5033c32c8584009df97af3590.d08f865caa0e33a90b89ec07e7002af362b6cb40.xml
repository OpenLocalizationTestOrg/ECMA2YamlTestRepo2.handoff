{"nodes":[{"pos":[647,744],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FormView.ItemUpdating\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Web.UI.WebControls.FormView.ItemUpdating\"></xref> event."},{"pos":[757,2677],"content":"The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> event when an Update button (a button with its `CommandName` property set to \"Update\") within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding or validating the values of a record before updating it in the data source, whenever this event occurs.       A FormViewUpdateEventArgs object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <xref:System.Web.UI.WebControls.FormView> control and to indicate whether the update operation should be canceled. To determine the value of the command argument, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A> property. To cancel the update operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`. If you need to access the original key field values for the record being updated, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property. Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       For a list of initial property values for an instance of the FormViewUpdateEventArgs class, see the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.%23ctor%2A> constructor.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.FormView&gt; control raises the &lt;xref:System.Web.UI.WebControls.FormView.ItemUpdating&gt; event when an Update button (a button with its <ph id=\"ph1\">`CommandName`</ph> property set to \"Update\") within the control is clicked, but before the &lt;xref:System.Web.UI.WebControls.FormView&gt; control updates the record.","pos":[0,322],"source":"The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> event when an Update button (a button with its `CommandName` property set to \"Update\") within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control updates the record."},{"content":"This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding or validating the values of a record before updating it in the data source, whenever this event occurs.","pos":[323,532]},{"content":"A FormViewUpdateEventArgs object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the &lt;xref:System.Web.UI.WebControls.FormView&gt; control and to indicate whether the update operation should be canceled.","pos":[539,810],"source":"       A FormViewUpdateEventArgs object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <xref:System.Web.UI.WebControls.FormView> control and to indicate whether the update operation should be canceled."},{"content":"To determine the value of the command argument, use the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A&gt; property.","pos":[811,952],"source":" To determine the value of the command argument, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A> property."},{"content":"To cancel the update operation, set the &lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[953,1067],"source":" To cancel the update operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`."},{"content":"If you need to access the original key field values for the record being updated, use the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A&gt; property.","pos":[1068,1232],"source":" If you need to access the original key field values for the record being updated, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property."},{"content":"The original non-key field values can be accessed by using the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A&gt; property.","pos":[1233,1375],"source":" The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property."},{"content":"Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A&gt; property.","pos":[1376,1576],"source":" Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[1583,1725],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."},{"content":"For a list of initial property values for an instance of the FormViewUpdateEventArgs class, see the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.%23ctor%2A&gt; constructor.","pos":[1732,1912],"source":"       For a list of initial property values for an instance of the FormViewUpdateEventArgs class, see the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.%23ctor%2A> constructor."}]},{"pos":[3855,3966],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FormViewUpdateEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.FormViewUpdateEventArgs\"></xref> class."},{"pos":[3979,4545],"content":"Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> class.       The following table shows the initial property value for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> class.      |Property|Initial Value|   |--------------|-------------------|   |<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A>|The value of the `commandArgument` parameter.|      > [!NOTE] >  This constructor is used primarily by control developers when raising events.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this constructor to initialize a new instance of the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs&gt; class.","pos":[0,120],"source":"Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> class."},{"content":"The following table shows the initial property value for an instance of the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs&gt; class.","pos":[127,266],"source":"       The following table shows the initial property value for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> class."},{"content":"|Property|Initial Value|   |--------------|-------------------|   |&lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A&gt;|The value of the <ph id=\"ph1\">`commandArgument`</ph> parameter.|      &gt; <ph id=\"ph2\">[!NOTE]</ph> &gt;  This constructor is used primarily by control developers when raising events.","pos":[272,557],"source":"      |Property|Initial Value|   |--------------|-------------------|   |<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A>|The value of the `commandArgument` parameter.|      > [!NOTE] >  This constructor is used primarily by control developers when raising events."}]},{"pos":[4714,4821],"content":"An optional command argument passed to the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FormView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"An optional command argument passed to the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control."},{"pos":[5360,5489],"content":"Gets the command argument for the update operation passed to the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FormView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets the command argument for the update operation passed to the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control."},{"pos":[5501,6117],"content":"When you create an Update button for one of the templates in a <xref:System.Web.UI.WebControls.FormView> control, you can optionally specify a command argument for the button by using the <xref:System.Web.UI.WebControls.IButtonControl.CommandArgument%2A?displayProperty=fullName> property. The command argument usually contains any optional information you want to accompany the update command, such as the value for the key field. The <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A> property is provided as a convenient way to determine the value of the Update button's command argument.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you create an Update button for one of the templates in a <xref:System.Web.UI.WebControls.FormView> control, you can optionally specify a command argument for the button by using the <xref:System.Web.UI.WebControls.IButtonControl.CommandArgument%2A?displayProperty=fullName> property. The command argument usually contains any optional information you want to accompany the update command, such as the value for the key field. The <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A> property is provided as a convenient way to determine the value of the Update button's command argument.","pos":[0,616],"nodes":[{"content":"When you create an Update button for one of the templates in a &lt;xref:System.Web.UI.WebControls.FormView&gt; control, you can optionally specify a command argument for the button by using the &lt;xref:System.Web.UI.WebControls.IButtonControl.CommandArgument%2A?displayProperty=fullName&gt; property.","pos":[0,289],"source":"When you create an Update button for one of the templates in a <xref:System.Web.UI.WebControls.FormView> control, you can optionally specify a command argument for the button by using the <xref:System.Web.UI.WebControls.IButtonControl.CommandArgument%2A?displayProperty=fullName> property."},{"content":"The command argument usually contains any optional information you want to accompany the update command, such as the value for the key field.","pos":[290,431]},{"content":"The &lt;xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A&gt; property is provided as a convenient way to determine the value of the Update button's command argument.","pos":[432,616],"source":" The <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A> property is provided as a convenient way to determine the value of the Update button's command argument."}]}]},{"pos":[6237,6361],"content":"The command argument for the update operation passed to the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.FormView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"The command argument for the update operation passed to the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control."},{"pos":[6855,6952],"content":"Gets a dictionary that contains the original key field name/value pairs for the record to update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a dictionary that contains the original key field name/value pairs for the record to update.","pos":[0,97]}]},{"pos":[6965,8637],"content":"The Keys property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control. Use the Keys property to access the original values of the key fields for the record to update. For example, you can use these values to keep a log of updated records.      > [!NOTE] >  If you allow the user to update the values of the key fields, the Keys property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.       The Keys property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Keys property contains the original values of the key fields listed in the &lt;xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A&gt; property of a &lt;xref:System.Web.UI.WebControls.FormView&gt; control.","pos":[0,201],"source":"The Keys property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control."},{"content":"Use the Keys property to access the original values of the key fields for the record to update.","pos":[202,297]},{"content":"For example, you can use these values to keep a log of updated records.","pos":[298,369]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you allow the user to update the values of the key fields, the Keys property contains the original key field values.","pos":[375,507],"source":"      > [!NOTE] >  If you allow the user to update the values of the key fields, the Keys property contains the original key field values."},{"content":"The updated values are stored in the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A&gt; property.","pos":[508,624],"source":" The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property."},{"content":"The Keys property returns an &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object that implements the &lt;xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName&gt; interface.","pos":[631,835],"source":"       The Keys property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface."},{"content":"The &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object contains &lt;xref:System.Collections.DictionaryEntry?displayProperty=fullName&gt; objects that represent the fields of the updated record.","pos":[836,1035],"source":" The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record."},{"content":"To access the field names, use the &lt;xref:System.Collections.Specialized.OrderedDictionary.Keys%2A&gt; property of the &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object.","pos":[1036,1214],"source":" To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object."},{"content":"Similarly, you can access the field values by using the &lt;xref:System.Collections.Specialized.OrderedDictionary.Values%2A&gt; property.","pos":[1215,1346],"source":" Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  As a shortcut, you can also use the indexer of the &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object to access the field values directly.","pos":[1352,1515],"source":"      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly."},{"content":"Data source controls that rely on the field order (such as &lt;xref:System.Web.UI.WebControls.AccessDataSource&gt;) can access field values only by index.","pos":[1516,1664],"source":" Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."}]},{"pos":[9189,9358],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a dictionary of the original key field name/value pairs for the record to update.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original key field name/value pairs for the record to update."},{"pos":[9866,9954],"content":"Gets a dictionary that contains the new field name/value pairs for the record to update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a dictionary that contains the new field name/value pairs for the record to update.","pos":[0,88]}]},{"pos":[9967,11430],"content":"Use the NewValues property to access the new field values for the record to update. For example, you can use these values to keep a log of updated records.      > [!NOTE] >  If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the NewValues property.       The NewValues property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the NewValues property to access the new field values for the record to update.","pos":[0,83]},{"content":"For example, you can use these values to keep a log of updated records.","pos":[84,155]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you allow the user to update the values of the key fields, the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A&gt; property contains the original key field values.","pos":[161,353],"source":"      > [!NOTE] >  If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values."},{"content":"The updated values are stored in the NewValues property.","pos":[354,410]},{"content":"The NewValues property returns an &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object that implements the &lt;xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName&gt; interface.","pos":[417,626],"source":"       The NewValues property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface."},{"content":"The &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object contains &lt;xref:System.Collections.DictionaryEntry?displayProperty=fullName&gt; objects that represent the fields of the updated record.","pos":[627,826],"source":" The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record."},{"content":"To access the field names, use the &lt;xref:System.Collections.Specialized.OrderedDictionary.Keys%2A&gt; property of the &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object.","pos":[827,1005],"source":" To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object."},{"content":"Similarly, you can access the field values by using the &lt;xref:System.Collections.Specialized.OrderedDictionary.Values%2A&gt; property.","pos":[1006,1137],"source":" Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  As a shortcut, you can also use the indexer of the &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object to access the field values directly.","pos":[1143,1306],"source":"      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly."},{"content":"Data source controls that rely on the field order (such as &lt;xref:System.Web.UI.WebControls.AccessDataSource&gt;) can access field values only by index.","pos":[1307,1455],"source":" Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."}]},{"pos":[12026,12186],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a dictionary of the new field name/value pairs for the record to update.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the new field name/value pairs for the record to update."},{"pos":[12699,12800],"content":"Gets a dictionary that contains the original non-key field name/value pairs for the record to update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a dictionary that contains the original non-key field name/value pairs for the record to update.","pos":[0,101]}]},{"pos":[12813,15047],"content":"Use the OldValues property to access the original non-key field values for the updated record. For example, you can use these values to keep a log of updated records. Some data source controls, such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, support conflict detection (optimistic concurrency checking). When the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property of one of these controls is set to `ConflictOptions.CompareAllValues`, the original values of the record are compared against the values in the data source before an update operation is performed. If a record has been modified by another user concurrently, the record is not updated.      > [!NOTE] >  The OldValues property does not contain key fields. If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.       The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the OldValues property to access the original non-key field values for the updated record.","pos":[0,94]},{"content":"For example, you can use these values to keep a log of updated records.","pos":[95,166]},{"content":"Some data source controls, such as the &lt;xref:System.Web.UI.WebControls.SqlDataSource&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; controls, support conflict detection (optimistic concurrency checking).","pos":[167,378],"source":" Some data source controls, such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, support conflict detection (optimistic concurrency checking)."},{"content":"When the &lt;xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A&gt; property of one of these controls is set to <ph id=\"ph1\">`ConflictOptions.CompareAllValues`</ph>, the original values of the record are compared against the values in the data source before an update operation is performed.","pos":[379,661],"source":" When the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property of one of these controls is set to `ConflictOptions.CompareAllValues`, the original values of the record are compared against the values in the data source before an update operation is performed."},{"content":"If a record has been modified by another user concurrently, the record is not updated.","pos":[662,748]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The OldValues property does not contain key fields.","pos":[754,818],"source":"      > [!NOTE] >  The OldValues property does not contain key fields."},{"content":"If you allow the user to update the values of the key fields, the original key field values are stored in the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A&gt; property.","pos":[819,1003],"source":" If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property."},{"content":"The updated values are stored in the &lt;xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A&gt; property.","pos":[1004,1120],"source":" The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property."},{"content":"The &lt;xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A&gt; property returns an &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object that implements the &lt;xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName&gt; interface.","pos":[1127,1397],"source":"       The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface."},{"content":"The &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object contains &lt;xref:System.Collections.DictionaryEntry?displayProperty=fullName&gt; objects that represent the fields of the updated record.","pos":[1398,1597],"source":" The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record."},{"content":"To access the field names, use the &lt;xref:System.Collections.Specialized.OrderedDictionary.Keys%2A&gt; property of the &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object.","pos":[1598,1776],"source":" To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object."},{"content":"Similarly, you can access the field values by using the &lt;xref:System.Collections.Specialized.OrderedDictionary.Values%2A&gt; property.","pos":[1777,1908],"source":" Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  As a shortcut, you can also use the indexer of the &lt;xref:System.Collections.Specialized.OrderedDictionary&gt; object to access the field values directly.","pos":[1914,2077],"source":"      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly."},{"content":"Data source controls that rely on the field order (such as &lt;xref:System.Web.UI.WebControls.AccessDataSource&gt;) can access field values only by index.","pos":[2078,2226],"source":" Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."}]},{"pos":[15624,15797],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.IOrderedDictionary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a dictionary of the original non-key field name/value pairs for the record to update.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original non-key field name/value pairs for the record to update."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  id: FormViewUpdateEventArgs\n  children:\n  - System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor(System.Object)\n  - System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument\n  - System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys\n  - System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues\n  - System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues\n  langs:\n  - csharp\n  name: FormViewUpdateEventArgs\n  nameWithType: FormViewUpdateEventArgs\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Web.UI.WebControls.FormView.ItemUpdating\"></xref> event.\n  remarks: \"The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> event when an Update button (a button with its `CommandName` property set to \\\"Update\\\") within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding or validating the values of a record before updating it in the data source, whenever this event occurs.  \\n  \\n A FormViewUpdateEventArgs object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <xref:System.Web.UI.WebControls.FormView> control and to indicate whether the update operation should be canceled. To determine the value of the command argument, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A> property. To cancel the update operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`. If you need to access the original key field values for the record being updated, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property. Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  \\n  \\n For a list of initial property values for an instance of the FormViewUpdateEventArgs class, see the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.%23ctor%2A> constructor.\"\n  example:\n  - \"The following example demonstrates how to use the FormViewUpdateEventArgs object passed to the event-handling method for the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> event to validate the values entered by the user.  \\n  \\n [!code-cs[FormViewUpdateEventArgs#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_164_1.aspx)]\\n [!code-vb[FormViewUpdateEventArgs#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_164_1.aspx)]\"\n  syntax:\n    content: 'public class FormViewUpdateEventArgs : System.ComponentModel.CancelEventArgs'\n  inheritance:\n  - System.ComponentModel.CancelEventArgs\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  langs:\n  - csharp\n  name: FormViewUpdateEventArgs(Object)\n  nameWithType: FormViewUpdateEventArgs.FormViewUpdateEventArgs(Object)\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.FormViewUpdateEventArgs(Object)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.FormViewUpdateEventArgs\"></xref> class.\n  remarks: \"Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> class.  \\n  \\n The following table shows the initial property value for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> class.  \\n  \\n|Property|Initial Value|  \\n|--------------|-------------------|  \\n|<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A>|The value of the `commandArgument` parameter.|  \\n  \\n> [!NOTE]\\n>  This constructor is used primarily by control developers when raising events.\"\n  syntax:\n    content: public FormViewUpdateEventArgs (object commandArgument);\n    parameters:\n    - id: commandArgument\n      type: System.Object\n      description: An optional command argument passed to the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control.\n  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument\n  id: CommandArgument\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  langs:\n  - csharp\n  name: CommandArgument\n  nameWithType: FormViewUpdateEventArgs.CommandArgument\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the command argument for the update operation passed to the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control.\n  remarks: When you create an Update button for one of the templates in a <xref:System.Web.UI.WebControls.FormView> control, you can optionally specify a command argument for the button by using the <xref:System.Web.UI.WebControls.IButtonControl.CommandArgument%2A?displayProperty=fullName> property. The command argument usually contains any optional information you want to accompany the update command, such as the value for the key field. The <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A> property is provided as a convenient way to determine the value of the Update button's command argument.\n  syntax:\n    content: public object CommandArgument { get; }\n    return:\n      type: System.Object\n      description: The command argument for the update operation passed to the <xref href=\"System.Web.UI.WebControls.FormView\"></xref> control.\n  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys\n  id: Keys\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: FormViewUpdateEventArgs.Keys\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a dictionary that contains the original key field name/value pairs for the record to update.\n  remarks: \"The Keys property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control. Use the Keys property to access the original values of the key fields for the record to update. For example, you can use these values to keep a log of updated records.  \\n  \\n> [!NOTE]\\n>  If you allow the user to update the values of the key fields, the Keys property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \\n  \\n The Keys property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \\n  \\n> [!NOTE]\\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.\"\n  example:\n  - \"The following example demonstrates how to use the Keys property to access the value of the key field for the record being updated.  \\n  \\n [!code-cs[FormViewUpdateEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_878_1.aspx)]\\n [!code-vb[FormViewUpdateEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_878_1.aspx)]\"\n  syntax:\n    content: public System.Collections.Specialized.IOrderedDictionary Keys { get; }\n    return:\n      type: System.Collections.Specialized.IOrderedDictionary\n      description: An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original key field name/value pairs for the record to update.\n  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues\n  id: NewValues\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  langs:\n  - csharp\n  name: NewValues\n  nameWithType: FormViewUpdateEventArgs.NewValues\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a dictionary that contains the new field name/value pairs for the record to update.\n  remarks: \"Use the NewValues property to access the new field values for the record to update. For example, you can use these values to keep a log of updated records.  \\n  \\n> [!NOTE]\\n>  If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the NewValues property.  \\n  \\n The NewValues property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \\n  \\n> [!NOTE]\\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.\"\n  example:\n  - \"The following example demonstrates how to use the NewValues property to access the new values entered by the user for the non-key fields of the record being updated.  \\n  \\n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1083_1.aspx)]\\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1083_1.aspx)]\"\n  syntax:\n    content: public System.Collections.Specialized.IOrderedDictionary NewValues { get; }\n    return:\n      type: System.Collections.Specialized.IOrderedDictionary\n      description: An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the new field name/value pairs for the record to update.\n  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues\n  id: OldValues\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  langs:\n  - csharp\n  name: OldValues\n  nameWithType: FormViewUpdateEventArgs.OldValues\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a dictionary that contains the original non-key field name/value pairs for the record to update.\n  remarks: \"Use the OldValues property to access the original non-key field values for the updated record. For example, you can use these values to keep a log of updated records. Some data source controls, such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, support conflict detection (optimistic concurrency checking). When the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property of one of these controls is set to `ConflictOptions.CompareAllValues`, the original values of the record are compared against the values in the data source before an update operation is performed. If a record has been modified by another user concurrently, the record is not updated.  \\n  \\n> [!NOTE]\\n>  The OldValues property does not contain key fields. If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.  \\n  \\n The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.  \\n  \\n> [!NOTE]\\n>  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index.\"\n  example:\n  - \"The following example demonstrates how to use the OldValues property to access the original values of the non-key fields for the record being updated.  \\n  \\n [!code-cs[FormViewUpdateEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_277_1.aspx)]\\n [!code-vb[FormViewUpdateEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_277_1.aspx)]\"\n  syntax:\n    content: public System.Collections.Specialized.IOrderedDictionary OldValues { get; }\n    return:\n      type: System.Collections.Specialized.IOrderedDictionary\n      description: An <xref href=\"System.Collections.Specialized.IOrderedDictionary\"></xref> that contains a dictionary of the original non-key field name/value pairs for the record to update.\n  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.CancelEventArgs\n  isExternal: false\n  name: System.ComponentModel.CancelEventArgs\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor(System.Object)\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: FormViewUpdateEventArgs(Object)\n  nameWithType: FormViewUpdateEventArgs.FormViewUpdateEventArgs(Object)\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.FormViewUpdateEventArgs(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: CommandArgument\n  nameWithType: FormViewUpdateEventArgs.CommandArgument\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: Keys\n  nameWithType: FormViewUpdateEventArgs.Keys\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys\n- uid: System.Collections.Specialized.IOrderedDictionary\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: IOrderedDictionary\n  nameWithType: IOrderedDictionary\n  fullName: System.Collections.Specialized.IOrderedDictionary\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: NewValues\n  nameWithType: FormViewUpdateEventArgs.NewValues\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: OldValues\n  nameWithType: FormViewUpdateEventArgs.OldValues\n  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor*\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: FormViewUpdateEventArgs\n  nameWithType: FormViewUpdateEventArgs.FormViewUpdateEventArgs\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument*\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: CommandArgument\n  nameWithType: FormViewUpdateEventArgs.CommandArgument\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys*\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: Keys\n  nameWithType: FormViewUpdateEventArgs.Keys\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues*\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: NewValues\n  nameWithType: FormViewUpdateEventArgs.NewValues\n- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues*\n  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs\n  isExternal: false\n  name: OldValues\n  nameWithType: FormViewUpdateEventArgs.OldValues\n"}