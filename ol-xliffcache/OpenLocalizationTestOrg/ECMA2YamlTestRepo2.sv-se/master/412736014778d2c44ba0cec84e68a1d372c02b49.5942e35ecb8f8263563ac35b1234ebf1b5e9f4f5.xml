{"nodes":[{"pos":[627,765],"content":"Contains properties that specify how an application should behave relative to WPF features that are in the PresentationFramework assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains properties that specify how an application should behave relative to WPF features that are in the PresentationFramework assembly.","pos":[0,138]}]},{"pos":[1535,1807],"content":"Gets or sets a value that indicates whether the application should use the &lt;xref:System.Windows.SystemColors.InactiveSelectionHighlightBrush<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Windows.SystemColors.InactiveSelectionHighlightTextBrush<ept id=\"p1\">*</ept>&gt; properties for the colors of inactive selected items.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether the application should use the <xref:System.Windows.SystemColors.InactiveSelectionHighlightBrush*> and <xref:System.Windows.SystemColors.InactiveSelectionHighlightTextBrush*> properties for the colors of inactive selected items."},{"pos":[1819,2269],"content":"The default value of this property depends which version of WPF that your app targets.  If your app targets WPF 4.0 or earlier, the default is `false`.  If your app targets WPF 4.5, the default is `true`.  If you use this property to change the behavior of WPF, you must change the property’s value early in the app’s lifetime, such in the constructor of the class that inherits from Application.  After the value is read, you cannot change it again.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default value of this property depends which version of WPF that your app targets.","pos":[0,86]},{"content":"If your app targets WPF 4.0 or earlier, the default is <ph id=\"ph1\">`false`</ph>.","pos":[88,151],"source":"  If your app targets WPF 4.0 or earlier, the default is `false`."},{"content":"If your app targets WPF 4.5, the default is <ph id=\"ph1\">`true`</ph>.","pos":[153,204],"source":"  If your app targets WPF 4.5, the default is `true`."},{"content":"If you use this property to change the behavior of WPF, you must change the property’s value early in the app’s lifetime, such in the constructor of the class that inherits from Application.","pos":[206,396]},{"content":"After the value is read, you cannot change it again.","pos":[398,450]}]},{"pos":[2432,2798],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the application should use the &lt;xref:System.Windows.SystemColors.InactiveSelectionHighlightBrush<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.SystemColors.InactiveSelectionHighlightTextBrush<ept id=\"p2\">*</ept>&gt; properties for the colors of inactive selected items; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the application should use the <xref:System.Windows.SystemColors.InactiveSelectionHighlightBrush*> and <xref:System.Windows.SystemColors.InactiveSelectionHighlightTextBrush*> properties for the colors of inactive selected items; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>"},{"pos":[3540,3776],"content":"Gets or sets a value that indicates whether a data-bound <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.TextBox\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> should display a string that is identical to the value of the source its &lt;xref:System.Windows.Controls.TextBox.Text*&gt; property","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether a data-bound <xref href=\"System.Windows.Controls.TextBox\"></xref> should display a string that is identical to the value of the source its <xref:System.Windows.Controls.TextBox.Text*> property"},{"pos":[3788,4238],"content":"The default value of this property depends which version of WPF that your app targets.  If your app targets WPF 4.0 or earlier, the default is `false`.  If your app targets WPF 4.5, the default is `true`.  If you use this property to change the behavior of WPF, you must change the property’s value early in the app’s lifetime, such in the constructor of the class that inherits from Application.  After the value is read, you cannot change it again.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default value of this property depends which version of WPF that your app targets.","pos":[0,86]},{"content":"If your app targets WPF 4.0 or earlier, the default is <ph id=\"ph1\">`false`</ph>.","pos":[88,151],"source":"  If your app targets WPF 4.0 or earlier, the default is `false`."},{"content":"If your app targets WPF 4.5, the default is <ph id=\"ph1\">`true`</ph>.","pos":[153,204],"source":"  If your app targets WPF 4.5, the default is `true`."},{"content":"If you use this property to change the behavior of WPF, you must change the property’s value early in the app’s lifetime, such in the constructor of the class that inherits from Application.","pos":[206,396]},{"content":"After the value is read, you cannot change it again.","pos":[398,450]}]},{"pos":[4400,4732],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a data-bound <bpt id=\"p2\">&lt;xref href=\"System.Windows.Controls.TextBox\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> should display a string that is identical to the value of the source its &lt;xref:System.Windows.Controls.TextBox.Text*&gt; property; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a data-bound <xref href=\"System.Windows.Controls.TextBox\"></xref> should display a string that is identical to the value of the source its <xref:System.Windows.Controls.TextBox.Text*> property; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5388,5628],"content":"Gets or sets a value that indicates whether a failed copy or cut operation in a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.Primitives.TextBoxBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance results in a <bpt id=\"p2\">&lt;xref href=\"System.Runtime.InteropServices.ExternalException\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether a failed copy or cut operation in a <xref href=\"System.Windows.Controls.Primitives.TextBoxBase\"></xref> instance results in a <xref href=\"System.Runtime.InteropServices.ExternalException\"></xref>."},{"pos":[5641,6962],"content":"If a clipboard operation fails, such as with a **HRESULT 0x800401D0 (CLIPBRD_E_CANT_OPEN)** error, a corresponding <xref:System.Runtime.InteropServices.ExternalException> (which is a type of ExternalException) is thrown.       Because the Win32 `OpenClipboard` API acts globally, well-written applications should call the corresponding `CloseClipboard` API as soon as they have completed their clipboard operations. Otherwise, other applications running in the same session will be unable to access clipboard functions.       In WPF, such a denial of access to the clipboard is normally ignored silently. However, applications can opt to receive an `ExternalException` upon failure by setting the ShouldThrowOnCopyOrCutFailure flag to `true`. However, opting to receive exceptions also requires the application to handle <xref:System.Windows.Input.ApplicationCommands.Cut%2A> and <xref:System.Windows.Input.ApplicationCommands.Copy%2A> RoutedUICommands through a <xref:System.Windows.Input.CommandBinding>, and then apply that binding to all TextBoxBase controls (<xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.RichTextBox>)  in the application. The application should ensure that it handles ExternalExceptions resulting from copy and cut operations in the CommandBinding's Executed handler.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a clipboard operation fails, such as with a <bpt id=\"p1\">**</bpt>HRESULT 0x800401D0 (CLIPBRD_E_CANT_OPEN)<ept id=\"p1\">**</ept> error, a corresponding &lt;xref:System.Runtime.InteropServices.ExternalException&gt; (which is a type of ExternalException) is thrown.","pos":[0,220],"source":"If a clipboard operation fails, such as with a **HRESULT 0x800401D0 (CLIPBRD_E_CANT_OPEN)** error, a corresponding <xref:System.Runtime.InteropServices.ExternalException> (which is a type of ExternalException) is thrown."},{"content":"Because the Win32 <ph id=\"ph1\">`OpenClipboard`</ph> API acts globally, well-written applications should call the corresponding <ph id=\"ph2\">`CloseClipboard`</ph> API as soon as they have completed their clipboard operations.","pos":[227,415],"source":"       Because the Win32 `OpenClipboard` API acts globally, well-written applications should call the corresponding `CloseClipboard` API as soon as they have completed their clipboard operations."},{"content":"Otherwise, other applications running in the same session will be unable to access clipboard functions.","pos":[416,519]},{"content":"In WPF, such a denial of access to the clipboard is normally ignored silently.","pos":[526,604]},{"content":"However, applications can opt to receive an <ph id=\"ph1\">`ExternalException`</ph> upon failure by setting the ShouldThrowOnCopyOrCutFailure flag to <ph id=\"ph2\">`true`</ph>.","pos":[605,742],"source":" However, applications can opt to receive an `ExternalException` upon failure by setting the ShouldThrowOnCopyOrCutFailure flag to `true`."},{"content":"However, opting to receive exceptions also requires the application to handle &lt;xref:System.Windows.Input.ApplicationCommands.Cut%2A&gt; and &lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt; RoutedUICommands through a &lt;xref:System.Windows.Input.CommandBinding&gt;, and then apply that binding to all TextBoxBase controls (&lt;xref:System.Windows.Controls.TextBox&gt; and &lt;xref:System.Windows.Controls.RichTextBox&gt;)  in the application.","pos":[743,1171],"source":" However, opting to receive exceptions also requires the application to handle <xref:System.Windows.Input.ApplicationCommands.Cut%2A> and <xref:System.Windows.Input.ApplicationCommands.Copy%2A> RoutedUICommands through a <xref:System.Windows.Input.CommandBinding>, and then apply that binding to all TextBoxBase controls (<xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.RichTextBox>)  in the application."},{"content":"The application should ensure that it handles ExternalExceptions resulting from copy and cut operations in the CommandBinding's Executed handler.","pos":[1172,1317]}]},{"pos":[7108,7443],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a failed copy or cut operation in a <bpt id=\"p2\">&lt;xref href=\"System.Windows.Controls.Primitives.TextBoxBase\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance results in a <bpt id=\"p3\">&lt;xref href=\"System.Runtime.InteropServices.ExternalException\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a failed copy or cut operation in a <xref href=\"System.Windows.Controls.Primitives.TextBoxBase\"></xref> instance results in a <xref href=\"System.Runtime.InteropServices.ExternalException\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.FrameworkCompatibilityPreferences\n  id: FrameworkCompatibilityPreferences\n  children:\n  - System.Windows.FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported\n  - System.Windows.FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty\n  - System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure\n  langs:\n  - csharp\n  name: FrameworkCompatibilityPreferences\n  nameWithType: FrameworkCompatibilityPreferences\n  fullName: System.Windows.FrameworkCompatibilityPreferences\n  type: Class\n  summary: Contains properties that specify how an application should behave relative to WPF features that are in the PresentationFramework assembly.\n  syntax:\n    content: public static class FrameworkCompatibilityPreferences\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported\n  id: AreInactiveSelectionHighlightBrushKeysSupported\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  langs:\n  - csharp\n  name: AreInactiveSelectionHighlightBrushKeysSupported\n  nameWithType: FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported\n  fullName: System.Windows.FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether the application should use the <xref:System.Windows.SystemColors.InactiveSelectionHighlightBrush*> and <xref:System.Windows.SystemColors.InactiveSelectionHighlightTextBrush*> properties for the colors of inactive selected items.\n  remarks: The default value of this property depends which version of WPF that your app targets.  If your app targets WPF 4.0 or earlier, the default is `false`.  If your app targets WPF 4.5, the default is `true`.  If you use this property to change the behavior of WPF, you must change the property’s value early in the app’s lifetime, such in the constructor of the class that inherits from Application.  After the value is read, you cannot change it again.\n  syntax:\n    content: public static bool AreInactiveSelectionHighlightBrushKeysSupported { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the application should use the <xref:System.Windows.SystemColors.InactiveSelectionHighlightBrush*> and <xref:System.Windows.SystemColors.InactiveSelectionHighlightTextBrush*> properties for the colors of inactive selected items; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>\n  overload: System.Windows.FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty\n  id: KeepTextBoxDisplaySynchronizedWithTextProperty\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  langs:\n  - csharp\n  name: KeepTextBoxDisplaySynchronizedWithTextProperty\n  nameWithType: FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty\n  fullName: System.Windows.FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a data-bound <xref href=\"System.Windows.Controls.TextBox\"></xref> should display a string that is identical to the value of the source its <xref:System.Windows.Controls.TextBox.Text*> property\n  remarks: The default value of this property depends which version of WPF that your app targets.  If your app targets WPF 4.0 or earlier, the default is `false`.  If your app targets WPF 4.5, the default is `true`.  If you use this property to change the behavior of WPF, you must change the property’s value early in the app’s lifetime, such in the constructor of the class that inherits from Application.  After the value is read, you cannot change it again.\n  syntax:\n    content: public static bool KeepTextBoxDisplaySynchronizedWithTextProperty { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a data-bound <xref href=\"System.Windows.Controls.TextBox\"></xref> should display a string that is identical to the value of the source its <xref:System.Windows.Controls.TextBox.Text*> property; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure\n  id: ShouldThrowOnCopyOrCutFailure\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  langs:\n  - csharp\n  name: ShouldThrowOnCopyOrCutFailure\n  nameWithType: FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure\n  fullName: System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a failed copy or cut operation in a <xref href=\"System.Windows.Controls.Primitives.TextBoxBase\"></xref> instance results in a <xref href=\"System.Runtime.InteropServices.ExternalException\"></xref>.\n  remarks: \"If a clipboard operation fails, such as with a **HRESULT 0x800401D0 (CLIPBRD_E_CANT_OPEN)** error, a corresponding <xref:System.Runtime.InteropServices.ExternalException> (which is a type of ExternalException) is thrown.  \\n  \\n Because the Win32 `OpenClipboard` API acts globally, well-written applications should call the corresponding `CloseClipboard` API as soon as they have completed their clipboard operations. Otherwise, other applications running in the same session will be unable to access clipboard functions.  \\n  \\n In WPF, such a denial of access to the clipboard is normally ignored silently. However, applications can opt to receive an `ExternalException` upon failure by setting the ShouldThrowOnCopyOrCutFailure flag to `true`. However, opting to receive exceptions also requires the application to handle <xref:System.Windows.Input.ApplicationCommands.Cut%2A> and <xref:System.Windows.Input.ApplicationCommands.Copy%2A> RoutedUICommands through a <xref:System.Windows.Input.CommandBinding>, and then apply that binding to all TextBoxBase controls (<xref:System.Windows.Controls.TextBox> and <xref:System.Windows.Controls.RichTextBox>)  in the application. The application should ensure that it handles ExternalExceptions resulting from copy and cut operations in the CommandBinding's Executed handler.\"\n  syntax:\n    content: public static bool ShouldThrowOnCopyOrCutFailure { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a failed copy or cut operation in a <xref href=\"System.Windows.Controls.Primitives.TextBoxBase\"></xref> instance results in a <xref href=\"System.Runtime.InteropServices.ExternalException\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  isExternal: false\n  name: AreInactiveSelectionHighlightBrushKeysSupported\n  nameWithType: FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported\n  fullName: System.Windows.FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  isExternal: false\n  name: KeepTextBoxDisplaySynchronizedWithTextProperty\n  nameWithType: FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty\n  fullName: System.Windows.FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty\n- uid: System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  isExternal: false\n  name: ShouldThrowOnCopyOrCutFailure\n  nameWithType: FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure\n  fullName: System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure\n- uid: System.Windows.FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported*\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  isExternal: false\n  name: AreInactiveSelectionHighlightBrushKeysSupported\n  nameWithType: FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported\n- uid: System.Windows.FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty*\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  isExternal: false\n  name: KeepTextBoxDisplaySynchronizedWithTextProperty\n  nameWithType: FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty\n- uid: System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure*\n  parent: System.Windows.FrameworkCompatibilityPreferences\n  isExternal: false\n  name: ShouldThrowOnCopyOrCutFailure\n  nameWithType: FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure\n"}