{"nodes":[{"pos":[1602,1643],"content":"Defines an interface for generating code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines an interface for generating code.","pos":[0,41]}]},{"pos":[1656,3030],"content":"> [!NOTE] >  In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <xref:System.CodeDom.Compiler.CodeDomProvider>, ICodeGenerator, <xref:System.CodeDom.Compiler.ICodeParser>, and <xref:System.CodeDom.Compiler.ICodeCompiler>. In the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A>, and <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> methods are obsolete, and the methods of ICodeGenerator and <xref:System.CodeDom.Compiler.ICodeCompiler> are directly available in the <xref:System.CodeDom.Compiler.CodeDomProvider> class. You should override those methods in your code provider implementation and not call the base methods.       Developers of compilers can implement this interface to allow people to dynamically generate code in a particular language. This can be used for a variety of purposes, such as creating code-generating wizards, creating dynamic assemblies with content that can be debugged, and for templated documents with embedded code, such as ASP.NET.       An ICodeGenerator implementation is typically obtained through a call to the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of <xref:System.CodeDom.Compiler.CodeDomProvider>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;, ICodeGenerator, &lt;xref:System.CodeDom.Compiler.ICodeParser&gt;, and &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;.","pos":[0,259],"source":"> [!NOTE] >  In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <xref:System.CodeDom.Compiler.CodeDomProvider>, ICodeGenerator, <xref:System.CodeDom.Compiler.ICodeParser>, and <xref:System.CodeDom.Compiler.ICodeCompiler>."},{"content":"In the <ph id=\"ph1\">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph>, the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;, &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;, and &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt; methods are obsolete, and the methods of ICodeGenerator and &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt; are directly available in the &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; class.","pos":[260,716],"source":" In the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A>, and <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> methods are obsolete, and the methods of ICodeGenerator and <xref:System.CodeDom.Compiler.ICodeCompiler> are directly available in the <xref:System.CodeDom.Compiler.CodeDomProvider> class."},{"content":"You should override those methods in your code provider implementation and not call the base methods.","pos":[717,818]},{"content":"Developers of compilers can implement this interface to allow people to dynamically generate code in a particular language.","pos":[825,948]},{"content":"This can be used for a variety of purposes, such as creating code-generating wizards, creating dynamic assemblies with content that can be debugged, and for templated documents with embedded code, such as ASP.NET.","pos":[949,1162]},{"content":"An ICodeGenerator implementation is typically obtained through a call to the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method of &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;.","pos":[1169,1369],"source":"       An ICodeGenerator implementation is typically obtained through a call to the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of <xref:System.CodeDom.Compiler.CodeDomProvider>."}]},{"pos":[3600,3654],"content":"Creates an escaped identifier for the specified value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an escaped identifier for the specified value.","pos":[0,54]}]},{"pos":[3666,4145],"content":"CreateEscapedIdentifier tests whether the identifier conflicts with reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting. This is referred to an escaped identifier. The escaped identifier will contain the same `value` but will have escape code formatting added to differentiate the identifier from the keyword. Two implementation examples are preceding the `value` with \"@\" or bracketing the `value` with \"[\" and \"]\".","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"CreateEscapedIdentifier tests whether the identifier conflicts with reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.","pos":[0,183]},{"content":"This is referred to an escaped identifier.","pos":[184,226]},{"content":"The escaped identifier will contain the same <ph id=\"ph1\">`value`</ph> but will have escape code formatting added to differentiate the identifier from the keyword.","pos":[227,372],"source":" The escaped identifier will contain the same `value` but will have escape code formatting added to differentiate the identifier from the keyword."},{"content":"Two implementation examples are preceding the <ph id=\"ph1\">`value`</ph> with \"@\" or bracketing the <ph id=\"ph2\">`value`</ph> with \"[\" and \"]\".","pos":[373,479],"source":" Two implementation examples are preceding the `value` with \"@\" or bracketing the `value` with \"[\" and \"]\"."}]},{"pos":[4300,4347],"content":"The string to create an escaped identifier for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to create an escaped identifier for.","pos":[0,47]}]},{"pos":[4405,4442],"content":"The escaped identifier for the value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The escaped identifier for the value.","pos":[0,37]}]},{"pos":[5022,5073],"content":"Creates a valid identifier for the specified value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a valid identifier for the specified value.","pos":[0,51]}]},{"pos":[5085,5534],"content":"CreateValidIdentifier tests whether the identifier conflicts with reserved or language keywords, and returns a valid identifier name that does not conflict. The returned identifier will contain the same `value` but, if it conflicts with reserved or language keywords, will have escape code formatting added to differentiate the identifier from the keyword. Typically, if the value needs modification, value is returned preceded by an underscore \"_\".","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"CreateValidIdentifier tests whether the identifier conflicts with reserved or language keywords, and returns a valid identifier name that does not conflict.","pos":[0,156]},{"content":"The returned identifier will contain the same <ph id=\"ph1\">`value`</ph> but, if it conflicts with reserved or language keywords, will have escape code formatting added to differentiate the identifier from the keyword.","pos":[157,356],"source":" The returned identifier will contain the same `value` but, if it conflicts with reserved or language keywords, will have escape code formatting added to differentiate the identifier from the keyword."},{"content":"Typically, if the value needs modification, value is returned preceded by an underscore \"_\".","pos":[357,449]}]},{"pos":[5687,5733],"content":"The string to generate a valid identifier for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to generate a valid identifier for.","pos":[0,46]}]},{"pos":[5791,5834],"content":"A valid identifier for the specified value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A valid identifier for the specified value.","pos":[0,43]}]},{"pos":[6731,6890],"content":"Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.","pos":[0,159]}]},{"pos":[7152,7227],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeCompileUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to generate code for.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeCompileUnit\"></xref> to generate code for."},{"pos":[7292,7342],"content":"The <xref:System.IO.TextWriter> to output code to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to output code to.","pos":[0,50],"source":"The <xref:System.IO.TextWriter> to output code to."}]},{"pos":[7431,7553],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the options to use for generating code.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code."},{"pos":[8446,8571],"content":"Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.","pos":[0,125]}]},{"pos":[8830,8934],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the expression to generate code for.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the expression to generate code for."},{"pos":[8999,9049],"content":"The <xref:System.IO.TextWriter> to output code to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to output code to.","pos":[0,50],"source":"The <xref:System.IO.TextWriter> to output code to."}]},{"pos":[9138,9260],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the options to use for generating code.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code."},{"pos":[10142,10294],"content":"Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.","pos":[0,152]}]},{"pos":[10550,10652],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeNamespace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the namespace to generate code for.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeNamespace\"></xref> that indicates the namespace to generate code for."},{"pos":[10717,10767],"content":"The <xref:System.IO.TextWriter> to output code to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to output code to.","pos":[0,50],"source":"The <xref:System.IO.TextWriter> to output code to."}]},{"pos":[10856,10978],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the options to use for generating code.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code."},{"pos":[11859,12011],"content":"Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.","pos":[0,152]}]},{"pos":[12267,12364],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the CodeDOM elements to translate.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeStatement\"></xref> containing the CodeDOM elements to translate."},{"pos":[12429,12479],"content":"The <xref:System.IO.TextWriter> to output code to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to output code to.","pos":[0,50],"source":"The <xref:System.IO.TextWriter> to output code to."}]},{"pos":[12568,12690],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the options to use for generating code.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code."},{"pos":[13576,13735],"content":"Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.","pos":[0,159]}]},{"pos":[13998,14101],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeTypeDeclaration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the type to generate code for.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeTypeDeclaration\"></xref> that indicates the type to generate code for."},{"pos":[14166,14216],"content":"The <xref:System.IO.TextWriter> to output code to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to output code to.","pos":[0,50],"source":"The <xref:System.IO.TextWriter> to output code to."}]},{"pos":[14305,14427],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the options to use for generating code.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code."},{"pos":[15035,15130],"content":"Gets the type indicated by the specified <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeTypeReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the type indicated by the specified <xref href=\"System.CodeDom.CodeTypeReference\"></xref>."},{"pos":[15318,15408],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeTypeReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the type to return.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeTypeReference\"></xref> that indicates the type to return."},{"pos":[15466,15661],"content":"A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return \"Integer\".","needQuote":true,"needEscape":true,"nodes":[{"content":"A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return \"Integer\".","pos":[0,195],"nodes":[{"content":"A text representation of the specified type for the language this code generator is designed to generate code in.","pos":[0,113]},{"content":"For example, in Visual Basic, passing in type System.Int32 will return \"Integer\".","pos":[114,195]}]}]},{"pos":[16211,16314],"content":"Gets a value that indicates whether the specified value is a valid identifier for the current language.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the specified value is a valid identifier for the current language.","pos":[0,103]}]},{"pos":[16326,16586],"content":"This method tests whether an identifier is valid. When implementing IsValidIdentifier in a derived class, design the method to test the value passed to it, and return `true` only if the value fits the rules of the language and does not conflict with a keyword.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method tests whether an identifier is valid.","pos":[0,49]},{"content":"When implementing IsValidIdentifier in a derived class, design the method to test the value passed to it, and return <ph id=\"ph1\">`true`</ph> only if the value fits the rules of the language and does not conflict with a keyword.","pos":[50,260],"source":" When implementing IsValidIdentifier in a derived class, design the method to test the value passed to it, and return `true` only if the value fits the rules of the language and does not conflict with a keyword."}]},{"pos":[16733,16780],"content":"The value to test for being a valid identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to test for being a valid identifier.","pos":[0,47]}]},{"pos":[16839,17033],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is a valid identifier; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>value</code> parameter is a valid identifier; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17626,17813],"content":"Gets a value indicating whether the generator provides support for the language features represented by the specified <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.GeneratorSupport\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the generator provides support for the language features represented by the specified <xref href=\"System.CodeDom.Compiler.GeneratorSupport\"></xref> object."},{"pos":[17825,18059],"content":"This method can be called with a number of <xref:System.CodeDom.Compiler.GeneratorSupport> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary \"Or\" operator (&#124;).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be called with a number of &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary \"Or\" operator (&amp;#124;).","pos":[0,234],"source":"This method can be called with a number of <xref:System.CodeDom.Compiler.GeneratorSupport> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary \"Or\" operator (&#124;)."}]},{"pos":[18264,18307],"content":"The capabilities to test the generator for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The capabilities to test the generator for.","pos":[0,43]}]},{"pos":[18366,18546],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified capabilities are supported; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified capabilities are supported; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19096,19165],"content":"Throws an exception if the specified value is not a valid identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws an exception if the specified value is not a valid identifier.","pos":[0,69]}]},{"pos":[19177,19536],"content":"Rather than returning a value, this method throws an exception if the specified identifier is not valid according to the method implementation. Typically, the exception is an <xref:System.ArgumentException>. This method enables a code generator that implements this method to produce an informative error message based upon the value of an invalid identifier.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Rather than returning a value, this method throws an exception if the specified identifier is not valid according to the method implementation. Typically, the exception is an <xref:System.ArgumentException>. This method enables a code generator that implements this method to produce an informative error message based upon the value of an invalid identifier.","pos":[0,359],"nodes":[{"content":"Rather than returning a value, this method throws an exception if the specified identifier is not valid according to the method implementation.","pos":[0,143]},{"content":"Typically, the exception is an &lt;xref:System.ArgumentException&gt;.","pos":[144,207],"source":" Typically, the exception is an <xref:System.ArgumentException>."},{"content":"This method enables a code generator that implements this method to produce an informative error message based upon the value of an invalid identifier.","pos":[208,359]}]}]},{"pos":[19684,19711],"content":"The identifier to validate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identifier to validate.","pos":[0,27]}]},{"pos":[19891,19919],"content":"The identifier is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identifier is not valid.","pos":[0,28]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.Compiler.ICodeGenerator\n  id: ICodeGenerator\n  children:\n  - System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)\n  - System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)\n  - System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  - System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  - System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  - System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  - System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  - System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)\n  - System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)\n  - System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)\n  - System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)\n  langs:\n  - csharp\n  name: ICodeGenerator\n  nameWithType: ICodeGenerator\n  fullName: System.CodeDom.Compiler.ICodeGenerator\n  type: Interface\n  summary: Defines an interface for generating code.\n  remarks: \"> [!NOTE]\\n>  In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <xref:System.CodeDom.Compiler.CodeDomProvider>, ICodeGenerator, <xref:System.CodeDom.Compiler.ICodeParser>, and <xref:System.CodeDom.Compiler.ICodeCompiler>. In the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A>, and <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> methods are obsolete, and the methods of ICodeGenerator and <xref:System.CodeDom.Compiler.ICodeCompiler> are directly available in the <xref:System.CodeDom.Compiler.CodeDomProvider> class. You should override those methods in your code provider implementation and not call the base methods.  \\n  \\n Developers of compilers can implement this interface to allow people to dynamically generate code in a particular language. This can be used for a variety of purposes, such as creating code-generating wizards, creating dynamic assemblies with content that can be debugged, and for templated documents with embedded code, such as ASP.NET.  \\n  \\n An ICodeGenerator implementation is typically obtained through a call to the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of <xref:System.CodeDom.Compiler.CodeDomProvider>.\"\n  syntax:\n    content: public interface ICodeGenerator\n  implements: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)\n  id: CreateEscapedIdentifier(System.String)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: CreateEscapedIdentifier(String)\n  nameWithType: ICodeGenerator.CreateEscapedIdentifier(String)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Creates an escaped identifier for the specified value.\n  remarks: CreateEscapedIdentifier tests whether the identifier conflicts with reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting. This is referred to an escaped identifier. The escaped identifier will contain the same `value` but will have escape code formatting added to differentiate the identifier from the keyword. Two implementation examples are preceding the `value` with \"@\" or bracketing the `value` with \"[\" and \"]\".\n  syntax:\n    content: public string CreateEscapedIdentifier (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to create an escaped identifier for.\n    return:\n      type: System.String\n      description: The escaped identifier for the value.\n  overload: System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)\n  id: CreateValidIdentifier(System.String)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: CreateValidIdentifier(String)\n  nameWithType: ICodeGenerator.CreateValidIdentifier(String)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Creates a valid identifier for the specified value.\n  remarks: CreateValidIdentifier tests whether the identifier conflicts with reserved or language keywords, and returns a valid identifier name that does not conflict. The returned identifier will contain the same `value` but, if it conflicts with reserved or language keywords, will have escape code formatting added to differentiate the identifier from the keyword. Typically, if the value needs modification, value is returned preceded by an underscore \"_\".\n  syntax:\n    content: public string CreateValidIdentifier (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to generate a valid identifier for.\n    return:\n      type: System.String\n      description: A valid identifier for the specified value.\n  overload: System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  id: GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: GenerateCodeFromCompileUnit(CodeCompileUnit,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromCompileUnit(CodeCompileUnit,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(CodeCompileUnit,TextWriter,CodeGeneratorOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.\n  syntax:\n    content: public void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);\n    parameters:\n    - id: e\n      type: System.CodeDom.CodeCompileUnit\n      description: A <xref href=\"System.CodeDom.CodeCompileUnit\"></xref> to generate code for.\n    - id: w\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to output code to.\n    - id: o\n      type: System.CodeDom.Compiler.CodeGeneratorOptions\n      description: A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code.\n  overload: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  id: GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: GenerateCodeFromExpression(CodeExpression,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromExpression(CodeExpression,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(CodeExpression,TextWriter,CodeGeneratorOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.\n  syntax:\n    content: public void GenerateCodeFromExpression (System.CodeDom.CodeExpression e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);\n    parameters:\n    - id: e\n      type: System.CodeDom.CodeExpression\n      description: A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the expression to generate code for.\n    - id: w\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to output code to.\n    - id: o\n      type: System.CodeDom.Compiler.CodeGeneratorOptions\n      description: A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code.\n  overload: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  id: GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: GenerateCodeFromNamespace(CodeNamespace,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromNamespace(CodeNamespace,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(CodeNamespace,TextWriter,CodeGeneratorOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.\n  syntax:\n    content: public void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);\n    parameters:\n    - id: e\n      type: System.CodeDom.CodeNamespace\n      description: A <xref href=\"System.CodeDom.CodeNamespace\"></xref> that indicates the namespace to generate code for.\n    - id: w\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to output code to.\n    - id: o\n      type: System.CodeDom.Compiler.CodeGeneratorOptions\n      description: A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code.\n  overload: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  id: GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: GenerateCodeFromStatement(CodeStatement,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromStatement(CodeStatement,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(CodeStatement,TextWriter,CodeGeneratorOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.\n  syntax:\n    content: public void GenerateCodeFromStatement (System.CodeDom.CodeStatement e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);\n    parameters:\n    - id: e\n      type: System.CodeDom.CodeStatement\n      description: A <xref href=\"System.CodeDom.CodeStatement\"></xref> containing the CodeDOM elements to translate.\n    - id: w\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to output code to.\n    - id: o\n      type: System.CodeDom.Compiler.CodeGeneratorOptions\n      description: A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code.\n  overload: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  id: GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: GenerateCodeFromType(CodeTypeDeclaration,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromType(CodeTypeDeclaration,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(CodeTypeDeclaration,TextWriter,CodeGeneratorOptions)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.\n  syntax:\n    content: public void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);\n    parameters:\n    - id: e\n      type: System.CodeDom.CodeTypeDeclaration\n      description: A <xref href=\"System.CodeDom.CodeTypeDeclaration\"></xref> that indicates the type to generate code for.\n    - id: w\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to output code to.\n    - id: o\n      type: System.CodeDom.Compiler.CodeGeneratorOptions\n      description: A <xref href=\"System.CodeDom.Compiler.CodeGeneratorOptions\"></xref> that indicates the options to use for generating code.\n  overload: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)\n  id: GetTypeOutput(System.CodeDom.CodeTypeReference)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: GetTypeOutput(CodeTypeReference)\n  nameWithType: ICodeGenerator.GetTypeOutput(CodeTypeReference)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(CodeTypeReference)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets the type indicated by the specified <xref href=\"System.CodeDom.CodeTypeReference\"></xref>.\n  syntax:\n    content: public string GetTypeOutput (System.CodeDom.CodeTypeReference type);\n    parameters:\n    - id: type\n      type: System.CodeDom.CodeTypeReference\n      description: A <xref href=\"System.CodeDom.CodeTypeReference\"></xref> that indicates the type to return.\n    return:\n      type: System.String\n      description: A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return \"Integer\".\n  overload: System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)\n  id: IsValidIdentifier(System.String)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: IsValidIdentifier(String)\n  nameWithType: ICodeGenerator.IsValidIdentifier(String)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets a value that indicates whether the specified value is a valid identifier for the current language.\n  remarks: This method tests whether an identifier is valid. When implementing IsValidIdentifier in a derived class, design the method to test the value passed to it, and return `true` only if the value fits the rules of the language and does not conflict with a keyword.\n  syntax:\n    content: public bool IsValidIdentifier (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The value to test for being a valid identifier.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>value</code> parameter is a valid identifier; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)\n  id: Supports(System.CodeDom.Compiler.GeneratorSupport)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: Supports(GeneratorSupport)\n  nameWithType: ICodeGenerator.Supports(GeneratorSupport)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.Supports(GeneratorSupport)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets a value indicating whether the generator provides support for the language features represented by the specified <xref href=\"System.CodeDom.Compiler.GeneratorSupport\"></xref> object.\n  remarks: This method can be called with a number of <xref:System.CodeDom.Compiler.GeneratorSupport> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary \"Or\" operator (&#124;).\n  syntax:\n    content: public bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);\n    parameters:\n    - id: supports\n      type: System.CodeDom.Compiler.GeneratorSupport\n      description: The capabilities to test the generator for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified capabilities are supported; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.Compiler.ICodeGenerator.Supports*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)\n  id: ValidateIdentifier(System.String)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  langs:\n  - csharp\n  name: ValidateIdentifier(String)\n  nameWithType: ICodeGenerator.ValidateIdentifier(String)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Throws an exception if the specified value is not a valid identifier.\n  remarks: Rather than returning a value, this method throws an exception if the specified identifier is not valid according to the method implementation. Typically, the exception is an <xref:System.ArgumentException>. This method enables a code generator that implements this method to produce an informative error message based upon the value of an invalid identifier.\n  syntax:\n    content: public void ValidateIdentifier (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The identifier to validate.\n  overload: System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The identifier is not valid.\n  platform:\n  - net462\nreferences:\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: CreateEscapedIdentifier(String)\n  nameWithType: ICodeGenerator.CreateEscapedIdentifier(String)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: CreateValidIdentifier(String)\n  nameWithType: ICodeGenerator.CreateValidIdentifier(String)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(String)\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromCompileUnit(CodeCompileUnit,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromCompileUnit(CodeCompileUnit,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(CodeCompileUnit,TextWriter,CodeGeneratorOptions)\n- uid: System.CodeDom.CodeCompileUnit\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeCompileUnit\n  nameWithType: CodeCompileUnit\n  fullName: System.CodeDom.CodeCompileUnit\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: true\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.CodeDom.Compiler.CodeGeneratorOptions\n  parent: System.CodeDom.Compiler\n  isExternal: false\n  name: CodeGeneratorOptions\n  nameWithType: CodeGeneratorOptions\n  fullName: System.CodeDom.Compiler.CodeGeneratorOptions\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromExpression(CodeExpression,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromExpression(CodeExpression,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(CodeExpression,TextWriter,CodeGeneratorOptions)\n- uid: System.CodeDom.CodeExpression\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeExpression\n  nameWithType: CodeExpression\n  fullName: System.CodeDom.CodeExpression\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromNamespace(CodeNamespace,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromNamespace(CodeNamespace,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(CodeNamespace,TextWriter,CodeGeneratorOptions)\n- uid: System.CodeDom.CodeNamespace\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeNamespace\n  nameWithType: CodeNamespace\n  fullName: System.CodeDom.CodeNamespace\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromStatement(CodeStatement,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromStatement(CodeStatement,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(CodeStatement,TextWriter,CodeGeneratorOptions)\n- uid: System.CodeDom.CodeStatement\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeStatement\n  nameWithType: CodeStatement\n  fullName: System.CodeDom.CodeStatement\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromType(CodeTypeDeclaration,TextWriter,CodeGeneratorOptions)\n  nameWithType: ICodeGenerator.GenerateCodeFromType(CodeTypeDeclaration,TextWriter,CodeGeneratorOptions)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(CodeTypeDeclaration,TextWriter,CodeGeneratorOptions)\n- uid: System.CodeDom.CodeTypeDeclaration\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeTypeDeclaration\n  nameWithType: CodeTypeDeclaration\n  fullName: System.CodeDom.CodeTypeDeclaration\n- uid: System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GetTypeOutput(CodeTypeReference)\n  nameWithType: ICodeGenerator.GetTypeOutput(CodeTypeReference)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(CodeTypeReference)\n- uid: System.CodeDom.CodeTypeReference\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeTypeReference\n  nameWithType: CodeTypeReference\n  fullName: System.CodeDom.CodeTypeReference\n- uid: System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: IsValidIdentifier(String)\n  nameWithType: ICodeGenerator.IsValidIdentifier(String)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: Supports(GeneratorSupport)\n  nameWithType: ICodeGenerator.Supports(GeneratorSupport)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.Supports(GeneratorSupport)\n- uid: System.CodeDom.Compiler.GeneratorSupport\n  parent: System.CodeDom.Compiler\n  isExternal: false\n  name: GeneratorSupport\n  nameWithType: GeneratorSupport\n  fullName: System.CodeDom.Compiler.GeneratorSupport\n- uid: System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: ValidateIdentifier(String)\n  nameWithType: ICodeGenerator.ValidateIdentifier(String)\n  fullName: System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(String)\n- uid: System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: CreateEscapedIdentifier\n  nameWithType: ICodeGenerator.CreateEscapedIdentifier\n- uid: System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: CreateValidIdentifier\n  nameWithType: ICodeGenerator.CreateValidIdentifier\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromCompileUnit\n  nameWithType: ICodeGenerator.GenerateCodeFromCompileUnit\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromExpression\n  nameWithType: ICodeGenerator.GenerateCodeFromExpression\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromNamespace\n  nameWithType: ICodeGenerator.GenerateCodeFromNamespace\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromStatement\n  nameWithType: ICodeGenerator.GenerateCodeFromStatement\n- uid: System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GenerateCodeFromType\n  nameWithType: ICodeGenerator.GenerateCodeFromType\n- uid: System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: GetTypeOutput\n  nameWithType: ICodeGenerator.GetTypeOutput\n- uid: System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: IsValidIdentifier\n  nameWithType: ICodeGenerator.IsValidIdentifier\n- uid: System.CodeDom.Compiler.ICodeGenerator.Supports*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: Supports\n  nameWithType: ICodeGenerator.Supports\n- uid: System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier*\n  parent: System.CodeDom.Compiler.ICodeGenerator\n  isExternal: false\n  name: ValidateIdentifier\n  nameWithType: ICodeGenerator.ValidateIdentifier\n"}