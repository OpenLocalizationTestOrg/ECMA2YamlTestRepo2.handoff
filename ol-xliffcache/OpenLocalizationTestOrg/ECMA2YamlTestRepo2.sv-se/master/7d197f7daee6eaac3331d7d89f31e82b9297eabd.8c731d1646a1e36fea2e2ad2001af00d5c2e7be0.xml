{"nodes":[{"pos":[4943,5109],"content":"Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client.","pos":[0,166]}]},{"pos":[5122,12874],"content":"SSL protocols help to provide confidentiality and integrity checking for messages transmitted using an SslStream. An SSL connection, such as that provided by SslStream, should be used when communicating sensitive information between a client and a server. Using an SslStream helps to prevent anyone from reading and tampering with information while it is in transit on the network.       An SslStream instance transmits data using a stream that you supply when creating the SslStream. When you supply this underlying stream, you have the option to specify whether closing the SslStream also closes the underlying stream. Typically, the SslStream class is used with the <xref:System.Net.Sockets.TcpClient> and <xref:System.Net.Sockets.TcpListener> classes. The <xref:System.Net.Sockets.TcpClient.GetStream%2A> method provides a <xref:System.Net.Sockets.NetworkStream> suitable for use with the SslStream class.       After creating an SslStream, the server and optionally, the client must be authenticated. The server must provide an X509 certificate that establishes proof of its identity and can request that the client also do so. Authentication must be performed before transmitting information using an SslStream. Clients initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods, which do not block waiting for the authentication to complete. Servers initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods. Both client and server must initiate the authentication.       The authentication is handled by the Security Support Provider (SSPI) channel provider. The client is given an opportunity to control validation of the server's certificate by specifying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate when creating an SslStream. The server can also control validation by supplying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate. The method referenced by the delegate includes the remote party's certificate and any errors SSPI encountered while validating the certificate. Note that if the server specifies a delegate, the delegate's method is invoked regardless of whether the server requested client authentication. If the server did not request client authentication, the server's delegate method receives a null certificate and an empty array of certificate errors.       If the server requires client authentication, the client must specify one or more certificates for authentication. If the client has more than one certificate, the client can provide a <xref:System.Net.Security.LocalCertificateSelectionCallback> delegate to select the correct certificate for the server. The client's certificates must be located in the current user's \"My\" certificate store. Client authentication via certificates is not supported for the <xref:System.Security.Authentication.SslProtocols> (SSL version 2) protocol.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and the SslStream is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.       When the authentication process, also known as the SSL handshake, succeeds, the identity of the server (and optionally, the client) is established and the SslStream can be used by the client and server to exchange messages. Before sending or receiving information, the client and server should check the security services and levels provided by the SslStream to determine whether the protocol, algorithms, and strengths selected meet their requirements for integrity and confidentiality. If the current settings are not sufficient, the stream should be closed. You can check the security services provided by the SslStream using the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties. The following table shows the elements that report the cryptographic settings used for authentication, encryption and data signing.      |Element|Members|   |-------------|-------------|   |The security protocol used to authenticate the server and, optionally, the client.|The <xref:System.Net.Security.SslStream.SslProtocol%2A> property and the associated <xref:System.Security.Authentication.SslProtocols> enumeration.|   |The key exchange algorithm.|The <xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A> property and the associated <xref:System.Security.Authentication.ExchangeAlgorithmType> enumeration.|   |The message integrity algorithm.|The <xref:System.Net.Security.SslStream.HashAlgorithm%2A> property and the associated <xref:System.Security.Authentication.HashAlgorithmType> enumeration.|   |The message confidentiality algorithm.|The <xref:System.Net.Security.SslStream.CipherAlgorithm%2A> property and the associated <xref:System.Security.Authentication.CipherAlgorithmType> enumeration.|   |The strengths of the selected algorithms.|The <xref:System.Net.Security.SslStream.KeyExchangeStrength%2A>, <xref:System.Net.Security.SslStream.HashStrength%2A>, and <xref:System.Net.Security.SslStream.CipherStrength%2A> properties.|       After a successful authentication, you can send data using the synchronous <xref:System.Net.Security.SslStream.Write%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginWrite%2A> methods. You can receive data using the synchronous <xref:System.Net.Security.SslStream.Read%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginRead%2A> methods.       If you specified to the <xref:System.Net.Security.SslStream.%23ctor%2A> that the underlying stream should be left open, you are responsible for closing that stream when you are done using it.      > [!NOTE] >  If the application that creates the SslStream object runs with the credentials of a Normal user, the application will not be able to access certificates installed in the local machine store unless permission has been explicitly given to the user to do so.       SslStream assumes that a timeout along with any other <xref:System.IO.IOException> when one is thrown from the inner stream will be treated as fatal by its caller. Reusing a SslStream instance after a timeout will return garbage. An application should <xref:System.IO.Stream.Close%2A> the SslStream and throw an exception in these cases.       The .NET Framework 4.6 includes a new security feature that blocks insecure cipher and hashing algorithms for connections. Applications using TLS/SSL through APIs such as HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. and targeting .NET Framework 4.6 get the more-secure behavior by default.       Developers may want to opt out of this behavior in order to maintain interoperability with their existing SSL3 services OR TLS w/ RC4 services. [This article](https://support.microsoft.com/kb/3069494) explains how to modify your code so that the new behavior is disabled.       The .NET Framework 4.6.3 adds new overloads for the methods that authenticate SslStreams that do not specify a TLS version, but instead use the TLS version defined as the system default in [SCHANNEL](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx). Use these methods in your app as a way to be able to later modify the defaults as TLS version best practice changes over time, without the need to rebuild and redeploy your app.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"SSL protocols help to provide confidentiality and integrity checking for messages transmitted using an SslStream.","pos":[0,113]},{"content":"An SSL connection, such as that provided by SslStream, should be used when communicating sensitive information between a client and a server.","pos":[114,255]},{"content":"Using an SslStream helps to prevent anyone from reading and tampering with information while it is in transit on the network.","pos":[256,381]},{"content":"An SslStream instance transmits data using a stream that you supply when creating the SslStream.","pos":[388,484]},{"content":"When you supply this underlying stream, you have the option to specify whether closing the SslStream also closes the underlying stream.","pos":[485,620]},{"content":"Typically, the SslStream class is used with the &lt;xref:System.Net.Sockets.TcpClient&gt; and &lt;xref:System.Net.Sockets.TcpListener&gt; classes.","pos":[621,755],"source":" Typically, the SslStream class is used with the <xref:System.Net.Sockets.TcpClient> and <xref:System.Net.Sockets.TcpListener> classes."},{"content":"The &lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt; method provides a &lt;xref:System.Net.Sockets.NetworkStream&gt; suitable for use with the SslStream class.","pos":[756,909],"source":" The <xref:System.Net.Sockets.TcpClient.GetStream%2A> method provides a <xref:System.Net.Sockets.NetworkStream> suitable for use with the SslStream class."},{"content":"After creating an SslStream, the server and optionally, the client must be authenticated.","pos":[916,1005]},{"content":"The server must provide an X509 certificate that establishes proof of its identity and can request that the client also do so.","pos":[1006,1132]},{"content":"Authentication must be performed before transmitting information using an SslStream.","pos":[1133,1217]},{"content":"Clients initiate authentication using the synchronous &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt; methods, which block until the authentication completes, or the asynchronous &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt; methods, which do not block waiting for the authentication to complete.","pos":[1218,1547],"source":" Clients initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods, which do not block waiting for the authentication to complete."},{"content":"Servers initiate authentication using the synchronous &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt; or asynchronous &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[1548,1753],"source":" Servers initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."},{"content":"Both client and server must initiate the authentication.","pos":[1754,1810]},{"content":"The authentication is handled by the Security Support Provider (SSPI) channel provider.","pos":[1817,1904]},{"content":"The client is given an opportunity to control validation of the server's certificate by specifying a &lt;xref:System.Net.Security.RemoteCertificateValidationCallback&gt; delegate when creating an SslStream.","pos":[1905,2105],"source":" The client is given an opportunity to control validation of the server's certificate by specifying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate when creating an SslStream."},{"content":"The server can also control validation by supplying a &lt;xref:System.Net.Security.RemoteCertificateValidationCallback&gt; delegate.","pos":[2106,2232],"source":" The server can also control validation by supplying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate."},{"content":"The method referenced by the delegate includes the remote party's certificate and any errors SSPI encountered while validating the certificate.","pos":[2233,2376]},{"content":"Note that if the server specifies a delegate, the delegate's method is invoked regardless of whether the server requested client authentication.","pos":[2377,2521]},{"content":"If the server did not request client authentication, the server's delegate method receives a null certificate and an empty array of certificate errors.","pos":[2522,2673]},{"content":"If the server requires client authentication, the client must specify one or more certificates for authentication.","pos":[2680,2794]},{"content":"If the client has more than one certificate, the client can provide a &lt;xref:System.Net.Security.LocalCertificateSelectionCallback&gt; delegate to select the correct certificate for the server.","pos":[2795,2984],"source":" If the client has more than one certificate, the client can provide a <xref:System.Net.Security.LocalCertificateSelectionCallback> delegate to select the correct certificate for the server."},{"content":"The client's certificates must be located in the current user's \"My\" certificate store.","pos":[2985,3072]},{"content":"Client authentication via certificates is not supported for the &lt;xref:System.Security.Authentication.SslProtocols&gt; (SSL version 2) protocol.","pos":[3073,3213],"source":" Client authentication via certificates is not supported for the <xref:System.Security.Authentication.SslProtocols> (SSL version 2) protocol."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and the SslStream is no longer useable.","pos":[3220,3365],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and the SslStream is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[3366,3480]},{"content":"When the authentication process, also known as the SSL handshake, succeeds, the identity of the server (and optionally, the client) is established and the SslStream can be used by the client and server to exchange messages.","pos":[3487,3710]},{"content":"Before sending or receiving information, the client and server should check the security services and levels provided by the SslStream to determine whether the protocol, algorithms, and strengths selected meet their requirements for integrity and confidentiality.","pos":[3711,3974]},{"content":"If the current settings are not sufficient, the stream should be closed.","pos":[3975,4047]},{"content":"You can check the security services provided by the SslStream using the &lt;xref:System.Net.Security.SslStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.SslStream.IsSigned%2A&gt; properties.","pos":[4048,4236],"source":" You can check the security services provided by the SslStream using the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties."},{"content":"The following table shows the elements that report the cryptographic settings used for authentication, encryption and data signing.","pos":[4237,4368]},{"content":"|Element|Members|   |-------------|-------------|   |The security protocol used to authenticate the server and, optionally, the client.|The &lt;xref:System.Net.Security.SslStream.SslProtocol%2A&gt; property and the associated &lt;xref:System.Security.Authentication.SslProtocols&gt; enumeration.|   |The key exchange algorithm.|The &lt;xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A&gt; property and the associated &lt;xref:System.Security.Authentication.ExchangeAlgorithmType&gt; enumeration.|   |The message integrity algorithm.|The &lt;xref:System.Net.Security.SslStream.HashAlgorithm%2A&gt; property and the associated &lt;xref:System.Security.Authentication.HashAlgorithmType&gt; enumeration.|   |The message confidentiality algorithm.|The &lt;xref:System.Net.Security.SslStream.CipherAlgorithm%2A&gt; property and the associated &lt;xref:System.Security.Authentication.CipherAlgorithmType&gt; enumeration.|   |The strengths of the selected algorithms.|The &lt;xref:System.Net.Security.SslStream.KeyExchangeStrength%2A&gt;, &lt;xref:System.Net.Security.SslStream.HashStrength%2A&gt;, and &lt;xref:System.Net.Security.SslStream.CipherStrength%2A&gt; properties.|       After a successful authentication, you can send data using the synchronous &lt;xref:System.Net.Security.SslStream.Write%2A&gt; or asynchronous &lt;xref:System.Net.Security.SslStream.BeginWrite%2A&gt; methods.","pos":[4374,5689],"source":"      |Element|Members|   |-------------|-------------|   |The security protocol used to authenticate the server and, optionally, the client.|The <xref:System.Net.Security.SslStream.SslProtocol%2A> property and the associated <xref:System.Security.Authentication.SslProtocols> enumeration.|   |The key exchange algorithm.|The <xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A> property and the associated <xref:System.Security.Authentication.ExchangeAlgorithmType> enumeration.|   |The message integrity algorithm.|The <xref:System.Net.Security.SslStream.HashAlgorithm%2A> property and the associated <xref:System.Security.Authentication.HashAlgorithmType> enumeration.|   |The message confidentiality algorithm.|The <xref:System.Net.Security.SslStream.CipherAlgorithm%2A> property and the associated <xref:System.Security.Authentication.CipherAlgorithmType> enumeration.|   |The strengths of the selected algorithms.|The <xref:System.Net.Security.SslStream.KeyExchangeStrength%2A>, <xref:System.Net.Security.SslStream.HashStrength%2A>, and <xref:System.Net.Security.SslStream.CipherStrength%2A> properties.|       After a successful authentication, you can send data using the synchronous <xref:System.Net.Security.SslStream.Write%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginWrite%2A> methods."},{"content":"You can receive data using the synchronous &lt;xref:System.Net.Security.SslStream.Read%2A&gt; or asynchronous &lt;xref:System.Net.Security.SslStream.BeginRead%2A&gt; methods.","pos":[5690,5852],"source":" You can receive data using the synchronous <xref:System.Net.Security.SslStream.Read%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginRead%2A> methods."},{"content":"If you specified to the &lt;xref:System.Net.Security.SslStream.%23ctor%2A&gt; that the underlying stream should be left open, you are responsible for closing that stream when you are done using it.","pos":[5859,6050],"source":"       If you specified to the <xref:System.Net.Security.SslStream.%23ctor%2A> that the underlying stream should be left open, you are responsible for closing that stream when you are done using it."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the application that creates the SslStream object runs with the credentials of a Normal user, the application will not be able to access certificates installed in the local machine store unless permission has been explicitly given to the user to do so.","pos":[6056,6324],"source":"      > [!NOTE] >  If the application that creates the SslStream object runs with the credentials of a Normal user, the application will not be able to access certificates installed in the local machine store unless permission has been explicitly given to the user to do so."},{"content":"SslStream assumes that a timeout along with any other &lt;xref:System.IO.IOException&gt; when one is thrown from the inner stream will be treated as fatal by its caller.","pos":[6331,6494],"source":"       SslStream assumes that a timeout along with any other <xref:System.IO.IOException> when one is thrown from the inner stream will be treated as fatal by its caller."},{"content":"Reusing a SslStream instance after a timeout will return garbage.","pos":[6495,6560]},{"content":"An application should &lt;xref:System.IO.Stream.Close%2A&gt; the SslStream and throw an exception in these cases.","pos":[6561,6668],"source":" An application should <xref:System.IO.Stream.Close%2A> the SslStream and throw an exception in these cases."},{"content":"The .NET Framework 4.6 includes a new security feature that blocks insecure cipher and hashing algorithms for connections.","pos":[6675,6797]},{"content":"Applications using TLS/SSL through APIs such as HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. and targeting .NET Framework 4.6 get the more-secure behavior by default.","pos":[6798,6986]},{"content":"Developers may want to opt out of this behavior in order to maintain interoperability with their existing SSL3 services OR TLS w/ RC4 services.","pos":[6993,7136]},{"content":"<bpt id=\"p1\">[</bpt>This article<ept id=\"p1\">](https://support.microsoft.com/kb/3069494)</ept> explains how to modify your code so that the new behavior is disabled.","pos":[7137,7264],"source":"[This article](https://support.microsoft.com/kb/3069494) explains how to modify your code so that the new behavior is disabled."},{"content":"The .NET Framework 4.6.3 adds new overloads for the methods that authenticate SslStreams that do not specify a TLS version, but instead use the TLS version defined as the system default in <bpt id=\"p1\">[</bpt>SCHANNEL<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx)</ept>.","pos":[7271,7537],"source":"       The .NET Framework 4.6.3 adds new overloads for the methods that authenticate SslStreams that do not specify a TLS version, but instead use the TLS version defined as the system default in [SCHANNEL](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx)."},{"content":"Use these methods in your app as a way to be able to later modify the defaults as TLS version best practice changes over time, without the need to rebuild and redeploy your app.","pos":[7538,7715]}]},{"pos":[14286,14421],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.Stream&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream>."},{"pos":[14434,14867],"content":"If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.","pos":[0,431],"nodes":[{"content":"If a value is not specified in the configuration file for encryptionpolicy, the &lt;xref:System.Net.Security.EncryptionPolicy&gt; defaults to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt; for the &lt;xref:System.Net.Security.SslStream&gt; instance that is constructed.","pos":[0,279],"source":"If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed."},{"content":"The use of the Null cipher is required when the encryption policy is set to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt;.","pos":[286,431],"source":"       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>."}]}]},{"pos":[15027,15154],"content":"A &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","needQuote":true,"needEscape":true,"source":"A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"pos":[15313,15417],"content":"<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not readable.","pos":[0,41],"source":"<code>innerStream</code> is not readable."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not writable.","pos":[48,100],"source":"       -or-       <code>innerStream</code> is not writable."}]},{"pos":[15522,15705],"content":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,89],"source":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref:System.IO.Stream.Null&gt;</ph>.","pos":[96,173],"source":"       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."}]},{"pos":[16156,16319],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.Stream&gt; and stream closure behavior.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream> and stream closure behavior."},{"pos":[16332,16994],"content":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you specify <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`leaveStreamOpen`</ph> parameter, closing the &lt;xref:System.Net.Security.SslStream&gt; has no effect on the <ph id=\"ph3\">`innerStream`</ph> stream; you must explicitly close <ph id=\"ph4\">`innerStream`</ph> when you no longer need it.","pos":[0,220],"source":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it."},{"content":"If a value is not specified in the configuration file for encryptionpolicy, the &lt;xref:System.Net.Security.EncryptionPolicy&gt; defaults to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt; for the &lt;xref:System.Net.Security.SslStream&gt; instance that is constructed.","pos":[227,506],"source":"       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed."},{"content":"The use of the Null cipher is required when the encryption policy is set to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt;.","pos":[513,658],"source":"       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>."}]},{"pos":[17451,17578],"content":"A &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","needQuote":true,"needEscape":true,"source":"A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"pos":[17656,17899],"content":"A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that indicates the closure behavior of the &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","pos":[0,184],"source":"A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"content":"This parameter indicates if the inner stream is left open.","pos":[185,243]}]},{"pos":[18058,18162],"content":"<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not readable.","pos":[0,41],"source":"<code>innerStream</code> is not readable."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not writable.","pos":[48,100],"source":"       -or-       <code>innerStream</code> is not writable."}]},{"pos":[18267,18450],"content":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,89],"source":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref:System.IO.Stream.Null&gt;</ph>.","pos":[96,173],"source":"       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."}]},{"pos":[19121,19317],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.Stream&gt;, stream closure behavior and certificate validation delegate.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream>, stream closure behavior and certificate validation delegate."},{"pos":[19330,21216],"content":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.       The `userCertificateValidationCallback` delegate's `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI). The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds.       The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created.       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.      > [!NOTE] >  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (if there is one), or tries to reuse an anonymous sessions if <xref:System.Net.HttpWebRequest.ClientCertificates%2A> is empty.      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you specify <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`leaveStreamOpen`</ph> parameter, closing the &lt;xref:System.Net.Security.SslStream&gt; has no effect on the <ph id=\"ph3\">`innerStream`</ph> stream; you must explicitly close <ph id=\"ph4\">`innerStream`</ph> when you no longer need it.","pos":[0,220],"source":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it."},{"content":"The <ph id=\"ph1\">`userCertificateValidationCallback`</ph> delegate's <ph id=\"ph2\">`certificateErrors`</ph> argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI).","pos":[227,407],"source":"       The `userCertificateValidationCallback` delegate's `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI)."},{"content":"The return value of the method invoked by the <ph id=\"ph1\">`userCertificateValidationCallback`</ph> delegate determines whether authentication succeeds.","pos":[408,542],"source":" The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds."},{"content":"The security protocol and cryptographic algorithms are already selected when the <ph id=\"ph1\">`userCertificateValidationCallback`</ph> delegate's method is invoked.","pos":[549,695],"source":"       The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked."},{"content":"You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application.","pos":[696,828]},{"content":"If not, the method should return <ph id=\"ph1\">`false`</ph> to prevent the &lt;xref:System.Net.Security.SslStream&gt; from being created.","pos":[829,941],"source":" If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created."},{"content":"If a value is not specified in the configuration file for encryptionpolicy, the &lt;xref:System.Net.Security.EncryptionPolicy&gt; defaults to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt; for the &lt;xref:System.Net.Security.SslStream&gt; instance that is constructed.","pos":[948,1227],"source":"       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed."},{"content":"The use of the Null cipher is required when the encryption policy is set to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt;.","pos":[1234,1379],"source":"       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible.","pos":[1385,1522],"source":"      > [!NOTE] >  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible."},{"content":"When attempting to reuse an SSL session, the Framework uses the first element of &lt;xref:System.Net.HttpWebRequest.ClientCertificates%2A&gt; (if there is one), or tries to reuse an anonymous sessions if &lt;xref:System.Net.HttpWebRequest.ClientCertificates%2A&gt; is empty.","pos":[1523,1785],"source":" When attempting to reuse an SSL session, the Framework uses the first element of <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (if there is one), or tries to reuse an anonymous sessions if <xref:System.Net.HttpWebRequest.ClientCertificates%2A> is empty."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Client certificates are not supported in the SSL version 2 protocol.","pos":[1791,1872],"source":"      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol."}]},{"pos":[21825,21952],"content":"A &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","needQuote":true,"needEscape":true,"source":"A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"pos":[22030,22273],"content":"A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that indicates the closure behavior of the &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","pos":[0,184],"source":"A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"content":"This parameter indicates if the inner stream is left open.","pos":[185,243]}]},{"pos":[22405,22565],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate responsible for validating the certificate supplied by the remote party.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"></xref> delegate responsible for validating the certificate supplied by the remote party."},{"pos":[22724,22828],"content":"<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not readable.","pos":[0,41],"source":"<code>innerStream</code> is not readable."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not writable.","pos":[48,100],"source":"       -or-       <code>innerStream</code> is not writable."}]},{"pos":[22933,23116],"content":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,89],"source":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref:System.IO.Stream.Null&gt;</ph>.","pos":[96,173],"source":"       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."}]},{"pos":[23997,24225],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.Stream&gt;, stream closure behavior, certificate validation delegate and certificate selection delegate.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream>, stream closure behavior, certificate validation delegate and certificate selection delegate."},{"pos":[24238,26258],"content":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.       The `userCertificateValidationCallback` delegate's `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI). The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds.       The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created.       The `userCertificateSelectionCallback` delegate is useful when your application has multiple certificates and must dynamically choose a certificate. Certificates in the \"MY\" store are passed to the method invoked by the delegate.       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.      > [!NOTE] >  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of P:System.Net.HttpWebRequest.ClientCertificates (if there is one), or tries to reuse an anonymous sessions if P:System.Net.HttpWebRequest.ClientCertificates is empty.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you specify <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`leaveStreamOpen`</ph> parameter, closing the &lt;xref:System.Net.Security.SslStream&gt; has no effect on the <ph id=\"ph3\">`innerStream`</ph> stream; you must explicitly close <ph id=\"ph4\">`innerStream`</ph> when you no longer need it.","pos":[0,220],"source":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it."},{"content":"The <ph id=\"ph1\">`userCertificateValidationCallback`</ph> delegate's <ph id=\"ph2\">`certificateErrors`</ph> argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI).","pos":[227,407],"source":"       The `userCertificateValidationCallback` delegate's `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI)."},{"content":"The return value of the method invoked by the <ph id=\"ph1\">`userCertificateValidationCallback`</ph> delegate determines whether authentication succeeds.","pos":[408,542],"source":" The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds."},{"content":"The security protocol and cryptographic algorithms are already selected when the <ph id=\"ph1\">`userCertificateValidationCallback`</ph> delegate's method is invoked.","pos":[549,695],"source":"       The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked."},{"content":"You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application.","pos":[696,828]},{"content":"If not, the method should return <ph id=\"ph1\">`false`</ph> to prevent the &lt;xref:System.Net.Security.SslStream&gt; from being created.","pos":[829,941],"source":" If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created."},{"content":"The <ph id=\"ph1\">`userCertificateSelectionCallback`</ph> delegate is useful when your application has multiple certificates and must dynamically choose a certificate.","pos":[948,1096],"source":"       The `userCertificateSelectionCallback` delegate is useful when your application has multiple certificates and must dynamically choose a certificate."},{"content":"Certificates in the \"MY\" store are passed to the method invoked by the delegate.","pos":[1097,1177]},{"content":"If a value is not specified in the configuration file for encryptionpolicy, the &lt;xref:System.Net.Security.EncryptionPolicy&gt; defaults to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt; for the &lt;xref:System.Net.Security.SslStream&gt; instance that is constructed.","pos":[1184,1463],"source":"       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed."},{"content":"The use of the Null cipher is required when the encryption policy is set to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt;.","pos":[1470,1615],"source":"       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible.","pos":[1621,1758],"source":"      > [!NOTE] >  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible."},{"content":"When attempting to reuse an SSL session, the Framework uses the first element of P:System.Net.HttpWebRequest.ClientCertificates (if there is one), or tries to reuse an anonymous sessions if P:System.Net.HttpWebRequest.ClientCertificates is empty.","pos":[1759,2005]}]},{"pos":[26994,27121],"content":"A &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","needQuote":true,"needEscape":true,"source":"A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"pos":[27199,27442],"content":"A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that indicates the closure behavior of the &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","pos":[0,184],"source":"A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"content":"This parameter indicates if the inner stream is left open.","pos":[185,243]}]},{"pos":[27574,27734],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate responsible for validating the certificate supplied by the remote party.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"></xref> delegate responsible for validating the certificate supplied by the remote party."},{"pos":[27863,28015],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.LocalCertificateSelectionCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate responsible for selecting the certificate used for authentication.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.Security.LocalCertificateSelectionCallback\"></xref> delegate responsible for selecting the certificate used for authentication."},{"pos":[28174,28278],"content":"<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not readable.","pos":[0,41],"source":"<code>innerStream</code> is not readable."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not writable.","pos":[48,100],"source":"       -or-       <code>innerStream</code> is not writable."}]},{"pos":[28383,28566],"content":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,89],"source":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref:System.IO.Stream.Null&gt;</ph>.","pos":[96,173],"source":"       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."}]},{"pos":[29572,29706],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.Stream&gt;","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream>"},{"pos":[29718,29874],"content":"The use of the Null cipher is required when the <ph id=\"ph1\">`encryptionPolicy`</ph> parameter is set to &lt;xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The use of the Null cipher is required when the `encryptionPolicy` parameter is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>."},{"pos":[30294,30421],"content":"A &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","needQuote":true,"needEscape":true,"source":"A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"pos":[30499,30742],"content":"A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that indicates the closure behavior of the &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","pos":[0,184],"source":"A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data."},{"content":"This parameter indicates if the inner stream is left open.","pos":[185,243]}]},{"pos":[30874,31034],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate responsible for validating the certificate supplied by the remote party.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"></xref> delegate responsible for validating the certificate supplied by the remote party."},{"pos":[31163,31315],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.LocalCertificateSelectionCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate responsible for selecting the certificate used for authentication.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.Security.LocalCertificateSelectionCallback\"></xref> delegate responsible for selecting the certificate used for authentication."},{"pos":[31411,31480],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.EncryptionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Security.EncryptionPolicy\"></xref> to use."},{"pos":[31639,31808],"content":"<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable.       -or-       <code>encryptionPolicy</code> is not valid.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not readable.","pos":[0,41],"source":"<code>innerStream</code> is not readable."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is not writable.","pos":[48,100],"source":"       -or-       <code>innerStream</code> is not writable."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;encryptionPolicy&lt;/code&gt;</ph> is not valid.","pos":[107,161],"source":"       -or-       <code>encryptionPolicy</code> is not valid."}]},{"pos":[31913,32096],"content":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,89],"source":"<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref:System.IO.Stream.Null&gt;</ph>.","pos":[96,173],"source":"       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."}]},{"pos":[32543,32644],"content":"Called by clients to authenticate the server and optionally the client in a client-server connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the server and optionally the client in a client-server connection.","pos":[0,101]}]},{"pos":[32657,33647],"content":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication. The value specified for `targetHost` must match the name on the server's certificate.       When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method authenticates using &lt;xref:System.Security.Authentication.SslProtocols&gt;.","pos":[0,83],"source":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>."},{"content":"No client certificates are used in the authentication.","pos":[84,138]},{"content":"The certificate revocation list is not checked during authentication.","pos":[139,208]},{"content":"The value specified for <ph id=\"ph1\">`targetHost`</ph> must match the name on the server's certificate.","pos":[209,294],"source":" The value specified for `targetHost` must match the name on the server's certificate."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.SslStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.SslStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.SslStream&gt;.","pos":[301,555],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>."},{"content":"Check the &lt;xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[556,691],"source":" Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[698,871],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[872,986]}]},{"pos":[33816,33907],"content":"The name of the server that shares this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the server that shares this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[34088,34176],"content":"<ph id=\"ph1\">&lt;code&gt;targetHost&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>targetHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[34331,34399],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[34511,34736],"content":"Authentication has already occurred.       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Server authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[34844,34872],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[35721,35909],"content":"Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collection and SSL protocol.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collection and SSL protocol.","pos":[0,188],"nodes":[{"content":"Called by clients to authenticate the server and optionally the client in a client-server connection.","pos":[0,101]},{"content":"The authentication process uses the specified certificate collection and SSL protocol.","pos":[102,188]}]}]},{"pos":[35922,36699],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.SslStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.SslStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.SslStream&gt;.","pos":[0,254],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>."},{"content":"Check the &lt;xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[255,390],"source":" Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[397,570],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[571,685]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Client certificates are not supported in the SSL version 2 protocol.","pos":[691,772],"source":"      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol."}]},{"pos":[37058,37153],"content":"The name of the server that will share this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the server that will share this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[37286,37417],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains client certificates.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"></xref> that contains client certificates."},{"pos":[37523,37637],"content":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.","pos":[0,114],"source":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."}]},{"pos":[37721,37839],"content":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.","pos":[0,118],"source":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."}]},{"pos":[38391,38521],"content":"Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation.","pos":[0,130]}]},{"pos":[38534,39524],"content":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication. The value specified for `targetHost` must match the name on the server's certificate.       When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method authenticates using &lt;xref:System.Security.Authentication.SslProtocols&gt;.","pos":[0,83],"source":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>."},{"content":"No client certificates are used in the authentication.","pos":[84,138]},{"content":"The certificate revocation list is not checked during authentication.","pos":[139,208]},{"content":"The value specified for <ph id=\"ph1\">`targetHost`</ph> must match the name on the server's certificate.","pos":[209,294],"source":" The value specified for `targetHost` must match the name on the server's certificate."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.SslStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.SslStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.SslStream&gt;.","pos":[301,555],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>."},{"content":"Check the &lt;xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[556,691],"source":" Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[698,871],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[872,986]}]},{"pos":[39721,39812],"content":"The name of the server that shares this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the server that shares this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[39885,39992],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[40179,40267],"content":"<ph id=\"ph1\">&lt;code&gt;targetHost&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>targetHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[40422,40490],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[40602,40827],"content":"Authentication has already occurred.       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Server authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[40935,40963],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[41837,42054],"content":"Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation. The authentication process uses the specified certificate collection and SSL protocol.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation. The authentication process uses the specified certificate collection and SSL protocol.","pos":[0,217],"nodes":[{"content":"Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation.","pos":[0,130]},{"content":"The authentication process uses the specified certificate collection and SSL protocol.","pos":[131,217]}]}]},{"pos":[42067,42844],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.SslStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.SslStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.SslStream&gt;.","pos":[0,254],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>."},{"content":"Check the &lt;xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[255,390],"source":" Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[397,570],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[571,685]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Client certificates are not supported in the SSL version 2 protocol.","pos":[691,772],"source":"      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol."}]},{"pos":[43231,43326],"content":"The name of the server that will share this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the server that will share this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[43459,43590],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains client certificates.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"></xref> that contains client certificates."},{"pos":[43696,43810],"content":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.","pos":[0,114],"source":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."}]},{"pos":[43894,44012],"content":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.","pos":[0,118],"source":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."}]},{"pos":[44085,44192],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[44848,44981],"content":"Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate.","pos":[0,133]}]},{"pos":[44994,45724],"content":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[0,726],"nodes":[{"content":"This method authenticates using &lt;xref:System.Security.Authentication.SslProtocols&gt;.","pos":[0,83],"source":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>."},{"content":"The certificate revocation list is not checked during authentication.","pos":[84,153]},{"content":"The client is not required to provide a certificate for authentication.","pos":[154,225]},{"content":"This method blocks until the operation completes.","pos":[232,281]},{"content":"To prevent blocking until the operation completes, use one of the &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; method overloads.","pos":[282,431],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[438,611],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[612,726]}]}]},{"pos":[46010,46058],"content":"The certificate used to authenticate the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The certificate used to authenticate the server.","pos":[0,48]}]},{"pos":[46239,46334],"content":"<ph id=\"ph1\">&lt;code&gt;serverCertificate&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[46489,46557],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[46669,46894],"content":"Authentication has already occurred.       -or-       Client authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Client authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Client authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[47002,47030],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[47149,47285],"content":"The <xref:System.Net.Security.SslStream.AuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer*&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.","pos":[0,136],"source":"The <xref:System.Net.Security.SslStream.AuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium."}]},{"pos":[48089,48259],"content":"Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol.","pos":[0,170]}]},{"pos":[48272,48768],"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[0,494],"nodes":[{"content":"This method blocks until the operation completes.","pos":[0,49]},{"content":"To prevent blocking until the operation completes, use one of the &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; method overloads.","pos":[50,199],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[206,379],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[380,494]}]}]},{"pos":[49184,49236],"content":"The X509Certificate used to authenticate the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X509Certificate used to authenticate the server.","pos":[0,52]}]},{"pos":[49319,49545],"content":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","pos":[0,226],"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the client is asked for a certificate for authentication.","pos":[0,110],"source":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication."},{"content":"Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","pos":[111,226]}]}]},{"pos":[49651,49765],"content":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.","pos":[0,114],"source":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."}]},{"pos":[49849,49967],"content":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.","pos":[0,118],"source":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."}]},{"pos":[50148,50243],"content":"<ph id=\"ph1\">&lt;code&gt;serverCertificate&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[50338,50443],"content":"<ph id=\"ph1\">&lt;code&gt;enabledSslProtocols&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref:System.Security.Authentication.SslProtocols&gt;</ph> value.","needQuote":true,"needEscape":true,"source":"<code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value."},{"pos":[50598,50666],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[50778,51003],"content":"Authentication has already occurred.       -or-       Client authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Client authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Client authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[51111,51139],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[51258,51394],"content":"The <xref:System.Net.Security.SslStream.AuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer*&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.","pos":[0,136],"source":"The <xref:System.Net.Security.SslStream.AuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium."}]},{"pos":[51988,52150],"content":"Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate as an asynchronous operation.","pos":[0,162]}]},{"pos":[52163,52685],"content":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[0,520],"nodes":[{"content":"This method authenticates using &lt;xref:System.Security.Authentication.SslProtocols&gt;.","pos":[0,83],"source":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>."},{"content":"The certificate revocation list is not checked during authentication.","pos":[84,153]},{"content":"The client is not required to provide a certificate for authentication.","pos":[154,225]},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[232,405],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[406,520]}]}]},{"pos":[52999,53047],"content":"The certificate used to authenticate the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The certificate used to authenticate the server.","pos":[0,48]}]},{"pos":[53120,53227],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[53414,53509],"content":"<ph id=\"ph1\">&lt;code&gt;serverCertificate&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[53664,53732],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[53844,54069],"content":"Authentication has already occurred.       -or-       Client authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Client authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Client authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[54177,54205],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[54324,54465],"content":"The <xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*> method is not supported on Windows 95, Windows 98, or Windows Millennium.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.","pos":[0,141],"source":"The <xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*> method is not supported on Windows 95, Windows 98, or Windows Millennium."}]},{"pos":[55294,55493],"content":"Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol as an asynchronous operation.","pos":[0,199]}]},{"pos":[55505,55793],"content":"If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[0,288],"nodes":[{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[0,173],"source":"If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[174,288]}]}]},{"pos":[56236,56288],"content":"The X509Certificate used to authenticate the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X509Certificate used to authenticate the server.","pos":[0,52]}]},{"pos":[56371,56597],"content":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","pos":[0,226],"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the client is asked for a certificate for authentication.","pos":[0,110],"source":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication."},{"content":"Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","pos":[111,226]}]}]},{"pos":[56703,56817],"content":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.","pos":[0,114],"source":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."}]},{"pos":[56901,57019],"content":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.","pos":[0,118],"source":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."}]},{"pos":[57092,57199],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[57890,57996],"content":"Called by clients to begin an asynchronous operation to authenticate the server and optionally the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the server and optionally the client.","pos":[0,106]}]},{"pos":[58009,59168],"content":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication.       The value specified for `targetHost` must match the name on the server's certificate.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method authenticates using &lt;xref:System.Security.Authentication.SslProtocols&gt;.","pos":[0,83],"source":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>."},{"content":"No client certificates are used in the authentication.","pos":[84,138]},{"content":"The certificate revocation list is not checked during authentication.","pos":[139,208]},{"content":"The value specified for <ph id=\"ph1\">`targetHost`</ph> must match the name on the server's certificate.","pos":[215,300],"source":"       The value specified for `targetHost` must match the name on the server's certificate."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A&gt; method.","pos":[307,453],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[454,519],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"This method does not block while the operation completes.","pos":[526,583]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt; method overloads.","pos":[584,717],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[724,1034],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[1035,1149]}]},{"pos":[59398,59489],"content":"The name of the server that shares this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the server that shares this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[59566,59679],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[59746,59898],"content":"A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[69,152],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[59962,60055],"content":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.","pos":[0,93],"source":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."}]},{"pos":[60241,60329],"content":"<ph id=\"ph1\">&lt;code&gt;targetHost&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>targetHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[60484,60552],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[60664,60889],"content":"Authentication has already occurred.       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Server authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[60997,61025],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[62032,62193],"content":"Called by clients to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates and security protocol.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates and security protocol.","pos":[0,161]}]},{"pos":[62206,63238],"content":"The value specified for `targetHost` must match the name on the server's certificate.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value specified for <ph id=\"ph1\">`targetHost`</ph> must match the name on the server's certificate.","pos":[0,85],"source":"The value specified for `targetHost` must match the name on the server's certificate."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A&gt; method.","pos":[92,238],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[239,304],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"This method does not block while the operation completes.","pos":[311,368]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt; method overloads.","pos":[369,502],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[509,819],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[820,934]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Client certificates are not supported in the SSL version 2 protocol.","pos":[940,1021],"source":"      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol."}]},{"pos":[63658,63749],"content":"The name of the server that shares this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The name of the server that shares this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[63882,64010],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing client certificates.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"></xref> containing client certificates."},{"pos":[64116,64230],"content":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.","pos":[0,114],"source":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."}]},{"pos":[64314,64432],"content":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.","pos":[0,118],"source":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."}]},{"pos":[64509,64622],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[64689,64841],"content":"A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[69,152],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[64905,64998],"content":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.","pos":[0,93],"source":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."}]},{"pos":[65184,65272],"content":"<ph id=\"ph1\">&lt;code&gt;targetHost&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>targetHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[65367,65472],"content":"<ph id=\"ph1\">&lt;code&gt;enabledSslProtocols&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref:System.Security.Authentication.SslProtocols&gt;</ph> value.","needQuote":true,"needEscape":true,"source":"<code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value."},{"pos":[65627,65695],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[65807,66032],"content":"Authentication has already occurred.       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Server authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[66140,66168],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[66895,67031],"content":"Called by servers to begin an asynchronous operation to authenticate the client and optionally the server in a client-server connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client and optionally the server in a client-server connection.","pos":[0,136]}]},{"pos":[67044,68126],"content":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method authenticates using &lt;xref:System.Security.Authentication.SslProtocols&gt;.","pos":[0,83],"source":"This method authenticates using <xref:System.Security.Authentication.SslProtocols>."},{"content":"The certificate revocation list is not checked during authentication.","pos":[84,153]},{"content":"The client is not required to provide a certificate for authentication.","pos":[154,225]},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A&gt; method.","pos":[232,378],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[379,444],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"This method does not block while the operation completes.","pos":[451,508]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt; method overloads.","pos":[509,642],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[649,959],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[960,1074]}]},{"pos":[68473,68525],"content":"The X509Certificate used to authenticate the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X509Certificate used to authenticate the server.","pos":[0,52]}]},{"pos":[68602,68715],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[68782,68934],"content":"A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[69,152],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[68998,69087],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[69273,69368],"content":"<ph id=\"ph1\">&lt;code&gt;serverCertificate&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[69523,69591],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[69703,69928],"content":"Authentication has already occurred.       -or-       Client authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Client authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Client authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[70036,70064],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[70183,70324],"content":"The <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.","pos":[0,141],"source":"The <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium."}]},{"pos":[71286,71461],"content":"Called by servers to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates, requirements and security protocol.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates, requirements and security protocol.","pos":[0,175]}]},{"pos":[71474,72322],"content":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A&gt; method.","pos":[0,146],"source":"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[147,212],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"This method does not block while the operation completes.","pos":[219,276]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt; method overloads.","pos":[277,410],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> method overloads."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[417,727],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[728,842]}]},{"pos":[72799,72851],"content":"The X509Certificate used to authenticate the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X509Certificate used to authenticate the server.","pos":[0,52]}]},{"pos":[72934,73160],"content":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","pos":[0,226],"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the client is asked for a certificate for authentication.","pos":[0,110],"source":"A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication."},{"content":"Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.","pos":[111,226]}]}]},{"pos":[73266,73380],"content":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.","pos":[0,114],"source":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."}]},{"pos":[73464,73582],"content":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the certificate revocation list is checked during authentication.","pos":[0,118],"source":"A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."}]},{"pos":[73659,73772],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[73839,73991],"content":"A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[69,152],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[74055,74148],"content":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.","pos":[0,93],"source":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."}]},{"pos":[74334,74429],"content":"<ph id=\"ph1\">&lt;code&gt;serverCertificate&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[74524,74629],"content":"<ph id=\"ph1\">&lt;code&gt;enabledSslProtocols&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref:System.Security.Authentication.SslProtocols&gt;</ph> value.","needQuote":true,"needEscape":true,"source":"<code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value."},{"pos":[74784,74852],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[74964,75189],"content":"Authentication has already occurred.       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously.       -or-       Authentication is already in progress.","needQuote":false,"needEscape":true,"nodes":[{"content":"Authentication has already occurred.","pos":[0,36]},{"content":"-or-       Server authentication using this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was tried previously.","pos":[43,159],"source":"       -or-       Server authentication using this <xref href=\"System.Net.Security.SslStream\"></xref> was tried previously."},{"content":"-or-       Authentication is already in progress.","pos":[166,215]}]},{"pos":[75297,75325],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[75444,75585],"content":"The <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*&gt; method is not supported on Windows 95, Windows 98, or Windows Millennium.","pos":[0,141],"source":"The <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium."}]},{"pos":[76197,76304],"content":"Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.","pos":[0,107]}]},{"pos":[76317,77488],"content":"If encryption and or signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and/or decrypts it. The asynchronous read operation must be completed by calling the <xref:System.Net.Security.SslStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.SslStream.Read%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous read operations.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If encryption and or signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and/or decrypts it.","pos":[0,157]},{"content":"The asynchronous read operation must be completed by calling the &lt;xref:System.Net.Security.SslStream.EndRead%2A&gt; method.","pos":[158,278],"source":" The asynchronous read operation must be completed by calling the <xref:System.Net.Security.SslStream.EndRead%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[279,344],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"This method does not block while the operation completes.","pos":[351,408]},{"content":"To block until the operation completes, use the &lt;xref:System.Net.Security.SslStream.Read%2A&gt; method.","pos":[409,509],"source":" To block until the operation completes, use the <xref:System.Net.Security.SslStream.Read%2A> method."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       The &lt;xref:System.Net.Security.SslStream&gt; class does not support multiple simultaneous read operations.","pos":[516,785],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous read operations."},{"content":"You cannot call this method until you have successfully authenticated.","pos":[792,862]},{"content":"To authenticate call one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt;, or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt;, &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[863,1163],"source":" To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."}]},{"pos":[78435,78507],"content":"A <xref:System.Byte> array that receives the bytes read from the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that receives the bytes read from the stream.","pos":[0,72],"source":"A <xref:System.Byte> array that receives the bytes read from the stream."}]},{"pos":[78569,78662],"content":"The zero-based location in <ph id=\"ph1\">`buffer`</ph> at which to begin storing the data read from this stream.","needQuote":true,"needEscape":true,"source":"The zero-based location in `buffer` at which to begin storing the data read from this stream."},{"pos":[78723,78775],"content":"The maximum number of bytes to read from the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of bytes to read from the stream.","pos":[0,52]}]},{"pos":[78852,78965],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the read operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the read operation is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the read operation is complete."}]},{"pos":[79032,79189],"content":"A user-defined object that contains information about the read operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the read operation.","pos":[0,73]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[74,157],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[79253,79346],"content":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.","pos":[0,93],"source":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."}]},{"pos":[79516,79600],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[79696,79933],"content":"<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\">     &lt;code&gt;&amp;lt;&lt;/code&gt;</ph><ph id=\"ph3\">     &lt;code&gt;0&lt;/code&gt;</ph>.","pos":[0,61],"source":"<code>offset</code>     <code>&lt;</code>     <code>0</code>."},{"content":"<ph id=\"ph1\">&lt;code&gt;-or-&lt;/code&gt;</ph><ph id=\"ph2\">&lt;code&gt;offset&lt;/code&gt;</ph> <ph id=\"ph3\">&amp;gt;</ph> the length of <ph id=\"ph4\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","pos":[68,144],"source":"<code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> +</ph> count <ph id=\"ph3\">&amp;gt;</ph> the length of <ph id=\"ph4\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","pos":[151,229],"source":"       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."}]},{"pos":[80024,80130],"content":"The read operation failed.       -or-       Encryption is in use, but the data could not be decrypted.","needQuote":false,"needEscape":true,"nodes":[{"content":"The read operation failed.       -or-       Encryption is in use, but the data could not be decrypted.","pos":[0,102],"nodes":[{"content":"The read operation failed.","pos":[0,26]},{"content":"-or-       Encryption is in use, but the data could not be decrypted.","pos":[33,102]}]}]},{"pos":[80234,80280],"content":"There is already a read operation in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is already a read operation in progress.","pos":[0,46]}]},{"pos":[80387,80415],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[80526,80558],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[81175,81286],"content":"Begins an asynchronous write operation that writes <xref:System.Byte>s from the specified buffer to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous write operation that writes &lt;xref:System.Byte&gt;s from the specified buffer to the stream.","pos":[0,111],"source":"Begins an asynchronous write operation that writes <xref:System.Byte>s from the specified buffer to the stream."}]},{"pos":[81793,81872],"content":"A <xref:System.Byte> array that supplies the bytes to be written to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that supplies the bytes to be written to the stream.","pos":[0,79],"source":"A <xref:System.Byte> array that supplies the bytes to be written to the stream."}]},{"pos":[81934,82030],"content":"The zero-based location in <ph id=\"ph1\">`buffer`</ph> at which to begin reading bytes to be written to the stream.","needQuote":true,"needEscape":true,"source":"The zero-based location in `buffer` at which to begin reading bytes to be written to the stream."},{"pos":[82091,82177],"content":"An &lt;xref:System.Int32&gt; value that specifies the number of bytes to read from <ph id=\"ph1\">`buffer`</ph>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Int32> value that specifies the number of bytes to read from `buffer`."},{"pos":[82254,82368],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the write operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the write operation is complete.","pos":[0,114],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the write operation is complete."}]},{"pos":[82435,82593],"content":"A user-defined object that contains information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the write operation.","pos":[0,74]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[75,158],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[82657,82746],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[82917,83001],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[83097,83334],"content":"<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\">     &lt;code&gt;&amp;lt;&lt;/code&gt;</ph><ph id=\"ph3\">     &lt;code&gt;0&lt;/code&gt;</ph>.","pos":[0,61],"source":"<code>offset</code>     <code>&lt;</code>     <code>0</code>."},{"content":"<ph id=\"ph1\">&lt;code&gt;-or-&lt;/code&gt;</ph><ph id=\"ph2\">&lt;code&gt;offset&lt;/code&gt;</ph> <ph id=\"ph3\">&amp;gt;</ph> the length of <ph id=\"ph4\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","pos":[68,144],"source":"<code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> +</ph> count <ph id=\"ph3\">&amp;gt;</ph> the length of <ph id=\"ph4\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","pos":[151,229],"source":"       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."}]},{"pos":[83424,83451],"content":"The write operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The write operation failed.","pos":[0,27]}]},{"pos":[83554,83601],"content":"There is already a write operation in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is already a write operation in progress.","pos":[0,47]}]},{"pos":[83708,83736],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[83847,83879],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[84208,84300],"content":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is readable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is readable.","pos":[0,92],"source":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is readable."}]},{"pos":[84313,84591],"content":"If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanRead%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanRead%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.","pos":[0,276],"nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking &lt;xref:System.IO.Stream.CanRead%2A&gt; on the underlying stream.","pos":[0,156],"source":"If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanRead%2A> on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the &lt;xref:System.Net.Security.SslStream&gt; class.","pos":[163,276],"source":"       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class."}]}]},{"pos":[84997,85201],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if authentication has occurred and the underlying stream is readable; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication has occurred and the underlying stream is readable; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[85598,85690],"content":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is seekable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is seekable.","pos":[0,92],"source":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is seekable."}]},{"pos":[85703,85936],"content":"Do not attempt to set the position of the <xref:System.Net.Security.SslStream> object or its underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Do not attempt to set the position of the <xref:System.Net.Security.SslStream> object or its underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.","pos":[0,231],"nodes":[{"content":"Do not attempt to set the position of the &lt;xref:System.Net.Security.SslStream&gt; object or its underlying stream.","pos":[0,111],"source":"Do not attempt to set the position of the <xref:System.Net.Security.SslStream> object or its underlying stream."},{"content":"The underlying stream is specified when you create an instance of the &lt;xref:System.Net.Security.SslStream&gt; class.","pos":[118,231],"source":"       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class."}]}]},{"pos":[86057,86149],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[86561,86660],"content":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream supports time-outs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream supports time-outs.","pos":[0,99],"source":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream supports time-outs."}]},{"pos":[86673,86911],"content":"This property returns the value returned by invoking <xref:System.IO.Stream.CanTimeout%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property returns the value returned by invoking <xref:System.IO.Stream.CanTimeout%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.","pos":[0,236],"nodes":[{"content":"This property returns the value returned by invoking &lt;xref:System.IO.Stream.CanTimeout%2A&gt; on the underlying stream.","pos":[0,116],"source":"This property returns the value returned by invoking <xref:System.IO.Stream.CanTimeout%2A> on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the &lt;xref:System.Net.Security.SslStream&gt; class.","pos":[123,236],"source":"       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class."}]}]},{"pos":[87318,87498],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the underlying stream supports time-outs; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the underlying stream supports time-outs; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[87903,87995],"content":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is writable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is writable.","pos":[0,92],"source":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is writable."}]},{"pos":[88008,88287],"content":"If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanWrite%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanWrite%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.","pos":[0,277],"nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking &lt;xref:System.IO.Stream.CanWrite%2A&gt; on the underlying stream.","pos":[0,157],"source":"If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanWrite%2A> on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the &lt;xref:System.Net.Security.SslStream&gt; class.","pos":[164,277],"source":"       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class."}]}]},{"pos":[88694,88898],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if authentication has occurred and the underlying stream is writable; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication has occurred and the underlying stream is writable; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[89386,89529],"content":"Gets a <xref:System.Boolean> value that indicates whether the certificate revocation list is checked during the certificate validation process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the certificate revocation list is checked during the certificate validation process.","pos":[0,143],"source":"Gets a <xref:System.Boolean> value that indicates whether the certificate revocation list is checked during the certificate validation process."}]},{"pos":[89541,89716],"content":"The certificate revocation list contains certificates that have been revoked by the issuer. Checking the list negatively impacts performance but improves application security.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The certificate revocation list contains certificates that have been revoked by the issuer. Checking the list negatively impacts performance but improves application security.","pos":[0,175],"nodes":[{"content":"The certificate revocation list contains certificates that have been revoked by the issuer.","pos":[0,91]},{"content":"Checking the list negatively impacts performance but improves application security.","pos":[92,175]}]}]},{"pos":[90136,90318],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the certificate revocation list is checked; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the certificate revocation list is checked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[90773,90896],"content":"Gets a value that identifies the bulk encryption algorithm used by this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value that identifies the bulk encryption algorithm used by this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[90909,91745],"content":"A value of <xref:System.Security.Authentication.CipherAlgorithmType> is required for the CipherAlgorithm property when the <xref:System.Net.Security.EncryptionPolicy> enumeration value is used to construct a <xref:System.Net.Security.SslStream> instance.       [!INCLUDE[winxpsvr](~/add/includes/winxpsvr-md.md)] and [!INCLUDE[winxp](~/add/includes/winxp-md.md)] do not support the <xref:System.Security.Authentication.CipherAlgorithmType> value. So even if the <xref:System.Security.Authentication.CipherAlgorithmType> value is used to construct the <xref:System.Net.Security.SslStream> instance, the <xref:System.Net.Security.EncryptionPolicy> property will be <xref:System.Security.Authentication.CipherAlgorithmType>. The <xref:System.Security.Authentication.CipherAlgorithmType> value is only returned on Windows Vista and later.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A value of &lt;xref:System.Security.Authentication.CipherAlgorithmType&gt; is required for the CipherAlgorithm property when the &lt;xref:System.Net.Security.EncryptionPolicy&gt; enumeration value is used to construct a &lt;xref:System.Net.Security.SslStream&gt; instance.","pos":[0,254],"source":"A value of <xref:System.Security.Authentication.CipherAlgorithmType> is required for the CipherAlgorithm property when the <xref:System.Net.Security.EncryptionPolicy> enumeration value is used to construct a <xref:System.Net.Security.SslStream> instance."},{"content":"<ph id=\"ph1\">[!INCLUDE[winxpsvr](~/add/includes/winxpsvr-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[winxp](~/add/includes/winxp-md.md)]</ph> do not support the &lt;xref:System.Security.Authentication.CipherAlgorithmType&gt; value.","pos":[261,446],"source":"[!INCLUDE[winxpsvr](~/add/includes/winxpsvr-md.md)] and [!INCLUDE[winxp](~/add/includes/winxp-md.md)] do not support the <xref:System.Security.Authentication.CipherAlgorithmType> value."},{"content":"So even if the &lt;xref:System.Security.Authentication.CipherAlgorithmType&gt; value is used to construct the &lt;xref:System.Net.Security.SslStream&gt; instance, the &lt;xref:System.Net.Security.EncryptionPolicy&gt; property will be &lt;xref:System.Security.Authentication.CipherAlgorithmType&gt;.","pos":[447,721],"source":" So even if the <xref:System.Security.Authentication.CipherAlgorithmType> value is used to construct the <xref:System.Net.Security.SslStream> instance, the <xref:System.Net.Security.EncryptionPolicy> property will be <xref:System.Security.Authentication.CipherAlgorithmType>."},{"content":"The &lt;xref:System.Security.Authentication.CipherAlgorithmType&gt; value is only returned on Windows Vista and later.","pos":[722,834],"source":" The <xref:System.Security.Authentication.CipherAlgorithmType> value is only returned on Windows Vista and later."}]},{"pos":[92249,92315],"content":"A <xref:System.Security.Authentication.CipherAlgorithmType> value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Security.Authentication.CipherAlgorithmType&gt; value.","pos":[0,66],"source":"A <xref:System.Security.Authentication.CipherAlgorithmType> value."}]},{"pos":[92499,92630],"content":"The CipherAlgorithm property was accessed before the completion of the authentication process or the authentication process failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CipherAlgorithm property was accessed before the completion of the authentication process or the authentication process failed.","pos":[0,131]}]},{"pos":[92994,93124],"content":"Gets a value that identifies the strength of the cipher algorithm used by this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value that identifies the strength of the cipher algorithm used by this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[93137,93378],"content":"The value of this property is zero until the authentication occurs.       This property returns one of the following values:      -   0      -   40      -   56      -   80      -   128      -   168      -   192      -   256","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of this property is zero until the authentication occurs.       This property returns one of the following values:      -   0      -   40      -   56      -   80      -   128      -   168      -   192      -   256","pos":[0,223],"nodes":[{"content":"The value of this property is zero until the authentication occurs.","pos":[0,67]},{"content":"This property returns one of the following values:      -   0      -   40      -   56      -   80      -   128      -   168      -   192      -   256","pos":[74,223]}]}]},{"pos":[93794,93877],"content":"An <xref:System.Int32> value that specifies the strength of the algorithm, in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the strength of the algorithm, in bits.","pos":[0,83],"source":"An <xref:System.Int32> value that specifies the strength of the algorithm, in bits."}]},{"pos":[94338,94480],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Security.SslStream\"></xref> and optionally releases the managed resources."},{"pos":[94493,95025],"content":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.SslStream> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,102],"source":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[103,208],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[209,292],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.Net.Security.SslStream&gt; references.","pos":[299,460],"source":"       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.SslStream> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[461,530],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[95182,95391],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[95950,96106],"content":"Ends a pending asynchronous server authentication operation started with a previous call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends a pending asynchronous server authentication operation started with a previous call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*&gt;.","pos":[0,156],"source":"Ends a pending asynchronous server authentication operation started with a previous call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>."}]},{"pos":[96119,97014],"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.       To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.       To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> methods.","pos":[0,891],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"When the authentication succeeds, you must check the &lt;xref:System.Net.Security.SslStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.SslStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.SslStream&gt;.","pos":[70,328],"source":" When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>."},{"content":"Check the &lt;xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[329,464],"source":" Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[471,644],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[645,759]},{"content":"To perform this operation synchronously, use one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt; methods.","pos":[766,891],"source":"       To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> methods."}]}]},{"pos":[97200,97325],"content":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*&gt;.","pos":[0,125],"source":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>."}]},{"pos":[97509,97598],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[97693,97811],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not created by a call to <ph id=\"ph2\">&lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>."},{"pos":[97966,98034],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[98145,98199],"content":"There is no pending server authentication to complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no pending server authentication to complete.","pos":[0,54]}]},{"pos":[98690,98846],"content":"Ends a pending asynchronous client authentication operation started with a previous call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends a pending asynchronous client authentication operation started with a previous call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*&gt;.","pos":[0,156],"source":"Ends a pending asynchronous client authentication operation started with a previous call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>."}]},{"pos":[98859,99753],"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.       To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.       To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method.","pos":[0,890],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"When the authentication succeeds, you must check the &lt;xref:System.Net.Security.SslStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.SslStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.SslStream&gt;.","pos":[70,328],"source":" When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>."},{"content":"Check the &lt;xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[329,464],"source":" Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive a &lt;xref:System.Security.Authentication.AuthenticationException&gt;, and this &lt;xref:System.Net.Security.SslStream&gt; is no longer useable.","pos":[471,644],"source":"       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable."},{"content":"You should close this object and remove all references to it so that it can be collected by the garbage collector.","pos":[645,759]},{"content":"To perform this operation synchronously, use one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt; method.","pos":[766,890],"source":"       To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method."}]}]},{"pos":[99939,100064],"content":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*&gt;.","pos":[0,125],"source":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>."}]},{"pos":[100248,100337],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[100432,100550],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not created by a call to <ph id=\"ph2\">&lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>."},{"pos":[100705,100773],"content":"The authentication failed and left this object in an unusable state.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed and left this object in an unusable state.","pos":[0,68]}]},{"pos":[100884,100938],"content":"There is no pending client authentication to complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no pending client authentication to complete.","pos":[0,54]}]},{"pos":[101349,101465],"content":"Ends an asynchronous read operation started with a previous call to <xref:System.Net.Security.SslStream.BeginRead*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous read operation started with a previous call to &lt;xref:System.Net.Security.SslStream.BeginRead*&gt;.","pos":[0,116],"source":"Ends an asynchronous read operation started with a previous call to <xref:System.Net.Security.SslStream.BeginRead*>."}]},{"pos":[101478,102037],"content":"If the operation has not completed, this method blocks until it does.       To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Read%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the operation has not completed, this method blocks until it does.       To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Read%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,555],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Security.SslStream.Read%2A&gt; method.","pos":[76,177],"source":"       To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Read%2A> method."},{"content":"You cannot call this method until you have successfully authenticated.","pos":[184,254]},{"content":"To authenticate call one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt;, or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt;, &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[255,555],"source":" To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."}]}]},{"pos":[102492,102600],"content":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginRead*>","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.SslStream.BeginRead*&gt;","pos":[0,108],"source":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginRead*>"}]},{"pos":[102657,102752],"content":"A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; value that specifies the number of bytes read from the underlying stream.","pos":[0,95],"source":"A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream."}]},{"pos":[102920,103009],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[103104,103206],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not created by a call to <ph id=\"ph2\">&lt;xref:System.Net.Security.SslStream.BeginRead*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginRead*>."},{"pos":[103317,103349],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[103438,103464],"content":"The read operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The read operation failed.","pos":[0,26]}]},{"pos":[103880,103998],"content":"Ends an asynchronous write operation started with a previous call to <xref:System.Net.Security.SslStream.BeginWrite*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous write operation started with a previous call to &lt;xref:System.Net.Security.SslStream.BeginWrite*&gt;.","pos":[0,118],"source":"Ends an asynchronous write operation started with a previous call to <xref:System.Net.Security.SslStream.BeginWrite*>."}]},{"pos":[104011,104583],"content":"If the operation has not completed, this method blocks until it does.       An application cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Write%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the operation has not completed, this method blocks until it does.       An application cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Write%2A> method.","pos":[0,568],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"An application cannot call this method until you have successfully authenticated.","pos":[76,157]},{"content":"To authenticate, call one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt;, or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt;, &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[158,459],"source":" To authenticate, call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Security.SslStream.Write%2A&gt; method.","pos":[466,568],"source":"       To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Write%2A> method."}]}]},{"pos":[105041,105150],"content":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginWrite*>","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.SslStream.BeginWrite*&gt;","pos":[0,109],"source":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginWrite*>"}]},{"pos":[105319,105408],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[105503,105606],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not created by a call to <ph id=\"ph2\">&lt;xref:System.Net.Security.SslStream.BeginWrite*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginWrite*>."},{"pos":[105717,105749],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[105838,105865],"content":"The write operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The write operation failed.","pos":[0,27]}]},{"pos":[106188,106252],"content":"Causes any buffered data to be written to the underlying device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes any buffered data to be written to the underlying device.","pos":[0,64]}]},{"pos":[106264,106342],"content":"This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method invokes &lt;xref:System.IO.Stream.Flush%2A&gt; on the underlying stream.","pos":[0,78],"source":"This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream."}]},{"pos":[107105,107180],"content":"Gets the algorithm used for generating message authentication codes (MACs).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the algorithm used for generating message authentication codes (MACs).","pos":[0,75]}]},{"pos":[107192,107302],"content":"Message authentication algorithms generate message hashes and signatures used to detect tampering and forgery.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Message authentication algorithms generate message hashes and signatures used to detect tampering and forgery.","pos":[0,110]}]},{"pos":[107797,107861],"content":"A <xref:System.Security.Authentication.HashAlgorithmType> value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Security.Authentication.HashAlgorithmType&gt; value.","pos":[0,64],"source":"A <xref:System.Security.Authentication.HashAlgorithmType> value."}]},{"pos":[108043,108172],"content":"The HashAlgorithm property was accessed before the completion of the authentication process or the authentication process failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HashAlgorithm property was accessed before the completion of the authentication process or the authentication process failed.","pos":[0,129]}]},{"pos":[108526,108612],"content":"Gets a value that identifies the strength of the hash algorithm used by this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that identifies the strength of the hash algorithm used by this instance.","pos":[0,86]}]},{"pos":[108624,108691],"content":"The value of this property is zero until the authentication occurs.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of this property is zero until the authentication occurs.","pos":[0,67]}]},{"pos":[109104,109272],"content":"An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.HashAlgorithmType> algorithm, in bits. Valid values are 128 or 160.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.HashAlgorithmType> algorithm, in bits. Valid values are 128 or 160.","pos":[0,168],"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the strength of the &lt;xref:System.Security.Authentication.HashAlgorithmType&gt; algorithm, in bits.","pos":[0,139],"source":"An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.HashAlgorithmType> algorithm, in bits."},{"content":"Valid values are 128 or 160.","pos":[140,168]}]}]},{"pos":[109714,109802],"content":"Gets a <xref:System.Boolean> value that indicates whether authentication was successful.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether authentication was successful.","pos":[0,88],"source":"Gets a <xref:System.Boolean> value that indicates whether authentication was successful."}]},{"pos":[109814,110163],"content":"Clients authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Clients authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,349],"nodes":[{"content":"Clients authenticate by calling the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt; or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt; methods.","pos":[0,174],"source":"Clients authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods."},{"content":"Servers authenticate by calling the &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt; or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[175,349],"source":" Servers authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."}]}]},{"pos":[110574,110748],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if successful authentication occurred; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if successful authentication occurred; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[111173,111308],"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses data encryption.","needQuote":true,"needEscape":true,"source":"Gets a <xref:System.Boolean> value that indicates whether this <xref href=\"System.Net.Security.SslStream\"></xref> uses data encryption."},{"pos":[111320,111471],"content":"Encryption helps to protect the privacy of the data, namely it helps to ensure that while data is in transit, it cannot be deciphered by third parties.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Encryption helps to protect the privacy of the data, namely it helps to ensure that while data is in transit, it cannot be deciphered by third parties.","pos":[0,151]}]},{"pos":[111878,112126],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[112607,112712],"content":"Gets a <xref:System.Boolean> value that indicates whether both server and client have been authenticated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether both server and client have been authenticated.","pos":[0,105],"source":"Gets a <xref:System.Boolean> value that indicates whether both server and client have been authenticated."}]},{"pos":[112724,112850],"content":"Mutual authentication is specified by the server when the server wants the client to provide a certificate for authentication.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Mutual authentication is specified by the server when the server wants the client to provide a certificate for authentication.","pos":[0,126]}]},{"pos":[113271,113443],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the server has been authenticated; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the server has been authenticated; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[113861,114048],"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the local side of the connection used by this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was authenticated as the server.","needQuote":true,"needEscape":true,"source":"Gets a <xref:System.Boolean> value that indicates whether the local side of the connection used by this <xref href=\"System.Net.Security.SslStream\"></xref> was authenticated as the server."},{"pos":[114061,114321],"content":"If authentication failed or did not occur, this property returns `false`.       To authenticate as the server, call the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If authentication failed or did not occur, this property returns <ph id=\"ph1\">`false`</ph>.","pos":[0,73],"source":"If authentication failed or did not occur, this property returns `false`."},{"content":"To authenticate as the server, call the &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt; or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[80,258],"source":"       To authenticate as the server, call the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."}]},{"pos":[114728,114967],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[115370,115470],"content":"Gets a <xref:System.Boolean> value that indicates whether the data sent using this stream is signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the data sent using this stream is signed.","pos":[0,100],"source":"Gets a <xref:System.Boolean> value that indicates whether the data sent using this stream is signed."}]},{"pos":[115482,115636],"content":"Data signing helps to protect the integrity of the data, namely it helps the recipient determine whether the data has been tampered with while in transit.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Data signing helps to protect the integrity of the data, namely it helps the recipient determine whether the data has been tampered with while in transit.","pos":[0,154]}]},{"pos":[116042,116224],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the data is signed before being transmitted; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the data is signed before being transmitted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[116687,116783],"content":"Gets the key exchange algorithm used by this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the key exchange algorithm used by this <xref href=\"System.Net.Security.SslStream\"></xref>."},{"pos":[116796,117004],"content":"The value of this property is <xref:System.Security.Authentication.ExchangeAlgorithmType> until the authentication occurs.       The key exchange algorithm protects information used to generate shared keys.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of this property is <xref:System.Security.Authentication.ExchangeAlgorithmType> until the authentication occurs.       The key exchange algorithm protects information used to generate shared keys.","pos":[0,206],"nodes":[{"content":"The value of this property is &lt;xref:System.Security.Authentication.ExchangeAlgorithmType&gt; until the authentication occurs.","pos":[0,122],"source":"The value of this property is <xref:System.Security.Authentication.ExchangeAlgorithmType> until the authentication occurs."},{"content":"The key exchange algorithm protects information used to generate shared keys.","pos":[129,206]}]}]},{"pos":[117517,117586],"content":"An <xref:System.Security.Authentication.ExchangeAlgorithmType> value.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Security.Authentication.ExchangeAlgorithmType&gt; value.","pos":[0,69],"source":"An <xref:System.Security.Authentication.ExchangeAlgorithmType> value."}]},{"pos":[118056,118150],"content":"Gets a value that identifies the strength of the key exchange algorithm used by this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that identifies the strength of the key exchange algorithm used by this instance.","pos":[0,94]}]},{"pos":[118163,118373],"content":"The value of this property is zero until the authentication occurs.       In common scenarios, the value of this property is one of the following:      -   512      -   768      -   1024      -   2048","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of this property is zero until the authentication occurs.       In common scenarios, the value of this property is one of the following:      -   512      -   768      -   1024      -   2048","pos":[0,200],"nodes":[{"content":"The value of this property is zero until the authentication occurs.","pos":[0,67]},{"content":"In common scenarios, the value of this property is one of the following:      -   512      -   768      -   1024      -   2048","pos":[74,200]}]}]},{"pos":[118794,118937],"content":"An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.ExchangeAlgorithmType> algorithm, in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; value that specifies the strength of the &lt;xref:System.Security.Authentication.ExchangeAlgorithmType&gt; algorithm, in bits.","pos":[0,143],"source":"An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.ExchangeAlgorithmType> algorithm, in bits."}]},{"pos":[119341,119382],"content":"Gets the length of the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length of the underlying stream.","pos":[0,41]}]},{"pos":[119394,119696],"content":"This property returns the value returned by invoking <xref:System.IO.Stream.Length%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property returns the value returned by invoking <xref:System.IO.Stream.Length%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[0,302],"nodes":[{"content":"This property returns the value returned by invoking &lt;xref:System.IO.Stream.Length%2A&gt; on the underlying stream.","pos":[0,112],"source":"This property returns the value returned by invoking <xref:System.IO.Stream.Length%2A> on the underlying stream."},{"content":"If the underlying stream is not seekable, this method typically throws an exception.","pos":[113,197]},{"content":"The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[198,302]}]}]},{"pos":[119814,119881],"content":"A <xref:System.Int64>.       The length of the underlying stream.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <xref:System.Int64>.       The length of the underlying stream.","pos":[0,65],"nodes":[{"content":"A &lt;xref:System.Int64&gt;.","pos":[0,22],"source":"A <xref:System.Int64>."},{"content":"The length of the underlying stream.","pos":[29,65]}]}]},{"pos":[120049,120187],"content":"Getting the value of this property is not supported when the underlying stream is a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[120561,120622],"content":"Gets the certificate used to authenticate the local endpoint.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the certificate used to authenticate the local endpoint.","pos":[0,61]}]},{"pos":[121166,121347],"content":"An X509Certificate object that represents the certificate supplied for authentication or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no certificate was supplied.","needQuote":true,"needEscape":true,"source":"An X509Certificate object that represents the certificate supplied for authentication or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no certificate was supplied."},{"pos":[121532,121574],"content":"Authentication failed or has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication failed or has not occurred.","pos":[0,42]}]},{"pos":[121908,121967],"content":"Gets or sets the current position in the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the current position in the underlying stream.","pos":[0,59]}]},{"pos":[121979,122283],"content":"This property returns the value returned by invoking <xref:System.IO.Stream.Position%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property returns the value returned by invoking <xref:System.IO.Stream.Position%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[0,304],"nodes":[{"content":"This property returns the value returned by invoking &lt;xref:System.IO.Stream.Position%2A&gt; on the underlying stream.","pos":[0,114],"source":"This property returns the value returned by invoking <xref:System.IO.Stream.Position%2A> on the underlying stream."},{"content":"If the underlying stream is not seekable, this method typically throws an exception.","pos":[115,199]},{"content":"The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[200,304]}]}]},{"pos":[122408,122485],"content":"A <xref:System.Int64>.       The current position in the underlying stream.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <xref:System.Int64>.       The current position in the underlying stream.","pos":[0,75],"nodes":[{"content":"A &lt;xref:System.Int64&gt;.","pos":[0,22],"source":"A <xref:System.Int64>."},{"content":"The current position in the underlying stream.","pos":[29,75]}]}]},{"pos":[122656,122857],"content":"Setting this property is not supported.       -or-       Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Setting this property is not supported.","pos":[0,39]},{"content":"-or-       Getting the value of this property is not supported when the underlying stream is a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[46,195],"source":"       -or-       Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."}]},{"pos":[123312,123377],"content":"Reads data from this stream and stores it in the specified array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from this stream and stores it in the specified array.","pos":[0,65]}]},{"pos":[123390,124054],"content":"The method reads a maximum of `count` bytes from the stream and stores them in `buffer` beginning at `offset`. You cannot perform multiple simultaneous read operations.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       To perform this operation asynchronously, use the <xref:System.Net.Security.SslStream.BeginRead%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The method reads a maximum of <ph id=\"ph1\">`count`</ph> bytes from the stream and stores them in <ph id=\"ph2\">`buffer`</ph> beginning at <ph id=\"ph3\">`offset`</ph>.","pos":[0,110],"source":"The method reads a maximum of `count` bytes from the stream and stores them in `buffer` beginning at `offset`."},{"content":"You cannot perform multiple simultaneous read operations.","pos":[111,168]},{"content":"You cannot call this method until you have successfully authenticated.","pos":[175,245]},{"content":"To authenticate call one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt;, or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt;, &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[246,546],"source":" To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."},{"content":"To perform this operation asynchronously, use the &lt;xref:System.Net.Security.SslStream.BeginRead%2A&gt; method.","pos":[553,660],"source":"       To perform this operation asynchronously, use the <xref:System.Net.Security.SslStream.BeginRead%2A> method."}]},{"pos":[124520,124593],"content":"A <xref:System.Byte> array that receives the bytes read from this stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that receives the bytes read from this stream.","pos":[0,73],"source":"A <xref:System.Byte> array that receives the bytes read from this stream."}]},{"pos":[124655,124784],"content":"A &lt;xref:System.Int32&gt; that contains the zero-based location in <ph id=\"ph1\">`buffer`</ph> at which to begin storing the data read from this stream.","needQuote":true,"needEscape":true,"source":"A <xref:System.Int32> that contains the zero-based location in `buffer` at which to begin storing the data read from this stream."},{"pos":[124845,124934],"content":"A <xref:System.Int32> that contains the maximum number of bytes to read from this stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; that contains the maximum number of bytes to read from this stream.","pos":[0,89],"source":"A <xref:System.Int32> that contains the maximum number of bytes to read from this stream."}]},{"pos":[124991,125109],"content":"A <xref:System.Int32> value that specifies the number of bytes read. When there is no more data to be read, returns 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Int32> value that specifies the number of bytes read. When there is no more data to be read, returns 0.","pos":[0,118],"nodes":[{"content":"A &lt;xref:System.Int32&gt; value that specifies the number of bytes read.","pos":[0,68],"source":"A <xref:System.Int32> value that specifies the number of bytes read."},{"content":"When there is no more data to be read, returns 0.","pos":[69,118]}]}]},{"pos":[125274,125358],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[125454,125691],"content":"<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\">     &lt;code&gt;&amp;lt;&lt;/code&gt;</ph><ph id=\"ph3\">     &lt;code&gt;0&lt;/code&gt;</ph>.","pos":[0,61],"source":"<code>offset</code>     <code>&lt;</code>     <code>0</code>."},{"content":"<ph id=\"ph1\">&lt;code&gt;-or-&lt;/code&gt;</ph><ph id=\"ph2\">&lt;code&gt;offset&lt;/code&gt;</ph> <ph id=\"ph3\">&amp;gt;</ph> the length of <ph id=\"ph4\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","pos":[68,144],"source":"<code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> +</ph> count <ph id=\"ph3\">&amp;gt;</ph> the length of <ph id=\"ph4\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","pos":[151,229],"source":"       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."}]},{"pos":[125781,125884],"content":"The read operation failed. Check the inner exception, if present to determine the cause of the failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"The read operation failed. Check the inner exception, if present to determine the cause of the failure.","pos":[0,103],"nodes":[{"content":"The read operation failed.","pos":[0,26]},{"content":"Check the inner exception, if present to determine the cause of the failure.","pos":[27,103]}]}]},{"pos":[125987,126033],"content":"There is already a read operation in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is already a read operation in progress.","pos":[0,46]}]},{"pos":[126140,126168],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[126279,126311],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[126660,126733],"content":"Gets or sets the amount of time a read operation blocks waiting for data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time a read operation blocks waiting for data.","pos":[0,73]}]},{"pos":[126746,127212],"content":"This property returns the value returned by invoking <xref:System.IO.Stream.ReadTimeout%2A> on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not timeout.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property returns the value returned by invoking <xref:System.IO.Stream.ReadTimeout%2A> on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not timeout.","pos":[0,464],"nodes":[{"content":"This property returns the value returned by invoking &lt;xref:System.IO.Stream.ReadTimeout%2A&gt; on the underlying stream.","pos":[0,117],"source":"This property returns the value returned by invoking <xref:System.IO.Stream.ReadTimeout%2A> on the underlying stream."},{"content":"When you set this property, the &lt;xref:System.IO.Stream.ReadTimeout%2A&gt; value on the underlying stream is set to the specified value.","pos":[118,250],"source":" When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value."},{"content":"If the underlying stream is a &lt;xref:System.Net.Sockets.NetworkStream&gt;, ReadTimeout is in milliseconds and is set to &lt;xref:System.Threading.Timeout.Infinite&gt; by default so that read operations do not timeout.","pos":[257,464],"source":"       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not timeout."}]}]},{"pos":[127621,127732],"content":"A <xref:System.Int32> that specifies the amount of time that elapses before a synchronous read operation fails.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; that specifies the amount of time that elapses before a synchronous read operation fails.","pos":[0,111],"source":"A <xref:System.Int32> that specifies the amount of time that elapses before a synchronous read operation fails."}]},{"pos":[128183,128245],"content":"Gets the certificate used to authenticate the remote endpoint.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the certificate used to authenticate the remote endpoint.","pos":[0,62]}]},{"pos":[128792,128973],"content":"An X509Certificate object that represents the certificate supplied for authentication or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no certificate was supplied.","needQuote":true,"needEscape":true,"source":"An X509Certificate object that represents the certificate supplied for authentication or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no certificate was supplied."},{"pos":[129159,129201],"content":"Authentication failed or has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication failed or has not occurred.","pos":[0,42]}]},{"pos":[129637,129682],"content":"Throws a <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws a &lt;xref:System.NotSupportedException&gt;.","pos":[0,45],"source":"Throws a <xref:System.NotSupportedException>."}]},{"pos":[129694,129807],"content":"Do not call this method. It is inherited, but is not supported by the <xref:System.Net.Security.SslStream> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Do not call this method. It is inherited, but is not supported by the <xref:System.Net.Security.SslStream> class.","pos":[0,113],"nodes":[{"content":"Do not call this method.","pos":[0,24]},{"content":"It is inherited, but is not supported by the &lt;xref:System.Net.Security.SslStream&gt; class.","pos":[25,113],"source":" It is inherited, but is not supported by the <xref:System.Net.Security.SslStream> class."}]}]},{"pos":[129978,130000],"content":"This value is ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"This value is ignored.","pos":[0,22]}]},{"pos":[130070,130092],"content":"This value is ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"This value is ignored.","pos":[0,22]}]},{"pos":[130149,130201],"content":"Always throws a <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Always throws a &lt;xref:System.NotSupportedException&gt;.","pos":[0,52],"source":"Always throws a <xref:System.NotSupportedException>."}]},{"pos":[130366,130453],"content":"Seeking is not supported by <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.SslStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Seeking is not supported by <xref href=\"System.Net.Security.SslStream\"></xref> objects."},{"pos":[130839,130880],"content":"Sets the length of the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the length of the underlying stream.","pos":[0,41]}]},{"pos":[130892,131068],"content":"This method invokes <xref:System.IO.Stream.SetLength%2A?displayProperty=fullName> on the underlying stream specified when this <xref:System.Net.Security.SslStream> was created.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method invokes &lt;xref:System.IO.Stream.SetLength%2A?displayProperty=fullName&gt; on the underlying stream specified when this &lt;xref:System.Net.Security.SslStream&gt; was created.","pos":[0,176],"source":"This method invokes <xref:System.IO.Stream.SetLength%2A?displayProperty=fullName> on the underlying stream specified when this <xref:System.Net.Security.SslStream> was created."}]},{"pos":[131213,131282],"content":"An <xref:System.Int64> value that specifies the length of the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int64&gt; value that specifies the length of the stream.","pos":[0,69],"source":"An <xref:System.Int64> value that specifies the length of the stream."}]},{"pos":[131701,131788],"content":"Gets a value that indicates the security protocol used to authenticate this connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates the security protocol used to authenticate this connection.","pos":[0,87]}]},{"pos":[131800,132156],"content":"The supported security protocols are specified when the <xref:System.Net.Security.SslStream> is created. If no security protocol was passed to the constructor, the instance is created using <xref:System.Security.Authentication.SslProtocols>. The actual protocol used for authentication is selected based on the protocols supported by the client and server.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The supported security protocols are specified when the <xref:System.Net.Security.SslStream> is created. If no security protocol was passed to the constructor, the instance is created using <xref:System.Security.Authentication.SslProtocols>. The actual protocol used for authentication is selected based on the protocols supported by the client and server.","pos":[0,356],"nodes":[{"content":"The supported security protocols are specified when the &lt;xref:System.Net.Security.SslStream&gt; is created.","pos":[0,104],"source":"The supported security protocols are specified when the <xref:System.Net.Security.SslStream> is created."},{"content":"If no security protocol was passed to the constructor, the instance is created using &lt;xref:System.Security.Authentication.SslProtocols&gt;.","pos":[105,241],"source":" If no security protocol was passed to the constructor, the instance is created using <xref:System.Security.Authentication.SslProtocols>."},{"content":"The actual protocol used for authentication is selected based on the protocols supported by the client and server.","pos":[242,356]}]}]},{"pos":[132631,132745],"content":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.SslProtocols&gt; value that represents the protocol used for authentication.","pos":[0,114],"source":"The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."}]},{"pos":[133191,133285],"content":"Gets the <xref:System.Net.TransportContext> used for authentication using extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Net.TransportContext&gt; used for authentication using extended protection.","pos":[0,94],"source":"Gets the <xref:System.Net.TransportContext> used for authentication using extended protection."}]},{"pos":[133441,133562],"content":"The <xref:System.Net.TransportContext> object that contains the channel binding token (CBT) used for extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.TransportContext&gt; object that contains the channel binding token (CBT) used for extended protection.","pos":[0,121],"source":"The <xref:System.Net.TransportContext> object that contains the channel binding token (CBT) used for extended protection."}]},{"pos":[134010,134051],"content":"Writes the specified data to this stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes the specified data to this stream.","pos":[0,41]}]},{"pos":[134064,134723],"content":"This method blocks while the operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method blocks while the operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations.","pos":[0,655],"nodes":[{"content":"This method blocks while the operation completes.","pos":[0,49]},{"content":"To prevent blocking while the operation completes, use the &lt;xref:System.Net.Security.SslStream.BeginWrite%2A&gt; method.","pos":[50,167],"source":" To prevent blocking while the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method."},{"content":"You cannot call this method until you have successfully authenticated.","pos":[174,244]},{"content":"To authenticate call one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt;, or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt;, &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[245,545],"source":" To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."},{"content":"The &lt;xref:System.Net.Security.SslStream&gt; class does not support multiple simultaneous write operations.","pos":[552,655],"source":"       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations."}]}]},{"pos":[135171,135244],"content":"A <xref:System.Byte> array that supplies the bytes written to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that supplies the bytes written to the stream.","pos":[0,73],"source":"A <xref:System.Byte> array that supplies the bytes written to the stream."}]},{"pos":[135410,135494],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[135583,135610],"content":"The write operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The write operation failed.","pos":[0,27]}]},{"pos":[135713,135760],"content":"There is already a write operation in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is already a write operation in progress.","pos":[0,47]}]},{"pos":[135867,135895],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[136006,136038],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[136497,136610],"content":"Write the specified number of <xref:System.Byte>s to the underlying stream using the specified buffer and offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Write the specified number of &lt;xref:System.Byte&gt;s to the underlying stream using the specified buffer and offset.","pos":[0,113],"source":"Write the specified number of <xref:System.Byte>s to the underlying stream using the specified buffer and offset."}]},{"pos":[136623,137306],"content":"This method blocks while the operation completes. To prevent blocking while the operation completes the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method blocks while the operation completes. To prevent blocking while the operation completes the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations.","pos":[0,679],"nodes":[{"content":"This method blocks while the operation completes.","pos":[0,49]},{"content":"To prevent blocking while the operation completes the operation completes, use the &lt;xref:System.Net.Security.SslStream.BeginWrite%2A&gt; method.","pos":[50,191],"source":" To prevent blocking while the operation completes the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method."},{"content":"You cannot call this method until you have successfully authenticated.","pos":[198,268]},{"content":"To authenticate call one of the &lt;xref:System.Net.Security.SslStream.AuthenticateAsClient%2A&gt;, or &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.SslStream.AuthenticateAsServer%2A&gt;, &lt;xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[269,569],"source":" To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."},{"content":"The &lt;xref:System.Net.Security.SslStream&gt; class does not support multiple simultaneous write operations.","pos":[576,679],"source":"       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations."}]}]},{"pos":[137476,137549],"content":"A <xref:System.Byte> array that supplies the bytes written to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that supplies the bytes written to the stream.","pos":[0,73],"source":"A <xref:System.Byte> array that supplies the bytes written to the stream."}]},{"pos":[137611,137743],"content":"A &lt;xref:System.Int32&gt; that contains the zero-based location in <ph id=\"ph1\">`buffer`</ph> at which to begin reading bytes to be written to the stream.","needQuote":true,"needEscape":true,"source":"A <xref:System.Int32> that contains the zero-based location in `buffer` at which to begin reading bytes to be written to the stream."},{"pos":[137804,137882],"content":"A &lt;xref:System.Int32&gt; that contains the number of bytes to read from <ph id=\"ph1\">`buffer`</ph>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Int32> that contains the number of bytes to read from `buffer`."},{"pos":[138048,138132],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[138228,138465],"content":"<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\">     &lt;code&gt;&amp;lt;&lt;/code&gt;</ph><ph id=\"ph3\">     &lt;code&gt;0&lt;/code&gt;</ph>.","pos":[0,61],"source":"<code>offset</code>     <code>&lt;</code>     <code>0</code>."},{"content":"<ph id=\"ph1\">&lt;code&gt;-or-&lt;/code&gt;</ph><ph id=\"ph2\">&lt;code&gt;offset&lt;/code&gt;</ph> <ph id=\"ph3\">&amp;gt;</ph> the length of <ph id=\"ph4\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","pos":[68,144],"source":"<code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> +</ph> count <ph id=\"ph3\">&amp;gt;</ph> the length of <ph id=\"ph4\">&lt;code&gt;buffer&lt;/code&gt;</ph>.","pos":[151,229],"source":"       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."}]},{"pos":[138555,138582],"content":"The write operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The write operation failed.","pos":[0,27]}]},{"pos":[138685,138732],"content":"There is already a write operation in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is already a write operation in progress.","pos":[0,47]}]},{"pos":[138839,138867],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[138978,139010],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[139364,139438],"content":"Gets or sets the amount of time a write operation blocks waiting for data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time a write operation blocks waiting for data.","pos":[0,74]}]},{"pos":[139451,139908],"content":"This property returns the value returned by invoking <xref:System.IO.Stream.WriteTimeout%2A> on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not timeout.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property returns the value returned by invoking <xref:System.IO.Stream.WriteTimeout%2A> on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not timeout.","pos":[0,455],"nodes":[{"content":"This property returns the value returned by invoking &lt;xref:System.IO.Stream.WriteTimeout%2A&gt; on the underlying stream.","pos":[0,118],"source":"This property returns the value returned by invoking <xref:System.IO.Stream.WriteTimeout%2A> on the underlying stream."},{"content":"For set operations, the specified value sets the &lt;xref:System.IO.Stream.WriteTimeout%2A&gt; value on the underlying stream.","pos":[119,239],"source":" For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream."},{"content":"If the underlying stream is a &lt;xref:System.Net.Sockets.NetworkStream&gt;, WriteTimeout is in milliseconds and is set to &lt;xref:System.Threading.Timeout.Infinite&gt; by default so that write operations do not timeout.","pos":[246,455],"source":"       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not timeout."}]}]},{"pos":[140318,140430],"content":"A <xref:System.Int32> that specifies the amount of time that elapses before a synchronous write operation fails.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; that specifies the amount of time that elapses before a synchronous write operation fails.","pos":[0,112],"source":"A <xref:System.Int32> that specifies the amount of time that elapses before a synchronous write operation fails."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Security.SslStream\n  id: SslStream\n  children:\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream)\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)\n  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)\n  - System.Net.Security.SslStream.AuthenticateAsClient(System.String)\n  - System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)\n  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  - System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  - System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)\n  - System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)\n  - System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)\n  - System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Security.SslStream.CanRead\n  - System.Net.Security.SslStream.CanSeek\n  - System.Net.Security.SslStream.CanTimeout\n  - System.Net.Security.SslStream.CanWrite\n  - System.Net.Security.SslStream.CheckCertRevocationStatus\n  - System.Net.Security.SslStream.CipherAlgorithm\n  - System.Net.Security.SslStream.CipherStrength\n  - System.Net.Security.SslStream.Dispose(System.Boolean)\n  - System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)\n  - System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)\n  - System.Net.Security.SslStream.EndRead(System.IAsyncResult)\n  - System.Net.Security.SslStream.EndWrite(System.IAsyncResult)\n  - System.Net.Security.SslStream.Flush\n  - System.Net.Security.SslStream.HashAlgorithm\n  - System.Net.Security.SslStream.HashStrength\n  - System.Net.Security.SslStream.IsAuthenticated\n  - System.Net.Security.SslStream.IsEncrypted\n  - System.Net.Security.SslStream.IsMutuallyAuthenticated\n  - System.Net.Security.SslStream.IsServer\n  - System.Net.Security.SslStream.IsSigned\n  - System.Net.Security.SslStream.KeyExchangeAlgorithm\n  - System.Net.Security.SslStream.KeyExchangeStrength\n  - System.Net.Security.SslStream.Length\n  - System.Net.Security.SslStream.LocalCertificate\n  - System.Net.Security.SslStream.Position\n  - System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Security.SslStream.ReadTimeout\n  - System.Net.Security.SslStream.RemoteCertificate\n  - System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.Net.Security.SslStream.SetLength(System.Int64)\n  - System.Net.Security.SslStream.SslProtocol\n  - System.Net.Security.SslStream.TransportContext\n  - System.Net.Security.SslStream.Write(System.Byte[])\n  - System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Security.SslStream.WriteTimeout\n  langs:\n  - csharp\n  name: SslStream\n  nameWithType: SslStream\n  fullName: System.Net.Security.SslStream\n  type: Class\n  summary: Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client.\n  remarks: \"SSL protocols help to provide confidentiality and integrity checking for messages transmitted using an SslStream. An SSL connection, such as that provided by SslStream, should be used when communicating sensitive information between a client and a server. Using an SslStream helps to prevent anyone from reading and tampering with information while it is in transit on the network.  \\n  \\n An SslStream instance transmits data using a stream that you supply when creating the SslStream. When you supply this underlying stream, you have the option to specify whether closing the SslStream also closes the underlying stream. Typically, the SslStream class is used with the <xref:System.Net.Sockets.TcpClient> and <xref:System.Net.Sockets.TcpListener> classes. The <xref:System.Net.Sockets.TcpClient.GetStream%2A> method provides a <xref:System.Net.Sockets.NetworkStream> suitable for use with the SslStream class.  \\n  \\n After creating an SslStream, the server and optionally, the client must be authenticated. The server must provide an X509 certificate that establishes proof of its identity and can request that the client also do so. Authentication must be performed before transmitting information using an SslStream. Clients initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods, which do not block waiting for the authentication to complete. Servers initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods. Both client and server must initiate the authentication.  \\n  \\n The authentication is handled by the Security Support Provider (SSPI) channel provider. The client is given an opportunity to control validation of the server's certificate by specifying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate when creating an SslStream. The server can also control validation by supplying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate. The method referenced by the delegate includes the remote party's certificate and any errors SSPI encountered while validating the certificate. Note that if the server specifies a delegate, the delegate's method is invoked regardless of whether the server requested client authentication. If the server did not request client authentication, the server's delegate method receives a null certificate and an empty array of certificate errors.  \\n  \\n If the server requires client authentication, the client must specify one or more certificates for authentication. If the client has more than one certificate, the client can provide a <xref:System.Net.Security.LocalCertificateSelectionCallback> delegate to select the correct certificate for the server. The client's certificates must be located in the current user's \\\"My\\\" certificate store. Client authentication via certificates is not supported for the <xref:System.Security.Authentication.SslProtocols> (SSL version 2) protocol.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and the SslStream is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  \\n  \\n When the authentication process, also known as the SSL handshake, succeeds, the identity of the server (and optionally, the client) is established and the SslStream can be used by the client and server to exchange messages. Before sending or receiving information, the client and server should check the security services and levels provided by the SslStream to determine whether the protocol, algorithms, and strengths selected meet their requirements for integrity and confidentiality. If the current settings are not sufficient, the stream should be closed. You can check the security services provided by the SslStream using the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties. The following table shows the elements that report the cryptographic settings used for authentication, encryption and data signing.  \\n  \\n|Element|Members|  \\n|-------------|-------------|  \\n|The security protocol used to authenticate the server and, optionally, the client.|The <xref:System.Net.Security.SslStream.SslProtocol%2A> property and the associated <xref:System.Security.Authentication.SslProtocols> enumeration.|  \\n|The key exchange algorithm.|The <xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A> property and the associated <xref:System.Security.Authentication.ExchangeAlgorithmType> enumeration.|  \\n|The message integrity algorithm.|The <xref:System.Net.Security.SslStream.HashAlgorithm%2A> property and the associated <xref:System.Security.Authentication.HashAlgorithmType> enumeration.|  \\n|The message confidentiality algorithm.|The <xref:System.Net.Security.SslStream.CipherAlgorithm%2A> property and the associated <xref:System.Security.Authentication.CipherAlgorithmType> enumeration.|  \\n|The strengths of the selected algorithms.|The <xref:System.Net.Security.SslStream.KeyExchangeStrength%2A>, <xref:System.Net.Security.SslStream.HashStrength%2A>, and <xref:System.Net.Security.SslStream.CipherStrength%2A> properties.|  \\n  \\n After a successful authentication, you can send data using the synchronous <xref:System.Net.Security.SslStream.Write%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginWrite%2A> methods. You can receive data using the synchronous <xref:System.Net.Security.SslStream.Read%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginRead%2A> methods.  \\n  \\n If you specified to the <xref:System.Net.Security.SslStream.%23ctor%2A> that the underlying stream should be left open, you are responsible for closing that stream when you are done using it.  \\n  \\n> [!NOTE]\\n>  If the application that creates the SslStream object runs with the credentials of a Normal user, the application will not be able to access certificates installed in the local machine store unless permission has been explicitly given to the user to do so.  \\n  \\n SslStream assumes that a timeout along with any other <xref:System.IO.IOException> when one is thrown from the inner stream will be treated as fatal by its caller. Reusing a SslStream instance after a timeout will return garbage. An application should <xref:System.IO.Stream.Close%2A> the SslStream and throw an exception in these cases.  \\n  \\n The .NET Framework 4.6 includes a new security feature that blocks insecure cipher and hashing algorithms for connections. Applications using TLS/SSL through APIs such as HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. and targeting .NET Framework 4.6 get the more-secure behavior by default.  \\n  \\n Developers may want to opt out of this behavior in order to maintain interoperability with their existing SSL3 services OR TLS w/ RC4 services. [This article](https://support.microsoft.com/kb/3069494) explains how to modify your code so that the new behavior is disabled.  \\n  \\n The .NET Framework 4.6.3 adds new overloads for the methods that authenticate SslStreams that do not specify a TLS version, but instead use the TLS version defined as the system default in [SCHANNEL](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx). Use these methods in your app as a way to be able to later modify the defaults as TLS version best practice changes over time, without the need to rebuild and redeploy your app.\"\n  example:\n  - \"The following code example demonstrates creating an <xref:System.Net.Sockets.TcpListener> that uses the SslStream class to communicate with clients.  \\n  \\n [!code-cpp[NclSslServerSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_1.cpp)]\\n [!code-cs[NclSslServerSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_1.cs)]  \\n  \\n The following code example demonstrates creating a <xref:System.Net.Sockets.TcpClient> that uses the SslStream class to communicate with a server.  \\n  \\n [!code-cpp[NclSslClientSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_2.cpp)]\\n [!code-cs[NclSslClientSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_2.cs)]\"\n  syntax:\n    content: 'public class SslStream : System.Net.Security.AuthenticatedStream'\n  inheritance:\n  - System.IO.Stream\n  - System.Net.Security.AuthenticatedStream\n  implements: []\n  inheritedMembers:\n  - System.Net.Security.AuthenticatedStream.InnerStream\n  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: SslStream(Stream)\n  nameWithType: SslStream.SslStream(Stream)\n  fullName: System.Net.Security.SslStream.SslStream(Stream)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream>.\n  remarks: \"If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.  \\n  \\n The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.\"\n  syntax:\n    content: public SslStream (System.IO.Stream innerStream);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data.\n  overload: System.Net.Security.SslStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>innerStream</code> is not readable.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is not writable.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>innerStream</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.\"\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Boolean)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: SslStream(Stream,Boolean)\n  nameWithType: SslStream.SslStream(Stream,Boolean)\n  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream> and stream closure behavior.\n  remarks: \"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.  \\n  \\n If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.  \\n  \\n The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.\"\n  example:\n  - \"The following code example demonstrates calling this constructor.  \\n  \\n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_5_1.cpp)]\\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_5_1.cs)]\"\n  syntax:\n    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data.\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.\n  overload: System.Net.Security.SslStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>innerStream</code> is not readable.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is not writable.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>innerStream</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.\"\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)\n  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback)\n  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)\n  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream>, stream closure behavior and certificate validation delegate.\n  remarks: \"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.  \\n  \\n The `userCertificateValidationCallback` delegate's `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI). The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds.  \\n  \\n The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created.  \\n  \\n If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.  \\n  \\n The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (if there is one), or tries to reuse an anonymous sessions if <xref:System.Net.HttpWebRequest.ClientCertificates%2A> is empty.  \\n  \\n> [!NOTE]\\n>  Client certificates are not supported in the SSL version 2 protocol.\"\n  example:\n  - \"The following code example creates an <xref:System.Net.Security.SslStream> and initiates the client portion of the authentication.  \\n  \\n [!code-cpp[NclSslClientSync#4](~/add/codesnippet/cpp/9eaa69b2-6619-41cf-8f97-_1.cpp)]\\n [!code-cs[NclSslClientSync#4](~/add/codesnippet/csharp/9eaa69b2-6619-41cf-8f97-_1.cs)]\"\n  syntax:\n    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data.\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.\n    - id: userCertificateValidationCallback\n      type: System.Net.Security.RemoteCertificateValidationCallback\n      description: A <xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"></xref> delegate responsible for validating the certificate supplied by the remote party.\n  overload: System.Net.Security.SslStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>innerStream</code> is not readable.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is not writable.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>innerStream</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.\"\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)\n  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)\n  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)\n  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream>, stream closure behavior, certificate validation delegate and certificate selection delegate.\n  remarks: \"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.  \\n  \\n The `userCertificateValidationCallback` delegate's `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI). The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds.  \\n  \\n The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created.  \\n  \\n The `userCertificateSelectionCallback` delegate is useful when your application has multiple certificates and must dynamically choose a certificate. Certificates in the \\\"MY\\\" store are passed to the method invoked by the delegate.  \\n  \\n If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.  \\n  \\n The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of P:System.Net.HttpWebRequest.ClientCertificates (if there is one), or tries to reuse an anonymous sessions if P:System.Net.HttpWebRequest.ClientCertificates is empty.\"\n  example:\n  - \"The following code example demonstrates calling this constructor. This example is part of a larger example provided for the <xref:System.Net.Security.SslStream> class.  \\n  \\n [!code-cpp[NclSslClientAsync#6](~/add/codesnippet/cpp/dc8fc9af-8c2a-4c30-be77-_1.cpp)]\\n [!code-cs[NclSslClientAsync#6](~/add/codesnippet/csharp/dc8fc9af-8c2a-4c30-be77-_1.cs)]\"\n  syntax:\n    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data.\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.\n    - id: userCertificateValidationCallback\n      type: System.Net.Security.RemoteCertificateValidationCallback\n      description: A <xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"></xref> delegate responsible for validating the certificate supplied by the remote party.\n    - id: userCertificateSelectionCallback\n      type: System.Net.Security.LocalCertificateSelectionCallback\n      description: A <xref href=\"System.Net.Security.LocalCertificateSelectionCallback\"></xref> delegate responsible for selecting the certificate used for authentication.\n  overload: System.Net.Security.SslStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>innerStream</code> is not readable.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is not writable.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>innerStream</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.\"\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)\n  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)'\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)\n  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)\n  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.SslStream\"></xref> class using the specified <xref:System.IO.Stream>\n  remarks: The use of the Null cipher is required when the `encryptionPolicy` parameter is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.\n  syntax:\n    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, System.Net.Security.EncryptionPolicy encryptionPolicy);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data.\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.SslStream\"></xref> for sending and receiving data. This parameter indicates if the inner stream is left open.\n    - id: userCertificateValidationCallback\n      type: System.Net.Security.RemoteCertificateValidationCallback\n      description: A <xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"></xref> delegate responsible for validating the certificate supplied by the remote party.\n    - id: userCertificateSelectionCallback\n      type: System.Net.Security.LocalCertificateSelectionCallback\n      description: A <xref href=\"System.Net.Security.LocalCertificateSelectionCallback\"></xref> delegate responsible for selecting the certificate used for authentication.\n    - id: encryptionPolicy\n      type: System.Net.Security.EncryptionPolicy\n      description: The <xref href=\"System.Net.Security.EncryptionPolicy\"></xref> to use.\n  overload: System.Net.Security.SslStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>innerStream</code> is not readable.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is not writable.  \\n  \\n -or-  \\n  \\n <code>encryptionPolicy</code> is not valid.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>innerStream</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.\"\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String)\n  id: AuthenticateAsClient(System.String)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(String)\n  nameWithType: SslStream.AuthenticateAsClient(String)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the server and optionally the client in a client-server connection.\n  remarks: \"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication. The value specified for `targetHost` must match the name on the server's certificate.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\"\n  syntax:\n    content: public virtual void AuthenticateAsClient (string targetHost);\n    parameters:\n    - id: targetHost\n      type: System.String\n      description: The name of the server that shares this <xref href=\"System.Net.Security.SslStream\"></xref>.\n  overload: System.Net.Security.SslStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Server authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  id: AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)\n  nameWithType: SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collection and SSL protocol.\n  remarks: \"When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  \\n  \\n> [!NOTE]\\n>  Client certificates are not supported in the SSL version 2 protocol.\"\n  syntax:\n    content: public virtual void AuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);\n    parameters:\n    - id: targetHost\n      type: System.String\n      description: The name of the server that will share this <xref href=\"System.Net.Security.SslStream\"></xref>.\n    - id: clientCertificates\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n      description: The <xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"></xref> that contains client certificates.\n    - id: enabledSslProtocols\n      type: System.Security.Authentication.SslProtocols\n      description: The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.\n    - id: checkCertificateRevocation\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.\n  overload: System.Net.Security.SslStream.AuthenticateAsClient*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)\n  id: AuthenticateAsClientAsync(System.String)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(String)\n  nameWithType: SslStream.AuthenticateAsClientAsync(String)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation.\n  remarks: \"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication. The value specified for `targetHost` must match the name on the server's certificate.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost);\n    parameters:\n    - id: targetHost\n      type: System.String\n      description: The name of the server that shares this <xref href=\"System.Net.Security.SslStream\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.SslStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Server authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  id: AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)\n  nameWithType: SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation. The authentication process uses the specified certificate collection and SSL protocol.\n  remarks: \"When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  \\n  \\n> [!NOTE]\\n>  Client certificates are not supported in the SSL version 2 protocol.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);\n    parameters:\n    - id: targetHost\n      type: System.String\n      description: The name of the server that will share this <xref href=\"System.Net.Security.SslStream\"></xref>.\n    - id: clientCertificates\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n      description: The <xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"></xref> that contains client certificates.\n    - id: enabledSslProtocols\n      type: System.Security.Authentication.SslProtocols\n      description: The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.\n    - id: checkCertificateRevocation\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.SslStream.AuthenticateAsClientAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer(X509Certificate)\n  nameWithType: SslStream.AuthenticateAsServer(X509Certificate)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate.\n  remarks: \"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\"\n  syntax:\n    content: public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);\n    parameters:\n    - id: serverCertificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: The certificate used to authenticate the server.\n  overload: System.Net.Security.SslStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Client authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <xref:System.Net.Security.SslStream.AuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  id: AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)\n  nameWithType: SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol.\n  remarks: \"This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\"\n  syntax:\n    content: public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);\n    parameters:\n    - id: serverCertificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: The X509Certificate used to authenticate the server.\n    - id: clientCertificateRequired\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.\n    - id: enabledSslProtocols\n      type: System.Security.Authentication.SslProtocols\n      description: The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.\n    - id: checkCertificateRevocation\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.\n  overload: System.Net.Security.SslStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Client authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <xref:System.Net.Security.SslStream.AuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync(X509Certificate)\n  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate as an asynchronous operation.\n  remarks: \"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);\n    parameters:\n    - id: serverCertificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: The certificate used to authenticate the server.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.SslStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Client authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*> method is not supported on Windows 95, Windows 98, or Windows Millennium.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)\n  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol as an asynchronous operation.\n  remarks: If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);\n    parameters:\n    - id: serverCertificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: The X509Certificate used to authenticate the server.\n    - id: clientCertificateRequired\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.\n    - id: enabledSslProtocols\n      type: System.Security.Authentication.SslProtocols\n      description: The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.\n    - id: checkCertificateRevocation\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.SslStream.AuthenticateAsServerAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(String,AsyncCallback,Object)\n  nameWithType: SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the server and optionally the client.\n  remarks: \"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication.  \\n  \\n The value specified for `targetHost` must match the name on the server's certificate.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \\n  \\n This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: targetHost\n      type: System.String\n      description: The name of the server that shares this <xref href=\"System.Net.Security.SslStream\"></xref>.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.\n  overload: System.Net.Security.SslStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Server authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)\n  nameWithType: SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates and security protocol.\n  remarks: \"The value specified for `targetHost` must match the name on the server's certificate.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \\n  \\n This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  \\n  \\n> [!NOTE]\\n>  Client certificates are not supported in the SSL version 2 protocol.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: targetHost\n      type: System.String\n      description: The name of the server that shares this <xref href=\"System.Net.Security.SslStream\"></xref>.\n    - id: clientCertificates\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n      description: The <xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"></xref> containing client certificates.\n    - id: enabledSslProtocols\n      type: System.Security.Authentication.SslProtocols\n      description: The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.\n    - id: checkCertificateRevocation\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.\n  overload: System.Net.Security.SslStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Server authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)\n  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client and optionally the server in a client-server connection.\n  remarks: \"This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \\n  \\n This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: serverCertificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: The X509Certificate used to authenticate the server.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.SslStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Client authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)\n  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates, requirements and security protocol.\n  remarks: \"The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \\n  \\n This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: serverCertificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: The X509Certificate used to authenticate the server.\n    - id: clientCertificateRequired\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request.\n    - id: enabledSslProtocols\n      type: System.Security.Authentication.SslProtocols\n      description: The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.\n    - id: checkCertificateRevocation\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.\n  overload: System.Net.Security.SslStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>serverCertificate</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n -or-  \\n  \\n Server authentication using this <xref href=\\\"System.Net.Security.SslStream\\\"></xref> was tried previously.  \\n  \\n -or-  \\n  \\n Authentication is already in progress.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.\n  remarks: \"If encryption and or signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and/or decrypts it. The asynchronous read operation must be completed by calling the <xref:System.Net.Security.SslStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \\n  \\n This method does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.SslStream.Read%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous read operations.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates starting an asynchronous read operation.  \\n  \\n [!code-cpp[NclSslClientAsync#8](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_1.cpp)]\\n [!code-cs[NclSslClientAsync#8](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_1.cs)]  \\n  \\n [!code-cpp[NclSslClientAsync#4](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_2.cpp)]\\n [!code-cs[NclSslClientAsync#4](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_2.cs)]  \\n  \\n The following method is called when the read completes.  \\n  \\n [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_3.cpp)]\\n [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_3.cs)]\"\n  syntax:\n    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that receives the bytes read from the stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based location in `buffer` at which to begin storing the data read from this stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read from the stream.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the read operation is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object that contains information about the read operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.\n  overload: System.Net.Security.SslStream.BeginRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset</code>\\n    <code>&lt;</code>\\n    <code>0</code>.  \\n  \\n <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.  \\n  \\n -or-  \\n  \\n <code>offset</code> + count &gt; the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The read operation failed.  \\n  \\n -or-  \\n  \\n Encryption is in use, but the data could not be decrypted.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a read operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Begins an asynchronous write operation that writes <xref:System.Byte>s from the specified buffer to the stream.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cs[NclSslServerAsync#5](~/add/codesnippet/csharp/7192cc61-a256-4249-aafa-_1.cs)]\\n [!code-cpp[NclSslServerAsync#5](~/add/codesnippet/cpp/7192cc61-a256-4249-aafa-_1.cpp)]\"\n  syntax:\n    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that supplies the bytes to be written to the stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based location in `buffer` at which to begin reading bytes to be written to the stream.\n    - id: count\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the number of bytes to read from `buffer`.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the write operation is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object that contains information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.SslStream.BeginWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset</code>\\n    <code>&lt;</code>\\n    <code>0</code>.  \\n  \\n <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.  \\n  \\n -or-  \\n  \\n <code>offset</code> + count &gt; the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The write operation failed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a write operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.CanRead\n  id: CanRead\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: SslStream.CanRead\n  fullName: System.Net.Security.SslStream.CanRead\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the underlying stream is readable.\n  remarks: \"If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanRead%2A> on the underlying stream.  \\n  \\n The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_14_1.cpp)]\\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_14_1.cs)]\"\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication has occurred and the underlying stream is readable; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.CanRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.CanSeek\n  id: CanSeek\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: SslStream.CanSeek\n  fullName: System.Net.Security.SslStream.CanSeek\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the underlying stream is seekable.\n  remarks: \"Do not attempt to set the position of the <xref:System.Net.Security.SslStream> object or its underlying stream.  \\n  \\n The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.\"\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.CanSeek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.CanTimeout\n  id: CanTimeout\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: CanTimeout\n  nameWithType: SslStream.CanTimeout\n  fullName: System.Net.Security.SslStream.CanTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the underlying stream supports time-outs.\n  remarks: \"This property returns the value returned by invoking <xref:System.IO.Stream.CanTimeout%2A> on the underlying stream.  \\n  \\n The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_8_1.cpp)]\\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_8_1.cs)]\"\n  syntax:\n    content: public override bool CanTimeout { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the underlying stream supports time-outs; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.CanTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.CanWrite\n  id: CanWrite\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: SslStream.CanWrite\n  fullName: System.Net.Security.SslStream.CanWrite\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the underlying stream is writable.\n  remarks: \"If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanWrite%2A> on the underlying stream.  \\n  \\n The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_17_1.cpp)]\\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_17_1.cs)]\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication has occurred and the underlying stream is writable; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.CanWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.CheckCertRevocationStatus\n  id: CheckCertRevocationStatus\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: CheckCertRevocationStatus\n  nameWithType: SslStream.CheckCertRevocationStatus\n  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the certificate revocation list is checked during the certificate validation process.\n  remarks: The certificate revocation list contains certificates that have been revoked by the issuer. Checking the list negatively impacts performance but improves application security.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_4_1.cpp)]\\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_4_1.cs)]\"\n  syntax:\n    content: public virtual bool CheckCertRevocationStatus { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the certificate revocation list is checked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.CheckCertRevocationStatus*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.CipherAlgorithm\n  id: CipherAlgorithm\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: CipherAlgorithm\n  nameWithType: SslStream.CipherAlgorithm\n  fullName: System.Net.Security.SslStream.CipherAlgorithm\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a value that identifies the bulk encryption algorithm used by this <xref href=\"System.Net.Security.SslStream\"></xref>.\n  remarks: \"A value of <xref:System.Security.Authentication.CipherAlgorithmType> is required for the CipherAlgorithm property when the <xref:System.Net.Security.EncryptionPolicy> enumeration value is used to construct a <xref:System.Net.Security.SslStream> instance.  \\n  \\n [!INCLUDE[winxpsvr](~/add/includes/winxpsvr-md.md)] and [!INCLUDE[winxp](~/add/includes/winxp-md.md)] do not support the <xref:System.Security.Authentication.CipherAlgorithmType> value. So even if the <xref:System.Security.Authentication.CipherAlgorithmType> value is used to construct the <xref:System.Net.Security.SslStream> instance, the <xref:System.Net.Security.EncryptionPolicy> property will be <xref:System.Security.Authentication.CipherAlgorithmType>. The <xref:System.Security.Authentication.CipherAlgorithmType> value is only returned on Windows Vista and later.\"\n  example:\n  - \"The following code example displays the cryptography settings for the specified stream.  \\n  \\n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_10_1.cpp)]\\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_10_1.cs)]\"\n  syntax:\n    content: public virtual System.Security.Authentication.CipherAlgorithmType CipherAlgorithm { get; }\n    return:\n      type: System.Security.Authentication.CipherAlgorithmType\n      description: A <xref:System.Security.Authentication.CipherAlgorithmType> value.\n  overload: System.Net.Security.SslStream.CipherAlgorithm*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The CipherAlgorithm property was accessed before the completion of the authentication process or the authentication process failed.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.CipherStrength\n  id: CipherStrength\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: CipherStrength\n  nameWithType: SslStream.CipherStrength\n  fullName: System.Net.Security.SslStream.CipherStrength\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a value that identifies the strength of the cipher algorithm used by this <xref href=\"System.Net.Security.SslStream\"></xref>.\n  remarks: \"The value of this property is zero until the authentication occurs.  \\n  \\n This property returns one of the following values:  \\n  \\n-   0  \\n  \\n-   40  \\n  \\n-   56  \\n  \\n-   80  \\n  \\n-   128  \\n  \\n-   168  \\n  \\n-   192  \\n  \\n-   256\"\n  example:\n  - \"The following code example displays the cryptography settings for the specified stream.  \\n  \\n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_6_1.cpp)]\\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_6_1.cs)]\"\n  syntax:\n    content: public virtual int CipherStrength { get; }\n    return:\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the strength of the algorithm, in bits.\n  overload: System.Net.Security.SslStream.CipherStrength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SslStream.Dispose(Boolean)\n  fullName: System.Net.Security.SslStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Security.SslStream\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.SslStream> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Net.Security.SslStream.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)\n  id: EndAuthenticateAsClient(System.IAsyncResult)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: EndAuthenticateAsClient(IAsyncResult)\n  nameWithType: SslStream.EndAuthenticateAsClient(IAsyncResult)\n  fullName: System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Ends a pending asynchronous server authentication operation started with a previous call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>.\n  remarks: \"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  \\n  \\n To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> methods.\"\n  syntax:\n    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>.\n  overload: System.Net.Security.SslStream.EndAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no pending server authentication to complete.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)\n  id: EndAuthenticateAsServer(System.IAsyncResult)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: EndAuthenticateAsServer(IAsyncResult)\n  nameWithType: SslStream.EndAuthenticateAsServer(IAsyncResult)\n  fullName: System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Ends a pending asynchronous client authentication operation started with a previous call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>.\n  remarks: \"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.  \\n  \\n To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method.\"\n  syntax:\n    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>.\n  overload: System.Net.Security.SslStream.EndAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed and left this object in an unusable state.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no pending client authentication to complete.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.EndRead(System.IAsyncResult)\n  id: EndRead(System.IAsyncResult)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: EndRead(IAsyncResult)\n  nameWithType: SslStream.EndRead(IAsyncResult)\n  fullName: System.Net.Security.SslStream.EndRead(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Ends an asynchronous read operation started with a previous call to <xref:System.Net.Security.SslStream.BeginRead*>.\n  remarks: \"If the operation has not completed, this method blocks until it does.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Read%2A> method.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates ending an asynchronous read operation.  \\n  \\n [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/m-system.net.security.ss_0_1.cpp)]\\n [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/m-system.net.security.ss_0_1.cs)]\"\n  syntax:\n    content: public override int EndRead (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginRead*>\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream.\n  overload: System.Net.Security.SslStream.EndRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginRead*>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The read operation failed.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.EndWrite(System.IAsyncResult)\n  id: EndWrite(System.IAsyncResult)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: EndWrite(IAsyncResult)\n  nameWithType: SslStream.EndWrite(IAsyncResult)\n  fullName: System.Net.Security.SslStream.EndWrite(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Ends an asynchronous write operation started with a previous call to <xref:System.Net.Security.SslStream.BeginWrite*>.\n  remarks: \"If the operation has not completed, this method blocks until it does.  \\n  \\n An application cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Write%2A> method.\"\n  example:\n  - \"The following code example demonstrates ending an asynchronous write operation.  \\n  \\n [!code-cs[NclSslServerAsync#4](~/add/codesnippet/csharp/m-system.net.security.ss_1_1.cs)]\\n [!code-cpp[NclSslServerAsync#4](~/add/codesnippet/cpp/m-system.net.security.ss_1_1.cpp)]\"\n  syntax:\n    content: public override void EndWrite (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginWrite*>\n  overload: System.Net.Security.SslStream.EndWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginWrite*>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The write operation failed.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.Flush\n  id: Flush\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: SslStream.Flush()\n  fullName: System.Net.Security.SslStream.Flush()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Causes any buffered data to be written to the underlying device.\n  remarks: This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cpp[NclSslClientSync#5](~/add/codesnippet/cpp/m-system.net.security.ss_4_1.cpp)]\\n [!code-cs[NclSslClientSync#5](~/add/codesnippet/csharp/m-system.net.security.ss_4_1.cs)]\"\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.Net.Security.SslStream.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.HashAlgorithm\n  id: HashAlgorithm\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: SslStream.HashAlgorithm\n  fullName: System.Net.Security.SslStream.HashAlgorithm\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets the algorithm used for generating message authentication codes (MACs).\n  remarks: Message authentication algorithms generate message hashes and signatures used to detect tampering and forgery.\n  example:\n  - \"The following code example displays the cryptography settings for the specified stream.  \\n  \\n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_9_1.cpp)]\\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_9_1.cs)]\"\n  syntax:\n    content: public virtual System.Security.Authentication.HashAlgorithmType HashAlgorithm { get; }\n    return:\n      type: System.Security.Authentication.HashAlgorithmType\n      description: A <xref:System.Security.Authentication.HashAlgorithmType> value.\n  overload: System.Net.Security.SslStream.HashAlgorithm*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The HashAlgorithm property was accessed before the completion of the authentication process or the authentication process failed.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.HashStrength\n  id: HashStrength\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: HashStrength\n  nameWithType: SslStream.HashStrength\n  fullName: System.Net.Security.SslStream.HashStrength\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a value that identifies the strength of the hash algorithm used by this instance.\n  remarks: The value of this property is zero until the authentication occurs.\n  example:\n  - \"The following code example displays the cryptography settings for the specified stream.  \\n  \\n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_2_1.cpp)]\\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_2_1.cs)]\"\n  syntax:\n    content: public virtual int HashStrength { get; }\n    return:\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.HashAlgorithmType> algorithm, in bits. Valid values are 128 or 160.\n  overload: System.Net.Security.SslStream.HashStrength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: IsAuthenticated\n  nameWithType: SslStream.IsAuthenticated\n  fullName: System.Net.Security.SslStream.IsAuthenticated\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether authentication was successful.\n  remarks: Clients authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_3_1.cpp)]\\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_3_1.cs)]\"\n  syntax:\n    content: public override bool IsAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if successful authentication occurred; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.IsAuthenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.IsEncrypted\n  id: IsEncrypted\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: IsEncrypted\n  nameWithType: SslStream.IsEncrypted\n  fullName: System.Net.Security.SslStream.IsEncrypted\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether this <xref href=\"System.Net.Security.SslStream\"></xref> uses data encryption.\n  remarks: Encryption helps to protect the privacy of the data, namely it helps to ensure that while data is in transit, it cannot be deciphered by third parties.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_0_1.cpp)]\\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_0_1.cs)]\"\n  syntax:\n    content: public override bool IsEncrypted { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.IsEncrypted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated\n  id: IsMutuallyAuthenticated\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: IsMutuallyAuthenticated\n  nameWithType: SslStream.IsMutuallyAuthenticated\n  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether both server and client have been authenticated.\n  remarks: Mutual authentication is specified by the server when the server wants the client to provide a certificate for authentication.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_11_1.cpp)]\\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_11_1.cs)]\"\n  syntax:\n    content: public override bool IsMutuallyAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the server has been authenticated; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.IsMutuallyAuthenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.IsServer\n  id: IsServer\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: IsServer\n  nameWithType: SslStream.IsServer\n  fullName: System.Net.Security.SslStream.IsServer\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the local side of the connection used by this <xref href=\"System.Net.Security.SslStream\"></xref> was authenticated as the server.\n  remarks: \"If authentication failed or did not occur, this property returns `false`.  \\n  \\n To authenticate as the server, call the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_13_1.cpp)]\\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_13_1.cs)]\"\n  syntax:\n    content: public override bool IsServer { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.IsServer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.IsSigned\n  id: IsSigned\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: IsSigned\n  nameWithType: SslStream.IsSigned\n  fullName: System.Net.Security.SslStream.IsSigned\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the data sent using this stream is signed.\n  remarks: Data signing helps to protect the integrity of the data, namely it helps the recipient determine whether the data has been tampered with while in transit.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_19_1.cpp)]\\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_19_1.cs)]\"\n  syntax:\n    content: public override bool IsSigned { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the data is signed before being transmitted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.SslStream.IsSigned*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: SslStream.KeyExchangeAlgorithm\n  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets the key exchange algorithm used by this <xref href=\"System.Net.Security.SslStream\"></xref>.\n  remarks: \"The value of this property is <xref:System.Security.Authentication.ExchangeAlgorithmType> until the authentication occurs.  \\n  \\n The key exchange algorithm protects information used to generate shared keys.\"\n  example:\n  - \"The following code example displays the cryptography settings for the specified stream.  \\n  \\n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_16_1.cpp)]\\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_16_1.cs)]\"\n  syntax:\n    content: public virtual System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm { get; }\n    return:\n      type: System.Security.Authentication.ExchangeAlgorithmType\n      description: An <xref:System.Security.Authentication.ExchangeAlgorithmType> value.\n  overload: System.Net.Security.SslStream.KeyExchangeAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.KeyExchangeStrength\n  id: KeyExchangeStrength\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: KeyExchangeStrength\n  nameWithType: SslStream.KeyExchangeStrength\n  fullName: System.Net.Security.SslStream.KeyExchangeStrength\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a value that identifies the strength of the key exchange algorithm used by this instance.\n  remarks: \"The value of this property is zero until the authentication occurs.  \\n  \\n In common scenarios, the value of this property is one of the following:  \\n  \\n-   512  \\n  \\n-   768  \\n  \\n-   1024  \\n  \\n-   2048\"\n  example:\n  - \"The following code example displays the cryptography settings for the specified stream.  \\n  \\n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_5_1.cpp)]\\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_5_1.cs)]\"\n  syntax:\n    content: public virtual int KeyExchangeStrength { get; }\n    return:\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.ExchangeAlgorithmType> algorithm, in bits.\n  overload: System.Net.Security.SslStream.KeyExchangeStrength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.Length\n  id: Length\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: SslStream.Length\n  fullName: System.Net.Security.SslStream.Length\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets the length of the underlying stream.\n  remarks: This property returns the value returned by invoking <xref:System.IO.Stream.Length%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: \"A <xref:System.Int64>.  \\n  \\n The length of the underlying stream.\"\n  overload: System.Net.Security.SslStream.Length*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.LocalCertificate\n  id: LocalCertificate\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: LocalCertificate\n  nameWithType: SslStream.LocalCertificate\n  fullName: System.Net.Security.SslStream.LocalCertificate\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets the certificate used to authenticate the local endpoint.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates displaying the certificate returned by this property.  \\n  \\n [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_1_1.cpp)]\\n [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_1_1.cs)]\"\n  syntax:\n    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: An X509Certificate object that represents the certificate supplied for authentication or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no certificate was supplied.\n  overload: System.Net.Security.SslStream.LocalCertificate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication failed or has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.Position\n  id: Position\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: SslStream.Position\n  fullName: System.Net.Security.SslStream.Position\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets or sets the current position in the underlying stream.\n  remarks: This property returns the value returned by invoking <xref:System.IO.Stream.Position%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: \"A <xref:System.Int64>.  \\n  \\n The current position in the underlying stream.\"\n  overload: System.Net.Security.SslStream.Position*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"Setting this property is not supported.  \\n  \\n -or-  \\n  \\n Getting the value of this property is not supported when the underlying stream is a <xref href=\\\"System.Net.Sockets.NetworkStream\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: SslStream.Read(Byte[],Int32,Int32)\n  fullName: System.Net.Security.SslStream.Read(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Reads data from this stream and stores it in the specified array.\n  remarks: \"The method reads a maximum of `count` bytes from the stream and stores them in `buffer` beginning at `offset`. You cannot perform multiple simultaneous read operations.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n To perform this operation asynchronously, use the <xref:System.Net.Security.SslStream.BeginRead%2A> method.\"\n  example:\n  - \"The following code example demonstrates reading from an <xref:System.Net.Security.SslStream>.  \\n  \\n [!code-cpp[NclSslClientSync#6](~/add/codesnippet/cpp/m-system.net.security.ss_2_1.cpp)]\\n [!code-cs[NclSslClientSync#6](~/add/codesnippet/csharp/m-system.net.security.ss_2_1.cs)]\"\n  syntax:\n    content: public override int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that receives the bytes read from this stream.\n    - id: offset\n      type: System.Int32\n      description: A <xref:System.Int32> that contains the zero-based location in `buffer` at which to begin storing the data read from this stream.\n    - id: count\n      type: System.Int32\n      description: A <xref:System.Int32> that contains the maximum number of bytes to read from this stream.\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> value that specifies the number of bytes read. When there is no more data to be read, returns 0.\n  overload: System.Net.Security.SslStream.Read*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset</code>\\n    <code>&lt;</code>\\n    <code>0</code>.  \\n  \\n <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.  \\n  \\n -or-  \\n  \\n <code>offset</code> + count &gt; the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The read operation failed. Check the inner exception, if present to determine the cause of the failure.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a read operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.ReadTimeout\n  id: ReadTimeout\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: ReadTimeout\n  nameWithType: SslStream.ReadTimeout\n  fullName: System.Net.Security.SslStream.ReadTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets or sets the amount of time a read operation blocks waiting for data.\n  remarks: \"This property returns the value returned by invoking <xref:System.IO.Stream.ReadTimeout%2A> on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.  \\n  \\n If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not timeout.\"\n  example:\n  - \"The following code example demonstrates setting the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_18_1.cpp)]\\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_18_1.cs)]\"\n  syntax:\n    content: public override int ReadTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> that specifies the amount of time that elapses before a synchronous read operation fails.\n  overload: System.Net.Security.SslStream.ReadTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.RemoteCertificate\n  id: RemoteCertificate\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: RemoteCertificate\n  nameWithType: SslStream.RemoteCertificate\n  fullName: System.Net.Security.SslStream.RemoteCertificate\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets the certificate used to authenticate the remote endpoint.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates displaying the certificate returned by this property.  \\n  \\n [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_15_1.cpp)]\\n [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_15_1.cs)]\"\n  syntax:\n    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: An X509Certificate object that represents the certificate supplied for authentication or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no certificate was supplied.\n  overload: System.Net.Security.SslStream.RemoteCertificate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication failed or has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: SslStream.Seek(Int64,SeekOrigin)\n  fullName: System.Net.Security.SslStream.Seek(Int64,SeekOrigin)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Throws a <xref:System.NotSupportedException>.\n  remarks: Do not call this method. It is inherited, but is not supported by the <xref:System.Net.Security.SslStream> class.\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: This value is ignored.\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: This value is ignored.\n    return:\n      type: System.Int64\n      description: Always throws a <xref:System.NotSupportedException>.\n  overload: System.Net.Security.SslStream.Seek*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Seeking is not supported by <xref href=\"System.Net.Security.SslStream\"></xref> objects.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: SslStream.SetLength(Int64)\n  fullName: System.Net.Security.SslStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Sets the length of the underlying stream.\n  remarks: This method invokes <xref:System.IO.Stream.SetLength%2A?displayProperty=fullName> on the underlying stream specified when this <xref:System.Net.Security.SslStream> was created.\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: An <xref:System.Int64> value that specifies the length of the stream.\n  overload: System.Net.Security.SslStream.SetLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.SslProtocol\n  id: SslProtocol\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: SslProtocol\n  nameWithType: SslStream.SslProtocol\n  fullName: System.Net.Security.SslStream.SslProtocol\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a value that indicates the security protocol used to authenticate this connection.\n  remarks: The supported security protocols are specified when the <xref:System.Net.Security.SslStream> is created. If no security protocol was passed to the constructor, the instance is created using <xref:System.Security.Authentication.SslProtocols>. The actual protocol used for authentication is selected based on the protocols supported by the client and server.\n  example:\n  - \"The following example displays the security properties of the specified stream.  \\n  \\n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_7_1.cpp)]\\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_7_1.cs)]\"\n  syntax:\n    content: public virtual System.Security.Authentication.SslProtocols SslProtocol { get; }\n    return:\n      type: System.Security.Authentication.SslProtocols\n      description: The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication.\n  overload: System.Net.Security.SslStream.SslProtocol*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.TransportContext\n  id: TransportContext\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: TransportContext\n  nameWithType: SslStream.TransportContext\n  fullName: System.Net.Security.SslStream.TransportContext\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets the <xref:System.Net.TransportContext> used for authentication using extended protection.\n  syntax:\n    content: public System.Net.TransportContext TransportContext { get; }\n    return:\n      type: System.Net.TransportContext\n      description: The <xref:System.Net.TransportContext> object that contains the channel binding token (CBT) used for extended protection.\n  overload: System.Net.Security.SslStream.TransportContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.Write(System.Byte[])\n  id: Write(System.Byte[])\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: Write(Byte[])\n  nameWithType: SslStream.Write(Byte[])\n  fullName: System.Net.Security.SslStream.Write(Byte[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Writes the specified data to this stream.\n  remarks: \"This method blocks while the operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations.\"\n  example:\n  - \"The following code example demonstrates writing to an authenticated <xref:System.Net.Security.SslStream>.  \\n  \\n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_3_1.cpp)]\\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_3_1.cs)]\"\n  syntax:\n    content: public void Write (byte[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that supplies the bytes written to the stream.\n  overload: System.Net.Security.SslStream.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The write operation failed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a write operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: SslStream.Write(Byte[],Int32,Int32)\n  fullName: System.Net.Security.SslStream.Write(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Write the specified number of <xref:System.Byte>s to the underlying stream using the specified buffer and offset.\n  remarks: \"This method blocks while the operation completes. To prevent blocking while the operation completes the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations.\"\n  syntax:\n    content: public override void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that supplies the bytes written to the stream.\n    - id: offset\n      type: System.Int32\n      description: A <xref:System.Int32> that contains the zero-based location in `buffer` at which to begin reading bytes to be written to the stream.\n    - id: count\n      type: System.Int32\n      description: A <xref:System.Int32> that contains the number of bytes to read from `buffer`.\n  overload: System.Net.Security.SslStream.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset</code>\\n    <code>&lt;</code>\\n    <code>0</code>.  \\n  \\n <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.  \\n  \\n -or-  \\n  \\n <code>offset</code> + count &gt; the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The write operation failed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a write operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.SslStream.WriteTimeout\n  id: WriteTimeout\n  parent: System.Net.Security.SslStream\n  langs:\n  - csharp\n  name: WriteTimeout\n  nameWithType: SslStream.WriteTimeout\n  fullName: System.Net.Security.SslStream.WriteTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets or sets the amount of time a write operation blocks waiting for data.\n  remarks: \"This property returns the value returned by invoking <xref:System.IO.Stream.WriteTimeout%2A> on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.  \\n  \\n If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not timeout.\"\n  example:\n  - \"The following code example demonstrates setting the value of this property.  \\n  \\n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_12_1.cpp)]\\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_12_1.cs)]\"\n  syntax:\n    content: public override int WriteTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> that specifies the amount of time that elapses before a synchronous write operation fails.\n  overload: System.Net.Security.SslStream.WriteTimeout*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: System.Net.Security.AuthenticatedStream\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Authentication.AuthenticationException\n  parent: System.Security.Authentication\n  isExternal: false\n  name: AuthenticationException\n  nameWithType: AuthenticationException\n  fullName: System.Security.Authentication.AuthenticationException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SslStream(Stream)\n  nameWithType: SslStream.SslStream(Stream)\n  fullName: System.Net.Security.SslStream.SslStream(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SslStream(Stream,Boolean)\n  nameWithType: SslStream.SslStream(Stream,Boolean)\n  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback)\n  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)\n  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)\n- uid: System.Net.Security.RemoteCertificateValidationCallback\n  parent: System.Net.Security\n  isExternal: false\n  name: RemoteCertificateValidationCallback\n  nameWithType: RemoteCertificateValidationCallback\n  fullName: System.Net.Security.RemoteCertificateValidationCallback\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)\n  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)\n  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)\n- uid: System.Net.Security.LocalCertificateSelectionCallback\n  parent: System.Net.Security\n  isExternal: false\n  name: LocalCertificateSelectionCallback\n  nameWithType: LocalCertificateSelectionCallback\n  fullName: System.Net.Security.LocalCertificateSelectionCallback\n- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)\n  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)\n  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)\n- uid: System.Net.Security.EncryptionPolicy\n  parent: System.Net.Security\n  isExternal: false\n  name: EncryptionPolicy\n  nameWithType: EncryptionPolicy\n  fullName: System.Net.Security.EncryptionPolicy\n- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsClient(String)\n  nameWithType: SslStream.AuthenticateAsClient(String)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)\n  nameWithType: SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509CertificateCollection\n  nameWithType: X509CertificateCollection\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n- uid: System.Security.Authentication.SslProtocols\n  parent: System.Security.Authentication\n  isExternal: true\n  name: SslProtocols\n  nameWithType: SslProtocols\n  fullName: System.Security.Authentication.SslProtocols\n- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(String)\n  nameWithType: SslStream.AuthenticateAsClientAsync(String)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)\n  nameWithType: SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)\n- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsServer(X509Certificate)\n  nameWithType: SslStream.AuthenticateAsServer(X509Certificate)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate\n  nameWithType: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)\n  nameWithType: SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)\n- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsServerAsync(X509Certificate)\n  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate)\n- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)\n  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)\n  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(String,AsyncCallback,Object)\n  nameWithType: SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)\n  nameWithType: SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)\n  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)\n  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)\n- uid: System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Security.SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n- uid: System.Net.Security.SslStream.CanRead\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CanRead\n  nameWithType: SslStream.CanRead\n  fullName: System.Net.Security.SslStream.CanRead\n- uid: System.Net.Security.SslStream.CanSeek\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: SslStream.CanSeek\n  fullName: System.Net.Security.SslStream.CanSeek\n- uid: System.Net.Security.SslStream.CanTimeout\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: SslStream.CanTimeout\n  fullName: System.Net.Security.SslStream.CanTimeout\n- uid: System.Net.Security.SslStream.CanWrite\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: SslStream.CanWrite\n  fullName: System.Net.Security.SslStream.CanWrite\n- uid: System.Net.Security.SslStream.CheckCertRevocationStatus\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CheckCertRevocationStatus\n  nameWithType: SslStream.CheckCertRevocationStatus\n  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus\n- uid: System.Net.Security.SslStream.CipherAlgorithm\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CipherAlgorithm\n  nameWithType: SslStream.CipherAlgorithm\n  fullName: System.Net.Security.SslStream.CipherAlgorithm\n- uid: System.Security.Authentication.CipherAlgorithmType\n  parent: System.Security.Authentication\n  isExternal: true\n  name: CipherAlgorithmType\n  nameWithType: CipherAlgorithmType\n  fullName: System.Security.Authentication.CipherAlgorithmType\n- uid: System.Net.Security.SslStream.CipherStrength\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CipherStrength\n  nameWithType: SslStream.CipherStrength\n  fullName: System.Net.Security.SslStream.CipherStrength\n- uid: System.Net.Security.SslStream.Dispose(System.Boolean)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SslStream.Dispose(Boolean)\n  fullName: System.Net.Security.SslStream.Dispose(Boolean)\n- uid: System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: EndAuthenticateAsClient(IAsyncResult)\n  nameWithType: SslStream.EndAuthenticateAsClient(IAsyncResult)\n  fullName: System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult)\n- uid: System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: EndAuthenticateAsServer(IAsyncResult)\n  nameWithType: SslStream.EndAuthenticateAsServer(IAsyncResult)\n  fullName: System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult)\n- uid: System.Net.Security.SslStream.EndRead(System.IAsyncResult)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: SslStream.EndRead(IAsyncResult)\n  fullName: System.Net.Security.SslStream.EndRead(IAsyncResult)\n- uid: System.Net.Security.SslStream.EndWrite(System.IAsyncResult)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: SslStream.EndWrite(IAsyncResult)\n  fullName: System.Net.Security.SslStream.EndWrite(IAsyncResult)\n- uid: System.Net.Security.SslStream.Flush\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Flush()\n  nameWithType: SslStream.Flush()\n  fullName: System.Net.Security.SslStream.Flush()\n- uid: System.Net.Security.SslStream.HashAlgorithm\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: SslStream.HashAlgorithm\n  fullName: System.Net.Security.SslStream.HashAlgorithm\n- uid: System.Security.Authentication.HashAlgorithmType\n  parent: System.Security.Authentication\n  isExternal: true\n  name: HashAlgorithmType\n  nameWithType: HashAlgorithmType\n  fullName: System.Security.Authentication.HashAlgorithmType\n- uid: System.Net.Security.SslStream.HashStrength\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: HashStrength\n  nameWithType: SslStream.HashStrength\n  fullName: System.Net.Security.SslStream.HashStrength\n- uid: System.Net.Security.SslStream.IsAuthenticated\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: SslStream.IsAuthenticated\n  fullName: System.Net.Security.SslStream.IsAuthenticated\n- uid: System.Net.Security.SslStream.IsEncrypted\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsEncrypted\n  nameWithType: SslStream.IsEncrypted\n  fullName: System.Net.Security.SslStream.IsEncrypted\n- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: SslStream.IsMutuallyAuthenticated\n  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated\n- uid: System.Net.Security.SslStream.IsServer\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsServer\n  nameWithType: SslStream.IsServer\n  fullName: System.Net.Security.SslStream.IsServer\n- uid: System.Net.Security.SslStream.IsSigned\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsSigned\n  nameWithType: SslStream.IsSigned\n  fullName: System.Net.Security.SslStream.IsSigned\n- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: SslStream.KeyExchangeAlgorithm\n  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm\n- uid: System.Security.Authentication.ExchangeAlgorithmType\n  parent: System.Security.Authentication\n  isExternal: true\n  name: ExchangeAlgorithmType\n  nameWithType: ExchangeAlgorithmType\n  fullName: System.Security.Authentication.ExchangeAlgorithmType\n- uid: System.Net.Security.SslStream.KeyExchangeStrength\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: KeyExchangeStrength\n  nameWithType: SslStream.KeyExchangeStrength\n  fullName: System.Net.Security.SslStream.KeyExchangeStrength\n- uid: System.Net.Security.SslStream.Length\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Length\n  nameWithType: SslStream.Length\n  fullName: System.Net.Security.SslStream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.Security.SslStream.LocalCertificate\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: LocalCertificate\n  nameWithType: SslStream.LocalCertificate\n  fullName: System.Net.Security.SslStream.LocalCertificate\n- uid: System.Net.Security.SslStream.Position\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Position\n  nameWithType: SslStream.Position\n  fullName: System.Net.Security.SslStream.Position\n- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: SslStream.Read(Byte[],Int32,Int32)\n  fullName: System.Net.Security.SslStream.Read(Byte[],Int32,Int32)\n- uid: System.Net.Security.SslStream.ReadTimeout\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: SslStream.ReadTimeout\n  fullName: System.Net.Security.SslStream.ReadTimeout\n- uid: System.Net.Security.SslStream.RemoteCertificate\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: RemoteCertificate\n  nameWithType: SslStream.RemoteCertificate\n  fullName: System.Net.Security.SslStream.RemoteCertificate\n- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: SslStream.Seek(Int64,SeekOrigin)\n  fullName: System.Net.Security.SslStream.Seek(Int64,SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: true\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.Net.Security.SslStream.SetLength(System.Int64)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: SslStream.SetLength(Int64)\n  fullName: System.Net.Security.SslStream.SetLength(Int64)\n- uid: System.Net.Security.SslStream.SslProtocol\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SslProtocol\n  nameWithType: SslStream.SslProtocol\n  fullName: System.Net.Security.SslStream.SslProtocol\n- uid: System.Net.Security.SslStream.TransportContext\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: TransportContext\n  nameWithType: SslStream.TransportContext\n  fullName: System.Net.Security.SslStream.TransportContext\n- uid: System.Net.TransportContext\n  parent: System.Net\n  isExternal: true\n  name: TransportContext\n  nameWithType: TransportContext\n  fullName: System.Net.TransportContext\n- uid: System.Net.Security.SslStream.Write(System.Byte[])\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Write(Byte[])\n  nameWithType: SslStream.Write(Byte[])\n  fullName: System.Net.Security.SslStream.Write(Byte[])\n- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: SslStream.Write(Byte[],Int32,Int32)\n  fullName: System.Net.Security.SslStream.Write(Byte[],Int32,Int32)\n- uid: System.Net.Security.SslStream.WriteTimeout\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: SslStream.WriteTimeout\n  fullName: System.Net.Security.SslStream.WriteTimeout\n- uid: System.Net.Security.SslStream.#ctor*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SslStream\n  nameWithType: SslStream.SslStream\n- uid: System.Net.Security.SslStream.AuthenticateAsClient*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsClient\n  nameWithType: SslStream.AuthenticateAsClient\n- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsClientAsync\n  nameWithType: SslStream.AuthenticateAsClientAsync\n- uid: System.Net.Security.SslStream.AuthenticateAsServer*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsServer\n  nameWithType: SslStream.AuthenticateAsServer\n- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: AuthenticateAsServerAsync\n  nameWithType: SslStream.AuthenticateAsServerAsync\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginAuthenticateAsClient\n  nameWithType: SslStream.BeginAuthenticateAsClient\n- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginAuthenticateAsServer\n  nameWithType: SslStream.BeginAuthenticateAsServer\n- uid: System.Net.Security.SslStream.BeginRead*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginRead\n  nameWithType: SslStream.BeginRead\n- uid: System.Net.Security.SslStream.BeginWrite*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: BeginWrite\n  nameWithType: SslStream.BeginWrite\n- uid: System.Net.Security.SslStream.CanRead*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CanRead\n  nameWithType: SslStream.CanRead\n- uid: System.Net.Security.SslStream.CanSeek*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: SslStream.CanSeek\n- uid: System.Net.Security.SslStream.CanTimeout*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: SslStream.CanTimeout\n- uid: System.Net.Security.SslStream.CanWrite*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: SslStream.CanWrite\n- uid: System.Net.Security.SslStream.CheckCertRevocationStatus*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CheckCertRevocationStatus\n  nameWithType: SslStream.CheckCertRevocationStatus\n- uid: System.Net.Security.SslStream.CipherAlgorithm*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CipherAlgorithm\n  nameWithType: SslStream.CipherAlgorithm\n- uid: System.Net.Security.SslStream.CipherStrength*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: CipherStrength\n  nameWithType: SslStream.CipherStrength\n- uid: System.Net.Security.SslStream.Dispose*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Dispose\n  nameWithType: SslStream.Dispose\n- uid: System.Net.Security.SslStream.EndAuthenticateAsClient*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: EndAuthenticateAsClient\n  nameWithType: SslStream.EndAuthenticateAsClient\n- uid: System.Net.Security.SslStream.EndAuthenticateAsServer*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: EndAuthenticateAsServer\n  nameWithType: SslStream.EndAuthenticateAsServer\n- uid: System.Net.Security.SslStream.EndRead*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: EndRead\n  nameWithType: SslStream.EndRead\n- uid: System.Net.Security.SslStream.EndWrite*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: EndWrite\n  nameWithType: SslStream.EndWrite\n- uid: System.Net.Security.SslStream.Flush*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Flush\n  nameWithType: SslStream.Flush\n- uid: System.Net.Security.SslStream.HashAlgorithm*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: SslStream.HashAlgorithm\n- uid: System.Net.Security.SslStream.HashStrength*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: HashStrength\n  nameWithType: SslStream.HashStrength\n- uid: System.Net.Security.SslStream.IsAuthenticated*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: SslStream.IsAuthenticated\n- uid: System.Net.Security.SslStream.IsEncrypted*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsEncrypted\n  nameWithType: SslStream.IsEncrypted\n- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: SslStream.IsMutuallyAuthenticated\n- uid: System.Net.Security.SslStream.IsServer*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsServer\n  nameWithType: SslStream.IsServer\n- uid: System.Net.Security.SslStream.IsSigned*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: IsSigned\n  nameWithType: SslStream.IsSigned\n- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: SslStream.KeyExchangeAlgorithm\n- uid: System.Net.Security.SslStream.KeyExchangeStrength*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: KeyExchangeStrength\n  nameWithType: SslStream.KeyExchangeStrength\n- uid: System.Net.Security.SslStream.Length*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Length\n  nameWithType: SslStream.Length\n- uid: System.Net.Security.SslStream.LocalCertificate*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: LocalCertificate\n  nameWithType: SslStream.LocalCertificate\n- uid: System.Net.Security.SslStream.Position*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Position\n  nameWithType: SslStream.Position\n- uid: System.Net.Security.SslStream.Read*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Read\n  nameWithType: SslStream.Read\n- uid: System.Net.Security.SslStream.ReadTimeout*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: SslStream.ReadTimeout\n- uid: System.Net.Security.SslStream.RemoteCertificate*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: RemoteCertificate\n  nameWithType: SslStream.RemoteCertificate\n- uid: System.Net.Security.SslStream.Seek*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Seek\n  nameWithType: SslStream.Seek\n- uid: System.Net.Security.SslStream.SetLength*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SetLength\n  nameWithType: SslStream.SetLength\n- uid: System.Net.Security.SslStream.SslProtocol*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: SslProtocol\n  nameWithType: SslStream.SslProtocol\n- uid: System.Net.Security.SslStream.TransportContext*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: TransportContext\n  nameWithType: SslStream.TransportContext\n- uid: System.Net.Security.SslStream.Write*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: Write\n  nameWithType: SslStream.Write\n- uid: System.Net.Security.SslStream.WriteTimeout*\n  parent: System.Net.Security.SslStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: SslStream.WriteTimeout\n"}