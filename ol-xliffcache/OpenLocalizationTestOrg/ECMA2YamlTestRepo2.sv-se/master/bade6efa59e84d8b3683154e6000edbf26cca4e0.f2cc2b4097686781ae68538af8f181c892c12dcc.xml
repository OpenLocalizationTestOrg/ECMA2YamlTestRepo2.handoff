{"nodes":[{"pos":[967,1124],"content":"Indicates a serializer for the serialization manager to use to serialize the values of the type this attribute is applied to. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates a serializer for the serialization manager to use to serialize the values of the type this attribute is applied to. This class cannot be inherited.","pos":[0,157],"nodes":[{"content":"Indicates a serializer for the serialization manager to use to serialize the values of the type this attribute is applied to.","pos":[0,125]},{"content":"This class cannot be inherited.","pos":[126,157]}]}]},{"pos":[1136,1524],"content":"DesignerSerializerAttribute provides a way to indicate to the designer serialization manager that a specific type of serializer should be used when serializing the values of an object. This allows you to specify a serializer that is capable of serializing a custom type, for instance. Place this attribute on a class to indicate the serialization object to use when serializing the class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"DesignerSerializerAttribute provides a way to indicate to the designer serialization manager that a specific type of serializer should be used when serializing the values of an object. This allows you to specify a serializer that is capable of serializing a custom type, for instance. Place this attribute on a class to indicate the serialization object to use when serializing the class.","pos":[0,388],"nodes":[{"content":"DesignerSerializerAttribute provides a way to indicate to the designer serialization manager that a specific type of serializer should be used when serializing the values of an object.","pos":[0,184]},{"content":"This allows you to specify a serializer that is capable of serializing a custom type, for instance.","pos":[185,284]},{"content":"Place this attribute on a class to indicate the serialization object to use when serializing the class.","pos":[285,388]}]}]},{"pos":[2932,3064],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"></xref> class."},{"pos":[3273,3333],"content":"The fully qualified name of the data type of the serializer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified name of the data type of the serializer.","pos":[0,60]}]},{"pos":[3412,3580],"content":"The fully qualified name of the base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified name of the base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.","pos":[0,168],"nodes":[{"content":"The fully qualified name of the base data type of the serializer.","pos":[0,65]},{"content":"Multiple serializers can be supplied for a class as long as the serializers have different base types.","pos":[66,168]}]}]},{"pos":[4334,4466],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"></xref> class."},{"pos":[4669,4729],"content":"The fully qualified name of the data type of the serializer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified name of the data type of the serializer.","pos":[0,60]}]},{"pos":[4802,4942],"content":"The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.","needQuote":true,"needEscape":true,"nodes":[{"content":"The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.","pos":[0,140],"nodes":[{"content":"The base data type of the serializer.","pos":[0,37]},{"content":"Multiple serializers can be supplied for a class as long as the serializers have different base types.","pos":[38,140]}]}]},{"pos":[5686,5818],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"></xref> class."},{"pos":[6009,6041],"content":"The data type of the serializer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data type of the serializer.","pos":[0,32]}]},{"pos":[6114,6254],"content":"The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.","needQuote":true,"needEscape":true,"nodes":[{"content":"The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.","pos":[0,140],"nodes":[{"content":"The base data type of the serializer.","pos":[0,37]},{"content":"Multiple serializers can be supplied for a class as long as the serializers have different base types.","pos":[38,140]}]}]},{"pos":[6929,6992],"content":"Gets the fully qualified type name of the serializer base type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the fully qualified type name of the serializer base type.","pos":[0,63]}]},{"pos":[7119,7177],"content":"The fully qualified type name of the serializer base type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified type name of the serializer base type.","pos":[0,58]}]},{"pos":[7849,7902],"content":"Gets the fully qualified type name of the serializer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the fully qualified type name of the serializer.","pos":[0,53]}]},{"pos":[8025,8073],"content":"The fully qualified type name of the serializer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified type name of the serializer.","pos":[0,48]}]},{"pos":[8681,8727],"content":"Indicates a unique ID for this attribute type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates a unique ID for this attribute type.","pos":[0,46]}]},{"pos":[8739,9024],"content":"This ID is used by filtering algorithms to identify two attributes that are the same type. For most attributes, this just returns the <xref:System.Type> instance for the attribute. <xref:System.ComponentModel.EditorAttribute> overrides this to include the type of the editor base type.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This ID is used by filtering algorithms to identify two attributes that are the same type. For most attributes, this just returns the <xref:System.Type> instance for the attribute. <xref:System.ComponentModel.EditorAttribute> overrides this to include the type of the editor base type.","pos":[0,285],"nodes":[{"content":"This ID is used by filtering algorithms to identify two attributes that are the same type.","pos":[0,90]},{"content":"For most attributes, this just returns the &lt;xref:System.Type&gt; instance for the attribute.","pos":[91,180],"source":" For most attributes, this just returns the <xref:System.Type> instance for the attribute."},{"content":"&lt;xref:System.ComponentModel.EditorAttribute&gt; overrides this to include the type of the editor base type.","pos":[181,285],"source":" <xref:System.ComponentModel.EditorAttribute> overrides this to include the type of the editor base type."}]}]},{"pos":[9144,9180],"content":"A unique ID for this attribute type.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique ID for this attribute type.","pos":[0,36]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  id: DesignerSerializerAttribute\n  children:\n  - System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)\n  - System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)\n  - System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)\n  - System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName\n  - System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName\n  - System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId\n  langs:\n  - csharp\n  name: DesignerSerializerAttribute\n  nameWithType: DesignerSerializerAttribute\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  type: Class\n  summary: Indicates a serializer for the serialization manager to use to serialize the values of the type this attribute is applied to. This class cannot be inherited.\n  remarks: DesignerSerializerAttribute provides a way to indicate to the designer serialization manager that a specific type of serializer should be used when serializing the values of an object. This allows you to specify a serializer that is capable of serializing a custom type, for instance. Place this attribute on a class to indicate the serialization object to use when serializing the class.\n  example:\n  - \"The following code uses a DesignerSerializerAttribute to associate an example serializer with an example component.  \\n  \\n [!code-cpp[DesignerSerializerAttribute#1](~/add/codesnippet/cpp/t-system.componentmodel._9_1.cpp)]\\n [!code-cs[DesignerSerializerAttribute#1](~/add/codesnippet/csharp/t-system.componentmodel._9_1.cs)]\\n [!code-vb[DesignerSerializerAttribute#1](~/add/codesnippet/visualbasic/t-system.componentmodel._9_1.vb)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=true, Inherited=true)]\n\n      public sealed class DesignerSerializerAttribute : Attribute\n  inheritance:\n  - System.Attribute\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  langs:\n  - csharp\n  name: DesignerSerializerAttribute(String,String)\n  nameWithType: DesignerSerializerAttribute.DesignerSerializerAttribute(String,String)\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.DesignerSerializerAttribute(String,String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"></xref> class.\n  syntax:\n    content: public DesignerSerializerAttribute (string serializerTypeName, string baseSerializerTypeName);\n    parameters:\n    - id: serializerTypeName\n      type: System.String\n      description: The fully qualified name of the data type of the serializer.\n    - id: baseSerializerTypeName\n      type: System.String\n      description: The fully qualified name of the base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.\n  overload: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)\n  id: '#ctor(System.String,System.Type)'\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  langs:\n  - csharp\n  name: DesignerSerializerAttribute(String,Type)\n  nameWithType: DesignerSerializerAttribute.DesignerSerializerAttribute(String,Type)\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.DesignerSerializerAttribute(String,Type)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"></xref> class.\n  syntax:\n    content: public DesignerSerializerAttribute (string serializerTypeName, Type baseSerializerType);\n    parameters:\n    - id: serializerTypeName\n      type: System.String\n      description: The fully qualified name of the data type of the serializer.\n    - id: baseSerializerType\n      type: System.Type\n      description: The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.\n  overload: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)\n  id: '#ctor(System.Type,System.Type)'\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  langs:\n  - csharp\n  name: DesignerSerializerAttribute(Type,Type)\n  nameWithType: DesignerSerializerAttribute.DesignerSerializerAttribute(Type,Type)\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.DesignerSerializerAttribute(Type,Type)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\"></xref> class.\n  syntax:\n    content: public DesignerSerializerAttribute (Type serializerType, Type baseSerializerType);\n    parameters:\n    - id: serializerType\n      type: System.Type\n      description: The data type of the serializer.\n    - id: baseSerializerType\n      type: System.Type\n      description: The base data type of the serializer. Multiple serializers can be supplied for a class as long as the serializers have different base types.\n  overload: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName\n  id: SerializerBaseTypeName\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  langs:\n  - csharp\n  name: SerializerBaseTypeName\n  nameWithType: DesignerSerializerAttribute.SerializerBaseTypeName\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets the fully qualified type name of the serializer base type.\n  syntax:\n    content: public string SerializerBaseTypeName { get; }\n    return:\n      type: System.String\n      description: The fully qualified type name of the serializer base type.\n  overload: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName\n  id: SerializerTypeName\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  langs:\n  - csharp\n  name: SerializerTypeName\n  nameWithType: DesignerSerializerAttribute.SerializerTypeName\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets the fully qualified type name of the serializer.\n  syntax:\n    content: public string SerializerTypeName { get; }\n    return:\n      type: System.String\n      description: The fully qualified type name of the serializer.\n  overload: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId\n  id: TypeId\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  langs:\n  - csharp\n  name: TypeId\n  nameWithType: DesignerSerializerAttribute.TypeId\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Indicates a unique ID for this attribute type.\n  remarks: This ID is used by filtering algorithms to identify two attributes that are the same type. For most attributes, this just returns the <xref:System.Type> instance for the attribute. <xref:System.ComponentModel.EditorAttribute> overrides this to include the type of the editor base type.\n  syntax:\n    content: public override object TypeId { get; }\n    return:\n      type: System.Object\n      description: A unique ID for this attribute type.\n  overload: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Attribute\n  isExternal: false\n  name: System.Attribute\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: DesignerSerializerAttribute(String,String)\n  nameWithType: DesignerSerializerAttribute.DesignerSerializerAttribute(String,String)\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.DesignerSerializerAttribute(String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: DesignerSerializerAttribute(String,Type)\n  nameWithType: DesignerSerializerAttribute.DesignerSerializerAttribute(String,Type)\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.DesignerSerializerAttribute(String,Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: DesignerSerializerAttribute(Type,Type)\n  nameWithType: DesignerSerializerAttribute.DesignerSerializerAttribute(Type,Type)\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.DesignerSerializerAttribute(Type,Type)\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: SerializerBaseTypeName\n  nameWithType: DesignerSerializerAttribute.SerializerBaseTypeName\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: SerializerTypeName\n  nameWithType: DesignerSerializerAttribute.SerializerTypeName\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: TypeId\n  nameWithType: DesignerSerializerAttribute.TypeId\n  fullName: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor*\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: DesignerSerializerAttribute\n  nameWithType: DesignerSerializerAttribute.DesignerSerializerAttribute\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName*\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: SerializerBaseTypeName\n  nameWithType: DesignerSerializerAttribute.SerializerBaseTypeName\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName*\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: SerializerTypeName\n  nameWithType: DesignerSerializerAttribute.SerializerTypeName\n- uid: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId*\n  parent: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute\n  isExternal: false\n  name: TypeId\n  nameWithType: DesignerSerializerAttribute.TypeId\n"}