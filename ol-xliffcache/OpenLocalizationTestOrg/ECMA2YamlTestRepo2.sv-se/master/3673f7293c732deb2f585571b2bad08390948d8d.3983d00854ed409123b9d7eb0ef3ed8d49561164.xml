{"nodes":[{"pos":[678,729],"content":"Controls code access permissions for event logging.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls code access permissions for event logging.","pos":[0,51]}]},{"pos":[742,2190],"content":"Do not grant EventLogPermission to partially trusted code. The ability to read and write the event log enables code to perform actions such as issuing event log messages in the name of another application.      > [!NOTE] >  If the event source that is specified by the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> property for the event log does not exist, a new event source is created. To create an event source in Windows Vista and later versions of Windows, or Windows Server 2003, you must have administrative privileges.   >    >  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.   >    >  Starting with Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Do not grant EventLogPermission to partially trusted code.","pos":[0,58]},{"content":"The ability to read and write the event log enables code to perform actions such as issuing event log messages in the name of another application.","pos":[59,205]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the event source that is specified by the &lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName&gt; property for the event log does not exist, a new event source is created.","pos":[211,412],"source":"      > [!NOTE] >  If the event source that is specified by the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> property for the event log does not exist, a new event source is created."},{"content":"To create an event source in Windows Vista and later versions of Windows, or Windows Server 2003, you must have administrative privileges.","pos":[413,551]},{"content":"&gt;    &gt;  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique.","pos":[554,703],"source":"   >    >  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique."},{"content":"Starting with Windows Vista, users do not have permission to access the security log; therefore, a &lt;xref:System.Security.SecurityException&gt; is thrown.","pos":[704,854],"source":" Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown."},{"content":"&gt;    &gt;  Starting with Windows Vista, User Account Control (UAC) determines the privileges of a user.","pos":[857,957],"source":"   >    >  Starting with Windows Vista, User Account Control (UAC) determines the privileges of a user."},{"content":"If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token.","pos":[958,1124]},{"content":"By default, you are in the standard user role.","pos":[1125,1171]},{"content":"To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator.","pos":[1172,1299]},{"content":"You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.","pos":[1300,1441]}]},{"pos":[4680,4779],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLogPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogPermission\"></xref> class."},{"pos":[5493,5630],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLogPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified permission entries.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogPermission\"></xref> class with the specified permission entries."},{"pos":[5878,6032],"content":"An array of  objects that represent permission entries. The <xref:System.Diagnostics.EventLogPermission.PermissionEntries*> property is set to this value.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of  objects that represent permission entries. The <xref:System.Diagnostics.EventLogPermission.PermissionEntries*> property is set to this value.","pos":[0,154],"nodes":[{"content":"An array of  objects that represent permission entries.","pos":[0,55]},{"content":"The &lt;xref:System.Diagnostics.EventLogPermission.PermissionEntries*&gt; property is set to this value.","pos":[56,154],"source":" The <xref:System.Diagnostics.EventLogPermission.PermissionEntries*> property is set to this value."}]}]},{"pos":[6206,6307],"content":"<ph id=\"ph1\">&lt;code&gt;permissionAccessEntries&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>permissionAccessEntries</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6843,6978],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLogPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified permission state.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogPermission\"></xref> class with the specified permission state."},{"pos":[7188,7294],"content":"One of the enumeration values that specifies the permission state (full access or no access to resources).","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the permission state (full access or no access to resources).","pos":[0,106]}]},{"pos":[7460,7582],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[8194,8362],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLogPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified access levels and the name of the computer to use.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogPermission\"></xref> class with the specified access levels and the name of the computer to use."},{"pos":[8614,8675],"content":"One of the enumeration values that specifies an access level.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies an access level.","pos":[0,61]}]},{"pos":[8743,8801],"content":"The name of the computer on which to read or write events.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the computer on which to read or write events.","pos":[0,58]}]},{"pos":[9286,9357],"content":"Gets the collection of permission entries for this permissions request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of permission entries for this permissions request.","pos":[0,71]}]},{"pos":[9564,9643],"content":"A collection that contains the permission entries for this permissions request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that contains the permission entries for this permissions request.","pos":[0,79]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.EventLogPermission\n  id: EventLogPermission\n  children:\n  - System.Diagnostics.EventLogPermission.#ctor\n  - System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])\n  - System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)\n  - System.Diagnostics.EventLogPermission.PermissionEntries\n  langs:\n  - csharp\n  name: EventLogPermission\n  nameWithType: EventLogPermission\n  fullName: System.Diagnostics.EventLogPermission\n  type: Class\n  summary: Controls code access permissions for event logging.\n  remarks: \"Do not grant EventLogPermission to partially trusted code. The ability to read and write the event log enables code to perform actions such as issuing event log messages in the name of another application.  \\n  \\n> [!NOTE]\\n>  If the event source that is specified by the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> property for the event log does not exist, a new event source is created. To create an event source in Windows Vista and later versions of Windows, or Windows Server 2003, you must have administrative privileges.  \\n>   \\n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \\n>   \\n>  Starting with Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.\"\n  syntax:\n    content: 'public sealed class EventLogPermission : System.Security.Permissions.ResourcePermissionBase'\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  - System.Security.Permissions.ResourcePermissionBase\n  implements: []\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  - System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)\n  - System.Security.Permissions.ResourcePermissionBase.Any\n  - System.Security.Permissions.ResourcePermissionBase.Clear\n  - System.Security.Permissions.ResourcePermissionBase.Copy\n  - System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries\n  - System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.ResourcePermissionBase.IsUnrestricted\n  - System.Security.Permissions.ResourcePermissionBase.Local\n  - System.Security.Permissions.ResourcePermissionBase.PermissionAccessType\n  - System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)\n  - System.Security.Permissions.ResourcePermissionBase.TagNames\n  - System.Security.Permissions.ResourcePermissionBase.ToXml\n  - System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogPermission.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.EventLogPermission\n  langs:\n  - csharp\n  name: EventLogPermission()\n  nameWithType: EventLogPermission.EventLogPermission()\n  fullName: System.Diagnostics.EventLogPermission.EventLogPermission()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogPermission\"></xref> class.\n  syntax:\n    content: public EventLogPermission ();\n    parameters: []\n  overload: System.Diagnostics.EventLogPermission.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])\n  id: '#ctor(System.Diagnostics.EventLogPermissionEntry[])'\n  parent: System.Diagnostics.EventLogPermission\n  langs:\n  - csharp\n  name: EventLogPermission(EventLogPermissionEntry[])\n  nameWithType: EventLogPermission.EventLogPermission(EventLogPermissionEntry[])\n  fullName: System.Diagnostics.EventLogPermission.EventLogPermission(EventLogPermissionEntry[])\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogPermission\"></xref> class with the specified permission entries.\n  syntax:\n    content: public EventLogPermission (System.Diagnostics.EventLogPermissionEntry[] permissionAccessEntries);\n    parameters:\n    - id: permissionAccessEntries\n      type: System.Diagnostics.EventLogPermissionEntry[]\n      description: An array of  objects that represent permission entries. The <xref:System.Diagnostics.EventLogPermission.PermissionEntries*> property is set to this value.\n  overload: System.Diagnostics.EventLogPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>permissionAccessEntries</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Diagnostics.EventLogPermission\n  langs:\n  - csharp\n  name: EventLogPermission(PermissionState)\n  nameWithType: EventLogPermission.EventLogPermission(PermissionState)\n  fullName: System.Diagnostics.EventLogPermission.EventLogPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogPermission\"></xref> class with the specified permission state.\n  syntax:\n    content: public EventLogPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the enumeration values that specifies the permission state (full access or no access to resources).\n  overload: System.Diagnostics.EventLogPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)\n  id: '#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)'\n  parent: System.Diagnostics.EventLogPermission\n  langs:\n  - csharp\n  name: EventLogPermission(EventLogPermissionAccess,String)\n  nameWithType: EventLogPermission.EventLogPermission(EventLogPermissionAccess,String)\n  fullName: System.Diagnostics.EventLogPermission.EventLogPermission(EventLogPermissionAccess,String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogPermission\"></xref> class with the specified access levels and the name of the computer to use.\n  syntax:\n    content: public EventLogPermission (System.Diagnostics.EventLogPermissionAccess permissionAccess, string machineName);\n    parameters:\n    - id: permissionAccess\n      type: System.Diagnostics.EventLogPermissionAccess\n      description: One of the enumeration values that specifies an access level.\n    - id: machineName\n      type: System.String\n      description: The name of the computer on which to read or write events.\n  overload: System.Diagnostics.EventLogPermission.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogPermission.PermissionEntries\n  id: PermissionEntries\n  parent: System.Diagnostics.EventLogPermission\n  langs:\n  - csharp\n  name: PermissionEntries\n  nameWithType: EventLogPermission.PermissionEntries\n  fullName: System.Diagnostics.EventLogPermission.PermissionEntries\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the collection of permission entries for this permissions request.\n  syntax:\n    content: public System.Diagnostics.EventLogPermissionEntryCollection PermissionEntries { get; }\n    return:\n      type: System.Diagnostics.EventLogPermissionEntryCollection\n      description: A collection that contains the permission entries for this permissions request.\n  overload: System.Diagnostics.EventLogPermission.PermissionEntries*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Permissions.ResourcePermissionBase\n  isExternal: false\n  name: System.Security.Permissions.ResourcePermissionBase\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Diagnostics.EventLogPermission.#ctor\n  parent: System.Diagnostics.EventLogPermission\n  isExternal: false\n  name: EventLogPermission()\n  nameWithType: EventLogPermission.EventLogPermission()\n  fullName: System.Diagnostics.EventLogPermission.EventLogPermission()\n- uid: System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])\n  parent: System.Diagnostics.EventLogPermission\n  isExternal: false\n  name: EventLogPermission(EventLogPermissionEntry[])\n  nameWithType: EventLogPermission.EventLogPermission(EventLogPermissionEntry[])\n  fullName: System.Diagnostics.EventLogPermission.EventLogPermission(EventLogPermissionEntry[])\n- uid: System.Diagnostics.EventLogPermissionEntry[]\n  parent: System.Diagnostics\n  isExternal: false\n  name: EventLogPermissionEntry\n  nameWithType: EventLogPermissionEntry\n  fullName: System.Diagnostics.EventLogPermissionEntry[]\n  spec.csharp:\n  - uid: System.Diagnostics.EventLogPermissionEntry\n    name: EventLogPermissionEntry\n    nameWithType: EventLogPermissionEntry\n    fullName: EventLogPermissionEntry[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Diagnostics.EventLogPermission\n  isExternal: false\n  name: EventLogPermission(PermissionState)\n  nameWithType: EventLogPermission.EventLogPermission(PermissionState)\n  fullName: System.Diagnostics.EventLogPermission.EventLogPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)\n  parent: System.Diagnostics.EventLogPermission\n  isExternal: false\n  name: EventLogPermission(EventLogPermissionAccess,String)\n  nameWithType: EventLogPermission.EventLogPermission(EventLogPermissionAccess,String)\n  fullName: System.Diagnostics.EventLogPermission.EventLogPermission(EventLogPermissionAccess,String)\n- uid: System.Diagnostics.EventLogPermissionAccess\n  parent: System.Diagnostics\n  isExternal: false\n  name: EventLogPermissionAccess\n  nameWithType: EventLogPermissionAccess\n  fullName: System.Diagnostics.EventLogPermissionAccess\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.EventLogPermission.PermissionEntries\n  parent: System.Diagnostics.EventLogPermission\n  isExternal: false\n  name: PermissionEntries\n  nameWithType: EventLogPermission.PermissionEntries\n  fullName: System.Diagnostics.EventLogPermission.PermissionEntries\n- uid: System.Diagnostics.EventLogPermissionEntryCollection\n  parent: System.Diagnostics\n  isExternal: false\n  name: EventLogPermissionEntryCollection\n  nameWithType: EventLogPermissionEntryCollection\n  fullName: System.Diagnostics.EventLogPermissionEntryCollection\n- uid: System.Diagnostics.EventLogPermission.#ctor*\n  parent: System.Diagnostics.EventLogPermission\n  isExternal: false\n  name: EventLogPermission\n  nameWithType: EventLogPermission.EventLogPermission\n- uid: System.Diagnostics.EventLogPermission.PermissionEntries*\n  parent: System.Diagnostics.EventLogPermission\n  isExternal: false\n  name: PermissionEntries\n  nameWithType: EventLogPermission.PermissionEntries\n"}