{"nodes":[{"pos":[493,587],"content":"Contributes an interception sink at the context boundary on the server end of a remoting call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contributes an interception sink at the context boundary on the server end of a remoting call.","pos":[0,94]}]},{"pos":[600,1312],"content":"The IContributeServerContextSink interface is implemented by context properties in a <xref:System.Runtime.Remoting.Contexts.Context> class that want to contribute an interception sink at the context boundary on the server end of a remoting call.       The server context chain is composed from those properties in the server context that implement IContributeServerContextSink and which contribute a sink by using the <xref:System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink%2A> method call.       Serialization is an example of such a context property. In this case, the message sink would involve taking a synchronization primitive lock before processing a call any further.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The IContributeServerContextSink interface is implemented by context properties in a <xref:System.Runtime.Remoting.Contexts.Context> class that want to contribute an interception sink at the context boundary on the server end of a remoting call.       The server context chain is composed from those properties in the server context that implement IContributeServerContextSink and which contribute a sink by using the <xref:System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink%2A> method call.       Serialization is an example of such a context property. In this case, the message sink would involve taking a synchronization primitive lock before processing a call any further.","pos":[0,708],"nodes":[{"content":"The IContributeServerContextSink interface is implemented by context properties in a &lt;xref:System.Runtime.Remoting.Contexts.Context&gt; class that want to contribute an interception sink at the context boundary on the server end of a remoting call.","pos":[0,245],"source":"The IContributeServerContextSink interface is implemented by context properties in a <xref:System.Runtime.Remoting.Contexts.Context> class that want to contribute an interception sink at the context boundary on the server end of a remoting call."},{"content":"The server context chain is composed from those properties in the server context that implement IContributeServerContextSink and which contribute a sink by using the &lt;xref:System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink%2A&gt; method call.","pos":[252,523],"source":"       The server context chain is composed from those properties in the server context that implement IContributeServerContextSink and which contribute a sink by using the <xref:System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink%2A> method call."},{"content":"Serialization is an example of such a context property.","pos":[530,585]},{"content":"In this case, the message sink would involve taking a synchronization primitive lock before processing a call any further.","pos":[586,708]}]}]},{"pos":[2125,2255],"content":"Takes the first sink in the chain of sinks composed so far, and then chains its message sink in front of the chain already formed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Takes the first sink in the chain of sinks composed so far, and then chains its message sink in front of the chain already formed.","pos":[0,130]}]},{"pos":[2526,2561],"content":"The chain of sinks composed so far.","needQuote":true,"needEscape":true,"nodes":[{"content":"The chain of sinks composed so far.","pos":[0,35]}]},{"pos":[2652,2677],"content":"The composite sink chain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The composite sink chain.","pos":[0,25]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Contexts.IContributeServerContextSink\n  id: IContributeServerContextSink\n  children:\n  - System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink)\n  langs:\n  - csharp\n  name: IContributeServerContextSink\n  nameWithType: IContributeServerContextSink\n  fullName: System.Runtime.Remoting.Contexts.IContributeServerContextSink\n  type: Interface\n  summary: Contributes an interception sink at the context boundary on the server end of a remoting call.\n  remarks: \"The IContributeServerContextSink interface is implemented by context properties in a <xref:System.Runtime.Remoting.Contexts.Context> class that want to contribute an interception sink at the context boundary on the server end of a remoting call.  \\n  \\n The server context chain is composed from those properties in the server context that implement IContributeServerContextSink and which contribute a sink by using the <xref:System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink%2A> method call.  \\n  \\n Serialization is an example of such a context property. In this case, the message sink would involve taking a synchronization primitive lock before processing a call any further.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IContributeServerContextSink\n  implements: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink)\n  id: GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink)\n  parent: System.Runtime.Remoting.Contexts.IContributeServerContextSink\n  langs:\n  - csharp\n  name: GetServerContextSink(IMessageSink)\n  nameWithType: IContributeServerContextSink.GetServerContextSink(IMessageSink)\n  fullName: System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink(IMessageSink)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Contexts\n  summary: Takes the first sink in the chain of sinks composed so far, and then chains its message sink in front of the chain already formed.\n  syntax:\n    content: public System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink (System.Runtime.Remoting.Messaging.IMessageSink nextSink);\n    parameters:\n    - id: nextSink\n      type: System.Runtime.Remoting.Messaging.IMessageSink\n      description: The chain of sinks composed so far.\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessageSink\n      description: The composite sink chain.\n  overload: System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink)\n  parent: System.Runtime.Remoting.Contexts.IContributeServerContextSink\n  isExternal: false\n  name: GetServerContextSink(IMessageSink)\n  nameWithType: IContributeServerContextSink.GetServerContextSink(IMessageSink)\n  fullName: System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink(IMessageSink)\n- uid: System.Runtime.Remoting.Messaging.IMessageSink\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessageSink\n  nameWithType: IMessageSink\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink\n- uid: System.Runtime.Remoting.Contexts.IContributeServerContextSink.GetServerContextSink*\n  parent: System.Runtime.Remoting.Contexts.IContributeServerContextSink\n  isExternal: false\n  name: GetServerContextSink\n  nameWithType: IContributeServerContextSink.GetServerContextSink\n"}