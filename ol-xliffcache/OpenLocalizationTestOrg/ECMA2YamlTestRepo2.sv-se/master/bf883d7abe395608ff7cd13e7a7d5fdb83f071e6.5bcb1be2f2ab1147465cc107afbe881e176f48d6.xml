{"nodes":[{"pos":[1270,1357],"content":"Converts a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from base 64.","needQuote":true,"needEscape":true,"source":"Converts a <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> from base 64."},{"pos":[1369,1475],"content":"Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.","pos":[0,106]}]},{"pos":[2715,2825],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> class."},{"pos":[2837,2974],"content":"In the default configuration, white spaces are ignored. See <xref:System.Security.Cryptography.FromBase64TransformMode> for more details.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In the default configuration, white spaces are ignored. See <xref:System.Security.Cryptography.FromBase64TransformMode> for more details.","pos":[0,137],"nodes":[{"content":"In the default configuration, white spaces are ignored.","pos":[0,55]},{"content":"See &lt;xref:System.Security.Cryptography.FromBase64TransformMode&gt; for more details.","pos":[56,137],"source":" See <xref:System.Security.Cryptography.FromBase64TransformMode> for more details."}]}]},{"pos":[3759,3908],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified transformation mode.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> class with the specified transformation mode."},{"pos":[4654,4742],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> values."},{"pos":[5284,5352],"content":"Gets a value indicating whether the current transform can be reused.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current transform can be reused.","pos":[0,68]}]},{"pos":[5481,5549],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[6148,6219],"content":"Gets a value that indicates whether multiple blocks can be transformed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether multiple blocks can be transformed.","pos":[0,71]}]},{"pos":[6231,6342],"content":"In the current implementation, only one block can be transformed at a time, so this property is always <ph id=\"ph1\">`false`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"In the current implementation, only one block can be transformed at a time, so this property is always `false`."},{"pos":[6472,6542],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7049,7154],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref>."},{"pos":[7167,7530],"content":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.FromBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is a simple call to &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;.","pos":[0,94],"source":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>."},{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the &lt;xref:System.Security.Cryptography.FromBase64Transform&gt; to be reallocated for other purposes.","pos":[101,245],"source":"       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.FromBase64Transform> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[246,361],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[8091,8226],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> class."},{"pos":[8239,9206],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.FromBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.FromBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.FromBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.FromBase64Transform> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.FromBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.FromBase64Transform> object's `Finalize` method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.Cryptography.FromBase64Transform&gt;.","pos":[0,103],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.FromBase64Transform>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Security.Cryptography.FromBase64Transform&gt; in an unusable state.","pos":[104,213],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.FromBase64Transform> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.Cryptography.FromBase64Transform&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.FromBase64Transform&gt; was occupying.","pos":[214,461],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.FromBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.FromBase64Transform> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[468,642],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.Cryptography.FromBase64Transform&gt;.","pos":[648,785],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.FromBase64Transform>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.FromBase64Transform&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[786,962],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.FromBase64Transform> object's `Finalize` method."}]},{"pos":[9824,9985],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> and optionally releases the managed resources."},{"pos":[9998,10504],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.FromBase64Transform> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the disposing parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[82,185],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with disposing set to <ph id=\"ph3\">`false`</ph>.","pos":[186,245],"source":"`Finalize` invokes `Dispose` with disposing set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.FromBase64Transform&gt; references.","pos":[252,434],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.FromBase64Transform> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[435,504],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[10660,10869],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[11372,11487],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref>."},{"pos":[12084,12110],"content":"Gets the input block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the input block size.","pos":[0,26]}]},{"pos":[12122,12179],"content":"The input block size for this transformation is one byte.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The input block size for this transformation is one byte.","pos":[0,57]}]},{"pos":[12294,12337],"content":"The size of the input data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the input data blocks in bytes.","pos":[0,43]}]},{"pos":[12878,12905],"content":"Gets the output block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the output block size.","pos":[0,27]}]},{"pos":[12917,12974],"content":"The output block size for this transformation is 3 bytes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The output block size for this transformation is 3 bytes.","pos":[0,57]}]},{"pos":[13090,13134],"content":"The size of the output data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the output data blocks in bytes.","pos":[0,44]}]},{"pos":[13904,14042],"content":"Converts the specified region of the input byte array from base 64 and copies the result to the specified region of the output byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified region of the input byte array from base 64 and copies the result to the specified region of the output byte array.","pos":[0,138]}]},{"pos":[14775,14809],"content":"The input to compute from base 64.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to compute from base 64.","pos":[0,34]}]},{"pos":[14876,14944],"content":"The offset into the input byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the input byte array from which to begin using data.","pos":[0,68]}]},{"pos":[15010,15069],"content":"The number of bytes in the input byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the input byte array to use as data.","pos":[0,59]}]},{"pos":[15138,15178],"content":"The output to which to write the result.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output to which to write the result.","pos":[0,40]}]},{"pos":[15246,15317],"content":"The offset into the output byte array from which to begin writing data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the output byte array from which to begin writing data.","pos":[0,71]}]},{"pos":[15374,15402],"content":"The number of bytes written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes written.","pos":[0,28]}]},{"pos":[15600,15715],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has already been disposed.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> object has already been disposed."},{"pos":[15811,15933],"content":"<code>inputCount</code> uses an invalid value.       -or-       <code>inputBuffer</code> has an invalid offset length.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputCount&lt;/code&gt;</ph> uses an invalid value.","pos":[0,46],"source":"<code>inputCount</code> uses an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;inputBuffer&lt;/code&gt;</ph> has an invalid offset length.","pos":[53,118],"source":"       -or-       <code>inputBuffer</code> has an invalid offset length."}]},{"pos":[16049,16137],"content":"<code>inputOffset</code> is out of range. This parameter requires a non-negative number.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputOffset&lt;/code&gt;</ph> is out of range.","pos":[0,41],"source":"<code>inputOffset</code> is out of range."},{"content":"This parameter requires a non-negative number.","pos":[42,88]}]},{"pos":[16240,16329],"content":"<ph id=\"ph1\">&lt;code&gt;inputBuffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>inputBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[16936,17007],"content":"Converts the specified region of the specified byte array from base 64.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified region of the specified byte array from base 64.","pos":[0,71]}]},{"pos":[17709,17743],"content":"The input to convert from base 64.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to convert from base 64.","pos":[0,34]}]},{"pos":[17810,17872],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[17938,17991],"content":"The number of bytes in the byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]},{"pos":[18049,18073],"content":"The computed conversion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed conversion.","pos":[0,24]}]},{"pos":[18276,18391],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.FromBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has already been disposed.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> object has already been disposed."},{"pos":[18487,18608],"content":"<code>inputBuffer</code> has an invalid offset length.       -or-       <code>inputCount</code> has an invalid value.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputBuffer&lt;/code&gt;</ph> has an invalid offset length.","pos":[0,54],"source":"<code>inputBuffer</code> has an invalid offset length."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;inputCount&lt;/code&gt;</ph> has an invalid value.","pos":[61,117],"source":"       -or-       <code>inputCount</code> has an invalid value."}]},{"pos":[18724,18812],"content":"<code>inputOffset</code> is out of range. This parameter requires a non-negative number.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputOffset&lt;/code&gt;</ph> is out of range.","pos":[0,41],"source":"<code>inputOffset</code> is out of range."},{"content":"This parameter requires a non-negative number.","pos":[42,88]}]},{"pos":[18915,19004],"content":"<ph id=\"ph1\">&lt;code&gt;inputBuffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>inputBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.FromBase64Transform\n  id: FromBase64Transform\n  children:\n  - System.Security.Cryptography.FromBase64Transform.#ctor\n  - System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)\n  - System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n  - System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.FromBase64Transform.Clear\n  - System.Security.Cryptography.FromBase64Transform.Dispose\n  - System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)\n  - System.Security.Cryptography.FromBase64Transform.Finalize\n  - System.Security.Cryptography.FromBase64Transform.InputBlockSize\n  - System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n  - System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: FromBase64Transform\n  nameWithType: FromBase64Transform\n  fullName: System.Security.Cryptography.FromBase64Transform\n  type: Class\n  summary: Converts a <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> from base 64.\n  remarks: Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.\n  example:\n  - \"The following example decodes a base 64-encoded file to an output text file.  \\n  \\n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/cpp/t-system.security.crypto_20_1.cpp)]\\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_20_1.vb)]\\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/csharp/t-system.security.crypto_20_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class FromBase64Transform : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: FromBase64Transform()\n  nameWithType: FromBase64Transform.FromBase64Transform()\n  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> class.\n  remarks: In the default configuration, white spaces are ignored. See <xref:System.Security.Cryptography.FromBase64TransformMode> for more details.\n  syntax:\n    content: public FromBase64Transform ();\n    parameters: []\n  overload: System.Security.Cryptography.FromBase64Transform.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)\n  id: '#ctor(System.Security.Cryptography.FromBase64TransformMode)'\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: FromBase64Transform(FromBase64TransformMode)\n  nameWithType: FromBase64Transform.FromBase64Transform(FromBase64TransformMode)\n  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform(FromBase64TransformMode)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> class with the specified transformation mode.\n  remarks: ''\n  example:\n  - \"The following example decodes a base 64-encoded file to an output text file.  \\n  \\n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/cpp/6e8f7a21-5a5f-4a36-9e3b-_1.cpp)]\\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/visualbasic/6e8f7a21-5a5f-4a36-9e3b-_1.vb)]\\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/csharp/6e8f7a21-5a5f-4a36-9e3b-_1.cs)]\"\n  syntax:\n    content: public FromBase64Transform (System.Security.Cryptography.FromBase64TransformMode whitespaces);\n    parameters:\n    - id: whitespaces\n      type: System.Security.Cryptography.FromBase64TransformMode\n      description: One of the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> values.\n  overload: System.Security.Cryptography.FromBase64Transform.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: FromBase64Transform.CanReuseTransform\n  fullName: System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current transform can be reused.\n  syntax:\n    content: public virtual bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.FromBase64Transform.CanReuseTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: FromBase64Transform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value that indicates whether multiple blocks can be transformed.\n  remarks: In the current implementation, only one block can be transformed at a time, so this property is always `false`.\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.Clear\n  id: Clear\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: FromBase64Transform.Clear()\n  fullName: System.Security.Cryptography.FromBase64Transform.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref>.\n  remarks: \"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.FromBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.FromBase64Transform.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: FromBase64Transform.Dispose()\n  fullName: System.Security.Cryptography.FromBase64Transform.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.FromBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.FromBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.FromBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.FromBase64Transform> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.FromBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.FromBase64Transform> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.FromBase64Transform.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: FromBase64Transform.Dispose(Boolean)\n  fullName: System.Security.Cryptography.FromBase64Transform.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.FromBase64Transform> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Security.Cryptography.FromBase64Transform.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: FromBase64Transform.Finalize()\n  fullName: System.Security.Cryptography.FromBase64Transform.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref>.\n  syntax:\n    content: ~FromBase64Transform ();\n    parameters: []\n  overload: System.Security.Cryptography.FromBase64Transform.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: FromBase64Transform.InputBlockSize\n  fullName: System.Security.Cryptography.FromBase64Transform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the input block size.\n  remarks: The input block size for this transformation is one byte.\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the input data blocks in bytes.\n  overload: System.Security.Cryptography.FromBase64Transform.InputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: FromBase64Transform.OutputBlockSize\n  fullName: System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the output block size.\n  remarks: The output block size for this transformation is 3 bytes.\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the output data blocks in bytes.\n  overload: System.Security.Cryptography.FromBase64Transform.OutputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Converts the specified region of the input byte array from base 64 and copies the result to the specified region of the output byte array.\n  remarks: ''\n  example:\n  - \"The following example decrypts a base 64-encoded file to an output text file.  \\n  \\n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/cpp/89d8dcd5-d4bc-45bd-bddf-_1.cpp)]\\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/visualbasic/89d8dcd5-d4bc-45bd-bddf-_1.vb)]\\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/csharp/89d8dcd5-d4bc-45bd-bddf-_1.cs)]\"\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to compute from base 64.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the input byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the input byte array to use as data.\n    - id: outputBuffer\n      type: System.Byte[]\n      description: The output to which to write the result.\n    - id: outputOffset\n      type: System.Int32\n      description: The offset into the output byte array from which to begin writing data.\n    return:\n      type: System.Int32\n      description: The number of bytes written.\n  overload: System.Security.Cryptography.FromBase64Transform.TransformBlock*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> object has already been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>inputCount</code> uses an invalid value.  \\n  \\n -or-  \\n  \\n <code>inputBuffer</code> has an invalid offset length.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>inputOffset</code> is out of range. This parameter requires a non-negative number.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Converts the specified region of the specified byte array from base 64.\n  remarks: ''\n  example:\n  - \"The following example decrypts a base 64-encoded file to an output text file.  \\n  \\n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/cpp/77c58bc9-6ff0-4b4a-ba5b-_1.cpp)]\\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/visualbasic/77c58bc9-6ff0-4b4a-ba5b-_1.vb)]\\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/csharp/77c58bc9-6ff0-4b4a-ba5b-_1.cs)]\"\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to convert from base 64.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n    return:\n      type: System.Byte[]\n      description: The computed conversion.\n  overload: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current <xref href=\"System.Security.Cryptography.FromBase64Transform\"></xref> object has already been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>inputBuffer</code> has an invalid offset length.  \\n  \\n -or-  \\n  \\n <code>inputCount</code> has an invalid value.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>inputOffset</code> is out of range. This parameter requires a non-negative number.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: FromBase64Transform()\n  nameWithType: FromBase64Transform.FromBase64Transform()\n  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform()\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: FromBase64Transform(FromBase64TransformMode)\n  nameWithType: FromBase64Transform.FromBase64Transform(FromBase64TransformMode)\n  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform(FromBase64TransformMode)\n- uid: System.Security.Cryptography.FromBase64TransformMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: FromBase64TransformMode\n  nameWithType: FromBase64TransformMode\n  fullName: System.Security.Cryptography.FromBase64TransformMode\n- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: FromBase64Transform.CanReuseTransform\n  fullName: System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: FromBase64Transform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.FromBase64Transform.Clear\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Clear()\n  nameWithType: FromBase64Transform.Clear()\n  fullName: System.Security.Cryptography.FromBase64Transform.Clear()\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Dispose()\n  nameWithType: FromBase64Transform.Dispose()\n  fullName: System.Security.Cryptography.FromBase64Transform.Dispose()\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: FromBase64Transform.Dispose(Boolean)\n  fullName: System.Security.Cryptography.FromBase64Transform.Dispose(Boolean)\n- uid: System.Security.Cryptography.FromBase64Transform.Finalize\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Finalize()\n  nameWithType: FromBase64Transform.Finalize()\n  fullName: System.Security.Cryptography.FromBase64Transform.Finalize()\n- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: FromBase64Transform.InputBlockSize\n  fullName: System.Security.Cryptography.FromBase64Transform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: FromBase64Transform.OutputBlockSize\n  fullName: System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: FromBase64Transform\n  nameWithType: FromBase64Transform.FromBase64Transform\n- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: FromBase64Transform.CanReuseTransform\n- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: FromBase64Transform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.FromBase64Transform.Clear*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Clear\n  nameWithType: FromBase64Transform.Clear\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Dispose\n  nameWithType: FromBase64Transform.Dispose\n- uid: System.Security.Cryptography.FromBase64Transform.Finalize*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Finalize\n  nameWithType: FromBase64Transform.Finalize\n- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: FromBase64Transform.InputBlockSize\n- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: FromBase64Transform.OutputBlockSize\n- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: TransformBlock\n  nameWithType: FromBase64Transform.TransformBlock\n- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: TransformFinalBlock\n  nameWithType: FromBase64Transform.TransformFinalBlock\n"}