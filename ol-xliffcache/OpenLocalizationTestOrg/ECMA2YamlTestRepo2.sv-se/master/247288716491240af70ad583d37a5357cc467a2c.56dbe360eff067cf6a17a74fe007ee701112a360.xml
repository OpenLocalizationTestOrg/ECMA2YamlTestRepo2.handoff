{"nodes":[{"pos":[654,723],"content":"Converts between a string and the standard infinite or integer value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts between a string and the standard infinite or integer value.","pos":[0,69]}]},{"pos":[736,1281],"content":"This type, like all the other configuration converter types, converts strings found in the configuration file to and from the related strongly typed properties.       In particular, the InfiniteIntConverter class converts string values, assigned to a configuration property, to integer values and vice versa. If the configuration property has a string value of \"infinite\", it converts this value to <xref:System.Int32> and vice versa.       This converter is used with integer types. The infinite value is persisted as <xref:System.Int32>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This type, like all the other configuration converter types, converts strings found in the configuration file to and from the related strongly typed properties.       In particular, the InfiniteIntConverter class converts string values, assigned to a configuration property, to integer values and vice versa. If the configuration property has a string value of \"infinite\", it converts this value to <xref:System.Int32> and vice versa.       This converter is used with integer types. The infinite value is persisted as <xref:System.Int32>.","pos":[0,539],"nodes":[{"content":"This type, like all the other configuration converter types, converts strings found in the configuration file to and from the related strongly typed properties.","pos":[0,160]},{"content":"In particular, the InfiniteIntConverter class converts string values, assigned to a configuration property, to integer values and vice versa.","pos":[167,308]},{"content":"If the configuration property has a string value of \"infinite\", it converts this value to &lt;xref:System.Int32&gt; and vice versa.","pos":[309,434],"source":" If the configuration property has a string value of \"infinite\", it converts this value to <xref:System.Int32> and vice versa."},{"content":"This converter is used with integer types.","pos":[441,483]},{"content":"The infinite value is persisted as &lt;xref:System.Int32&gt;.","pos":[484,539],"source":" The infinite value is persisted as <xref:System.Int32>."}]}]},{"pos":[5890,5993],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.InfiniteIntConverter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Configuration.InfiniteIntConverter\"></xref> class."},{"pos":[6005,6178],"content":"Normally, you use the converter types provided by the system. The only time you need to use the InfiniteIntConverter constructor is when you create your own conversion type.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Normally, you use the converter types provided by the system. The only time you need to use the InfiniteIntConverter constructor is when you create your own conversion type.","pos":[0,173],"nodes":[{"content":"Normally, you use the converter types provided by the system.","pos":[0,61]},{"content":"The only time you need to use the InfiniteIntConverter constructor is when you create your own conversion type.","pos":[62,173]}]}]},{"pos":[7054,7112],"content":"Converts a <xref:System.String> to an <xref:System.Int32>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts a &lt;xref:System.String&gt; to an &lt;xref:System.Int32&gt;.","pos":[0,58],"source":"Converts a <xref:System.String> to an <xref:System.Int32>."}]},{"pos":[7124,7265],"content":"The system uses the ConvertFrom method when reading from a configuration file to convert a <xref:System.String> value to <xref:System.Int32>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The system uses the ConvertFrom method when reading from a configuration file to convert a &lt;xref:System.String&gt; value to &lt;xref:System.Int32&gt;.","pos":[0,141],"source":"The system uses the ConvertFrom method when reading from a configuration file to convert a <xref:System.String> value to <xref:System.Int32>."}]},{"pos":[7532,7635],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ITypeDescriptorContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used for type conversions.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.ITypeDescriptorContext\"></xref> object used for type conversions."},{"pos":[7713,7787],"content":"The <xref:System.Globalization.CultureInfo> object used during conversion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Globalization.CultureInfo&gt; object used during conversion.","pos":[0,74],"source":"The <xref:System.Globalization.CultureInfo> object used during conversion."}]},{"pos":[7848,7891],"content":"The <xref:System.String> object to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.String&gt; object to convert.","pos":[0,43],"source":"The <xref:System.String> object to convert."}]},{"pos":[7949,8152],"content":"The &lt;xref:System.Int32.MaxValue&gt;, if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is the &lt;xref:System.String&gt; \"infinite\"; otherwise, the &lt;xref:System.Int32&gt; representing the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">data</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter integer value.","needQuote":true,"needEscape":true,"source":"The <xref:System.Int32.MaxValue>, if the <code>data</code> parameter is the <xref:System.String> \"infinite\"; otherwise, the <xref:System.Int32> representing the <code>data</code> parameter integer value."},{"pos":[8989,9047],"content":"Converts an <xref:System.Int32>.to a <xref:System.String>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts an &lt;xref:System.Int32&gt;.to a &lt;xref:System.String&gt;.","pos":[0,58],"source":"Converts an <xref:System.Int32>.to a <xref:System.String>."}]},{"pos":[9059,9193],"content":"The system uses the ConvertTo method when writing to a configuration file to convert an <xref:System.Int32> to a <xref:System.String>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The system uses the ConvertTo method when writing to a configuration file to convert an &lt;xref:System.Int32&gt; to a &lt;xref:System.String&gt;.","pos":[0,134],"source":"The system uses the ConvertTo method when writing to a configuration file to convert an <xref:System.Int32> to a <xref:System.String>."}]},{"pos":[9470,9573],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ITypeDescriptorContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used for type conversions.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.ITypeDescriptorContext\"></xref> object used for type conversions."},{"pos":[9651,9725],"content":"The <xref:System.Globalization.CultureInfo> object used during conversion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Globalization.CultureInfo&gt; object used during conversion.","pos":[0,74],"source":"The <xref:System.Globalization.CultureInfo> object used during conversion."}]},{"pos":[9787,9811],"content":"The value to convert to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to convert to.","pos":[0,24]}]},{"pos":[9870,9893],"content":"The type to convert to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type to convert to.","pos":[0,23]}]},{"pos":[9951,10128],"content":"The &lt;xref:System.String&gt; \"infinite\" if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is &lt;xref:System.Int32.MaxValue&gt;; otherwise, the &lt;xref:System.String&gt; representing the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"The <xref:System.String> \"infinite\" if the <code>value</code> is <xref:System.Int32.MaxValue>; otherwise, the <xref:System.String> representing the <code>value</code> parameter."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.InfiniteIntConverter\n  id: InfiniteIntConverter\n  children:\n  - System.Configuration.InfiniteIntConverter.#ctor\n  - System.Configuration.InfiniteIntConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  - System.Configuration.InfiniteIntConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  langs:\n  - csharp\n  name: InfiniteIntConverter\n  nameWithType: InfiniteIntConverter\n  fullName: System.Configuration.InfiniteIntConverter\n  type: Class\n  summary: Converts between a string and the standard infinite or integer value.\n  remarks: \"This type, like all the other configuration converter types, converts strings found in the configuration file to and from the related strongly typed properties.  \\n  \\n In particular, the InfiniteIntConverter class converts string values, assigned to a configuration property, to integer values and vice versa. If the configuration property has a string value of \\\"infinite\\\", it converts this value to <xref:System.Int32> and vice versa.  \\n  \\n This converter is used with integer types. The infinite value is persisted as <xref:System.Int32>.\"\n  example:\n  - \"The following code example shows how to use the InfiniteIntConverter when applied to a custom section property.  \\n  \\n [!code-cs[System.Configuration.ConfigurationConvertersCustomSection#5](~/add/codesnippet/csharp/t-system.configuration.i_7_1.cs)]\\n [!code-vb[System.Configuration.ConfigurationConvertersCustomSection#5](~/add/codesnippet/visualbasic/t-system.configuration.i_7_1.vb)]\"\n  syntax:\n    content: 'public sealed class InfiniteIntConverter : System.Configuration.ConfigurationConverterBase'\n  inheritance:\n  - System.Object\n  - System.ComponentModel.TypeConverter\n  - System.Configuration.ConfigurationConverterBase\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  - System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  - System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetStandardValues\n  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.IsValid(System.Object)\n  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  - System.Configuration.ConfigurationConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  - System.Configuration.ConfigurationConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  platform:\n  - net462\n- uid: System.Configuration.InfiniteIntConverter.#ctor\n  id: '#ctor'\n  parent: System.Configuration.InfiniteIntConverter\n  langs:\n  - csharp\n  name: InfiniteIntConverter()\n  nameWithType: InfiniteIntConverter.InfiniteIntConverter()\n  fullName: System.Configuration.InfiniteIntConverter.InfiniteIntConverter()\n  type: Constructor\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.Configuration.InfiniteIntConverter\"></xref> class.\n  remarks: Normally, you use the converter types provided by the system. The only time you need to use the InfiniteIntConverter constructor is when you create your own conversion type.\n  syntax:\n    content: public InfiniteIntConverter ();\n    parameters: []\n  overload: System.Configuration.InfiniteIntConverter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.InfiniteIntConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.Configuration.InfiniteIntConverter\n  langs:\n  - csharp\n  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)\n  nameWithType: InfiniteIntConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)\n  fullName: System.Configuration.InfiniteIntConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Converts a <xref:System.String> to an <xref:System.Int32>.\n  remarks: The system uses the ConvertFrom method when reading from a configuration file to convert a <xref:System.String> value to <xref:System.Int32>.\n  syntax:\n    content: public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext ctx, System.Globalization.CultureInfo ci, object data);\n    parameters:\n    - id: ctx\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: The <xref href=\"System.ComponentModel.ITypeDescriptorContext\"></xref> object used for type conversions.\n    - id: ci\n      type: System.Globalization.CultureInfo\n      description: The <xref:System.Globalization.CultureInfo> object used during conversion.\n    - id: data\n      type: System.Object\n      description: The <xref:System.String> object to convert.\n    return:\n      type: System.Object\n      description: The <xref:System.Int32.MaxValue>, if the <code>data</code> parameter is the <xref:System.String> \"infinite\"; otherwise, the <xref:System.Int32> representing the <code>data</code> parameter integer value.\n  overload: System.Configuration.InfiniteIntConverter.ConvertFrom*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.InfiniteIntConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  parent: System.Configuration.InfiniteIntConverter\n  langs:\n  - csharp\n  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)\n  nameWithType: InfiniteIntConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)\n  fullName: System.Configuration.InfiniteIntConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Converts an <xref:System.Int32>.to a <xref:System.String>.\n  remarks: The system uses the ConvertTo method when writing to a configuration file to convert an <xref:System.Int32> to a <xref:System.String>.\n  syntax:\n    content: public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext ctx, System.Globalization.CultureInfo ci, object value, Type type);\n    parameters:\n    - id: ctx\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: The <xref href=\"System.ComponentModel.ITypeDescriptorContext\"></xref> object used for type conversions.\n    - id: ci\n      type: System.Globalization.CultureInfo\n      description: The <xref:System.Globalization.CultureInfo> object used during conversion.\n    - id: value\n      type: System.Object\n      description: The value to convert to.\n    - id: type\n      type: System.Type\n      description: The type to convert to.\n    return:\n      type: System.Object\n      description: The <xref:System.String> \"infinite\" if the <code>value</code> is <xref:System.Int32.MaxValue>; otherwise, the <xref:System.String> representing the <code>value</code> parameter.\n  overload: System.Configuration.InfiniteIntConverter.ConvertTo*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.ConfigurationConverterBase\n  isExternal: false\n  name: System.Configuration.ConfigurationConverterBase\n- uid: System.Configuration.InfiniteIntConverter.#ctor\n  parent: System.Configuration.InfiniteIntConverter\n  isExternal: false\n  name: InfiniteIntConverter()\n  nameWithType: InfiniteIntConverter.InfiniteIntConverter()\n  fullName: System.Configuration.InfiniteIntConverter.InfiniteIntConverter()\n- uid: System.Configuration.InfiniteIntConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.Configuration.InfiniteIntConverter\n  isExternal: false\n  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)\n  nameWithType: InfiniteIntConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)\n  fullName: System.Configuration.InfiniteIntConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.ITypeDescriptorContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: ITypeDescriptorContext\n  nameWithType: ITypeDescriptorContext\n  fullName: System.ComponentModel.ITypeDescriptorContext\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Configuration.InfiniteIntConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  parent: System.Configuration.InfiniteIntConverter\n  isExternal: false\n  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)\n  nameWithType: InfiniteIntConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)\n  fullName: System.Configuration.InfiniteIntConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Configuration.InfiniteIntConverter.#ctor*\n  parent: System.Configuration.InfiniteIntConverter\n  isExternal: false\n  name: InfiniteIntConverter\n  nameWithType: InfiniteIntConverter.InfiniteIntConverter\n- uid: System.Configuration.InfiniteIntConverter.ConvertFrom*\n  parent: System.Configuration.InfiniteIntConverter\n  isExternal: false\n  name: ConvertFrom\n  nameWithType: InfiniteIntConverter.ConvertFrom\n- uid: System.Configuration.InfiniteIntConverter.ConvertTo*\n  parent: System.Configuration.InfiniteIntConverter\n  isExternal: false\n  name: ConvertTo\n  nameWithType: InfiniteIntConverter.ConvertTo\n"}