{"nodes":[{"pos":[1058,1124],"content":"A base class representing an HTTP entity body and content headers.","needQuote":true,"needEscape":true,"nodes":[{"content":"A base class representing an HTTP entity body and content headers.","pos":[0,66]}]},{"pos":[1639,1728],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.HttpContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpContent\"></xref> class."},{"pos":[2268,2399],"content":"Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">stream</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <code>stream</code> parameter."},{"pos":[2411,2611],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the stream object passed as the `stream` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written to the stream object passed as the <ph id=\"ph1\">`stream`</ph> parameter.","pos":[31,200],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the stream object passed as the `stream` parameter."}]},{"pos":[2790,2808],"content":"The target stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target stream.","pos":[0,18]}]},{"pos":[2880,2936],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[3521,3652],"content":"Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">stream</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <code>stream</code> parameter."},{"pos":[3664,3864],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the stream object passed as the `stream` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written to the stream object passed as the <ph id=\"ph1\">`stream`</ph> parameter.","pos":[31,200],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the stream object passed as the `stream` parameter."}]},{"pos":[4080,4098],"content":"The target stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target stream.","pos":[0,18]}]},{"pos":[4176,4329],"content":"Information about the transport (channel binding token, for example). This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information about the transport (channel binding token, for example).","pos":[0,69]},{"content":"This parameter may be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[70,153],"source":" This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[4401,4457],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[4966,5041],"content":"Serialize the HTTP content to a memory stream as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serialize the HTTP content to a memory stream as an asynchronous operation.","pos":[0,75]}]},{"pos":[5054,5855],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the memory stream.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the memory stream that that represents the HTTP content. The returned stream can then be used to read the content using various stream APIs.       The CreateContentReadStreamAsync method buffers the content to a memory stream. Derived classes can override this behavior if there is a better way to retrieve the content as stream. For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <xref:System.IO.MemoryStream> around the bytes or string.)","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the memory stream.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the memory stream that that represents the HTTP content. The returned stream can then be used to read the content using various stream APIs.       The CreateContentReadStreamAsync method buffers the content to a memory stream. Derived classes can override this behavior if there is a better way to retrieve the content as stream. For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <xref:System.IO.MemoryStream> around the bytes or string.)","pos":[0,797],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written to the memory stream.","pos":[31,167],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the memory stream."},{"content":"Once the operation completes, the  &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the returned task object contains the memory stream that that represents the HTTP content.","pos":[174,360],"source":"       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the memory stream that that represents the HTTP content."},{"content":"The returned stream can then be used to read the content using various stream APIs.","pos":[361,444]},{"content":"The CreateContentReadStreamAsync method buffers the content to a memory stream.","pos":[451,530]},{"content":"Derived classes can override this behavior if there is a better way to retrieve the content as stream.","pos":[531,633]},{"content":"For example, a byte array or a string could use a more efficient method way such as wrapping a read-only &lt;xref:System.IO.MemoryStream&gt; around the bytes or string.)","pos":[634,797],"source":" For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <xref:System.IO.MemoryStream> around the bytes or string.)"}]}]},{"pos":[6085,6141],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[6562,6694],"content":"Releases the unmanaged resources and disposes of the managed resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.HttpContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources and disposes of the managed resources used by the <xref href=\"System.Net.Http.HttpContent\"></xref>."},{"pos":[7213,7356],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.HttpContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally disposes of the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpContent\"></xref> and optionally disposes of the managed resources."},{"pos":[7368,7892],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpContent> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.When the <ph id=\"ph4\">`disposing`</ph> parameter is <ph id=\"ph5\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Net.Http.HttpContent&gt; references.","pos":[210,454],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpContent> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[455,524],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[8047,8257],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to releases only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to releases only unmanaged resources."},{"pos":[8653,8706],"content":"Gets the HTTP content headers as defined in RFC 2616.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the HTTP content headers as defined in RFC 2616.","pos":[0,53]}]},{"pos":[8883,8926],"content":"The content headers as defined in RFC 2616.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content headers as defined in RFC 2616.","pos":[0,43]}]},{"pos":[9386,9461],"content":"Serialize the HTTP content to a memory buffer as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serialize the HTTP content to a memory buffer as an asynchronous operation.","pos":[0,75]}]},{"pos":[9474,9840],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.       After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.       After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream.","pos":[0,364],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after all of the content has been serialized to the memory buffer.","pos":[31,166],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer."},{"content":"After content is serialized to a memory buffer, calls to one of the  &lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt; methods will copy the content of the memory buffer to the target stream.","pos":[173,364],"source":"       After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream."}]}]},{"pos":[10014,10070],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[10585,10660],"content":"Serialize the HTTP content to a memory buffer as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serialize the HTTP content to a memory buffer as an asynchronous operation.","pos":[0,75]}]},{"pos":[10673,11147],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.       After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream.       If the content exceeds the value  passed in the `maxBufferSize` parameter , an exception is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after all of the content has been serialized to the memory buffer.","pos":[31,166],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer."},{"content":"After content is serialized to a memory buffer, calls to one of the  &lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt; methods will copy the content of the memory buffer to the target stream.","pos":[173,364],"source":"       After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream."},{"content":"If the content exceeds the value  passed in the <ph id=\"ph1\">`maxBufferSize`</ph> parameter , an exception is thrown.","pos":[371,470],"source":"       If the content exceeds the value  passed in the `maxBufferSize` parameter , an exception is thrown."}]},{"pos":[11333,11382],"content":"The maximum size, in bytes, of the buffer to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum size, in bytes, of the buffer to use.","pos":[0,49]}]},{"pos":[11454,11510],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[11987,12059],"content":"Serialize the HTTP content to a byte array as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serialize the HTTP content to a byte array as an asynchronous operation.","pos":[0,72]}]},{"pos":[12072,12410],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a byte array.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the byte array with the HTTP content.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a byte array.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the byte array with the HTTP content.","pos":[0,336],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written as a byte array.","pos":[31,162],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a byte array."},{"content":"Once the operation completes, the  &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the returned task object contains the byte array with the HTTP content.","pos":[169,336],"source":"       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the byte array with the HTTP content."}]}]},{"pos":[12608,12664],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[13127,13231],"content":"Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.","pos":[0,104]}]},{"pos":[13244,13682],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the stream that represents content has been read.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the stream that that represents the HTTP content. The returned stream can then be used to read the content using various stream APIs.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the stream that represents content has been read.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the stream that that represents the HTTP content. The returned stream can then be used to read the content using various stream APIs.","pos":[0,436],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the stream that represents content has been read.","pos":[31,166],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the stream that represents content has been read."},{"content":"Once the operation completes, the  &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the returned task object contains the stream that that represents the HTTP content.","pos":[173,352],"source":"       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the stream that that represents the HTTP content."},{"content":"The returned stream can then be used to read the content using various stream APIs.","pos":[353,436]}]}]},{"pos":[13890,13946],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[14406,14474],"content":"Serialize the HTTP content to a string as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serialize the HTTP content to a string as an asynchronous operation.","pos":[0,68]}]},{"pos":[14487,14817],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a string.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the string with the HTTP content.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a string.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the string with the HTTP content.","pos":[0,328],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written as a string.","pos":[31,158],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a string."},{"content":"Once the operation completes, the  &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the returned task object contains the string with the HTTP content.","pos":[165,328],"source":"       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the string with the HTTP content."}]}]},{"pos":[15012,15068],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[15714,15782],"content":"Serialize the HTTP content to a stream as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serialize the HTTP content to a stream as an asynchronous operation.","pos":[0,68]}]},{"pos":[15794,15997],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been serialized to the stream object passed in the `stream` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been serialized to the stream object passed in the <ph id=\"ph1\">`stream`</ph> parameter.","pos":[31,203],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been serialized to the stream object passed in the `stream` parameter."}]},{"pos":[16236,16254],"content":"The target stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target stream.","pos":[0,18]}]},{"pos":[16332,16485],"content":"Information about the transport (channel binding token, for example). This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information about the transport (channel binding token, for example).","pos":[0,69]},{"content":"This parameter may be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[70,153],"source":" This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[16557,16613],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[17118,17182],"content":"Determines whether the HTTP content has a valid length in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the HTTP content has a valid length in bytes.","pos":[0,64]}]},{"pos":[17194,17767],"content":"The TryComputeLength method gives a HTTP content the ability to calculate the content length. This is useful for content types which are able to easily calculate the content length. If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`. If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TryComputeLength method gives a HTTP content the ability to calculate the content length.","pos":[0,93]},{"content":"This is useful for content types which are able to easily calculate the content length.","pos":[94,181]},{"content":"If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return <ph id=\"ph1\">`false`</ph>.","pos":[182,423],"source":" If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.","pos":[424,573],"source":" If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server."}]},{"pos":[17928,17968],"content":"The length in bytes of the HTTP content.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length in bytes of the HTTP content.","pos":[0,40]}]},{"pos":[18027,18204],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p2\">&lt;/code&gt;</ept> is a valid length; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>length</code> is a valid length; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Http.HttpContent\n  id: HttpContent\n  children:\n  - System.Net.Http.HttpContent.#ctor\n  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)\n  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  - System.Net.Http.HttpContent.CreateContentReadStreamAsync\n  - System.Net.Http.HttpContent.Dispose\n  - System.Net.Http.HttpContent.Dispose(System.Boolean)\n  - System.Net.Http.HttpContent.Headers\n  - System.Net.Http.HttpContent.LoadIntoBufferAsync\n  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)\n  - System.Net.Http.HttpContent.ReadAsByteArrayAsync\n  - System.Net.Http.HttpContent.ReadAsStreamAsync\n  - System.Net.Http.HttpContent.ReadAsStringAsync\n  - System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  - System.Net.Http.HttpContent.TryComputeLength(System.Int64@)\n  langs:\n  - csharp\n  name: HttpContent\n  nameWithType: HttpContent\n  fullName: System.Net.Http.HttpContent\n  type: Class\n  summary: A base class representing an HTTP entity body and content headers.\n  syntax:\n    content: 'public abstract class HttpContent : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: HttpContent()\n  nameWithType: HttpContent.HttpContent()\n  fullName: System.Net.Http.HttpContent.HttpContent()\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.HttpContent\"></xref> class.\n  syntax:\n    content: protected HttpContent ();\n    parameters: []\n  overload: System.Net.Http.HttpContent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)\n  id: CopyToAsync(System.IO.Stream)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: CopyToAsync(Stream)\n  nameWithType: HttpContent.CopyToAsync(Stream)\n  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <code>stream</code> parameter.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the stream object passed as the `stream` parameter.\n  syntax:\n    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The target stream.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.CopyToAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  id: CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: CopyToAsync(Stream,TransportContext)\n  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)\n  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <code>stream</code> parameter.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the stream object passed as the `stream` parameter.\n  syntax:\n    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream, System.Net.TransportContext context);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The target stream.\n    - id: context\n      type: System.Net.TransportContext\n      description: Information about the transport (channel binding token, for example). This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.CopyToAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync\n  id: CreateContentReadStreamAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: CreateContentReadStreamAsync()\n  nameWithType: HttpContent.CreateContentReadStreamAsync()\n  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content to a memory stream as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the memory stream.  \\n  \\n Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the memory stream that that represents the HTTP content. The returned stream can then be used to read the content using various stream APIs.  \\n  \\n The CreateContentReadStreamAsync method buffers the content to a memory stream. Derived classes can override this behavior if there is a better way to retrieve the content as stream. For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <xref:System.IO.MemoryStream> around the bytes or string.)\"\n  syntax:\n    content: protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.CreateContentReadStreamAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.Dispose\n  id: Dispose\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: HttpContent.Dispose()\n  fullName: System.Net.Http.HttpContent.Dispose()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Releases the unmanaged resources and disposes of the managed resources used by the <xref href=\"System.Net.Http.HttpContent\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Net.Http.HttpContent.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HttpContent.Dispose(Boolean)\n  fullName: System.Net.Http.HttpContent.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpContent\"></xref> and optionally disposes of the managed resources.\n  remarks: This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpContent> references. This method invokes the `Dispose()` method of each referenced object.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to releases only unmanaged resources.\n  overload: System.Net.Http.HttpContent.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.Headers\n  id: Headers\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: Headers\n  nameWithType: HttpContent.Headers\n  fullName: System.Net.Http.HttpContent.Headers\n  type: Property\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Gets the HTTP content headers as defined in RFC 2616.\n  syntax:\n    content: public System.Net.Http.Headers.HttpContentHeaders Headers { get; }\n    return:\n      type: System.Net.Http.Headers.HttpContentHeaders\n      description: The content headers as defined in RFC 2616.\n  overload: System.Net.Http.HttpContent.Headers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync\n  id: LoadIntoBufferAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: LoadIntoBufferAsync()\n  nameWithType: HttpContent.LoadIntoBufferAsync()\n  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content to a memory buffer as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.  \\n  \\n After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream.\"\n  syntax:\n    content: public System.Threading.Tasks.Task LoadIntoBufferAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)\n  id: LoadIntoBufferAsync(System.Int64)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: LoadIntoBufferAsync(Int64)\n  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)\n  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content to a memory buffer as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.  \\n  \\n After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream.  \\n  \\n If the content exceeds the value  passed in the `maxBufferSize` parameter , an exception is thrown.\"\n  syntax:\n    content: public System.Threading.Tasks.Task LoadIntoBufferAsync (long maxBufferSize);\n    parameters:\n    - id: maxBufferSize\n      type: System.Int64\n      description: The maximum size, in bytes, of the buffer to use.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync\n  id: ReadAsByteArrayAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: ReadAsByteArrayAsync()\n  nameWithType: HttpContent.ReadAsByteArrayAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content to a byte array as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a byte array.  \\n  \\n Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the byte array with the HTTP content.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.ReadAsByteArrayAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.ReadAsStreamAsync\n  id: ReadAsStreamAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: ReadAsStreamAsync()\n  nameWithType: HttpContent.ReadAsStreamAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the stream that represents content has been read.  \\n  \\n Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the stream that that represents the HTTP content. The returned stream can then be used to read the content using various stream APIs.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.ReadAsStreamAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.ReadAsStringAsync\n  id: ReadAsStringAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: ReadAsStringAsync()\n  nameWithType: HttpContent.ReadAsStringAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content to a string as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a string.  \\n  \\n Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the string with the HTTP content.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<string> ReadAsStringAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.ReadAsStringAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: SerializeToStreamAsync(Stream,TransportContext)\n  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)\n  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize the HTTP content to a stream as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been serialized to the stream object passed in the `stream` parameter.\n  syntax:\n    content: protected abstract System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The target stream.\n    - id: context\n      type: System.Net.TransportContext\n      description: Information about the transport (channel binding token, for example). This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpContent.SerializeToStreamAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)\n  id: TryComputeLength(System.Int64@)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  name: TryComputeLength(Int64)\n  nameWithType: HttpContent.TryComputeLength(Int64)\n  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Determines whether the HTTP content has a valid length in bytes.\n  remarks: The TryComputeLength method gives a HTTP content the ability to calculate the content length. This is useful for content types which are able to easily calculate the content length. If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`. If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.\n  syntax:\n    content: protected abstract bool TryComputeLength (out long length);\n    parameters:\n    - id: length\n      type: System.Int64\n      description: The length in bytes of the HTTP content.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>length</code> is a valid length; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Http.HttpContent.TryComputeLength*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Net.Http.HttpContent.#ctor\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: HttpContent()\n  nameWithType: HttpContent.HttpContent()\n  fullName: System.Net.Http.HttpContent.HttpContent()\n- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: HttpContent.CopyToAsync(Stream)\n  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: CopyToAsync(Stream,TransportContext)\n  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)\n  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)\n- uid: System.Net.TransportContext\n  parent: System.Net\n  isExternal: true\n  name: TransportContext\n  nameWithType: TransportContext\n  fullName: System.Net.TransportContext\n- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: CreateContentReadStreamAsync()\n  nameWithType: HttpContent.CreateContentReadStreamAsync()\n  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()\n- uid: System.Threading.Tasks.Task{System.IO.Stream}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<Stream>\n  nameWithType: Task<Stream>\n  fullName: System.Threading.Tasks.Task<System.IO.Stream>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.IO.Stream>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: Stream\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpContent.Dispose\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: Dispose()\n  nameWithType: HttpContent.Dispose()\n  fullName: System.Net.Http.HttpContent.Dispose()\n- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HttpContent.Dispose(Boolean)\n  fullName: System.Net.Http.HttpContent.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Http.HttpContent.Headers\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: Headers\n  nameWithType: HttpContent.Headers\n  fullName: System.Net.Http.HttpContent.Headers\n- uid: System.Net.Http.Headers.HttpContentHeaders\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: HttpContentHeaders\n  nameWithType: HttpContentHeaders\n  fullName: System.Net.Http.Headers.HttpContentHeaders\n- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: LoadIntoBufferAsync()\n  nameWithType: HttpContent.LoadIntoBufferAsync()\n  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()\n- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: LoadIntoBufferAsync(Int64)\n  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)\n  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: ReadAsByteArrayAsync()\n  nameWithType: HttpContent.ReadAsByteArrayAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()\n- uid: System.Threading.Tasks.Task{System.Byte[]}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<Byte>\n  nameWithType: Task<Byte>\n  fullName: System.Threading.Tasks.Task<System.Byte[]>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Byte[]>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpContent.ReadAsStreamAsync\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: ReadAsStreamAsync()\n  nameWithType: HttpContent.ReadAsStreamAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()\n- uid: System.Net.Http.HttpContent.ReadAsStringAsync\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: ReadAsStringAsync()\n  nameWithType: HttpContent.ReadAsStringAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<String>\n  nameWithType: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: SerializeToStreamAsync(Stream,TransportContext)\n  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)\n  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)\n- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: TryComputeLength(Int64)\n  nameWithType: HttpContent.TryComputeLength(Int64)\n  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)\n- uid: System.Net.Http.HttpContent.#ctor*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: HttpContent\n  nameWithType: HttpContent.HttpContent\n- uid: System.Net.Http.HttpContent.CopyToAsync*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: CopyToAsync\n  nameWithType: HttpContent.CopyToAsync\n- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: CreateContentReadStreamAsync\n  nameWithType: HttpContent.CreateContentReadStreamAsync\n- uid: System.Net.Http.HttpContent.Dispose*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: Dispose\n  nameWithType: HttpContent.Dispose\n- uid: System.Net.Http.HttpContent.Headers*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: Headers\n  nameWithType: HttpContent.Headers\n- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: LoadIntoBufferAsync\n  nameWithType: HttpContent.LoadIntoBufferAsync\n- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: ReadAsByteArrayAsync\n  nameWithType: HttpContent.ReadAsByteArrayAsync\n- uid: System.Net.Http.HttpContent.ReadAsStreamAsync*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: ReadAsStreamAsync\n  nameWithType: HttpContent.ReadAsStreamAsync\n- uid: System.Net.Http.HttpContent.ReadAsStringAsync*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: ReadAsStringAsync\n  nameWithType: HttpContent.ReadAsStringAsync\n- uid: System.Net.Http.HttpContent.SerializeToStreamAsync*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: SerializeToStreamAsync\n  nameWithType: HttpContent.SerializeToStreamAsync\n- uid: System.Net.Http.HttpContent.TryComputeLength*\n  parent: System.Net.Http.HttpContent\n  isExternal: false\n  name: TryComputeLength\n  nameWithType: HttpContent.TryComputeLength\n"}