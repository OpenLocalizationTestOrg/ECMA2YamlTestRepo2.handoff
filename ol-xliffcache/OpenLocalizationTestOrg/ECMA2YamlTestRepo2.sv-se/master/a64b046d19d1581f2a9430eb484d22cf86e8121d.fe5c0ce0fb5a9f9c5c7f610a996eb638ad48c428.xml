{"nodes":[{"pos":[358,469],"content":"Provides data for the <xref href=\"System.Console.CancelKeyPress\"></xref> event. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Console.CancelKeyPress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","pos":[0,79],"source":"Provides data for the <xref href=\"System.Console.CancelKeyPress\"></xref> event."},{"content":"This class cannot be inherited.","pos":[80,111]}]},{"pos":[482,1248],"content":"A user can interrupt a console application process by simultaneously pressing the <xref:System.ConsoleModifiers> modifier key and the <xref:System.ConsoleKey> console key (Ctrl+C), or the <xref:System.ConsoleModifiers> modifier key and the Break console key (Ctrl+Break). The .NET Framework consequently provides a ConsoleCancelEventArgs object to the event handler for the <xref:System.Console.CancelKeyPress?displayProperty=fullName> event to specify whether the process should be cancelled.       If the <xref:System.ConsoleCancelEventArgs.Cancel%2A> property is set to `true` in the event handler, the process is resumed; otherwise, the process is terminated. By default, the value of the ConsoleCancelEventArgs property is `false`, and the process terminates.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A user can interrupt a console application process by simultaneously pressing the &lt;xref:System.ConsoleModifiers&gt; modifier key and the &lt;xref:System.ConsoleKey&gt; console key (Ctrl+C), or the &lt;xref:System.ConsoleModifiers&gt; modifier key and the Break console key (Ctrl+Break).","pos":[0,271],"source":"A user can interrupt a console application process by simultaneously pressing the <xref:System.ConsoleModifiers> modifier key and the <xref:System.ConsoleKey> console key (Ctrl+C), or the <xref:System.ConsoleModifiers> modifier key and the Break console key (Ctrl+Break)."},{"content":"The .NET Framework consequently provides a ConsoleCancelEventArgs object to the event handler for the &lt;xref:System.Console.CancelKeyPress?displayProperty=fullName&gt; event to specify whether the process should be cancelled.","pos":[272,493],"source":" The .NET Framework consequently provides a ConsoleCancelEventArgs object to the event handler for the <xref:System.Console.CancelKeyPress?displayProperty=fullName> event to specify whether the process should be cancelled."},{"content":"If the &lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt; property is set to <ph id=\"ph1\">`true`</ph> in the event handler, the process is resumed; otherwise, the process is terminated.","pos":[500,663],"source":"       If the <xref:System.ConsoleCancelEventArgs.Cancel%2A> property is set to `true` in the event handler, the process is resumed; otherwise, the process is terminated."},{"content":"By default, the value of the ConsoleCancelEventArgs property is <ph id=\"ph1\">`false`</ph>, and the process terminates.","pos":[664,764],"source":" By default, the value of the ConsoleCancelEventArgs property is `false`, and the process terminates."}]},{"pos":[2148,2517],"content":"Gets or sets a value that indicates whether simultaneously pressing the <xref href=\"System.ConsoleModifiers\"></xref> modifier key and the <xref href=\"System.ConsoleKey\"></xref> console key (Ctrl+C) or the Ctrl+Break keys terminates the current process. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, which terminates the current process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether simultaneously pressing the <bpt id=\"p1\">&lt;xref href=\"System.ConsoleModifiers\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> modifier key and the <bpt id=\"p2\">&lt;xref href=\"System.ConsoleKey\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> console key (Ctrl+C) or the Ctrl+Break keys terminates the current process.","pos":[0,252],"source":"Gets or sets a value that indicates whether simultaneously pressing the <xref href=\"System.ConsoleModifiers\"></xref> modifier key and the <xref href=\"System.ConsoleKey\"></xref> console key (Ctrl+C) or the Ctrl+Break keys terminates the current process."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which terminates the current process.","pos":[253,369],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, which terminates the current process."}]},{"pos":[2530,3014],"content":"The Cancel property is automatically initialized to `false` when the handler for the <xref:System.Console.CancelKeyPress> event is invoked. The value of the Cancel property when the event handler finishes determines whether the current process resumes or terminates.       In a set operation after Ctrl+C is pressed, specify `true` to indicate that the current process should resume when the event handler concludes, or `false` to indicate that the current process should terminate.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Cancel property is automatically initialized to <ph id=\"ph1\">`false`</ph> when the handler for the &lt;xref:System.Console.CancelKeyPress&gt; event is invoked.","pos":[0,139],"source":"The Cancel property is automatically initialized to `false` when the handler for the <xref:System.Console.CancelKeyPress> event is invoked."},{"content":"The value of the Cancel property when the event handler finishes determines whether the current process resumes or terminates.","pos":[140,266]},{"content":"In a set operation after Ctrl+C is pressed, specify <ph id=\"ph1\">`true`</ph> to indicate that the current process should resume when the event handler concludes, or <ph id=\"ph2\">`false`</ph> to indicate that the current process should terminate.","pos":[273,482],"source":"       In a set operation after Ctrl+C is pressed, specify `true` to indicate that the current process should resume when the event handler concludes, or `false` to indicate that the current process should terminate."}]},{"pos":[3534,4013],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current process should resume when the event handler concludes; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the current process should terminate. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>; the current process terminates when the event handler returns. If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the current process continues.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current process should resume when the event handler concludes; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the current process should terminate.","pos":[0,235],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current process should resume when the event handler concludes; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the current process should terminate."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; the current process terminates when the event handler returns.","pos":[236,383],"source":" The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>; the current process terminates when the event handler returns."},{"content":"If <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the current process continues.","pos":[384,479],"source":" If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the current process continues."}]},{"pos":[4426,4513],"content":"Gets the combination of modifier and console keys that interrupted the current process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the combination of modifier and console keys that interrupted the current process.","pos":[0,87]}]},{"pos":[5072,5201],"content":"One of the enumeration values that specifies the key combination that interrupted the current process. There is no default value.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the key combination that interrupted the current process. There is no default value.","pos":[0,129],"nodes":[{"content":"One of the enumeration values that specifies the key combination that interrupted the current process.","pos":[0,102]},{"content":"There is no default value.","pos":[103,129]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ConsoleCancelEventArgs\n  id: ConsoleCancelEventArgs\n  children:\n  - System.ConsoleCancelEventArgs.Cancel\n  - System.ConsoleCancelEventArgs.SpecialKey\n  langs:\n  - csharp\n  name: ConsoleCancelEventArgs\n  nameWithType: ConsoleCancelEventArgs\n  fullName: System.ConsoleCancelEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Console.CancelKeyPress\"></xref> event. This class cannot be inherited.\n  remarks: \"A user can interrupt a console application process by simultaneously pressing the <xref:System.ConsoleModifiers> modifier key and the <xref:System.ConsoleKey> console key (Ctrl+C), or the <xref:System.ConsoleModifiers> modifier key and the Break console key (Ctrl+Break). The .NET Framework consequently provides a ConsoleCancelEventArgs object to the event handler for the <xref:System.Console.CancelKeyPress?displayProperty=fullName> event to specify whether the process should be cancelled.  \\n  \\n If the <xref:System.ConsoleCancelEventArgs.Cancel%2A> property is set to `true` in the event handler, the process is resumed; otherwise, the process is terminated. By default, the value of the ConsoleCancelEventArgs property is `false`, and the process terminates.\"\n  example:\n  - \"The following example demonstrates how to use the ConsoleCancelEventArgs class to handle an event.  \\n  \\n [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/t-system.consolecancelev_1_1.cs)]\\n [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/t-system.consolecancelev_1_1.cpp)]\\n [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/t-system.consolecancelev_1_1.vb)]\"\n  syntax:\n    content: 'public sealed class ConsoleCancelEventArgs : EventArgs'\n  inheritance:\n  - System.EventArgs\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ConsoleCancelEventArgs.Cancel\n  id: Cancel\n  parent: System.ConsoleCancelEventArgs\n  langs:\n  - csharp\n  name: Cancel\n  nameWithType: ConsoleCancelEventArgs.Cancel\n  fullName: System.ConsoleCancelEventArgs.Cancel\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a value that indicates whether simultaneously pressing the <xref href=\"System.ConsoleModifiers\"></xref> modifier key and the <xref href=\"System.ConsoleKey\"></xref> console key (Ctrl+C) or the Ctrl+Break keys terminates the current process. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, which terminates the current process.\n  remarks: \"The Cancel property is automatically initialized to `false` when the handler for the <xref:System.Console.CancelKeyPress> event is invoked. The value of the Cancel property when the event handler finishes determines whether the current process resumes or terminates.  \\n  \\n In a set operation after Ctrl+C is pressed, specify `true` to indicate that the current process should resume when the event handler concludes, or `false` to indicate that the current process should terminate.\"\n  example:\n  - \"The following example demonstrates how to use the Cancel property to handle an event.  \\n  \\n [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/p-system.consolecancelev_0_1.cs)]\\n [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/p-system.consolecancelev_0_1.cpp)]\\n [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/p-system.consolecancelev_0_1.vb)]\"\n  syntax:\n    content: public bool Cancel { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current process should resume when the event handler concludes; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the current process should terminate. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>; the current process terminates when the event handler returns. If <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the current process continues.\n  overload: System.ConsoleCancelEventArgs.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ConsoleCancelEventArgs.SpecialKey\n  id: SpecialKey\n  parent: System.ConsoleCancelEventArgs\n  langs:\n  - csharp\n  name: SpecialKey\n  nameWithType: ConsoleCancelEventArgs.SpecialKey\n  fullName: System.ConsoleCancelEventArgs.SpecialKey\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the combination of modifier and console keys that interrupted the current process.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the SpecialKey property to handle an event.  \\n  \\n [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/p-system.consolecancelev_1_1.cs)]\\n [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/p-system.consolecancelev_1_1.cpp)]\\n [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/p-system.consolecancelev_1_1.vb)]\"\n  syntax:\n    content: public ConsoleSpecialKey SpecialKey { get; }\n    return:\n      type: System.ConsoleSpecialKey\n      description: One of the enumeration values that specifies the key combination that interrupted the current process. There is no default value.\n  overload: System.ConsoleCancelEventArgs.SpecialKey*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.EventArgs\n  isExternal: false\n  name: System.EventArgs\n- uid: System.ConsoleCancelEventArgs.Cancel\n  parent: System.ConsoleCancelEventArgs\n  isExternal: false\n  name: Cancel\n  nameWithType: ConsoleCancelEventArgs.Cancel\n  fullName: System.ConsoleCancelEventArgs.Cancel\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ConsoleCancelEventArgs.SpecialKey\n  parent: System.ConsoleCancelEventArgs\n  isExternal: false\n  name: SpecialKey\n  nameWithType: ConsoleCancelEventArgs.SpecialKey\n  fullName: System.ConsoleCancelEventArgs.SpecialKey\n- uid: System.ConsoleSpecialKey\n  parent: System\n  isExternal: false\n  name: ConsoleSpecialKey\n  nameWithType: ConsoleSpecialKey\n  fullName: System.ConsoleSpecialKey\n- uid: System.ConsoleCancelEventArgs.Cancel*\n  parent: System.ConsoleCancelEventArgs\n  isExternal: false\n  name: Cancel\n  nameWithType: ConsoleCancelEventArgs.Cancel\n- uid: System.ConsoleCancelEventArgs.SpecialKey*\n  parent: System.ConsoleCancelEventArgs\n  isExternal: false\n  name: SpecialKey\n  nameWithType: ConsoleCancelEventArgs.SpecialKey\n"}