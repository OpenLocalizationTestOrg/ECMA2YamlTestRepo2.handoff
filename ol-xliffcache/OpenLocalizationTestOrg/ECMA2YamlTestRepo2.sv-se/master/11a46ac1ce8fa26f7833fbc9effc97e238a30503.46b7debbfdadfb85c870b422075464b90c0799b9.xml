{"nodes":[{"pos":[499,577],"content":"Serializes or deserializes objects from the body of a Message Queuing message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serializes or deserializes objects from the body of a Message Queuing message.","pos":[0,78]}]},{"pos":[590,1531],"content":"When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object (which can be an instance of any class) into a stream and inserts it into the message body. When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.       <xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>. The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications. The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, which means that the server and client can version the type that is sent and received independently.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object (which can be an instance of any class) into a stream and inserts it into the message body. When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.       <xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>. The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications. The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, which means that the server and client can version the type that is sent and received independently.","pos":[0,939],"nodes":[{"content":"When an application sends a message to the queue using an instance of the &lt;xref:System.Messaging.MessageQueue&gt; class, the formatter serializes the object (which can be an instance of any class) into a stream and inserts it into the message body.","pos":[0,245],"source":"When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object (which can be an instance of any class) into a stream and inserts it into the message body."},{"content":"When reading from a queue using a &lt;xref:System.Messaging.MessageQueue&gt;, the formatter deserializes the message data into the &lt;xref:System.Messaging.Message.Body%2A&gt; property of a &lt;xref:System.Messaging.Message&gt;.","pos":[246,457],"source":" When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>."},{"content":"&lt;xref:System.Messaging.BinaryMessageFormatter&gt; and &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; provide faster throughput than the &lt;xref:System.Messaging.XmlMessageFormatter&gt;.","pos":[464,642],"source":"       <xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>."},{"content":"The &lt;xref:System.Messaging.ActiveXMessageFormatter&gt; allows interoperability with Visual Basic 6.0 Message Queuing applications.","pos":[643,770],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications."},{"content":"The &lt;xref:System.Messaging.XmlMessageFormatter&gt; is loosely coupled, which means that the server and client can version the type that is sent and received independently.","pos":[771,939],"source":" The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, which means that the server and client can version the type that is sent and received independently."}]}]},{"pos":[2188,2294],"content":"When implemented in a class, determines whether the formatter can deserialize the contents of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a class, determines whether the formatter can deserialize the contents of the message.","pos":[0,106]}]},{"pos":[2464,2525],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Message\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to inspect.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Messaging.Message\"></xref> to inspect."},{"pos":[2584,2765],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the formatter can deserialize the message; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the formatter can deserialize the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3259,3388],"content":"When implemented in a class, reads the contents from the given message and creates an object that contains data from the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a class, reads the contents from the given message and creates an object that contains data from the message.","pos":[0,129]}]},{"pos":[3557,3622],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Message\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to deserialize.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Messaging.Message\"></xref> to deserialize."},{"pos":[3680,3705],"content":"The deserialized message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The deserialized message.","pos":[0,25]}]},{"pos":[4250,4329],"content":"When implemented in a class, serializes an object into the body of the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a class, serializes an object into the body of the message.","pos":[0,79]}]},{"pos":[4509,4599],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Message\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that will contain the serialized object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Messaging.Message\"></xref> that will contain the serialized object."},{"pos":[4659,4704],"content":"The object to be serialized into the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to be serialized into the message.","pos":[0,45]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.IMessageFormatter\n  id: IMessageFormatter\n  children:\n  - System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)\n  - System.Messaging.IMessageFormatter.Read(System.Messaging.Message)\n  - System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)\n  langs:\n  - csharp\n  name: IMessageFormatter\n  nameWithType: IMessageFormatter\n  fullName: System.Messaging.IMessageFormatter\n  type: Interface\n  summary: Serializes or deserializes objects from the body of a Message Queuing message.\n  remarks: \"When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object (which can be an instance of any class) into a stream and inserts it into the message body. When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.  \\n  \\n <xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>. The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications. The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, which means that the server and client can version the type that is sent and received independently.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))]\n\n      public interface IMessageFormatter : ICloneable\n  implements:\n  - System.ICloneable\n  platform:\n  - net462\n- uid: System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)\n  id: CanRead(System.Messaging.Message)\n  parent: System.Messaging.IMessageFormatter\n  langs:\n  - csharp\n  name: CanRead(Message)\n  nameWithType: IMessageFormatter.CanRead(Message)\n  fullName: System.Messaging.IMessageFormatter.CanRead(Message)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: When implemented in a class, determines whether the formatter can deserialize the contents of the message.\n  syntax:\n    content: public bool CanRead (System.Messaging.Message message);\n    parameters:\n    - id: message\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> to inspect.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the formatter can deserialize the message; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Messaging.IMessageFormatter.CanRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.IMessageFormatter.Read(System.Messaging.Message)\n  id: Read(System.Messaging.Message)\n  parent: System.Messaging.IMessageFormatter\n  langs:\n  - csharp\n  name: Read(Message)\n  nameWithType: IMessageFormatter.Read(Message)\n  fullName: System.Messaging.IMessageFormatter.Read(Message)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: When implemented in a class, reads the contents from the given message and creates an object that contains data from the message.\n  syntax:\n    content: public object Read (System.Messaging.Message message);\n    parameters:\n    - id: message\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> to deserialize.\n    return:\n      type: System.Object\n      description: The deserialized message.\n  overload: System.Messaging.IMessageFormatter.Read*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)\n  id: Write(System.Messaging.Message,System.Object)\n  parent: System.Messaging.IMessageFormatter\n  langs:\n  - csharp\n  name: Write(Message,Object)\n  nameWithType: IMessageFormatter.Write(Message,Object)\n  fullName: System.Messaging.IMessageFormatter.Write(Message,Object)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: When implemented in a class, serializes an object into the body of the message.\n  syntax:\n    content: public void Write (System.Messaging.Message message, object obj);\n    parameters:\n    - id: message\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> that will contain the serialized object.\n    - id: obj\n      type: System.Object\n      description: The object to be serialized into the message.\n  overload: System.Messaging.IMessageFormatter.Write*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)\n  parent: System.Messaging.IMessageFormatter\n  isExternal: false\n  name: CanRead(Message)\n  nameWithType: IMessageFormatter.CanRead(Message)\n  fullName: System.Messaging.IMessageFormatter.CanRead(Message)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Messaging.Message\n  parent: System.Messaging\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.Messaging.Message\n- uid: System.Messaging.IMessageFormatter.Read(System.Messaging.Message)\n  parent: System.Messaging.IMessageFormatter\n  isExternal: false\n  name: Read(Message)\n  nameWithType: IMessageFormatter.Read(Message)\n  fullName: System.Messaging.IMessageFormatter.Read(Message)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)\n  parent: System.Messaging.IMessageFormatter\n  isExternal: false\n  name: Write(Message,Object)\n  nameWithType: IMessageFormatter.Write(Message,Object)\n  fullName: System.Messaging.IMessageFormatter.Write(Message,Object)\n- uid: System.Messaging.IMessageFormatter.CanRead*\n  parent: System.Messaging.IMessageFormatter\n  isExternal: false\n  name: CanRead\n  nameWithType: IMessageFormatter.CanRead\n- uid: System.Messaging.IMessageFormatter.Read*\n  parent: System.Messaging.IMessageFormatter\n  isExternal: false\n  name: Read\n  nameWithType: IMessageFormatter.Read\n- uid: System.Messaging.IMessageFormatter.Write*\n  parent: System.Messaging.IMessageFormatter\n  isExternal: false\n  name: Write\n  nameWithType: IMessageFormatter.Write\n"}