{"nodes":[{"pos":[3436,3651],"content":"Creates an empty <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.Prompt\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.","needQuote":true,"needEscape":true,"source":"Creates an empty <xref href=\"System.Speech.Synthesis.Prompt\"></xref> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words."},{"pos":[3664,5246],"content":"With PromptBuilder, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another PromptBuilder object.       To append text to a PromptBuilder object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.  You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.       You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.       Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.       To generate speech from a PromptBuilder object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.       For more information, see [Constructing a Complex Prompt](http://msdn.microsoft.com/en-us/552cb356-7344-473e-b0f2-7a9983f8c1a4).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"With PromptBuilder, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another PromptBuilder object.","pos":[0,184]},{"content":"To append text to a PromptBuilder object and optionally control voice attributes such as emphasis, rate, and volume, use one of the &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A&gt; methods.","pos":[191,390],"source":"       To append text to a PromptBuilder object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods."},{"content":"You can also control voice attributes as a group with the &lt;xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A&gt; and &lt;xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A&gt; methods.","pos":[392,578],"source":"  You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods."},{"content":"You can append text and control what is spoken or how it is pronounced using the &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A&gt;, &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A&gt;, &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A&gt;,  &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A&gt;, or &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A&gt; methods.","pos":[585,1017],"source":"       You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods."},{"content":"Change the currently selected speaking voice in the prompt using one of the overloaded &lt;xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A&gt; methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.","pos":[1024,1279],"source":"       Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender."},{"content":"To generate speech from a PromptBuilder object, you can pass it as an argument to the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt; method.","pos":[1286,1437],"source":"       To generate speech from a PromptBuilder object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Constructing a Complex Prompt<ept id=\"p1\">](http://msdn.microsoft.com/en-us/552cb356-7344-473e-b0f2-7a9983f8c1a4)</ept>.","pos":[1444,1572],"source":"       For more information, see [Constructing a Complex Prompt](http://msdn.microsoft.com/en-us/552cb356-7344-473e-b0f2-7a9983f8c1a4)."}]},{"pos":[5763,5858],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> class."},{"pos":[7143,7262],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and specifies a culture.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> class and specifies a culture."},{"pos":[7275,8501],"content":"This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used.       To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.       Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor sets the value for the &lt;xref:System.Speech.Synthesis.PromptBuilder.Culture%2A&gt; property.","pos":[0,105],"source":"This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object will attempt to select an installed voice that supports the language specified by the <ph id=\"ph1\">`culture`</ph> parameter to process the prompt.","pos":[106,294],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt."},{"content":"If a voice with the specified culture is found, it will be used.","pos":[295,359]},{"content":"If a voice with the specified culture cannot be found, the default voice will be used.","pos":[360,446]},{"content":"To correctly pronounce words in the language specified by the <ph id=\"ph1\">`culture`</ph> parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.","pos":[453,631],"source":"       To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed."},{"content":"An installed TTS engine is called a voice.","pos":[632,674]},{"content":"To get information about which voices are installed for a specific culture, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method.","pos":[675,837],"source":" To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method."},{"content":"Microsoft Windows and the System.Speech API accept all valid language-country codes as values for <ph id=\"ph1\">`culture`</ph>.","pos":[844,952],"source":"       Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`."},{"content":"The TTS engines that shipped with Windows 7 support the following language-country codes:      -   en-US.","pos":[953,1058]},{"content":"English (United States)      -   zh-CN.","pos":[1059,1098]},{"content":"Chinese (China)      -   zh-TW.","pos":[1099,1130]},{"content":"Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[1131,1212]}]},{"pos":[9316,9490],"content":"Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.","pos":[0,174]}]},{"pos":[10004,10103],"content":"Appends the specified audio file to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends the specified audio file to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref>."},{"pos":[10242,10283],"content":"A fully qualified path to the audio file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A fully qualified path to the audio file.","pos":[0,41]}]},{"pos":[10788,10898],"content":"Appends the audio file at the specified URI to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends the audio file at the specified URI to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref>."},{"pos":[11909,11932],"content":"URI for the audio file.","needQuote":true,"needEscape":true,"nodes":[{"content":"URI for the audio file.","pos":[0,23]}]},{"pos":[12486,12604],"content":"Appends the specified audio file and alternate text to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Appends the specified audio file and alternate text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref>."},{"pos":[12616,12709],"content":"The speech synthesis engine will speak the alternate text if the audio file cannot be played.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The speech synthesis engine will speak the alternate text if the audio file cannot be played.","pos":[0,93]}]},{"pos":[13745,13768],"content":"URI for the audio file.","needQuote":true,"needEscape":true,"nodes":[{"content":"URI for the audio file.","pos":[0,23]}]},{"pos":[13838,13896],"content":"A string containing alternate text representing the audio.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing alternate text representing the audio.","pos":[0,58]}]},{"pos":[14431,14523],"content":"Appends a bookmark to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Appends a bookmark to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[14535,14981],"content":"A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A speech synthesis engine will generate a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached&gt; event if it encounters a bookmark while speaking a prompt using any of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt;, or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; methods.","pos":[0,446],"source":"A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods."}]},{"pos":[17386,17440],"content":"A string containing the name of the appended bookmark.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the name of the appended bookmark.","pos":[0,54]}]},{"pos":[17915,18004],"content":"Appends a break to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Appends a break to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[18016,18188],"content":"This method does not specify a duration for the break. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method does not specify a duration for the break. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.","pos":[0,172],"nodes":[{"content":"This method does not specify a duration for the break.","pos":[0,54]},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; will determine a duration value based on the linguistic context.","pos":[55,172],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context."}]}]},{"pos":[20115,20242],"content":"Appends a break to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies its strength (duration).","needQuote":true,"needEscape":true,"source":"Appends a break to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies its strength (duration)."},{"pos":[20254,20664],"content":"The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries. The speech synthesis engine determines the exact duration of the interval. When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries. The speech synthesis engine determines the exact duration of the interval. When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.","pos":[0,410],"nodes":[{"content":"The values in the &lt;xref:System.Speech.Synthesis.PromptBreak&gt; enumeration represent a range of separation intervals (pauses) between word boundaries.","pos":[0,148],"source":"The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries."},{"content":"The speech synthesis engine determines the exact duration of the interval.","pos":[149,223]},{"content":"When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.","pos":[224,410]}]}]},{"pos":[22420,22494],"content":"Indicates the duration of the break, with the following increasing values:","needQuote":false,"needEscape":true,"nodes":[{"content":"Indicates the duration of the break, with the following increasing values:","pos":[0,74]}]},{"pos":[23025,23140],"content":"Appends a break of the specified duration to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Appends a break of the specified duration to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[23152,23369],"content":"A break can be used to control pauses or other prosodic boundaries between words. A break is optional. If a break is not present, the synthesizer determines the break between words depending on the linguistic context.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A break can be used to control pauses or other prosodic boundaries between words. A break is optional. If a break is not present, the synthesizer determines the break between words depending on the linguistic context.","pos":[0,217],"nodes":[{"content":"A break can be used to control pauses or other prosodic boundaries between words.","pos":[0,81]},{"content":"A break is optional.","pos":[82,102]},{"content":"If a break is not present, the synthesizer determines the break between words depending on the linguistic context.","pos":[103,217]}]}]},{"pos":[24849,24906],"content":"The time in ticks, where one tick equals 100 nanoseconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time in ticks, where one tick equals 100 nanoseconds.","pos":[0,57]}]},{"pos":[25535,25688],"content":"Appends a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to another <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Appends a <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object to another <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[27893,27915],"content":"The content to append.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content to append.","pos":[0,22]}]},{"pos":[28438,28555],"content":"Appends the SSML file at the specified path to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Appends the SSML file at the specified path to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[28568,28869],"content":"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification.       You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SSML file must be an XML-format file that conforms to the <bpt id=\"p1\">[</bpt>Speech Synthesis Markup Language (SSML) Version 1.0<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201763)</ept> specification.","pos":[0,177],"source":"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification."},{"content":"You can also append SSML markup as a string using &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A&gt;.","pos":[184,299],"source":"       You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>."}]},{"pos":[30425,30475],"content":"A fully qualified path to the SSML file to append.","needQuote":true,"needEscape":true,"nodes":[{"content":"A fully qualified path to the SSML file to append.","pos":[0,50]}]},{"pos":[30974,31090],"content":"Appends the SSML file at the specified URI to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Appends the SSML file at the specified URI to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[31103,31397],"content":"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://www.w3.org/TR/speech-synthesis/) specification.       You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SSML file must be an XML-format file that conforms to the <bpt id=\"p1\">[</bpt>Speech Synthesis Markup Language (SSML) Version 1.0<ept id=\"p1\">](http://www.w3.org/TR/speech-synthesis/)</ept> specification.","pos":[0,170],"source":"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://www.w3.org/TR/speech-synthesis/) specification."},{"content":"You can also append SSML markup as a string using &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A&gt;.","pos":[177,292],"source":"       You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>."}]},{"pos":[32960,33009],"content":"A fully qualified URI to the SSML file to append.","needQuote":true,"needEscape":true,"nodes":[{"content":"A fully qualified URI to the SSML file to append.","pos":[0,49]}]},{"pos":[33546,33680],"content":"Appends an <ph id=\"ph1\">`XMLReader`</ph> object that references an SSML prompt to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Appends an `XMLReader` object that references an SSML prompt to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[33693,33987],"content":"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://www.w3.org/TR/speech-synthesis/) specification.       You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SSML file must be an XML-format file that conforms to the <bpt id=\"p1\">[</bpt>Speech Synthesis Markup Language (SSML) Version 1.0<ept id=\"p1\">](http://www.w3.org/TR/speech-synthesis/)</ept> specification.","pos":[0,170],"source":"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://www.w3.org/TR/speech-synthesis/) specification."},{"content":"You can also append SSML markup as a string using &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A&gt;.","pos":[177,292],"source":"       You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>."}]},{"pos":[35890,35939],"content":"A fully qualified name to the XML file to append.","needQuote":true,"needEscape":true,"nodes":[{"content":"A fully qualified name to the XML file to append.","pos":[0,49]}]},{"pos":[36483,36608],"content":"Appends the specified string containing SSML markup to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Appends the specified string containing SSML markup to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[38118,38150],"content":"A string containing SSML markup.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing SSML markup.","pos":[0,32]}]},{"pos":[38670,38768],"content":"Specifies text to append to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies text to append to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[38780,38907],"content":"To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To append text that is formatted as SSML markup language, use &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A&gt;.","pos":[0,127],"source":"To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>."}]},{"pos":[40095,40137],"content":"A string containing the text to be spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the text to be spoken.","pos":[0,42]}]},{"pos":[40774,40910],"content":"Appends text to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the degree of emphasis for the text.","needQuote":true,"needEscape":true,"source":"Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the degree of emphasis for the text."},{"pos":[40922,41120],"content":"The speech synthesis engines in Windows do not support the emphasis parameter at this time. Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The speech synthesis engines in Windows do not support the emphasis parameter at this time. Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.","pos":[0,198],"nodes":[{"content":"The speech synthesis engines in Windows do not support the emphasis parameter at this time.","pos":[0,91]},{"content":"Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.","pos":[92,198]}]}]},{"pos":[41321,41363],"content":"A string containing the text to be spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the text to be spoken.","pos":[0,42]}]},{"pos":[41453,41511],"content":"The value for the emphasis or stress to apply to the text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the emphasis or stress to apply to the text.","pos":[0,58]}]},{"pos":[42128,42259],"content":"Appends text to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the speaking rate for the text.","needQuote":true,"needEscape":true,"source":"Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the speaking rate for the text."},{"pos":[43730,43772],"content":"A string containing the text to be spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the text to be spoken.","pos":[0,42]}]},{"pos":[43854,43907],"content":"The value for the speaking rate to apply to the text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the speaking rate to apply to the text.","pos":[0,53]}]},{"pos":[44534,44663],"content":"Appends text to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the volume to speak the text.","needQuote":true,"needEscape":true,"source":"Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the volume to speak the text."},{"pos":[44675,44941],"content":"The <xref:System.Speech.Synthesis.PromptVolume> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume>. The other settings decrease the volume of speech output relative to full volume.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Speech.Synthesis.PromptVolume> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume>. The other settings decrease the volume of speech output relative to full volume.","pos":[0,266],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.PromptVolume&gt; setting for &lt;xref:System.Speech.Synthesis.PromptVolume&gt; is full volume, which is the same as &lt;xref:System.Speech.Synthesis.PromptVolume&gt;.","pos":[0,185],"source":"The <xref:System.Speech.Synthesis.PromptVolume> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume>."},{"content":"The other settings decrease the volume of speech output relative to full volume.","pos":[186,266]}]}]},{"pos":[46452,46494],"content":"A string containing the text to be spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the text to be spoken.","pos":[0,42]}]},{"pos":[46580,46646],"content":"The value for the speaking volume (loudness) to apply to the text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the speaking volume (loudness) to apply to the text.","pos":[0,66]}]},{"pos":[47254,47412],"content":"Appends text to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the alias text to be spoken in place of the appended text.","needQuote":true,"needEscape":true,"source":"Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the alias text to be spoken in place of the appended text."},{"pos":[47424,47688],"content":"This allows a document to contain both a spoken and a written form for a prompt. For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This allows a document to contain both a spoken and a written form for a prompt. For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.","pos":[0,264],"nodes":[{"content":"This allows a document to contain both a spoken and a written form for a prompt.","pos":[0,80]},{"content":"For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.","pos":[81,264]}]}]},{"pos":[48237,48281],"content":"A string containing the text representation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the text representation.","pos":[0,44]}]},{"pos":[48348,48390],"content":"A string containing the text to be spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the text to be spoken.","pos":[0,42]}]},{"pos":[49031,49233],"content":"Appends text to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the content type using a member of the <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.SayAs\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the content type using a member of the <xref href=\"System.Speech.Synthesis.SayAs\"></xref> enumeration."},{"pos":[49245,49388],"content":"The content type specified by <ph id=\"ph1\">`sayAs`</ph> can provide guidance to the speech synthesis engine about how to pronounce the contents of <ph id=\"ph2\">`textToSpeak`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`."},{"pos":[50883,50925],"content":"A string containing the text to be spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the text to be spoken.","pos":[0,42]}]},{"pos":[51003,51032],"content":"The content type of the text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content type of the text.","pos":[0,29]}]},{"pos":[51643,51800],"content":"Appends text to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and a &lt;xref:System.String&gt; that specifies the content type of the text.","needQuote":true,"needEscape":true,"source":"Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and a <xref:System.String> that specifies the content type of the text."},{"pos":[51812,52008],"content":"You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration. However, the TTS engine must support the parameter that you specify.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration. However, the TTS engine must support the parameter that you specify.","pos":[0,196],"nodes":[{"content":"You can use this method to specify a content type that is not included in the &lt;xref:System.Speech.Synthesis.SayAs&gt; enumeration.","pos":[0,127],"source":"You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration."},{"content":"However, the TTS engine must support the parameter that you specify.","pos":[128,196]}]}]},{"pos":[52182,52224],"content":"A string containing the text to be spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the text to be spoken.","pos":[0,42]}]},{"pos":[52286,52315],"content":"The content type of the text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content type of the text.","pos":[0,29]}]},{"pos":[52971,53102],"content":"Appends text to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the pronunciation for the text.","needQuote":true,"needEscape":true,"source":"Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the pronunciation for the text."},{"pos":[56412,56508],"content":"A string containing the written form of the word using the conventional alphabet for a language.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the written form of the word using the conventional alphabet for a language.","pos":[0,96]}]},{"pos":[56578,56665],"content":"A string containing phones to be spoken from the International Phonetic Alphabet (IPA).","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing phones to be spoken from the International Phonetic Alphabet (IPA).","pos":[0,87]}]},{"pos":[57158,57252],"content":"Clears the content from the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Clears the content from the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[57772,57883],"content":"Gets or sets the culture information for the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the culture information for the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[59932,59944],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[60417,60523],"content":"Specifies the end of a paragraph in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the end of a paragraph in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[60535,60719],"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs. See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs. See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.","pos":[0,184],"nodes":[{"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.","pos":[0,101]},{"content":"See &lt;xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A&gt; for an example.","pos":[102,184],"source":" See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example."}]}]},{"pos":[61263,61368],"content":"Specifies the end of a sentence in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the end of a sentence in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[61380,61563],"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs. See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs. See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.","pos":[0,183],"nodes":[{"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.","pos":[0,101]},{"content":"See &lt;xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A&gt; for an example.","pos":[102,183],"source":" See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example."}]}]},{"pos":[62090,62192],"content":"Specifies the end of a style in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the end of a style in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[62204,62506],"content":"The EndStyle method stops the current speaking style. The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style. See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The EndStyle method stops the current speaking style. The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style. See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.","pos":[0,302],"nodes":[{"content":"The EndStyle method stops the current speaking style.","pos":[0,53]},{"content":"The speaking style reverts to the setting that was in effect before the &lt;xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A&gt; method initiated a new speaking style.","pos":[54,223],"source":" The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style."},{"content":"See &lt;xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A&gt; for an example.","pos":[224,302],"source":" See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example."}]}]},{"pos":[63027,63136],"content":"Specifies the end of use of a voice in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the end of use of a voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[63148,63373],"content":"The EndVoice method stops the use of the current voice for speech output. The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The EndVoice method stops the use of the current voice for speech output. The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.","pos":[0,225],"nodes":[{"content":"The EndVoice method stops the use of the current voice for speech output.","pos":[0,73]},{"content":"The voice reverts to the setting that was in effect before the &lt;xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A&gt; method initiated a new voice.","pos":[74,225],"source":" The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice."}]}]},{"pos":[63885,63970],"content":"Gets whether the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is empty.","needQuote":true,"needEscape":true,"source":"Gets whether the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> is empty."},{"pos":[64081,64093],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[64576,64684],"content":"Specifies the start of a paragraph in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the start of a paragraph in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[64696,64797],"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.","pos":[0,101]}]},{"pos":[67037,67170],"content":"Specifies the start of a paragraph in the specified culture in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the start of a paragraph in the specified culture in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[67183,68873],"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.       The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it. While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used. To stop using the voice specified by StartParagraph, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.       To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.       Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.","pos":[0,101]},{"content":"The <ph id=\"ph1\">`culture`</ph> parameter for a paragraph can be different than the &lt;xref:System.Speech.Synthesis.PromptBuilder.Culture%2A&gt; property of the &lt;xref:System.Speech.Synthesis.PromptBuilder&gt; object that contains it.","pos":[108,315],"source":"       The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it."},{"content":"While in effect, the value of the <ph id=\"ph1\">`culture`</ph> parameter will override the &lt;xref:System.Speech.Synthesis.PromptBuilder.Culture%2A&gt; property.","pos":[316,453],"source":" While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; will attempt to select an installed voice that supports the language specified by the <ph id=\"ph1\">`culture`</ph> parameter to speak the paragraph.","pos":[454,636],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph."},{"content":"If a voice with the specified culture is found, it will be used.","pos":[637,701]},{"content":"If a voice with the specified culture cannot be found, the default voice will be used.","pos":[702,788]},{"content":"To stop using the voice specified by StartParagraph, call &lt;xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A&gt;.","pos":[789,908],"source":" To stop using the voice specified by StartParagraph, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>."},{"content":"To correctly pronounce words in the language specified by the <ph id=\"ph1\">`culture`</ph> parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.","pos":[915,1093],"source":"       To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed."},{"content":"An installed TTS engine is called a voice.","pos":[1094,1136]},{"content":"To get information about which voices are installed for a specific culture, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method.","pos":[1137,1299],"source":" To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method."},{"content":"Microsoft Windows and the System.Speech API accept all valid language-country codes as values for <ph id=\"ph1\">`culture`</ph>.","pos":[1306,1414],"source":"       Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`."},{"content":"The TTS engines that shipped with Windows 7 support the following language-country codes:      -   en-US.","pos":[1415,1520]},{"content":"English (United States)      -   zh-CN.","pos":[1521,1560]},{"content":"Chinese (China)      -   zh-TW.","pos":[1561,1592]},{"content":"Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[1593,1674]}]},{"pos":[69067,69241],"content":"Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.","pos":[0,174]}]},{"pos":[69726,69833],"content":"Specifies the start of a sentence in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the start of a sentence in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[69845,69946],"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.","pos":[0,101]}]},{"pos":[72179,72311],"content":"Specifies the start of a sentence in the specified culture in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the start of a sentence in the specified culture in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[72324,74165],"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.       The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.       While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used. To stop using the voice specified by StartSentence, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.       To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.       Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.","pos":[0,101]},{"content":"The <ph id=\"ph1\">`culture`</ph> parameter for a sentence can be different than the <ph id=\"ph2\">`culture`</ph> parameter for the paragraph that contains the sentence or the &lt;xref:System.Speech.Synthesis.PromptBuilder.Culture%2A&gt; property of the &lt;xref:System.Speech.Synthesis.PromptBuilder&gt; object that contains them.","pos":[108,388],"source":"       The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them."},{"content":"While in effect, the value of the <ph id=\"ph1\">`culture`</ph> parameter will override the &lt;xref:System.Speech.Synthesis.PromptBuilder.Culture%2A&gt; property and the <ph id=\"ph2\">`culture`</ph> parameter for the paragraph that contains the sentence.","pos":[395,605],"source":"       While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; will attempt to select an installed voice that supports the language specified by the <ph id=\"ph1\">`culture`</ph> parameter to speak the sentence.","pos":[606,787],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence."},{"content":"If a voice with the specified culture is found, it will be used.","pos":[788,852]},{"content":"If a voice with the specified culture cannot be found, the default voice will be used.","pos":[853,939]},{"content":"To stop using the voice specified by StartSentence, call &lt;xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A&gt;.","pos":[940,1057],"source":" To stop using the voice specified by StartSentence, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>."},{"content":"To correctly pronounce words in the language specified by the <ph id=\"ph1\">`culture`</ph> parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.","pos":[1064,1242],"source":"       To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed."},{"content":"An installed TTS engine is called a voice.","pos":[1243,1285]},{"content":"To get information about which voices are installed for a specific culture, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method.","pos":[1286,1448],"source":" To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method."},{"content":"Microsoft Windows and the System.Speech API accept all valid language-country codes as values for <ph id=\"ph1\">`culture`</ph>.","pos":[1455,1563],"source":"       Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`."},{"content":"The TTS engines that shipped with Windows 7 support the following language-country codes:      -   en-US.","pos":[1564,1669]},{"content":"English (United States)      -   zh-CN.","pos":[1670,1709]},{"content":"Chinese (China)      -   zh-TW.","pos":[1710,1741]},{"content":"Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[1742,1823]}]},{"pos":[74358,74532],"content":"Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.","pos":[0,174]}]},{"pos":[75108,75212],"content":"Specifies the start of a style in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Specifies the start of a style in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[75225,76126],"content":"The StartStyle method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument. You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect. To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.      > [!NOTE] >  -   The speech synthesis engines in Windows do not support the emphasis parameter at this time. Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.   > -   The <xref:System.Speech.Synthesis.PromptVolume> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume>. The other settings decrease the volume of speech output relative to full volume.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The StartStyle method takes a &lt;xref:System.Speech.Synthesis.PromptStyle&gt; object as its argument.","pos":[0,96],"source":"The StartStyle method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument."},{"content":"You can use the properties of the &lt;xref:System.Speech.Synthesis.PromptStyle&gt; object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect.","pos":[97,294],"source":" You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect."},{"content":"To stop using the current style, call the &lt;xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A&gt; method.","pos":[295,401],"source":" To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  -   The speech synthesis engines in Windows do not support the emphasis parameter at this time.","pos":[407,515],"source":"      > [!NOTE] >  -   The speech synthesis engines in Windows do not support the emphasis parameter at this time."},{"content":"Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.","pos":[516,622]},{"content":"&gt; -   The &lt;xref:System.Speech.Synthesis.PromptVolume&gt; setting for &lt;xref:System.Speech.Synthesis.PromptVolume&gt; is full volume, which is the same as &lt;xref:System.Speech.Synthesis.PromptVolume&gt;.","pos":[625,816],"source":"   > -   The <xref:System.Speech.Synthesis.PromptVolume> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume>."},{"content":"The other settings decrease the volume of speech output relative to full volume.","pos":[817,897]}]},{"pos":[77633,77652],"content":"The style to start.","needQuote":true,"needEscape":true,"nodes":[{"content":"The style to start.","pos":[0,19]}]},{"pos":[78219,78384],"content":"Instructs the synthesizer to change the voice in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the culture of the voice to use.","needQuote":true,"needEscape":true,"source":"Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the culture of the voice to use."},{"pos":[78397,80051],"content":"The `culture` parameter for StartVoice can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.  While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by StartVoice and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used. To stop using the voice specified by StartVoice, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.       To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.       Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`culture`</ph> parameter for StartVoice can be different than the &lt;xref:System.Speech.Synthesis.PromptBuilder.Culture%2A&gt; property of the &lt;xref:System.Speech.Synthesis.PromptBuilder&gt; object that contains it.","pos":[0,206],"source":"The `culture` parameter for StartVoice can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it."},{"content":"While in effect, the value of the <ph id=\"ph1\">`culture`</ph> parameter will override the &lt;xref:System.Speech.Synthesis.PromptBuilder.Culture%2A&gt; property.","pos":[208,345],"source":"  While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; will attempt to select an installed voice that supports the language specified by the <ph id=\"ph1\">`culture`</ph> parameter to speak the content enclosed by StartVoice and &lt;xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A&gt;.","pos":[346,610],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by StartVoice and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>."},{"content":"If a voice with the specified culture is found, it will be used.","pos":[611,675]},{"content":"If a voice with the specified culture cannot be found, the default voice will be used.","pos":[676,762]},{"content":"To stop using the voice specified by StartVoice, call &lt;xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A&gt;.","pos":[763,874],"source":" To stop using the voice specified by StartVoice, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>."},{"content":"To correctly pronounce words in the language specified by the <ph id=\"ph1\">`culture`</ph> parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.","pos":[881,1059],"source":"       To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed."},{"content":"An installed TTS engine is called a voice.","pos":[1060,1102]},{"content":"To get information about which voices are installed for a specific culture, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method.","pos":[1103,1265],"source":" To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method."},{"content":"Microsoft Windows and the System.Speech API accept all valid language-country codes as values for <ph id=\"ph1\">`culture`</ph>.","pos":[1272,1380],"source":"       Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`."},{"content":"The TTS engines that shipped with Windows 7 support the following language-country codes:      -   en-US.","pos":[1381,1486]},{"content":"English (United States)      -   zh-CN.","pos":[1487,1526]},{"content":"Chinese (China)      -   zh-TW.","pos":[1527,1558]},{"content":"Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[1559,1640]}]},{"pos":[80241,80415],"content":"Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.","pos":[0,174]}]},{"pos":[80988,81152],"content":"Instructs the synthesizer to change the voice in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the gender of the voice to use.","needQuote":true,"needEscape":true,"source":"Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the gender of the voice to use."},{"pos":[81165,81518],"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","pos":[0,351],"nodes":[{"content":"Use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; methods and &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.","pos":[0,234],"source":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select."},{"content":"To stop using the voice specified by StartVoice call &lt;xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A&gt;.","pos":[241,351],"source":"       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>."}]}]},{"pos":[81712,81743],"content":"The gender of the voice to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The gender of the voice to use.","pos":[0,31]}]},{"pos":[82306,82466],"content":"Instructs the synthesizer to change the voice in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies criteria for the new voice.","needQuote":true,"needEscape":true,"source":"Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies criteria for the new voice."},{"pos":[82479,82832],"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","pos":[0,351],"nodes":[{"content":"Use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; methods and &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.","pos":[0,234],"source":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select."},{"content":"To stop using the voice specified by StartVoice call &lt;xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A&gt;.","pos":[241,351],"source":"       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>."}]}]},{"pos":[83020,83054],"content":"The criteria for the voice to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The criteria for the voice to use.","pos":[0,34]}]},{"pos":[83568,83730],"content":"Instructs the synthesizer to change the voice in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the name of the voice to use.","needQuote":true,"needEscape":true,"source":"Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the name of the voice to use."},{"pos":[83743,84009],"content":"To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","pos":[0,264],"nodes":[{"content":"To get information about which voices are installed, use one of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; methods.","pos":[0,147],"source":"To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods."},{"content":"To stop using the voice specified by StartVoice call &lt;xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A&gt;.","pos":[154,264],"source":"       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>."}]}]},{"pos":[84148,84177],"content":"The name of the voice to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the voice to use.","pos":[0,29]}]},{"pos":[84843,85016],"content":"Instructs the synthesizer to change the voice in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies the gender and the age of the new voice.","needQuote":true,"needEscape":true,"source":"Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the gender and the age of the new voice."},{"pos":[85029,85382],"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","pos":[0,351],"nodes":[{"content":"Use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; methods and &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.","pos":[0,234],"source":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select."},{"content":"To stop using the voice specified by StartVoice call &lt;xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A&gt;.","pos":[241,351],"source":"       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>."}]}]},{"pos":[85614,85649],"content":"The gender of the new voice to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The gender of the new voice to use.","pos":[0,35]}]},{"pos":[85728,85756],"content":"The age of the voice to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The age of the voice to use.","pos":[0,28]}]},{"pos":[86466,86680],"content":"Instructs the synthesizer to change the voice in the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.","needQuote":true,"needEscape":true,"source":"Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies its gender, age, and a preferred voice that matches the specified gender and age."},{"pos":[86693,87214],"content":"A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.       Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the <ph id=\"ph1\">`voiceAlternate`</ph> parameter.","pos":[0,159],"source":"A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter."},{"content":"Use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; methods and &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.","pos":[166,400],"source":"       Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select."},{"content":"To stop using the voice specified by StartVoice call &lt;xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A&gt;.","pos":[407,517],"source":"       To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>."}]},{"pos":[87466,87497],"content":"The gender of the voice to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The gender of the voice to use.","pos":[0,31]}]},{"pos":[87576,87604],"content":"The age of the voice to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The age of the voice to use.","pos":[0,28]}]},{"pos":[87674,87785],"content":"An integer that specifies a preferred voice when more than one voice matches the <ph id=\"ph1\">`gender`</ph> and <ph id=\"ph2\">`age`</ph> parameters.","needQuote":true,"needEscape":true,"source":"An integer that specifies a preferred voice when more than one voice matches the `gender` and `age` parameters."},{"pos":[88226,88328],"content":"Returns the SSML generated from the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns the SSML generated from the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[88340,88413],"content":"The ToXml method makes no attempt to format the returned SSML in any way.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ToXml method makes no attempt to format the returned SSML in any way.","pos":[0,73]}]},{"pos":[90083,90202],"content":"Returns the SSML generated from the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object as a single line.","needQuote":true,"needEscape":true,"source":"Returns the SSML generated from the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object as a single line."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Synthesis.PromptBuilder\n  id: PromptBuilder\n  children:\n  - System.Speech.Synthesis.PromptBuilder.#ctor\n  - System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)\n  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)\n  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)\n  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)\n  - System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)\n  - System.Speech.Synthesis.PromptBuilder.AppendBreak\n  - System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)\n  - System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)\n  - System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)\n  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)\n  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)\n  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)\n  - System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)\n  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String)\n  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)\n  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)\n  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)\n  - System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)\n  - System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)\n  - System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)\n  - System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)\n  - System.Speech.Synthesis.PromptBuilder.ClearContent\n  - System.Speech.Synthesis.PromptBuilder.Culture\n  - System.Speech.Synthesis.PromptBuilder.EndParagraph\n  - System.Speech.Synthesis.PromptBuilder.EndSentence\n  - System.Speech.Synthesis.PromptBuilder.EndStyle\n  - System.Speech.Synthesis.PromptBuilder.EndVoice\n  - System.Speech.Synthesis.PromptBuilder.IsEmpty\n  - System.Speech.Synthesis.PromptBuilder.StartParagraph\n  - System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)\n  - System.Speech.Synthesis.PromptBuilder.StartSentence\n  - System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)\n  - System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)\n  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)\n  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)\n  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)\n  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)\n  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)\n  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)\n  - System.Speech.Synthesis.PromptBuilder.ToXml\n  langs:\n  - csharp\n  name: PromptBuilder\n  nameWithType: PromptBuilder\n  fullName: System.Speech.Synthesis.PromptBuilder\n  type: Class\n  summary: Creates an empty <xref href=\"System.Speech.Synthesis.Prompt\"></xref> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.\n  remarks: \"With PromptBuilder, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another PromptBuilder object.  \\n  \\n To append text to a PromptBuilder object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.  You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.  \\n  \\n You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.  \\n  \\n Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.  \\n  \\n To generate speech from a PromptBuilder object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.  \\n  \\n For more information, see [Constructing a Complex Prompt](http://msdn.microsoft.com/en-us/552cb356-7344-473e-b0f2-7a9983f8c1a4).\"\n  syntax:\n    content: public class PromptBuilder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.#ctor\n  id: '#ctor'\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: PromptBuilder()\n  nameWithType: PromptBuilder.PromptBuilder()\n  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder()\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Creates a new instance of the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.  \\n  \\n```c#  \\nusing System.Speech.Synthesis;  \\n  \\npublic void MySimpleText ()  \\n{  \\n    PromptBuilder builder = new PromptBuilder ();  \\n    builder.AppendText(\\\"Hello world!\\\");  \\n}  \\n```  \\n  \\n The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):  \\n  \\n```xml  \\n<speak version=\\\"1.0\\\"  \\n xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\" xml:lang=\\\"en-US\\\">  \\n  Hello world!  \\n</speak>  \\n```\"\n  syntax:\n    content: public PromptBuilder ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)\n  id: '#ctor(System.Globalization.CultureInfo)'\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: PromptBuilder(CultureInfo)\n  nameWithType: PromptBuilder.PromptBuilder(CultureInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder(CultureInfo)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Creates a new instance of the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> class and specifies a culture.\n  remarks: \"This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used.  \\n  \\n To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.  \\n  \\n Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:  \\n  \\n-   en-US. English (United States)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\" are also permitted.\"\n  example:\n  - \"The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.  \\n  \\n```c#  \\nusing System.Speech.Synthesis;  \\n  \\npublic void MySimpleText ()  \\n{  \\n    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n    builder.AppendText(\\\"Hello world!\\\");  \\n}  \\n```  \\n  \\n The following markup shows the equivalent SSML:  \\n  \\n```xml  \\n<speak version=\\\"1.0\\\"  \\n xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\" xml:lang=\\\"en-US\\\">  \\n  Hello world!  \\n</speak>  \\n```\"\n  syntax:\n    content: public PromptBuilder (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.\n  overload: System.Speech.Synthesis.PromptBuilder.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)\n  id: AppendAudio(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendAudio(String)\n  nameWithType: PromptBuilder.AppendAudio(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends the specified audio file to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref>.\n  syntax:\n    content: public void AppendAudio (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: A fully qualified path to the audio file.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)\n  id: AppendAudio(System.Uri)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendAudio(Uri)\n  nameWithType: PromptBuilder.AppendAudio(Uri)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends the audio file at the specified URI to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.  \\n  \\n```c#  \\nusing System.Speech.PromptBuilder;  \\n  \\npublic void SimpleConcatenation()  \\n{  \\n    // Add a prompt fragment from a .wav file.  \\n    PromptBuilder builder = new PromptBuilder ();  \\n    builder.AppendText(\\\"How are you today?\\\");  \\n    builder.AppendAudio(new Uri (\\\"http://www.speech.microsoft.com/ding.wav\\\"));  \\n}  \\n```  \\n  \\n The following markup shows the equivalent SSML markup.  \\n  \\n```xml  \\n<speak xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"  \\n       xmlns:ms=\\\"http://www.microsoft.com/speech/synthesis\\\" xml:lang=\\\"en\\\">  \\n  \\n  How are you today?  \\n  <audio src=\\\"http://www.speech.microsoft.com/ding.wav\\\" />  \\n  \\n</speak>  \\n```\"\n  syntax:\n    content: public void AppendAudio (Uri audioFile);\n    parameters:\n    - id: audioFile\n      type: System.Uri\n      description: URI for the audio file.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)\n  id: AppendAudio(System.Uri,System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendAudio(Uri,String)\n  nameWithType: PromptBuilder.AppendAudio(Uri,String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri,String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends the specified audio file and alternate text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref>.\n  remarks: The speech synthesis engine will speak the alternate text if the audio file cannot be played.\n  example:\n  - \"The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.  \\n  \\n```c#  \\nusing System.Speech.PromptBuilder;  \\n  \\npublic void SimpleConcatenation()  \\n{  \\n  \\n    // Concatenate a prompt fragment from a .wav file.  \\n    PromptBuilder builder = new PromptBuilder ();  \\n    builder.AppendAudio(new Uri (\\\"C:\\\\\\\\OnHold.wav\\\"), \\\"Your call will be answered in the order it was received\\\");  \\n}  \\n```  \\n  \\n The following markup shows the equivalent SSML markup.  \\n  \\n```xml  \\n<speak xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"  \\n       xmlns:ms=\\\"http://www.microsoft.com/speech/synthesis\\\" xml:lang=\\\"en\\\">  \\n  \\n  <audio src=\\\"C:\\\\OnHold.wav\\\"> Your call will be answered in the order it was received. </audio>  \\n  \\n</speak>  \\n```\"\n  syntax:\n    content: public void AppendAudio (Uri audioFile, string alternateText);\n    parameters:\n    - id: audioFile\n      type: System.Uri\n      description: URI for the audio file.\n    - id: alternateText\n      type: System.String\n      description: A string containing alternate text representing the audio.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)\n  id: AppendBookmark(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendBookmark(String)\n  nameWithType: PromptBuilder.AppendBookmark(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendBookmark(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends a bookmark to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.\n  example:\n  - \"The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback. The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Create a SoundPlayer instance to play the output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =  \\n          new System.Media.SoundPlayer(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Build a prompt and append bookmarks.  \\n        PromptBuilder builder = new PromptBuilder(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n        builder.AppendText(  \\n          \\\"The weather forecast for today is partly cloudy with some sun breaks.\\\");  \\n        builder.AppendBookmark(\\\"Daytime forecast\\\");  \\n        builder.AppendText(  \\n          \\\"Tonight's weather will be cloudy with a 30% chance of showers.\\\");  \\n        builder.AppendBookmark(\\\"Nightime forecast\\\");  \\n  \\n        // Add a handler for the BookmarkReached event.  \\n        synth.BookmarkReached +=  \\n          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  \\n  \\n        // Speak the prompt and play back the output file.  \\n        synth.Speak(builder);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Write the name and position of the bookmark to the console.  \\n    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Bookmark ({0}) reached at: {1} \\\",  \\n        e.Bookmark, e.AudioPosition);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void AppendBookmark (string bookmarkName);\n    parameters:\n    - id: bookmarkName\n      type: System.String\n      description: A string containing the name of the appended bookmark.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendBookmark*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak\n  id: AppendBreak\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendBreak()\n  nameWithType: PromptBuilder.AppendBreak()\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends a break to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: This method does not specify a duration for the break. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.\n  example:\n  - \"The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Build a prompt with two sentences separated by a break.  \\n        PromptBuilder builder = new PromptBuilder(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n        builder.AppendText(  \\n          \\\"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.\\\");  \\n        builder.AppendBreak();  \\n        builder.AppendText(  \\n          \\\"Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.\\\");  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(builder);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void AppendBreak ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)\n  id: AppendBreak(System.Speech.Synthesis.PromptBreak)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendBreak(PromptBreak)\n  nameWithType: PromptBuilder.AppendBreak(PromptBreak)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(PromptBreak)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends a break to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies its strength (duration).\n  remarks: The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries. The speech synthesis engine determines the exact duration of the interval. When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.\n  example:\n  - \"The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Create a SoundPlayer instance to play the output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =  \\n          new System.Media.SoundPlayer(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Build a prompt with two sentences separated by a break.  \\n        PromptBuilder builder = new PromptBuilder(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n        builder.AppendText(  \\n          \\\"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45\\\");  \\n        builder.AppendBreak(PromptBreak.Medium);  \\n        builder.AppendText(  \\n          \\\"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\\\");  \\n  \\n        // Speak the prompt and play back the output file.  \\n        synth.Speak(builder);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);\n    parameters:\n    - id: strength\n      type: System.Speech.Synthesis.PromptBreak\n      description: 'Indicates the duration of the break, with the following increasing values:'\n  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)\n  id: AppendBreak(System.TimeSpan)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendBreak(TimeSpan)\n  nameWithType: PromptBuilder.AppendBreak(TimeSpan)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends a break of the specified duration to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: A break can be used to control pauses or other prosodic boundaries between words. A break is optional. If a break is not present, the synthesizer determines the break between words depending on the linguistic context.\n  example:\n  - \"The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Build a prompt with two sentences separated by a break.  \\n        PromptBuilder builder = new PromptBuilder(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n        builder.AppendText(  \\n          \\\"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45\\\");  \\n        builder.AppendBreak(new TimeSpan(15000000));  \\n        builder.AppendText(  \\n          \\\"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\\\");  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(builder);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void AppendBreak (TimeSpan duration);\n    parameters:\n    - id: duration\n      type: System.TimeSpan\n      description: The time in ticks, where one tick equals 100 nanoseconds.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)\n  id: AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendPromptBuilder(PromptBuilder)\n  nameWithType: PromptBuilder.AppendPromptBuilder(PromptBuilder)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(PromptBuilder)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends a <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object to another <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: ''\n  example:\n  - \"The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\test\\\\showtimes.wav\\\");  \\n  \\n        // Create a SoundPlayer instance to play the output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =  \\n          new System.Media.SoundPlayer(@\\\"C:\\\\test\\\\showtimes.wav\\\");  \\n  \\n        // Build child prompts.  \\n        PromptBuilder theatreA = new PromptBuilder();  \\n        theatreA.AppendText(  \\n          \\\"Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30\\\");  \\n        theatreA.AppendBreak(PromptBreak.Large);  \\n        PromptBuilder theatreB = new PromptBuilder();  \\n        theatreB.AppendText(  \\n          \\\"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\\\");  \\n  \\n        // Build the parent prompt and append the two child prompts.  \\n        PromptBuilder showTimes = new PromptBuilder(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n        showTimes.AppendText(  \\n          \\\"The following are the show times for tonight's movies:\\\");  \\n        showTimes.AppendPromptBuilder(theatreA);  \\n        showTimes.AppendPromptBuilder(theatreB);  \\n  \\n        // Speak the prompt and play back the output file.  \\n        synth.Speak(showTimes);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);\n    parameters:\n    - id: promptBuilder\n      type: System.Speech.Synthesis.PromptBuilder\n      description: The content to append.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)\n  id: AppendSsml(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendSsml(String)\n  nameWithType: PromptBuilder.AppendSsml(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends the SSML file at the specified path to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: \"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification.  \\n  \\n You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.\"\n  example:\n  - \"The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the AppendSsml method.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and append a file that defines an SSML prompt.  \\n        PromptBuilder ssmlFile = new PromptBuilder();  \\n        ssmlFile.AppendSsml(\\\"c:\\\\\\\\test\\\\\\\\Weather.ssml\\\");  \\n  \\n        // Speak the contents of the SSML prompt.  \\n        synth.Speak(ssmlFile);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```  \\n  \\n The following is the SSML file that the preceding example references.  \\n  \\n```xml  \\n<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>  \\n<speak version=\\\"1.0\\\"  \\n xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"  \\n xml:lang=\\\"en-US\\\">  \\n  \\n  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  \\n  \\n</speak>  \\n```\"\n  syntax:\n    content: public void AppendSsml (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: A fully qualified path to the SSML file to append.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)\n  id: AppendSsml(System.Uri)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendSsml(Uri)\n  nameWithType: PromptBuilder.AppendSsml(Uri)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(Uri)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends the SSML file at the specified URI to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: \"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://www.w3.org/TR/speech-synthesis/) specification.  \\n  \\n You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.\"\n  example:\n  - \"The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the AppendSsml method.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and append a file that defines an SSML prompt.  \\n        PromptBuilder ssmlFile = new PromptBuilder();  \\n        ssmlFile.AppendSsml(new Uri(\\\"c:\\\\\\\\test\\\\\\\\Weather.ssml\\\"));  \\n  \\n        // Speak the contents of the SSML prompt.  \\n        synth.Speak(ssmlFile);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```  \\n  \\n The following is the SSML file that the preceding example references.  \\n  \\n```xml  \\n<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>  \\n<speak version=\\\"1.0\\\"  \\n xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"  \\n xml:lang=\\\"en-US\\\">  \\n  \\n  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  \\n  \\n</speak>  \\n```\"\n  syntax:\n    content: public void AppendSsml (Uri ssmlFile);\n    parameters:\n    - id: ssmlFile\n      type: System.Uri\n      description: A fully qualified URI to the SSML file to append.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)\n  id: AppendSsml(System.Xml.XmlReader)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendSsml(XmlReader)\n  nameWithType: PromptBuilder.AppendSsml(XmlReader)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(XmlReader)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends an `XMLReader` object that references an SSML prompt to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: \"The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://www.w3.org/TR/speech-synthesis/) specification.  \\n  \\n You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.\"\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.  \\n  \\n```c#  \\nusing System;  \\nusing System.Xml;  \\nusing System.IO;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Create a SoundPlayer instance to play the output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =  \\n          new System.Media.SoundPlayer(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Create the path to the SSML file.  \\n        string weatherFile = Path.GetFullPath(\\\"c:\\\\\\\\test\\\\\\\\Weather.xml\\\");  \\n        PromptBuilder builder = null;  \\n  \\n        // Create an XML Reader from the file, create a PromptBuilder and   \\n        // append the XmlReader.  \\n        if (File.Exists(weatherFile))  \\n        {  \\n          XmlReader reader = XmlReader.Create(weatherFile);  \\n          builder = new PromptBuilder();  \\n          builder.AppendSsml(reader);  \\n          reader.Close();  \\n        }  \\n  \\n        // Speak the prompt and play back the output file.  \\n        synth.Speak(builder);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void AppendSsml (System.Xml.XmlReader ssmlFile);\n    parameters:\n    - id: ssmlFile\n      type: System.Xml.XmlReader\n      description: A fully qualified name to the XML file to append.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)\n  id: AppendSsmlMarkup(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendSsmlMarkup(String)\n  nameWithType: PromptBuilder.AppendSsmlMarkup(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends the specified string containing SSML markup to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: \"You must use the appropriate escape characters when appending SSML markup. Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:  \\n  \\n```c#  \\nbuilder.AppendSsmlMarkup(\\\"<say-as interpret-as = \\\\\\\"characters\\\\\\\"> chair </say-as>\\\");  \\n```  \\n  \\n> [!NOTE]\\n>  The string used as an argument to AppendSsmlMarkup cannot include a `speak` element.  \\n  \\n When using AppendSsmlMarkup to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:  \\n  \\n-   International Phonetic Alphabet (IPA)  \\n  \\n-   Universal Phone Set (UPS)  \\n  \\n-   SAPI Phone Set  \\n  \\n Any SSML-compliant speech engine will speak phones from the IPA.  \\n  \\n You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods. To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods.\"\n  syntax:\n    content: public void AppendSsmlMarkup (string ssmlMarkup);\n    parameters:\n    - id: ssmlMarkup\n      type: System.String\n      description: A string containing SSML markup.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String)\n  id: AppendText(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendText(String)\n  nameWithType: PromptBuilder.AppendText(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies text to append to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.\n  example:\n  - \"The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the AppendText method.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and append a text string.  \\n        PromptBuilder speakText = new PromptBuilder();  \\n        speakText.AppendText(\\\"Say the name of the song you want to hear\\\");  \\n  \\n        // Speak the contents of the prompt.  \\n        synth.Speak(speakText);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void AppendText (string textToSpeak);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: A string containing the text to be spoken.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)\n  id: AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendText(String,PromptEmphasis)\n  nameWithType: PromptBuilder.AppendText(String,PromptEmphasis)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptEmphasis)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the degree of emphasis for the text.\n  remarks: The speech synthesis engines in Windows do not support the emphasis parameter at this time. Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.\n  syntax:\n    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: A string containing the text to be spoken.\n    - id: emphasis\n      type: System.Speech.Synthesis.PromptEmphasis\n      description: The value for the emphasis or stress to apply to the text.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)\n  id: AppendText(System.String,System.Speech.Synthesis.PromptRate)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendText(String,PromptRate)\n  nameWithType: PromptBuilder.AppendText(String,PromptRate)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptRate)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the speaking rate for the text.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings. The example uses the AppendText method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and add content.  \\n        PromptBuilder speakRate = new PromptBuilder();  \\n        speakRate.AppendText(\\\"Your order for\\\");  \\n        speakRate.AppendText(\\\"one kitchen sink and one faucet\\\", PromptRate.Slow);  \\n        speakRate.AppendText(\\\"has been confirmed.\\\");  \\n  \\n        // Speak the contents of the SSML prompt.  \\n        synth.Speak(speakRate);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: A string containing the text to be spoken.\n    - id: rate\n      type: System.Speech.Synthesis.PromptRate\n      description: The value for the speaking rate to apply to the text.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)\n  id: AppendText(System.String,System.Speech.Synthesis.PromptVolume)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendText(String,PromptVolume)\n  nameWithType: PromptBuilder.AppendText(String,PromptVolume)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptVolume)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the volume to speak the text.\n  remarks: The <xref:System.Speech.Synthesis.PromptVolume> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume>. The other settings decrease the volume of speech output relative to full volume.\n  example:\n  - \"The following example uses the AppendText method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Build a prompt that applies different volume settings.  \\n        PromptBuilder builder = new PromptBuilder();  \\n        builder.AppendText(\\\"This is the default speaking volume.\\\", PromptVolume.Default);  \\n        builder.AppendBreak();  \\n        builder.AppendText(\\\"This is the extra loud speaking volume.\\\", PromptVolume.ExtraLoud);  \\n        builder.AppendBreak();  \\n        builder.AppendText(\\\"This is the medium speaking volume.\\\", PromptVolume.Medium);  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(builder);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: A string containing the text to be spoken.\n    - id: volume\n      type: System.Speech.Synthesis.PromptVolume\n      description: The value for the speaking volume (loudness) to apply to the text.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)\n  id: AppendTextWithAlias(System.String,System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendTextWithAlias(String,String)\n  nameWithType: PromptBuilder.AppendTextWithAlias(String,String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(String,String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the alias text to be spoken in place of the appended text.\n  remarks: This allows a document to contain both a spoken and a written form for a prompt. For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.\n  example:\n  - \"The following example appends a text string (\\\"Speech Synthesis Markup Language\\\") and its alias (\\\"SSML\\\") to a <xref:System.Speech.Synthesis.PromptBuilder> object. The synthesizer will pronounce \\\"S S M L\\\".  \\n  \\n```  \\nPromptBuilder alias = new PromptBuilder();  \\nalias.AppendTextWithAlias(\\\"Speech Synthesis Markup Language\\\",\\\"SSML\\\");   \\n```\"\n  syntax:\n    content: public void AppendTextWithAlias (string textToSpeak, string substitute);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: A string containing the text representation.\n    - id: substitute\n      type: System.String\n      description: A string containing the text to be spoken.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)\n  id: AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendTextWithHint(String,SayAs)\n  nameWithType: PromptBuilder.AppendTextWithHint(String,SayAs)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,SayAs)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the content type using a member of the <xref href=\"System.Speech.Synthesis.SayAs\"></xref> enumeration.\n  remarks: The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`.\n  example:\n  - \"```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and define the data types for some of the added strings.  \\n        PromptBuilder sayAs = new PromptBuilder();  \\n        sayAs.AppendText(\\\"Your\\\");  \\n        sayAs.AppendTextWithHint(\\\"1st\\\", SayAs.NumberOrdinal);  \\n        sayAs.AppendText(\\\"request was for\\\");  \\n        sayAs.AppendTextWithHint(\\\"1\\\", SayAs.NumberCardinal);  \\n        sayAs.AppendText(\\\"room, on\\\");  \\n        sayAs.AppendTextWithHint(\\\"10/19/2012,\\\", SayAs.MonthDayYear);  \\n        sayAs.AppendText(\\\"with early arrival at\\\");  \\n        sayAs.AppendTextWithHint(\\\"12:35pm\\\", SayAs.Time12);  \\n  \\n        // Speak the contents of the SSML prompt.  \\n        synth.Speak(sayAs);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: A string containing the text to be spoken.\n    - id: sayAs\n      type: System.Speech.Synthesis.SayAs\n      description: The content type of the text.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)\n  id: AppendTextWithHint(System.String,System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendTextWithHint(String,String)\n  nameWithType: PromptBuilder.AppendTextWithHint(String,String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and a <xref:System.String> that specifies the content type of the text.\n  remarks: You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration. However, the TTS engine must support the parameter that you specify.\n  syntax:\n    content: public void AppendTextWithHint (string textToSpeak, string sayAs);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: A string containing the text to be spoken.\n    - id: sayAs\n      type: System.String\n      description: The content type of the text.\n  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)\n  id: AppendTextWithPronunciation(System.String,System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: AppendTextWithPronunciation(String,String)\n  nameWithType: PromptBuilder.AppendTextWithPronunciation(String,String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(String,String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Appends text to the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the pronunciation for the text.\n  remarks: \"The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.  \\n  \\n Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons. Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.  \\n  \\n Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA). A phone is a letter or character that represents a discreet sound of speech. Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA. To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.  \\n  \\n The IPA publishes a [chart](http://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.  \\n  \\n Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet. In those cases, it is possible to type the Latin character and have the proper representation for a phone. Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired. Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;). For example, a schwa (&\\\\#x0259;) would be represented by `ə`.  \\n  \\n To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.\"\n  example:\n  - \"The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class. It then appends the text string \\\"My name is\\\" to the instance. Finally, it appends a string containing the proper name \\\"DuBois\\\" and specifies the pronunciation of the name.  \\n  \\n```c#  \\npublic void ProperName()  \\n{  \\n    PromptBuilder builder = new PromptBuilder();  \\n    builder.AppendText(\\\"My name is\\\");  \\n  \\n    // Add a proper name and its pronunciation.  \\n    builder.AppendTextWithPronunciation(\\\"DuBois\\\", \\\"duˈbwɑ\\\");     \\n}  \\n```  \\n  \\n The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.  \\n  \\n```xml  \\n<speak xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\" xml:lang=\\\"en-us\\\">  \\n  My name is <phoneme ph=\\\"duˈbwɑ\\\"> DuBois </phoneme>  \\n</speak>  \\n```\"\n  syntax:\n    content: public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: A string containing the written form of the word using the conventional alphabet for a language.\n    - id: pronunciation\n      type: System.String\n      description: A string containing phones to be spoken from the International Phonetic Alphabet (IPA).\n  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.ClearContent\n  id: ClearContent\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: ClearContent()\n  nameWithType: PromptBuilder.ClearContent()\n  fullName: System.Speech.Synthesis.PromptBuilder.ClearContent()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Clears the content from the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  syntax:\n    content: public void ClearContent ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.ClearContent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.Culture\n  id: Culture\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: Culture\n  nameWithType: PromptBuilder.Culture\n  fullName: System.Speech.Synthesis.PromptBuilder.Culture\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets or sets the culture information for the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: \"The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the Culture property to process the prompt. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used.  \\n  \\n A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods. A culture specified for a portion of content using one of the above methods will override the Culture property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.  \\n  \\n To correctly pronounce words in the language specified by the Culture property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.  \\n  \\n Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:  \\n  \\n-   en-US. English (United States)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\" are also permitted.  See [Language Identifier Constants and Strings](http://msdn.microsoft.com/library/dd318693\\\\(VS.85\\\\).aspx) for a comprehensive list of language codes.\"\n  syntax:\n    content: public System.Globalization.CultureInfo Culture { get; set; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: To be added.\n  overload: System.Speech.Synthesis.PromptBuilder.Culture*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph\n  id: EndParagraph\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: EndParagraph()\n  nameWithType: PromptBuilder.EndParagraph()\n  fullName: System.Speech.Synthesis.PromptBuilder.EndParagraph()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the end of a paragraph in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs. See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.\n  syntax:\n    content: public void EndParagraph ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.EndParagraph*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.EndSentence\n  id: EndSentence\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: EndSentence()\n  nameWithType: PromptBuilder.EndSentence()\n  fullName: System.Speech.Synthesis.PromptBuilder.EndSentence()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the end of a sentence in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs. See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.\n  syntax:\n    content: public void EndSentence ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.EndSentence*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.EndStyle\n  id: EndStyle\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: EndStyle()\n  nameWithType: PromptBuilder.EndStyle()\n  fullName: System.Speech.Synthesis.PromptBuilder.EndStyle()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the end of a style in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: The EndStyle method stops the current speaking style. The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style. See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.\n  syntax:\n    content: public void EndStyle ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.EndStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.EndVoice\n  id: EndVoice\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: EndVoice()\n  nameWithType: PromptBuilder.EndVoice()\n  fullName: System.Speech.Synthesis.PromptBuilder.EndVoice()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the end of use of a voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: The EndVoice method stops the use of the current voice for speech output. The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.\n  syntax:\n    content: public void EndVoice ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.EndVoice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty\n  id: IsEmpty\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: PromptBuilder.IsEmpty\n  fullName: System.Speech.Synthesis.PromptBuilder.IsEmpty\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets whether the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> is empty.\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Speech.Synthesis.PromptBuilder.IsEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph\n  id: StartParagraph\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartParagraph()\n  nameWithType: PromptBuilder.StartParagraph()\n  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the start of a paragraph in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and add content as paragraphs and sentences.  \\n        PromptBuilder parSent = new PromptBuilder();  \\n        parSent.StartParagraph();  \\n        parSent.StartSentence();  \\n        parSent.AppendText(\\\"Introducing the sentence element.\\\");  \\n        parSent.EndSentence();  \\n        parSent.StartSentence();  \\n        parSent.AppendText(\\\"You can use it to mark individual sentences.\\\");  \\n        parSent.EndSentence();  \\n        parSent.EndParagraph();  \\n        parSent.StartParagraph();  \\n        parSent.AppendText(\\\"Another simple paragraph. Sentence structure in this paragraph\\\" +  \\n          \\\"is not explicitly marked.\\\");  \\n        parSent.EndParagraph();  \\n  \\n        // Speak the contents of the SSML prompt.  \\n        synth.Speak(parSent);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void StartParagraph ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.StartParagraph*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)\n  id: StartParagraph(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartParagraph(CultureInfo)\n  nameWithType: PromptBuilder.StartParagraph(CultureInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph(CultureInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the start of a paragraph in the specified culture in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: \"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.  \\n  \\n The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it. While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used. To stop using the voice specified by StartParagraph, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.  \\n  \\n To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.  \\n  \\n Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:  \\n  \\n-   en-US. English (United States)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\" are also permitted.\"\n  syntax:\n    content: public void StartParagraph (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.\n  overload: System.Speech.Synthesis.PromptBuilder.StartParagraph*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartSentence\n  id: StartSentence\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartSentence()\n  nameWithType: PromptBuilder.StartSentence()\n  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the start of a sentence in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and add content as paragraphs and sentences.  \\n        PromptBuilder parSent = new PromptBuilder();  \\n        parSent.StartParagraph();  \\n        parSent.StartSentence();  \\n        parSent.AppendText(\\\"Introducing the sentence element.\\\");  \\n        parSent.EndSentence();  \\n        parSent.StartSentence();  \\n        parSent.AppendText(\\\"You can use it to mark individual sentences.\\\");  \\n        parSent.EndSentence();  \\n        parSent.EndParagraph();  \\n        parSent.StartParagraph();  \\n        parSent.AppendText(\\\"Another simple paragraph. Sentence structure in this paragraph\\\" +  \\n          \\\"is not explicitly marked.\\\");  \\n        parSent.EndParagraph();  \\n  \\n        // Speak the contents of the SSML prompt.  \\n        synth.Speak(parSent);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void StartSentence ();\n    parameters: []\n  overload: System.Speech.Synthesis.PromptBuilder.StartSentence*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)\n  id: StartSentence(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartSentence(CultureInfo)\n  nameWithType: PromptBuilder.StartSentence(CultureInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence(CultureInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the start of a sentence in the specified culture in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: \"Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.  \\n  \\n The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.  \\n  \\n While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used. To stop using the voice specified by StartSentence, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.  \\n  \\n To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.  \\n  \\n Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:  \\n  \\n-   en-US. English (United States)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\" are also permitted.\"\n  syntax:\n    content: public void StartSentence (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.\n  overload: System.Speech.Synthesis.PromptBuilder.StartSentence*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)\n  id: StartStyle(System.Speech.Synthesis.PromptStyle)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartStyle(PromptStyle)\n  nameWithType: PromptBuilder.StartStyle(PromptStyle)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartStyle(PromptStyle)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Specifies the start of a style in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: \"The StartStyle method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument. You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect. To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.  \\n  \\n> [!NOTE]\\n>  -   The speech synthesis engines in Windows do not support the emphasis parameter at this time. Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.  \\n> -   The <xref:System.Speech.Synthesis.PromptVolume> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume>. The other settings decrease the volume of speech output relative to full volume.\"\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings. The example uses the StartStyle method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and add content.  \\n        PromptBuilder style = new PromptBuilder();  \\n        style.AppendText(\\\"Your order for\\\");  \\n        style.StartStyle(new PromptStyle(PromptRate.Slow));  \\n        style.AppendText(\\\"one kitchen sink and one faucet\\\");  \\n        style.EndStyle();  \\n        style.AppendText(\\\"has been confirmed.\\\");  \\n  \\n        // Speak the contents of the SSML prompt.  \\n        synth.Speak(style);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void StartStyle (System.Speech.Synthesis.PromptStyle style);\n    parameters:\n    - id: style\n      type: System.Speech.Synthesis.PromptStyle\n      description: The style to start.\n  overload: System.Speech.Synthesis.PromptBuilder.StartStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)\n  id: StartVoice(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartVoice(CultureInfo)\n  nameWithType: PromptBuilder.StartVoice(CultureInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(CultureInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the culture of the voice to use.\n  remarks: \"The `culture` parameter for StartVoice can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.  While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property. The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by StartVoice and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used. To stop using the voice specified by StartVoice, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.  \\n  \\n To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.  \\n  \\n Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:  \\n  \\n-   en-US. English (United States)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\" are also permitted.\"\n  syntax:\n    content: public void StartVoice (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.\n  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)\n  id: StartVoice(System.Speech.Synthesis.VoiceGender)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartVoice(VoiceGender)\n  nameWithType: PromptBuilder.StartVoice(VoiceGender)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the gender of the voice to use.\n  remarks: \"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.  \\n  \\n To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.\"\n  syntax:\n    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender);\n    parameters:\n    - id: gender\n      type: System.Speech.Synthesis.VoiceGender\n      description: The gender of the voice to use.\n  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)\n  id: StartVoice(System.Speech.Synthesis.VoiceInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartVoice(VoiceInfo)\n  nameWithType: PromptBuilder.StartVoice(VoiceInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies criteria for the new voice.\n  remarks: \"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.  \\n  \\n To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.\"\n  syntax:\n    content: public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);\n    parameters:\n    - id: voice\n      type: System.Speech.Synthesis.VoiceInfo\n      description: The criteria for the voice to use.\n  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)\n  id: StartVoice(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartVoice(String)\n  nameWithType: PromptBuilder.StartVoice(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the name of the voice to use.\n  remarks: \"To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.  \\n  \\n To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.\"\n  syntax:\n    content: public void StartVoice (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the voice to use.\n  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)\n  id: StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartVoice(VoiceGender,VoiceAge)\n  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies the gender and the age of the new voice.\n  remarks: \"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.  \\n  \\n To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.\"\n  syntax:\n    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);\n    parameters:\n    - id: gender\n      type: System.Speech.Synthesis.VoiceGender\n      description: The gender of the new voice to use.\n    - id: age\n      type: System.Speech.Synthesis.VoiceAge\n      description: The age of the voice to use.\n  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)\n  id: StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: StartVoice(VoiceGender,VoiceAge,Int32)\n  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Instructs the synthesizer to change the voice in the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.\n  remarks: \"A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.  \\n  \\n Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.  \\n  \\n To stop using the voice specified by StartVoice call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.\"\n  syntax:\n    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);\n    parameters:\n    - id: gender\n      type: System.Speech.Synthesis.VoiceGender\n      description: The gender of the voice to use.\n    - id: age\n      type: System.Speech.Synthesis.VoiceAge\n      description: The age of the voice to use.\n    - id: voiceAlternate\n      type: System.Int32\n      description: An integer that specifies a preferred voice when more than one voice matches the `gender` and `age` parameters.\n  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.PromptBuilder.ToXml\n  id: ToXml\n  parent: System.Speech.Synthesis.PromptBuilder\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: PromptBuilder.ToXml()\n  fullName: System.Speech.Synthesis.PromptBuilder.ToXml()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Returns the SSML generated from the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: The ToXml method makes no attempt to format the returned SSML in any way.\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and add content.  \\n        PromptBuilder style = new PromptBuilder();  \\n        style.AppendText(\\\"Your order for\\\");  \\n        style.StartStyle(new PromptStyle(PromptRate.Slow));  \\n        style.AppendText(\\\"one kitchen sink and one faucet\\\");  \\n        style.EndStyle();  \\n        style.AppendText(\\\"has been confirmed.\\\");  \\n  \\n        // Write the contents of the PromptBuilder object to the console as  \\n        // an SSML-compatible XML file.  \\n        string myXml = style.ToXml();  \\n        Console.WriteLine(\\\"This is the SSML equivalent of the PromptBuilder: \\\\n\\\\n\\\" + myXml);  \\n  \\n        // Speak the contents of the SSML prompt.  \\n        synth.Speak(style);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public string ToXml ();\n    parameters: []\n    return:\n      type: System.String\n      description: Returns the SSML generated from the <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object as a single line.\n  overload: System.Speech.Synthesis.PromptBuilder.ToXml*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.Synthesis.PromptBuilder.#ctor\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: PromptBuilder()\n  nameWithType: PromptBuilder.PromptBuilder()\n  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder()\n- uid: System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: PromptBuilder(CultureInfo)\n  nameWithType: PromptBuilder.PromptBuilder(CultureInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder(CultureInfo)\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendAudio(String)\n  nameWithType: PromptBuilder.AppendAudio(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendAudio(Uri)\n  nameWithType: PromptBuilder.AppendAudio(Uri)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri)\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendAudio(Uri,String)\n  nameWithType: PromptBuilder.AppendAudio(Uri,String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri,String)\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendBookmark(String)\n  nameWithType: PromptBuilder.AppendBookmark(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendBookmark(String)\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendBreak()\n  nameWithType: PromptBuilder.AppendBreak()\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak()\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendBreak(PromptBreak)\n  nameWithType: PromptBuilder.AppendBreak(PromptBreak)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(PromptBreak)\n- uid: System.Speech.Synthesis.PromptBreak\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: PromptBreak\n  nameWithType: PromptBreak\n  fullName: System.Speech.Synthesis.PromptBreak\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendBreak(TimeSpan)\n  nameWithType: PromptBuilder.AppendBreak(TimeSpan)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendPromptBuilder(PromptBuilder)\n  nameWithType: PromptBuilder.AppendPromptBuilder(PromptBuilder)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(PromptBuilder)\n- uid: System.Speech.Synthesis.PromptBuilder\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: PromptBuilder\n  nameWithType: PromptBuilder\n  fullName: System.Speech.Synthesis.PromptBuilder\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendSsml(String)\n  nameWithType: PromptBuilder.AppendSsml(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(String)\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendSsml(Uri)\n  nameWithType: PromptBuilder.AppendSsml(Uri)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(Uri)\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendSsml(XmlReader)\n  nameWithType: PromptBuilder.AppendSsml(XmlReader)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(XmlReader)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendSsmlMarkup(String)\n  nameWithType: PromptBuilder.AppendSsmlMarkup(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(String)\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendText(String)\n  nameWithType: PromptBuilder.AppendText(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String)\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendText(String,PromptEmphasis)\n  nameWithType: PromptBuilder.AppendText(String,PromptEmphasis)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptEmphasis)\n- uid: System.Speech.Synthesis.PromptEmphasis\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: PromptEmphasis\n  nameWithType: PromptEmphasis\n  fullName: System.Speech.Synthesis.PromptEmphasis\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendText(String,PromptRate)\n  nameWithType: PromptBuilder.AppendText(String,PromptRate)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptRate)\n- uid: System.Speech.Synthesis.PromptRate\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: PromptRate\n  nameWithType: PromptRate\n  fullName: System.Speech.Synthesis.PromptRate\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendText(String,PromptVolume)\n  nameWithType: PromptBuilder.AppendText(String,PromptVolume)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptVolume)\n- uid: System.Speech.Synthesis.PromptVolume\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: PromptVolume\n  nameWithType: PromptVolume\n  fullName: System.Speech.Synthesis.PromptVolume\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendTextWithAlias(String,String)\n  nameWithType: PromptBuilder.AppendTextWithAlias(String,String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(String,String)\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendTextWithHint(String,SayAs)\n  nameWithType: PromptBuilder.AppendTextWithHint(String,SayAs)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,SayAs)\n- uid: System.Speech.Synthesis.SayAs\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: SayAs\n  nameWithType: SayAs\n  fullName: System.Speech.Synthesis.SayAs\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendTextWithHint(String,String)\n  nameWithType: PromptBuilder.AppendTextWithHint(String,String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,String)\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendTextWithPronunciation(String,String)\n  nameWithType: PromptBuilder.AppendTextWithPronunciation(String,String)\n  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(String,String)\n- uid: System.Speech.Synthesis.PromptBuilder.ClearContent\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: ClearContent()\n  nameWithType: PromptBuilder.ClearContent()\n  fullName: System.Speech.Synthesis.PromptBuilder.ClearContent()\n- uid: System.Speech.Synthesis.PromptBuilder.Culture\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: Culture\n  nameWithType: PromptBuilder.Culture\n  fullName: System.Speech.Synthesis.PromptBuilder.Culture\n- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: EndParagraph()\n  nameWithType: PromptBuilder.EndParagraph()\n  fullName: System.Speech.Synthesis.PromptBuilder.EndParagraph()\n- uid: System.Speech.Synthesis.PromptBuilder.EndSentence\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: EndSentence()\n  nameWithType: PromptBuilder.EndSentence()\n  fullName: System.Speech.Synthesis.PromptBuilder.EndSentence()\n- uid: System.Speech.Synthesis.PromptBuilder.EndStyle\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: EndStyle()\n  nameWithType: PromptBuilder.EndStyle()\n  fullName: System.Speech.Synthesis.PromptBuilder.EndStyle()\n- uid: System.Speech.Synthesis.PromptBuilder.EndVoice\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: EndVoice()\n  nameWithType: PromptBuilder.EndVoice()\n  fullName: System.Speech.Synthesis.PromptBuilder.EndVoice()\n- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: IsEmpty\n  nameWithType: PromptBuilder.IsEmpty\n  fullName: System.Speech.Synthesis.PromptBuilder.IsEmpty\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartParagraph()\n  nameWithType: PromptBuilder.StartParagraph()\n  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph()\n- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartParagraph(CultureInfo)\n  nameWithType: PromptBuilder.StartParagraph(CultureInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph(CultureInfo)\n- uid: System.Speech.Synthesis.PromptBuilder.StartSentence\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartSentence()\n  nameWithType: PromptBuilder.StartSentence()\n  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence()\n- uid: System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartSentence(CultureInfo)\n  nameWithType: PromptBuilder.StartSentence(CultureInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence(CultureInfo)\n- uid: System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartStyle(PromptStyle)\n  nameWithType: PromptBuilder.StartStyle(PromptStyle)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartStyle(PromptStyle)\n- uid: System.Speech.Synthesis.PromptStyle\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: PromptStyle\n  nameWithType: PromptStyle\n  fullName: System.Speech.Synthesis.PromptStyle\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartVoice(CultureInfo)\n  nameWithType: PromptBuilder.StartVoice(CultureInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(CultureInfo)\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartVoice(VoiceGender)\n  nameWithType: PromptBuilder.StartVoice(VoiceGender)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender)\n- uid: System.Speech.Synthesis.VoiceGender\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceGender\n  nameWithType: VoiceGender\n  fullName: System.Speech.Synthesis.VoiceGender\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartVoice(VoiceInfo)\n  nameWithType: PromptBuilder.StartVoice(VoiceInfo)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceInfo)\n- uid: System.Speech.Synthesis.VoiceInfo\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceInfo\n  nameWithType: VoiceInfo\n  fullName: System.Speech.Synthesis.VoiceInfo\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartVoice(String)\n  nameWithType: PromptBuilder.StartVoice(String)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(String)\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartVoice(VoiceGender,VoiceAge)\n  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge)\n- uid: System.Speech.Synthesis.VoiceAge\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceAge\n  nameWithType: VoiceAge\n  fullName: System.Speech.Synthesis.VoiceAge\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartVoice(VoiceGender,VoiceAge,Int32)\n  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)\n  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Synthesis.PromptBuilder.ToXml\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: ToXml()\n  nameWithType: PromptBuilder.ToXml()\n  fullName: System.Speech.Synthesis.PromptBuilder.ToXml()\n- uid: System.Speech.Synthesis.PromptBuilder.#ctor*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: PromptBuilder\n  nameWithType: PromptBuilder.PromptBuilder\n- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendAudio\n  nameWithType: PromptBuilder.AppendAudio\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendBookmark\n  nameWithType: PromptBuilder.AppendBookmark\n- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendBreak\n  nameWithType: PromptBuilder.AppendBreak\n- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendPromptBuilder\n  nameWithType: PromptBuilder.AppendPromptBuilder\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendSsml\n  nameWithType: PromptBuilder.AppendSsml\n- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendSsmlMarkup\n  nameWithType: PromptBuilder.AppendSsmlMarkup\n- uid: System.Speech.Synthesis.PromptBuilder.AppendText*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendText\n  nameWithType: PromptBuilder.AppendText\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendTextWithAlias\n  nameWithType: PromptBuilder.AppendTextWithAlias\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendTextWithHint\n  nameWithType: PromptBuilder.AppendTextWithHint\n- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: AppendTextWithPronunciation\n  nameWithType: PromptBuilder.AppendTextWithPronunciation\n- uid: System.Speech.Synthesis.PromptBuilder.ClearContent*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: ClearContent\n  nameWithType: PromptBuilder.ClearContent\n- uid: System.Speech.Synthesis.PromptBuilder.Culture*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: Culture\n  nameWithType: PromptBuilder.Culture\n- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: EndParagraph\n  nameWithType: PromptBuilder.EndParagraph\n- uid: System.Speech.Synthesis.PromptBuilder.EndSentence*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: EndSentence\n  nameWithType: PromptBuilder.EndSentence\n- uid: System.Speech.Synthesis.PromptBuilder.EndStyle*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: EndStyle\n  nameWithType: PromptBuilder.EndStyle\n- uid: System.Speech.Synthesis.PromptBuilder.EndVoice*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: EndVoice\n  nameWithType: PromptBuilder.EndVoice\n- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: IsEmpty\n  nameWithType: PromptBuilder.IsEmpty\n- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartParagraph\n  nameWithType: PromptBuilder.StartParagraph\n- uid: System.Speech.Synthesis.PromptBuilder.StartSentence*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartSentence\n  nameWithType: PromptBuilder.StartSentence\n- uid: System.Speech.Synthesis.PromptBuilder.StartStyle*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartStyle\n  nameWithType: PromptBuilder.StartStyle\n- uid: System.Speech.Synthesis.PromptBuilder.StartVoice*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: StartVoice\n  nameWithType: PromptBuilder.StartVoice\n- uid: System.Speech.Synthesis.PromptBuilder.ToXml*\n  parent: System.Speech.Synthesis.PromptBuilder\n  isExternal: false\n  name: ToXml\n  nameWithType: PromptBuilder.ToXml\n"}