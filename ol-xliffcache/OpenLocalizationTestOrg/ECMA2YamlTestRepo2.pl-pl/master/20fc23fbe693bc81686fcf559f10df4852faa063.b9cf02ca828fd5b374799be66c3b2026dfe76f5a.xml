{"nodes":[{"pos":[2254,2572],"content":"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e).","needQuote":false,"needEscape":true,"nodes":[{"content":"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories.","pos":[0,102]},{"content":"This class cannot be inherited.","pos":[103,134]},{"content":"To browse the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)</ept>.","pos":[141,316],"source":"       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)."}]},{"pos":[6957,7064],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class on the specified path.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class on the specified path."},{"pos":[7077,7703],"content":"This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.       The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor does not check if a directory exists.","pos":[0,54]},{"content":"This constructor is a placeholder for a string that is used to access the disk in subsequent operations.","pos":[55,159]},{"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","pos":[166,269],"source":"       The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[275,518],"source":"      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown."},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[525,619],"source":"       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[8309,8440],"content":"A string specifying the path on which to create the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string specifying the path on which to create the <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref>."},{"pos":[8600,8682],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8795,8844],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[8939,9013],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains invalid characters such as \", <ph id=\"ph2\">&amp;lt;</ph>, <ph id=\"ph3\">&amp;gt;</ph>, or |.","needQuote":true,"needEscape":true,"source":"<code>path</code> contains invalid characters such as \", &lt;, &gt;, or |."},{"pos":[9120,9383],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","pos":[0,263],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]},{"content":"The specified path, file name, or both are too long.","pos":[211,263]}]}]},{"pos":[9689,9709],"content":"Creates a directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a directory.","pos":[0,20]}]},{"pos":[9722,9883],"content":"If the directory already exists, this method does nothing.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the directory already exists, this method does nothing.","pos":[0,58]},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[65,159],"source":"       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[10531,10563],"content":"The directory cannot be created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The directory cannot be created.","pos":[0,32]}]},{"pos":[11018,11122],"content":"Creates a directory using a <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Creates a directory using a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object."},{"pos":[11135,11452],"content":"Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.       If the directory already exists, this method does nothing.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.","pos":[0,147]},{"content":"If the directory already exists, this method does nothing.","pos":[154,212]},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[219,313],"source":"       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[11688,11733],"content":"The access control to apply to the directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"The access control to apply to the directory.","pos":[0,45]}]},{"pos":[11880,11954],"content":"The directory specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is read-only or is not empty.","needQuote":true,"needEscape":true,"source":"The directory specified by <code>path</code> is read-only or is not empty."},{"pos":[12069,12118],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[12213,12379],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <ph id=\"ph2\">&lt;xref:System.IO.Path.InvalidPathChars&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."},{"pos":[12482,12564],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12671,12881],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]},{"pos":[13000,13066],"content":"The specified path is invalid, such as being on an unmapped drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]},{"pos":[13169,13238],"content":"Creating a directory with only the colon (:) character was attempted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creating a directory with only the colon (:) character was attempted.","pos":[0,69]}]},{"pos":[13652,13826],"content":"Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a subdirectory or subdirectories on the specified path.","pos":[0,63]},{"content":"The specified path can be relative to this instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","pos":[64,174],"source":" The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class."}]},{"pos":[13839,14228],"content":"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.      > [!NOTE] >  Path names are limited to 248 characters.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Any and all directories specified in <ph id=\"ph1\">`path`</ph> are created, unless some part of <ph id=\"ph2\">`path`</ph> is invalid.","pos":[0,95],"source":"Any and all directories specified in `path` are created, unless some part of `path` is invalid."},{"content":"The <ph id=\"ph1\">`path`</ph> parameter specifies a directory path, not a file path.","pos":[96,161],"source":" The `path` parameter specifies a directory path, not a file path."},{"content":"If the subdirectory already exists, this method does nothing.","pos":[162,223]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Path names are limited to 248 characters.","pos":[229,283],"source":"      > [!NOTE] >  Path names are limited to 248 characters."},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[290,384],"source":"       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[14913,15014],"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[0,101],"nodes":[{"content":"The specified path.","pos":[0,19]},{"content":"This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[20,101]}]}]},{"pos":[15082,15132],"content":"The last directory specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The last directory specified in <code>path</code>."},{"pos":[15297,15460],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> does not specify a valid file path or contains invalid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> characters.","needQuote":true,"needEscape":true,"source":"<code>path</code> does not specify a valid file path or contains invalid <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> characters."},{"pos":[15563,15645],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15764,15830],"content":"The specified path is invalid, such as being on an unmapped drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]},{"pos":[15920,16049],"content":"The subdirectory cannot be created.       -or-       A file or directory already has the name specified by <code>path</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The subdirectory cannot be created.","pos":[0,35]},{"content":"-or-       A file or directory already has the name specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[42,125],"source":"       -or-       A file or directory already has the name specified by <code>path</code>."}]},{"pos":[16157,16420],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","pos":[0,263],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]},{"content":"The specified path, file name, or both are too long.","pos":[211,263]}]}]},{"pos":[16534,16864],"content":"The caller does not have code access permission to create the directory.       -or-       The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have code access permission to create the directory.","pos":[0,72]},{"content":"-or-       The caller does not have code access permission to read the directory described by the returned <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[79,238],"source":"       -or-       The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object."},{"content":"This can occur when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter describes an existing directory.","pos":[240,324],"source":"  This can occur when the <code>path</code> parameter describes an existing directory."}]},{"pos":[16968,17060],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains a colon character (:) that is not part of a drive label (\"C:<ph id=\"ph2\">\\\"</ph>).","needQuote":true,"needEscape":true,"source":"<code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\")."},{"pos":[17624,17826],"content":"Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a subdirectory or subdirectories on the specified path with the specified security.","pos":[0,91]},{"content":"The specified path can be relative to this instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","pos":[92,202],"source":" The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class."}]},{"pos":[17839,18228],"content":"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.      > [!NOTE] >  Path names are limited to 248 characters.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Any and all directories specified in <ph id=\"ph1\">`path`</ph> are created, unless some part of <ph id=\"ph2\">`path`</ph> is invalid.","pos":[0,95],"source":"Any and all directories specified in `path` are created, unless some part of `path` is invalid."},{"content":"The <ph id=\"ph1\">`path`</ph> parameter specifies a directory path, not a file path.","pos":[96,161],"source":" The `path` parameter specifies a directory path, not a file path."},{"content":"If the subdirectory already exists, this method does nothing.","pos":[162,223]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Path names are limited to 248 characters.","pos":[229,283],"source":"      > [!NOTE] >  Path names are limited to 248 characters."},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[290,384],"source":"       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[18461,18562],"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[0,101],"nodes":[{"content":"The specified path.","pos":[0,19]},{"content":"This cannot be a different disk volume or Universal Naming Convention (UNC) name.","pos":[20,101]}]}]},{"pos":[18670,18692],"content":"The security to apply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security to apply.","pos":[0,22]}]},{"pos":[18760,18810],"content":"The last directory specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The last directory specified in <code>path</code>."},{"pos":[18975,19138],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> does not specify a valid file path or contains invalid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> characters.","needQuote":true,"needEscape":true,"source":"<code>path</code> does not specify a valid file path or contains invalid <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> characters."},{"pos":[19241,19323],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19442,19508],"content":"The specified path is invalid, such as being on an unmapped drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]},{"pos":[19598,19727],"content":"The subdirectory cannot be created.       -or-       A file or directory already has the name specified by <code>path</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The subdirectory cannot be created.","pos":[0,35]},{"content":"-or-       A file or directory already has the name specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[42,125],"source":"       -or-       A file or directory already has the name specified by <code>path</code>."}]},{"pos":[19835,20098],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.","pos":[0,263],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]},{"content":"The specified path, file name, or both are too long.","pos":[211,263]}]}]},{"pos":[20212,20542],"content":"The caller does not have code access permission to create the directory.       -or-       The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.","needQuote":false,"needEscape":true,"nodes":[{"content":"The caller does not have code access permission to create the directory.","pos":[0,72]},{"content":"-or-       The caller does not have code access permission to read the directory described by the returned <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[79,238],"source":"       -or-       The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\"></xref> object."},{"content":"This can occur when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter describes an existing directory.","pos":[240,324],"source":"  This can occur when the <code>path</code> parameter describes an existing directory."}]},{"pos":[20646,20738],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains a colon character (:) that is not part of a drive label (\"C:<ph id=\"ph2\">\\\"</ph>).","needQuote":true,"needEscape":true,"source":"<code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\")."},{"pos":[21044,21117],"content":"Deletes this <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if it is empty.","needQuote":true,"needEscape":true,"source":"Deletes this <xref href=\"System.IO.DirectoryInfo\"></xref> if it is empty."},{"pos":[21129,21223],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."},{"pos":[21865,21905],"content":"The directory contains a read-only file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The directory contains a read-only file.","pos":[0,40]}]},{"pos":[22024,22145],"content":"The directory described by this <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object does not exist or could not be found.","needQuote":true,"needEscape":true,"source":"The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found."},{"pos":[22235,22625],"content":"The directory is not empty.       -or-       The directory is the application's current working directory.       -or-       There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The directory is not empty.","pos":[0,27]},{"content":"-or-       The directory is the application's current working directory.","pos":[34,106]},{"content":"-or-       There is an open handle on the directory, and the operating system is Windows XP or earlier.","pos":[113,216]},{"content":"This open handle can result from enumerating directories.","pos":[217,274]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Enumerate Directories and Files<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[275,382],"source":" For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[22739,22788],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[23147,23274],"content":"Deletes this instance of a <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, specifying whether to delete subdirectories and files.","needQuote":true,"needEscape":true,"source":"Deletes this instance of a <xref href=\"System.IO.DirectoryInfo\"></xref>, specifying whether to delete subdirectories and files."},{"pos":[23287,23641],"content":"If the `DirectoryInfo` has no files or subdirectories, this method deletes the `DirectoryInfo` even if `recursive` is `false`. Attempting to delete a `DirectoryInfo` that is not empty when `recursive` is `false` throws an <xref:System.IO.IOException>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the <ph id=\"ph1\">`DirectoryInfo`</ph> has no files or subdirectories, this method deletes the <ph id=\"ph2\">`DirectoryInfo`</ph> even if <ph id=\"ph3\">`recursive`</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[0,126],"source":"If the `DirectoryInfo` has no files or subdirectories, this method deletes the `DirectoryInfo` even if `recursive` is `false`."},{"content":"Attempting to delete a <ph id=\"ph1\">`DirectoryInfo`</ph> that is not empty when <ph id=\"ph2\">`recursive`</ph> is <ph id=\"ph3\">`false`</ph> throws an &lt;xref:System.IO.IOException&gt;.","pos":[127,251],"source":" Attempting to delete a `DirectoryInfo` that is not empty when `recursive` is `false` throws an <xref:System.IO.IOException>."},{"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[258,352],"source":"       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[24349,24545],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to delete this directory, its subdirectories, and all files; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to delete this directory, its subdirectories, and all files; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24718,24758],"content":"The directory contains a read-only file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The directory contains a read-only file.","pos":[0,40]}]},{"pos":[24877,24998],"content":"The directory described by this <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object does not exist or could not be found.","needQuote":true,"needEscape":true,"source":"The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found."},{"pos":[25088,25691],"content":"The directory is read-only.       -or-       The directory contains one or more files or subdirectories and <code>recursive</code> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.       -or-       The directory is the application's current working directory.       -or-       There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The directory is read-only.","pos":[0,27]},{"content":"-or-       The directory contains one or more files or subdirectories and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">recursive</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[34,197],"source":"       -or-       The directory contains one or more files or subdirectories and <code>recursive</code> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"-or-       The directory is the application's current working directory.","pos":[204,276]},{"content":"-or-       There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier.","pos":[283,409]},{"content":"This open handle can result from enumerating directories and files.","pos":[410,477]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Enumerate Directories and Files<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[478,585],"source":" For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[25805,25854],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[26230,26313],"content":"Returns an enumerable collection of directory information in the current directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of directory information in the current directory.","pos":[0,83]}]},{"pos":[26326,27633],"content":"The EnumerateDirectories and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:      -   When you use EnumerateDirectories, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.      -   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.       Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.       This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The EnumerateDirectories and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:      -   When you use EnumerateDirectories, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.      -   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.       Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.       This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.","pos":[0,1283],"nodes":[{"content":"The EnumerateDirectories and &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt; methods differ as follows:      -   When you use EnumerateDirectories, you can start enumerating the collection of &lt;xref:System.IO.DirectoryInfo&gt; objects before the whole collection is returned.","pos":[0,272],"source":"The EnumerateDirectories and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:      -   When you use EnumerateDirectories, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned."},{"content":"-   When you use &lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;, you must wait for the whole array of &lt;xref:System.IO.DirectoryInfo&gt; objects to be returned before you can access the array.","pos":[278,468],"source":"      -   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array."},{"content":"Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.","pos":[475,583]},{"content":"This method pre-populates the values of the following &lt;xref:System.IO.DirectoryInfo&gt; properties:      -   &lt;xref:System.IO.FileSystemInfo.Attributes%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A&gt;       The returned collection is not cached; each call to the &lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt; method on  the collection will start a new enumeration.","pos":[590,1283],"source":"       This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."}]}]},{"pos":[28622,28687],"content":"An enumerable collection of directories in the current directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerable collection of directories in the current directory.","pos":[0,65]}]},{"pos":[28878,29012],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[29125,29174],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[29598,29696],"content":"Returns an enumerable collection of directory information that matches a specified search pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of directory information that matches a specified search pattern.","pos":[0,98]}]},{"pos":[31999,32267],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,268],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[62,214]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[215,268],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[32375,32455],"content":"An enumerable collection of directories that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerable collection of directories that matches <code>searchPattern</code>."},{"pos":[32630,32721],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32840,32974],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[33087,33136],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[33645,33774],"content":"Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.","pos":[0,129]}]},{"pos":[36636,36904],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,268],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[62,214]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[215,268],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[36982,37186],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[139,204],"source":" The default value is <xref href=\"System.IO.SearchOption\"></xref>."}]},{"pos":[37294,37404],"content":"An enumerable collection of directories that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">searchOption</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerable collection of directories that matches <code>searchPattern</code> and <code>searchOption</code>."},{"pos":[37579,37670],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[37785,37876],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."},{"pos":[37995,38129],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[38242,38291],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[38637,38715],"content":"Returns an enumerable collection of file information in the current directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of file information in the current directory.","pos":[0,78]}]},{"pos":[38728,40036],"content":"The EnumerateFiles and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:      -   When you use EnumerateFiles, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.      -   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.       Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.       This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>      -   <xref:System.IO.FileInfo.Length%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The EnumerateFiles and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:      -   When you use EnumerateFiles, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.      -   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.       Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.       This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>      -   <xref:System.IO.FileInfo.Length%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","pos":[0,1282],"nodes":[{"content":"The EnumerateFiles and &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt; methods differ as follows:      -   When you use EnumerateFiles, you can start enumerating the collection of &lt;xref:System.IO.FileInfo&gt; objects before the whole collection is returned.","pos":[0,249],"source":"The EnumerateFiles and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:      -   When you use EnumerateFiles, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."},{"content":"-   When you use &lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;, you must wait for the whole array of &lt;xref:System.IO.FileInfo&gt; objects to be returned before you can access the array.","pos":[255,434],"source":"      -   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array."},{"content":"Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.","pos":[441,543]},{"content":"This method pre-populates the values of the following &lt;xref:System.IO.FileInfo&gt; properties:      -   &lt;xref:System.IO.FileSystemInfo.Attributes%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileInfo.Length%2A&gt;       The returned collection is not cached; each call to the &lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt; method on the collection will start a new enumeration.","pos":[550,1282],"source":"       This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>      -   <xref:System.IO.FileInfo.Length%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."}]}]},{"pos":[41492,41555],"content":"An enumerable collection of the files in the current directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerable collection of the files in the current directory.","pos":[0,63]}]},{"pos":[41740,41874],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[41987,42036],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[42430,42513],"content":"Returns an enumerable collection of file information that matches a search pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of file information that matches a search pattern.","pos":[0,83]}]},{"pos":[45311,45573],"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,262],"nodes":[{"content":"The search string to match against the names of files.","pos":[0,54]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[56,208]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[209,262],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[45676,45750],"content":"An enumerable collection of files that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerable collection of files that matches <code>searchPattern</code>."},{"pos":[45919,46010],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[46129,46264],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid, (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, (for example, it is on an unmapped drive)."},{"pos":[46377,46426],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[46905,47029],"content":"Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.","pos":[0,124]}]},{"pos":[49864,50126],"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,262],"nodes":[{"content":"The search string to match against the names of files.","pos":[0,54]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[56,208]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[209,262],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[50204,50408],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[139,204],"source":" The default value is <xref href=\"System.IO.SearchOption\"></xref>."}]},{"pos":[50511,50615],"content":"An enumerable collection of files that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">searchOption</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerable collection of files that matches <code>searchPattern</code> and <code>searchOption</code>."},{"pos":[50784,50875],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[50990,51081],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."},{"pos":[51200,51334],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[51447,51496],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[51892,51977],"content":"Returns an enumerable collection of file system information in the current directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of file system information in the current directory.","pos":[0,85]}]},{"pos":[51990,53313],"content":"The EnumerateFileSystemInfos and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:      -   When you use EnumerateFileSystemInfos, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.      -   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.       Therefore, when you are working with many files and directories, EnumerateFileSystemInfos can be more efficient.       This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The EnumerateFileSystemInfos and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:      -   When you use EnumerateFileSystemInfos, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.      -   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.       Therefore, when you are working with many files and directories, EnumerateFileSystemInfos can be more efficient.       This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.","pos":[0,1299],"nodes":[{"content":"The EnumerateFileSystemInfos and &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt; methods differ as follows:      -   When you use EnumerateFileSystemInfos, you can start enumerating the collection of &lt;xref:System.IO.FileInfo&gt; objects before the whole collection is returned.","pos":[0,279],"source":"The EnumerateFileSystemInfos and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:      -   When you use EnumerateFileSystemInfos, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."},{"content":"-   When you use &lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;, you must wait for the whole array of &lt;xref:System.IO.FileSystemInfo&gt; objects to be returned before you can access the array.","pos":[285,480],"source":"      -   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array."},{"content":"Therefore, when you are working with many files and directories, EnumerateFileSystemInfos can be more efficient.","pos":[487,599]},{"content":"This method pre-populates the values of the following &lt;xref:System.IO.FileSystemInfo&gt; properties:      -   &lt;xref:System.IO.FileSystemInfo.Attributes%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A&gt;       The returned collection is not cached; each call to the &lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt; method on the collection will start a new enumeration.","pos":[606,1299],"source":"       This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."}]}]},{"pos":[53566,53643],"content":"An enumerable collection of file system information in the current directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerable collection of file system information in the current directory.","pos":[0,77]}]},{"pos":[53838,53972],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[54085,54134],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[54578,54678],"content":"Returns an enumerable collection of file system information that matches a specified search pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of file system information that matches a specified search pattern.","pos":[0,100]}]},{"pos":[57002,57270],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,268],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[62,214]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[215,268],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[57379,57479],"content":"An enumerable collection of file system information objects that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerable collection of file system information objects that matches <code>searchPattern</code>."},{"pos":[57658,57749],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[57868,58002],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[58115,58164],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[58693,58824],"content":"Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.","pos":[0,131]}]},{"pos":[61185,61453],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,268],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[62,214]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[215,268],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[61531,61735],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[139,204],"source":" The default value is <xref href=\"System.IO.SearchOption\"></xref>."}]},{"pos":[61844,61974],"content":"An enumerable collection of file system information objects that matches <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">searchOption</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerable collection of file system information objects that matches <code>searchPattern</code> and <code>searchOption</code>."},{"pos":[62153,62244],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[62359,62450],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."},{"pos":[62569,62703],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[62816,62865],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[63167,63220],"content":"Gets a value indicating whether the directory exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the directory exists.","pos":[0,53]}]},{"pos":[63232,63557],"content":"The Exists property returns `false` if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Exists property returns <ph id=\"ph1\">`false`</ph> if any error occurs while trying to determine if the specified file exists.","pos":[0,111],"source":"The Exists property returns `false` if any error occurs while trying to determine if the specified file exists."},{"content":"This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.","pos":[112,325]}]},{"pos":[64143,64303],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the directory exists; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the directory exists; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[64720,64954],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that encapsulates the access control list (ACL) entries for the directory described by the current <bpt id=\"p2\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object."},{"pos":[64967,66039],"content":"Calling this method overload is equivalent to calling the <xref:System.IO.Directory.GetAccessControl%2A> method overload and specifying the access control sections <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic).       Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.       An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling this method overload is equivalent to calling the &lt;xref:System.IO.Directory.GetAccessControl%2A&gt; method overload and specifying the access control sections &lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt; &amp;#124; &lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt; &amp;#124; &lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt; (&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;<ph id=\"ph1\">`Or`</ph>&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;<ph id=\"ph2\">`Or`</ph>&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt; in Visual Basic).","pos":[0,706],"source":"Calling this method overload is equivalent to calling the <xref:System.IO.Directory.GetAccessControl%2A> method overload and specifying the access control sections <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic)."},{"content":"Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.","pos":[713,816]},{"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.","pos":[823,950]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add or Remove Access Control List Entries<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[951,1068],"source":" For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[66839,66978],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that encapsulates the access control rules for the directory.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the directory."},{"pos":[67137,67182],"content":"The directory could not be found or modified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The directory could not be found or modified.","pos":[0,45]}]},{"pos":[67298,67474],"content":"The directory is read-only.       -or-       This operation is not supported on the current platform.       -or-       The caller does not have the required permission.","needQuote":false,"needEscape":true,"nodes":[{"content":"The directory is read-only.       -or-       This operation is not supported on the current platform.       -or-       The caller does not have the required permission.","pos":[0,168],"nodes":[{"content":"The directory is read-only.","pos":[0,27]},{"content":"-or-       This operation is not supported on the current platform.","pos":[34,101]},{"content":"-or-       The caller does not have the required permission.","pos":[108,168]}]}]},{"pos":[67564,67614],"content":"An I/O error occurred while opening the directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred while opening the directory.","pos":[0,50]}]},{"pos":[67733,67801],"content":"The current operating system is not Microsoft Windows 2000 or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]},{"pos":[68326,68578],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <bpt id=\"p2\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object."},{"pos":[68591,68948],"content":"Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.       An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.","pos":[0,103]},{"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.","pos":[110,237]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add or Remove Access Control List Entries<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[238,355],"source":" For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[69241,69408],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specifies the type of access control list (ACL) information to receive.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to receive."},{"pos":[69501,70650],"content":"A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter.       Exceptions       <table><thead><tr><th> Exception type       </th><th> Condition       </th></tr></thead><tbody><tr><td><xref href=\"System.SystemException\"></xref></td><td> The directory could not be found or modified.       </td></tr><tr><td> <xref:System.UnauthorizedAccessException>       </td><td> The current process does not have access to open the directory.       </td></tr><tr><td> <xref:System.IO.IOException>       </td><td> An I/O error occurred while opening the directory.       </td></tr><tr><td> <xref:System.PlatformNotSupportedException>       </td><td> The current operating system is not Microsoft Windows 2000 or later.       </td></tr><tr><td> <xref:System.UnauthorizedAccessException>       </td><td> The directory is read-only.       -or-       This operation is not supported on the current platform.       -or-       The caller does not have the required permission.       </td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter.       Exceptions       ","pos":[0,203],"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that encapsulates the access control rules for the file described by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[0,179],"source":"A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter."},{"content":"Exceptions","pos":[186,196]}]},{"content":"Exception type","pos":[226,240]},{"content":"Condition","pos":[257,266]},{"content":" The directory could not be found or modified.       ","pos":[358,411],"nodes":[{"content":"The directory could not be found or modified.","pos":[1,46]}]},{"content":"&lt;xref:System.UnauthorizedAccessException&gt;","pos":[430,471],"source":" <xref:System.UnauthorizedAccessException>       "},{"content":" The current process does not have access to open the directory.       ","pos":[487,558],"nodes":[{"content":"The current process does not have access to open the directory.","pos":[1,64]}]},{"content":"&lt;xref:System.IO.IOException&gt;","pos":[577,605],"source":" <xref:System.IO.IOException>       "},{"content":" An I/O error occurred while opening the directory.       ","pos":[621,679],"nodes":[{"content":"An I/O error occurred while opening the directory.","pos":[1,51]}]},{"content":"&lt;xref:System.PlatformNotSupportedException&gt;","pos":[698,741],"source":" <xref:System.PlatformNotSupportedException>       "},{"content":" The current operating system is not Microsoft Windows 2000 or later.       ","pos":[757,833],"nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[1,69]}]},{"content":"&lt;xref:System.UnauthorizedAccessException&gt;","pos":[852,893],"source":" <xref:System.UnauthorizedAccessException>       "},{"content":" The directory is read-only.       -or-       This operation is not supported on the current platform.       -or-       The caller does not have the required permission.       ","pos":[909,1085],"nodes":[{"content":"The directory is read-only.","pos":[1,28]},{"content":"-or-       This operation is not supported on the current platform.","pos":[35,102]},{"content":"-or-       The caller does not have the required permission.","pos":[109,169]}]}]},{"pos":[71068,71120],"content":"Returns the subdirectories of the current directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the subdirectories of the current directory.","pos":[0,52]}]},{"pos":[71133,71761],"content":"If there are no subdirectories, this method returns an empty array. This method is not recursive.       This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If there are no subdirectories, this method returns an empty array. This method is not recursive.       This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","pos":[0,612],"nodes":[{"content":"If there are no subdirectories, this method returns an empty array.","pos":[0,67]},{"content":"This method is not recursive.","pos":[68,97]},{"content":"This method pre-populates the values of the following &lt;xref:System.IO.DirectoryInfo&gt; properties:      -   &lt;xref:System.IO.FileSystemInfo.Attributes%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A&gt;","pos":[104,612],"source":"       This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"}]}]},{"pos":[72367,72432],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.IO.DirectoryInfo\"></xref> objects."},{"pos":[72617,72745],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid, such as being on an unmapped drive.","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, such as being on an unmapped drive."},{"pos":[72858,72907],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[73022,73071],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[73465,73592],"content":"Returns an array of directories in the current <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> matching the given search criteria.","needQuote":true,"needEscape":true,"source":"Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria."},{"pos":[75357,75625],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,268],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[62,214]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[215,268],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[75695,75827],"content":"An array of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> matching <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> matching <code>searchPattern</code>."},{"pos":[75988,76120],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern &lt;/code&gt;</ph>contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref:System.IO.Path.GetInvalidPathChars*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."},{"pos":[76223,76314],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[76433,76601],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[76716,76765],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[77244,77435],"content":"Returns an array of directories in the current <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> matching the given search criteria and using a value to determine whether to search subdirectories.","needQuote":true,"needEscape":true,"source":"Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria and using a value to determine whether to search subdirectories."},{"pos":[79453,79721],"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,268],"nodes":[{"content":"The search string to match against the names of directories.","pos":[0,60]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[62,214]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[215,268],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[79799,79937],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]}]},{"pos":[80007,80139],"content":"An array of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> matching <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">searchPattern</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> matching <code>searchPattern</code>."},{"pos":[80300,80432],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern &lt;/code&gt;</ph>contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref:System.IO.Path.GetInvalidPathChars*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."},{"pos":[80535,80626],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[80741,80832],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."},{"pos":[80951,81119],"content":"The path encapsulated in the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"source":"The path encapsulated in the <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> object is invalid (for example, it is on an unmapped drive)."},{"pos":[81234,81283],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[81599,81646],"content":"Returns a file list from the current directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a file list from the current directory.","pos":[0,47]}]},{"pos":[81659,83065],"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and GetFiles methods differ as follows:      -   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.      -   When you use GetFiles, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.       Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.       If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.       The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.       This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>      -   <xref:System.IO.FileInfo.Length%2A>","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and GetFiles methods differ as follows:      -   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.      -   When you use GetFiles, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.       Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.       If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.       The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.       This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>      -   <xref:System.IO.FileInfo.Length%2A>","pos":[0,1378],"nodes":[{"content":"The &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt; and GetFiles methods differ as follows:      -   When you use &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;, you can start enumerating the collection of &lt;xref:System.IO.FileInfo&gt; objects before the whole collection is returned.","pos":[0,283],"source":"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and GetFiles methods differ as follows:      -   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned."},{"content":"-   When you use GetFiles, you must wait for the whole array of &lt;xref:System.IO.FileInfo&gt; objects to be returned before you can access the array.","pos":[289,434],"source":"      -   When you use GetFiles, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array."},{"content":"Therefore, when you are working with many files and directories, &lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt; can be more efficient.","pos":[441,577],"source":"       Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient."},{"content":"If there are no files in the &lt;xref:System.IO.DirectoryInfo&gt;, this method returns an empty array.","pos":[584,680],"source":"       If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."},{"content":"The order of the returned file names is not guaranteed; use the &lt;xref:System.Array.Sort%2A&gt; method if a specific sort order is required.","pos":[687,823],"source":"       The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required."},{"content":"This method pre-populates the values of the following &lt;xref:System.IO.FileInfo&gt; properties:      -   &lt;xref:System.IO.FileSystemInfo.Attributes%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileInfo.Length%2A&gt;","pos":[830,1378],"source":"       This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>      -   <xref:System.IO.FileInfo.Length%2A>"}]}]},{"pos":[83701,83758],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.IO.FileInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.IO.FileInfo\"></xref>."},{"pos":[83937,83993],"content":"The path is invalid, such as being on an unmapped drive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path is invalid, such as being on an unmapped drive.","pos":[0,56]}]},{"pos":[84357,84438],"content":"Returns a file list from the current directory matching the given search pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a file list from the current directory matching the given search pattern.","pos":[0,81]}]},{"pos":[89191,89453],"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,262],"nodes":[{"content":"The search string to match against the names of files.","pos":[0,54]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[56,208]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[209,262],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[89518,89575],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.IO.FileInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.IO.FileInfo\"></xref>."},{"pos":[89730,89862],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern &lt;/code&gt;</ph>contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref:System.IO.Path.GetInvalidPathChars*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."},{"pos":[89965,90056],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[90175,90237],"content":"The path is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"nodes":[{"content":"The path is invalid (for example, it is on an unmapped drive).","pos":[0,62]}]},{"pos":[90350,90399],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[90848,90993],"content":"Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.","pos":[0,145]}]},{"pos":[95558,95820],"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,262],"nodes":[{"content":"The search string to match against the names of files.","pos":[0,54]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[56,208]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[209,262],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[95898,96036],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]}]},{"pos":[96101,96158],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.IO.FileInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.IO.FileInfo\"></xref>."},{"pos":[96313,96445],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern &lt;/code&gt;</ph>contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref:System.IO.Path.GetInvalidPathChars*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."},{"pos":[96548,96639],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[96754,96845],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."},{"pos":[96964,97026],"content":"The path is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"nodes":[{"content":"The path is invalid (for example, it is on an unmapped drive).","pos":[0,62]}]},{"pos":[97139,97188],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[97554,97704],"content":"Returns an array of strongly typed <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> entries representing all the files and subdirectories in a directory.","needQuote":true,"needEscape":true,"source":"Returns an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries representing all the files and subdirectories in a directory."},{"pos":[97717,98784],"content":"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array. This method is not recursive.       For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.       This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array. This method is not recursive.       For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.       This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>","pos":[0,1049],"nodes":[{"content":"If there are no files or directories in the &lt;xref:System.IO.DirectoryInfo&gt;, this method returns an empty array.","pos":[0,111],"source":"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array."},{"content":"This method is not recursive.","pos":[112,141]},{"content":"For subdirectories, the &lt;xref:System.IO.FileSystemInfo&gt; objects returned by this method can be cast to the derived class &lt;xref:System.IO.DirectoryInfo&gt;.","pos":[148,300],"source":"       For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>."},{"content":"Use the &lt;xref:System.IO.FileAttributes&gt; value returned by the &lt;xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName&gt; property to determine whether the &lt;xref:System.IO.FileSystemInfo&gt; represents a file or a directory.","pos":[301,533],"source":" Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory."},{"content":"This method pre-populates the values of the following &lt;xref:System.IO.FileSystemInfo&gt; properties:      -   &lt;xref:System.IO.FileSystemInfo.Attributes%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.CreationTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTime%2A&gt;      -   &lt;xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A&gt;","pos":[540,1049],"source":"       This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:      -   <xref:System.IO.FileSystemInfo.Attributes%2A>      -   <xref:System.IO.FileSystemInfo.CreationTime%2A>      -   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>      -   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>      -   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"}]}]},{"pos":[99237,99318],"content":"An array of strongly typed <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> entries.","needQuote":true,"needEscape":true,"source":"An array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries."},{"pos":[99507,99569],"content":"The path is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"nodes":[{"content":"The path is invalid (for example, it is on an unmapped drive).","pos":[0,62]}]},{"pos":[99983,100157],"content":"Retrieves an array of strongly typed <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects representing the files and subdirectories that match the specified search criteria.","needQuote":true,"needEscape":true,"source":"Retrieves an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> objects representing the files and subdirectories that match the specified search criteria."},{"pos":[102947,103225],"content":"The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,278],"nodes":[{"content":"The search string to match against the names of directories and files.","pos":[0,70]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[72,224]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[225,278],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[103296,103441],"content":"An array of strongly typed <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_FileSystemInfo\" name=\"FileSystemInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects matching the search criteria.","needQuote":true,"needEscape":true,"source":"An array of strongly typed <xref uid=\"langword_csharp_FileSystemInfo\" name=\"FileSystemInfo\" href=\"\"></xref> objects matching the search criteria."},{"pos":[103606,103738],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern &lt;/code&gt;</ph>contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref:System.IO.Path.GetInvalidPathChars*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."},{"pos":[103841,103932],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[104051,104123],"content":"The specified path is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid (for example, it is on an unmapped drive).","pos":[0,72]}]},{"pos":[104236,104285],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[104784,104943],"content":"Retrieves an array of <bpt id=\"p1\">&lt;xref href=\"System.IO.FileSystemInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that represent the files and subdirectories matching the specified search criteria.","needQuote":true,"needEscape":true,"source":"Retrieves an array of <xref href=\"System.IO.FileSystemInfo\"></xref> objects that represent the files and subdirectories matching the specified search criteria."},{"pos":[106752,107031],"content":"The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","needQuote":true,"needEscape":true,"nodes":[{"content":"The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.","pos":[0,279],"nodes":[{"content":"The search string to match against the names of directories and filesa.","pos":[0,71]},{"content":"This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.","pos":[73,225]},{"content":"The default pattern is \"<ph id=\"ph1\">\\*</ph>\", which returns all files.","pos":[226,279],"source":" The default pattern is \"\\*\", which returns all files."}]}]},{"pos":[107109,107313],"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.","pos":[0,138]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[139,204],"source":" The default value is <xref href=\"System.IO.SearchOption\"></xref>."}]},{"pos":[107384,107447],"content":"An array of file system entries that match the search criteria.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of file system entries that match the search criteria.","pos":[0,63]}]},{"pos":[107612,107744],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern &lt;/code&gt;</ph>contains one or more invalid characters defined by the <ph id=\"ph2\">&lt;xref:System.IO.Path.GetInvalidPathChars*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."},{"pos":[107847,107938],"content":"<ph id=\"ph1\">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[108053,108144],"content":"<ph id=\"ph1\">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.IO.SearchOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value."},{"pos":[108263,108335],"content":"The specified path is invalid (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid (for example, it is on an unmapped drive).","pos":[0,72]}]},{"pos":[108448,108497],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[108851,108944],"content":"Moves a <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance and its contents to a new path.","needQuote":true,"needEscape":true,"source":"Moves a <xref href=\"System.IO.DirectoryInfo\"></xref> instance and its contents to a new path."},{"pos":[109986,110213],"content":"The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.","pos":[0,227],"nodes":[{"content":"The name and path to which to move this directory.","pos":[0,50]},{"content":"The destination cannot be another disk volume or a directory with the identical name.","pos":[51,136]},{"content":"It can be an existing directory to which you want to add this directory as a subdirectory.","pos":[137,227]}]}]},{"pos":[110374,110463],"content":"<ph id=\"ph1\">&lt;code&gt;destDirName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>destDirName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[110558,110608],"content":"<ph id=\"ph1\">&lt;code&gt;destDirName&lt;/code&gt;</ph> is an empty string (''\").","needQuote":true,"needEscape":true,"source":"<code>destDirName</code> is an empty string (''\")."},{"pos":[110698,110984],"content":"An attempt was made to move a directory to a different volume.       -or-       <code>destDirName</code> already exists.       -or-       You are not authorized to access this path.       -or-       The directory being moved and the destination directory have the same name.","needQuote":false,"needEscape":true,"nodes":[{"content":"An attempt was made to move a directory to a different volume.","pos":[0,62]},{"content":"-or-       <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">destDirName</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists.","pos":[69,120],"source":"       -or-       <code>destDirName</code> already exists."},{"content":"-or-       You are not authorized to access this path.","pos":[127,181]},{"content":"-or-       The directory being moved and the destination directory have the same name.","pos":[188,274]}]},{"pos":[111098,111147],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[111266,111308],"content":"The destination directory cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination directory cannot be found.","pos":[0,42]}]},{"pos":[111600,111676],"content":"Gets the name of this <bpt id=\"p1\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets the name of this <xref href=\"System.IO.DirectoryInfo\"></xref> instance."},{"pos":[112957,112976],"content":"The directory name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The directory name.","pos":[0,19]}]},{"pos":[113337,113391],"content":"Gets the parent directory of a specified subdirectory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parent directory of a specified subdirectory.","pos":[0,54]}]},{"pos":[113403,113497],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."},{"pos":[114039,114225],"content":"The parent directory, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the path is null or if the file path denotes a root (such as \"<ph id=\"ph1\">\\\"</ph>, \"C:\", or * \"<ph id=\"ph2\">\\\\</ph>\\server\\share\").","needQuote":true,"needEscape":true,"source":"The parent directory, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the path is null or if the file path denotes a root (such as \"\\\", \"C:\", or * \"\\\\\\server\\share\")."},{"pos":[114396,114445],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[114737,114776],"content":"Gets the root portion of the directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the root portion of the directory.","pos":[0,39]}]},{"pos":[115211,115263],"content":"An object that represents the root of the directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the root of the directory.","pos":[0,52]}]},{"pos":[115432,115481],"content":"The caller does not have the required permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]},{"pos":[115986,116213],"content":"Applies access control list (ACL) entries described by a <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to the directory described by the current <bpt id=\"p2\">&lt;xref href=\"System.IO.DirectoryInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Applies access control list (ACL) entries described by a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object to the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object."},{"pos":[116226,118446],"content":"An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).       The SetAccessControl method applies ACL entries to a file that represents the noninherited ACL list.      > [!CAUTION] >  The ACL specified for `directorySecurity` replaces the existing ACL for the directory. To add permissions for a new user, use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to obtain the existing ACL, and modify it.       The SetAccessControl method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation.  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file.       To copy ACL information from one file to another:      1.  Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.DirectorySecurity> object from the source file.      2.  Create a new <xref:System.Security.AccessControl.DirectorySecurity> object for the destination file.      3.  Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.DirectorySecurity> object to retrieve the ACL information.      4.  Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.DirectorySecurity> object.      5.  Set the destination <xref:System.Security.AccessControl.DirectorySecurity> object to the destination file using the SetAccessControl method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.","pos":[0,149]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add or Remove Access Control List Entries<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[150,267],"source":" For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md)."},{"content":"The SetAccessControl method applies ACL entries to a file that represents the noninherited ACL list.","pos":[274,374]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  The ACL specified for <ph id=\"ph2\">`directorySecurity`</ph> replaces the existing ACL for the directory.","pos":[380,482],"source":"      > [!CAUTION] >  The ACL specified for `directorySecurity` replaces the existing ACL for the directory."},{"content":"To add permissions for a new user, use the &lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt; method to obtain the existing ACL, and modify it.","pos":[483,626],"source":" To add permissions for a new user, use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to obtain the existing ACL, and modify it."},{"content":"The SetAccessControl method persists only &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; objects that have been modified after object creation.","pos":[633,784],"source":"       The SetAccessControl method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation."},{"content":"If a &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object has not been modified, it will not be persisted to a file.","pos":[786,911],"source":"  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file."},{"content":"Therefore, it is not possible to retrieve a &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object from one file and reapply the same object to another file.","pos":[913,1077],"source":"  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file."},{"content":"To copy ACL information from one file to another:      1.","pos":[1084,1141]},{"content":"Use the &lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt; method to retrieve the &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object from the source file.","pos":[1143,1308],"source":"  Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.DirectorySecurity> object from the source file."},{"content":"2.","pos":[1314,1316]},{"content":"Create a new &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object for the destination file.","pos":[1318,1418],"source":"  Create a new <xref:System.Security.AccessControl.DirectorySecurity> object for the destination file."},{"content":"3.","pos":[1424,1426]},{"content":"Use the &lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A&gt; or &lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt; method of the source &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object to retrieve the ACL information.","pos":[1428,1726],"source":"  Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.DirectorySecurity> object to retrieve the ACL information."},{"content":"4.","pos":[1732,1734]},{"content":"Use the &lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A&gt; or &lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt; method to copy the information retrieved in step 3 to the destination &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object.","pos":[1736,2051],"source":"  Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.DirectorySecurity> object."},{"content":"5.","pos":[2057,2059]},{"content":"Set the destination &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object to the destination file using the SetAccessControl method.","pos":[2061,2201],"source":"  Set the destination <xref:System.Security.AccessControl.DirectorySecurity> object to the destination file using the SetAccessControl method."}]},{"pos":[119272,119370],"content":"An object that describes an ACL entry to apply to the directory described by the <ph id=\"ph1\">`path`</ph> parameter.","needQuote":true,"needEscape":true,"source":"An object that describes an ACL entry to apply to the directory described by the `path` parameter."},{"pos":[119541,119650],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">directorySecurity</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>directorySecurity</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[119741,119781],"content":"The file could not be found or modified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file could not be found or modified.","pos":[0,40]}]},{"pos":[119896,119954],"content":"The current process does not have access to open the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current process does not have access to open the file.","pos":[0,58]}]},{"pos":[120073,120141],"content":"The current operating system is not Microsoft Windows 2000 or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]},{"pos":[120457,120511],"content":"Returns the original path that was passed by the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the original path that was passed by the user.","pos":[0,54]}]},{"pos":[120647,120701],"content":"Returns the original path that was passed by the user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the original path that was passed by the user.","pos":[0,54]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.DirectoryInfo\n  id: DirectoryInfo\n  children:\n  - System.IO.DirectoryInfo.#ctor(System.String)\n  - System.IO.DirectoryInfo.Create\n  - System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)\n  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  - System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  - System.IO.DirectoryInfo.Delete\n  - System.IO.DirectoryInfo.Delete(System.Boolean)\n  - System.IO.DirectoryInfo.EnumerateDirectories\n  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.EnumerateFiles\n  - System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.Exists\n  - System.IO.DirectoryInfo.GetAccessControl\n  - System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  - System.IO.DirectoryInfo.GetDirectories\n  - System.IO.DirectoryInfo.GetDirectories(System.String)\n  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.GetFiles\n  - System.IO.DirectoryInfo.GetFiles(System.String)\n  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.GetFileSystemInfos\n  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  - System.IO.DirectoryInfo.MoveTo(System.String)\n  - System.IO.DirectoryInfo.Name\n  - System.IO.DirectoryInfo.Parent\n  - System.IO.DirectoryInfo.Root\n  - System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  - System.IO.DirectoryInfo.ToString\n  langs:\n  - csharp\n  name: DirectoryInfo\n  nameWithType: DirectoryInfo\n  fullName: System.IO.DirectoryInfo\n  type: Class\n  summary: \"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.  \\n  \\n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e).\"\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n Use the DirectoryInfo class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \\n  \\n If you are going to reuse an object several times, consider using the instance method of DirectoryInfo instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.  \\n  \\n> [!NOTE]\\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \\\"c:\\\\temp c:\\\\windows\\\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \\n  \\n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \\n  \\n-   \\\"c:\\\\\\\\\\\\MyDir\\\\\\\\\\\\MyFile.txt\\\" in C#, or \\\"c:\\\\MyDir\\\\MyFile.txt\\\" in Visual Basic.  \\n  \\n-   \\\"c:\\\\\\\\\\\\MyDir\\\" in C#, or \\\"c:\\\\MyDir\\\" in Visual Basic.  \\n  \\n-   \\\"MyDir\\\\\\\\\\\\MySubdir\\\" in C#, or \\\"MyDir\\\\MySubDir\\\" in Visual Basic.  \\n  \\n-   \\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\MyServer\\\\\\\\\\\\MyShare\\\" in C#, or \\\"\\\\\\\\\\\\MyServer\\\\MyShare\\\" in Visual Basic.  \\n  \\n By default, full read/write access to new directories is granted to all users.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates some of the main members of the `DirectoryInfo` class.  \\n  \\n [!code-cpp[DirInfo Class Example#1](~/add/codesnippet/cpp/t-system.io.directoryinfo_1.cpp)]\\n [!code-cs[DirInfo Class Example#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_1.cs)]\\n [!code-vb[DirInfo Class Example#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_1.vb)]  \\n  \\n The following example demonstrates how to copy a directory and its contents.  \\n  \\n [!code-cs[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_2.cs)]\\n [!code-vb[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_2.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class DirectoryInfo : System.IO.FileSystemInfo\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.IO.FileSystemInfo\n  implements: []\n  inheritedMembers:\n  - System.IO.FileSystemInfo.Attributes\n  - System.IO.FileSystemInfo.CreationTime\n  - System.IO.FileSystemInfo.CreationTimeUtc\n  - System.IO.FileSystemInfo.Extension\n  - System.IO.FileSystemInfo.FullName\n  - System.IO.FileSystemInfo.FullPath\n  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.IO.FileSystemInfo.LastAccessTime\n  - System.IO.FileSystemInfo.LastAccessTimeUtc\n  - System.IO.FileSystemInfo.LastWriteTime\n  - System.IO.FileSystemInfo.LastWriteTimeUtc\n  - System.IO.FileSystemInfo.OriginalPath\n  - System.IO.FileSystemInfo.Refresh\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: DirectoryInfo(String)\n  nameWithType: DirectoryInfo.DirectoryInfo(String)\n  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class on the specified path.\n  remarks: \"This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses this constructor to create the specified directory and subdirectory, and demonstrates that a directory that contains subdirectories cannot be deleted.  \\n  \\n [!code-cs[DirInfo Ctor#1](~/add/codesnippet/csharp/m-system.io.directoryinf_18_1.cs)]\\n [!code-cpp[DirInfo Ctor#1](~/add/codesnippet/cpp/m-system.io.directoryinf_18_1.cpp)]\\n [!code-vb[DirInfo Ctor#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_18_1.vb)]\"\n  syntax:\n    content: public DirectoryInfo (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: A string specifying the path on which to create the <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref>.\n  overload: System.IO.DirectoryInfo.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> contains invalid characters such as \", &lt;, &gt;, or |.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.Create\n  id: Create\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: DirectoryInfo.Create()\n  fullName: System.IO.DirectoryInfo.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Creates a directory.\n  remarks: \"If the directory already exists, this method does nothing.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.  \\n  \\n [!code-cpp[DirInfo Create#1](~/add/codesnippet/cpp/m-system.io.directoryinf_11_1.cpp)]\\n [!code-cs[DirInfo Create#1](~/add/codesnippet/csharp/m-system.io.directoryinf_11_1.cs)]\\n [!code-vb[DirInfo Create#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_11_1.vb)]\"\n  syntax:\n    content: public void Create ();\n    parameters: []\n  overload: System.IO.DirectoryInfo.Create*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The directory cannot be created.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)\n  id: Create(System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Create(DirectorySecurity)\n  nameWithType: DirectoryInfo.Create(DirectorySecurity)\n  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Creates a directory using a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object.\n  remarks: \"Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  \\n  \\n If the directory already exists, this method does nothing.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);\n    parameters:\n    - id: directorySecurity\n      type: System.Security.AccessControl.DirectorySecurity\n      description: The access control to apply to the directory.\n  overload: System.IO.DirectoryInfo.Create*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The directory specified by <code>path</code> is read-only or is not empty.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The caller does not have the required permission.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Creating a directory with only the colon (:) character was attempted.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  id: CreateSubdirectory(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: CreateSubdirectory(String)\n  nameWithType: DirectoryInfo.CreateSubdirectory(String)\n  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.\n  remarks: \"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  \\n  \\n> [!NOTE]\\n>  Path names are limited to 248 characters.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates creating a subdirectory. In this example, the created directories are removed once created. Therefore, to test this sample, comment out the delete lines in the code.  \\n  \\n [!code-cpp[directoryinfocreatesub#1](~/add/codesnippet/cpp/m-system.io.directoryinf_9_1.cpp)]\\n [!code-cs[directoryinfocreatesub#1](~/add/codesnippet/csharp/m-system.io.directoryinf_9_1.cs)]\\n [!code-vb[directoryinfocreatesub#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_9_1.vb)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo CreateSubdirectory (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.\n    return:\n      type: System.IO.DirectoryInfo\n      description: The last directory specified in <code>path</code>.\n  overload: System.IO.DirectoryInfo.CreateSubdirectory*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> does not specify a valid file path or contains invalid <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> characters.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The subdirectory cannot be created.  \\n  \\n -or-  \\n  \\n A file or directory already has the name specified by <code>path</code>.\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have code access permission to create the directory.  \\n  \\n -or-  \\n  \\n The caller does not have code access permission to read the directory described by the returned <xref href=\\\"System.IO.DirectoryInfo\\\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\\\").\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  id: CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: CreateSubdirectory(String,DirectorySecurity)\n  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)\n  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\"></xref> class.\n  remarks: \"Any and all directories specified in `path` are created, unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  \\n  \\n> [!NOTE]\\n>  Path names are limited to 248 characters.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);\n    parameters:\n    - id: path\n      type: System.String\n      description: The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.\n    - id: directorySecurity\n      type: System.Security.AccessControl.DirectorySecurity\n      description: The security to apply.\n    return:\n      type: System.IO.DirectoryInfo\n      description: The last directory specified in <code>path</code>.\n  overload: System.IO.DirectoryInfo.CreateSubdirectory*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> does not specify a valid file path or contains invalid <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> characters.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The subdirectory cannot be created.  \\n  \\n -or-  \\n  \\n A file or directory already has the name specified by <code>path</code>.\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The caller does not have code access permission to create the directory.  \\n  \\n -or-  \\n  \\n The caller does not have code access permission to read the directory described by the returned <xref href=\\\"System.IO.DirectoryInfo\\\"></xref> object.  This can occur when the <code>path</code> parameter describes an existing directory.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> contains a colon character (:) that is not part of a drive label (\"C:\\\\\").\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.Delete\n  id: Delete\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Delete()\n  nameWithType: DirectoryInfo.Delete()\n  fullName: System.IO.DirectoryInfo.Delete()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Deletes this <xref href=\"System.IO.DirectoryInfo\"></xref> if it is empty.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - \"The following example throws an exception if you attempt to delete a directory that is not empty.  \\n  \\n [!code-cpp[DirInfo Delete1#1](~/add/codesnippet/cpp/m-system.io.directoryinf_4_1.cpp)]\\n [!code-cs[DirInfo Delete1#1](~/add/codesnippet/csharp/m-system.io.directoryinf_4_1.cs)]\\n [!code-vb[DirInfo Delete1#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_4_1.vb)]\"\n  syntax:\n    content: public override void Delete ();\n    parameters: []\n  overload: System.IO.DirectoryInfo.Delete*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The directory contains a read-only file.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The directory is not empty.  \\n  \\n -or-  \\n  \\n The directory is the application's current working directory.  \\n  \\n -or-  \\n  \\n There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md).\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.Delete(System.Boolean)\n  id: Delete(System.Boolean)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Delete(Boolean)\n  nameWithType: DirectoryInfo.Delete(Boolean)\n  fullName: System.IO.DirectoryInfo.Delete(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Deletes this instance of a <xref href=\"System.IO.DirectoryInfo\"></xref>, specifying whether to delete subdirectories and files.\n  remarks: \"If the `DirectoryInfo` has no files or subdirectories, this method deletes the `DirectoryInfo` even if `recursive` is `false`. Attempting to delete a `DirectoryInfo` that is not empty when `recursive` is `false` throws an <xref:System.IO.IOException>.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates deleting a directory. Because the directory is removed, first comment out the `Delete` line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.  \\n  \\n [!code-vb[directoryinfodelete#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_16_1.vb)]\\n [!code-cs[directoryinfodelete#1](~/add/codesnippet/csharp/m-system.io.directoryinf_16_1.cs)]\\n [!code-cpp[directoryinfodelete#1](~/add/codesnippet/cpp/m-system.io.directoryinf_16_1.cpp)]\"\n  syntax:\n    content: public void Delete (bool recursive);\n    parameters:\n    - id: recursive\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to delete this directory, its subdirectories, and all files; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.DirectoryInfo.Delete*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The directory contains a read-only file.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The directory described by this <xref href=\"System.IO.DirectoryInfo\"></xref> object does not exist or could not be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The directory is read-only.  \\n  \\n -or-  \\n  \\n The directory contains one or more files or subdirectories and <code>recursive</code> is <xref uid=\\\"langword_csharp_false\\\" name=\\\"false\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The directory is the application's current working directory.  \\n  \\n -or-  \\n  \\n There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md).\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateDirectories\n  id: EnumerateDirectories\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateDirectories()\n  nameWithType: DirectoryInfo.EnumerateDirectories()\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of directory information in the current directory.\n  remarks: \"The EnumerateDirectories and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \\n  \\n-   When you use EnumerateDirectories, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.\"\n  example:\n  - \"The following example enumerates the subdirectories under the C:\\\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \\n  \\n If you only need the names of the subdirectories, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%29> method.  \\n  \\n [!code-vb[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_8_1.vb)]\\n [!code-cs[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/csharp/m-system.io.directoryinf_8_1.cs)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: An enumerable collection of directories in the current directory.\n  overload: System.IO.DirectoryInfo.EnumerateDirectories*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  id: EnumerateDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateDirectories(String)\n  nameWithType: DirectoryInfo.EnumerateDirectories(String)\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of directory information that matches a specified search pattern.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: An enumerable collection of directories that matches <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.EnumerateDirectories*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  id: EnumerateDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateDirectories(String,SearchOption)\n  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.\"\n  example:\n  - \"The following example, starting from a specified directory, uses this method and the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size.  \\n  \\n [!code-cs[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/csharp/688c5354-9ee8-487c-ac88-_1.cs)]\\n [!code-vb[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/visualbasic/688c5354-9ee8-487c-ac88-_1.vb)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n      description: An enumerable collection of directories that matches <code>searchPattern</code> and <code>searchOption</code>.\n  overload: System.IO.DirectoryInfo.EnumerateDirectories*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateFiles\n  id: EnumerateFiles\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFiles()\n  nameWithType: DirectoryInfo.EnumerateFiles()\n  fullName: System.IO.DirectoryInfo.EnumerateFiles()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of file information in the current directory.\n  remarks: \"The EnumerateFiles and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use EnumerateFiles, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  example:\n  - \"The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \\n  \\n If you only need the names of the files, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateFiles%28System.String%29?displayProperty=fullName> method.  \\n  \\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directoryinf_2_1.cs)]\\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_1.vb)]  \\n  \\n The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_2.vb)]\\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_2_2.cs)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: An enumerable collection of the files in the current directory.\n  overload: System.IO.DirectoryInfo.EnumerateFiles*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  id: EnumerateFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFiles(String)\n  nameWithType: DirectoryInfo.EnumerateFiles(String)\n  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of file information that matches a search pattern.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  example:\n  - \"The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_1_1.vb)]\\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_1_1.cs)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: An enumerable collection of files that matches <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.EnumerateFiles*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  id: EnumerateFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFiles(String,SearchOption)\n  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  example:\n  - \"The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_7_1.vb)]\\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_7_1.cs)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n      description: An enumerable collection of files that matches <code>searchPattern</code> and <code>searchOption</code>.\n  overload: System.IO.DirectoryInfo.EnumerateFiles*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  id: EnumerateFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFileSystemInfos()\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of file system information in the current directory.\n  remarks: \"The EnumerateFileSystemInfos and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \\n  \\n-   When you use EnumerateFileSystemInfos, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, EnumerateFileSystemInfos can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: An enumerable collection of file system information in the current directory.\n  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  id: EnumerateFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFileSystemInfos(String)\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of file system information that matches a specified search pattern.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: An enumerable collection of file system information objects that matches <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: EnumerateFileSystemInfos(String,SearchOption)\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n      description: An enumerable collection of file system information objects that matches <code>searchPattern</code> and <code>searchOption</code>.\n  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.Exists\n  id: Exists\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Exists\n  nameWithType: DirectoryInfo.Exists\n  fullName: System.IO.DirectoryInfo.Exists\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets a value indicating whether the directory exists.\n  remarks: The Exists property returns `false` if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.\n  example:\n  - \"The following example demonstrates a use of the `Exists` property in the context of copying a source directory to a target directory.  \\n  \\n [!code-cpp[DirectoryInfo Usage Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_0_1.cpp)]\\n [!code-cs[DirectoryInfo Usage Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_0_1.cs)]\\n [!code-vb[DirectoryInfo Usage Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_0_1.vb)]\"\n  syntax:\n    content: public override bool Exists { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the directory exists; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.DirectoryInfo.Exists*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetAccessControl\n  id: GetAccessControl\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetAccessControl()\n  nameWithType: DirectoryInfo.GetAccessControl()\n  fullName: System.IO.DirectoryInfo.GetAccessControl()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.\n  remarks: \"Calling this method overload is equivalent to calling the <xref:System.IO.Directory.GetAccessControl%2A> method overload and specifying the access control sections <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic).  \\n  \\n Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.  \\n  \\n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses the GetAccessControl and <xref:System.IO.DirectoryInfo.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a directory.  \\n  \\n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directoryinf_14_1.cpp)]\\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directoryinf_14_1.cs)]\\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_14_1.vb)]\"\n  syntax:\n    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl ();\n    parameters: []\n    return:\n      type: System.Security.AccessControl.DirectorySecurity\n      description: A <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the access control rules for the directory.\n  overload: System.IO.DirectoryInfo.GetAccessControl*\n  exceptions:\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The directory could not be found or modified.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"The directory is read-only.  \\n  \\n -or-  \\n  \\n This operation is not supported on the current platform.  \\n  \\n -or-  \\n  \\n The caller does not have the required permission.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while opening the directory.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  id: GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetAccessControl(AccessControlSections)\n  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)\n  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.\n  remarks: \"Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.  \\n  \\n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);\n    parameters:\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to receive.\n    return:\n      type: System.Security.AccessControl.DirectorySecurity\n      description: \"A <xref href=\\\"System.Security.AccessControl.DirectorySecurity\\\"></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter.  \\n  \\n Exceptions  \\n  \\n <table><thead><tr><th> Exception type  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td><xref href=\\\"System.SystemException\\\"></xref></td><td> The directory could not be found or modified.  \\n  \\n </td></tr><tr><td> <xref:System.UnauthorizedAccessException>  \\n  \\n </td><td> The current process does not have access to open the directory.  \\n  \\n </td></tr><tr><td> <xref:System.IO.IOException>  \\n  \\n </td><td> An I/O error occurred while opening the directory.  \\n  \\n </td></tr><tr><td> <xref:System.PlatformNotSupportedException>  \\n  \\n </td><td> The current operating system is not Microsoft Windows 2000 or later.  \\n  \\n </td></tr><tr><td> <xref:System.UnauthorizedAccessException>  \\n  \\n </td><td> The directory is read-only.  \\n  \\n -or-  \\n  \\n This operation is not supported on the current platform.  \\n  \\n -or-  \\n  \\n The caller does not have the required permission.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.IO.DirectoryInfo.GetAccessControl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetDirectories\n  id: GetDirectories\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetDirectories()\n  nameWithType: DirectoryInfo.GetDirectories()\n  fullName: System.IO.DirectoryInfo.GetDirectories()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns the subdirectories of the current directory.\n  remarks: \"If there are no subdirectories, this method returns an empty array. This method is not recursive.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example retrieves all the directories in the root directory and displays the directory names.  \\n  \\n [!code-cs[directoryinfogetdirectories#1](~/add/codesnippet/csharp/m-system.io.directoryinf_6_1.cs)]\\n [!code-cpp[directoryinfogetdirectories#1](~/add/codesnippet/cpp/m-system.io.directoryinf_6_1.cpp)]\\n [!code-vb[directoryinfogetdirectories#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_6_1.vb)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo[] GetDirectories ();\n    parameters: []\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: An array of <xref href=\"System.IO.DirectoryInfo\"></xref> objects.\n  overload: System.IO.DirectoryInfo.GetDirectories*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\"></xref> object is invalid, such as being on an unmapped drive.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String)\n  id: GetDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetDirectories(String)\n  nameWithType: DirectoryInfo.GetDirectories(String)\n  fullName: System.IO.DirectoryInfo.GetDirectories(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example counts the directories in a path that contain the specified letter.  \\n  \\n [!code-cpp[DirInfo GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directoryinf_10_1.cpp)]\\n [!code-cs[DirInfo GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_10_1.cs)]\\n [!code-vb[DirInfo GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_10_1.vb)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: An array of type <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> matching <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.GetDirectories*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  id: GetDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetDirectories(String,SearchOption)\n  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\"></xref> matching the given search criteria and using a value to determine whether to search subdirectories.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n If there are no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example lists all of the directories and files that begin with the letter \\\"c\\\" in \\\"c:\\\\\\\\\\\".  \\n  \\n [!code-cpp[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/cpp/m-system.io.directoryinf_0_1.cpp)]\\n [!code-cs[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/csharp/m-system.io.directoryinf_0_1.cs)]\\n [!code-vb[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/visualbasic/m-system.io.directoryinf_0_1.vb)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.\n    return:\n      type: System.IO.DirectoryInfo[]\n      description: An array of type <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> matching <code>searchPattern</code>.\n  overload: System.IO.DirectoryInfo.GetDirectories*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path encapsulated in the <xref uid=\"langword_csharp_DirectoryInfo\" name=\"DirectoryInfo\" href=\"\"></xref> object is invalid (for example, it is on an unmapped drive).\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetFiles\n  id: GetFiles\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFiles()\n  nameWithType: DirectoryInfo.GetFiles()\n  fullName: System.IO.DirectoryInfo.GetFiles()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns a file list from the current directory.\n  remarks: \"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and GetFiles methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use GetFiles, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>\"\n  example:\n  - \"The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_5_1.cs)]\\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_5_1.vb)]\"\n  syntax:\n    content: public System.IO.FileInfo[] GetFiles ();\n    parameters: []\n    return:\n      type: System.IO.FileInfo[]\n      description: An array of type <xref href=\"System.IO.FileInfo\"></xref>.\n  overload: System.IO.DirectoryInfo.GetFiles*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path is invalid, such as being on an unmapped drive.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetFiles(System.String)\n  id: GetFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFiles(String)\n  nameWithType: DirectoryInfo.GetFiles(String)\n  fullName: System.IO.DirectoryInfo.GetFiles(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns a file list from the current directory matching the given search pattern.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n The following wildcard specifiers are permitted in the `searchPattern` parameter.  \\n  \\n|Wildcard character|Description|  \\n|------------------------|-----------------|  \\n|*|Zero or more characters.|  \\n|?|Exactly zero or one character.|  \\n  \\n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \\n  \\n Wildcards are permitted. For example, the `searchPattern` string \\\"*.txt\\\" searches for all file names having an extension of \\\"txt\\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all file names beginning with the letter \\\"s\\\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n> [!NOTE]\\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \\\"*.txt\\\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \\\"file1.txt\\\" and \\\"file1.txtother\\\", a search pattern of \\\"file?.txt\\\" returns only the first file, while a search pattern of \\\"file\\\\*.txt\\\" returns both files.  \\n  \\n> [!NOTE]\\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \\\"*1\\\\*.txt\\\" may return unexpected file names. For example, using a search pattern of \\\"\\\\*1\\\\*.txt\\\" will return \\\"longfilename.txt\\\" because the equivalent 8.3 file name format would be \\\"longf~1.txt\\\".  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileInfo.Length%2A>\"\n  example:\n  - \"The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_12_1.cs)]\\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_12_1.vb)]\"\n  syntax:\n    content: public System.IO.FileInfo[] GetFiles (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    return:\n      type: System.IO.FileInfo[]\n      description: An array of type <xref href=\"System.IO.FileInfo\"></xref>.\n  overload: System.IO.DirectoryInfo.GetFiles*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  id: GetFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFiles(String,SearchOption)\n  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.\n  remarks: \"The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \\n  \\n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \\n  \\n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \\n  \\n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard character|Description|  \\n|------------------------|-----------------|  \\n|* (asterisk)|Zero or more characters.|  \\n|? (question mark)|Exactly zero or one character.|  \\n  \\n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \\n  \\n Wildcards are permitted. For example, the `searchPattern` string \\\"*.txt\\\" searches for all file names having an extension of \\\"txt\\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all file names beginning with the letter \\\"s\\\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n> [!NOTE]\\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \\\"*.txt\\\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \\\"file1.txt\\\" and \\\"file1.txtother\\\", a search pattern of \\\"file?.txt\\\" returns only the first file, while a search pattern of \\\"file\\\\*.txt\\\" returns both files.  \\n  \\n The following list shows the behavior of different lengths for the `searchPattern` parameter:  \\n  \\n-   \\\"*.abc\\\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.  \\n  \\n-   \\\"*.abcd\\\" returns only files having an extension of.abcd.  \\n  \\n-   \\\"*.abcde\\\" returns only files having an extension of.abcde.  \\n  \\n-   \\\"*.abcdef\\\" returns only files having an extension of.abcdef.  \\n  \\n> [!NOTE]\\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \\\"*1\\\\*.txt\\\" may return unexpected file names. For example, using a search pattern of \\\"\\\\*1\\\\*.txt\\\" will return \\\"longfilename.txt\\\" because the equivalent 8.3 file name format would be \\\"longf~1.txt\\\".  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \\n  \\n1.  <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n2.  <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n3.  <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n4.  <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n5.  <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n6.  <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n7.  <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \\n  \\n8.  <xref:System.IO.FileInfo.Length%2A>\"\n  example:\n  - \"The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \\n  \\n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_13_1.cs)]\\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_13_1.vb)]\"\n  syntax:\n    content: public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.\n    return:\n      type: System.IO.FileInfo[]\n      description: An array of type <xref href=\"System.IO.FileInfo\"></xref>.\n  overload: System.IO.DirectoryInfo.GetFiles*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos\n  id: GetFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFileSystemInfos()\n  nameWithType: DirectoryInfo.GetFileSystemInfos()\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries representing all the files and subdirectories in a directory.\n  remarks: \"If there are no files or directories in the <xref:System.IO.DirectoryInfo>, this method returns an empty array. This method is not recursive.  \\n  \\n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example counts the files and directories under the specified directory.  \\n  \\n [!code-vb[FSizeSort#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_3_1.vb)]\\n [!code-cs[FSizeSort#1](~/add/codesnippet/csharp/m-system.io.directoryinf_3_1.cs)]\"\n  syntax:\n    content: public System.IO.FileSystemInfo[] GetFileSystemInfos ();\n    parameters: []\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: An array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> entries.\n  overload: System.IO.DirectoryInfo.GetFileSystemInfos*\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The path is invalid (for example, it is on an unmapped drive).\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  id: GetFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFileSystemInfos(String)\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String)\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Retrieves an array of strongly typed <xref href=\"System.IO.FileSystemInfo\"></xref> objects representing the files and subdirectories that match the specified search criteria.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n This method is not recursive.  \\n  \\n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \\n  \\n Wild cards are permitted. For example, the `searchPattern` string \\\"*t\\\" searches for all directory names in `path` ending with the letter \\\"t\\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all directory names in `path` beginning with the letter \\\"s\\\".  \\n  \\n The string \\\"..\\\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \\\"a..b\\\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  example:\n  - \"The following example counts the files and directories that match the specified search pattern.  \\n  \\n [!code-cs[DirInfo GetFileSysInfos2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_15_1.cs)]\\n [!code-vb[DirInfo GetFileSysInfos2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_15_1.vb)]\"\n  syntax:\n    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: An array of strongly typed <xref uid=\"langword_csharp_FileSystemInfo\" name=\"FileSystemInfo\" href=\"\"></xref> objects matching the search criteria.\n  overload: System.IO.DirectoryInfo.GetFileSystemInfos*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  id: GetFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: GetFileSystemInfos(String,SearchOption)\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Retrieves an array of <xref href=\"System.IO.FileSystemInfo\"></xref> objects that represent the files and subdirectories matching the specified search criteria.\n  remarks: \"`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \\n  \\n|Wildcard specifier|Matches|  \\n|------------------------|-------------|  \\n|* (asterisk)|Zero or more characters in that position.|  \\n|? (question mark)|Zero or one character in that position.|  \\n  \\n Characters other than the wildcard are literal characters. For example, the  string \\\"*t\\\" searches for all names in  ending with the letter \\\"t\\\". \\\". The `searchPattern` string \\\"s\\\\*\\\" searches for all names in `path` beginning with the letter \\\"s\\\".  \\n  \\n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \\n  \\n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \\n  \\n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \\n  \\n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>\"\n  syntax:\n    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);\n    parameters:\n    - id: searchPattern\n      type: System.String\n      description: The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"\\*\", which returns all files.\n    - id: searchOption\n      type: System.IO.SearchOption\n      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption\"></xref>.\n    return:\n      type: System.IO.FileSystemInfo[]\n      description: An array of file system entries that match the search criteria.\n  overload: System.IO.DirectoryInfo.GetFileSystemInfos*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>searchPattern </code>contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>searchPattern</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>searchOption</code> is not a valid <xref href=\"System.IO.SearchOption\"></xref> value.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid (for example, it is on an unmapped drive).\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.MoveTo(System.String)\n  id: MoveTo(System.String)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: MoveTo(String)\n  nameWithType: DirectoryInfo.MoveTo(String)\n  fullName: System.IO.DirectoryInfo.MoveTo(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Moves a <xref href=\"System.IO.DirectoryInfo\"></xref> instance and its contents to a new path.\n  remarks: \"This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\\\mydir to c:\\\\public, and c:\\\\public already exists. You must specify \\\"c:\\\\\\\\\\\\public\\\\\\\\\\\\mydir\\\" as the `destDirName` parameter, or specify a new directory name such as \\\"c:\\\\\\\\\\\\newdir\\\".  \\n  \\n This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates moving a directory.  \\n  \\n [!code-cs[directoryinfomoveto#1](~/add/codesnippet/csharp/m-system.io.directoryinf_17_1.cs)]\\n [!code-cpp[directoryinfomoveto#1](~/add/codesnippet/cpp/m-system.io.directoryinf_17_1.cpp)]\\n [!code-vb[directoryinfomoveto#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_17_1.vb)]\"\n  syntax:\n    content: public void MoveTo (string destDirName);\n    parameters:\n    - id: destDirName\n      type: System.String\n      description: The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.\n  overload: System.IO.DirectoryInfo.MoveTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destDirName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>destDirName</code> is an empty string (''\").\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An attempt was made to move a directory to a different volume.  \\n  \\n -or-  \\n  \\n <code>destDirName</code> already exists.  \\n  \\n -or-  \\n  \\n You are not authorized to access this path.  \\n  \\n -or-  \\n  \\n The directory being moved and the destination directory have the same name.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The destination directory cannot be found.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.Name\n  id: Name\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Name\n  nameWithType: DirectoryInfo.Name\n  fullName: System.IO.DirectoryInfo.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets the name of this <xref href=\"System.IO.DirectoryInfo\"></xref> instance.\n  remarks: \"This Name property returns only the name of the directory, such as \\\"Bin\\\". To get the full path, such as \\\"c:\\\\public\\\\Bin\\\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.  \\n  \\n The Name property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example displays the name of the current `DirectoryInfo` instance only.  \\n  \\n [!code-cs[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_3_1.cs)]\\n [!code-vb[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_3_1.vb)]\\n [!code-cpp[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_3_1.cpp)]\"\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: The directory name.\n  overload: System.IO.DirectoryInfo.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.Parent\n  id: Parent\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Parent\n  nameWithType: DirectoryInfo.Parent\n  fullName: System.IO.DirectoryInfo.Parent\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets the parent directory of a specified subdirectory.\n  remarks: For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - \"The following example demonstrates referring to the parent directory of a specified directory.  \\n  \\n [!code-cs[directoryinfoparent#1](~/add/codesnippet/csharp/p-system.io.directoryinf_1_1.cs)]\\n [!code-vb[directoryinfoparent#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_1_1.vb)]\\n [!code-cpp[directoryinfoparent#1](~/add/codesnippet/cpp/p-system.io.directoryinf_1_1.cpp)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo Parent { get; }\n    return:\n      type: System.IO.DirectoryInfo\n      description: The parent directory, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the path is null or if the file path denotes a root (such as \"\\\\\", \"C:\", or * \"\\\\\\server\\share\").\n  overload: System.IO.DirectoryInfo.Parent*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.Root\n  id: Root\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: Root\n  nameWithType: DirectoryInfo.Root\n  fullName: System.IO.DirectoryInfo.Root\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets the root portion of the directory.\n  remarks: ''\n  example:\n  - \"The following example displays root locations for specified directories.  \\n  \\n [!code-cs[directoryinforoot#2](~/add/codesnippet/csharp/p-system.io.directoryinf_2_1.cs)]\\n [!code-vb[directoryinforoot#2](~/add/codesnippet/visualbasic/p-system.io.directoryinf_2_1.vb)]\"\n  syntax:\n    content: public System.IO.DirectoryInfo Root { get; }\n    return:\n      type: System.IO.DirectoryInfo\n      description: An object that represents the root of the directory.\n  overload: System.IO.DirectoryInfo.Root*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  id: SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: SetAccessControl(DirectorySecurity)\n  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)\n  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Applies access control list (ACL) entries described by a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object to the directory described by the current <xref href=\"System.IO.DirectoryInfo\"></xref> object.\n  remarks: \"An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The SetAccessControl method applies ACL entries to a file that represents the noninherited ACL list.  \\n  \\n> [!CAUTION]\\n>  The ACL specified for `directorySecurity` replaces the existing ACL for the directory. To add permissions for a new user, use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to obtain the existing ACL, and modify it.  \\n  \\n The SetAccessControl method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation.  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file.  \\n  \\n To copy ACL information from one file to another:  \\n  \\n1.  Use the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.DirectorySecurity> object from the source file.  \\n  \\n2.  Create a new <xref:System.Security.AccessControl.DirectorySecurity> object for the destination file.  \\n  \\n3.  Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.DirectorySecurity> object to retrieve the ACL information.  \\n  \\n4.  Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.DirectorySecurity> object.  \\n  \\n5.  Set the destination <xref:System.Security.AccessControl.DirectorySecurity> object to the destination file using the SetAccessControl method.\"\n  example:\n  - \"The following example uses the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a directory.  \\n  \\n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/d8d660a0-50f5-42be-9101-_1.cpp)]\\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/d8d660a0-50f5-42be-9101-_1.cs)]\\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/d8d660a0-50f5-42be-9101-_1.vb)]\"\n  syntax:\n    content: public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);\n    parameters:\n    - id: directorySecurity\n      type: System.Security.AccessControl.DirectorySecurity\n      description: An object that describes an ACL entry to apply to the directory described by the `path` parameter.\n  overload: System.IO.DirectoryInfo.SetAccessControl*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>directorySecurity</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The file could not be found or modified.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The current process does not have access to open the file.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  platform:\n  - net462\n- uid: System.IO.DirectoryInfo.ToString\n  id: ToString\n  parent: System.IO.DirectoryInfo\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: DirectoryInfo.ToString()\n  fullName: System.IO.DirectoryInfo.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Returns the original path that was passed by the user.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Returns the original path that was passed by the user.\n  overload: System.IO.DirectoryInfo.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IO.FileSystemInfo\n  isExternal: false\n  name: System.IO.FileSystemInfo\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.IO.PathTooLongException\n  isExternal: true\n  name: System.IO.PathTooLongException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.UnauthorizedAccessException\n  isExternal: true\n  name: System.UnauthorizedAccessException\n- uid: System.IO.DirectoryNotFoundException\n  isExternal: true\n  name: System.IO.DirectoryNotFoundException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.IO.DirectoryInfo.#ctor(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: DirectoryInfo(String)\n  nameWithType: DirectoryInfo.DirectoryInfo(String)\n  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.DirectoryInfo.Create\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Create()\n  nameWithType: DirectoryInfo.Create()\n  fullName: System.IO.DirectoryInfo.Create()\n- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Create(DirectorySecurity)\n  nameWithType: DirectoryInfo.Create(DirectorySecurity)\n  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)\n- uid: System.Security.AccessControl.DirectorySecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: DirectorySecurity\n  nameWithType: DirectorySecurity\n  fullName: System.Security.AccessControl.DirectorySecurity\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: CreateSubdirectory(String)\n  nameWithType: DirectoryInfo.CreateSubdirectory(String)\n  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)\n- uid: System.IO.DirectoryInfo\n  parent: System.IO\n  isExternal: false\n  name: DirectoryInfo\n  nameWithType: DirectoryInfo\n  fullName: System.IO.DirectoryInfo\n- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: CreateSubdirectory(String,DirectorySecurity)\n  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)\n  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)\n- uid: System.IO.DirectoryInfo.Delete\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Delete()\n  nameWithType: DirectoryInfo.Delete()\n  fullName: System.IO.DirectoryInfo.Delete()\n- uid: System.IO.DirectoryInfo.Delete(System.Boolean)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Delete(Boolean)\n  nameWithType: DirectoryInfo.Delete(Boolean)\n  fullName: System.IO.DirectoryInfo.Delete(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.DirectoryInfo.EnumerateDirectories\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateDirectories()\n  nameWithType: DirectoryInfo.EnumerateDirectories()\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories()\n- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<DirectoryInfo>\n  nameWithType: IEnumerable<DirectoryInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.IO.DirectoryInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.DirectoryInfo\n    name: DirectoryInfo\n    nameWithType: DirectoryInfo\n    fullName: DirectoryInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateDirectories(String)\n  nameWithType: DirectoryInfo.EnumerateDirectories(String)\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)\n- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateDirectories(String,SearchOption)\n  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)\n- uid: System.IO.SearchOption\n  parent: System.IO\n  isExternal: false\n  name: SearchOption\n  nameWithType: SearchOption\n  fullName: System.IO.SearchOption\n- uid: System.IO.DirectoryInfo.EnumerateFiles\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFiles()\n  nameWithType: DirectoryInfo.EnumerateFiles()\n  fullName: System.IO.DirectoryInfo.EnumerateFiles()\n- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<FileInfo>\n  nameWithType: IEnumerable<FileInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.IO.FileInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.FileInfo\n    name: FileInfo\n    nameWithType: FileInfo\n    fullName: FileInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFiles(String)\n  nameWithType: DirectoryInfo.EnumerateFiles(String)\n  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)\n- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFiles(String,SearchOption)\n  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFileSystemInfos()\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()\n- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<FileSystemInfo>\n  nameWithType: IEnumerable<FileSystemInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.IO.FileSystemInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.FileSystemInfo\n    name: FileSystemInfo\n    nameWithType: FileSystemInfo\n    fullName: FileSystemInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFileSystemInfos(String)\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFileSystemInfos(String,SearchOption)\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)\n- uid: System.IO.DirectoryInfo.Exists\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Exists\n  nameWithType: DirectoryInfo.Exists\n  fullName: System.IO.DirectoryInfo.Exists\n- uid: System.IO.DirectoryInfo.GetAccessControl\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetAccessControl()\n  nameWithType: DirectoryInfo.GetAccessControl()\n  fullName: System.IO.DirectoryInfo.GetAccessControl()\n- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetAccessControl(AccessControlSections)\n  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)\n  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)\n- uid: System.Security.AccessControl.AccessControlSections\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlSections\n  nameWithType: AccessControlSections\n  fullName: System.Security.AccessControl.AccessControlSections\n- uid: System.IO.DirectoryInfo.GetDirectories\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetDirectories()\n  nameWithType: DirectoryInfo.GetDirectories()\n  fullName: System.IO.DirectoryInfo.GetDirectories()\n- uid: System.IO.DirectoryInfo[]\n  parent: System.IO\n  isExternal: false\n  name: DirectoryInfo\n  nameWithType: DirectoryInfo\n  fullName: System.IO.DirectoryInfo[]\n  spec.csharp:\n  - uid: System.IO.DirectoryInfo\n    name: DirectoryInfo\n    nameWithType: DirectoryInfo\n    fullName: DirectoryInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetDirectories(String)\n  nameWithType: DirectoryInfo.GetDirectories(String)\n  fullName: System.IO.DirectoryInfo.GetDirectories(String)\n- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetDirectories(String,SearchOption)\n  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)\n- uid: System.IO.DirectoryInfo.GetFiles\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFiles()\n  nameWithType: DirectoryInfo.GetFiles()\n  fullName: System.IO.DirectoryInfo.GetFiles()\n- uid: System.IO.FileInfo[]\n  parent: System.IO\n  isExternal: false\n  name: FileInfo\n  nameWithType: FileInfo\n  fullName: System.IO.FileInfo[]\n  spec.csharp:\n  - uid: System.IO.FileInfo\n    name: FileInfo\n    nameWithType: FileInfo\n    fullName: FileInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.DirectoryInfo.GetFiles(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFiles(String)\n  nameWithType: DirectoryInfo.GetFiles(String)\n  fullName: System.IO.DirectoryInfo.GetFiles(String)\n- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFiles(String,SearchOption)\n  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFileSystemInfos()\n  nameWithType: DirectoryInfo.GetFileSystemInfos()\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()\n- uid: System.IO.FileSystemInfo[]\n  parent: System.IO\n  isExternal: false\n  name: FileSystemInfo\n  nameWithType: FileSystemInfo\n  fullName: System.IO.FileSystemInfo[]\n  spec.csharp:\n  - uid: System.IO.FileSystemInfo\n    name: FileSystemInfo\n    nameWithType: FileSystemInfo\n    fullName: FileSystemInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFileSystemInfos(String)\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String)\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFileSystemInfos(String,SearchOption)\n  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)\n  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)\n- uid: System.IO.DirectoryInfo.MoveTo(System.String)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: MoveTo(String)\n  nameWithType: DirectoryInfo.MoveTo(String)\n  fullName: System.IO.DirectoryInfo.MoveTo(String)\n- uid: System.IO.DirectoryInfo.Name\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Name\n  nameWithType: DirectoryInfo.Name\n  fullName: System.IO.DirectoryInfo.Name\n- uid: System.IO.DirectoryInfo.Parent\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Parent\n  nameWithType: DirectoryInfo.Parent\n  fullName: System.IO.DirectoryInfo.Parent\n- uid: System.IO.DirectoryInfo.Root\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Root\n  nameWithType: DirectoryInfo.Root\n  fullName: System.IO.DirectoryInfo.Root\n- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: SetAccessControl(DirectorySecurity)\n  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)\n  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)\n- uid: System.IO.DirectoryInfo.ToString\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: ToString()\n  nameWithType: DirectoryInfo.ToString()\n  fullName: System.IO.DirectoryInfo.ToString()\n- uid: System.IO.DirectoryInfo.#ctor*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: DirectoryInfo\n  nameWithType: DirectoryInfo.DirectoryInfo\n- uid: System.IO.DirectoryInfo.Create*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Create\n  nameWithType: DirectoryInfo.Create\n- uid: System.IO.DirectoryInfo.CreateSubdirectory*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: CreateSubdirectory\n  nameWithType: DirectoryInfo.CreateSubdirectory\n- uid: System.IO.DirectoryInfo.Delete*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Delete\n  nameWithType: DirectoryInfo.Delete\n- uid: System.IO.DirectoryInfo.EnumerateDirectories*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateDirectories\n  nameWithType: DirectoryInfo.EnumerateDirectories\n- uid: System.IO.DirectoryInfo.EnumerateFiles*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFiles\n  nameWithType: DirectoryInfo.EnumerateFiles\n- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: EnumerateFileSystemInfos\n  nameWithType: DirectoryInfo.EnumerateFileSystemInfos\n- uid: System.IO.DirectoryInfo.Exists*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Exists\n  nameWithType: DirectoryInfo.Exists\n- uid: System.IO.DirectoryInfo.GetAccessControl*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetAccessControl\n  nameWithType: DirectoryInfo.GetAccessControl\n- uid: System.IO.DirectoryInfo.GetDirectories*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetDirectories\n  nameWithType: DirectoryInfo.GetDirectories\n- uid: System.IO.DirectoryInfo.GetFiles*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFiles\n  nameWithType: DirectoryInfo.GetFiles\n- uid: System.IO.DirectoryInfo.GetFileSystemInfos*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: GetFileSystemInfos\n  nameWithType: DirectoryInfo.GetFileSystemInfos\n- uid: System.IO.DirectoryInfo.MoveTo*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: MoveTo\n  nameWithType: DirectoryInfo.MoveTo\n- uid: System.IO.DirectoryInfo.Name*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Name\n  nameWithType: DirectoryInfo.Name\n- uid: System.IO.DirectoryInfo.Parent*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Parent\n  nameWithType: DirectoryInfo.Parent\n- uid: System.IO.DirectoryInfo.Root*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: Root\n  nameWithType: DirectoryInfo.Root\n- uid: System.IO.DirectoryInfo.SetAccessControl*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: SetAccessControl\n  nameWithType: DirectoryInfo.SetAccessControl\n- uid: System.IO.DirectoryInfo.ToString*\n  parent: System.IO.DirectoryInfo\n  isExternal: false\n  name: ToString\n  nameWithType: DirectoryInfo.ToString\n"}