{"nodes":[{"pos":[467,521],"content":"Describes the direction of the data flow in a binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the direction of the data flow in a binding.","pos":[0,54]}]},{"pos":[948,1594],"content":"Uses the default &lt;xref:System.Windows.Data.Binding.Mode<bpt id=\"p1\">*</bpt>&gt; value of the binding target. The default value varies for each dependency property. In general, user-editable control properties, such as those of text boxes and check boxes, default to two-way bindings, whereas most other properties default to one-way bindings. A programmatic way to determine whether a dependency property binds one-way or two-way by default is to get the property metadata of the property using &lt;xref:System.Windows.DependencyProperty.GetMetadata<ept id=\"p1\">*</ept>&gt; and then check the Boolean value of the &lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*&gt; property.","needQuote":true,"needEscape":true,"source":"Uses the default <xref:System.Windows.Data.Binding.Mode*> value of the binding target. The default value varies for each dependency property. In general, user-editable control properties, such as those of text boxes and check boxes, default to two-way bindings, whereas most other properties default to one-way bindings. A programmatic way to determine whether a dependency property binds one-way or two-way by default is to get the property metadata of the property using <xref:System.Windows.DependencyProperty.GetMetadata*> and then check the Boolean value of the <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*> property."},{"pos":[1701,1713],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2079,2624],"content":"Updates the binding target when the application starts or when the data context changes. This type of binding is appropriate if you are using data where either a snapshot of the current state is appropriate to use or the data is truly static. This type of binding is also useful if you want to initialize your target property with some value from a source property and the data context is not known in advance. This is essentially a simpler form of OneWay binding that provides better performance in cases where the source value does not change.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the binding target when the application starts or when the data context changes. This type of binding is appropriate if you are using data where either a snapshot of the current state is appropriate to use or the data is truly static. This type of binding is also useful if you want to initialize your target property with some value from a source property and the data context is not known in advance. This is essentially a simpler form of OneWay binding that provides better performance in cases where the source value does not change.","pos":[0,545],"nodes":[{"content":"Updates the binding target when the application starts or when the data context changes.","pos":[0,88]},{"content":"This type of binding is appropriate if you are using data where either a snapshot of the current state is appropriate to use or the data is truly static.","pos":[89,242]},{"content":"This type of binding is also useful if you want to initialize your target property with some value from a source property and the data context is not known in advance.","pos":[243,410]},{"content":"This is essentially a simpler form of OneWay binding that provides better performance in cases where the source value does not change.","pos":[411,545]}]}]},{"pos":[2731,2743],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3104,3622],"content":"Updates the binding target (target) property when the binding source (source) changes. This type of binding is appropriate if the control being bound is implicitly read-only. For instance, you may bind to a source such as a stock ticker. Or perhaps your target property has no control interface provided for making changes, such as a data-bound background color of a table. If there is no need to monitor the changes of the target property, using the OneWay binding mode avoids the overhead of the TwoWay binding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the binding target (target) property when the binding source (source) changes. This type of binding is appropriate if the control being bound is implicitly read-only. For instance, you may bind to a source such as a stock ticker. Or perhaps your target property has no control interface provided for making changes, such as a data-bound background color of a table. If there is no need to monitor the changes of the target property, using the OneWay binding mode avoids the overhead of the TwoWay binding mode.","pos":[0,518],"nodes":[{"content":"Updates the binding target (target) property when the binding source (source) changes.","pos":[0,86]},{"content":"This type of binding is appropriate if the control being bound is implicitly read-only.","pos":[87,174]},{"content":"For instance, you may bind to a source such as a stock ticker.","pos":[175,237]},{"content":"Or perhaps your target property has no control interface provided for making changes, such as a data-bound background color of a table.","pos":[238,373]},{"content":"If there is no need to monitor the changes of the target property, using the OneWay binding mode avoids the overhead of the TwoWay binding mode.","pos":[374,518]}]}]},{"pos":[3728,3740],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4141,4202],"content":"Updates the source property when the target property changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the source property when the target property changes.","pos":[0,61]}]},{"pos":[4316,4328],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4689,4947],"content":"Causes changes to either the source property or the target property to automatically update the other. This type of binding is appropriate for editable forms or other fully-interactive [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] scenarios.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes changes to either the source property or the target property to automatically update the other.","pos":[0,102]},{"content":"This type of binding is appropriate for editable forms or other fully-interactive <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> scenarios.","pos":[103,258],"source":" This type of binding is appropriate for editable forms or other fully-interactive [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] scenarios."}]},{"pos":[5053,5065],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Data.BindingMode\n  id: BindingMode\n  children:\n  - System.Windows.Data.BindingMode.Default\n  - System.Windows.Data.BindingMode.OneTime\n  - System.Windows.Data.BindingMode.OneWay\n  - System.Windows.Data.BindingMode.OneWayToSource\n  - System.Windows.Data.BindingMode.TwoWay\n  langs:\n  - csharp\n  name: BindingMode\n  nameWithType: BindingMode\n  fullName: System.Windows.Data.BindingMode\n  type: Enum\n  summary: Describes the direction of the data flow in a binding.\n  syntax:\n    content: public enum BindingMode\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingMode.Default\n  id: Default\n  parent: System.Windows.Data.BindingMode\n  langs:\n  - csharp\n  name: Default\n  nameWithType: BindingMode.Default\n  fullName: System.Windows.Data.BindingMode.Default\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Uses the default <xref:System.Windows.Data.Binding.Mode*> value of the binding target. The default value varies for each dependency property. In general, user-editable control properties, such as those of text boxes and check boxes, default to two-way bindings, whereas most other properties default to one-way bindings. A programmatic way to determine whether a dependency property binds one-way or two-way by default is to get the property metadata of the property using <xref:System.Windows.DependencyProperty.GetMetadata*> and then check the Boolean value of the <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*> property.\n  syntax:\n    content: Default\n    return:\n      type: System.Windows.Data.BindingMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingMode.OneTime\n  id: OneTime\n  parent: System.Windows.Data.BindingMode\n  langs:\n  - csharp\n  name: OneTime\n  nameWithType: BindingMode.OneTime\n  fullName: System.Windows.Data.BindingMode.OneTime\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Updates the binding target when the application starts or when the data context changes. This type of binding is appropriate if you are using data where either a snapshot of the current state is appropriate to use or the data is truly static. This type of binding is also useful if you want to initialize your target property with some value from a source property and the data context is not known in advance. This is essentially a simpler form of OneWay binding that provides better performance in cases where the source value does not change.\n  syntax:\n    content: OneTime\n    return:\n      type: System.Windows.Data.BindingMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingMode.OneWay\n  id: OneWay\n  parent: System.Windows.Data.BindingMode\n  langs:\n  - csharp\n  name: OneWay\n  nameWithType: BindingMode.OneWay\n  fullName: System.Windows.Data.BindingMode.OneWay\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Updates the binding target (target) property when the binding source (source) changes. This type of binding is appropriate if the control being bound is implicitly read-only. For instance, you may bind to a source such as a stock ticker. Or perhaps your target property has no control interface provided for making changes, such as a data-bound background color of a table. If there is no need to monitor the changes of the target property, using the OneWay binding mode avoids the overhead of the TwoWay binding mode.\n  syntax:\n    content: OneWay\n    return:\n      type: System.Windows.Data.BindingMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingMode.OneWayToSource\n  id: OneWayToSource\n  parent: System.Windows.Data.BindingMode\n  langs:\n  - csharp\n  name: OneWayToSource\n  nameWithType: BindingMode.OneWayToSource\n  fullName: System.Windows.Data.BindingMode.OneWayToSource\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Updates the source property when the target property changes.\n  syntax:\n    content: OneWayToSource\n    return:\n      type: System.Windows.Data.BindingMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Data.BindingMode.TwoWay\n  id: TwoWay\n  parent: System.Windows.Data.BindingMode\n  langs:\n  - csharp\n  name: TwoWay\n  nameWithType: BindingMode.TwoWay\n  fullName: System.Windows.Data.BindingMode.TwoWay\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Causes changes to either the source property or the target property to automatically update the other. This type of binding is appropriate for editable forms or other fully-interactive [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] scenarios.\n  syntax:\n    content: TwoWay\n    return:\n      type: System.Windows.Data.BindingMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Windows.Data.BindingMode.Default\n  parent: System.Windows.Data.BindingMode\n  isExternal: false\n  name: Default\n  nameWithType: BindingMode.Default\n  fullName: System.Windows.Data.BindingMode.Default\n- uid: System.Windows.Data.BindingMode\n  parent: System.Windows.Data\n  isExternal: false\n  name: BindingMode\n  nameWithType: BindingMode\n  fullName: System.Windows.Data.BindingMode\n- uid: System.Windows.Data.BindingMode.OneTime\n  parent: System.Windows.Data.BindingMode\n  isExternal: false\n  name: OneTime\n  nameWithType: BindingMode.OneTime\n  fullName: System.Windows.Data.BindingMode.OneTime\n- uid: System.Windows.Data.BindingMode.OneWay\n  parent: System.Windows.Data.BindingMode\n  isExternal: false\n  name: OneWay\n  nameWithType: BindingMode.OneWay\n  fullName: System.Windows.Data.BindingMode.OneWay\n- uid: System.Windows.Data.BindingMode.OneWayToSource\n  parent: System.Windows.Data.BindingMode\n  isExternal: false\n  name: OneWayToSource\n  nameWithType: BindingMode.OneWayToSource\n  fullName: System.Windows.Data.BindingMode.OneWayToSource\n- uid: System.Windows.Data.BindingMode.TwoWay\n  parent: System.Windows.Data.BindingMode\n  isExternal: false\n  name: TwoWay\n  nameWithType: BindingMode.TwoWay\n  fullName: System.Windows.Data.BindingMode.TwoWay\n"}