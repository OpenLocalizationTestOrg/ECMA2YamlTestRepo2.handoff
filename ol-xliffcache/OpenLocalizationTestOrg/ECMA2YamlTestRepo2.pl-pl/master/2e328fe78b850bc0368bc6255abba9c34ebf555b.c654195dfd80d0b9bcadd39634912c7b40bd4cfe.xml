{"nodes":[{"pos":[2169,2243],"content":"The SignedCms class enables signing and verifying of CMS/PKCS #7 messages.","needQuote":false,"needEscape":true,"nodes":[{"content":"The SignedCms class enables signing and verifying of CMS/PKCS #7 messages.","pos":[0,74]}]},{"pos":[2257,2602],"content":"The Cryptographic Message Syntax RFC specifies the following MIME types and file name extensions for CMS/PKCS #7 messages with these content types.      |Content type|MIME type|Extension|   |------------------|---------------|---------------|   |envelopedData|application/pkcs7-mime|.p7m|   |signedData|application/pkcs7-signature|.p7s.p7c|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Cryptographic Message Syntax RFC specifies the following MIME types and file name extensions for CMS/PKCS #7 messages with these content types.      |Content type|MIME type|Extension|   |------------------|---------------|---------------|   |envelopedData|application/pkcs7-mime|.p7m|   |signedData|application/pkcs7-signature|.p7s.p7c|","pos":[0,340],"nodes":[{"content":"The Cryptographic Message Syntax RFC specifies the following MIME types and file name extensions for CMS/PKCS #7 messages with these content types.","pos":[0,147]},{"content":"|Content type|MIME type|Extension|   |------------------|---------------|---------------|   |envelopedData|application/pkcs7-mime|.p7m|   |signedData|application/pkcs7-signature|.p7s.p7c|","pos":[153,340]}]}]},{"pos":[3136,3260],"content":"The SignedCms constructor creates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class."},{"pos":[3273,4331],"content":"The <xref:System.Security.Cryptography.Pkcs.SignedCms> class has the following default property values.      |Property|Default value|   |--------------|-------------------|   |<xref:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo%2A>|1.2.840.113549.1.7.1 (data)Length: zero|   |<xref:System.Security.Cryptography.Pkcs.SignedCms.Detached%2A>|Detached state: `false` The content that is signed is included in the CMS/PKCS #7 message along with the signature information.|       The default <xref:System.Security.Cryptography.Pkcs.SubjectIdentifierType> for signers is SubjectIdentifierType.IssuerAndSerialNumber.       If the detached state is `false` (the default), the signed content is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This may be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Security.Cryptography.Pkcs.SignedCms&gt; class has the following default property values.","pos":[0,103],"source":"The <xref:System.Security.Cryptography.Pkcs.SignedCms> class has the following default property values."},{"content":"|Property|Default value|   |--------------|-------------------|   |&lt;xref:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo%2A&gt;|1.2.840.113549.1.7.1 (data)Length: zero|   |&lt;xref:System.Security.Cryptography.Pkcs.SignedCms.Detached%2A&gt;|Detached state: <ph id=\"ph1\">`false`</ph> The content that is signed is included in the CMS/PKCS #7 message along with the signature information.|       The default &lt;xref:System.Security.Cryptography.Pkcs.SubjectIdentifierType&gt; for signers is SubjectIdentifierType.IssuerAndSerialNumber.","pos":[109,618],"source":"      |Property|Default value|   |--------------|-------------------|   |<xref:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo%2A>|1.2.840.113549.1.7.1 (data)Length: zero|   |<xref:System.Security.Cryptography.Pkcs.SignedCms.Detached%2A>|Detached state: `false` The content that is signed is included in the CMS/PKCS #7 message along with the signature information.|       The default <xref:System.Security.Cryptography.Pkcs.SubjectIdentifierType> for signers is SubjectIdentifierType.IssuerAndSerialNumber."},{"content":"If the detached state is <ph id=\"ph1\">`false`</ph> (the default), the signed content is included in the CMS/PKCS #7 message along with the signature information.","pos":[625,768],"source":"       If the detached state is `false` (the default), the signed content is included in the CMS/PKCS #7 message along with the signature information."},{"content":"If the detached state is <ph id=\"ph1\">`true`</ph>, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately.","pos":[769,911],"source":" If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately."},{"content":"This may be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","pos":[912,1049]}]},{"pos":[4575,4659],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[5193,5381],"content":"The SignedCms constructor creates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified content information as the inner content.","needQuote":true,"needEscape":true,"source":"The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified content information as the inner content."},{"pos":[5394,5960],"content":"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.       If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For the default property values used with this constructor, see &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor&gt;.","pos":[0,123],"source":"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>."},{"content":"If the detached state is <ph id=\"ph1\">`false`</ph> (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information.","pos":[130,281],"source":"       If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information."},{"content":"If the detached state is <ph id=\"ph1\">`true`</ph>, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately.","pos":[282,424],"source":" If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately."},{"content":"This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","pos":[425,564]}]},{"pos":[6178,6394],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that specifies the content information as the inner content of the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> message.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that specifies the content information as the inner content of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message."},{"pos":[6574,6658],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[7242,7464],"content":"The SignedCms constructor creates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified subject identifier type as the default subject identifier type for signers.","needQuote":true,"needEscape":true,"source":"The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified subject identifier type as the default subject identifier type for signers."},{"pos":[7477,8043],"content":"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.       If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For the default property values used with this constructor, see &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor&gt;.","pos":[0,123],"source":"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>."},{"content":"If the detached state is <ph id=\"ph1\">`false`</ph> (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information.","pos":[130,281],"source":"       If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information."},{"content":"If the detached state is <ph id=\"ph1\">`true`</ph>, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately.","pos":[282,424],"source":" If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately."},{"content":"This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","pos":[425,564]}]},{"pos":[8299,8448],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> member that specifies the default subject identifier type for signers.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"></xref> member that specifies the default subject identifier type for signers."},{"pos":[8628,8712],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[9300,9520],"content":"The SignedCms constructor creates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified content information as the inner content and by using the detached state.","needQuote":true,"needEscape":true,"source":"The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified content information as the inner content and by using the detached state."},{"pos":[9533,10099],"content":"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.       If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For the default property values used with this constructor, see &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor&gt;.","pos":[0,123],"source":"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>."},{"content":"If the detached state is <ph id=\"ph1\">`false`</ph> (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information.","pos":[130,281],"source":"       If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information."},{"content":"If the detached state is <ph id=\"ph1\">`true`</ph>, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately.","pos":[282,424],"source":" If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately."},{"content":"This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","pos":[425,564]}]},{"pos":[10332,10548],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that specifies the content information as the inner content of the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> message.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that specifies the content information as the inner content of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message."},{"pos":[10614,10989],"content":"A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature. If `detached` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached. If `detached` is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is for a detached signature.","pos":[0,157],"source":"A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature."},{"content":"If <ph id=\"ph1\">`detached`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the signature is detached.","pos":[158,263],"source":" If `detached` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached."},{"content":"If <ph id=\"ph1\">`detached`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the signature is not detached.","pos":[264,375],"source":" If `detached` is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached."}]},{"pos":[11169,11253],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[11965,12232],"content":"The SignedCms constructor creates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified subject identifier type as the default subject identifier type for signers and content information as the inner content.","needQuote":true,"needEscape":true,"source":"The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified subject identifier type as the default subject identifier type for signers and content information as the inner content."},{"pos":[12245,12811],"content":"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.       If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For the default property values used with this constructor, see &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor&gt;.","pos":[0,123],"source":"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>."},{"content":"If the detached state is <ph id=\"ph1\">`false`</ph> (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information.","pos":[130,281],"source":"       If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information."},{"content":"If the detached state is <ph id=\"ph1\">`true`</ph>, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately.","pos":[282,424],"source":" If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately."},{"content":"This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.","pos":[425,564]}]},{"pos":[13126,13275],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> member that specifies the default subject identifier type for signers.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"></xref> member that specifies the default subject identifier type for signers."},{"pos":[13375,13591],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that specifies the content information as the inner content of the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> message.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that specifies the content information as the inner content of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message."},{"pos":[13771,13855],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[14621,14922],"content":"The SignedCms constructor creates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified subject identifier type as the default subject identifier type for signers, the content information as the inner content, and by using the detached state.","needQuote":true,"needEscape":true,"source":"The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified subject identifier type as the default subject identifier type for signers, the content information as the inner content, and by using the detached state."},{"pos":[14935,15374],"content":"If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This may be useful in an archiving application that archives message content whether or not the message sender can be verified for authenticity.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the detached state is <ph id=\"ph1\">`false`</ph> (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information.","pos":[0,151],"source":"If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information."},{"content":"If the detached state is <ph id=\"ph1\">`true`</ph>, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately.","pos":[152,294],"source":" If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately."},{"content":"This may be useful in an archiving application that archives message content whether or not the message sender can be verified for authenticity.","pos":[295,439]}]},{"pos":[15704,15853],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> member that specifies the default subject identifier type for signers.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"></xref> member that specifies the default subject identifier type for signers."},{"pos":[15953,16169],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that specifies the content information as the inner content of the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> message.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that specifies the content information as the inner content of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message."},{"pos":[16235,16608],"content":"A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature. If `detached` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached. If detached is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is for a detached signature.","pos":[0,157],"source":"A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature."},{"content":"If <ph id=\"ph1\">`detached`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the signature is detached.","pos":[158,263],"source":" If `detached` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached."},{"content":"If detached is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the signature is not detached.","pos":[264,373],"source":" If detached is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached."}]},{"pos":[16788,16872],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[17292,17393],"content":"The Certificates property retrieves the certificates associated with the encoded CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Certificates property retrieves the certificates associated with the encoded CMS/PKCS #7 message.","pos":[0,101]}]},{"pos":[17637,17821],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection that represents the set of certificates for the encoded CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"source":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> collection that represents the set of certificates for the encoded CMS/PKCS #7 message."},{"pos":[18318,19099],"content":"The CheckHash method verifies the data integrity of the CMS/PKCS #7 message. CheckHash is a specialized method used in specific security infrastructure applications that only wish to check the hash of the CMS message, rather than perform a full digital signature verification. CheckHash does not authenticate the author nor sender of the message because this method does not involve verifying a digital signature. For general-purpose checking of the integrity and authenticity of a CMS/PKCS #7 message, use the &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29&gt; or &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Security.Cryptography.X509Certificates.X509Certificate2Collection%2CSystem.Boolean%29&gt; methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"The CheckHash method verifies the data integrity of the CMS/PKCS #7 message. CheckHash is a specialized method used in specific security infrastructure applications that only wish to check the hash of the CMS message, rather than perform a full digital signature verification. CheckHash does not authenticate the author nor sender of the message because this method does not involve verifying a digital signature. For general-purpose checking of the integrity and authenticity of a CMS/PKCS #7 message, use the &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29&gt; or &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Security.Cryptography.X509Certificates.X509Certificate2Collection%2CSystem.Boolean%29&gt; methods.","pos":[0,781],"nodes":[{"content":"The CheckHash method verifies the data integrity of the CMS/PKCS #7 message.","pos":[0,76]},{"content":"CheckHash is a specialized method used in specific security infrastructure applications that only wish to check the hash of the CMS message, rather than perform a full digital signature verification.","pos":[77,276]},{"content":"CheckHash does not authenticate the author nor sender of the message because this method does not involve verifying a digital signature.","pos":[277,413]},{"content":"For general-purpose checking of the integrity and authenticity of a CMS/PKCS #7 message, use the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29<ph id=\"ph2\">&amp;gt;</ph> or <ph id=\"ph3\">&amp;lt;</ph>xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Security.Cryptography.X509Certificates.X509Certificate2Collection%2CSystem.Boolean%29<ph id=\"ph4\">&amp;gt;</ph> methods.","pos":[414,781],"source":" For general-purpose checking of the integrity and authenticity of a CMS/PKCS #7 message, use the &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29&gt; or &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Security.Cryptography.X509Certificates.X509Certificate2Collection%2CSystem.Boolean%29&gt; methods."}]}]},{"pos":[19113,19184],"content":"This method does not provide authentication of the CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method does not provide authentication of the CMS/PKCS #7 message.","pos":[0,71]}]},{"pos":[19445,19502],"content":"A method call was invalid for the object's current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"A method call was invalid for the object's current state.","pos":[0,57]}]},{"pos":[20149,20586],"content":"This method verifies all signatures, including countersignatures, on the CMS/PKCS #7 message. If there are signed attributes included with the message, these attributes are also verified. If the option is chosen to validate certificates, the entire included portion of the certificate chain is validated.       This method throws an exception if the verification of a digital signature fails or any validation requirements are not met.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method verifies all signatures, including countersignatures, on the CMS/PKCS #7 message. If there are signed attributes included with the message, these attributes are also verified. If the option is chosen to validate certificates, the entire included portion of the certificate chain is validated.       This method throws an exception if the verification of a digital signature fails or any validation requirements are not met.","pos":[0,435],"nodes":[{"content":"This method verifies all signatures, including countersignatures, on the CMS/PKCS #7 message.","pos":[0,93]},{"content":"If there are signed attributes included with the message, these attributes are also verified.","pos":[94,187]},{"content":"If the option is chosen to validate certificates, the entire included portion of the certificate chain is validated.","pos":[188,304]},{"content":"This method throws an exception if the verification of a digital signature fails or any validation requirements are not met.","pos":[311,435]}]}]},{"pos":[21843,22496],"content":"A <xref:System.Boolean> value that specifies whether only the digital signatures are verified without the signers' certificates being validated.       If `verifySignatureOnly` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, only the digital signatures are verified. If it is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.","needQuote":false,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether only the digital signatures are verified without the signers' certificates being validated.","pos":[0,144],"source":"A <xref:System.Boolean> value that specifies whether only the digital signatures are verified without the signers' certificates being validated."},{"content":"If <ph id=\"ph1\">`verifySignatureOnly`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, only the digital signatures are verified.","pos":[151,282],"source":"       If `verifySignatureOnly` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, only the digital signatures are verified."},{"content":"If it is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated.","pos":[283,485],"source":" If it is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated."},{"content":"The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.","pos":[486,639]}]},{"pos":[22686,22770],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[22919,22968],"content":"A cryptographic operation could not be completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic operation could not be completed.","pos":[0,49]}]},{"pos":[23079,23136],"content":"A method call was invalid for the object's current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"A method call was invalid for the object's current state.","pos":[0,57]}]},{"pos":[24060,24497],"content":"This method verifies all signatures, including countersignatures, on the CMS/PKCS #7 message. If there are signed attributes included with the message, these attributes are also verified. If the option is chosen to validate certificates, the entire included portion of the certificate chain is validated.       This method throws an exception if the verification of a digital signature fails or any validation requirements are not met.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method verifies all signatures, including countersignatures, on the CMS/PKCS #7 message. If there are signed attributes included with the message, these attributes are also verified. If the option is chosen to validate certificates, the entire included portion of the certificate chain is validated.       This method throws an exception if the verification of a digital signature fails or any validation requirements are not met.","pos":[0,435],"nodes":[{"content":"This method verifies all signatures, including countersignatures, on the CMS/PKCS #7 message.","pos":[0,93]},{"content":"If there are signed attributes included with the message, these attributes are also verified.","pos":[94,187]},{"content":"If the option is chosen to validate certificates, the entire included portion of the certificate chain is validated.","pos":[188,304]},{"content":"This method throws an exception if the verification of a digital signature fails or any validation requirements are not met.","pos":[311,435]}]}]},{"pos":[25881,26239],"content":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> object that can be used to validate the certificate chain. If no additional certificates are to be used to validate the certificate chain, use &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29&gt; instead of CheckSignature.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that can be used to validate the certificate chain.","pos":[0,155],"source":"An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> object that can be used to validate the certificate chain."},{"content":"If no additional certificates are to be used to validate the certificate chain, use <ph id=\"ph1\">&amp;lt;</ph>xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29<ph id=\"ph2\">&amp;gt;</ph> instead of CheckSignature.","pos":[156,358],"source":" If no additional certificates are to be used to validate the certificate chain, use &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29&gt; instead of CheckSignature."}]},{"pos":[26317,26970],"content":"A <xref:System.Boolean> value that specifies whether only the digital signatures are verified without the signers' certificates being validated.       If `verifySignatureOnly` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, only the digital signatures are verified. If it is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.","needQuote":false,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether only the digital signatures are verified without the signers' certificates being validated.","pos":[0,144],"source":"A <xref:System.Boolean> value that specifies whether only the digital signatures are verified without the signers' certificates being validated."},{"content":"If <ph id=\"ph1\">`verifySignatureOnly`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, only the digital signatures are verified.","pos":[151,282],"source":"       If `verifySignatureOnly` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, only the digital signatures are verified."},{"content":"If it is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated.","pos":[283,485],"source":" If it is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated."},{"content":"The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.","pos":[486,639]}]},{"pos":[27160,27244],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[27393,27442],"content":"A cryptographic operation could not be completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic operation could not be completed.","pos":[0,49]}]},{"pos":[27553,27610],"content":"A method call was invalid for the object's current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"A method call was invalid for the object's current state.","pos":[0,57]}]},{"pos":[28054,28203],"content":"The ComputeSignature method prompts the user to select a signing certificate, creates a signature, and adds the signature to the CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ComputeSignature method prompts the user to select a signing certificate, creates a signature, and adds the signature to the CMS/PKCS #7 message.","pos":[0,149]}]},{"pos":[28217,29460],"content":"This method displays a user interface in which you choose signers for this message. This requires that the current process is running in *user interactive mode*, meaning that the <xref:System.Environment.UserInteractive%2A?displayProperty=fullName> property is set to `true`. A process is normally in user interactive mode unless it is a service process or running inside a Web application.       Signers whose certificates meet the following conditions will be displayed in the list:      -   The certificate has an associated private key.      -   The certificate is within its validity period.      -   The certificate has no key usage or a key usage that supports digital signatures or nonrepudiation.       Signer certificates are chosen from the My store.      ## .NET Framework Security    The following permissions are required to display the user interface:      -   <xref:System.Security.Permissions.UIPermissionWindow?displayProperty=fullName>       The following permissions are required to access the signature key:      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method displays a user interface in which you choose signers for this message.","pos":[0,83]},{"content":"This requires that the current process is running in <bpt id=\"p1\">*</bpt>user interactive mode<ept id=\"p1\">*</ept>, meaning that the &lt;xref:System.Environment.UserInteractive%2A?displayProperty=fullName&gt; property is set to <ph id=\"ph1\">`true`</ph>.","pos":[84,275],"source":" This requires that the current process is running in *user interactive mode*, meaning that the <xref:System.Environment.UserInteractive%2A?displayProperty=fullName> property is set to `true`."},{"content":"A process is normally in user interactive mode unless it is a service process or running inside a Web application.","pos":[276,390]},{"content":"Signers whose certificates meet the following conditions will be displayed in the list:      -   The certificate has an associated private key.","pos":[397,540]},{"content":"-   The certificate is within its validity period.","pos":[546,596]},{"content":"-   The certificate has no key usage or a key usage that supports digital signatures or nonrepudiation.","pos":[602,705]},{"content":"Signer certificates are chosen from the My store.","pos":[712,761]},{"content":".NET Framework Security    The following permissions are required to display the user interface:      -   &lt;xref:System.Security.Permissions.UIPermissionWindow?displayProperty=fullName&gt;       The following permissions are required to access the signature key:      -   &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;      -   &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;","pos":[770,1222],"source":"      ## .NET Framework Security    The following permissions are required to display the user interface:      -   <xref:System.Security.Permissions.UIPermissionWindow?displayProperty=fullName>       The following permissions are required to access the signature key:      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>"}]},{"pos":[30715,30799],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[30948,30997],"content":"A cryptographic operation could not be completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic operation could not be completed.","pos":[0,49]}]},{"pos":[31558,31683],"content":"The ComputeSignature method creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ComputeSignature method creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message.","pos":[0,125]}]},{"pos":[31697,31993],"content":"## .NET Framework Security    The following permissions are required to access the signature key:      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":".NET Framework Security    The following permissions are required to access the signature key:      -   &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;      -   &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;","pos":[3,291],"source":".NET Framework Security    The following permissions are required to access the signature key:      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>"}]},{"pos":[33185,33286],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the signer.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"></xref> object that represents the signer."},{"pos":[33477,33561],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[33710,33759],"content":"A cryptographic operation could not be completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic operation could not be completed.","pos":[0,49]}]},{"pos":[34374,34865],"content":"Creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message. If the value of the silent parameter is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> and the <xref:System.Security.Cryptography.Pkcs.CmsSigner.Certificate*> property of the <xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"></xref> object specified by the signer parameter is not set to a valid certificate, this method prompts the user to select a signing certificate.","needQuote":false,"needEscape":true,"nodes":[{"content":"Creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message.","pos":[0,97]},{"content":"If the value of the silent parameter is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the &lt;xref:System.Security.Cryptography.Pkcs.CmsSigner.Certificate*&gt; property of the <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object specified by the signer parameter is not set to a valid certificate, this method prompts the user to select a signing certificate.","pos":[98,491],"source":" If the value of the silent parameter is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> and the <xref:System.Security.Cryptography.Pkcs.CmsSigner.Certificate*> property of the <xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"></xref> object specified by the signer parameter is not set to a valid certificate, this method prompts the user to select a signing certificate."}]},{"pos":[34879,35343],"content":"## .NET Framework Security    The following permissions are required to display the user interface:      -   <xref:System.Security.Permissions.UIPermissionWindow?displayProperty=fullName>       The following permissions are required to access the signature key:      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":".NET Framework Security    The following permissions are required to display the user interface:      -   &lt;xref:System.Security.Permissions.UIPermissionWindow?displayProperty=fullName&gt;       The following permissions are required to access the signature key:      -   &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;      -   &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;","pos":[3,455],"source":".NET Framework Security    The following permissions are required to display the user interface:      -   <xref:System.Security.Permissions.UIPermissionWindow?displayProperty=fullName>       The following permissions are required to access the signature key:      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>      -   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>"}]},{"pos":[35572,35673],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the signer.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"></xref> object that represents the signer."},{"pos":[35737,35851],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to prompt the user to select a signing certificate.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prompt the user to select a signing certificate."},{"pos":[36042,36126],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[36275,36324],"content":"A cryptographic operation could not be completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic operation could not be completed.","pos":[0,49]}]},{"pos":[36435,36589],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">silent</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and a signing certificate is not specified.","needQuote":true,"needEscape":true,"source":"The value of the <code>silent</code> parameter is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> and a signing certificate is not specified."},{"pos":[37004,37093],"content":"The ContentInfo property retrieves the inner contents of the encoded CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ContentInfo property retrieves the inner contents of the encoded CMS/PKCS #7 message.","pos":[0,89]}]},{"pos":[37282,37422],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the contents of the encoded CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that represents the contents of the encoded CMS/PKCS #7 message."},{"pos":[37950,38227],"content":"The Decode method decodes an encoded <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message. Upon successful decoding, the decoded information can be retrieved from the properties of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Decode method decodes an encoded <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> message.","pos":[0,110],"source":"The Decode method decodes an encoded <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message."},{"content":"Upon successful decoding, the decoded information can be retrieved from the properties of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[111,277],"source":" Upon successful decoding, the decoded information can be retrieved from the properties of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object."}]},{"pos":[38239,38352],"content":"This method resets all member variables of the object by using the information obtained from successful decoding.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method resets all member variables of the object by using the information obtained from successful decoding.","pos":[0,113]}]},{"pos":[39587,39670],"content":"Array of byte values that represents the encoded CMS/PKCS #7 message to be decoded.","needQuote":false,"needEscape":true,"nodes":[{"content":"Array of byte values that represents the encoded CMS/PKCS #7 message to be decoded.","pos":[0,83]}]},{"pos":[39852,39936],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[40085,40134],"content":"A cryptographic operation could not be completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic operation could not be completed.","pos":[0,49]}]},{"pos":[40533,40677],"content":"The Detached property retrieves whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is for a detached signature.","needQuote":true,"needEscape":true,"source":"The Detached property retrieves whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature."},{"pos":[40789,41170],"content":"A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature. If this property is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached. If this property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Boolean&gt; value that specifies whether the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is for a detached signature.","pos":[0,157],"source":"A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature."},{"content":"If this property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the signature is detached.","pos":[158,266],"source":" If this property is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached."},{"content":"If this property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the signature is not detached.","pos":[267,381],"source":" If this property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached."}]},{"pos":[41647,41730],"content":"The Encode method encodes the information in the object into a CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Encode method encodes the information in the object into a CMS/PKCS #7 message.","pos":[0,83]}]},{"pos":[41856,42025],"content":"An array of byte values that represents the encoded message. The encoded message can be decoded by the <xref:System.Security.Cryptography.Pkcs.SignedCms.Decode*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of byte values that represents the encoded message. The encoded message can be decoded by the <xref:System.Security.Cryptography.Pkcs.SignedCms.Decode*> method.","pos":[0,169],"nodes":[{"content":"An array of byte values that represents the encoded message.","pos":[0,60]},{"content":"The encoded message can be decoded by the &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.Decode*&gt; method.","pos":[61,169],"source":" The encoded message can be decoded by the <xref:System.Security.Cryptography.Pkcs.SignedCms.Decode*> method."}]}]},{"pos":[42252,42301],"content":"A cryptographic operation could not be completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic operation could not be completed.","pos":[0,49]}]},{"pos":[42412,42469],"content":"A method call was invalid for the object's current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"A method call was invalid for the object's current state.","pos":[0,57]}]},{"pos":[42950,43077],"content":"Removes the signature at the specified index of the <xref:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos*> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the signature at the specified index of the &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos*&gt; collection.","pos":[0,127],"source":"Removes the signature at the specified index of the <xref:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos*> collection."}]},{"pos":[43218,43266],"content":"The zero-based index of the signature to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the signature to remove.","pos":[0,48]}]},{"pos":[43465,43536],"content":"A CMS/PKCS #7 message is not signed, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","needQuote":false,"needEscape":true,"source":"A CMS/PKCS #7 message is not signed, and <code>index</code> is invalid."},{"pos":[43653,43775],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is greater than the signature count minus 1.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the signature count minus 1.","pos":[44,118],"source":"       -or-       <code>index</code> is greater than the signature count minus 1."}]},{"pos":[43926,44024],"content":"The signature could not be removed.       -or-       An internal cryptographic error occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The signature could not be removed.       -or-       An internal cryptographic error occurred.","pos":[0,94],"nodes":[{"content":"The signature could not be removed.","pos":[0,35]},{"content":"-or-       An internal cryptographic error occurred.","pos":[42,94]}]}]},{"pos":[44585,44725],"content":"The RemoveSignature method removes the signature for the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignerInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The RemoveSignature method removes the signature for the specified <xref href=\"System.Security.Cryptography.Pkcs.SignerInfo\"></xref> object."},{"pos":[44949,45075],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignerInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the countersignature being removed.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.SignerInfo\"></xref> object that represents the countersignature being removed."},{"pos":[45265,45349],"content":"A null reference was passed to a method that does not accept it as a valid argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference was passed to a method that does not accept it as a valid argument.","pos":[0,84]}]},{"pos":[45464,45563],"content":"The value of an argument was outside the allowable range of values as defined by the called method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of an argument was outside the allowable range of values as defined by the called method.","pos":[0,99]}]},{"pos":[45712,45761],"content":"A cryptographic operation could not be completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic operation could not be completed.","pos":[0,49]}]},{"pos":[46176,46342],"content":"The SignerInfos property retrieves the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignerInfoCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection associated with the CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"source":"The SignerInfos property retrieves the <xref href=\"System.Security.Cryptography.Pkcs.SignerInfoCollection\"></xref> collection associated with the CMS/PKCS #7 message."},{"pos":[46549,46701],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.Pkcs.SignerInfoCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the signer information for the CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"source":"A <xref href=\"System.Security.Cryptography.Pkcs.SignerInfoCollection\"></xref> object that represents the signer information for the CMS/PKCS #7 message."},{"pos":[47183,47253],"content":"The Version property retrieves the version of the CMS/PKCS #7 message.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Version property retrieves the version of the CMS/PKCS #7 message.","pos":[0,70]}]},{"pos":[47267,47415],"content":"The version determines whether the message is a PKCS #7 message or a Cryptographic Message Syntax (CMS) message. CMS is a newer superset of PKCS #7.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The version determines whether the message is a PKCS #7 message or a Cryptographic Message Syntax (CMS) message. CMS is a newer superset of PKCS #7.","pos":[0,148],"nodes":[{"content":"The version determines whether the message is a PKCS #7 message or a Cryptographic Message Syntax (CMS) message.","pos":[0,112]},{"content":"CMS is a newer superset of PKCS #7.","pos":[113,148]}]}]},{"pos":[47525,47586],"content":"An int value that represents the CMS/PKCS #7 message version.","needQuote":false,"needEscape":true,"nodes":[{"content":"An int value that represents the CMS/PKCS #7 message version.","pos":[0,61]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.Pkcs.SignedCms\n  id: SignedCms\n  children:\n  - System.Security.Cryptography.Pkcs.SignedCms.#ctor\n  - System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)\n  - System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)\n  - System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)\n  - System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)\n  - System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)\n  - System.Security.Cryptography.Pkcs.SignedCms.Certificates\n  - System.Security.Cryptography.Pkcs.SignedCms.CheckHash\n  - System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)\n  - System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)\n  - System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature\n  - System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)\n  - System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner,System.Boolean)\n  - System.Security.Cryptography.Pkcs.SignedCms.ContentInfo\n  - System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])\n  - System.Security.Cryptography.Pkcs.SignedCms.Detached\n  - System.Security.Cryptography.Pkcs.SignedCms.Encode\n  - System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Int32)\n  - System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)\n  - System.Security.Cryptography.Pkcs.SignedCms.SignerInfos\n  - System.Security.Cryptography.Pkcs.SignedCms.Version\n  langs:\n  - csharp\n  name: SignedCms\n  nameWithType: SignedCms\n  fullName: System.Security.Cryptography.Pkcs.SignedCms\n  type: Class\n  summary: 'The SignedCms class enables signing and verifying of CMS/PKCS #7 messages.'\n  remarks: \"The Cryptographic Message Syntax RFC specifies the following MIME types and file name extensions for CMS/PKCS #7 messages with these content types.  \\n  \\n|Content type|MIME type|Extension|  \\n|------------------|---------------|---------------|  \\n|envelopedData|application/pkcs7-mime|.p7m|  \\n|signedData|application/pkcs7-signature|.p7s.p7c|\"\n  syntax:\n    content: public sealed class SignedCms\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: SignedCms()\n  nameWithType: SignedCms.SignedCms()\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms()\n  type: Constructor\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class.\n  remarks: \"The <xref:System.Security.Cryptography.Pkcs.SignedCms> class has the following default property values.  \\n  \\n|Property|Default value|  \\n|--------------|-------------------|  \\n|<xref:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo%2A>|1.2.840.113549.1.7.1 (data)Length: zero|  \\n|<xref:System.Security.Cryptography.Pkcs.SignedCms.Detached%2A>|Detached state: `false` The content that is signed is included in the CMS/PKCS #7 message along with the signature information.|  \\n  \\n The default <xref:System.Security.Cryptography.Pkcs.SubjectIdentifierType> for signers is SubjectIdentifierType.IssuerAndSerialNumber.  \\n  \\n If the detached state is `false` (the default), the signed content is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This may be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.\"\n  syntax:\n    content: public SignedCms ();\n    parameters: []\n  overload: System.Security.Cryptography.Pkcs.SignedCms.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)\n  id: '#ctor(System.Security.Cryptography.Pkcs.ContentInfo)'\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: SignedCms(ContentInfo)\n  nameWithType: SignedCms.SignedCms(ContentInfo)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(ContentInfo)\n  type: Constructor\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified content information as the inner content.\n  remarks: \"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.  \\n  \\n If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.\"\n  syntax:\n    content: public SignedCms (System.Security.Cryptography.Pkcs.ContentInfo contentInfo);\n    parameters:\n    - id: contentInfo\n      type: System.Security.Cryptography.Pkcs.ContentInfo\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that specifies the content information as the inner content of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)\n  id: '#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)'\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: SignedCms(SubjectIdentifierType)\n  nameWithType: SignedCms.SignedCms(SubjectIdentifierType)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(SubjectIdentifierType)\n  type: Constructor\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified subject identifier type as the default subject identifier type for signers.\n  remarks: \"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.  \\n  \\n If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.\"\n  syntax:\n    content: public SignedCms (System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType);\n    parameters:\n    - id: signerIdentifierType\n      type: System.Security.Cryptography.Pkcs.SubjectIdentifierType\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"></xref> member that specifies the default subject identifier type for signers.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)\n  id: '#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)'\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: SignedCms(ContentInfo,Boolean)\n  nameWithType: SignedCms.SignedCms(ContentInfo,Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(ContentInfo,Boolean)\n  type: Constructor\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified content information as the inner content and by using the detached state.\n  remarks: \"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.  \\n  \\n If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.\"\n  syntax:\n    content: public SignedCms (System.Security.Cryptography.Pkcs.ContentInfo contentInfo, bool detached);\n    parameters:\n    - id: contentInfo\n      type: System.Security.Cryptography.Pkcs.ContentInfo\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that specifies the content information as the inner content of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message.\n    - id: detached\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature. If `detached` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached. If `detached` is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)\n  id: '#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)'\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: SignedCms(SubjectIdentifierType,ContentInfo)\n  nameWithType: SignedCms.SignedCms(SubjectIdentifierType,ContentInfo)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(SubjectIdentifierType,ContentInfo)\n  type: Constructor\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified subject identifier type as the default subject identifier type for signers and content information as the inner content.\n  remarks: \"For the default property values used with this constructor, see <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.  \\n  \\n If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This might be useful in an archiving application that archives message content whether the message sender can be verified for authenticity.\"\n  syntax:\n    content: public SignedCms (System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType, System.Security.Cryptography.Pkcs.ContentInfo contentInfo);\n    parameters:\n    - id: signerIdentifierType\n      type: System.Security.Cryptography.Pkcs.SubjectIdentifierType\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"></xref> member that specifies the default subject identifier type for signers.\n    - id: contentInfo\n      type: System.Security.Cryptography.Pkcs.ContentInfo\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that specifies the content information as the inner content of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)\n  id: '#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)'\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: SignedCms(SubjectIdentifierType,ContentInfo,Boolean)\n  nameWithType: SignedCms.SignedCms(SubjectIdentifierType,ContentInfo,Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(SubjectIdentifierType,ContentInfo,Boolean)\n  type: Constructor\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The SignedCms constructor creates an instance of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> class by using the specified subject identifier type as the default subject identifier type for signers, the content information as the inner content, and by using the detached state.\n  remarks: 'If the detached state is `false` (the default), the content that is signed is included in the CMS/PKCS #7 message along with the signature information. If the detached state is `true`, clients that cannot decode S/MIME messages can still see the content of the message if it is sent separately. This may be useful in an archiving application that archives message content whether or not the message sender can be verified for authenticity.'\n  syntax:\n    content: public SignedCms (System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType, System.Security.Cryptography.Pkcs.ContentInfo contentInfo, bool detached);\n    parameters:\n    - id: signerIdentifierType\n      type: System.Security.Cryptography.Pkcs.SubjectIdentifierType\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.SubjectIdentifierType\"></xref> member that specifies the default subject identifier type for signers.\n    - id: contentInfo\n      type: System.Security.Cryptography.Pkcs.ContentInfo\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that specifies the content information as the inner content of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message.\n    - id: detached\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature. If `detached` is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached. If detached is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Certificates\n  id: Certificates\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: Certificates\n  nameWithType: SignedCms.Certificates\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Certificates\n  type: Property\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The Certificates property retrieves the certificates associated with the encoded CMS/PKCS #7 message.'\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n      description: 'An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> collection that represents the set of certificates for the encoded CMS/PKCS #7 message.'\n  overload: System.Security.Cryptography.Pkcs.SignedCms.Certificates*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.CheckHash\n  id: CheckHash\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: CheckHash()\n  nameWithType: SignedCms.CheckHash()\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.CheckHash()\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The CheckHash method verifies the data integrity of the CMS/PKCS #7 message. CheckHash is a specialized method used in specific security infrastructure applications that only wish to check the hash of the CMS message, rather than perform a full digital signature verification. CheckHash does not authenticate the author nor sender of the message because this method does not involve verifying a digital signature. For general-purpose checking of the integrity and authenticity of a CMS/PKCS #7 message, use the &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29&gt; or &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Security.Cryptography.X509Certificates.X509Certificate2Collection%2CSystem.Boolean%29&gt; methods.'\n  remarks: 'This method does not provide authentication of the CMS/PKCS #7 message.'\n  syntax:\n    content: public void CheckHash ();\n    parameters: []\n  overload: System.Security.Cryptography.Pkcs.SignedCms.CheckHash*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A method call was invalid for the object's current state.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)\n  id: CheckSignature(System.Boolean)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: CheckSignature(Boolean)\n  nameWithType: SignedCms.CheckSignature(Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(Boolean)\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The CheckSignature method verifies the digital signatures on the signed CMS/PKCS #7 message and, optionally, validates the signers'' certificates.'\n  remarks: \"This method verifies all signatures, including countersignatures, on the CMS/PKCS #7 message. If there are signed attributes included with the message, these attributes are also verified. If the option is chosen to validate certificates, the entire included portion of the certificate chain is validated.  \\n  \\n This method throws an exception if the verification of a digital signature fails or any validation requirements are not met.\"\n  example:\n  - \"The following example shows the placement of CheckSignature among the steps necessary to verify the signatures on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message. In this example, the message content is not detached. The message content is included in the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#1](~/add/codesnippet/visualbasic/m-system.security.crypto_31_1.vb)]\\n [!code-cs[mpkcs_SignedCMS#1](~/add/codesnippet/csharp/m-system.security.crypto_31_1.cs)]  \\n  \\n The following example shows the placement of CheckSignature among the steps necessary to verify the signatures on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message. In this example, the message content is detached, so the message content must verified independently of the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#2](~/add/codesnippet/visualbasic/m-system.security.crypto_31_2.vb)]\\n [!code-cs[mpkcs_SignedCMS#2](~/add/codesnippet/csharp/m-system.security.crypto_31_2.cs)]\"\n  syntax:\n    content: public void CheckSignature (bool verifySignatureOnly);\n    parameters:\n    - id: verifySignatureOnly\n      type: System.Boolean\n      description: \"A <xref:System.Boolean> value that specifies whether only the digital signatures are verified without the signers' certificates being validated.  \\n  \\n If `verifySignatureOnly` is <xref uid=\\\"langword_csharp_true\\\" name=\\\"true\\\" href=\\\"\\\"></xref>, only the digital signatures are verified. If it is <xref uid=\\\"langword_csharp_false\\\" name=\\\"false\\\" href=\\\"\\\"></xref>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.\"\n  overload: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: A cryptographic operation could not be completed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A method call was invalid for the object's current state.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)\n  id: CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: CheckSignature(X509Certificate2Collection,Boolean)\n  nameWithType: SignedCms.CheckSignature(X509Certificate2Collection,Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(X509Certificate2Collection,Boolean)\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The CheckSignature method verifies the digital signatures on the signed CMS/PKCS #7 message by using the specified collection of certificates and, optionally, validates the signers'' certificates.'\n  remarks: \"This method verifies all signatures, including countersignatures, on the CMS/PKCS #7 message. If there are signed attributes included with the message, these attributes are also verified. If the option is chosen to validate certificates, the entire included portion of the certificate chain is validated.  \\n  \\n This method throws an exception if the verification of a digital signature fails or any validation requirements are not met.\"\n  example:\n  - \"The following example shows the placement of CheckSignature among the steps necessary to verify the signatures on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message. In this example, the message content is not detached, so the message content is included in the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#1](~/add/codesnippet/visualbasic/3c3d2469-0f69-4cc2-8a35-_1.vb)]\\n [!code-cs[mpkcs_SignedCMS#1](~/add/codesnippet/csharp/3c3d2469-0f69-4cc2-8a35-_1.cs)]  \\n  \\n The following example shows the placement of CheckSignature among the steps necessary to verify the signatures on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message. In this example, the message content is detached, so the message content must be verified independently of the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#2](~/add/codesnippet/visualbasic/3c3d2469-0f69-4cc2-8a35-_2.vb)]\\n [!code-cs[mpkcs_SignedCMS#2](~/add/codesnippet/csharp/3c3d2469-0f69-4cc2-8a35-_2.cs)]\"\n  syntax:\n    content: public void CheckSignature (System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraStore, bool verifySignatureOnly);\n    parameters:\n    - id: extraStore\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n      description: An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2Collection\"></xref> object that can be used to validate the certificate chain. If no additional certificates are to be used to validate the certificate chain, use &lt;xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29&gt; instead of CheckSignature.\n    - id: verifySignatureOnly\n      type: System.Boolean\n      description: \"A <xref:System.Boolean> value that specifies whether only the digital signatures are verified without the signers' certificates being validated.  \\n  \\n If `verifySignatureOnly` is <xref uid=\\\"langword_csharp_true\\\" name=\\\"true\\\" href=\\\"\\\"></xref>, only the digital signatures are verified. If it is <xref uid=\\\"langword_csharp_false\\\" name=\\\"false\\\" href=\\\"\\\"></xref>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.\"\n  overload: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: A cryptographic operation could not be completed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A method call was invalid for the object's current state.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature\n  id: ComputeSignature\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: ComputeSignature()\n  nameWithType: SignedCms.ComputeSignature()\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature()\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The ComputeSignature method prompts the user to select a signing certificate, creates a signature, and adds the signature to the CMS/PKCS #7 message.'\n  remarks: \"This method displays a user interface in which you choose signers for this message. This requires that the current process is running in *user interactive mode*, meaning that the <xref:System.Environment.UserInteractive%2A?displayProperty=fullName> property is set to `true`. A process is normally in user interactive mode unless it is a service process or running inside a Web application.  \\n  \\n Signers whose certificates meet the following conditions will be displayed in the list:  \\n  \\n-   The certificate has an associated private key.  \\n  \\n-   The certificate is within its validity period.  \\n  \\n-   The certificate has no key usage or a key usage that supports digital signatures or nonrepudiation.  \\n  \\n Signer certificates are chosen from the My store.  \\n  \\n## .NET Framework Security  \\n The following permissions are required to display the user interface:  \\n  \\n-   <xref:System.Security.Permissions.UIPermissionWindow?displayProperty=fullName>  \\n  \\n The following permissions are required to access the signature key:  \\n  \\n-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>  \\n  \\n-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>\"\n  example:\n  - \"The following example shows the steps to compute a signature on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message with message content that is not detached. In this case, the message content is included in the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#3](~/add/codesnippet/visualbasic/m-system.security.crypto_77_1.vb)]\\n [!code-cs[mpkcs_SignedCMS#3](~/add/codesnippet/csharp/m-system.security.crypto_77_1.cs)]  \\n  \\n The following example shows the steps to compute a signature on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message with message content that is detached. In this case, the message content must be verified independently of the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#4](~/add/codesnippet/visualbasic/m-system.security.crypto_77_2.vb)]\\n [!code-cs[mpkcs_SignedCMS#4](~/add/codesnippet/csharp/m-system.security.crypto_77_2.cs)]\"\n  syntax:\n    content: public void ComputeSignature ();\n    parameters: []\n  overload: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: A cryptographic operation could not be completed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)\n  id: ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: ComputeSignature(CmsSigner)\n  nameWithType: SignedCms.ComputeSignature(CmsSigner)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(CmsSigner)\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The ComputeSignature method creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message.'\n  remarks: \"## .NET Framework Security  \\n The following permissions are required to access the signature key:  \\n  \\n-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>  \\n  \\n-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>\"\n  example:\n  - \"The following example shows the steps to compute a signature on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message with message content that is not detached. In this case, the message content is included in the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#3](~/add/codesnippet/visualbasic/07c3dd2c-cd35-4b97-996c-_1.vb)]\\n [!code-cs[mpkcs_SignedCMS#3](~/add/codesnippet/csharp/07c3dd2c-cd35-4b97-996c-_1.cs)]  \\n  \\n The following example shows the steps to compute a signature on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message with message content that is detached. In this case, the message content must be verified independently of the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#4](~/add/codesnippet/visualbasic/07c3dd2c-cd35-4b97-996c-_2.vb)]\\n [!code-cs[mpkcs_SignedCMS#4](~/add/codesnippet/csharp/07c3dd2c-cd35-4b97-996c-_2.cs)]\"\n  syntax:\n    content: public void ComputeSignature (System.Security.Cryptography.Pkcs.CmsSigner signer);\n    parameters:\n    - id: signer\n      type: System.Security.Cryptography.Pkcs.CmsSigner\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"></xref> object that represents the signer.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: A cryptographic operation could not be completed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner,System.Boolean)\n  id: ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner,System.Boolean)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: ComputeSignature(CmsSigner,Boolean)\n  nameWithType: SignedCms.ComputeSignature(CmsSigner,Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(CmsSigner,Boolean)\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'Creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message. If the value of the silent parameter is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> and the <xref:System.Security.Cryptography.Pkcs.CmsSigner.Certificate*> property of the <xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"></xref> object specified by the signer parameter is not set to a valid certificate, this method prompts the user to select a signing certificate.'\n  remarks: \"## .NET Framework Security  \\n The following permissions are required to display the user interface:  \\n  \\n-   <xref:System.Security.Permissions.UIPermissionWindow?displayProperty=fullName>  \\n  \\n The following permissions are required to access the signature key:  \\n  \\n-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>  \\n  \\n-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>\"\n  syntax:\n    content: public void ComputeSignature (System.Security.Cryptography.Pkcs.CmsSigner signer, bool silent);\n    parameters:\n    - id: signer\n      type: System.Security.Cryptography.Pkcs.CmsSigner\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.CmsSigner\"></xref> object that represents the signer.\n    - id: silent\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prompt the user to select a signing certificate.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: A cryptographic operation could not be completed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The value of the <code>silent</code> parameter is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> and a signing certificate is not specified.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ContentInfo\n  id: ContentInfo\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: ContentInfo\n  nameWithType: SignedCms.ContentInfo\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.ContentInfo\n  type: Property\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The ContentInfo property retrieves the inner contents of the encoded CMS/PKCS #7 message.'\n  syntax:\n    content: public System.Security.Cryptography.Pkcs.ContentInfo ContentInfo { get; }\n    return:\n      type: System.Security.Cryptography.Pkcs.ContentInfo\n      description: 'A <xref href=\"System.Security.Cryptography.Pkcs.ContentInfo\"></xref> object that represents the contents of the encoded CMS/PKCS #7 message.'\n  overload: System.Security.Cryptography.Pkcs.SignedCms.ContentInfo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])\n  id: Decode(System.Byte[])\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: Decode(Byte[])\n  nameWithType: SignedCms.Decode(Byte[])\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Decode(Byte[])\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The Decode method decodes an encoded <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> message. Upon successful decoding, the decoded information can be retrieved from the properties of the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object.\n  remarks: This method resets all member variables of the object by using the information obtained from successful decoding.\n  example:\n  - \"The following example shows the placement of the Decode method in the process of verifying the signatures on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message. In this example, the message content is not detached, so the message content is included in the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#1](~/add/codesnippet/visualbasic/m-system.security.crypto_48_1.vb)]\\n [!code-cs[mpkcs_SignedCMS#1](~/add/codesnippet/csharp/m-system.security.crypto_48_1.cs)]  \\n  \\n The following example shows the placement of the Decode method in the process of verifying the signatures on a <xref:System.Security.Cryptography.Pkcs.SignedCms> message. In this example, the message content is detached, so the message content must be verified independently of the <xref:System.Security.Cryptography.Pkcs.SignedCms> message.  \\n  \\n [!code-vb[mpkcs_SignedCMS#2](~/add/codesnippet/visualbasic/m-system.security.crypto_48_2.vb)]\\n [!code-cs[mpkcs_SignedCMS#2](~/add/codesnippet/csharp/m-system.security.crypto_48_2.cs)]\"\n  syntax:\n    content: public void Decode (byte[] encodedMessage);\n    parameters:\n    - id: encodedMessage\n      type: System.Byte[]\n      description: 'Array of byte values that represents the encoded CMS/PKCS #7 message to be decoded.'\n  overload: System.Security.Cryptography.Pkcs.SignedCms.Decode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: A cryptographic operation could not be completed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Detached\n  id: Detached\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: Detached\n  nameWithType: SignedCms.Detached\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Detached\n  type: Property\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The Detached property retrieves whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature.\n  syntax:\n    content: public bool Detached { get; }\n    return:\n      type: System.Boolean\n      description: A <xref:System.Boolean> value that specifies whether the <xref href=\"System.Security.Cryptography.Pkcs.SignedCms\"></xref> object is for a detached signature. If this property is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the signature is detached. If this property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the signature is not detached.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.Detached*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Encode\n  id: Encode\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: Encode()\n  nameWithType: SignedCms.Encode()\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Encode()\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The Encode method encodes the information in the object into a CMS/PKCS #7 message.'\n  syntax:\n    content: public byte[] Encode ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: An array of byte values that represents the encoded message. The encoded message can be decoded by the <xref:System.Security.Cryptography.Pkcs.SignedCms.Decode*> method.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.Encode*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: A cryptographic operation could not be completed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A method call was invalid for the object's current state.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Int32)\n  id: RemoveSignature(System.Int32)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: RemoveSignature(Int32)\n  nameWithType: SignedCms.RemoveSignature(Int32)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(Int32)\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: Removes the signature at the specified index of the <xref:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos*> collection.\n  syntax:\n    content: public void RemoveSignature (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the signature to remove.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: 'A CMS/PKCS #7 message is not signed, and <code>index</code> is invalid.'\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than the signature count minus 1.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The signature could not be removed.  \\n  \\n -or-  \\n  \\n An internal cryptographic error occurred.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)\n  id: RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: RemoveSignature(SignerInfo)\n  nameWithType: SignedCms.RemoveSignature(SignerInfo)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(SignerInfo)\n  type: Method\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: The RemoveSignature method removes the signature for the specified <xref href=\"System.Security.Cryptography.Pkcs.SignerInfo\"></xref> object.\n  syntax:\n    content: public void RemoveSignature (System.Security.Cryptography.Pkcs.SignerInfo signerInfo);\n    parameters:\n    - id: signerInfo\n      type: System.Security.Cryptography.Pkcs.SignerInfo\n      description: A <xref href=\"System.Security.Cryptography.Pkcs.SignerInfo\"></xref> object that represents the countersignature being removed.\n  overload: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: A null reference was passed to a method that does not accept it as a valid argument.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value of an argument was outside the allowable range of values as defined by the called method.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: A cryptographic operation could not be completed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.SignerInfos\n  id: SignerInfos\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: SignerInfos\n  nameWithType: SignedCms.SignerInfos\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignerInfos\n  type: Property\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The SignerInfos property retrieves the <xref href=\"System.Security.Cryptography.Pkcs.SignerInfoCollection\"></xref> collection associated with the CMS/PKCS #7 message.'\n  syntax:\n    content: public System.Security.Cryptography.Pkcs.SignerInfoCollection SignerInfos { get; }\n    return:\n      type: System.Security.Cryptography.Pkcs.SignerInfoCollection\n      description: 'A <xref href=\"System.Security.Cryptography.Pkcs.SignerInfoCollection\"></xref> object that represents the signer information for the CMS/PKCS #7 message.'\n  overload: System.Security.Cryptography.Pkcs.SignedCms.SignerInfos*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Version\n  id: Version\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  langs:\n  - csharp\n  name: Version\n  nameWithType: SignedCms.Version\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Version\n  type: Property\n  assemblies:\n  - System.Security\n  namespace: System.Security.Cryptography.Pkcs\n  summary: 'The Version property retrieves the version of the CMS/PKCS #7 message.'\n  remarks: 'The version determines whether the message is a PKCS #7 message or a Cryptographic Message Syntax (CMS) message. CMS is a newer superset of PKCS #7.'\n  syntax:\n    content: public int Version { get; }\n    return:\n      type: System.Int32\n      description: 'An int value that represents the CMS/PKCS #7 message version.'\n  overload: System.Security.Cryptography.Pkcs.SignedCms.Version*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignedCms()\n  nameWithType: SignedCms.SignedCms()\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms()\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignedCms(ContentInfo)\n  nameWithType: SignedCms.SignedCms(ContentInfo)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(ContentInfo)\n- uid: System.Security.Cryptography.Pkcs.ContentInfo\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: ContentInfo\n  nameWithType: ContentInfo\n  fullName: System.Security.Cryptography.Pkcs.ContentInfo\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignedCms(SubjectIdentifierType)\n  nameWithType: SignedCms.SignedCms(SubjectIdentifierType)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(SubjectIdentifierType)\n- uid: System.Security.Cryptography.Pkcs.SubjectIdentifierType\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: SubjectIdentifierType\n  nameWithType: SubjectIdentifierType\n  fullName: System.Security.Cryptography.Pkcs.SubjectIdentifierType\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignedCms(ContentInfo,Boolean)\n  nameWithType: SignedCms.SignedCms(ContentInfo,Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(ContentInfo,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignedCms(SubjectIdentifierType,ContentInfo)\n  nameWithType: SignedCms.SignedCms(SubjectIdentifierType,ContentInfo)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(SubjectIdentifierType,ContentInfo)\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignedCms(SubjectIdentifierType,ContentInfo,Boolean)\n  nameWithType: SignedCms.SignedCms(SubjectIdentifierType,ContentInfo,Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignedCms(SubjectIdentifierType,ContentInfo,Boolean)\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Certificates\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Certificates\n  nameWithType: SignedCms.Certificates\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Certificates\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2Collection\n  nameWithType: X509Certificate2Collection\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n- uid: System.Security.Cryptography.Pkcs.SignedCms.CheckHash\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: CheckHash()\n  nameWithType: SignedCms.CheckHash()\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.CheckHash()\n- uid: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: CheckSignature(Boolean)\n  nameWithType: SignedCms.CheckSignature(Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(Boolean)\n- uid: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: CheckSignature(X509Certificate2Collection,Boolean)\n  nameWithType: SignedCms.CheckSignature(X509Certificate2Collection,Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(X509Certificate2Collection,Boolean)\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: ComputeSignature()\n  nameWithType: SignedCms.ComputeSignature()\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature()\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: ComputeSignature(CmsSigner)\n  nameWithType: SignedCms.ComputeSignature(CmsSigner)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(CmsSigner)\n- uid: System.Security.Cryptography.Pkcs.CmsSigner\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: CmsSigner\n  nameWithType: CmsSigner\n  fullName: System.Security.Cryptography.Pkcs.CmsSigner\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner,System.Boolean)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: ComputeSignature(CmsSigner,Boolean)\n  nameWithType: SignedCms.ComputeSignature(CmsSigner,Boolean)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(CmsSigner,Boolean)\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ContentInfo\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: ContentInfo\n  nameWithType: SignedCms.ContentInfo\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.ContentInfo\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Decode(Byte[])\n  nameWithType: SignedCms.Decode(Byte[])\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Decode(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Detached\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Detached\n  nameWithType: SignedCms.Detached\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Detached\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Encode\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Encode()\n  nameWithType: SignedCms.Encode()\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Encode()\n- uid: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Int32)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: RemoveSignature(Int32)\n  nameWithType: SignedCms.RemoveSignature(Int32)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: RemoveSignature(SignerInfo)\n  nameWithType: SignedCms.RemoveSignature(SignerInfo)\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(SignerInfo)\n- uid: System.Security.Cryptography.Pkcs.SignerInfo\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: SignerInfo\n  nameWithType: SignerInfo\n  fullName: System.Security.Cryptography.Pkcs.SignerInfo\n- uid: System.Security.Cryptography.Pkcs.SignedCms.SignerInfos\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignerInfos\n  nameWithType: SignedCms.SignerInfos\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.SignerInfos\n- uid: System.Security.Cryptography.Pkcs.SignerInfoCollection\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: SignerInfoCollection\n  nameWithType: SignerInfoCollection\n  fullName: System.Security.Cryptography.Pkcs.SignerInfoCollection\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Version\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Version\n  nameWithType: SignedCms.Version\n  fullName: System.Security.Cryptography.Pkcs.SignedCms.Version\n- uid: System.Security.Cryptography.Pkcs.SignedCms.#ctor*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignedCms\n  nameWithType: SignedCms.SignedCms\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Certificates*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Certificates\n  nameWithType: SignedCms.Certificates\n- uid: System.Security.Cryptography.Pkcs.SignedCms.CheckHash*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: CheckHash\n  nameWithType: SignedCms.CheckHash\n- uid: System.Security.Cryptography.Pkcs.SignedCms.CheckSignature*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: CheckSignature\n  nameWithType: SignedCms.CheckSignature\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: ComputeSignature\n  nameWithType: SignedCms.ComputeSignature\n- uid: System.Security.Cryptography.Pkcs.SignedCms.ContentInfo*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: ContentInfo\n  nameWithType: SignedCms.ContentInfo\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Decode*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Decode\n  nameWithType: SignedCms.Decode\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Detached*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Detached\n  nameWithType: SignedCms.Detached\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Encode*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Encode\n  nameWithType: SignedCms.Encode\n- uid: System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: RemoveSignature\n  nameWithType: SignedCms.RemoveSignature\n- uid: System.Security.Cryptography.Pkcs.SignedCms.SignerInfos*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: SignerInfos\n  nameWithType: SignedCms.SignerInfos\n- uid: System.Security.Cryptography.Pkcs.SignedCms.Version*\n  parent: System.Security.Cryptography.Pkcs.SignedCms\n  isExternal: false\n  name: Version\n  nameWithType: SignedCms.Version\n"}