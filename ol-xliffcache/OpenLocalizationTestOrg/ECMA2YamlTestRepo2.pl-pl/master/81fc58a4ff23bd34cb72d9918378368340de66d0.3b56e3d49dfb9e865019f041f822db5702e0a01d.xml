{"nodes":[{"pos":[1125,1210],"content":"Converts a <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to base 64.","needQuote":true,"needEscape":true,"source":"Converts a <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> to base 64."},{"pos":[1222,1328],"content":"Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.","pos":[0,106]}]},{"pos":[2539,2647],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class."},{"pos":[3250,3318],"content":"Gets a value indicating whether the current transform can be reused.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current transform can be reused.","pos":[0,68]}]},{"pos":[4114,4182],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[4771,4842],"content":"Gets a value that indicates whether multiple blocks can be transformed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether multiple blocks can be transformed.","pos":[0,71]}]},{"pos":[4854,4965],"content":"In the current implementation, only one block can be transformed at a time, so this property is always <ph id=\"ph1\">`false`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"In the current implementation, only one block can be transformed at a time, so this property is always `false`."},{"pos":[5753,5823],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6320,6423],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>."},{"pos":[6436,6797],"content":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.ToBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is a simple call to &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;.","pos":[0,94],"source":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>."},{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the &lt;xref:System.Security.Cryptography.ToBase64Transform&gt; to be reallocated for other purposes.","pos":[101,243],"source":"       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.ToBase64Transform> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[244,359],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[7991,8124],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class."},{"pos":[8137,9092],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.ToBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.ToBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.ToBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.ToBase64Transform> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.Cryptography.ToBase64Transform&gt;.","pos":[0,101],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.ToBase64Transform>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Security.Cryptography.ToBase64Transform&gt; in an unusable state.","pos":[102,209],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.ToBase64Transform> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.Cryptography.ToBase64Transform&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.ToBase64Transform&gt; was occupying.","pos":[210,453],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.ToBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.ToBase64Transform> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[460,634],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.Cryptography.ToBase64Transform&gt;.","pos":[640,775],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.ToBase64Transform&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[776,950],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method."}]},{"pos":[9700,9859],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> and optionally releases the managed resources."},{"pos":[9872,10376],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.ToBase64Transform> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the disposing parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[82,185],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with disposing set to <ph id=\"ph3\">`false`</ph>.","pos":[186,245],"source":"`Finalize` invokes `Dispose` with disposing set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.ToBase64Transform&gt; references.","pos":[252,432],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.ToBase64Transform> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[433,502],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[10532,10741],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[11234,11347],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>."},{"pos":[11932,11958],"content":"Gets the input block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the input block size.","pos":[0,26]}]},{"pos":[11970,12026],"content":"The input block size for this transformation is 3 bytes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The input block size for this transformation is 3 bytes.","pos":[0,56]}]},{"pos":[12797,12840],"content":"The size of the input data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the input data blocks in bytes.","pos":[0,43]}]},{"pos":[13371,13398],"content":"Gets the output block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the output block size.","pos":[0,27]}]},{"pos":[13410,13467],"content":"The output block size for this transformation is 4 bytes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The output block size for this transformation is 4 bytes.","pos":[0,57]}]},{"pos":[14245,14289],"content":"The size of the output data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the output data blocks in bytes.","pos":[0,44]}]},{"pos":[15049,15185],"content":"Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.","pos":[0,136]}]},{"pos":[15197,15564],"content":"The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.  The TransformBlock method transforms an input block of 24 bits into 32 bits of character data.  You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.  The TransformBlock method transforms an input block of 24 bits into 32 bits of character data.  You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.","pos":[0,367],"nodes":[{"content":"The &lt;xref:System.Security.Cryptography.ToBase64Transform&gt; class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.","pos":[0,161],"source":"The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes."},{"content":"The TransformBlock method transforms an input block of 24 bits into 32 bits of character data.","pos":[163,257]},{"content":"You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.","pos":[259,367]}]}]},{"pos":[16438,16470],"content":"The input to compute to base 64.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to compute to base 64.","pos":[0,32]}]},{"pos":[16537,16605],"content":"The offset into the input byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the input byte array from which to begin using data.","pos":[0,68]}]},{"pos":[16671,16730],"content":"The number of bytes in the input byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the input byte array to use as data.","pos":[0,59]}]},{"pos":[16799,16839],"content":"The output to which to write the result.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output to which to write the result.","pos":[0,40]}]},{"pos":[16907,16978],"content":"The offset into the output byte array from which to begin writing data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the output byte array from which to begin writing data.","pos":[0,71]}]},{"pos":[17035,17063],"content":"The number of bytes written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes written.","pos":[0,28]}]},{"pos":[17259,17372],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has already been disposed.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed."},{"pos":[17521,17548],"content":"The data size is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data size is not valid.","pos":[0,27]}]},{"pos":[17644,17803],"content":"The <code>inputBuffer</code> parameter contains an invalid offset length.       -or-       The <code>inputCount</code> parameter contains an invalid value.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an invalid offset length.","pos":[0,73],"source":"The <code>inputBuffer</code> parameter contains an invalid offset length."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an invalid value.","pos":[80,155],"source":"       -or-       The <code>inputCount</code> parameter contains an invalid value."}]},{"pos":[17907,18010],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18125,18195],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter requires a non-negative number.","needQuote":true,"needEscape":true,"source":"The <code>inputBuffer</code> parameter requires a non-negative number."},{"pos":[18794,18863],"content":"Converts the specified region of the specified byte array to base 64.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified region of the specified byte array to base 64.","pos":[0,69]}]},{"pos":[19702,19734],"content":"The input to convert to base 64.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to convert to base 64.","pos":[0,32]}]},{"pos":[19801,19863],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[19929,19982],"content":"The number of bytes in the byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]},{"pos":[20040,20072],"content":"The computed base 64 conversion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed base 64 conversion.","pos":[0,32]}]},{"pos":[20273,20386],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has already been disposed.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed."},{"pos":[20482,20641],"content":"The <code>inputBuffer</code> parameter contains an invalid offset length.       -or-       The <code>inputCount</code> parameter contains an invalid value.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an invalid offset length.","pos":[0,73],"source":"The <code>inputBuffer</code> parameter contains an invalid offset length."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an invalid value.","pos":[80,155],"source":"       -or-       The <code>inputCount</code> parameter contains an invalid value."}]},{"pos":[20745,20848],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[20963,21033],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter requires a non-negative number.","needQuote":true,"needEscape":true,"source":"The <code>inputBuffer</code> parameter requires a non-negative number."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ToBase64Transform\n  id: ToBase64Transform\n  children:\n  - System.Security.Cryptography.ToBase64Transform.#ctor\n  - System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n  - System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.ToBase64Transform.Clear\n  - System.Security.Cryptography.ToBase64Transform.Dispose\n  - System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)\n  - System.Security.Cryptography.ToBase64Transform.Finalize\n  - System.Security.Cryptography.ToBase64Transform.InputBlockSize\n  - System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n  - System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: ToBase64Transform\n  nameWithType: ToBase64Transform\n  fullName: System.Security.Cryptography.ToBase64Transform\n  type: Class\n  summary: Converts a <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> to base 64.\n  remarks: Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.\n  example:\n  - \"The following code example demonstrates how to use members of the ToBase64Transform class.  \\n  \\n [!code-cs[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/csharp/t-system.security.crypto_103_1.cs)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/visualbasic/t-system.security.crypto_103_1.vb)]\\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/cpp/t-system.security.crypto_103_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ToBase64Transform : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: ToBase64Transform()\n  nameWithType: ToBase64Transform.ToBase64Transform()\n  fullName: System.Security.Cryptography.ToBase64Transform.ToBase64Transform()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class.\n  syntax:\n    content: public ToBase64Transform ();\n    parameters: []\n  overload: System.Security.Cryptography.ToBase64Transform.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: ToBase64Transform.CanReuseTransform\n  fullName: System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current transform can be reused.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the CanReuseTransform property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/csharp/p-system.security.crypto_75_1.cs)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/visualbasic/p-system.security.crypto_75_1.vb)]\\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/cpp/p-system.security.crypto_75_1.cpp)]\"\n  syntax:\n    content: public virtual bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ToBase64Transform.CanReuseTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: ToBase64Transform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value that indicates whether multiple blocks can be transformed.\n  remarks: In the current implementation, only one block can be transformed at a time, so this property is always `false`.\n  example:\n  - \"The following code example demonstrates how to call the CanTransformMultipleBlocks method to verify that multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/csharp/p-system.security.crypto_69_1.cs)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/visualbasic/p-system.security.crypto_69_1.vb)]\\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/cpp/p-system.security.crypto_69_1.cpp)]\"\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.Clear\n  id: Clear\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ToBase64Transform.Clear()\n  fullName: System.Security.Cryptography.ToBase64Transform.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>.\n  remarks: \"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.ToBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates how to call the Clear method to free up unused resources by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/csharp/m-system.security.crypto_100_1.cs)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/visualbasic/m-system.security.crypto_100_1.vb)]\\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/cpp/m-system.security.crypto_100_1.cpp)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.ToBase64Transform.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ToBase64Transform.Dispose()\n  fullName: System.Security.Cryptography.ToBase64Transform.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.ToBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.ToBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.ToBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.ToBase64Transform> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.ToBase64Transform.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ToBase64Transform.Dispose(Boolean)\n  fullName: System.Security.Cryptography.ToBase64Transform.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.ToBase64Transform> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Security.Cryptography.ToBase64Transform.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: ToBase64Transform.Finalize()\n  fullName: System.Security.Cryptography.ToBase64Transform.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>.\n  syntax:\n    content: ~ToBase64Transform ();\n    parameters: []\n  overload: System.Security.Cryptography.ToBase64Transform.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: ToBase64Transform.InputBlockSize\n  fullName: System.Security.Cryptography.ToBase64Transform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the input block size.\n  remarks: The input block size for this transformation is 3 bytes.\n  example:\n  - \"The following code example demonstrates how to call the InputBlockSize property to retrieve the input block size of the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/csharp/p-system.security.crypto_70_1.cs)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/visualbasic/p-system.security.crypto_70_1.vb)]\\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/cpp/p-system.security.crypto_70_1.cpp)]\"\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the input data blocks in bytes.\n  overload: System.Security.Cryptography.ToBase64Transform.InputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: ToBase64Transform.OutputBlockSize\n  fullName: System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the output block size.\n  remarks: The output block size for this transformation is 4 bytes.\n  example:\n  - \"The following code example demonstrates how to call the OutputBlockSize property to create a new byte array with the size of the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/csharp/p-system.security.crypto_8_1.cs)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/visualbasic/p-system.security.crypto_8_1.vb)]\\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/cpp/p-system.security.crypto_8_1.cpp)]\"\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the output data blocks in bytes.\n  overload: System.Security.Cryptography.ToBase64Transform.OutputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.\n  remarks: The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.  The TransformBlock method transforms an input block of 24 bits into 32 bits of character data.  You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.\n  example:\n  - \"The following code example demonstrates how to call the TransformBlock method to iterate through `inputBytes` transforming by `blockSize`. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/csharp/918bcb0d-40f9-46ec-886b-_1.cs)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/visualbasic/918bcb0d-40f9-46ec-886b-_1.vb)]\\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/cpp/918bcb0d-40f9-46ec-886b-_1.cpp)]\"\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to compute to base 64.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the input byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the input byte array to use as data.\n    - id: outputBuffer\n      type: System.Byte[]\n      description: The output to which to write the result.\n    - id: outputOffset\n      type: System.Int32\n      description: The offset into the output byte array from which to begin writing data.\n    return:\n      type: System.Int32\n      description: The number of bytes written.\n  overload: System.Security.Cryptography.ToBase64Transform.TransformBlock*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The data size is not valid.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>inputBuffer</code> parameter contains an invalid offset length.  \\n  \\n -or-  \\n  \\n The <code>inputCount</code> parameter contains an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>inputBuffer</code> parameter requires a non-negative number.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Converts the specified region of the specified byte array to base 64.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the TransformFinalBlock method to transform the final block of data. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cs[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/csharp/028d2418-e06c-423a-a777-_1.cs)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/visualbasic/028d2418-e06c-423a-a777-_1.vb)]\\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/cpp/028d2418-e06c-423a-a777-_1.cpp)]\"\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to convert to base 64.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n    return:\n      type: System.Byte[]\n      description: The computed base 64 conversion.\n  overload: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>inputBuffer</code> parameter contains an invalid offset length.  \\n  \\n -or-  \\n  \\n The <code>inputCount</code> parameter contains an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>inputBuffer</code> parameter requires a non-negative number.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.ToBase64Transform.#ctor\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: ToBase64Transform()\n  nameWithType: ToBase64Transform.ToBase64Transform()\n  fullName: System.Security.Cryptography.ToBase64Transform.ToBase64Transform()\n- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ToBase64Transform.CanReuseTransform\n  fullName: System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ToBase64Transform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.ToBase64Transform.Clear\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Clear()\n  nameWithType: ToBase64Transform.Clear()\n  fullName: System.Security.Cryptography.ToBase64Transform.Clear()\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Dispose()\n  nameWithType: ToBase64Transform.Dispose()\n  fullName: System.Security.Cryptography.ToBase64Transform.Dispose()\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ToBase64Transform.Dispose(Boolean)\n  fullName: System.Security.Cryptography.ToBase64Transform.Dispose(Boolean)\n- uid: System.Security.Cryptography.ToBase64Transform.Finalize\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Finalize()\n  nameWithType: ToBase64Transform.Finalize()\n  fullName: System.Security.Cryptography.ToBase64Transform.Finalize()\n- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ToBase64Transform.InputBlockSize\n  fullName: System.Security.Cryptography.ToBase64Transform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ToBase64Transform.OutputBlockSize\n  fullName: System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.ToBase64Transform.#ctor*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: ToBase64Transform\n  nameWithType: ToBase64Transform.ToBase64Transform\n- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ToBase64Transform.CanReuseTransform\n- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ToBase64Transform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.ToBase64Transform.Clear*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Clear\n  nameWithType: ToBase64Transform.Clear\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Dispose\n  nameWithType: ToBase64Transform.Dispose\n- uid: System.Security.Cryptography.ToBase64Transform.Finalize*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Finalize\n  nameWithType: ToBase64Transform.Finalize\n- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ToBase64Transform.InputBlockSize\n- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ToBase64Transform.OutputBlockSize\n- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: TransformBlock\n  nameWithType: ToBase64Transform.TransformBlock\n- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: TransformFinalBlock\n  nameWithType: ToBase64Transform.TransformFinalBlock\n"}