{"nodes":[{"pos":[1020,1197],"content":"Allows security actions for <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows security actions for <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be applied to code using declarative security.","pos":[0,145],"source":"Allows security actions for <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> to be applied to code using declarative security."},{"content":"This class cannot be inherited.","pos":[146,177]}]},{"pos":[1210,1617],"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","pos":[0,405],"nodes":[{"content":"The scope of the declaration that is allowed depends on the &lt;xref:System.Security.Permissions.SecurityAction&gt; that is used.","pos":[0,123],"source":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."},{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[130,280]},{"content":"Security attributes are used only for declarative security.","pos":[281,340]},{"content":"For imperative security, use the corresponding permission class.","pos":[341,405]}]}]},{"pos":[2986,3186],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.RegistryPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."},{"pos":[3405,3487],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values."},{"pos":[3671,3784],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>action</code> parameter is not a valid <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."},{"pos":[4199,4256],"content":"Gets or sets full access for the specified registry keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets full access for the specified registry keys.","pos":[0,57]}]},{"pos":[4268,4324],"content":"Key access implies access to all subkeys and all values.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Key access implies access to all subkeys and all values.","pos":[0,56]}]},{"pos":[4437,4503],"content":"A semicolon-separated list of registry key paths, for full access.","needQuote":true,"needEscape":true,"nodes":[{"content":"A semicolon-separated list of registry key paths, for full access.","pos":[0,66]}]},{"pos":[4693,4771],"content":"The get accessor is called; it is only provided for C# compiler compatibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The get accessor is called; it is only provided for C# compiler compatibility.","pos":[0,78]}]},{"pos":[5266,5333],"content":"Gets or sets change access control for the specified registry keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets change access control for the specified registry keys.","pos":[0,67]}]},{"pos":[5346,5687],"content":"Key access implies access to all values it contains and all variables under it.      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions for the given registry keys.  The ability to change an ACL is an important permission and should be granted with caution.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Key access implies access to all values it contains and all variables under it.","pos":[0,79]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions for the given registry keys.","pos":[85,245],"source":"      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions for the given registry keys."},{"content":"The ability to change an ACL is an important permission and should be granted with caution.","pos":[247,338]}]},{"pos":[5817,5895],"content":"A semicolon-separated list of registry key paths, for change access control. .","needQuote":true,"needEscape":true,"nodes":[{"content":"A semicolon-separated list of registry key paths, for change access control. .","pos":[0,78],"nodes":[{"content":"A semicolon-separated list of registry key paths, for change access control.","pos":[0,76]},{"content":".","pos":[77,78]}]}]},{"pos":[6431,6496],"content":"Gets or sets create-level access for the specified registry keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets create-level access for the specified registry keys.","pos":[0,65]}]},{"pos":[6508,6587],"content":"Key access implies access to all values it contains and all variables under it.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Key access implies access to all values it contains and all variables under it.","pos":[0,79]}]},{"pos":[6703,6777],"content":"A semicolon-separated list of registry key paths, for create-level access.","needQuote":true,"needEscape":true,"nodes":[{"content":"A semicolon-separated list of registry key paths, for create-level access.","pos":[0,74]}]},{"pos":[7354,7448],"content":"Creates and returns a new <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns a new <xref href=\"System.Security.Permissions.RegistryPermission\"></xref>."},{"pos":[7461,7775],"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[0,312],"nodes":[{"content":"This method should only be called by the security system, never by application code.","pos":[0,84]},{"content":"At compile time, attributes convert security declarations to a serialized form in metadata.","pos":[91,182]},{"content":"Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[183,312]}]}]},{"pos":[7955,8060],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to this attribute.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> that corresponds to this attribute."},{"pos":[8583,8640],"content":"Gets or sets read access for the specified registry keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets read access for the specified registry keys.","pos":[0,57]}]},{"pos":[8652,8731],"content":"Key access implies access to all values it contains and all variables under it.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Key access implies access to all values it contains and all variables under it.","pos":[0,79]}]},{"pos":[8845,8911],"content":"A semicolon-separated list of registry key paths, for read access.","needQuote":true,"needEscape":true,"nodes":[{"content":"A semicolon-separated list of registry key paths, for read access.","pos":[0,66]}]},{"pos":[9487,9552],"content":"Gets or sets view access control for the specified registry keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets view access control for the specified registry keys.","pos":[0,65]}]},{"pos":[9565,9904],"content":"Key access implies access to all values it contains and all variables under it.      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions for the given registry keys.  The ability to view an ACL is an important permission and should be granted with caution.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Key access implies access to all values it contains and all variables under it.","pos":[0,79]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions for the given registry keys.","pos":[85,245],"source":"      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions for the given registry keys."},{"content":"The ability to view an ACL is an important permission and should be granted with caution.","pos":[247,336]}]},{"pos":[10032,10106],"content":"A semicolon-separated list of registry key paths, for view access control.","needQuote":true,"needEscape":true,"nodes":[{"content":"A semicolon-separated list of registry key paths, for view access control.","pos":[0,74]}]},{"pos":[10675,10753],"content":"Gets or sets a specified set of registry keys that can be viewed and modified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a specified set of registry keys that can be viewed and modified.","pos":[0,78]}]},{"pos":[10766,11565],"content":"Key access implies access to all values it contains and all variables under it.       This property specifies <xref:System.Security.Permissions.RegistryPermissionAttribute.Create%2A>, <xref:System.Security.Permissions.RegistryPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.RegistryPermissionAttribute.Write%2A> access rights for the specified keys and their values. The access rights are for registry data only; they do not include the access control rights <xref:System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl%2A> or <xref:System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl%2A>.      > [!NOTE] >  The get accessor is provided for C# compiler compatibility. The C# compiler requires attribute properties to be read/write.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Key access implies access to all values it contains and all variables under it.","pos":[0,79]},{"content":"This property specifies &lt;xref:System.Security.Permissions.RegistryPermissionAttribute.Create%2A&gt;, &lt;xref:System.Security.Permissions.RegistryPermissionAttribute.Read%2A&gt;, and &lt;xref:System.Security.Permissions.RegistryPermissionAttribute.Write%2A&gt; access rights for the specified keys and their values.","pos":[86,386],"source":"       This property specifies <xref:System.Security.Permissions.RegistryPermissionAttribute.Create%2A>, <xref:System.Security.Permissions.RegistryPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.RegistryPermissionAttribute.Write%2A> access rights for the specified keys and their values."},{"content":"The access rights are for registry data only; they do not include the access control rights &lt;xref:System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl%2A&gt; or &lt;xref:System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl%2A&gt;.","pos":[387,652],"source":" The access rights are for registry data only; they do not include the access control rights <xref:System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl%2A> or <xref:System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The get accessor is provided for C# compiler compatibility.","pos":[658,730],"source":"      > [!NOTE] >  The get accessor is provided for C# compiler compatibility."},{"content":"The C# compiler requires attribute properties to be read/write.","pos":[731,794]}]},{"pos":[11689,11774],"content":"A semicolon-separated list of registry key paths, for create, read, and write access.","needQuote":true,"needEscape":true,"nodes":[{"content":"A semicolon-separated list of registry key paths, for create, read, and write access.","pos":[0,85]}]},{"pos":[11974,12052],"content":"The get accessor is called; it is only provided for C# compiler compatibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"The get accessor is called; it is only provided for C# compiler compatibility.","pos":[0,78]}]},{"pos":[12477,12535],"content":"Gets or sets write access for the specified registry keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets write access for the specified registry keys.","pos":[0,58]}]},{"pos":[12547,12626],"content":"Key access implies access to all values it contains and all variables under it.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Key access implies access to all values it contains and all variables under it.","pos":[0,79]}]},{"pos":[12741,12808],"content":"A semicolon-separated list of registry key paths, for write access.","needQuote":true,"needEscape":true,"nodes":[{"content":"A semicolon-separated list of registry key paths, for write access.","pos":[0,67]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.RegistryPermissionAttribute\n  id: RegistryPermissionAttribute\n  children:\n  - System.Security.Permissions.RegistryPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.RegistryPermissionAttribute.All\n  - System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl\n  - System.Security.Permissions.RegistryPermissionAttribute.Create\n  - System.Security.Permissions.RegistryPermissionAttribute.CreatePermission\n  - System.Security.Permissions.RegistryPermissionAttribute.Read\n  - System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl\n  - System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify\n  - System.Security.Permissions.RegistryPermissionAttribute.Write\n  langs:\n  - csharp\n  name: RegistryPermissionAttribute\n  nameWithType: RegistryPermissionAttribute\n  fullName: System.Security.Permissions.RegistryPermissionAttribute\n  type: Class\n  summary: Allows security actions for <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.\n  remarks: \"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RegistryPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: RegistryPermissionAttribute(SecurityAction)\n  nameWithType: RegistryPermissionAttribute.RegistryPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.RegistryPermissionAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.RegistryPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  syntax:\n    content: public RegistryPermissionAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.\n  overload: System.Security.Permissions.RegistryPermissionAttribute.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>action</code> parameter is not a valid <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.All\n  id: All\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: All\n  nameWithType: RegistryPermissionAttribute.All\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.All\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets full access for the specified registry keys.\n  remarks: Key access implies access to all subkeys and all values.\n  syntax:\n    content: public string All { get; set; }\n    return:\n      type: System.String\n      description: A semicolon-separated list of registry key paths, for full access.\n  overload: System.Security.Permissions.RegistryPermissionAttribute.All*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The get accessor is called; it is only provided for C# compiler compatibility.\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl\n  id: ChangeAccessControl\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: ChangeAccessControl\n  nameWithType: RegistryPermissionAttribute.ChangeAccessControl\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets change access control for the specified registry keys.\n  remarks: \"Key access implies access to all values it contains and all variables under it.  \\n  \\n> [!IMPORTANT]\\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions for the given registry keys.  The ability to change an ACL is an important permission and should be granted with caution.\"\n  syntax:\n    content: public string ChangeAccessControl { get; set; }\n    return:\n      type: System.String\n      description: A semicolon-separated list of registry key paths, for change access control. .\n  overload: System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Create\n  id: Create\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: Create\n  nameWithType: RegistryPermissionAttribute.Create\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.Create\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets create-level access for the specified registry keys.\n  remarks: Key access implies access to all values it contains and all variables under it.\n  syntax:\n    content: public string Create { get; set; }\n    return:\n      type: System.String\n      description: A semicolon-separated list of registry key paths, for create-level access.\n  overload: System.Security.Permissions.RegistryPermissionAttribute.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: RegistryPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new <xref href=\"System.Security.Permissions.RegistryPermission\"></xref>.\n  remarks: \"This method should only be called by the security system, never by application code.  \\n  \\n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.\"\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> that corresponds to this attribute.\n  overload: System.Security.Permissions.RegistryPermissionAttribute.CreatePermission*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Read\n  id: Read\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: Read\n  nameWithType: RegistryPermissionAttribute.Read\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.Read\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets read access for the specified registry keys.\n  remarks: Key access implies access to all values it contains and all variables under it.\n  syntax:\n    content: public string Read { get; set; }\n    return:\n      type: System.String\n      description: A semicolon-separated list of registry key paths, for read access.\n  overload: System.Security.Permissions.RegistryPermissionAttribute.Read*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl\n  id: ViewAccessControl\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: ViewAccessControl\n  nameWithType: RegistryPermissionAttribute.ViewAccessControl\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets view access control for the specified registry keys.\n  remarks: \"Key access implies access to all values it contains and all variables under it.  \\n  \\n> [!IMPORTANT]\\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions for the given registry keys.  The ability to view an ACL is an important permission and should be granted with caution.\"\n  syntax:\n    content: public string ViewAccessControl { get; set; }\n    return:\n      type: System.String\n      description: A semicolon-separated list of registry key paths, for view access control.\n  overload: System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify\n  id: ViewAndModify\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: ViewAndModify\n  nameWithType: RegistryPermissionAttribute.ViewAndModify\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a specified set of registry keys that can be viewed and modified.\n  remarks: \"Key access implies access to all values it contains and all variables under it.  \\n  \\n This property specifies <xref:System.Security.Permissions.RegistryPermissionAttribute.Create%2A>, <xref:System.Security.Permissions.RegistryPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.RegistryPermissionAttribute.Write%2A> access rights for the specified keys and their values. The access rights are for registry data only; they do not include the access control rights <xref:System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl%2A> or <xref:System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl%2A>.  \\n  \\n> [!NOTE]\\n>  The get accessor is provided for C# compiler compatibility. The C# compiler requires attribute properties to be read/write.\"\n  syntax:\n    content: public string ViewAndModify { get; set; }\n    return:\n      type: System.String\n      description: A semicolon-separated list of registry key paths, for create, read, and write access.\n  overload: System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The get accessor is called; it is only provided for C# compiler compatibility.\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Write\n  id: Write\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  langs:\n  - csharp\n  name: Write\n  nameWithType: RegistryPermissionAttribute.Write\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.Write\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets write access for the specified registry keys.\n  remarks: Key access implies access to all values it contains and all variables under it.\n  syntax:\n    content: public string Write { get; set; }\n    return:\n      type: System.String\n      description: A semicolon-separated list of registry key paths, for write access.\n  overload: System.Security.Permissions.RegistryPermissionAttribute.Write*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  isExternal: false\n  name: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Security.Permissions.RegistryPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: RegistryPermissionAttribute(SecurityAction)\n  nameWithType: RegistryPermissionAttribute.RegistryPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.RegistryPermissionAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.RegistryPermissionAttribute.All\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: All\n  nameWithType: RegistryPermissionAttribute.All\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.All\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: ChangeAccessControl\n  nameWithType: RegistryPermissionAttribute.ChangeAccessControl\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Create\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: Create\n  nameWithType: RegistryPermissionAttribute.Create\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.Create\n- uid: System.Security.Permissions.RegistryPermissionAttribute.CreatePermission\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: RegistryPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Read\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: Read\n  nameWithType: RegistryPermissionAttribute.Read\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.Read\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: ViewAccessControl\n  nameWithType: RegistryPermissionAttribute.ViewAccessControl\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: ViewAndModify\n  nameWithType: RegistryPermissionAttribute.ViewAndModify\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Write\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: Write\n  nameWithType: RegistryPermissionAttribute.Write\n  fullName: System.Security.Permissions.RegistryPermissionAttribute.Write\n- uid: System.Security.Permissions.RegistryPermissionAttribute.#ctor*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: RegistryPermissionAttribute\n  nameWithType: RegistryPermissionAttribute.RegistryPermissionAttribute\n- uid: System.Security.Permissions.RegistryPermissionAttribute.All*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: All\n  nameWithType: RegistryPermissionAttribute.All\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: ChangeAccessControl\n  nameWithType: RegistryPermissionAttribute.ChangeAccessControl\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Create*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: Create\n  nameWithType: RegistryPermissionAttribute.Create\n- uid: System.Security.Permissions.RegistryPermissionAttribute.CreatePermission*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: RegistryPermissionAttribute.CreatePermission\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Read*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: Read\n  nameWithType: RegistryPermissionAttribute.Read\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: ViewAccessControl\n  nameWithType: RegistryPermissionAttribute.ViewAccessControl\n- uid: System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: ViewAndModify\n  nameWithType: RegistryPermissionAttribute.ViewAndModify\n- uid: System.Security.Permissions.RegistryPermissionAttribute.Write*\n  parent: System.Security.Permissions.RegistryPermissionAttribute\n  isExternal: false\n  name: Write\n  nameWithType: RegistryPermissionAttribute.Write\n"}