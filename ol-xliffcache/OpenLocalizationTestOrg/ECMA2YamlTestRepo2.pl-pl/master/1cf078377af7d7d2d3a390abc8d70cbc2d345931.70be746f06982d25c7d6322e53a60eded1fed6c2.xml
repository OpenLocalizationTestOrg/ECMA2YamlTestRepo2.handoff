{"nodes":[{"pos":[1336,1482],"content":"Represents an exception handler in a byte array of IL to be passed to a method such as <xref:System.Reflection.Emit.MethodBuilder.SetMethodBody*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an exception handler in a byte array of IL to be passed to a method such as &lt;xref:System.Reflection.Emit.MethodBuilder.SetMethodBody*&gt;.","pos":[0,146],"source":"Represents an exception handler in a byte array of IL to be passed to a method such as <xref:System.Reflection.Emit.MethodBuilder.SetMethodBody*>."}]},{"pos":[2629,2760],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified parameters.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> class with the specified parameters."},{"pos":[3055,3132],"content":"The byte offset of the first instruction protected by this exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte offset of the first instruction protected by this exception handler.","pos":[0,77]}]},{"pos":[3197,3253],"content":"The number of bytes protected by this exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes protected by this exception handler.","pos":[0,56]}]},{"pos":[3321,3513],"content":"The byte offset of the beginning of the filter code. The filter code ends at the first instruction of the handler block. For non-filter exception handlers, specify 0 (zero) for this parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte offset of the beginning of the filter code. The filter code ends at the first instruction of the handler block. For non-filter exception handlers, specify 0 (zero) for this parameter.","pos":[0,192],"nodes":[{"content":"The byte offset of the beginning of the filter code.","pos":[0,52]},{"content":"The filter code ends at the first instruction of the handler block.","pos":[53,120]},{"content":"For non-filter exception handlers, specify 0 (zero) for this parameter.","pos":[121,192]}]}]},{"pos":[3582,3649],"content":"The byte offset of the first instruction of this exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte offset of the first instruction of this exception handler.","pos":[0,67]}]},{"pos":[3718,3764],"content":"The number of bytes in this exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in this exception handler.","pos":[0,46]}]},{"pos":[3860,3935],"content":"One of the enumeration values that specifies the kind of exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the kind of exception handler.","pos":[0,75]}]},{"pos":[4009,4112],"content":"The token of the exception type handled by this exception handler. If not applicable, specify 0 (zero).","needQuote":true,"needEscape":true,"nodes":[{"content":"The token of the exception type handled by this exception handler. If not applicable, specify 0 (zero).","pos":[0,103],"nodes":[{"content":"The token of the exception type handled by this exception handler.","pos":[0,66]},{"content":"If not applicable, specify 0 (zero).","pos":[67,103]}]}]},{"pos":[4300,4446],"content":"<ph id=\"ph1\">&lt;code&gt;tryOffset&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;filterOffset&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;handlerOffset&lt;/code&gt;</ph>, <ph id=\"ph4\">&lt;code&gt;tryLength&lt;/code&gt;</ph>, or <ph id=\"ph5\">&lt;code&gt;handlerLength&lt;/code&gt;</ph> are negative.","needQuote":true,"needEscape":true,"source":"<code>tryOffset</code>, <code>filterOffset</code>, <code>handlerOffset</code>, <code>tryLength</code>, or <code>handlerLength</code> are negative."},{"pos":[4864,5002],"content":"Indicates whether this instance of the <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is equal to a specified object.","needQuote":true,"needEscape":true,"source":"Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to a specified object."},{"pos":[5143,5182],"content":"The object to compare this instance to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare this instance to.","pos":[0,39]}]},{"pos":[5241,5425],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> and this instance are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> and this instance are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6002,6197],"content":"Indicates whether this instance of the <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is equal to another <bpt id=\"p2\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to another <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object."},{"pos":[6392,6449],"content":"The exception handler object to compare this instance to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception handler object to compare this instance to.","pos":[0,57]}]},{"pos":[6508,6694],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p2\">&lt;/code&gt;</ept> and this instance are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>other</code> and this instance are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7197,7258],"content":"Gets the token of the exception type handled by this handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the token of the exception type handled by this handler.","pos":[0,61]}]},{"pos":[7377,7454],"content":"The token of the exception type handled by this handler, or 0 if none exists.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token of the exception type handled by this handler, or 0 if none exists.","pos":[0,77]}]},{"pos":[7939,8018],"content":"Gets the byte offset at which the filter code for the exception handler begins.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the byte offset at which the filter code for the exception handler begins.","pos":[0,79]}]},{"pos":[8131,8210],"content":"The byte offset at which the filter code begins, or 0 if no filter  is present.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte offset at which the filter code begins, or 0 if no filter  is present.","pos":[0,79]}]},{"pos":[8688,8724],"content":"Serves as the default hash function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serves as the default hash function.","pos":[0,36]}]},{"pos":[8859,8896],"content":"The hash code for the current object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code for the current object.","pos":[0,37]}]},{"pos":[9379,9431],"content":"Gets the length, in bytes, of the exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length, in bytes, of the exception handler.","pos":[0,52]}]},{"pos":[9545,9592],"content":"The length, in bytes, of the exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length, in bytes, of the exception handler.","pos":[0,47]}]},{"pos":[10077,10148],"content":"Gets the byte offset of the first instruction of the exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the byte offset of the first instruction of the exception handler.","pos":[0,71]}]},{"pos":[10262,10328],"content":"The byte offset of the first instruction of the exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte offset of the first instruction of the exception handler.","pos":[0,66]}]},{"pos":[10768,10850],"content":"Gets a value that represents the kind of exception handler this object represents.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that represents the kind of exception handler this object represents.","pos":[0,82]}]},{"pos":[11036,11111],"content":"One of the enumeration values that specifies the kind of exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the kind of exception handler.","pos":[0,75]}]},{"pos":[11844,11961],"content":"Determines whether two specified instances of <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> are equal.","needQuote":true,"needEscape":true,"source":"Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are equal."},{"pos":[12213,12241],"content":"The first object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first object to compare.","pos":[0,28]}]},{"pos":[12329,12358],"content":"The second object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second object to compare.","pos":[0,29]}]},{"pos":[12417,12607],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p3\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13357,13478],"content":"Determines whether two specified instances of <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> are not equal.","needQuote":true,"needEscape":true,"source":"Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are not equal."},{"pos":[13732,13760],"content":"The first object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first object to compare.","pos":[0,28]}]},{"pos":[13848,13877],"content":"The second object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second object to compare.","pos":[0,29]}]},{"pos":[13936,14130],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p3\">&lt;/code&gt;</ept> are not equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14595,14670],"content":"Gets the length, in bytes, of the code protected by this exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length, in bytes, of the code protected by this exception handler.","pos":[0,75]}]},{"pos":[14780,14850],"content":"The length, in bytes, of the code protected by this exception handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length, in bytes, of the code protected by this exception handler.","pos":[0,70]}]},{"pos":[15311,15401],"content":"Gets the byte offset at which the code that is protected by this exception handler begins.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the byte offset at which the code that is protected by this exception handler begins.","pos":[0,90]}]},{"pos":[15511,15596],"content":"The byte offset at which the code that is protected by this exception handler begins.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte offset at which the code that is protected by this exception handler begins.","pos":[0,85]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.ExceptionHandler\n  id: ExceptionHandler\n  children:\n  - System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  - System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  - System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  - System.Reflection.Emit.ExceptionHandler.FilterOffset\n  - System.Reflection.Emit.ExceptionHandler.GetHashCode\n  - System.Reflection.Emit.ExceptionHandler.HandlerLength\n  - System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  - System.Reflection.Emit.ExceptionHandler.Kind\n  - System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.TryLength\n  - System.Reflection.Emit.ExceptionHandler.TryOffset\n  langs:\n  - csharp\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n  type: Struct\n  summary: Represents an exception handler in a byte array of IL to be passed to a method such as <xref:System.Reflection.Emit.MethodBuilder.SetMethodBody*>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public struct ExceptionHandler : IEquatable<System.Reflection.Emit.ExceptionHandler>\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Reflection.Emit.ExceptionHandler>\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)'\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  nameWithType: ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> class with the specified parameters.\n  syntax:\n    content: public ExceptionHandler (int tryOffset, int tryLength, int filterOffset, int handlerOffset, int handlerLength, System.Reflection.ExceptionHandlingClauseOptions kind, int exceptionTypeToken);\n    parameters:\n    - id: tryOffset\n      type: System.Int32\n      description: The byte offset of the first instruction protected by this exception handler.\n    - id: tryLength\n      type: System.Int32\n      description: The number of bytes protected by this exception handler.\n    - id: filterOffset\n      type: System.Int32\n      description: The byte offset of the beginning of the filter code. The filter code ends at the first instruction of the handler block. For non-filter exception handlers, specify 0 (zero) for this parameter.\n    - id: handlerOffset\n      type: System.Int32\n      description: The byte offset of the first instruction of this exception handler.\n    - id: handlerLength\n      type: System.Int32\n      description: The number of bytes in this exception handler.\n    - id: kind\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: One of the enumeration values that specifies the kind of exception handler.\n    - id: exceptionTypeToken\n      type: System.Int32\n      description: The token of the exception type handled by this exception handler. If not applicable, specify 0 (zero).\n  overload: System.Reflection.Emit.ExceptionHandler.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>tryOffset</code>, <code>filterOffset</code>, <code>handlerOffset</code>, <code>tryLength</code>, or <code>handlerLength</code> are negative.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ExceptionHandler.Equals(Object)\n  fullName: System.Reflection.Emit.ExceptionHandler.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare this instance to.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> and this instance are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Reflection.Emit.ExceptionHandler.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  id: Equals(System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Equals(ExceptionHandler)\n  nameWithType: ExceptionHandler.Equals(ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.Equals(ExceptionHandler)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to another <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object.\n  syntax:\n    content: public bool Equals (System.Reflection.Emit.ExceptionHandler other);\n    parameters:\n    - id: other\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The exception handler object to compare this instance to.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>other</code> and this instance are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Reflection.Emit.ExceptionHandler.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  id: ExceptionTypeToken\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: ExceptionTypeToken\n  nameWithType: ExceptionHandler.ExceptionTypeToken\n  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the token of the exception type handled by this handler.\n  syntax:\n    content: public int ExceptionTypeToken { get; }\n    return:\n      type: System.Int32\n      description: The token of the exception type handled by this handler, or 0 if none exists.\n  overload: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset\n  id: FilterOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: FilterOffset\n  nameWithType: ExceptionHandler.FilterOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.FilterOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the byte offset at which the filter code for the exception handler begins.\n  syntax:\n    content: public int FilterOffset { get; }\n    return:\n      type: System.Int32\n      description: The byte offset at which the filter code begins, or 0 if no filter  is present.\n  overload: System.Reflection.Emit.ExceptionHandler.FilterOffset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ExceptionHandler.GetHashCode()\n  fullName: System.Reflection.Emit.ExceptionHandler.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Serves as the default hash function.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code for the current object.\n  overload: System.Reflection.Emit.ExceptionHandler.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength\n  id: HandlerLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: HandlerLength\n  nameWithType: ExceptionHandler.HandlerLength\n  fullName: System.Reflection.Emit.ExceptionHandler.HandlerLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the length, in bytes, of the exception handler.\n  syntax:\n    content: public int HandlerLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of the exception handler.\n  overload: System.Reflection.Emit.ExceptionHandler.HandlerLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  id: HandlerOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: HandlerOffset\n  nameWithType: ExceptionHandler.HandlerOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the byte offset of the first instruction of the exception handler.\n  syntax:\n    content: public int HandlerOffset { get; }\n    return:\n      type: System.Int32\n      description: The byte offset of the first instruction of the exception handler.\n  overload: System.Reflection.Emit.ExceptionHandler.HandlerOffset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.Kind\n  id: Kind\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Kind\n  nameWithType: ExceptionHandler.Kind\n  fullName: System.Reflection.Emit.ExceptionHandler.Kind\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value that represents the kind of exception handler this object represents.\n  syntax:\n    content: public System.Reflection.ExceptionHandlingClauseOptions Kind { get; }\n    return:\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: One of the enumeration values that specifies the kind of exception handler.\n  overload: System.Reflection.Emit.ExceptionHandler.Kind*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  id: op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: op_Equality(ExceptionHandler,ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);\n    parameters:\n    - id: left\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Reflection.Emit.ExceptionHandler.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  id: op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: op_Inequality(ExceptionHandler,ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);\n    parameters:\n    - id: left\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Reflection.Emit.ExceptionHandler.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.TryLength\n  id: TryLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: TryLength\n  nameWithType: ExceptionHandler.TryLength\n  fullName: System.Reflection.Emit.ExceptionHandler.TryLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the length, in bytes, of the code protected by this exception handler.\n  syntax:\n    content: public int TryLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of the code protected by this exception handler.\n  overload: System.Reflection.Emit.ExceptionHandler.TryLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.ExceptionHandler.TryOffset\n  id: TryOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: TryOffset\n  nameWithType: ExceptionHandler.TryOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.TryOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the byte offset at which the code that is protected by this exception handler begins.\n  syntax:\n    content: public int TryOffset { get; }\n    return:\n      type: System.Int32\n      description: The byte offset at which the code that is protected by this exception handler begins.\n  overload: System.Reflection.Emit.ExceptionHandler.TryOffset*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  nameWithType: ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.ExceptionHandlingClauseOptions\n  parent: System.Reflection\n  isExternal: false\n  name: ExceptionHandlingClauseOptions\n  nameWithType: ExceptionHandlingClauseOptions\n  fullName: System.Reflection.ExceptionHandlingClauseOptions\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ExceptionHandler.Equals(Object)\n  fullName: System.Reflection.Emit.ExceptionHandler.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Equals(ExceptionHandler)\n  nameWithType: ExceptionHandler.Equals(ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.Equals(ExceptionHandler)\n- uid: System.Reflection.Emit.ExceptionHandler\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionTypeToken\n  nameWithType: ExceptionHandler.ExceptionTypeToken\n  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: FilterOffset\n  nameWithType: ExceptionHandler.FilterOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.FilterOffset\n- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ExceptionHandler.GetHashCode()\n  fullName: System.Reflection.Emit.ExceptionHandler.GetHashCode()\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerLength\n  nameWithType: ExceptionHandler.HandlerLength\n  fullName: System.Reflection.Emit.ExceptionHandler.HandlerLength\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerOffset\n  nameWithType: ExceptionHandler.HandlerOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n- uid: System.Reflection.Emit.ExceptionHandler.Kind\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Kind\n  nameWithType: ExceptionHandler.Kind\n  fullName: System.Reflection.Emit.ExceptionHandler.Kind\n- uid: System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Equality(ExceptionHandler,ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)\n- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Inequality(ExceptionHandler,ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)\n- uid: System.Reflection.Emit.ExceptionHandler.TryLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryLength\n  nameWithType: ExceptionHandler.TryLength\n  fullName: System.Reflection.Emit.ExceptionHandler.TryLength\n- uid: System.Reflection.Emit.ExceptionHandler.TryOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryOffset\n  nameWithType: ExceptionHandler.TryOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.TryOffset\n- uid: System.Reflection.Emit.ExceptionHandler.#ctor*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler.ExceptionHandler\n- uid: System.Reflection.Emit.ExceptionHandler.Equals*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Equals\n  nameWithType: ExceptionHandler.Equals\n- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionTypeToken\n  nameWithType: ExceptionHandler.ExceptionTypeToken\n- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: FilterOffset\n  nameWithType: ExceptionHandler.FilterOffset\n- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: GetHashCode\n  nameWithType: ExceptionHandler.GetHashCode\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerLength\n  nameWithType: ExceptionHandler.HandlerLength\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerOffset\n  nameWithType: ExceptionHandler.HandlerOffset\n- uid: System.Reflection.Emit.ExceptionHandler.Kind*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Kind\n  nameWithType: ExceptionHandler.Kind\n- uid: System.Reflection.Emit.ExceptionHandler.op_Equality*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Equality\n  nameWithType: ExceptionHandler.op_Equality\n- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Inequality\n  nameWithType: ExceptionHandler.op_Inequality\n- uid: System.Reflection.Emit.ExceptionHandler.TryLength*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryLength\n  nameWithType: ExceptionHandler.TryLength\n- uid: System.Reflection.Emit.ExceptionHandler.TryOffset*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryOffset\n  nameWithType: ExceptionHandler.TryOffset\n"}