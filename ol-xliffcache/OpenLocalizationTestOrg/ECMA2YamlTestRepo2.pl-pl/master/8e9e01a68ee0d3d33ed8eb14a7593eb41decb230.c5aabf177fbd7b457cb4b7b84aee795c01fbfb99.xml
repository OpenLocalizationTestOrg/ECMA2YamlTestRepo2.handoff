{"nodes":[{"pos":[1609,1937],"content":"Imports a description file for a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control (or other ASP.NET server control used as a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control), so that users can add the control to a Web page with pre-defined settings. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Imports a description file for a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control (or other ASP.NET server control used as a <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control), so that users can add the control to a Web page with pre-defined settings.","pos":[0,296],"source":"Imports a description file for a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control (or other ASP.NET server control used as a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control), so that users can add the control to a Web page with pre-defined settings."},{"content":"This class cannot be inherited.","pos":[297,328]}]},{"pos":[1950,10679],"content":"The ImportCatalogPart control enables users to import a description file that describes settings on a <xref:System.Web.UI.WebControls.WebParts.WebPart> control or server control that a user wants to add to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone.       After a user imports a description file, the <xref:System.Web.UI.WebControls.WebParts.WebPart> control referenced in the file appears within the ImportCatalogPart control, and a user can add the control to the page.       The description file is not the same as the control itself. It is an XML file that ends with a .WebPart extension and contains name/value pairs--mostly property values--that describe the state of the control. The description file is created according to a specified XML format, as described in the topic [Web Parts Control Description Files](~/add/includes/ajax-current-ext-md.md).       As for the control that the description file refers to, it can either be compiled into an assembly, or it can be a user control defined in an .ascx file. In either case, the control referenced in an imported description file must exist on the Web server that hosts the page that is attempting to import the control. The description file references the control name and the assembly (or file) that contains the control, and the description file contains settings that affect the control's property values, appearance, and behavior.       The ImportCatalogPart control enables users to share settings on controls. A complex control can have many properties and settings. For example, in a typical intranet site within a large company, a custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control might contain a number of properties that hold values specific to the users' environment, such as their database connections, departmental information, and so on. The control might also contain a number of properties that affect its appearance. One user could personalize the control on a particular site and get it working properly, export a description file for the control, and then share the description file with other users, who could import the file to add the fully configured control to other intranet sites that they are allowed to personalize. As long as the compiled assembly or user control file containing the control exists on the Web server that is hosting their site, users can add the control to other Web sites.       The mechanism by which users import a description file (and hence its associated server control) into a Web page is the ImportCatalogPart control, which a page developer must add to a Web page. When a user switches the page to catalog display mode, the ImportCatalogPart control appears, and the user can user this control to browse to the .WebPart description file corresponding to the server control they want to import. Following the UI and instructions provided by the ImportCatalogPart control, a user is able to add the desired server control into the Web page, with its appearance and properties fully configured as specified in the imported description file.       Before a <xref:System.Web.UI.WebControls.WebParts.WebPart> control's description file can be imported, a user must first create (export) the file based on an existing <xref:System.Web.UI.WebControls.WebParts.WebPart> control. A description file can be exported for a control if the following conditions are met:      -   The control has properties marked with the `Personalizable` attribute.      -   The Web.config file has the `enableExport` attribute value set to `true` on the `<webParts>` element.      -   A developer sets the value of the <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property on the control to a value other than the default value of <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, which prohibits export. If the <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property value is set to <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, any property that contains an <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> parameter with a `Personalizable` attribute is not exported when a user exports a description file. This enables control developers to prevent sensitive data, such as connection strings, from being exported in certain situations.       A user can export a control that has been enabled for export by clicking the export verb that appears in the verbs menu of the control, and following the instructions to save a .WebPart description file for the control. Other users can then import this file to configure their own instances of the control.       The ImportCatalogPart class contains several properties. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> property contains text with instructions for users when they browse to locate the description file. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> property contains text that serves as a label for the imported control as it appears within the ImportCatalogPart control. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> contains text that is displayed if an error occurs when a control description is being imported. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> property overrides the base property to assign a default title for an ImportCatalogPart control if the developer does not assign a title. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> property contains the text for the button that the user clicks to upload the description file, and the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> property contains the instructions for the upload process.       The ImportCatalogPart class also contains several unique methods. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> method retrieves a <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control in the catalog, which enables an ImportCatalogPart control to display information about each server control without having to create an instance of it. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> method gets an instance of a particular <xref:System.Web.UI.WebControls.WebParts.WebPart> control, based on the description passed to the method.       There are some inherent risks associated with using the ImportCatalogPart control. One example is the possibility of importing malicious data into your Web application through the description files used for importing. If someone has placed malicious script code as the value of a string property in the description file, then that script could potentially be executed when a user imports the description file and adds the referenced server control to a Web page. To minimize the risk of importing description files with malicious data, server controls that have string-typed properties should always encode the property data. Another risk involves importing types through description files (see [Web Parts Control Description Files](../Topic/Web%20Parts%20Control%20Description%20Files.md)). A malicious user could submit requests to load many assemblies into the <xref:System.AppDomain>, resulting in an excessive amount of memory being consumed.       To avoid the risks associated with import, you can disable the feature altogether by not using the import feature or the ImportCatalogPart control. Or you can limit what users have access to the control. You could do this programmatically, using role management (see [Managing Authorization Using Roles](~/add/includes/ajax-current-ext-md.md)). For instance, when the page loads, you could test to see whether a user is in a certain role, such as the administrator role. If the user is in the role, you could programmatically add the ImportCatalogPart control to the page for that user. You could also use a declarative approach to limit the set of users that can use the ImportCatalogPart control.  Within your web page that contains a catalog, you could place two <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controls: one for users who can import, and one for those who cannot. The zone for users who can import would contain the ImportCatalogPart control. The zone itself could be placed inside of a <xref:System.Web.UI.WebControls.LoginView> control, which would enable you to limit use of the control in the zone to only those authenticated users or roles that you specify.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ImportCatalogPart control enables users to import a description file that describes settings on a &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control or server control that a user wants to add to a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase&gt; zone.","pos":[0,271],"source":"The ImportCatalogPart control enables users to import a description file that describes settings on a <xref:System.Web.UI.WebControls.WebParts.WebPart> control or server control that a user wants to add to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone."},{"content":"After a user imports a description file, the &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control referenced in the file appears within the ImportCatalogPart control, and a user can add the control to the page.","pos":[278,493],"source":"       After a user imports a description file, the <xref:System.Web.UI.WebControls.WebParts.WebPart> control referenced in the file appears within the ImportCatalogPart control, and a user can add the control to the page."},{"content":"The description file is not the same as the control itself.","pos":[500,559]},{"content":"It is an XML file that ends with a .WebPart extension and contains name/value pairs--mostly property values--that describe the state of the control.","pos":[560,708]},{"content":"The description file is created according to a specified XML format, as described in the topic <bpt id=\"p1\">[</bpt>Web Parts Control Description Files<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[709,881],"source":" The description file is created according to a specified XML format, as described in the topic [Web Parts Control Description Files](~/add/includes/ajax-current-ext-md.md)."},{"content":"As for the control that the description file refers to, it can either be compiled into an assembly, or it can be a user control defined in an .ascx file.","pos":[888,1041]},{"content":"In either case, the control referenced in an imported description file must exist on the Web server that hosts the page that is attempting to import the control.","pos":[1042,1203]},{"content":"The description file references the control name and the assembly (or file) that contains the control, and the description file contains settings that affect the control's property values, appearance, and behavior.","pos":[1204,1418]},{"content":"The ImportCatalogPart control enables users to share settings on controls.","pos":[1425,1499]},{"content":"A complex control can have many properties and settings.","pos":[1500,1556]},{"content":"For example, in a typical intranet site within a large company, a custom &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control might contain a number of properties that hold values specific to the users' environment, such as their database connections, departmental information, and so on.","pos":[1557,1850],"source":" For example, in a typical intranet site within a large company, a custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control might contain a number of properties that hold values specific to the users' environment, such as their database connections, departmental information, and so on."},{"content":"The control might also contain a number of properties that affect its appearance.","pos":[1851,1932]},{"content":"One user could personalize the control on a particular site and get it working properly, export a description file for the control, and then share the description file with other users, who could import the file to add the fully configured control to other intranet sites that they are allowed to personalize.","pos":[1933,2242]},{"content":"As long as the compiled assembly or user control file containing the control exists on the Web server that is hosting their site, users can add the control to other Web sites.","pos":[2243,2418]},{"content":"The mechanism by which users import a description file (and hence its associated server control) into a Web page is the ImportCatalogPart control, which a page developer must add to a Web page.","pos":[2425,2618]},{"content":"When a user switches the page to catalog display mode, the ImportCatalogPart control appears, and the user can user this control to browse to the .WebPart description file corresponding to the server control they want to import.","pos":[2619,2847]},{"content":"Following the UI and instructions provided by the ImportCatalogPart control, a user is able to add the desired server control into the Web page, with its appearance and properties fully configured as specified in the imported description file.","pos":[2848,3091]},{"content":"Before a &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control's description file can be imported, a user must first create (export) the file based on an existing &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control.","pos":[3098,3323],"source":"       Before a <xref:System.Web.UI.WebControls.WebParts.WebPart> control's description file can be imported, a user must first create (export) the file based on an existing <xref:System.Web.UI.WebControls.WebParts.WebPart> control."},{"content":"A description file can be exported for a control if the following conditions are met:      -   The control has properties marked with the <ph id=\"ph1\">`Personalizable`</ph> attribute.","pos":[3324,3489],"source":" A description file can be exported for a control if the following conditions are met:      -   The control has properties marked with the `Personalizable` attribute."},{"content":"-   The Web.config file has the <ph id=\"ph1\">`enableExport`</ph> attribute value set to <ph id=\"ph2\">`true`</ph> on the <ph id=\"ph3\">`&lt;webParts&gt;`</ph> element.","pos":[3495,3600],"source":"      -   The Web.config file has the `enableExport` attribute value set to `true` on the `<webParts>` element."},{"content":"-   A developer sets the value of the &lt;xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A&gt; property on the control to a value other than the default value of &lt;xref:System.Web.UI.WebControls.WebParts.WebPartExportMode&gt;, which prohibits export.","pos":[3606,3859],"source":"      -   A developer sets the value of the <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property on the control to a value other than the default value of <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, which prohibits export."},{"content":"If the &lt;xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A&gt; property value is set to &lt;xref:System.Web.UI.WebControls.WebParts.WebPartExportMode&gt;, any property that contains an &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A&gt; parameter with a <ph id=\"ph1\">`Personalizable`</ph> attribute is not exported when a user exports a description file.","pos":[3860,4227],"source":" If the <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property value is set to <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, any property that contains an <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> parameter with a `Personalizable` attribute is not exported when a user exports a description file."},{"content":"This enables control developers to prevent sensitive data, such as connection strings, from being exported in certain situations.","pos":[4228,4357]},{"content":"A user can export a control that has been enabled for export by clicking the export verb that appears in the verbs menu of the control, and following the instructions to save a .WebPart description file for the control.","pos":[4364,4583]},{"content":"Other users can then import this file to configure their own instances of the control.","pos":[4584,4670]},{"content":"The ImportCatalogPart class contains several properties.","pos":[4677,4733]},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A&gt; property contains text with instructions for users when they browse to locate the description file.","pos":[4734,4915],"source":" The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> property contains text with instructions for users when they browse to locate the description file."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A&gt; property contains text that serves as a label for the imported control as it appears within the ImportCatalogPart control.","pos":[4916,5127],"source":" The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> property contains text that serves as a label for the imported control as it appears within the ImportCatalogPart control."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A&gt; contains text that is displayed if an error occurs when a control description is being imported.","pos":[5128,5316],"source":" The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> contains text that is displayed if an error occurs when a control description is being imported."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A&gt; property overrides the base property to assign a default title for an ImportCatalogPart control if the developer does not assign a title.","pos":[5317,5527],"source":" The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> property overrides the base property to assign a default title for an ImportCatalogPart control if the developer does not assign a title."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A&gt; property contains the text for the button that the user clicks to upload the description file, and the &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A&gt; property contains the instructions for the upload process.","pos":[5528,5851],"source":" The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> property contains the text for the button that the user clicks to upload the description file, and the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> property contains the instructions for the upload process."},{"content":"The ImportCatalogPart class also contains several unique methods.","pos":[5858,5923]},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A&gt; method retrieves a &lt;xref:System.Web.UI.WebControls.WebParts.WebPartDescription&gt; object for each &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control in the catalog, which enables an ImportCatalogPart control to display information about each server control without having to create an instance of it.","pos":[5924,6328],"source":" The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> method retrieves a <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control in the catalog, which enables an ImportCatalogPart control to display information about each server control without having to create an instance of it."},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A&gt; method gets an instance of a particular &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control, based on the description passed to the method.","pos":[6329,6552],"source":" The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> method gets an instance of a particular <xref:System.Web.UI.WebControls.WebParts.WebPart> control, based on the description passed to the method."},{"content":"There are some inherent risks associated with using the ImportCatalogPart control.","pos":[6559,6641]},{"content":"One example is the possibility of importing malicious data into your Web application through the description files used for importing.","pos":[6642,6776]},{"content":"If someone has placed malicious script code as the value of a string property in the description file, then that script could potentially be executed when a user imports the description file and adds the referenced server control to a Web page.","pos":[6777,7021]},{"content":"To minimize the risk of importing description files with malicious data, server controls that have string-typed properties should always encode the property data.","pos":[7022,7184]},{"content":"Another risk involves importing types through description files (see <bpt id=\"p1\">[</bpt>Web Parts Control Description Files<ept id=\"p1\">](../Topic/Web%20Parts%20Control%20Description%20Files.md)</ept>).","pos":[7185,7350],"source":" Another risk involves importing types through description files (see [Web Parts Control Description Files](../Topic/Web%20Parts%20Control%20Description%20Files.md))."},{"content":"A malicious user could submit requests to load many assemblies into the &lt;xref:System.AppDomain&gt;, resulting in an excessive amount of memory being consumed.","pos":[7351,7506],"source":" A malicious user could submit requests to load many assemblies into the <xref:System.AppDomain>, resulting in an excessive amount of memory being consumed."},{"content":"To avoid the risks associated with import, you can disable the feature altogether by not using the import feature or the ImportCatalogPart control.","pos":[7513,7660]},{"content":"Or you can limit what users have access to the control.","pos":[7661,7716]},{"content":"You could do this programmatically, using role management (see <bpt id=\"p1\">[</bpt>Managing Authorization Using Roles<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>).","pos":[7717,7857],"source":" You could do this programmatically, using role management (see [Managing Authorization Using Roles](~/add/includes/ajax-current-ext-md.md))."},{"content":"For instance, when the page loads, you could test to see whether a user is in a certain role, such as the administrator role.","pos":[7858,7983]},{"content":"If the user is in the role, you could programmatically add the ImportCatalogPart control to the page for that user.","pos":[7984,8099]},{"content":"You could also use a declarative approach to limit the set of users that can use the ImportCatalogPart control.","pos":[8100,8211]},{"content":"Within your web page that contains a catalog, you could place two &lt;xref:System.Web.UI.WebControls.WebParts.CatalogZone&gt; controls: one for users who can import, and one for those who cannot.","pos":[8213,8402],"source":"  Within your web page that contains a catalog, you could place two <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controls: one for users who can import, and one for those who cannot."},{"content":"The zone for users who can import would contain the ImportCatalogPart control.","pos":[8403,8481]},{"content":"The zone itself could be placed inside of a &lt;xref:System.Web.UI.WebControls.LoginView&gt; control, which would enable you to limit use of the control in the zone to only those authenticated users or roles that you specify.","pos":[8482,8701],"source":" The zone itself could be placed inside of a <xref:System.Web.UI.WebControls.LoginView> control, which would enable you to limit use of the control in the zone to only those authenticated users or roles that you specify."}]},{"pos":[27004,27118],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ImportCatalogPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.ImportCatalogPart\"></xref> class."},{"pos":[27131,27669],"content":"The ImportCatalogPart constructor is a default; no constructor is declared in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class and hence no special tasks are carried out when a new instance of the class is created. The .NET Framework uses the constructor internally to create an instance of the class.       Normally you will not need to use the ImportCatalogPart constructor programmatically in your own code. The intended use of the control is for page developers to add it to a page declaratively at design time.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ImportCatalogPart constructor is a default; no constructor is declared in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class and hence no special tasks are carried out when a new instance of the class is created. The .NET Framework uses the constructor internally to create an instance of the class.       Normally you will not need to use the ImportCatalogPart constructor programmatically in your own code. The intended use of the control is for page developers to add it to a page declaratively at design time.","pos":[0,536],"nodes":[{"content":"The ImportCatalogPart constructor is a default; no constructor is declared in the &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart&gt; class and hence no special tasks are carried out when a new instance of the class is created.","pos":[0,235],"source":"The ImportCatalogPart constructor is a default; no constructor is declared in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class and hence no special tasks are carried out when a new instance of the class is created."},{"content":"The .NET Framework uses the constructor internally to create an instance of the class.","pos":[236,322]},{"content":"Normally you will not need to use the ImportCatalogPart constructor programmatically in your own code.","pos":[329,431]},{"content":"The intended use of the control is for page developers to add it to a page declaratively at design time.","pos":[432,536]}]}]},{"pos":[28290,28387],"content":"Gets or sets a text message that instructs users to browse to the location of a description file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a text message that instructs users to browse to the location of a description file.","pos":[0,97]}]},{"pos":[28400,28829],"content":"The BrowseHelpText property gives users a simple overview of the first thing they must do in the process of adding an imported control: provide the location of a description file, by either typing in a path or browsing to the file. A typical reason to supply a custom value for this property is if you have special instructions for users, such as a specific network share to which they should browse to locate a description file.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The BrowseHelpText property gives users a simple overview of the first thing they must do in the process of adding an imported control: provide the location of a description file, by either typing in a path or browsing to the file. A typical reason to supply a custom value for this property is if you have special instructions for users, such as a specific network share to which they should browse to locate a description file.","pos":[0,429],"nodes":[{"content":"The BrowseHelpText property gives users a simple overview of the first thing they must do in the process of adding an imported control: provide the location of a description file, by either typing in a path or browsing to the file.","pos":[0,231]},{"content":"A typical reason to supply a custom value for this property is if you have special instructions for users, such as a specific network share to which they should browse to locate a description file.","pos":[232,429]}]}]},{"pos":[30498,30625],"content":"A string that contains the text of the message. The default value is a culture-specific message supplied by the .NET Framework.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that contains the text of the message. The default value is a culture-specific message supplied by the .NET Framework.","pos":[0,127],"nodes":[{"content":"A string that contains the text of the message.","pos":[0,47]},{"content":"The default value is a culture-specific message supplied by the .NET Framework.","pos":[48,127]}]}]},{"pos":[31848,32073],"content":"Gets or sets what button in the user interface (UI) is treated as the default button that receives the focus when form that contains the button is rendered. This property is not intended to be called from page developer code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets what button in the user interface (UI) is treated as the default button that receives the focus when form that contains the button is rendered. This property is not intended to be called from page developer code.","pos":[0,225],"nodes":[{"content":"Gets or sets what button in the user interface (UI) is treated as the default button that receives the focus when form that contains the button is rendered.","pos":[0,156]},{"content":"This property is not intended to be called from page developer code.","pos":[157,225]}]}]},{"pos":[32086,32664],"content":"The code for this property overrides the base property inherited from the <xref:System.Web.UI.WebControls.Panel> class to hide the property from designers and prevent it from being affected by themes. Though it is public, this property is used internally by the Web Parts control set for default rendering of this control and is not intended to be used by page developers.       This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The code for this property overrides the base property inherited from the &lt;xref:System.Web.UI.WebControls.Panel&gt; class to hide the property from designers and prevent it from being affected by themes.","pos":[0,200],"source":"The code for this property overrides the base property inherited from the <xref:System.Web.UI.WebControls.Panel> class to hide the property from designers and prevent it from being affected by themes."},{"content":"Though it is public, this property is used internally by the Web Parts control set for default rendering of this control and is not intended to be used by page developers.","pos":[201,372]},{"content":"This property cannot be set by themes or style sheet themes.","pos":[379,439]},{"content":"For more information, see &lt;xref:System.Web.UI.ThemeableAttribute&gt; and <bpt id=\"p1\">[</bpt>ASP.NET Themes and Skins<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[440,576],"source":" For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[32797,32986],"content":"A string that contains the ID of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.Button\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that receives the default focus in a <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.Panel\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"A string that contains the ID of the <xref href=\"System.Web.UI.WebControls.Button\"></xref> that receives the default focus in a <xref href=\"System.Web.UI.WebControls.Panel\"></xref> control."},{"pos":[33632,33772],"content":"Returns a collection of descriptions of the available <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> controls in a catalog.","needQuote":true,"needEscape":true,"source":"Returns a collection of descriptions of the available <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> controls in a catalog."},{"pos":[33785,35359],"content":"The GetAvailableWebPartDescriptions method provides an implementation for the abstract base method declared in the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> class. The GetAvailableWebPartDescriptions method returns description information for each control in a catalog. Note that in the case of an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, there can be only one server control in the catalog at a time, even though the method would work if there were multiple controls.       A <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object is an object that contains essential information about a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, including its ID, an object reference to the control, and the values of several important properties that are inherited from the <xref:System.Web.UI.WebControls.WebParts.Part> class, such as <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> and <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>.       The GetAvailableWebPartDescriptions method improves performance. When a catalog is created, it needs some information about each control it contains, including a title, a description, an icon (if one exists), and an ID. Rather than having to create an instance of each control to get this information, a <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zone that creates a catalog calls the GetAvailableWebPartDescriptions method, and the call returns only the description information for the control rather than an instance of the control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetAvailableWebPartDescriptions method provides an implementation for the abstract base method declared in the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> class. The GetAvailableWebPartDescriptions method returns description information for each control in a catalog. Note that in the case of an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, there can be only one server control in the catalog at a time, even though the method would work if there were multiple controls.       A <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object is an object that contains essential information about a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, including its ID, an object reference to the control, and the values of several important properties that are inherited from the <xref:System.Web.UI.WebControls.WebParts.Part> class, such as <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> and <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>.       The GetAvailableWebPartDescriptions method improves performance. When a catalog is created, it needs some information about each control it contains, including a title, a description, an icon (if one exists), and an ID. Rather than having to create an instance of each control to get this information, a <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zone that creates a catalog calls the GetAvailableWebPartDescriptions method, and the call returns only the description information for the control rather than an instance of the control.","pos":[0,1570],"nodes":[{"content":"The GetAvailableWebPartDescriptions method provides an implementation for the abstract base method declared in the &lt;xref:System.Web.UI.WebControls.WebParts.CatalogPart&gt; class.","pos":[0,175],"source":"The GetAvailableWebPartDescriptions method provides an implementation for the abstract base method declared in the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> class."},{"content":"The GetAvailableWebPartDescriptions method returns description information for each control in a catalog.","pos":[176,281]},{"content":"Note that in the case of an &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart&gt; control, there can be only one server control in the catalog at a time, even though the method would work if there were multiple controls.","pos":[282,508],"source":" Note that in the case of an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, there can be only one server control in the catalog at a time, even though the method would work if there were multiple controls."},{"content":"A &lt;xref:System.Web.UI.WebControls.WebParts.WebPartDescription&gt; object is an object that contains essential information about a &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control, including its ID, an object reference to the control, and the values of several important properties that are inherited from the &lt;xref:System.Web.UI.WebControls.WebParts.Part&gt; class, such as &lt;xref:System.Web.UI.WebControls.WebParts.Part.Title%2A&gt; and &lt;xref:System.Web.UI.WebControls.WebParts.Part.Description%2A&gt;.","pos":[515,1014],"source":"       A <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object is an object that contains essential information about a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, including its ID, an object reference to the control, and the values of several important properties that are inherited from the <xref:System.Web.UI.WebControls.WebParts.Part> class, such as <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> and <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>."},{"content":"The GetAvailableWebPartDescriptions method improves performance.","pos":[1021,1085]},{"content":"When a catalog is created, it needs some information about each control it contains, including a title, a description, an icon (if one exists), and an ID.","pos":[1086,1240]},{"content":"Rather than having to create an instance of each control to get this information, a &lt;xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase&gt; zone that creates a catalog calls the GetAvailableWebPartDescriptions method, and the call returns only the description information for the control rather than an instance of the control.","pos":[1241,1570],"source":" Rather than having to create an instance of each control to get this information, a <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zone that creates a catalog calls the GetAvailableWebPartDescriptions method, and the call returns only the description information for the control rather than an instance of the control."}]}]},{"pos":[41869,42077],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> for each control in a catalog.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection\"></xref> that contains a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"></xref> for each control in a catalog."},{"pos":[42800,42959],"content":"Returns a reference to a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control based on the values in the description passed into the method.","needQuote":true,"needEscape":true,"source":"Returns a reference to a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control based on the values in the description passed into the method."},{"pos":[42971,43679],"content":"The GetWebPart method returns a reference to a <xref:System.Web.UI.WebControls.WebParts.WebPart> control whose description details match the values of the <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object passed into the method. Typically, this method is used together with the <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> method, which is used to retrieve the descriptions of controls in the catalog. Individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls can then be retrieved or manipulated as needed by passing individual <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> objects to the GetWebPart method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetWebPart method returns a reference to a <xref:System.Web.UI.WebControls.WebParts.WebPart> control whose description details match the values of the <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object passed into the method. Typically, this method is used together with the <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> method, which is used to retrieve the descriptions of controls in the catalog. Individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls can then be retrieved or manipulated as needed by passing individual <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> objects to the GetWebPart method.","pos":[0,708],"nodes":[{"content":"The GetWebPart method returns a reference to a &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; control whose description details match the values of the &lt;xref:System.Web.UI.WebControls.WebParts.WebPartDescription&gt; object passed into the method.","pos":[0,246],"source":"The GetWebPart method returns a reference to a <xref:System.Web.UI.WebControls.WebParts.WebPart> control whose description details match the values of the <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object passed into the method."},{"content":"Typically, this method is used together with the &lt;xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A&gt; method, which is used to retrieve the descriptions of controls in the catalog.","pos":[247,474],"source":" Typically, this method is used together with the <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> method, which is used to retrieve the descriptions of controls in the catalog."},{"content":"Individual &lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt; controls can then be retrieved or manipulated as needed by passing individual &lt;xref:System.Web.UI.WebControls.WebParts.WebPartDescription&gt; objects to the GetWebPart method.","pos":[475,708],"source":" Individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls can then be retrieved or manipulated as needed by passing individual <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> objects to the GetWebPart method."}]}]},{"pos":[50609,50726],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains details about the control.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"></xref> that contains details about the control."},{"pos":[50813,50952],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control whose description matches the values in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">description</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control whose description matches the values in <code>description</code>."},{"pos":[51146,51235],"content":"<ph id=\"ph1\">&lt;code&gt;description&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>description</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[51330,51456],"content":"<ph id=\"ph1\">&lt;code&gt;description&lt;/code&gt;</ph> is not an available <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>description</code> is not an available <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"></xref> value."},{"pos":[51951,52105],"content":"Gets or sets text displayed after a user imports a description file to represent or describe the imported control within the catalog of imported controls.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets text displayed after a user imports a description file to represent or describe the imported control within the catalog of imported controls.","pos":[0,154]}]},{"pos":[52117,52316],"content":"The ImportedPartLabelText property is typically used to contain a short, general label that describes the control contained in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ImportedPartLabelText property is typically used to contain a short, general label that describes the control contained in the &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart&gt; control.","pos":[0,199],"source":"The ImportedPartLabelText property is typically used to contain a short, general label that describes the control contained in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control."}]},{"pos":[54019,54144],"content":"A string that contains the text of the label. The default value is a culture-specific message supplied by the .NET Framework.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that contains the text of the label. The default value is a culture-specific message supplied by the .NET Framework.","pos":[0,125],"nodes":[{"content":"A string that contains the text of the label.","pos":[0,45]},{"content":"The default value is a culture-specific message supplied by the .NET Framework.","pos":[46,125]}]}]},{"pos":[54927,54939],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[55660,55672],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[56272,56365],"content":"Gets or sets an error message that is displayed if an error occurs during the import process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an error message that is displayed if an error occurs during the import process.","pos":[0,93]}]},{"pos":[56377,56531],"content":"The PartImportErrorLabelText property is useful for notifying a user if some problem or error occurs while the page attempts to import a description file.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The PartImportErrorLabelText property is useful for notifying a user if some problem or error occurs while the page attempts to import a description file.","pos":[0,154]}]},{"pos":[58253,58378],"content":"A string that contains the text of the label. The default value is a culture-specific message supplied by the .NET Framework.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that contains the text of the label. The default value is a culture-specific message supplied by the .NET Framework.","pos":[0,125],"nodes":[{"content":"A string that contains the text of the label.","pos":[0,45]},{"content":"The default value is a culture-specific message supplied by the .NET Framework.","pos":[46,125]}]}]},{"pos":[59187,59199],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[60038,60050],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[60757,60769],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[61284,61425],"content":"Gets or sets the title that appears in the title bar of an <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ImportCatalogPart\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets or sets the title that appears in the title bar of an <xref href=\"System.Web.UI.WebControls.WebParts.ImportCatalogPart\"></xref> control."},{"pos":[61437,61879],"content":"The Title property value is displayed in the title bar of an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control when the control is visible in catalog mode. When the control is declared in a page, you can set a value for the property by using the `Title` attribute. If you do not supply a value for the title, a culture-specific default value is used to describe the kind of properties that this control allows users to edit.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Title property value is displayed in the title bar of an &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart&gt; control when the control is visible in catalog mode.","pos":[0,173],"source":"The Title property value is displayed in the title bar of an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control when the control is visible in catalog mode."},{"content":"When the control is declared in a page, you can set a value for the property by using the <ph id=\"ph1\">`Title`</ph> attribute.","pos":[174,282],"source":" When the control is declared in a page, you can set a value for the property by using the `Title` attribute."},{"content":"If you do not supply a value for the title, a culture-specific default value is used to describe the kind of properties that this control allows users to edit.","pos":[283,442]}]},{"pos":[63511,63647],"content":"A string that is used as the title of the control. The default value is a calculated control name supplied by the Web Parts control set.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that is used as the title of the control. The default value is a calculated control name supplied by the Web Parts control set.","pos":[0,136],"nodes":[{"content":"A string that is used as the title of the control.","pos":[0,50]},{"content":"The default value is a calculated control name supplied by the Web Parts control set.","pos":[51,136]}]}]},{"pos":[64206,64346],"content":"Gets or sets the text for the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.Button\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control that initiates the upload of a description file.","needQuote":true,"needEscape":true,"source":"Gets or sets the text for the <xref href=\"System.Web.UI.WebControls.Button\"></xref> control that initiates the upload of a description file."},{"pos":[64358,64811],"content":"The UploadButtonText property provides the text for the <xref:System.Web.UI.WebControls.Button> control that initiates the upload process. If you assign custom text to this property, or to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> property, the text should make clear that the user is uploading a description file. The text should not say or imply that the upload process is actually uploading the control itself.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The UploadButtonText property provides the text for the <xref:System.Web.UI.WebControls.Button> control that initiates the upload process. If you assign custom text to this property, or to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> property, the text should make clear that the user is uploading a description file. The text should not say or imply that the upload process is actually uploading the control itself.","pos":[0,453],"nodes":[{"content":"The UploadButtonText property provides the text for the &lt;xref:System.Web.UI.WebControls.Button&gt; control that initiates the upload process.","pos":[0,138],"source":"The UploadButtonText property provides the text for the <xref:System.Web.UI.WebControls.Button> control that initiates the upload process."},{"content":"If you assign custom text to this property, or to the &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A&gt; property, the text should make clear that the user is uploading a description file.","pos":[139,354],"source":" If you assign custom text to this property, or to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> property, the text should make clear that the user is uploading a description file."},{"content":"The text should not say or imply that the upload process is actually uploading the control itself.","pos":[355,453]}]}]},{"pos":[66489,66669],"content":"A string that is used as the text for a <xref href=\"System.Web.UI.WebControls.Button\"></xref>. The default value is a culture-specific string supplied by the Web Parts control set.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that is used as the text for a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.Button\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,94],"source":"A string that is used as the text for a <xref href=\"System.Web.UI.WebControls.Button\"></xref>."},{"content":"The default value is a culture-specific string supplied by the Web Parts control set.","pos":[95,180]}]},{"pos":[67229,67319],"content":"Gets or sets the text of the message that tells the user how to upload a description file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the text of the message that tells the user how to upload a description file.","pos":[0,90]}]},{"pos":[67331,67801],"content":"The UploadHelpText property provides a brief sentence or phrase of instructions for users, telling them to click a button to upload the description file. If you assign custom text to this property, or to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> property, the text should make clear that the user is uploading a description file. The text should not say or imply that the upload process is actually uploading the control itself.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The UploadHelpText property provides a brief sentence or phrase of instructions for users, telling them to click a button to upload the description file. If you assign custom text to this property, or to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> property, the text should make clear that the user is uploading a description file. The text should not say or imply that the upload process is actually uploading the control itself.","pos":[0,470],"nodes":[{"content":"The UploadHelpText property provides a brief sentence or phrase of instructions for users, telling them to click a button to upload the description file.","pos":[0,153]},{"content":"If you assign custom text to this property, or to the &lt;xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A&gt; property, the text should make clear that the user is uploading a description file.","pos":[154,371],"source":" If you assign custom text to this property, or to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> property, the text should make clear that the user is uploading a description file."},{"content":"The text should not say or imply that the upload process is actually uploading the control itself.","pos":[372,470]}]}]},{"pos":[69461,69627],"content":"A string that is used as instructions for the user to upload a description file. The default value is a culture-specific string supplied by the Web Parts control set.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that is used as instructions for the user to upload a description file. The default value is a culture-specific string supplied by the Web Parts control set.","pos":[0,166],"nodes":[{"content":"A string that is used as instructions for the user to upload a description file.","pos":[0,80]},{"content":"The default value is a culture-specific string supplied by the Web Parts control set.","pos":[81,166]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  id: ImportCatalogPart\n  children:\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText\n  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText\n  langs:\n  - csharp\n  name: ImportCatalogPart\n  nameWithType: ImportCatalogPart\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  type: Class\n  summary: Imports a description file for a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control (or other ASP.NET server control used as a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control), so that users can add the control to a Web page with pre-defined settings. This class cannot be inherited.\n  remarks: \"The ImportCatalogPart control enables users to import a description file that describes settings on a <xref:System.Web.UI.WebControls.WebParts.WebPart> control or server control that a user wants to add to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone.  \\n  \\n After a user imports a description file, the <xref:System.Web.UI.WebControls.WebParts.WebPart> control referenced in the file appears within the ImportCatalogPart control, and a user can add the control to the page.  \\n  \\n The description file is not the same as the control itself. It is an XML file that ends with a .WebPart extension and contains name/value pairs--mostly property values--that describe the state of the control. The description file is created according to a specified XML format, as described in the topic [Web Parts Control Description Files](~/add/includes/ajax-current-ext-md.md).  \\n  \\n As for the control that the description file refers to, it can either be compiled into an assembly, or it can be a user control defined in an .ascx file. In either case, the control referenced in an imported description file must exist on the Web server that hosts the page that is attempting to import the control. The description file references the control name and the assembly (or file) that contains the control, and the description file contains settings that affect the control's property values, appearance, and behavior.  \\n  \\n The ImportCatalogPart control enables users to share settings on controls. A complex control can have many properties and settings. For example, in a typical intranet site within a large company, a custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control might contain a number of properties that hold values specific to the users' environment, such as their database connections, departmental information, and so on. The control might also contain a number of properties that affect its appearance. One user could personalize the control on a particular site and get it working properly, export a description file for the control, and then share the description file with other users, who could import the file to add the fully configured control to other intranet sites that they are allowed to personalize. As long as the compiled assembly or user control file containing the control exists on the Web server that is hosting their site, users can add the control to other Web sites.  \\n  \\n The mechanism by which users import a description file (and hence its associated server control) into a Web page is the ImportCatalogPart control, which a page developer must add to a Web page. When a user switches the page to catalog display mode, the ImportCatalogPart control appears, and the user can user this control to browse to the .WebPart description file corresponding to the server control they want to import. Following the UI and instructions provided by the ImportCatalogPart control, a user is able to add the desired server control into the Web page, with its appearance and properties fully configured as specified in the imported description file.  \\n  \\n Before a <xref:System.Web.UI.WebControls.WebParts.WebPart> control's description file can be imported, a user must first create (export) the file based on an existing <xref:System.Web.UI.WebControls.WebParts.WebPart> control. A description file can be exported for a control if the following conditions are met:  \\n  \\n-   The control has properties marked with the `Personalizable` attribute.  \\n  \\n-   The Web.config file has the `enableExport` attribute value set to `true` on the `<webParts>` element.  \\n  \\n-   A developer sets the value of the <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property on the control to a value other than the default value of <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, which prohibits export. If the <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property value is set to <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, any property that contains an <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> parameter with a `Personalizable` attribute is not exported when a user exports a description file. This enables control developers to prevent sensitive data, such as connection strings, from being exported in certain situations.  \\n  \\n A user can export a control that has been enabled for export by clicking the export verb that appears in the verbs menu of the control, and following the instructions to save a .WebPart description file for the control. Other users can then import this file to configure their own instances of the control.  \\n  \\n The ImportCatalogPart class contains several properties. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> property contains text with instructions for users when they browse to locate the description file. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> property contains text that serves as a label for the imported control as it appears within the ImportCatalogPart control. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> contains text that is displayed if an error occurs when a control description is being imported. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> property overrides the base property to assign a default title for an ImportCatalogPart control if the developer does not assign a title. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> property contains the text for the button that the user clicks to upload the description file, and the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> property contains the instructions for the upload process.  \\n  \\n The ImportCatalogPart class also contains several unique methods. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> method retrieves a <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control in the catalog, which enables an ImportCatalogPart control to display information about each server control without having to create an instance of it. The <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> method gets an instance of a particular <xref:System.Web.UI.WebControls.WebParts.WebPart> control, based on the description passed to the method.  \\n  \\n There are some inherent risks associated with using the ImportCatalogPart control. One example is the possibility of importing malicious data into your Web application through the description files used for importing. If someone has placed malicious script code as the value of a string property in the description file, then that script could potentially be executed when a user imports the description file and adds the referenced server control to a Web page. To minimize the risk of importing description files with malicious data, server controls that have string-typed properties should always encode the property data. Another risk involves importing types through description files (see [Web Parts Control Description Files](../Topic/Web%20Parts%20Control%20Description%20Files.md)). A malicious user could submit requests to load many assemblies into the <xref:System.AppDomain>, resulting in an excessive amount of memory being consumed.  \\n  \\n To avoid the risks associated with import, you can disable the feature altogether by not using the import feature or the ImportCatalogPart control. Or you can limit what users have access to the control. You could do this programmatically, using role management (see [Managing Authorization Using Roles](~/add/includes/ajax-current-ext-md.md)). For instance, when the page loads, you could test to see whether a user is in a certain role, such as the administrator role. If the user is in the role, you could programmatically add the ImportCatalogPart control to the page for that user. You could also use a declarative approach to limit the set of users that can use the ImportCatalogPart control.  Within your web page that contains a catalog, you could place two <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controls: one for users who can import, and one for those who cannot. The zone for users who can import would contain the ImportCatalogPart control. The zone itself could be placed inside of a <xref:System.Web.UI.WebControls.LoginView> control, which would enable you to limit use of the control in the zone to only those authenticated users or roles that you specify.\"\n  example:\n  - \"The following code example demonstrates how to use the ImportCatalogPart control declaratively and programmatically on a Web page. The example has four parts:  \\n  \\n-   A user control that enables you to change display modes on a Web Parts page.  \\n  \\n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an ImportCatalogPart control.  \\n  \\n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \\n  \\n-   An explanation of how the example works when you load the page in a browser.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#7](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_1.ascx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#7](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_1.ascx)]  \\n  \\n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that the page has a declarative reference to the ImportCatalogPart control, nested within the proper hierarchy of declarative elements. Notice also that several property values are assigned declaratively on the `<asp:importcatalogpart>` element. Also, the `Button1_Click` method updates a number of property values on the ImportCatalogPart control.  \\n  \\n In the page's <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls are declared. The `<aspSample:userinfowebpart>` control has an `exportmode=\\\"all\\\"` attribute on it. This attribute is required to enable users to export a description file for the control, which can then be imported by other users who wish to import the control using the description file.  \\n  \\n> [!NOTE]\\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\\\"true\\\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_2.aspx)]  \\n  \\n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that some properties on these controls are marked with the `WebBrowsable` attribute. This enables the <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> control to dynamically generate the user interface (UI) for a user to edit those properties when the controls are in edit mode. The properties are also marked with a `WebDisplayName` attribute, to specify the text of the label that appears next to each control in the editing UI. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The custom control called `TextDisplayWebPart` is referenced on the Web page with an `<aspSample:TextDisplayWebPart>` element. The other control, called `UserInfoWebPart`, is also declared on the Web page initially, though you will remove it later to demonstrate the ability to import a description file for a control.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_3.cs)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_3.vb)]  \\n  \\n Now run the code example. Load the Web page in a browser. The first step is to edit the `UserInfoWebPart` control. Use the **Display Mode** drop-down list control and select **Edit** to switch the page to edit mode. Click the verbs menu of the `UserInfoWebPart` control (the downward arrow in the title bar), and then click **Edit**. When the editing UI appears, several editing controls appear below the `UserInfoWebPart` control that you can use to edit its field values. Edit some fields, click **OK**, and then use the **Display Mode** drop-down to return the page to browse mode.  \\n  \\n The second step is to export a .WebPart description file for the `UserInfoWebPart` control. Click the verbs menu on the custom control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. Now close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` control declaration element, then save and close the file. (You are doing this step to simulate a user who does not yet have the `UserInfoWebPart` control, so you can import the control to the page).  \\n  \\n Load the Web page again in a browser. The `UserInfoWebPart` control should not appear, because you removed it. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the ImportCatalogPart control, click the **Browse** button, and browse to the .WebPart file you created, then click the **Upload** button. A reference to the control should appear with a check box next to it. Select the check box, then click **Add** to add the control to the page.  \\n  \\n While you are in this view of the page, click the **Update ImportCatalogPart** button near the bottom of the page to see the effect of programmatically updating a number of property values on the ImportCatalogPart control. After clicking the button, observe how the various properties are changed in the UI.  \\n  \\n Finally, click **Close** to exit catalog mode and return the page to browse mode. The `UserInfoWebPart` control should now appear in the page, containing the values that it had when you exported it earlier.\"\n  syntax:\n    content: 'public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart'\n  inheritance:\n  - System.Object\n  - System.Web.UI.Control\n  - System.Web.UI.WebControls.WebControl\n  - System.Web.UI.WebControls.Panel\n  - System.Web.UI.WebControls.WebParts.Part\n  - System.Web.UI.WebControls.WebParts.CatalogPart\n  implements: []\n  inheritedMembers:\n  - System.Web.UI.Control.Adapter\n  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)\n  - System.Web.UI.Control.AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)\n  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory\n  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.BindingContainer\n  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)\n  - System.Web.UI.Control.ChildControlsCreated\n  - System.Web.UI.Control.ClearCachedClientID\n  - System.Web.UI.Control.ClearChildControlState\n  - System.Web.UI.Control.ClearChildState\n  - System.Web.UI.Control.ClearChildViewState\n  - System.Web.UI.Control.ClearEffectiveClientIDMode\n  - System.Web.UI.Control.ClientID\n  - System.Web.UI.Control.ClientIDMode\n  - System.Web.UI.Control.ClientIDSeparator\n  - System.Web.UI.Control.Context\n  - System.Web.UI.Control.CreateControlCollection\n  - System.Web.UI.Control.DataBind(System.Boolean)\n  - System.Web.UI.Control.DataBindChildren\n  - System.Web.UI.Control.DataBinding\n  - System.Web.UI.Control.DataItemContainer\n  - System.Web.UI.Control.DataKeysContainer\n  - System.Web.UI.Control.DesignMode\n  - System.Web.UI.Control.Dispose\n  - System.Web.UI.Control.Disposed\n  - System.Web.UI.Control.EnableViewState\n  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.EnsureChildControls\n  - System.Web.UI.Control.EnsureID\n  - System.Web.UI.Control.Events\n  - System.Web.UI.Control.FindControl(System.String)\n  - System.Web.UI.Control.FindControl(System.String,System.Int32)\n  - System.Web.UI.Control.Focus\n  - System.Web.UI.Control.GetRouteUrl(System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)\n  - System.Web.UI.Control.HasChildViewState\n  - System.Web.UI.Control.HasControls\n  - System.Web.UI.Control.HasEvents\n  - System.Web.UI.Control.ID\n  - System.Web.UI.Control.IdSeparator\n  - System.Web.UI.Control.Init\n  - System.Web.UI.Control.IsChildControlStateCleared\n  - System.Web.UI.Control.IsLiteralContent\n  - System.Web.UI.Control.IsTrackingViewState\n  - System.Web.UI.Control.IsViewStateEnabled\n  - System.Web.UI.Control.Load\n  - System.Web.UI.Control.LoadViewStateByID\n  - System.Web.UI.Control.MapPathSecure(System.String)\n  - System.Web.UI.Control.NamingContainer\n  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.OnDataBinding(System.EventArgs)\n  - System.Web.UI.Control.OnLoad(System.EventArgs)\n  - System.Web.UI.Control.OnUnload(System.EventArgs)\n  - System.Web.UI.Control.OpenFile(System.String)\n  - System.Web.UI.Control.Page\n  - System.Web.UI.Control.Parent\n  - System.Web.UI.Control.PreRender\n  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)\n  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)\n  - System.Web.UI.Control.RenderingCompatibility\n  - System.Web.UI.Control.ResolveAdapter\n  - System.Web.UI.Control.ResolveClientUrl(System.String)\n  - System.Web.UI.Control.ResolveUrl(System.String)\n  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)\n  - System.Web.UI.Control.Site\n  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions\n  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.TemplateControl\n  - System.Web.UI.Control.TemplateSourceDirectory\n  - System.Web.UI.Control.UniqueID\n  - System.Web.UI.Control.Unload\n  - System.Web.UI.Control.ValidateRequestMode\n  - System.Web.UI.Control.ViewState\n  - System.Web.UI.Control.ViewStateIgnoresCase\n  - System.Web.UI.Control.ViewStateMode\n  - System.Web.UI.Control.Visible\n  - System.Web.UI.WebControls.Panel.AddAttributesToRender(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.Panel.BackImageUrl\n  - System.Web.UI.WebControls.Panel.CreateControlStyle\n  - System.Web.UI.WebControls.Panel.Direction\n  - System.Web.UI.WebControls.Panel.GroupingText\n  - System.Web.UI.WebControls.Panel.HorizontalAlign\n  - System.Web.UI.WebControls.Panel.RenderBeginTag(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.Panel.RenderEndTag(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.WebControls.Panel.ScrollBars\n  - System.Web.UI.WebControls.Panel.SupportsDisabledAttribute\n  - System.Web.UI.WebControls.Panel.Wrap\n  - System.Web.UI.WebControls.WebControl.AccessKey\n  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)\n  - System.Web.UI.WebControls.WebControl.Attributes\n  - System.Web.UI.WebControls.WebControl.BackColor\n  - System.Web.UI.WebControls.WebControl.BorderColor\n  - System.Web.UI.WebControls.WebControl.BorderStyle\n  - System.Web.UI.WebControls.WebControl.BorderWidth\n  - System.Web.UI.WebControls.WebControl.ControlStyle\n  - System.Web.UI.WebControls.WebControl.ControlStyleCreated\n  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)\n  - System.Web.UI.WebControls.WebControl.CssClass\n  - System.Web.UI.WebControls.WebControl.DisabledCssClass\n  - System.Web.UI.WebControls.WebControl.Enabled\n  - System.Web.UI.WebControls.WebControl.EnableTheming\n  - System.Web.UI.WebControls.WebControl.Font\n  - System.Web.UI.WebControls.WebControl.ForeColor\n  - System.Web.UI.WebControls.WebControl.HasAttributes\n  - System.Web.UI.WebControls.WebControl.Height\n  - System.Web.UI.WebControls.WebControl.IsEnabled\n  - System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)\n  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)\n  - System.Web.UI.WebControls.WebControl.SaveViewState\n  - System.Web.UI.WebControls.WebControl.SkinID\n  - System.Web.UI.WebControls.WebControl.Style\n  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)\n  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)\n  - System.Web.UI.WebControls.WebControl.TabIndex\n  - System.Web.UI.WebControls.WebControl.TagKey\n  - System.Web.UI.WebControls.WebControl.TagName\n  - System.Web.UI.WebControls.WebControl.ToolTip\n  - System.Web.UI.WebControls.WebControl.TrackViewState\n  - System.Web.UI.WebControls.WebControl.Width\n  - System.Web.UI.WebControls.WebParts.CatalogPart.DisplayTitle\n  - System.Web.UI.WebControls.WebParts.CatalogPart.GetDesignModeState\n  - System.Web.UI.WebControls.WebParts.CatalogPart.OnPreRender(System.EventArgs)\n  - System.Web.UI.WebControls.WebParts.CatalogPart.SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.WebControls.WebParts.CatalogPart.WebPartManager\n  - System.Web.UI.WebControls.WebParts.CatalogPart.Zone\n  - System.Web.UI.WebControls.WebParts.Part.ChromeState\n  - System.Web.UI.WebControls.WebParts.Part.ChromeType\n  - System.Web.UI.WebControls.WebParts.Part.Controls\n  - System.Web.UI.WebControls.WebParts.Part.DataBind\n  - System.Web.UI.WebControls.WebParts.Part.Description\n  - System.Web.UI.WebControls.WebParts.Part.System#Web#UI#WebControls#ICompositeControlDesignerAccessor#RecreateChildControls\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: ImportCatalogPart()\n  nameWithType: ImportCatalogPart.ImportCatalogPart()\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportCatalogPart()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.ImportCatalogPart\"></xref> class.\n  remarks: \"The ImportCatalogPart constructor is a default; no constructor is declared in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class and hence no special tasks are carried out when a new instance of the class is created. The .NET Framework uses the constructor internally to create an instance of the class.  \\n  \\n Normally you will not need to use the ImportCatalogPart constructor programmatically in your own code. The intended use of the control is for page developers to add it to a page declaratively at design time.\"\n  syntax:\n    content: public ImportCatalogPart ();\n    parameters: []\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText\n  id: BrowseHelpText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: BrowseHelpText\n  nameWithType: ImportCatalogPart.BrowseHelpText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets a text message that instructs users to browse to the location of a description file.\n  remarks: 'The BrowseHelpText property gives users a simple overview of the first thing they must do in the process of adding an imported control: provide the location of a description file, by either typing in a path or browsing to the file. A typical reason to supply a custom value for this property is if you have special instructions for users, such as a specific network share to which they should browse to locate a description file.'\n  example:\n  - \"The following code example demonstrates how to use the BrowseHelpText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \\n  \\n In the following section of code, notice that the BrowseHelpText property value is set declaratively for the control.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_847_1.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_847_1.aspx)]  \\n  \\n In this section of code, the BrowseHelpText property value is assigned programmatically.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_847_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_847_2.aspx)]  \\n  \\n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the BrowseHelpText property.\"\n  syntax:\n    content: public string BrowseHelpText { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the text of the message. The default value is a culture-specific message supplied by the .NET Framework.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls\n  id: CreateChildControls\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: CreateChildControls()\n  nameWithType: ImportCatalogPart.CreateChildControls()\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  syntax:\n    content: protected override void CreateChildControls ();\n    parameters: []\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton\n  id: DefaultButton\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: DefaultButton\n  nameWithType: ImportCatalogPart.DefaultButton\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets what button in the user interface (UI) is treated as the default button that receives the focus when form that contains the button is rendered. This property is not intended to be called from page developer code.\n  remarks: \"The code for this property overrides the base property inherited from the <xref:System.Web.UI.WebControls.Panel> class to hide the property from designers and prevent it from being affected by themes. Though it is public, this property is used internally by the Web Parts control set for default rendering of this control and is not intended to be used by page developers.  \\n  \\n This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public override string DefaultButton { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the ID of the <xref href=\"System.Web.UI.WebControls.Button\"></xref> that receives the default focus in a <xref href=\"System.Web.UI.WebControls.Panel\"></xref> control.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions\n  id: GetAvailableWebPartDescriptions\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: GetAvailableWebPartDescriptions()\n  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions()\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Returns a collection of descriptions of the available <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> controls in a catalog.\n  remarks: \"The GetAvailableWebPartDescriptions method provides an implementation for the abstract base method declared in the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> class. The GetAvailableWebPartDescriptions method returns description information for each control in a catalog. Note that in the case of an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, there can be only one server control in the catalog at a time, even though the method would work if there were multiple controls.  \\n  \\n A <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object is an object that contains essential information about a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, including its ID, an object reference to the control, and the values of several important properties that are inherited from the <xref:System.Web.UI.WebControls.WebParts.Part> class, such as <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> and <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>.  \\n  \\n The GetAvailableWebPartDescriptions method improves performance. When a catalog is created, it needs some information about each control it contains, including a title, a description, an icon (if one exists), and an ID. Rather than having to create an instance of each control to get this information, a <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zone that creates a catalog calls the GetAvailableWebPartDescriptions method, and the call returns only the description information for the control rather than an instance of the control.\"\n  example:\n  - \"The following code example demonstrates how to use the GetAvailableWebPartDescriptions method on a Web page. The example has four parts:  \\n  \\n-   A user control that enables you to change display modes on a Web Parts page.  \\n  \\n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, along with code that uses the GetAvailableWebPartDescriptions method.  \\n  \\n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \\n  \\n-   An explanation of how the example works when you load the page in a browser.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_1.ascx)]\\n [!code-vb[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_1.ascx)]  \\n  \\n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Both of these controls are referenced declaratively in the markup of the page. On the declarative references to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (both begin with an `aspSample` prefix), note that each has an `exportMode=\\\"all\\\"` attribute added to it. This attribute enables you to export a .WebPart description file for the control, which you will use in a later to step to import the control to a page.  \\n  \\n> [!NOTE]\\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\\\"true\\\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \\n  \\n The Web page also has a declarative reference to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, nested within the proper hierarchy of declarative elements. The GetAvailableWebPartDescriptions method is called within the code for the `Button1_Click` method.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_2.aspx)]  \\n  \\n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_3.cs)]\\n [!code-vb[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_3.vb)]  \\n  \\n Now run the code example. Load the Web page in a browser. The first step is export a .WebPart description file for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control (for the `TextDisplayWebPart` and for the `UserInfoWebPart` control). For each control, click the verbs menu on the control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. After you have exported a description file for each control, close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` and the `<aspSample:textdisplaywebpart>` control declaration elements, then save and close the file. (You are doing this step to simulate a user who does not yet have these controls, so you can import the controls to the page).  \\n  \\n Load the Web page again in a browser. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Browse** button, browse to the .WebPart files you created, select one, then click the **Upload** button. A reference to the control should appear with a check box next to it. Select the check box, then click **Add** to add the control to the page. Repeat this process for the other control.  \\n  \\n While you are in this view of the page, click the **Get WebPart Description** button near the bottom of the page to see the effect of programmatically accessing the <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object for the control description currently loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. The method used to access the description details, found in the `Button1_Click` method of the page source, is the GetAvailableWebPartDescriptions method. A label below the button displays basic details about the control.  \\n  \\n After adding the first control, repeat the process to add the second control to the page. Finally, click **Close** to exit catalog mode and return the page to browse mode. Both custom controls should now appear in the page, containing the values they had when you exported description files earlier.\"\n  syntax:\n    content: public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();\n    parameters: []\n    return:\n      type: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection\"></xref> that contains a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"></xref> for each control in a catalog.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)\n  id: GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: GetWebPart(WebPartDescription)\n  nameWithType: ImportCatalogPart.GetWebPart(WebPartDescription)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(WebPartDescription)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Returns a reference to a <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control based on the values in the description passed into the method.\n  remarks: The GetWebPart method returns a reference to a <xref:System.Web.UI.WebControls.WebParts.WebPart> control whose description details match the values of the <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object passed into the method. Typically, this method is used together with the <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> method, which is used to retrieve the descriptions of controls in the catalog. Individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls can then be retrieved or manipulated as needed by passing individual <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> objects to the GetWebPart method.\n  example:\n  - \"The following code example demonstrates how to use the GetWebPart method on a Web page. The example has four parts:  \\n  \\n-   A user control that enables you to change display modes on a Web Parts page.  \\n  \\n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, along with code that uses the GetWebPart method.  \\n  \\n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \\n  \\n-   An explanation of how the example works when you load the page in a browser.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_1.ascx)]\\n [!code-vb[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_1.ascx)]  \\n  \\n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Both of these controls are referenced declaratively in the markup of the page. On the declarative references to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (both begin with an `aspSample` prefix), note that each has an `exportMode=\\\"all\\\"` attribute added to it. This attribute enables you to export a .WebPart description file for the control, which you will use in a later to step to import the control to a page.  \\n  \\n> [!NOTE]\\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\\\"true\\\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \\n  \\n The Web page also has a declarative reference to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, nested within the proper hierarchy of declarative elements. The GetWebPart method is called within the code for the `Button2_Click` method.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_2.aspx)]  \\n  \\n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_3.cs)]\\n [!code-vb[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_3.vb)]  \\n  \\n Now run the code example. Load the Web page in a browser. The first step is export a .WebPart description file for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control (for the `TextDisplayWebPart` and for the `UserInfoWebPart` control). For each control, click the verbs menu on the control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. After you have exported a description file for each control, close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` and the `<aspSample:textdisplaywebpart>` control declaration elements, then save and close the file. (You are doing this step to simulate a user who does not yet have these controls, so you can import the controls to the page).  \\n  \\n Load the Web page again in a browser. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Browse** button, browse to the .WebPart files you created, select one, then click the **Upload** button. A reference to the control should appear with a check box next to it. Now that the control description is uploaded to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Use GetWebPart** button near the bottom of the page. This will demonstrate the effect of calling the GetWebPart method and passing to it the control description currently loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. Note that the associated server control is added immediately to the Web page, without the user having to click the **Add** button. The GetWebPart method, which is called in the `Button2_Click` method of the page source, returns the <xref:System.Web.UI.WebControls.WebParts.WebPart> control associated with the current description that is loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. Next the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> method is called, and the <xref:System.Web.UI.WebControls.WebParts.WebPart> control is directly added to the page. This demonstrates how to add a control programmatically from the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control without user intervention.  \\n  \\n After adding the first control, repeat the process to add the second control to the page. Finally, click **Close** to exit catalog mode and return the page to browse mode. Both custom controls should now appear in the page, containing the values they had when you exported description files earlier.\"\n  syntax:\n    content: public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);\n    parameters:\n    - id: description\n      type: System.Web.UI.WebControls.WebParts.WebPartDescription\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"></xref> that contains details about the control.\n    return:\n      type: System.Web.UI.WebControls.WebParts.WebPart\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.WebPart\"></xref> control whose description matches the values in <code>description</code>.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>description</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>description</code> is not an available <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDescription\"></xref> value.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText\n  id: ImportedPartLabelText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: ImportedPartLabelText\n  nameWithType: ImportCatalogPart.ImportedPartLabelText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets text displayed after a user imports a description file to represent or describe the imported control within the catalog of imported controls.\n  remarks: The ImportedPartLabelText property is typically used to contain a short, general label that describes the control contained in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control.\n  example:\n  - \"The following code example demonstrates how to use the ImportedPartLabelText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \\n  \\n In the following section of code, notice that the ImportedPartLabelText property value is set declaratively for the control.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_718_1.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_718_1.aspx)]  \\n  \\n In this section of code, the ImportedPartLabelText property value is assigned programmatically.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_718_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_718_2.aspx)]  \\n  \\n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the ImportedPartLabelText property.\"\n  syntax:\n    content: public string ImportedPartLabelText { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the text of the label. The default value is a culture-specific message supplied by the .NET Framework.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)\n  id: LoadControlState(System.Object)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: LoadControlState(Object)\n  nameWithType: ImportCatalogPart.LoadControlState(Object)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  syntax:\n    content: protected override void LoadControlState (object savedState);\n    parameters:\n    - id: savedState\n      type: System.Object\n      description: To be added.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)\n  id: OnInit(System.EventArgs)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: OnInit(EventArgs)\n  nameWithType: ImportCatalogPart.OnInit(EventArgs)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(EventArgs)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  syntax:\n    content: protected override void OnInit (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: To be added.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText\n  id: PartImportErrorLabelText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: PartImportErrorLabelText\n  nameWithType: ImportCatalogPart.PartImportErrorLabelText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets an error message that is displayed if an error occurs during the import process.\n  remarks: The PartImportErrorLabelText property is useful for notifying a user if some problem or error occurs while the page attempts to import a description file.\n  example:\n  - \"The following code example demonstrates how to use the PartImportErrorLabelText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \\n  \\n In the following section of code, notice that the PartImportErrorLabelText property value is set declaratively for the control.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1241_1.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1241_1.aspx)]  \\n  \\n In this section of code, the PartImportErrorLabelText property value is assigned programmatically.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1241_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1241_2.aspx)]  \\n  \\n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the PartImportErrorLabelText property.\"\n  syntax:\n    content: public string PartImportErrorLabelText { get; set; }\n    return:\n      type: System.String\n      description: A string that contains the text of the label. The default value is a culture-specific message supplied by the .NET Framework.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)\n  id: Render(System.Web.UI.HtmlTextWriter)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: Render(HtmlTextWriter)\n  nameWithType: ImportCatalogPart.Render(HtmlTextWriter)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(HtmlTextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  syntax:\n    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);\n    parameters:\n    - id: writer\n      type: System.Web.UI.HtmlTextWriter\n      description: To be added.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)\n  id: RenderContents(System.Web.UI.HtmlTextWriter)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: RenderContents(HtmlTextWriter)\n  nameWithType: ImportCatalogPart.RenderContents(HtmlTextWriter)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(HtmlTextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  syntax:\n    content: protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);\n    parameters:\n    - id: writer\n      type: System.Web.UI.HtmlTextWriter\n      description: To be added.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState\n  id: SaveControlState\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: SaveControlState()\n  nameWithType: ImportCatalogPart.SaveControlState()\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  syntax:\n    content: protected override object SaveControlState ();\n    parameters: []\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title\n  id: Title\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: Title\n  nameWithType: ImportCatalogPart.Title\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets the title that appears in the title bar of an <xref href=\"System.Web.UI.WebControls.WebParts.ImportCatalogPart\"></xref> control.\n  remarks: The Title property value is displayed in the title bar of an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control when the control is visible in catalog mode. When the control is declared in a page, you can set a value for the property by using the `Title` attribute. If you do not supply a value for the title, a culture-specific default value is used to describe the kind of properties that this control allows users to edit.\n  example:\n  - \"The following code example demonstrates how to use the Title property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \\n  \\n In the following section of code, notice that the Title property value is set declaratively for the control.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_135_1.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_135_1.aspx)]  \\n  \\n In this section of code, the Title property value is assigned programmatically.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_135_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_135_2.aspx)]  \\n  \\n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the Title property.\"\n  syntax:\n    content: public override string Title { get; set; }\n    return:\n      type: System.String\n      description: A string that is used as the title of the control. The default value is a calculated control name supplied by the Web Parts control set.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText\n  id: UploadButtonText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: UploadButtonText\n  nameWithType: ImportCatalogPart.UploadButtonText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets the text for the <xref href=\"System.Web.UI.WebControls.Button\"></xref> control that initiates the upload of a description file.\n  remarks: The UploadButtonText property provides the text for the <xref:System.Web.UI.WebControls.Button> control that initiates the upload process. If you assign custom text to this property, or to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> property, the text should make clear that the user is uploading a description file. The text should not say or imply that the upload process is actually uploading the control itself.\n  example:\n  - \"The following code example demonstrates how to use the UploadButtonText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \\n  \\n In the following section of code, notice that the UploadButtonText property value is set declaratively for the control.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_939_1.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_939_1.aspx)]  \\n  \\n In this section of code, the UploadButtonText property value is assigned programmatically.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_939_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_939_2.aspx)]  \\n  \\n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the UploadButtonText property.\"\n  syntax:\n    content: public string UploadButtonText { get; set; }\n    return:\n      type: System.String\n      description: A string that is used as the text for a <xref href=\"System.Web.UI.WebControls.Button\"></xref>. The default value is a culture-specific string supplied by the Web Parts control set.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText\n  id: UploadHelpText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  langs:\n  - csharp\n  name: UploadHelpText\n  nameWithType: ImportCatalogPart.UploadHelpText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets or sets the text of the message that tells the user how to upload a description file.\n  remarks: The UploadHelpText property provides a brief sentence or phrase of instructions for users, telling them to click a button to upload the description file. If you assign custom text to this property, or to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> property, the text should make clear that the user is uploading a description file. The text should not say or imply that the upload process is actually uploading the control itself.\n  example:\n  - \"The following code example demonstrates how to use the UploadHelpText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \\n  \\n In the following section of code, notice that the UploadHelpText property value is set declaratively for the control.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1_1.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1_1.aspx)]  \\n  \\n In this section of code, the UploadHelpText property value is assigned programmatically.  \\n  \\n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1_2.aspx)]\\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1_2.aspx)]  \\n  \\n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the UploadHelpText property.\"\n  syntax:\n    content: public string UploadHelpText { get; set; }\n    return:\n      type: System.String\n      description: A string that is used as instructions for the user to upload a description file. The default value is a culture-specific string supplied by the Web Parts control set.\n  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.WebControls.WebParts.CatalogPart\n  isExternal: false\n  name: System.Web.UI.WebControls.WebParts.CatalogPart\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: ImportCatalogPart()\n  nameWithType: ImportCatalogPart.ImportCatalogPart()\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportCatalogPart()\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: BrowseHelpText\n  nameWithType: ImportCatalogPart.BrowseHelpText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: CreateChildControls()\n  nameWithType: ImportCatalogPart.CreateChildControls()\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls()\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: DefaultButton\n  nameWithType: ImportCatalogPart.DefaultButton\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: GetAvailableWebPartDescriptions()\n  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions()\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions()\n- uid: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: WebPartDescriptionCollection\n  nameWithType: WebPartDescriptionCollection\n  fullName: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: GetWebPart(WebPartDescription)\n  nameWithType: ImportCatalogPart.GetWebPart(WebPartDescription)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(WebPartDescription)\n- uid: System.Web.UI.WebControls.WebParts.WebPart\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: WebPart\n  nameWithType: WebPart\n  fullName: System.Web.UI.WebControls.WebParts.WebPart\n- uid: System.Web.UI.WebControls.WebParts.WebPartDescription\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: WebPartDescription\n  nameWithType: WebPartDescription\n  fullName: System.Web.UI.WebControls.WebParts.WebPartDescription\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: ImportedPartLabelText\n  nameWithType: ImportCatalogPart.ImportedPartLabelText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: LoadControlState(Object)\n  nameWithType: ImportCatalogPart.LoadControlState(Object)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: OnInit(EventArgs)\n  nameWithType: ImportCatalogPart.OnInit(EventArgs)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: PartImportErrorLabelText\n  nameWithType: ImportCatalogPart.PartImportErrorLabelText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: Render(HtmlTextWriter)\n  nameWithType: ImportCatalogPart.Render(HtmlTextWriter)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(HtmlTextWriter)\n- uid: System.Web.UI.HtmlTextWriter\n  parent: System.Web.UI\n  isExternal: false\n  name: HtmlTextWriter\n  nameWithType: HtmlTextWriter\n  fullName: System.Web.UI.HtmlTextWriter\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: RenderContents(HtmlTextWriter)\n  nameWithType: ImportCatalogPart.RenderContents(HtmlTextWriter)\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(HtmlTextWriter)\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: SaveControlState()\n  nameWithType: ImportCatalogPart.SaveControlState()\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState()\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: Title\n  nameWithType: ImportCatalogPart.Title\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: UploadButtonText\n  nameWithType: ImportCatalogPart.UploadButtonText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: UploadHelpText\n  nameWithType: ImportCatalogPart.UploadHelpText\n  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: ImportCatalogPart\n  nameWithType: ImportCatalogPart.ImportCatalogPart\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: BrowseHelpText\n  nameWithType: ImportCatalogPart.BrowseHelpText\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: CreateChildControls\n  nameWithType: ImportCatalogPart.CreateChildControls\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: DefaultButton\n  nameWithType: ImportCatalogPart.DefaultButton\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: GetAvailableWebPartDescriptions\n  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: GetWebPart\n  nameWithType: ImportCatalogPart.GetWebPart\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: ImportedPartLabelText\n  nameWithType: ImportCatalogPart.ImportedPartLabelText\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: LoadControlState\n  nameWithType: ImportCatalogPart.LoadControlState\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: OnInit\n  nameWithType: ImportCatalogPart.OnInit\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: PartImportErrorLabelText\n  nameWithType: ImportCatalogPart.PartImportErrorLabelText\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: Render\n  nameWithType: ImportCatalogPart.Render\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: RenderContents\n  nameWithType: ImportCatalogPart.RenderContents\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: SaveControlState\n  nameWithType: ImportCatalogPart.SaveControlState\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: Title\n  nameWithType: ImportCatalogPart.Title\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: UploadButtonText\n  nameWithType: ImportCatalogPart.UploadButtonText\n- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText*\n  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart\n  isExternal: false\n  name: UploadHelpText\n  nameWithType: ImportCatalogPart.UploadHelpText\n"}