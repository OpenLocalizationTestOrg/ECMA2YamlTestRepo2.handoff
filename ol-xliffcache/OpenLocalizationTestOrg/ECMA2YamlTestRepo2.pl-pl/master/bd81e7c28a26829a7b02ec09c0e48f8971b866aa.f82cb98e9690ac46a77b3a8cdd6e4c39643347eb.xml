{"nodes":[{"pos":[963,1128],"content":"Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.","pos":[0,165]}]},{"pos":[1140,1477],"content":"This class is the base class for the implementation of custom peer name resolvers. A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh. It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class is the base class for the implementation of custom peer name resolvers. A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh. It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.","pos":[0,337],"nodes":[{"content":"This class is the base class for the implementation of custom peer name resolvers.","pos":[0,82]},{"content":"A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh.","pos":[83,197]},{"content":"It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.","pos":[198,337]}]}]},{"pos":[1984,2078],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.PeerResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.PeerResolver\"></xref> class."},{"pos":[2620,2676],"content":"Gets whether the peer name resolver can share referrals.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether the peer name resolver can share referrals.","pos":[0,56]}]},{"pos":[2806,2879],"content":"If true, the peer name resolver can share referrals; if false, it cannot.","needQuote":true,"needEscape":true,"nodes":[{"content":"If true, the peer name resolver can share referrals; if false, it cannot.","pos":[0,73]}]},{"pos":[3867,3966],"content":"Initializes the current peer resolver instance with the new supplied endpoint address and settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes the current peer resolver instance with the new supplied endpoint address and settings.","pos":[0,99]}]},{"pos":[3978,4261],"content":"This method simply initializes the existing peer resolver instance; it does not create a new one. To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method simply initializes the existing peer resolver instance; it does not create a new one. To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).","pos":[0,283],"nodes":[{"content":"This method simply initializes the existing peer resolver instance; it does not create a new one.","pos":[0,97]},{"content":"To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, &lt;xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement&gt;).","pos":[98,283],"source":" To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>)."}]}]},{"pos":[4642,4755],"content":"<xref:System.ServiceModel.EndpointAddress> that contains the new endpoint address of this peer resolver instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.ServiceModel.EndpointAddress&gt; that contains the new endpoint address of this peer resolver instance.","pos":[0,113],"source":"<xref:System.ServiceModel.EndpointAddress> that contains the new endpoint address of this peer resolver instance."}]},{"pos":[4842,4948],"content":"<xref:System.ServiceModel.Channels.Binding> that specifies the new network binding for this peer resolver.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.ServiceModel.Channels.Binding&gt; that specifies the new network binding for this peer resolver.","pos":[0,106],"source":"<xref:System.ServiceModel.Channels.Binding> that specifies the new network binding for this peer resolver."}]},{"pos":[5052,5174],"content":"<xref:System.ServiceModel.Description.ClientCredentials> that specifies the new client credentials for this peer resolver.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.ServiceModel.Description.ClientCredentials&gt; that specifies the new client credentials for this peer resolver.","pos":[0,122],"source":"<xref:System.ServiceModel.Description.ClientCredentials> that specifies the new client credentials for this peer resolver."}]},{"pos":[5284,5420],"content":"<bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.PeerResolvers.PeerReferralPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the new referral policy for this peer resolver.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.ServiceModel.PeerResolvers.PeerReferralPolicy\"></xref> that specifies the new referral policy for this peer resolver."},{"pos":[6084,6178],"content":"Registers a <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for a specific peer mesh.","needQuote":true,"needEscape":true,"source":"Registers a <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a specific peer mesh."},{"pos":[6396,6463],"content":"The ID of the peer mesh in which the peer node is to be registered.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ID of the peer mesh in which the peer node is to be registered.","pos":[0,67]}]},{"pos":[6553,6650],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be registered with the peer mesh.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> to be registered with the peer mesh."},{"pos":[6716,6890],"content":"The length of time to wait for success before aborting the attempt to register with the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of time to wait for success before aborting the attempt to register with the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.","pos":[0,174],"nodes":[{"content":"The length of time to wait for success before aborting the attempt to register with the peer mesh.","pos":[0,98]},{"content":"If the attempt fails, &lt;xref:System.TimeoutException&gt; is raised on the peer.","pos":[99,174],"source":" If the attempt fails, <xref:System.TimeoutException> is raised on the peer."}]}]},{"pos":[6948,7166],"content":"An <xref:System.Object> that represents the registration ID. This registration ID object is passed to the <xref:System.ServiceModel.PeerResolver.Update*> and <xref:System.ServiceModel.PeerResolver.Unregister*> methods.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; that represents the registration ID.","pos":[0,60],"source":"An <xref:System.Object> that represents the registration ID."},{"content":"This registration ID object is passed to the &lt;xref:System.ServiceModel.PeerResolver.Update<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.ServiceModel.PeerResolver.Unregister<ept id=\"p1\">*</ept>&gt; methods.","pos":[61,218],"source":" This registration ID object is passed to the <xref:System.ServiceModel.PeerResolver.Update*> and <xref:System.ServiceModel.PeerResolver.Unregister*> methods."}]},{"pos":[7747,7852],"content":"Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.","pos":[0,105]}]},{"pos":[8118,8281],"content":"The mesh ID of the peer mesh within which the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects representing participating nodes are to be obtained.","needQuote":true,"needEscape":true,"source":"The mesh ID of the peer mesh within which the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing participating nodes are to be obtained."},{"pos":[8349,8392],"content":"The number of endpoint addresses to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of endpoint addresses to return.","pos":[0,43]}]},{"pos":[8458,8652],"content":"The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.","pos":[0,194],"nodes":[{"content":"The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh.","pos":[0,118]},{"content":"If the attempt fails, &lt;xref:System.TimeoutException&gt; is raised on the peer.","pos":[119,194],"source":" If the attempt fails, <xref:System.TimeoutException> is raised on the peer."}]}]},{"pos":[8783,8981],"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.ReadOnlyCollection%601<ph id=\"ph2\">&amp;gt;</ph> that contains <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects representing nodes participating in the peer mesh.","needQuote":true,"needEscape":true,"source":"A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing nodes participating in the peer mesh."},{"pos":[9532,9591],"content":"Removes the registration entry for a node from a peer mesh.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the registration entry for a node from a peer mesh.","pos":[0,59]}]},{"pos":[9604,10623],"content":"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID. This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.       Unregister is called in two specific cases:      -   When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).      -   When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh. As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call Unregister to unregister itself from the <xref:System.ServiceModel.PeerResolver>. If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID. This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.       Unregister is called in two specific cases:      -   When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).      -   When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh. As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call Unregister to unregister itself from the <xref:System.ServiceModel.PeerResolver>. If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.","pos":[0,1013],"nodes":[{"content":"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID.","pos":[0,126]},{"content":"This ID value must have been obtained in a previous call to &lt;xref:System.ServiceModel.PeerResolver.Register%2A&gt;.","pos":[127,239],"source":" This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>."},{"content":"Unregister is called in two specific cases:      -   When the &lt;xref:System.ServiceModel.PeerNode&gt; is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).","pos":[246,469],"source":"       Unregister is called in two specific cases:      -   When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it)."},{"content":"-   When the &lt;xref:System.ServiceModel.PeerNode&gt; can find no available endpoint addresses of other nodes participating in the peer mesh.","pos":[475,611],"source":"      -   When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh."},{"content":"As a result, the &lt;xref:System.ServiceModel.PeerNode&gt; is no longer reachable, and it will attempt to call Unregister to unregister itself from the &lt;xref:System.ServiceModel.PeerResolver&gt;.","pos":[612,798],"source":" As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call Unregister to unregister itself from the <xref:System.ServiceModel.PeerResolver>."},{"content":"If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling &lt;xref:System.ServiceModel.PeerResolver.Register%2A&gt; and obtaining a new registration ID.","pos":[799,1013],"source":" If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID."}]}]},{"pos":[10809,10921],"content":"A registration ID for the node obtained by a previous call to <xref:System.ServiceModel.PeerResolver.Register*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A registration ID for the node obtained by a previous call to &lt;xref:System.ServiceModel.PeerResolver.Register*&gt;.","pos":[0,112],"source":"A registration ID for the node obtained by a previous call to <xref:System.ServiceModel.PeerResolver.Register*>."}]},{"pos":[10987,11154],"content":"The length of time to wait for a successful removal of the registration from the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of time to wait for a successful removal of the registration from the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.","pos":[0,167],"nodes":[{"content":"The length of time to wait for a successful removal of the registration from the peer mesh.","pos":[0,91]},{"content":"If the attempt fails, &lt;xref:System.TimeoutException&gt; is raised on the peer.","pos":[92,167],"source":" If the attempt fails, <xref:System.TimeoutException> is raised on the peer."}]}]},{"pos":[11808,11925],"content":"Updates the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for a node registered with a specific peer mesh.","needQuote":true,"needEscape":true,"source":"Updates the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a node registered with a specific peer mesh."},{"pos":[11937,12043],"content":"Update is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Update is called when the address of the &lt;xref:System.ServiceModel.PeerNode&gt; changes on the local machine.","pos":[0,106],"source":"Update is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine."}]},{"pos":[12280,12398],"content":"A registration ID token for the node, obtained by a previous call to <xref:System.ServiceModel.PeerResolver.Register*>","needQuote":true,"needEscape":true,"nodes":[{"content":"A registration ID token for the node, obtained by a previous call to &lt;xref:System.ServiceModel.PeerResolver.Register*&gt;","pos":[0,118],"source":"A registration ID token for the node, obtained by a previous call to <xref:System.ServiceModel.PeerResolver.Register*>"}]},{"pos":[12495,12561],"content":"The updated endpoint address (and other multihoming IP addresses).","needQuote":true,"needEscape":true,"nodes":[{"content":"The updated endpoint address (and other multihoming IP addresses).","pos":[0,66]}]},{"pos":[12627,12825],"content":"The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.","pos":[0,198],"nodes":[{"content":"The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh.","pos":[0,122]},{"content":"If the attempt fails, &lt;xref:System.TimeoutException&gt; is raised on the peer.","pos":[123,198],"source":" If the attempt fails, <xref:System.TimeoutException> is raised on the peer."}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.PeerResolver\n  id: PeerResolver\n  children:\n  - System.ServiceModel.PeerResolver.#ctor\n  - System.ServiceModel.PeerResolver.CanShareReferrals\n  - System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  - System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  - System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)\n  - System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\n  - System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  langs:\n  - csharp\n  name: PeerResolver\n  nameWithType: PeerResolver\n  fullName: System.ServiceModel.PeerResolver\n  type: Class\n  summary: Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.\n  remarks: This class is the base class for the implementation of custom peer name resolvers. A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh. It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.\n  syntax:\n    content: public abstract class PeerResolver\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.PeerResolver.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: PeerResolver()\n  nameWithType: PeerResolver.PeerResolver()\n  fullName: System.ServiceModel.PeerResolver.PeerResolver()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.PeerResolver\"></xref> class.\n  syntax:\n    content: protected PeerResolver ();\n    parameters: []\n  overload: System.ServiceModel.PeerResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.PeerResolver.CanShareReferrals\n  id: CanShareReferrals\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: CanShareReferrals\n  nameWithType: PeerResolver.CanShareReferrals\n  fullName: System.ServiceModel.PeerResolver.CanShareReferrals\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets whether the peer name resolver can share referrals.\n  syntax:\n    content: public abstract bool CanShareReferrals { get; }\n    return:\n      type: System.Boolean\n      description: If true, the peer name resolver can share referrals; if false, it cannot.\n  overload: System.ServiceModel.PeerResolver.CanShareReferrals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  id: Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)\n  nameWithType: PeerResolver.Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)\n  fullName: System.ServiceModel.PeerResolver.Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes the current peer resolver instance with the new supplied endpoint address and settings.\n  remarks: This method simply initializes the existing peer resolver instance; it does not create a new one. To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).\n  syntax:\n    content: public virtual void Initialize (System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.Binding binding, System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy);\n    parameters:\n    - id: address\n      type: System.ServiceModel.EndpointAddress\n      description: <xref:System.ServiceModel.EndpointAddress> that contains the new endpoint address of this peer resolver instance.\n    - id: binding\n      type: System.ServiceModel.Channels.Binding\n      description: <xref:System.ServiceModel.Channels.Binding> that specifies the new network binding for this peer resolver.\n    - id: credentials\n      type: System.ServiceModel.Description.ClientCredentials\n      description: <xref:System.ServiceModel.Description.ClientCredentials> that specifies the new client credentials for this peer resolver.\n    - id: referralPolicy\n      type: System.ServiceModel.PeerResolvers.PeerReferralPolicy\n      description: <xref href=\"System.ServiceModel.PeerResolvers.PeerReferralPolicy\"></xref> that specifies the new referral policy for this peer resolver.\n  overload: System.ServiceModel.PeerResolver.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  id: Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Register(String,PeerNodeAddress,TimeSpan)\n  nameWithType: PeerResolver.Register(String,PeerNodeAddress,TimeSpan)\n  fullName: System.ServiceModel.PeerResolver.Register(String,PeerNodeAddress,TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Registers a <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a specific peer mesh.\n  syntax:\n    content: public abstract object Register (string meshId, System.ServiceModel.PeerNodeAddress nodeAddress, TimeSpan timeout);\n    parameters:\n    - id: meshId\n      type: System.String\n      description: The ID of the peer mesh in which the peer node is to be registered.\n    - id: nodeAddress\n      type: System.ServiceModel.PeerNodeAddress\n      description: The <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> to be registered with the peer mesh.\n    - id: timeout\n      type: System.TimeSpan\n      description: The length of time to wait for success before aborting the attempt to register with the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.\n    return:\n      type: System.Object\n      description: An <xref:System.Object> that represents the registration ID. This registration ID object is passed to the <xref:System.ServiceModel.PeerResolver.Update*> and <xref:System.ServiceModel.PeerResolver.Unregister*> methods.\n  overload: System.ServiceModel.PeerResolver.Register*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)\n  id: Resolve(System.String,System.Int32,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Resolve(String,Int32,TimeSpan)\n  nameWithType: PeerResolver.Resolve(String,Int32,TimeSpan)\n  fullName: System.ServiceModel.PeerResolver.Resolve(String,Int32,TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.\n  syntax:\n    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.PeerNodeAddress> Resolve (string meshId, int maxAddresses, TimeSpan timeout);\n    parameters:\n    - id: meshId\n      type: System.String\n      description: The mesh ID of the peer mesh within which the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing participating nodes are to be obtained.\n    - id: maxAddresses\n      type: System.Int32\n      description: The number of endpoint addresses to return.\n    - id: timeout\n      type: System.TimeSpan\n      description: The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.ServiceModel.PeerNodeAddress}\n      description: A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing nodes participating in the peer mesh.\n  overload: System.ServiceModel.PeerResolver.Resolve*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\n  id: Unregister(System.Object,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Unregister(Object,TimeSpan)\n  nameWithType: PeerResolver.Unregister(Object,TimeSpan)\n  fullName: System.ServiceModel.PeerResolver.Unregister(Object,TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Removes the registration entry for a node from a peer mesh.\n  remarks: \"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID. This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.  \\n  \\n Unregister is called in two specific cases:  \\n  \\n-   When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).  \\n  \\n-   When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh. As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call Unregister to unregister itself from the <xref:System.ServiceModel.PeerResolver>. If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.\"\n  syntax:\n    content: public abstract void Unregister (object registrationId, TimeSpan timeout);\n    parameters:\n    - id: registrationId\n      type: System.Object\n      description: A registration ID for the node obtained by a previous call to <xref:System.ServiceModel.PeerResolver.Register*>.\n    - id: timeout\n      type: System.TimeSpan\n      description: The length of time to wait for a successful removal of the registration from the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.\n  overload: System.ServiceModel.PeerResolver.Unregister*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  id: Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Update(Object,PeerNodeAddress,TimeSpan)\n  nameWithType: PeerResolver.Update(Object,PeerNodeAddress,TimeSpan)\n  fullName: System.ServiceModel.PeerResolver.Update(Object,PeerNodeAddress,TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Updates the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a node registered with a specific peer mesh.\n  remarks: Update is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine.\n  syntax:\n    content: public abstract void Update (object registrationId, System.ServiceModel.PeerNodeAddress updatedNodeAddress, TimeSpan timeout);\n    parameters:\n    - id: registrationId\n      type: System.Object\n      description: A registration ID token for the node, obtained by a previous call to <xref:System.ServiceModel.PeerResolver.Register*>\n    - id: updatedNodeAddress\n      type: System.ServiceModel.PeerNodeAddress\n      description: The updated endpoint address (and other multihoming IP addresses).\n    - id: timeout\n      type: System.TimeSpan\n      description: The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh. If the attempt fails, <xref:System.TimeoutException> is raised on the peer.\n  overload: System.ServiceModel.PeerResolver.Update*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ServiceModel.PeerResolver.#ctor\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: PeerResolver()\n  nameWithType: PeerResolver.PeerResolver()\n  fullName: System.ServiceModel.PeerResolver.PeerResolver()\n- uid: System.ServiceModel.PeerResolver.CanShareReferrals\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: CanShareReferrals\n  nameWithType: PeerResolver.CanShareReferrals\n  fullName: System.ServiceModel.PeerResolver.CanShareReferrals\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)\n  nameWithType: PeerResolver.Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)\n  fullName: System.ServiceModel.PeerResolver.Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)\n- uid: System.ServiceModel.EndpointAddress\n  parent: System.ServiceModel\n  isExternal: true\n  name: EndpointAddress\n  nameWithType: EndpointAddress\n  fullName: System.ServiceModel.EndpointAddress\n- uid: System.ServiceModel.Channels.Binding\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: Binding\n  nameWithType: Binding\n  fullName: System.ServiceModel.Channels.Binding\n- uid: System.ServiceModel.Description.ClientCredentials\n  parent: System.ServiceModel.Description\n  isExternal: true\n  name: ClientCredentials\n  nameWithType: ClientCredentials\n  fullName: System.ServiceModel.Description.ClientCredentials\n- uid: System.ServiceModel.PeerResolvers.PeerReferralPolicy\n  parent: System.ServiceModel.PeerResolvers\n  isExternal: false\n  name: PeerReferralPolicy\n  nameWithType: PeerReferralPolicy\n  fullName: System.ServiceModel.PeerResolvers.PeerReferralPolicy\n- uid: System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Register(String,PeerNodeAddress,TimeSpan)\n  nameWithType: PeerResolver.Register(String,PeerNodeAddress,TimeSpan)\n  fullName: System.ServiceModel.PeerResolver.Register(String,PeerNodeAddress,TimeSpan)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ServiceModel.PeerNodeAddress\n  parent: System.ServiceModel\n  isExternal: false\n  name: PeerNodeAddress\n  nameWithType: PeerNodeAddress\n  fullName: System.ServiceModel.PeerNodeAddress\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Resolve(String,Int32,TimeSpan)\n  nameWithType: PeerResolver.Resolve(String,Int32,TimeSpan)\n  fullName: System.ServiceModel.PeerResolver.Resolve(String,Int32,TimeSpan)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.ServiceModel.PeerNodeAddress}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<PeerNodeAddress>\n  nameWithType: ReadOnlyCollection<PeerNodeAddress>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.PeerNodeAddress>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.ServiceModel.PeerNodeAddress>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ServiceModel.PeerNodeAddress\n    name: PeerNodeAddress\n    nameWithType: PeerNodeAddress\n    fullName: PeerNodeAddress\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Unregister(Object,TimeSpan)\n  nameWithType: PeerResolver.Unregister(Object,TimeSpan)\n  fullName: System.ServiceModel.PeerResolver.Unregister(Object,TimeSpan)\n- uid: System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Update(Object,PeerNodeAddress,TimeSpan)\n  nameWithType: PeerResolver.Update(Object,PeerNodeAddress,TimeSpan)\n  fullName: System.ServiceModel.PeerResolver.Update(Object,PeerNodeAddress,TimeSpan)\n- uid: System.ServiceModel.PeerResolver.#ctor*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: PeerResolver\n  nameWithType: PeerResolver.PeerResolver\n- uid: System.ServiceModel.PeerResolver.CanShareReferrals*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: CanShareReferrals\n  nameWithType: PeerResolver.CanShareReferrals\n- uid: System.ServiceModel.PeerResolver.Initialize*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Initialize\n  nameWithType: PeerResolver.Initialize\n- uid: System.ServiceModel.PeerResolver.Register*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Register\n  nameWithType: PeerResolver.Register\n- uid: System.ServiceModel.PeerResolver.Resolve*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Resolve\n  nameWithType: PeerResolver.Resolve\n- uid: System.ServiceModel.PeerResolver.Unregister*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Unregister\n  nameWithType: PeerResolver.Unregister\n- uid: System.ServiceModel.PeerResolver.Update*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Update\n  nameWithType: PeerResolver.Update\n"}