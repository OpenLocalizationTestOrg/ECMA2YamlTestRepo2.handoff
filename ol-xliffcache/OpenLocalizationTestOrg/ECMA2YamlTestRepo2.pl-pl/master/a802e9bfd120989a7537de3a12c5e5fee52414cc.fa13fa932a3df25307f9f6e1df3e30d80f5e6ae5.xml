{"nodes":[{"pos":[1266,1368],"content":"Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.","pos":[0,102],"nodes":[{"content":"Provides a simple, programmatically controlled HTTP protocol listener.","pos":[0,70]},{"content":"This class cannot be inherited.","pos":[71,102]}]}]},{"pos":[8010,8095],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.HttpListener\"></xref> class."},{"pos":[8107,8230],"content":"Before using the instance returned by this constructor, you must invoke its <xref:System.Net.HttpListener.Start%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Before using the instance returned by this constructor, you must invoke its &lt;xref:System.Net.HttpListener.Start%2A&gt; method.","pos":[0,123],"source":"Before using the instance returned by this constructor, you must invoke its <xref:System.Net.HttpListener.Start%2A> method."}]},{"pos":[8815,8955],"content":"This class cannot be used on the current operating system. Windows Server 2003 or Windows XP SP2 is required to use instances of this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class cannot be used on the current operating system. Windows Server 2003 or Windows XP SP2 is required to use instances of this class.","pos":[0,140],"nodes":[{"content":"This class cannot be used on the current operating system.","pos":[0,58]},{"content":"Windows Server 2003 or Windows XP SP2 is required to use instances of this class.","pos":[59,140]}]}]},{"pos":[9254,9375],"content":"Shuts down the <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object immediately, discarding all currently queued requests.","needQuote":true,"needEscape":true,"source":"Shuts down the <xref href=\"System.Net.HttpListener\"></xref> object immediately, discarding all currently queued requests."},{"pos":[9388,9645],"content":"This method disposes of all resources held by this listener. Any pending requests are unable to complete.       After calling this method, you will receive an <xref:System.ObjectDisposedException> if you attempt to use this <xref:System.Net.HttpListener>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method disposes of all resources held by this listener. Any pending requests are unable to complete.       After calling this method, you will receive an <xref:System.ObjectDisposedException> if you attempt to use this <xref:System.Net.HttpListener>.","pos":[0,255],"nodes":[{"content":"This method disposes of all resources held by this listener.","pos":[0,60]},{"content":"Any pending requests are unable to complete.","pos":[61,105]},{"content":"After calling this method, you will receive an &lt;xref:System.ObjectDisposedException&gt; if you attempt to use this &lt;xref:System.Net.HttpListener&gt;.","pos":[112,255],"source":"       After calling this method, you will receive an <xref:System.ObjectDisposedException> if you attempt to use this <xref:System.Net.HttpListener>."}]}]},{"pos":[10323,10376],"content":"Gets or sets the scheme used to authenticate clients.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the scheme used to authenticate clients.","pos":[0,53]}]},{"pos":[10389,11602],"content":"The <xref:System.Net.HttpListener> uses the specified scheme to authenticate all incoming requests. The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming client request only if the <xref:System.Net.HttpListener> successfully authenticates the request.       You can interrogate the identity of a successfully authenticated client by using the <xref:System.Net.HttpListenerContext.User%2A?displayProperty=fullName> property.       If you want an <xref:System.Net.HttpListener> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostName%2A> property), you must implement a method that chooses the authentication scheme. For instructions about how to do this, see the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property documentation.      > [!NOTE] >  To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.HttpListener&gt; uses the specified scheme to authenticate all incoming requests.","pos":[0,99],"source":"The <xref:System.Net.HttpListener> uses the specified scheme to authenticate all incoming requests."},{"content":"The &lt;xref:System.Net.HttpListener.GetContext%2A&gt; and &lt;xref:System.Net.HttpListener.EndGetContext%2A&gt; methods return an incoming client request only if the &lt;xref:System.Net.HttpListener&gt; successfully authenticates the request.","pos":[100,325],"source":" The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming client request only if the <xref:System.Net.HttpListener> successfully authenticates the request."},{"content":"You can interrogate the identity of a successfully authenticated client by using the &lt;xref:System.Net.HttpListenerContext.User%2A?displayProperty=fullName&gt; property.","pos":[332,497],"source":"       You can interrogate the identity of a successfully authenticated client by using the <xref:System.Net.HttpListenerContext.User%2A?displayProperty=fullName> property."},{"content":"If you want an &lt;xref:System.Net.HttpListener&gt; object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's &lt;xref:System.Net.HttpListenerRequest.Url%2A&gt; or &lt;xref:System.Net.HttpListenerRequest.UserHostName%2A&gt; property), you must implement a method that chooses the authentication scheme.","pos":[504,861],"source":"       If you want an <xref:System.Net.HttpListener> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostName%2A> property), you must implement a method that chooses the authentication scheme."},{"content":"For instructions about how to do this, see the &lt;xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A&gt; property documentation.","pos":[862,1003],"source":" For instructions about how to do this, see the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property documentation."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To set this property to enable Digest, NTLM, or Negotiate requires the &lt;xref:System.Security.Permissions.SecurityPermission&gt;, &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;.","pos":[1009,1206],"source":"      > [!NOTE] >  To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag>."}]},{"pos":[12014,12211],"content":"A bitwise combination of <xref:System.Net.AuthenticationSchemes> enumeration values that indicates how clients are to be authenticated. The default value is <xref:System.Net.AuthenticationSchemes>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of <xref:System.Net.AuthenticationSchemes> enumeration values that indicates how clients are to be authenticated. The default value is <xref:System.Net.AuthenticationSchemes>.","pos":[0,197],"nodes":[{"content":"A bitwise combination of &lt;xref:System.Net.AuthenticationSchemes&gt; enumeration values that indicates how clients are to be authenticated.","pos":[0,135],"source":"A bitwise combination of <xref:System.Net.AuthenticationSchemes> enumeration values that indicates how clients are to be authenticated."},{"content":"The default value is &lt;xref:System.Net.AuthenticationSchemes&gt;.","pos":[136,197],"source":" The default value is <xref:System.Net.AuthenticationSchemes>."}]}]},{"pos":[12391,12419],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[12869,12957],"content":"Gets or sets the delegate called to determine the protocol used to authenticate clients.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the delegate called to determine the protocol used to authenticate clients.","pos":[0,88]}]},{"pos":[12970,14673],"content":"> [!NOTE] >  If you want the same authentication protocol to be used for all requests handled by a particular instance of <xref:System.Net.HttpListener>, you do not need to set this property. To specify a protocol to be used for all client requests, use the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property.       If the client has not specified authentication information in its headers, the <xref:System.Net.HttpListener> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client. The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming request only if the <xref:System.Net.HttpListener> successfully authenticated the request. If a request cannot be authenticated, the <xref:System.Net.HttpListener> automatically sends back a 401 response. You can get the identity of a successfully authenticated client using the <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=fullName> property.       The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <xref:System.Net.HttpListener> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> property).      > [!NOTE] >  To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  If you want the same authentication protocol to be used for all requests handled by a particular instance of &lt;xref:System.Net.HttpListener&gt;, you do not need to set this property.","pos":[0,191],"source":"> [!NOTE] >  If you want the same authentication protocol to be used for all requests handled by a particular instance of <xref:System.Net.HttpListener>, you do not need to set this property."},{"content":"To specify a protocol to be used for all client requests, use the &lt;xref:System.Net.HttpListener.AuthenticationSchemes%2A&gt; property.","pos":[192,323],"source":" To specify a protocol to be used for all client requests, use the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property."},{"content":"If the client has not specified authentication information in its headers, the &lt;xref:System.Net.HttpListener&gt; calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client.","pos":[330,582],"source":"       If the client has not specified authentication information in its headers, the <xref:System.Net.HttpListener> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client."},{"content":"The &lt;xref:System.Net.HttpListener.GetContext%2A&gt; and &lt;xref:System.Net.HttpListener.EndGetContext%2A&gt; methods return an incoming request only if the &lt;xref:System.Net.HttpListener&gt; successfully authenticated the request.","pos":[583,801],"source":" The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming request only if the <xref:System.Net.HttpListener> successfully authenticated the request."},{"content":"If a request cannot be authenticated, the &lt;xref:System.Net.HttpListener&gt; automatically sends back a 401 response.","pos":[802,915],"source":" If a request cannot be authenticated, the <xref:System.Net.HttpListener> automatically sends back a 401 response."},{"content":"You can get the identity of a successfully authenticated client using the &lt;xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=fullName&gt; property.","pos":[916,1075],"source":" You can get the identity of a successfully authenticated client using the <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=fullName> property."},{"content":"The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of &lt;xref:System.Net.HttpListener&gt; to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's &lt;xref:System.Net.HttpListenerRequest.Url%2A&gt; or &lt;xref:System.Net.HttpListenerRequest.UserHostAddress%2A&gt; property).","pos":[1082,1492],"source":"       The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <xref:System.Net.HttpListener> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> property)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To set this property to enable Digest, NTLM, or Negotiate requires the &lt;xref:System.Security.Permissions.SecurityPermission&gt;, &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;.","pos":[1498,1695],"source":"      > [!NOTE] >  To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag>."}]},{"pos":[15467,15689],"content":"An <xref href=\"System.Net.AuthenticationSchemeSelector\"></xref> delegate that invokes the method used to select an authentication protocol. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Net.AuthenticationSchemeSelector\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that invokes the method used to select an authentication protocol.","pos":[0,139],"source":"An <xref href=\"System.Net.AuthenticationSchemeSelector\"></xref> delegate that invokes the method used to select an authentication protocol."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[140,222],"source":" The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[15884,15912],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[16393,16446],"content":"Begins asynchronously retrieving an incoming request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins asynchronously retrieving an incoming request.","pos":[0,53]}]},{"pos":[16459,17433],"content":"The BeginGetContext method begins an asynchronous (non-blocking) call to receive incoming client requests. Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.       The asynchronous operation must be completed by calling the <xref:System.Net.HttpListener.EndGetContext%2A> method. Typically, the method is invoked by the `callback` delegate.       This method does not block while the operation completes. To get an incoming request and block until the operation completes, call the <xref:System.Net.HttpListener.GetContext%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The BeginGetContext method begins an asynchronous (non-blocking) call to receive incoming client requests.","pos":[0,106]},{"content":"Before calling this method, you must call the &lt;xref:System.Net.HttpListener.Start%2A&gt; method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the &lt;xref:System.Net.HttpListenerPrefixCollection&gt; returned by the &lt;xref:System.Net.HttpListener.Prefixes%2A&gt; property.","pos":[107,424],"source":" Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property."},{"content":"The asynchronous operation must be completed by calling the &lt;xref:System.Net.HttpListener.EndGetContext%2A&gt; method.","pos":[431,546],"source":"       The asynchronous operation must be completed by calling the <xref:System.Net.HttpListener.EndGetContext%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`callback`</ph> delegate.","pos":[547,607],"source":" Typically, the method is invoked by the `callback` delegate."},{"content":"This method does not block while the operation completes.","pos":[614,671]},{"content":"To get an incoming request and block until the operation completes, call the &lt;xref:System.Net.HttpListener.GetContext%2A&gt; method.","pos":[672,801],"source":" To get an incoming request and block until the operation completes, call the <xref:System.Net.HttpListener.GetContext%2A> method."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>","pos":[808,968],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)"}]},{"pos":[18050,18162],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when a client request is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when a client request is available.","pos":[0,112],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when a client request is available."}]},{"pos":[18224,18371],"content":"A user-defined object that contains information about the operation. This object is passed to the `callback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`callback`</ph> delegate when the operation completes.","pos":[69,147],"source":" This object is passed to the `callback` delegate when the operation completes."}]},{"pos":[18435,18528],"content":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that indicates the status of the asynchronous operation.","pos":[0,93],"source":"An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."}]},{"pos":[18706,18858],"content":"A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.","pos":[0,152],"nodes":[{"content":"A Win32 function call failed.","pos":[0,29]},{"content":"Check the exception's &lt;xref:System.Net.HttpListenerException.ErrorCode*&gt; property to determine the cause of the exception.","pos":[30,152],"source":" Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception."}]}]},{"pos":[18969,19026],"content":"This object has not been started or is currently stopped.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has not been started or is currently stopped.","pos":[0,57]}]},{"pos":[19133,19155],"content":"This object is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object is closed.","pos":[0,22]}]},{"pos":[19454,19514],"content":"Shuts down the <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Shuts down the <xref href=\"System.Net.HttpListener\"></xref>."},{"pos":[19527,19890],"content":"After calling this method, you can no longer use the <xref:System.Net.HttpListener> object. To temporarily pause an <xref:System.Net.HttpListener> object, use the <xref:System.Net.HttpListener.Stop%2A> method.       This method shut downs the <xref:System.Net.HttpListener> object without processing queued requests. Any pending requests are unable to complete.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"After calling this method, you can no longer use the <xref:System.Net.HttpListener> object. To temporarily pause an <xref:System.Net.HttpListener> object, use the <xref:System.Net.HttpListener.Stop%2A> method.       This method shut downs the <xref:System.Net.HttpListener> object without processing queued requests. Any pending requests are unable to complete.","pos":[0,361],"nodes":[{"content":"After calling this method, you can no longer use the &lt;xref:System.Net.HttpListener&gt; object.","pos":[0,91],"source":"After calling this method, you can no longer use the <xref:System.Net.HttpListener> object."},{"content":"To temporarily pause an &lt;xref:System.Net.HttpListener&gt; object, use the &lt;xref:System.Net.HttpListener.Stop%2A&gt; method.","pos":[92,209],"source":" To temporarily pause an <xref:System.Net.HttpListener> object, use the <xref:System.Net.HttpListener.Stop%2A> method."},{"content":"This method shut downs the &lt;xref:System.Net.HttpListener&gt; object without processing queued requests.","pos":[216,316],"source":"       This method shut downs the <xref:System.Net.HttpListener> object without processing queued requests."},{"content":"Any pending requests are unable to complete.","pos":[317,361]}]}]},{"pos":[20558,20648],"content":"Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.","pos":[0,90]}]},{"pos":[23369,23493],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a list of SPNs.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\"></xref> that contains a list of SPNs."},{"pos":[23984,24059],"content":"Completes an asynchronous operation to retrieve an incoming client request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Completes an asynchronous operation to retrieve an incoming client request.","pos":[0,75]}]},{"pos":[24072,25060],"content":"The EndGetContext method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <xref:System.Net.HttpListenerContext> object that contains an incoming client request and its associated response. This method completes an operation previously started by calling the <xref:System.Net.HttpListener.BeginGetContext%2A> method. If the operation has not completed, this method blocks until it does.       Because calling the EndGetContext method requires the <xref:System.Net.HttpListener> object, this object is typically passed into a callback method by using the state object passed into the <xref:System.Net.HttpListener.BeginGetContext%2A> method. You can obtain this state object by using the <xref:System.IAsyncResult.AsyncState%2A> property of the `asyncResult` object.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The EndGetContext method is called, usually within an application-defined callback method invoked by a delegate, to obtain the &lt;xref:System.Net.HttpListenerContext&gt; object that contains an incoming client request and its associated response.","pos":[0,241],"source":"The EndGetContext method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <xref:System.Net.HttpListenerContext> object that contains an incoming client request and its associated response."},{"content":"This method completes an operation previously started by calling the &lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt; method.","pos":[242,368],"source":" This method completes an operation previously started by calling the <xref:System.Net.HttpListener.BeginGetContext%2A> method."},{"content":"If the operation has not completed, this method blocks until it does.","pos":[369,438]},{"content":"Because calling the EndGetContext method requires the &lt;xref:System.Net.HttpListener&gt; object, this object is typically passed into a callback method by using the state object passed into the &lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt; method.","pos":[445,692],"source":"       Because calling the EndGetContext method requires the <xref:System.Net.HttpListener> object, this object is typically passed into a callback method by using the state object passed into the <xref:System.Net.HttpListener.BeginGetContext%2A> method."},{"content":"You can obtain this state object by using the &lt;xref:System.IAsyncResult.AsyncState%2A&gt; property of the <ph id=\"ph1\">`asyncResult`</ph> object.","pos":[693,817],"source":" You can obtain this state object by using the <xref:System.IAsyncResult.AsyncState%2A> property of the `asyncResult` object."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>","pos":[824,984],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)"}]},{"pos":[25481,25580],"content":"An <xref:System.IAsyncResult> object that was obtained when the asynchronous operation was started.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that was obtained when the asynchronous operation was started.","pos":[0,99],"source":"An <xref:System.IAsyncResult> object that was obtained when the asynchronous operation was started."}]},{"pos":[25655,25752],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListenerContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the client request.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Net.HttpListenerContext\"></xref> object that represents the client request."},{"pos":[25912,26024],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not obtained by calling the <ph id=\"ph2\">&lt;xref:System.Net.HttpListener.BeginGetContext*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not obtained by calling the <xref:System.Net.HttpListener.BeginGetContext*> method."},{"pos":[26127,26216],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[26327,26421],"content":"The EndGetContext method was already called for the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The EndGetContext method was already called for the specified <code>asyncResult</code> object."},{"pos":[26528,26550],"content":"This object is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object is closed.","pos":[0,22]}]},{"pos":[26940,27096],"content":"Get or set the <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use for extended protection for a session.","needQuote":true,"needEscape":true,"source":"Get or set the <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> to use for extended protection for a session."},{"pos":[27109,27821],"content":"The ExtendedProtectionPolicy property is used with integrated Windows authentication to provide extended protection. The ExtendedProtectionPolicy property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session. The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy for each individual request.       The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`. The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ExtendedProtectionPolicy property is used with integrated Windows authentication to provide extended protection.","pos":[0,116]},{"content":"The ExtendedProtectionPolicy property allows the configuration of the extended protection policy for the whole &lt;xref:System.Net.HttpListener&gt; session.","pos":[117,267],"source":" The ExtendedProtectionPolicy property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session."},{"content":"The &lt;xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A&gt; property allows the configuration of the extended protection policy for each individual request.","pos":[268,437],"source":" The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy for each individual request."},{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A&gt; property must be <ph id=\"ph1\">`null`</ph>.","pos":[444,578],"source":"       The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`."},{"content":"The &lt;xref:System.Net.HttpListener&gt; instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.","pos":[579,710],"source":" The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one."}]},{"pos":[28085,28240],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the policy to use for extended protection.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that specifies the policy to use for extended protection."},{"pos":[28411,28667],"content":"An attempt was made to set the ExtendedProtectionPolicy property, but the &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*&gt; property was not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt was made to set the ExtendedProtectionPolicy property, but the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> property was not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[28770,28899],"content":"An attempt was made to set the ExtendedProtectionPolicy property to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt was made to set the ExtendedProtectionPolicy property to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[29010,29149],"content":"An attempt was made to set the ExtendedProtectionPolicy property after the <xref:System.Net.HttpListener.Start*> method was already called.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to set the ExtendedProtectionPolicy property after the &lt;xref:System.Net.HttpListener.Start*&gt; method was already called.","pos":[0,139],"source":"An attempt was made to set the ExtendedProtectionPolicy property after the <xref:System.Net.HttpListener.Start*> method was already called."}]},{"pos":[29256,29278],"content":"This object is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object is closed.","pos":[0,22]}]},{"pos":[29397,29667],"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement*&gt; property was set to <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on a platform that does not support extended protection.","needQuote":true,"needEscape":true,"source":"The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement*> property was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection."},{"pos":[30107,30275],"content":"Get or set the delegate called to determine the <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use for each request.","needQuote":true,"needEscape":true,"source":"Get or set the delegate called to determine the <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> to use for each request."},{"pos":[30288,31543],"content":"The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection. The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session. The ExtendedProtectionSelectorDelegate property allows the configuration of the extended protection policy per individual request.       The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`. The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.       For each request, the delegate can choose the settings that the <xref:System.Net.HttpListener> instance will use to provide extended protection.       If a delegate returns `null` for this property, this represents a <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> which the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> property set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A&gt; property is used with integrated Windows authentication to provide extended protection.","pos":[0,150],"source":"The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection."},{"content":"The &lt;xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A&gt; property allows the configuration of the extended protection policy for the whole &lt;xref:System.Net.HttpListener&gt; session.","pos":[151,335],"source":" The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session."},{"content":"The ExtendedProtectionSelectorDelegate property allows the configuration of the extended protection policy per individual request.","pos":[336,466]},{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A&gt; property must be <ph id=\"ph1\">`null`</ph>.","pos":[473,607],"source":"       The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`."},{"content":"The &lt;xref:System.Net.HttpListener&gt; instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.","pos":[608,739],"source":" The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one."},{"content":"For each request, the delegate can choose the settings that the &lt;xref:System.Net.HttpListener&gt; instance will use to provide extended protection.","pos":[746,890],"source":"       For each request, the delegate can choose the settings that the <xref:System.Net.HttpListener> instance will use to provide extended protection."},{"content":"If a delegate returns <ph id=\"ph1\">`null`</ph> for this property, this represents a &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&gt; which the &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt; property set to &lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement&gt;.","pos":[897,1249],"source":"       If a delegate returns `null` for this property, this represents a <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> which the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> property set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>."}]},{"pos":[31769,31924],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the policy to use for extended protection.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that specifies the policy to use for extended protection."},{"pos":[32105,32371],"content":"An attempt was made to set the ExtendedProtectionSelectorDelegate property, but the &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*&gt; property must be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt was made to set the ExtendedProtectionSelectorDelegate property, but the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> property must be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32474,32613],"content":"An attempt was made to set the ExtendedProtectionSelectorDelegate property to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt was made to set the ExtendedProtectionSelectorDelegate property to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32724,32873],"content":"An attempt was made to set the ExtendedProtectionSelectorDelegate property after the <xref:System.Net.HttpListener.Start*> method was already called.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to set the ExtendedProtectionSelectorDelegate property after the &lt;xref:System.Net.HttpListener.Start*&gt; method was already called.","pos":[0,149],"source":"An attempt was made to set the ExtendedProtectionSelectorDelegate property after the <xref:System.Net.HttpListener.Start*> method was already called."}]},{"pos":[32980,33002],"content":"This object is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object is closed.","pos":[0,22]}]},{"pos":[33121,33252],"content":"An attempt was made to set the ExtendedProtectionSelectorDelegate property on a platform that does not support extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to set the ExtendedProtectionSelectorDelegate property on a platform that does not support extended protection.","pos":[0,131]}]},{"pos":[33576,33639],"content":"Waits for an incoming request and returns when one is received.","needQuote":true,"needEscape":true,"nodes":[{"content":"Waits for an incoming request and returns when one is received.","pos":[0,63]}]},{"pos":[33652,34290],"content":"Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.       This method blocks while waiting for an incoming request. If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <xref:System.Net.HttpListener.BeginGetContext%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.       This method blocks while waiting for an incoming request. If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <xref:System.Net.HttpListener.BeginGetContext%2A> method.","pos":[0,636],"nodes":[{"content":"Before calling this method, you must call the &lt;xref:System.Net.HttpListener.Start%2A&gt; method and add at least one URI prefix to listen for by adding the URI strings to the &lt;xref:System.Net.HttpListenerPrefixCollection&gt; returned by the &lt;xref:System.Net.HttpListener.Prefixes%2A&gt; property.","pos":[0,287],"source":"Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property."},{"content":"For a detailed description of prefixes, see the &lt;xref:System.Net.HttpListener&gt; class overview.","pos":[288,382],"source":" For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview."},{"content":"This method blocks while waiting for an incoming request.","pos":[389,446]},{"content":"If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the &lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt; method.","pos":[447,636],"source":" If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <xref:System.Net.HttpListener.BeginGetContext%2A> method."}]}]},{"pos":[34639,34734],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListenerContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents a client request.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Net.HttpListenerContext\"></xref> object that represents a client request."},{"pos":[34907,35059],"content":"A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.","pos":[0,152],"nodes":[{"content":"A Win32 function call failed.","pos":[0,29]},{"content":"Check the exception's &lt;xref:System.Net.HttpListenerException.ErrorCode*&gt; property to determine the cause of the exception.","pos":[30,152],"source":" Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception."}]}]},{"pos":[35171,35389],"content":"This object has not been started or is currently stopped.       -or-       The <xref href=\"System.Net.HttpListener\"></xref> does not have any Uniform Resource Identifier (URI) prefixes to respond to. See Remarks.","needQuote":false,"needEscape":true,"nodes":[{"content":"This object has not been started or is currently stopped.","pos":[0,57]},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> does not have any Uniform Resource Identifier (URI) prefixes to respond to.","pos":[64,199],"source":"       -or-       The <xref href=\"System.Net.HttpListener\"></xref> does not have any Uniform Resource Identifier (URI) prefixes to respond to."},{"content":"See Remarks.","pos":[200,212]}]},{"pos":[35497,35519],"content":"This object is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object is closed.","pos":[0,22]}]},{"pos":[35868,35927],"content":"Waits for an incoming request as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Waits for an incoming request as an asynchronous operation.","pos":[0,59]}]},{"pos":[35940,36479],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete when the incoming request has been received.       Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete when the incoming request has been received.       Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.","pos":[0,537],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete when the incoming request has been received.","pos":[31,148],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete when the incoming request has been received."},{"content":"Before calling this method, you must call the &lt;xref:System.Net.HttpListener.Start%2A&gt; method and add at least one URI prefix to listen for by adding the URI strings to the &lt;xref:System.Net.HttpListenerPrefixCollection&gt; returned by the &lt;xref:System.Net.HttpListener.Prefixes%2A&gt; property.","pos":[155,442],"source":"       Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property."},{"content":"For a detailed description of prefixes, see the &lt;xref:System.Net.HttpListener&gt; class overview.","pos":[443,537],"source":" For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview."}]}]},{"pos":[36714,37025],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=\"System.Net.HttpListenerContext\"></xref> object that represents a client request.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]},{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601.Result%2A<ph id=\"ph2\">&amp;gt;</ph> property on the task object returns an <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListenerContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents a client request.","pos":[117,307],"source":" The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=\"System.Net.HttpListenerContext\"></xref> object that represents a client request."}]},{"pos":[37471,37671],"content":"Gets or sets a &lt;xref:System.Boolean&gt; value that specifies whether your application receives exceptions that occur when an <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> sends the response to the client.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref:System.Boolean> value that specifies whether your application receives exceptions that occur when an <xref href=\"System.Net.HttpListener\"></xref> sends the response to the client."},{"pos":[37683,37800],"content":"Set this property to <ph id=\"ph1\">`true`</ph> if your application does not require that a response is successfully sent to each client.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Set this property to `true` if your application does not require that a response is successfully sent to each client."},{"pos":[38111,38464],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref href=\"System.Net.HttpListener\"></xref> should not return exceptions that occur when sending the response to the client; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this <bpt id=\"p2\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> should not return exceptions that occur when sending the response to the client; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,268],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref href=\"System.Net.HttpListener\"></xref> should not return exceptions that occur when sending the response to the client; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[269,353],"source":" The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[38644,38672],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[38997,39095],"content":"Gets a value that indicates whether <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has been started.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether <xref href=\"System.Net.HttpListener\"></xref> has been started."},{"pos":[39107,39207],"content":"To start an <xref:System.Net.HttpListener>, call the <xref:System.Net.HttpListener.Start%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To start an &lt;xref:System.Net.HttpListener&gt;, call the &lt;xref:System.Net.HttpListener.Start%2A&gt; method.","pos":[0,100],"source":"To start an <xref:System.Net.HttpListener>, call the <xref:System.Net.HttpListener.Start%2A> method."}]},{"pos":[39548,39748],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> was started; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.HttpListener\"></xref> was started; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[40139,40266],"content":"Gets a value that indicates whether <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can be used with the current operating system.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether <xref href=\"System.Net.HttpListener\"></xref> can be used with the current operating system."},{"pos":[40278,40388],"content":"This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.","pos":[0,110]}]},{"pos":[40809,41006],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is supported; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref href=\"System.Net.HttpListener\"></xref> is supported; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41382,41502],"content":"Gets the Uniform Resource Identifier (URI) prefixes handled by this <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the Uniform Resource Identifier (URI) prefixes handled by this <xref href=\"System.Net.HttpListener\"></xref> object."},{"pos":[41514,41644],"content":"The prefixes are in canonical form. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The prefixes are in canonical form. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.","pos":[0,130],"nodes":[{"content":"The prefixes are in canonical form.","pos":[0,35]},{"content":"For a detailed description of prefixes, see the &lt;xref:System.Net.HttpListener&gt; class overview.","pos":[36,130],"source":" For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview."}]}]},{"pos":[42056,42237],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListenerPrefixCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the URI prefixes that this <bpt id=\"p2\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object is configured to handle.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Net.HttpListenerPrefixCollection\"></xref> that contains the URI prefixes that this <xref href=\"System.Net.HttpListener\"></xref> object is configured to handle."},{"pos":[42404,42432],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[42727,42847],"content":"Gets or sets the realm, or resource partition, associated with this <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the realm, or resource partition, associated with this <xref href=\"System.Net.HttpListener\"></xref> object."},{"pos":[42860,43345],"content":"Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database. Realms are used only for basic and digest authentication. After a client successfully authenticates, the authentication is valid for all resources in a given realm. For a detailed description of realms, see RFC 2617 at [http://www.ietf.org](http://www.ietf.org).       An instance of <xref:System.Net.HttpListener> has only one associated realm.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database.","pos":[0,137]},{"content":"Realms are used only for basic and digest authentication.","pos":[138,195]},{"content":"After a client successfully authenticates, the authentication is valid for all resources in a given realm.","pos":[196,302]},{"content":"For a detailed description of realms, see RFC 2617 at <bpt id=\"p1\">[</bpt>http://www.ietf.org<ept id=\"p1\">](http://www.ietf.org)</ept>.","pos":[303,400],"source":" For a detailed description of realms, see RFC 2617 at [http://www.ietf.org](http://www.ietf.org)."},{"content":"An instance of &lt;xref:System.Net.HttpListener&gt; has only one associated realm.","pos":[407,483],"source":"       An instance of <xref:System.Net.HttpListener> has only one associated realm."}]},{"pos":[43647,43784],"content":"A &lt;xref:System.String&gt; value that contains the name of the realm associated with the <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> value that contains the name of the realm associated with the <xref href=\"System.Net.HttpListener\"></xref> object."},{"pos":[43948,43976],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[44275,44325],"content":"Allows this instance to receive incoming requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows this instance to receive incoming requests.","pos":[0,50]}]},{"pos":[44338,45174],"content":"This method must be called before you call the <xref:System.Net.HttpListener.GetContext%2A> or <xref:System.Net.HttpListener.BeginGetContext%2A> method.       After you have started an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Stop%2A> method to stop it.      > [!NOTE] >  If this listener instance uses https, you must install and select a Server Certificate. Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection. You can configure Server Certificates and other listener options by using HttpCfg.exe. See [http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method must be called before you call the &lt;xref:System.Net.HttpListener.GetContext%2A&gt; or &lt;xref:System.Net.HttpListener.BeginGetContext%2A&gt; method.","pos":[0,152],"source":"This method must be called before you call the <xref:System.Net.HttpListener.GetContext%2A> or <xref:System.Net.HttpListener.BeginGetContext%2A> method."},{"content":"After you have started an &lt;xref:System.Net.HttpListener&gt; object, you can use the &lt;xref:System.Net.HttpListener.Stop%2A&gt; method to stop it.","pos":[159,297],"source":"       After you have started an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Stop%2A> method to stop it."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If this listener instance uses https, you must install and select a Server Certificate.","pos":[303,403],"source":"      > [!NOTE] >  If this listener instance uses https, you must install and select a Server Certificate."},{"content":"Otherwise, an &lt;xref:System.Net.HttpWebRequest&gt; query of this &lt;xref:System.Net.HttpListener&gt; will fail with an unexpected close of the connection.","pos":[404,549],"source":" Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection."},{"content":"You can configure Server Certificates and other listener options by using HttpCfg.exe.","pos":[550,636]},{"content":"See <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp<ept id=\"p1\">](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp)</ept> for more details.","pos":[637,831],"source":" See [http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details."}]},{"pos":[45627,45779],"content":"A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.","pos":[0,152],"nodes":[{"content":"A Win32 function call failed.","pos":[0,29]},{"content":"Check the exception's &lt;xref:System.Net.HttpListenerException.ErrorCode*&gt; property to determine the cause of the exception.","pos":[30,152],"source":" Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception."}]}]},{"pos":[45886,45908],"content":"This object is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object is closed.","pos":[0,22]}]},{"pos":[46202,46259],"content":"Causes this instance to stop receiving incoming requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes this instance to stop receiving incoming requests.","pos":[0,57]}]},{"pos":[46272,46494],"content":"If this instance is already stopped, calling this method has no effect.       After you have stopped an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Start%2A> method to restart it.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If this instance is already stopped, calling this method has no effect.       After you have stopped an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Start%2A> method to restart it.","pos":[0,220],"nodes":[{"content":"If this instance is already stopped, calling this method has no effect.","pos":[0,71]},{"content":"After you have stopped an &lt;xref:System.Net.HttpListener&gt; object, you can use the &lt;xref:System.Net.HttpListener.Start%2A&gt; method to restart it.","pos":[78,220],"source":"       After you have stopped an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Start%2A> method to restart it."}]}]},{"pos":[46938,46966],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[47384,47472],"content":"Releases the resources held by this <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Releases the resources held by this <xref href=\"System.Net.HttpListener\"></xref> object."},{"pos":[47484,47590],"content":"Applications should use the <xref:System.Net.HttpListener.Close%2A> method instead of calling this method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Applications should use the &lt;xref:System.Net.HttpListener.Close%2A&gt; method instead of calling this method.","pos":[0,106],"source":"Applications should use the <xref:System.Net.HttpListener.Close%2A> method instead of calling this method."}]},{"pos":[48082,48165],"content":"The timeout manager for this <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The timeout manager for this <xref href=\"System.Net.HttpListener\"></xref> instance."},{"pos":[48177,48284],"content":"The timeout manager defines the connection timeout limits for this <xref:System.Net.HttpListener> instance.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The timeout manager defines the connection timeout limits for this &lt;xref:System.Net.HttpListener&gt; instance.","pos":[0,107],"source":"The timeout manager defines the connection timeout limits for this <xref:System.Net.HttpListener> instance."}]},{"pos":[48459,48622],"content":"Returns <xref href=\"System.Net.HttpListenerTimeoutManager\"></xref>.       The timeout manager for this <xref href=\"System.Net.HttpListener\"></xref> instance.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListenerTimeoutManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,67],"source":"Returns <xref href=\"System.Net.HttpListenerTimeoutManager\"></xref>."},{"content":"The timeout manager for this <bpt id=\"p1\">&lt;xref href=\"System.Net.HttpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[74,157],"source":"       The timeout manager for this <xref href=\"System.Net.HttpListener\"></xref> instance."}]},{"pos":[49132,49328],"content":"Gets or sets a <xref:System.Boolean> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a &lt;xref:System.Boolean&gt; value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.","pos":[0,196],"source":"Gets or sets a <xref:System.Boolean> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate."}]},{"pos":[49341,50210],"content":"When this property is set to `true` and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<xref:System.Security.Principal.IIdentity>) of the initial request.       This property has no effect when NTLM is not the authentication protocol. When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.      > [!NOTE] >  While setting this property to `true` increases performance because the <xref:System.Net.HttpListener> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information. You must determine whether the increase in performance is worth this risk.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When this property is set to <ph id=\"ph1\">`true`</ph> and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (&lt;xref:System.Security.Principal.IIdentity&gt;) of the initial request.","pos":[0,288],"source":"When this property is set to `true` and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<xref:System.Security.Principal.IIdentity>) of the initial request."},{"content":"This property has no effect when NTLM is not the authentication protocol.","pos":[295,368]},{"content":"When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.","pos":[369,517]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  While setting this property to <ph id=\"ph2\">`true`</ph> increases performance because the &lt;xref:System.Net.HttpListener&gt; does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information.","pos":[523,789],"source":"      > [!NOTE] >  While setting this property to `true` increases performance because the <xref:System.Net.HttpListener> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information."},{"content":"You must determine whether the increase in performance is worth this risk.","pos":[790,864]}]},{"pos":[50535,50887],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Security.Principal.IIdentity> of the first request will be used for subsequent requests on the same connection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Security.Principal.IIdentity&gt; of the first request will be used for subsequent requests on the same connection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,267],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Security.Principal.IIdentity> of the first request will be used for subsequent requests on the same connection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[268,352],"source":" The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[51080,51108],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.HttpListener\n  id: HttpListener\n  children:\n  - System.Net.HttpListener.#ctor\n  - System.Net.HttpListener.Abort\n  - System.Net.HttpListener.AuthenticationSchemes\n  - System.Net.HttpListener.AuthenticationSchemeSelectorDelegate\n  - System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)\n  - System.Net.HttpListener.Close\n  - System.Net.HttpListener.DefaultServiceNames\n  - System.Net.HttpListener.EndGetContext(System.IAsyncResult)\n  - System.Net.HttpListener.ExtendedProtectionPolicy\n  - System.Net.HttpListener.ExtendedProtectionSelectorDelegate\n  - System.Net.HttpListener.GetContext\n  - System.Net.HttpListener.GetContextAsync\n  - System.Net.HttpListener.IgnoreWriteExceptions\n  - System.Net.HttpListener.IsListening\n  - System.Net.HttpListener.IsSupported\n  - System.Net.HttpListener.Prefixes\n  - System.Net.HttpListener.Realm\n  - System.Net.HttpListener.Start\n  - System.Net.HttpListener.Stop\n  - System.Net.HttpListener.System#IDisposable#Dispose\n  - System.Net.HttpListener.TimeoutManager\n  - System.Net.HttpListener.UnsafeConnectionNtlmAuthentication\n  langs:\n  - csharp\n  name: HttpListener\n  nameWithType: HttpListener\n  fullName: System.Net.HttpListener\n  type: Class\n  summary: Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.\n  remarks: \"Using the HttpListener class, you can create a simple HTTP protocol listener that responds to HTTP requests. The listener is active for the lifetime of the HttpListener object and runs within your application with its permissions.  \\n  \\n> [!NOTE]\\n>  This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems. If you attempt to create an HttpListener object on a computer that is running an earlier operating system, the constructor throws a <xref:System.PlatformNotSupportedException> exception.  \\n  \\n To use HttpListener, create a new instance of the class using the HttpListener constructor and use the <xref:System.Net.HttpListener.Prefixes%2A> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier (URI) prefixes the HttpListener should process.  \\n  \\n A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path. An example of a complete prefix string is \\\"`http://www.contoso.com:8080/customerData``/`\\\". Prefixes must end in a forward slash (\\\"/\\\"). The HttpListener object with the prefix that most closely matches a requested URI responds to the request. Multiple HttpListener objects cannot add the same prefix; a <xref:System.ComponentModel.Win32Exception> exception is thrown if a HttpListener adds a prefix that is already in use.  \\n  \\n When a port is specified, the host element can be replaced with \\\"*\\\" to indicate that the HttpListener accepts requests sent to the port if the requested URI does not match any other prefix. For example, to receive all requests sent to port 8080 when the requested URI is not handled by any HttpListener, the prefix is \\\"`http://*:8080``/`\\\". Similarly, to specify that the HttpListener accepts all requests sent to a port, replace the host element with the \\\"+\\\" character, \\\"`https://+:8080`\\\". The \\\"\\\\*\\\" and \\\"+\\\" characters can be present in prefixes that include paths.  \\n  \\n Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an HttpListener object. To specify a wildcard subdomain, use the \\\"*\\\" character as part of the hostname in a URI prefix: for example, `http://*.foo.com/`, and pass this as the argument to the HttpListenerPrefixCollection.Add method. This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <xref:System.Net.HttpListenerException>  \\n  \\n To begin listening for requests from clients, add the URI prefixes to the collection and call the <xref:System.Net.HttpListener.Start%2A> method. HttpListener offers both synchronous and asynchronous models for processing client requests. Requests and their associated responses are accessed using the <xref:System.Net.HttpListenerContext> object returned by the <xref:System.Net.HttpListener.GetContext%2A> method or its asynchronous counterparts, the <xref:System.Net.HttpListener.BeginGetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods.  \\n  \\n The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time. Using the synchronous model, call the <xref:System.Net.HttpListener.GetContext%2A> method, which waits for a client to send a request. The method returns an <xref:System.Net.HttpListenerContext> object to you for processing when one occurs.  \\n  \\n In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread. Use the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify an application-defined method to be called for each incoming request. Within that method, call the <xref:System.Net.HttpListener.EndGetContext%2A> method to obtain the request, process it, and respond.  \\n  \\n In either model, incoming requests are accessed using the <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> property and are represented by <xref:System.Net.HttpListenerRequest> objects. Similarly, responses are accessed using the <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=fullName> property and are represented by <xref:System.Net.HttpListenerResponse> objects. These objects share some functionality with the <xref:System.Net.HttpWebRequest> and <xref:System.Net.HttpWebResponse> objects, but the latter objects cannot be used in conjunction with HttpListener because they implement client, not server, behaviors.  \\n  \\n An HttpListener can require client authentication. You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use. You must require some form of authentication to obtain information about the client's identity. For additional information, see the <xref:System.Net.HttpListenerContext.User%2A>, <xref:System.Net.HttpListener.AuthenticationSchemes%2A>, and <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> properties.  \\n  \\n> [!NOTE]\\n>  If you create an HttpListener using https, you must select a Server Certificate for that listener. Otherwise, an <xref:System.Net.HttpWebRequest> query of this HttpListener will fail with an unexpected close of the connection.  \\n  \\n> [!NOTE]\\n>  You can configure Server Certificates and other listener options by using HttpCfg.exe. See [http://msdn.microsoft.com/library/default.asp?url=/library/en-us/http/http/httpcfg_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details. The executable is shipped with Windows Server 2003, or can be built from source code available in the Platform SDK.  \\n  \\n> [!NOTE]\\n>  If you specify multiple authentication schemes for the HttpListener, the listener will challenge clients in the following order: `Negotiate`, `NTLM`, `Digest`, and then `Basic`.\"\n  example:\n  - \"The following code example demonstrates using a HttpListener.  \\n  \\n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistener_1.cs)]\"\n  syntax:\n    content: 'public sealed class HttpListener : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.#ctor\n  id: '#ctor'\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: HttpListener()\n  nameWithType: HttpListener.HttpListener()\n  fullName: System.Net.HttpListener.HttpListener()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.HttpListener\"></xref> class.\n  remarks: Before using the instance returned by this constructor, you must invoke its <xref:System.Net.HttpListener.Start%2A> method.\n  example:\n  - \"The following code example demonstrates using the <xref:System.Net.HttpListener> constructor to create a new <xref:System.Net.HttpListener> object. For the complete example, see the <xref:System.Net.HttpListener> class topic.  \\n  \\n [!code-cs[Net_listener_Basic#9](~/add/codesnippet/csharp/m-system.net.httplistene_20_1.cs)]\"\n  syntax:\n    content: public HttpListener ();\n    parameters: []\n  overload: System.Net.HttpListener.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: This class cannot be used on the current operating system. Windows Server 2003 or Windows XP SP2 is required to use instances of this class.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.Abort\n  id: Abort\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: HttpListener.Abort()\n  fullName: System.Net.HttpListener.Abort()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Shuts down the <xref href=\"System.Net.HttpListener\"></xref> object immediately, discarding all currently queued requests.\n  remarks: \"This method disposes of all resources held by this listener. Any pending requests are unable to complete.  \\n  \\n After calling this method, you will receive an <xref:System.ObjectDisposedException> if you attempt to use this <xref:System.Net.HttpListener>.\"\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cs[Net_Listener_Basic#11](~/add/codesnippet/csharp/m-system.net.httplistene_4_1.cs)]\"\n  syntax:\n    content: public void Abort ();\n    parameters: []\n  overload: System.Net.HttpListener.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.AuthenticationSchemes\n  id: AuthenticationSchemes\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: AuthenticationSchemes\n  nameWithType: HttpListener.AuthenticationSchemes\n  fullName: System.Net.HttpListener.AuthenticationSchemes\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets or sets the scheme used to authenticate clients.\n  remarks: \"The <xref:System.Net.HttpListener> uses the specified scheme to authenticate all incoming requests. The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming client request only if the <xref:System.Net.HttpListener> successfully authenticates the request.  \\n  \\n You can interrogate the identity of a successfully authenticated client by using the <xref:System.Net.HttpListenerContext.User%2A?displayProperty=fullName> property.  \\n  \\n If you want an <xref:System.Net.HttpListener> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostName%2A> property), you must implement a method that chooses the authentication scheme. For instructions about how to do this, see the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property documentation.  \\n  \\n> [!NOTE]\\n>  To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag>.\"\n  example:\n  - \"The following code example demonstrates using the AuthenticationSchemes property to specify an authentication scheme.  \\n  \\n [!code-cs[Net_listener_Basic#14](~/add/codesnippet/csharp/p-system.net.httplistene_0_1.cs)]\"\n  syntax:\n    content: public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }\n    return:\n      type: System.Net.AuthenticationSchemes\n      description: A bitwise combination of <xref:System.Net.AuthenticationSchemes> enumeration values that indicates how clients are to be authenticated. The default value is <xref:System.Net.AuthenticationSchemes>.\n  overload: System.Net.HttpListener.AuthenticationSchemes*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate\n  id: AuthenticationSchemeSelectorDelegate\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: AuthenticationSchemeSelectorDelegate\n  nameWithType: HttpListener.AuthenticationSchemeSelectorDelegate\n  fullName: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets or sets the delegate called to determine the protocol used to authenticate clients.\n  remarks: \"> [!NOTE]\\n>  If you want the same authentication protocol to be used for all requests handled by a particular instance of <xref:System.Net.HttpListener>, you do not need to set this property. To specify a protocol to be used for all client requests, use the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property.  \\n  \\n If the client has not specified authentication information in its headers, the <xref:System.Net.HttpListener> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client. The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming request only if the <xref:System.Net.HttpListener> successfully authenticated the request. If a request cannot be authenticated, the <xref:System.Net.HttpListener> automatically sends back a 401 response. You can get the identity of a successfully authenticated client using the <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=fullName> property.  \\n  \\n The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <xref:System.Net.HttpListener> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> property).  \\n  \\n> [!NOTE]\\n>  To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag>.\"\n  example:\n  - \"The following code example sets the value of this property.  \\n  \\n [!code-vb[NclListener#2](~/add/codesnippet/visualbasic/p-system.net.httplistene_2_1.vb)]\\n [!code-cs[NclListener#2](~/add/codesnippet/csharp/p-system.net.httplistene_2_1.cs)]  \\n  \\n The following code example provides an implementation of a method invoked by an <xref:System.Net.AuthenticationSchemeSelector> delegate.  \\n  \\n [!code-vb[NclListener#1](~/add/codesnippet/visualbasic/p-system.net.httplistene_2_2.vb)]\\n [!code-cs[NclListener#1](~/add/codesnippet/csharp/p-system.net.httplistene_2_2.cs)]\"\n  syntax:\n    content: public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }\n    return:\n      type: System.Net.AuthenticationSchemeSelector\n      description: An <xref href=\"System.Net.AuthenticationSchemeSelector\"></xref> delegate that invokes the method used to select an authentication protocol. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)\n  id: BeginGetContext(System.AsyncCallback,System.Object)\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: BeginGetContext(AsyncCallback,Object)\n  nameWithType: HttpListener.BeginGetContext(AsyncCallback,Object)\n  fullName: System.Net.HttpListener.BeginGetContext(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Begins asynchronously retrieving an incoming request.\n  remarks: \"The BeginGetContext method begins an asynchronous (non-blocking) call to receive incoming client requests. Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.  \\n  \\n The asynchronous operation must be completed by calling the <xref:System.Net.HttpListener.EndGetContext%2A> method. Typically, the method is invoked by the `callback` delegate.  \\n  \\n This method does not block while the operation completes. To get an incoming request and block until the operation completes, call the <xref:System.Net.HttpListener.GetContext%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)\"\n  example:\n  - \"The following code example demonstrates using the BeginGetContext method to specify a callback method that will handle incoming client requests.  \\n  \\n [!code-cs[Net_Listener_Basic#12](~/add/codesnippet/csharp/m-system.net.httplistene_13_1.cs)]  \\n  \\n The following code example implements a callback method.  \\n  \\n [!code-cs[Net_Listener_Basic#13](~/add/codesnippet/csharp/m-system.net.httplistene_13_2.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginGetContext (AsyncCallback callback, object state);\n    parameters:\n    - id: callback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when a client request is available.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `callback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation.\n  overload: System.Net.HttpListener.BeginGetContext*\n  exceptions:\n  - type: System.Net.HttpListenerException\n    commentId: T:System.Net.HttpListenerException\n    description: A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This object has not been started or is currently stopped.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object is closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.Close\n  id: Close\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: HttpListener.Close()\n  fullName: System.Net.HttpListener.Close()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Shuts down the <xref href=\"System.Net.HttpListener\"></xref>.\n  remarks: \"After calling this method, you can no longer use the <xref:System.Net.HttpListener> object. To temporarily pause an <xref:System.Net.HttpListener> object, use the <xref:System.Net.HttpListener.Stop%2A> method.  \\n  \\n This method shut downs the <xref:System.Net.HttpListener> object without processing queued requests. Any pending requests are unable to complete.\"\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/m-system.net.httplistene_10_1.cs)]\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Net.HttpListener.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.DefaultServiceNames\n  id: DefaultServiceNames\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: DefaultServiceNames\n  nameWithType: HttpListener.DefaultServiceNames\n  fullName: System.Net.HttpListener.DefaultServiceNames\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.\n  remarks: \"The DefaultServiceNames property is used with integrated Windows authentication to provide extended protection. The list of SPNs is initialized from the <xref:System.Net.HttpListener.Prefixes%2A> property when accessed and cleared when new prefixes are added to the <xref:System.Net.HttpListener.Prefixes%2A> property.  \\n  \\n The DefaultServiceNames property is used if an application doesn't set the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> property on its extended protection policy.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> that is retrieved with the DefaultServiceNames property is built from the <xref:System.Net.HttpListener.Prefixes%2A> property according to the following rules:  \\n  \\n1.  If the hostname is \\\"+\\\", \\\"*\\\", or an IPv4 or IPv6 literal (equivalent to \\\"\\\\*\\\" but restricted to a specific local interface), the following SPN is added:  \\n  \\n `\\\"HTTP/\\\"` plus the fully qualified domain name of the computer.  \\n  \\n1.  If the hostname contains no dots (no domains or subdomains), an attempt is made to resolve the fully-qualified domain name using DNS (the same behavior used by <xref:System.Net.HttpWebRequest>). If the fully-qualified domain name can be resolved, the following SPNs are added:  \\n  \\n `\\\"HTTP/\\\"` plus the hostname (the short name).  \\n  \\n `\\\"HTTP/\\\"` plus the fully qualified domain name for the hostname.  \\n  \\n1.  If the hostname contains not dots (no domains or subdomains) and a fully-qualified domain name can't be resolved, the following SPN is added:  \\n  \\n `\\\"HTTP/\\\"` plus the hostname.  \\n  \\n1.  If the hostname contains dots (domains or subdomains), the following SPN is added:  \\n  \\n `\\\"HTTP/\\\"` plus the hostname.  \\n  \\n The DefaultServiceNames property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied. If other SPNs are needed, an application can add them using one of the <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> methods.  \\n  \\n It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed. Rather, applications should rely on the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> or <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> properties to make such policy decisions.\"\n  syntax:\n    content: public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }\n    return:\n      type: System.Security.Authentication.ExtendedProtection.ServiceNameCollection\n      description: A <xref href=\"System.Security.Authentication.ExtendedProtection.ServiceNameCollection\"></xref> that contains a list of SPNs.\n  overload: System.Net.HttpListener.DefaultServiceNames*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.EndGetContext(System.IAsyncResult)\n  id: EndGetContext(System.IAsyncResult)\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: EndGetContext(IAsyncResult)\n  nameWithType: HttpListener.EndGetContext(IAsyncResult)\n  fullName: System.Net.HttpListener.EndGetContext(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Completes an asynchronous operation to retrieve an incoming client request.\n  remarks: \"The EndGetContext method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <xref:System.Net.HttpListenerContext> object that contains an incoming client request and its associated response. This method completes an operation previously started by calling the <xref:System.Net.HttpListener.BeginGetContext%2A> method. If the operation has not completed, this method blocks until it does.  \\n  \\n Because calling the EndGetContext method requires the <xref:System.Net.HttpListener> object, this object is typically passed into a callback method by using the state object passed into the <xref:System.Net.HttpListener.BeginGetContext%2A> method. You can obtain this state object by using the <xref:System.IAsyncResult.AsyncState%2A> property of the `asyncResult` object.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)\"\n  example:\n  - \"The following code example shows the implementation of a callback method that calls the EndGetContext method.  \\n  \\n [!code-cs[Net_Listener_Basic#13](~/add/codesnippet/csharp/m-system.net.httplistene_1_1.cs)]\"\n  syntax:\n    content: public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that was obtained when the asynchronous operation was started.\n    return:\n      type: System.Net.HttpListenerContext\n      description: An <xref href=\"System.Net.HttpListenerContext\"></xref> object that represents the client request.\n  overload: System.Net.HttpListener.EndGetContext*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not obtained by calling the <xref:System.Net.HttpListener.BeginGetContext*> method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The EndGetContext method was already called for the specified <code>asyncResult</code> object.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object is closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.ExtendedProtectionPolicy\n  id: ExtendedProtectionPolicy\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: ExtendedProtectionPolicy\n  nameWithType: HttpListener.ExtendedProtectionPolicy\n  fullName: System.Net.HttpListener.ExtendedProtectionPolicy\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Get or set the <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> to use for extended protection for a session.\n  remarks: \"The ExtendedProtectionPolicy property is used with integrated Windows authentication to provide extended protection. The ExtendedProtectionPolicy property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session. The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy for each individual request.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`. The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.\"\n  syntax:\n    content: public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }\n    return:\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: A <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that specifies the policy to use for extended protection.\n  overload: System.Net.HttpListener.ExtendedProtectionPolicy*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt was made to set the ExtendedProtectionPolicy property, but the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> property was not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: An attempt was made to set the ExtendedProtectionPolicy property to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An attempt was made to set the ExtendedProtectionPolicy property after the <xref:System.Net.HttpListener.Start*> method was already called.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object is closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement*> property was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.ExtendedProtectionSelectorDelegate\n  id: ExtendedProtectionSelectorDelegate\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: ExtendedProtectionSelectorDelegate\n  nameWithType: HttpListener.ExtendedProtectionSelectorDelegate\n  fullName: System.Net.HttpListener.ExtendedProtectionSelectorDelegate\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Get or set the delegate called to determine the <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> to use for each request.\n  remarks: \"The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection. The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session. The ExtendedProtectionSelectorDelegate property allows the configuration of the extended protection policy per individual request.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`. The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.  \\n  \\n For each request, the delegate can choose the settings that the <xref:System.Net.HttpListener> instance will use to provide extended protection.  \\n  \\n If a delegate returns `null` for this property, this represents a <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> which the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> property set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.\"\n  syntax:\n    content: public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }\n    return:\n      type: System.Net.HttpListener.ExtendedProtectionSelector\n      description: A <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that specifies the policy to use for extended protection.\n  overload: System.Net.HttpListener.ExtendedProtectionSelectorDelegate*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt was made to set the ExtendedProtectionSelectorDelegate property, but the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> property must be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: An attempt was made to set the ExtendedProtectionSelectorDelegate property to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An attempt was made to set the ExtendedProtectionSelectorDelegate property after the <xref:System.Net.HttpListener.Start*> method was already called.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object is closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: An attempt was made to set the ExtendedProtectionSelectorDelegate property on a platform that does not support extended protection.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.GetContext\n  id: GetContext\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: GetContext()\n  nameWithType: HttpListener.GetContext()\n  fullName: System.Net.HttpListener.GetContext()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Waits for an incoming request and returns when one is received.\n  remarks: \"Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.  \\n  \\n This method blocks while waiting for an incoming request. If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <xref:System.Net.HttpListener.BeginGetContext%2A> method.\"\n  example:\n  - \"The following code example demonstrates calling this method.  \\n  \\n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/m-system.net.httplistene_19_1.cs)]\"\n  syntax:\n    content: public System.Net.HttpListenerContext GetContext ();\n    parameters: []\n    return:\n      type: System.Net.HttpListenerContext\n      description: An <xref href=\"System.Net.HttpListenerContext\"></xref> object that represents a client request.\n  overload: System.Net.HttpListener.GetContext*\n  exceptions:\n  - type: System.Net.HttpListenerException\n    commentId: T:System.Net.HttpListenerException\n    description: A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"This object has not been started or is currently stopped.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Net.HttpListener\\\"></xref> does not have any Uniform Resource Identifier (URI) prefixes to respond to. See Remarks.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object is closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.GetContextAsync\n  id: GetContextAsync\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: GetContextAsync()\n  nameWithType: HttpListener.GetContextAsync()\n  fullName: System.Net.HttpListener.GetContextAsync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Waits for an incoming request as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete when the incoming request has been received.  \\n  \\n Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.HttpListenerContext> GetContextAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.Net.HttpListenerContext}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=\\\"System.Net.HttpListenerContext\\\"></xref> object that represents a client request.\"\n  overload: System.Net.HttpListener.GetContextAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.IgnoreWriteExceptions\n  id: IgnoreWriteExceptions\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: IgnoreWriteExceptions\n  nameWithType: HttpListener.IgnoreWriteExceptions\n  fullName: System.Net.HttpListener.IgnoreWriteExceptions\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets or sets a <xref:System.Boolean> value that specifies whether your application receives exceptions that occur when an <xref href=\"System.Net.HttpListener\"></xref> sends the response to the client.\n  remarks: Set this property to `true` if your application does not require that a response is successfully sent to each client.\n  example:\n  - \"The following code example demonstrates setting this property.  \\n  \\n [!code-cs[Net_Listener_Basic#14](~/add/codesnippet/csharp/p-system.net.httplistene_31_1.cs)]\"\n  syntax:\n    content: public bool IgnoreWriteExceptions { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this <xref href=\"System.Net.HttpListener\"></xref> should not return exceptions that occur when sending the response to the client; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListener.IgnoreWriteExceptions*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.IsListening\n  id: IsListening\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: IsListening\n  nameWithType: HttpListener.IsListening\n  fullName: System.Net.HttpListener.IsListening\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a value that indicates whether <xref href=\"System.Net.HttpListener\"></xref> has been started.\n  remarks: To start an <xref:System.Net.HttpListener>, call the <xref:System.Net.HttpListener.Start%2A> method.\n  example:\n  - \"The following code example demonstrates using this property to determine the listening state of an instance.  \\n  \\n [!code-cs[Net_Listener_Basic#1](~/add/codesnippet/csharp/p-system.net.httplistene_41_1.cs)]\"\n  syntax:\n    content: public bool IsListening { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.HttpListener\"></xref> was started; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListener.IsListening*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.IsSupported\n  id: IsSupported\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: IsSupported\n  nameWithType: HttpListener.IsSupported\n  fullName: System.Net.HttpListener.IsSupported\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets a value that indicates whether <xref href=\"System.Net.HttpListener\"></xref> can be used with the current operating system.\n  remarks: This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.\n  example:\n  - \"The following code example demonstrates the use of the IsSupported property to detect whether an <xref:System.Net.HttpListener> object can be used with the current operating system.  \\n  \\n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/p-system.net.httplistene_21_1.cs)]\"\n  syntax:\n    content: public static bool IsSupported { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref href=\"System.Net.HttpListener\"></xref> is supported; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListener.IsSupported*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.Prefixes\n  id: Prefixes\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: Prefixes\n  nameWithType: HttpListener.Prefixes\n  fullName: System.Net.HttpListener.Prefixes\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the Uniform Resource Identifier (URI) prefixes handled by this <xref href=\"System.Net.HttpListener\"></xref> object.\n  remarks: The prefixes are in canonical form. For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.\n  example:\n  - \"The following code example demonstrates using the Prefixes property to obtain and print the URI prefixes that are handled.  \\n  \\n [!code-cs[Net_Listener_Basic#1](~/add/codesnippet/csharp/p-system.net.httplistene_24_1.cs)]\"\n  syntax:\n    content: public System.Net.HttpListenerPrefixCollection Prefixes { get; }\n    return:\n      type: System.Net.HttpListenerPrefixCollection\n      description: An <xref href=\"System.Net.HttpListenerPrefixCollection\"></xref> that contains the URI prefixes that this <xref href=\"System.Net.HttpListener\"></xref> object is configured to handle.\n  overload: System.Net.HttpListener.Prefixes*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.Realm\n  id: Realm\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: Realm\n  nameWithType: HttpListener.Realm\n  fullName: System.Net.HttpListener.Realm\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets or sets the realm, or resource partition, associated with this <xref href=\"System.Net.HttpListener\"></xref> object.\n  remarks: \"Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database. Realms are used only for basic and digest authentication. After a client successfully authenticates, the authentication is valid for all resources in a given realm. For a detailed description of realms, see RFC 2617 at [http://www.ietf.org](http://www.ietf.org).  \\n  \\n An instance of <xref:System.Net.HttpListener> has only one associated realm.\"\n  example:\n  - \"The following code example demonstrates setting the Realm property.  \\n  \\n [!code-cs[Net_Listener_Basic#10](~/add/codesnippet/csharp/p-system.net.httplistene_26_1.cs)]\"\n  syntax:\n    content: public string Realm { get; set; }\n    return:\n      type: System.String\n      description: A <xref:System.String> value that contains the name of the realm associated with the <xref href=\"System.Net.HttpListener\"></xref> object.\n  overload: System.Net.HttpListener.Realm*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.Start\n  id: Start\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: HttpListener.Start()\n  fullName: System.Net.HttpListener.Start()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Allows this instance to receive incoming requests.\n  remarks: \"This method must be called before you call the <xref:System.Net.HttpListener.GetContext%2A> or <xref:System.Net.HttpListener.BeginGetContext%2A> method.  \\n  \\n After you have started an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Stop%2A> method to stop it.  \\n  \\n> [!NOTE]\\n>  If this listener instance uses https, you must install and select a Server Certificate. Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection. You can configure Server Certificates and other listener options by using HttpCfg.exe. See [http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details.\"\n  example:\n  - \"The following code example demonstrates using the Start method to begin processing incoming requests.  \\n  \\n [!code-cs[Net_Listener_Basic#12](~/add/codesnippet/csharp/m-system.net.httplistene_12_1.cs)]\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Net.HttpListener.Start*\n  exceptions:\n  - type: System.Net.HttpListenerException\n    commentId: T:System.Net.HttpListenerException\n    description: A Win32 function call failed. Check the exception's <xref:System.Net.HttpListenerException.ErrorCode*> property to determine the cause of the exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object is closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.Stop\n  id: Stop\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: HttpListener.Stop()\n  fullName: System.Net.HttpListener.Stop()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Causes this instance to stop receiving incoming requests.\n  remarks: \"If this instance is already stopped, calling this method has no effect.  \\n  \\n After you have stopped an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Start%2A> method to restart it.\"\n  example:\n  - \"The following code example demonstrates using the Stop method to stop processing incoming requests.  \\n  \\n [!code-cs[Net_Listener_Basic#12](~/add/codesnippet/csharp/m-system.net.httplistene_5_1.cs)]\"\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Net.HttpListener.Stop*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.HttpListener.System#IDisposable#Dispose\n  id: System#IDisposable#Dispose\n  isEii: true\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: System.IDisposable.Dispose()\n  nameWithType: HttpListener.System.IDisposable.Dispose()\n  fullName: System.Net.HttpListener.System.IDisposable.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Releases the resources held by this <xref href=\"System.Net.HttpListener\"></xref> object.\n  remarks: Applications should use the <xref:System.Net.HttpListener.Close%2A> method instead of calling this method.\n  syntax:\n    content: void IDisposable.Dispose ();\n    parameters: []\n  overload: System.Net.HttpListener.System#IDisposable#Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.TimeoutManager\n  id: TimeoutManager\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: TimeoutManager\n  nameWithType: HttpListener.TimeoutManager\n  fullName: System.Net.HttpListener.TimeoutManager\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: The timeout manager for this <xref href=\"System.Net.HttpListener\"></xref> instance.\n  remarks: The timeout manager defines the connection timeout limits for this <xref:System.Net.HttpListener> instance.\n  syntax:\n    content: public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }\n    return:\n      type: System.Net.HttpListenerTimeoutManager\n      description: \"Returns <xref href=\\\"System.Net.HttpListenerTimeoutManager\\\"></xref>.  \\n  \\n The timeout manager for this <xref href=\\\"System.Net.HttpListener\\\"></xref> instance.\"\n  overload: System.Net.HttpListener.TimeoutManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication\n  id: UnsafeConnectionNtlmAuthentication\n  parent: System.Net.HttpListener\n  langs:\n  - csharp\n  name: UnsafeConnectionNtlmAuthentication\n  nameWithType: HttpListener.UnsafeConnectionNtlmAuthentication\n  fullName: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets or sets a <xref:System.Boolean> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.\n  remarks: \"When this property is set to `true` and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<xref:System.Security.Principal.IIdentity>) of the initial request.  \\n  \\n This property has no effect when NTLM is not the authentication protocol. When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.  \\n  \\n> [!NOTE]\\n>  While setting this property to `true` increases performance because the <xref:System.Net.HttpListener> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information. You must determine whether the increase in performance is worth this risk.\"\n  example:\n  - \"The following code example demonstrates setting this property.  \\n  \\n [!code-cs[Net_Listener_Basic#14](~/add/codesnippet/csharp/p-system.net.httplistene_34_1.cs)]\"\n  syntax:\n    content: public bool UnsafeConnectionNtlmAuthentication { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Security.Principal.IIdentity> of the first request will be used for subsequent requests on the same connection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.Net.HttpListenerException\n  parent: System.Net\n  isExternal: false\n  name: HttpListenerException\n  nameWithType: HttpListenerException\n  fullName: System.Net.HttpListenerException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Net.HttpListener.#ctor\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: HttpListener()\n  nameWithType: HttpListener.HttpListener()\n  fullName: System.Net.HttpListener.HttpListener()\n- uid: System.Net.HttpListener.Abort\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Abort()\n  nameWithType: HttpListener.Abort()\n  fullName: System.Net.HttpListener.Abort()\n- uid: System.Net.HttpListener.AuthenticationSchemes\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: AuthenticationSchemes\n  nameWithType: HttpListener.AuthenticationSchemes\n  fullName: System.Net.HttpListener.AuthenticationSchemes\n- uid: System.Net.AuthenticationSchemes\n  parent: System.Net\n  isExternal: true\n  name: AuthenticationSchemes\n  nameWithType: AuthenticationSchemes\n  fullName: System.Net.AuthenticationSchemes\n- uid: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: AuthenticationSchemeSelectorDelegate\n  nameWithType: HttpListener.AuthenticationSchemeSelectorDelegate\n  fullName: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate\n- uid: System.Net.AuthenticationSchemeSelector\n  parent: System.Net\n  isExternal: false\n  name: AuthenticationSchemeSelector\n  nameWithType: AuthenticationSchemeSelector\n  fullName: System.Net.AuthenticationSchemeSelector\n- uid: System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: BeginGetContext(AsyncCallback,Object)\n  nameWithType: HttpListener.BeginGetContext(AsyncCallback,Object)\n  fullName: System.Net.HttpListener.BeginGetContext(AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Net.HttpListener.Close\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Close()\n  nameWithType: HttpListener.Close()\n  fullName: System.Net.HttpListener.Close()\n- uid: System.Net.HttpListener.DefaultServiceNames\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: DefaultServiceNames\n  nameWithType: HttpListener.DefaultServiceNames\n  fullName: System.Net.HttpListener.DefaultServiceNames\n- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection\n  parent: System.Security.Authentication.ExtendedProtection\n  isExternal: false\n  name: ServiceNameCollection\n  nameWithType: ServiceNameCollection\n  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection\n- uid: System.Net.HttpListener.EndGetContext(System.IAsyncResult)\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: EndGetContext(IAsyncResult)\n  nameWithType: HttpListener.EndGetContext(IAsyncResult)\n  fullName: System.Net.HttpListener.EndGetContext(IAsyncResult)\n- uid: System.Net.HttpListenerContext\n  parent: System.Net\n  isExternal: false\n  name: HttpListenerContext\n  nameWithType: HttpListenerContext\n  fullName: System.Net.HttpListenerContext\n- uid: System.Net.HttpListener.ExtendedProtectionPolicy\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: ExtendedProtectionPolicy\n  nameWithType: HttpListener.ExtendedProtectionPolicy\n  fullName: System.Net.HttpListener.ExtendedProtectionPolicy\n- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n  parent: System.Security.Authentication.ExtendedProtection\n  isExternal: false\n  name: ExtendedProtectionPolicy\n  nameWithType: ExtendedProtectionPolicy\n  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n- uid: System.Net.HttpListener.ExtendedProtectionSelectorDelegate\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: ExtendedProtectionSelectorDelegate\n  nameWithType: HttpListener.ExtendedProtectionSelectorDelegate\n  fullName: System.Net.HttpListener.ExtendedProtectionSelectorDelegate\n- uid: System.Net.HttpListener.ExtendedProtectionSelector\n  parent: System.Net\n  isExternal: false\n  name: HttpListener+ExtendedProtectionSelector\n  nameWithType: HttpListener+ExtendedProtectionSelector\n  fullName: System.Net.HttpListener+ExtendedProtectionSelector\n- uid: System.Net.HttpListener.GetContext\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: GetContext()\n  nameWithType: HttpListener.GetContext()\n  fullName: System.Net.HttpListener.GetContext()\n- uid: System.Net.HttpListener.GetContextAsync\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: GetContextAsync()\n  nameWithType: HttpListener.GetContextAsync()\n  fullName: System.Net.HttpListener.GetContextAsync()\n- uid: System.Threading.Tasks.Task{System.Net.HttpListenerContext}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<HttpListenerContext>\n  nameWithType: Task<HttpListenerContext>\n  fullName: System.Threading.Tasks.Task<System.Net.HttpListenerContext>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.HttpListenerContext>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.HttpListenerContext\n    name: HttpListenerContext\n    nameWithType: HttpListenerContext\n    fullName: HttpListenerContext\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.HttpListener.IgnoreWriteExceptions\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: IgnoreWriteExceptions\n  nameWithType: HttpListener.IgnoreWriteExceptions\n  fullName: System.Net.HttpListener.IgnoreWriteExceptions\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.HttpListener.IsListening\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: IsListening\n  nameWithType: HttpListener.IsListening\n  fullName: System.Net.HttpListener.IsListening\n- uid: System.Net.HttpListener.IsSupported\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: IsSupported\n  nameWithType: HttpListener.IsSupported\n  fullName: System.Net.HttpListener.IsSupported\n- uid: System.Net.HttpListener.Prefixes\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Prefixes\n  nameWithType: HttpListener.Prefixes\n  fullName: System.Net.HttpListener.Prefixes\n- uid: System.Net.HttpListenerPrefixCollection\n  parent: System.Net\n  isExternal: false\n  name: HttpListenerPrefixCollection\n  nameWithType: HttpListenerPrefixCollection\n  fullName: System.Net.HttpListenerPrefixCollection\n- uid: System.Net.HttpListener.Realm\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Realm\n  nameWithType: HttpListener.Realm\n  fullName: System.Net.HttpListener.Realm\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.HttpListener.Start\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Start()\n  nameWithType: HttpListener.Start()\n  fullName: System.Net.HttpListener.Start()\n- uid: System.Net.HttpListener.Stop\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Stop()\n  nameWithType: HttpListener.Stop()\n  fullName: System.Net.HttpListener.Stop()\n- uid: System.Net.HttpListener.System#IDisposable#Dispose\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: System.IDisposable.Dispose()\n  nameWithType: HttpListener.System.IDisposable.Dispose()\n  fullName: System.Net.HttpListener.System.IDisposable.Dispose()\n- uid: System.Net.HttpListener.TimeoutManager\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: TimeoutManager\n  nameWithType: HttpListener.TimeoutManager\n  fullName: System.Net.HttpListener.TimeoutManager\n- uid: System.Net.HttpListenerTimeoutManager\n  parent: System.Net\n  isExternal: false\n  name: HttpListenerTimeoutManager\n  nameWithType: HttpListenerTimeoutManager\n  fullName: System.Net.HttpListenerTimeoutManager\n- uid: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: UnsafeConnectionNtlmAuthentication\n  nameWithType: HttpListener.UnsafeConnectionNtlmAuthentication\n  fullName: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication\n- uid: System.Net.HttpListener.#ctor*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: HttpListener\n  nameWithType: HttpListener.HttpListener\n- uid: System.Net.HttpListener.Abort*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Abort\n  nameWithType: HttpListener.Abort\n- uid: System.Net.HttpListener.AuthenticationSchemes*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: AuthenticationSchemes\n  nameWithType: HttpListener.AuthenticationSchemes\n- uid: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: AuthenticationSchemeSelectorDelegate\n  nameWithType: HttpListener.AuthenticationSchemeSelectorDelegate\n- uid: System.Net.HttpListener.BeginGetContext*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: BeginGetContext\n  nameWithType: HttpListener.BeginGetContext\n- uid: System.Net.HttpListener.Close*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Close\n  nameWithType: HttpListener.Close\n- uid: System.Net.HttpListener.DefaultServiceNames*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: DefaultServiceNames\n  nameWithType: HttpListener.DefaultServiceNames\n- uid: System.Net.HttpListener.EndGetContext*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: EndGetContext\n  nameWithType: HttpListener.EndGetContext\n- uid: System.Net.HttpListener.ExtendedProtectionPolicy*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: ExtendedProtectionPolicy\n  nameWithType: HttpListener.ExtendedProtectionPolicy\n- uid: System.Net.HttpListener.ExtendedProtectionSelectorDelegate*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: ExtendedProtectionSelectorDelegate\n  nameWithType: HttpListener.ExtendedProtectionSelectorDelegate\n- uid: System.Net.HttpListener.GetContext*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: GetContext\n  nameWithType: HttpListener.GetContext\n- uid: System.Net.HttpListener.GetContextAsync*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: GetContextAsync\n  nameWithType: HttpListener.GetContextAsync\n- uid: System.Net.HttpListener.IgnoreWriteExceptions*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: IgnoreWriteExceptions\n  nameWithType: HttpListener.IgnoreWriteExceptions\n- uid: System.Net.HttpListener.IsListening*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: IsListening\n  nameWithType: HttpListener.IsListening\n- uid: System.Net.HttpListener.IsSupported*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: IsSupported\n  nameWithType: HttpListener.IsSupported\n- uid: System.Net.HttpListener.Prefixes*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Prefixes\n  nameWithType: HttpListener.Prefixes\n- uid: System.Net.HttpListener.Realm*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Realm\n  nameWithType: HttpListener.Realm\n- uid: System.Net.HttpListener.Start*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Start\n  nameWithType: HttpListener.Start\n- uid: System.Net.HttpListener.Stop*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: Stop\n  nameWithType: HttpListener.Stop\n- uid: System.Net.HttpListener.System#IDisposable#Dispose*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: System.IDisposable.Dispose\n  nameWithType: HttpListener.System.IDisposable.Dispose\n- uid: System.Net.HttpListener.TimeoutManager*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: TimeoutManager\n  nameWithType: HttpListener.TimeoutManager\n- uid: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication*\n  parent: System.Net.HttpListener\n  isExternal: false\n  name: UnsafeConnectionNtlmAuthentication\n  nameWithType: HttpListener.UnsafeConnectionNtlmAuthentication\n"}