{"nodes":[{"pos":[1801,1915],"content":"Represents assembly binding information that can be added to an instance of <bpt id=\"p1\">&lt;xref href=\"System.AppDomain\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Represents assembly binding information that can be added to an instance of <xref href=\"System.AppDomain\"></xref>."},{"pos":[1928,2542],"content":"Changing the properties of an AppDomainSetup instance does not affect any existing <xref:System.AppDomain>. It can affect only the creation of a new <xref:System.AppDomain>, when the <xref:System.AppDomain.CreateDomain%2A> method is called with the AppDomainSetup instance as a parameter.       This class implements the <xref:System.IAppDomainSetup> interface.      > [!CAUTION] >  The default value for the <xref:System.AppDomainSetup.DisallowCodeDownload%2A> property is false. This setting is unsafe for services. To help prevent services from downloading partially trusted code, set this property to true","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Changing the properties of an AppDomainSetup instance does not affect any existing &lt;xref:System.AppDomain&gt;.","pos":[0,107],"source":"Changing the properties of an AppDomainSetup instance does not affect any existing <xref:System.AppDomain>."},{"content":"It can affect only the creation of a new &lt;xref:System.AppDomain&gt;, when the &lt;xref:System.AppDomain.CreateDomain%2A&gt; method is called with the AppDomainSetup instance as a parameter.","pos":[108,288],"source":" It can affect only the creation of a new <xref:System.AppDomain>, when the <xref:System.AppDomain.CreateDomain%2A> method is called with the AppDomainSetup instance as a parameter."},{"content":"This class implements the &lt;xref:System.IAppDomainSetup&gt; interface.","pos":[295,361],"source":"       This class implements the <xref:System.IAppDomainSetup> interface."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  The default value for the &lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt; property is false.","pos":[367,480],"source":"      > [!CAUTION] >  The default value for the <xref:System.AppDomainSetup.DisallowCodeDownload%2A> property is false."},{"content":"This setting is unsafe for services.","pos":[481,517]},{"content":"To help prevent services from downloading partially trusted code, set this property to true","pos":[518,609]}]},{"pos":[3220,3303],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.AppDomainSetup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.AppDomainSetup\"></xref> class."},{"pos":[3859,4042],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.AppDomainSetup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified activation context to use for manifest-based activation of an application domain.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.AppDomainSetup\"></xref> class with the specified activation context to use for manifest-based activation of an application domain."},{"pos":[4054,4433],"content":"The <xref:System.ActivationContext> object specified for `activationContext` is used to generate an <xref:System.Runtime.Hosting.ActivationArguments> object containing information required to activate a new application domain. This <xref:System.Runtime.Hosting.ActivationArguments> object can be accessed by using the <xref:System.AppDomainSetup.ActivationArguments%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.ActivationContext&gt; object specified for <ph id=\"ph1\">`activationContext`</ph> is used to generate an &lt;xref:System.Runtime.Hosting.ActivationArguments&gt; object containing information required to activate a new application domain.","pos":[0,226],"source":"The <xref:System.ActivationContext> object specified for `activationContext` is used to generate an <xref:System.Runtime.Hosting.ActivationArguments> object containing information required to activate a new application domain."},{"content":"This &lt;xref:System.Runtime.Hosting.ActivationArguments&gt; object can be accessed by using the &lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt; property.","pos":[227,379],"source":" This <xref:System.Runtime.Hosting.ActivationArguments> object can be accessed by using the <xref:System.AppDomainSetup.ActivationArguments%2A> property."}]},{"pos":[4618,4678],"content":"The activation context to be used for an application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activation context to be used for an application domain.","pos":[0,60]}]},{"pos":[4836,4931],"content":"<ph id=\"ph1\">&lt;code&gt;activationContext&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>activationContext</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5403,5590],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.AppDomainSetup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified activation arguments required for manifest-based activation of an application domain.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.AppDomainSetup\"></xref> class with the specified activation arguments required for manifest-based activation of an application domain."},{"pos":[5602,5739],"content":"The object specified for <ph id=\"ph1\">`activationArguments`</ph> can be accessed by using the &lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt; property.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The object specified for `activationArguments` can be accessed by using the <xref:System.AppDomainSetup.ActivationArguments%2A> property."},{"pos":[5971,6079],"content":"An object that specifies information required for the manifest-based activation of a new application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that specifies information required for the manifest-based activation of a new application domain.","pos":[0,108]}]},{"pos":[6237,6334],"content":"<ph id=\"ph1\">&lt;code&gt;activationArguments&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>activationArguments</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6693,6757],"content":"Gets or sets data about the activation of an application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets data about the activation of an application domain.","pos":[0,64]}]},{"pos":[6770,6960],"content":"No exception is thrown if this property is set to `null`.       The information provided by the <xref:System.Runtime.Hosting.ActivationArguments> object supports manifest-based activation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"No exception is thrown if this property is set to <ph id=\"ph1\">`null`</ph>.","pos":[0,57],"source":"No exception is thrown if this property is set to `null`."},{"content":"The information provided by the &lt;xref:System.Runtime.Hosting.ActivationArguments&gt; object supports manifest-based activation.","pos":[64,188],"source":"       The information provided by the <xref:System.Runtime.Hosting.ActivationArguments> object supports manifest-based activation."}]},{"pos":[7155,7230],"content":"An object that contains data about the activation of an application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains data about the activation of an application domain.","pos":[0,75]}]},{"pos":[7410,7872],"content":"The property is set to an <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Hosting.ActivationArguments\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object whose application identity does not match the application identity of the <bpt id=\"p2\">&lt;xref href=\"System.Security.Policy.ApplicationTrust\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object returned by the &lt;xref:System.AppDomainSetup.ApplicationTrust<bpt id=\"p3\">*</bpt>&gt; property. No exception is thrown if the &lt;xref:System.AppDomainSetup.ApplicationTrust<ept id=\"p3\">*</ept>&gt; property is <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The property is set to an <xref href=\"System.Runtime.Hosting.ActivationArguments\"></xref> object whose application identity does not match the application identity of the <xref href=\"System.Security.Policy.ApplicationTrust\"></xref> object returned by the <xref:System.AppDomainSetup.ApplicationTrust*> property. No exception is thrown if the <xref:System.AppDomainSetup.ApplicationTrust*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8236,8406],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.AppDomainInitializer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate, which represents a callback method that is invoked when the application domain is initialized.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.AppDomainInitializer\"></xref> delegate, which represents a callback method that is invoked when the application domain is initialized."},{"pos":[8419,8760],"content":"To pass information to the callback method, assign an array of strings to the <xref:System.AppDomainSetup.AppDomainInitializerArguments%2A> property. The array is passed to the callback method each time an <xref:System.AppDomain> is initialized.       The callback method is executed in the context of the newly created application domain.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To pass information to the callback method, assign an array of strings to the <xref:System.AppDomainSetup.AppDomainInitializerArguments%2A> property. The array is passed to the callback method each time an <xref:System.AppDomain> is initialized.       The callback method is executed in the context of the newly created application domain.","pos":[0,339],"nodes":[{"content":"To pass information to the callback method, assign an array of strings to the &lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt; property.","pos":[0,149],"source":"To pass information to the callback method, assign an array of strings to the <xref:System.AppDomainSetup.AppDomainInitializerArguments%2A> property."},{"content":"The array is passed to the callback method each time an &lt;xref:System.AppDomain&gt; is initialized.","pos":[150,245],"source":" The array is passed to the callback method each time an <xref:System.AppDomain> is initialized."},{"content":"The callback method is executed in the context of the newly created application domain.","pos":[252,339]}]}]},{"pos":[9791,9895],"content":"A delegate that represents a callback method that is invoked when the application domain is initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"A delegate that represents a callback method that is invoked when the application domain is initialized.","pos":[0,104]}]},{"pos":[10377,10586],"content":"Gets or sets the arguments passed to the callback method represented by the <xref href=\"System.AppDomainInitializer\"></xref> delegate. The callback method is invoked when the application domain is initialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the arguments passed to the callback method represented by the <bpt id=\"p1\">&lt;xref href=\"System.AppDomainInitializer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate.","pos":[0,134],"source":"Gets or sets the arguments passed to the callback method represented by the <xref href=\"System.AppDomainInitializer\"></xref> delegate."},{"content":"The callback method is invoked when the application domain is initialized.","pos":[135,209]}]},{"pos":[10599,10986],"content":"Use the <xref:System.AppDomainSetup.AppDomainInitializer%2A> property to specify a callback method that is invoked during <xref:System.AppDomain> initialization. If the <xref:System.AppDomainSetup.AppDomainInitializer%2A> property is not set, the array assigned to this property is not used.       The callback method is executed in the context of the newly created application domain.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the <xref:System.AppDomainSetup.AppDomainInitializer%2A> property to specify a callback method that is invoked during <xref:System.AppDomain> initialization. If the <xref:System.AppDomainSetup.AppDomainInitializer%2A> property is not set, the array assigned to this property is not used.       The callback method is executed in the context of the newly created application domain.","pos":[0,385],"nodes":[{"content":"Use the &lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt; property to specify a callback method that is invoked during &lt;xref:System.AppDomain&gt; initialization.","pos":[0,161],"source":"Use the <xref:System.AppDomainSetup.AppDomainInitializer%2A> property to specify a callback method that is invoked during <xref:System.AppDomain> initialization."},{"content":"If the &lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt; property is not set, the array assigned to this property is not used.","pos":[162,291],"source":" If the <xref:System.AppDomainSetup.AppDomainInitializer%2A> property is not set, the array assigned to this property is not used."},{"content":"The callback method is executed in the context of the newly created application domain.","pos":[298,385]}]}]},{"pos":[12007,12239],"content":"An array of strings that is passed to the callback method represented by the <bpt id=\"p1\">&lt;xref href=\"System.AppDomainInitializer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate, when the callback method is invoked during <bpt id=\"p2\">&lt;xref href=\"System.AppDomain\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> initialization.","needQuote":true,"needEscape":true,"source":"An array of strings that is passed to the callback method represented by the <xref href=\"System.AppDomainInitializer\"></xref> delegate, when the callback method is invoked during <xref href=\"System.AppDomain\"></xref> initialization."},{"pos":[12705,12901],"content":"Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <bpt id=\"p1\">&lt;xref href=\"System.AppDomainSetup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <xref href=\"System.AppDomainSetup\"></xref> object."},{"pos":[14697,14801],"content":"The display name of the assembly that provides the <xref:System.Type> of the application domain manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"The display name of the assembly that provides the &lt;xref:System.Type&gt; of the application domain manager.","pos":[0,104],"source":"The display name of the assembly that provides the <xref:System.Type> of the application domain manager."}]},{"pos":[15242,15419],"content":"Gets or sets the full name of the type that provides the application domain manager for application domains created using this <bpt id=\"p1\">&lt;xref href=\"System.AppDomainSetup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the full name of the type that provides the application domain manager for application domains created using this <xref href=\"System.AppDomainSetup\"></xref> object."},{"pos":[17080,17131],"content":"The full name of the type, including the namespace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The full name of the type, including the namespace.","pos":[0,51]}]},{"pos":[17543,17609],"content":"Gets or sets the name of the directory containing the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the directory containing the application.","pos":[0,66]}]},{"pos":[17622,18269],"content":"The application base directory is where the assembly manager begins probing for assemblies.       The ApplicationBase property can influence which permissions are granted to an application domain. For example, an application domain originating from the local computer normally receives full trust based on its location of origin. However, if the ApplicationBase property of that <xref:System.AppDomain> is set to the full name of an intranet directory, the ApplicationBase setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The application base directory is where the assembly manager begins probing for assemblies.       The ApplicationBase property can influence which permissions are granted to an application domain. For example, an application domain originating from the local computer normally receives full trust based on its location of origin. However, if the ApplicationBase property of that <xref:System.AppDomain> is set to the full name of an intranet directory, the ApplicationBase setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.","pos":[0,645],"nodes":[{"content":"The application base directory is where the assembly manager begins probing for assemblies.","pos":[0,91]},{"content":"The ApplicationBase property can influence which permissions are granted to an application domain.","pos":[98,196]},{"content":"For example, an application domain originating from the local computer normally receives full trust based on its location of origin.","pos":[197,329]},{"content":"However, if the ApplicationBase property of that &lt;xref:System.AppDomain&gt; is set to the full name of an intranet directory, the ApplicationBase setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.","pos":[330,645],"source":" However, if the ApplicationBase property of that <xref:System.AppDomain> is set to the full name of an intranet directory, the ApplicationBase setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer."}]}]},{"pos":[18961,19004],"content":"The name of the application base directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the application base directory.","pos":[0,43]}]},{"pos":[19411,19452],"content":"Gets or sets the name of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the application.","pos":[0,41]}]},{"pos":[20998,21026],"content":"The name of the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the application.","pos":[0,28]}]},{"pos":[21438,21503],"content":"Gets or sets an object containing security and trust information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an object containing security and trust information.","pos":[0,65]}]},{"pos":[21515,21642],"content":"This property is `null` when the <xref:System.AppDomainSetup> is created. Once changed, it cannot be reset to a null reference.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is <ph id=\"ph1\">`null`</ph> when the &lt;xref:System.AppDomainSetup&gt; is created.","pos":[0,73],"source":"This property is `null` when the <xref:System.AppDomainSetup> is created."},{"content":"Once changed, it cannot be reset to a null reference.","pos":[74,127]}]},{"pos":[21827,21882],"content":"An object that contains security and trust information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains security and trust information.","pos":[0,55]}]},{"pos":[22059,22527],"content":"The property is set to an <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.ApplicationTrust\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object whose application identity does not match the application identity of the <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Hosting.ActivationArguments\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object returned by the &lt;xref:System.AppDomainSetup.ActivationArguments<bpt id=\"p3\">*</bpt>&gt; property. No exception is thrown if the &lt;xref:System.AppDomainSetup.ActivationArguments<ept id=\"p3\">*</ept>&gt; property is <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The property is set to an <xref href=\"System.Security.Policy.ApplicationTrust\"></xref> object whose application identity does not match the application identity of the <xref href=\"System.Runtime.Hosting.ActivationArguments\"></xref> object returned by the <xref:System.AppDomainSetup.ActivationArguments*> property. No exception is thrown if the <xref:System.AppDomainSetup.ActivationArguments*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22630,22714],"content":"The property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[23023,23114],"content":"Gets or sets the name of an area specific to the application where files are shadow copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of an area specific to the application where files are shadow copied.","pos":[0,91]}]},{"pos":[23127,23548],"content":"In order for this property to have an effect, the <xref:System.AppDomainSetup.ApplicationName%2A> property must also be set. If the <xref:System.AppDomainSetup.ApplicationName%2A> property is not set, the CachePath property is ignored and the shadow copy cache location defaults to the download cache.       For more information on shadow copying, see [Shadow Copying Assemblies](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In order for this property to have an effect, the &lt;xref:System.AppDomainSetup.ApplicationName%2A&gt; property must also be set.","pos":[0,124],"source":"In order for this property to have an effect, the <xref:System.AppDomainSetup.ApplicationName%2A> property must also be set."},{"content":"If the &lt;xref:System.AppDomainSetup.ApplicationName%2A&gt; property is not set, the CachePath property is ignored and the shadow copy cache location defaults to the download cache.","pos":[125,301],"source":" If the <xref:System.AppDomainSetup.ApplicationName%2A> property is not set, the CachePath property is ignored and the shadow copy cache location defaults to the download cache."},{"content":"For more information on shadow copying, see <bpt id=\"p1\">[</bpt>Shadow Copying Assemblies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[308,419],"source":"       For more information on shadow copying, see [Shadow Copying Assemblies](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[23668,23759],"content":"The fully qualified name of the directory path and file name where files are shadow copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified name of the directory path and file name where files are shadow copied.","pos":[0,91]}]},{"pos":[24170,24244],"content":"Gets or sets the name of the configuration file for an application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the configuration file for an application domain.","pos":[0,74]}]},{"pos":[24257,24816],"content":"The configuration file describes the search rules and configuration data for the application domain. The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.       For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer. Only the host knows the specifics of the configuration data for a particular circumstance.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The configuration file describes the search rules and configuration data for the application domain. The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.       For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer. Only the host knows the specifics of the configuration data for a particular circumstance.","pos":[0,557],"nodes":[{"content":"The configuration file describes the search rules and configuration data for the application domain.","pos":[0,100]},{"content":"The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.","pos":[101,248]},{"content":"For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer.","pos":[255,466]},{"content":"Only the host knows the specifics of the configuration data for a particular circumstance.","pos":[467,557]}]}]},{"pos":[24944,24979],"content":"The name of the configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the configuration file.","pos":[0,35]}]},{"pos":[25463,25580],"content":"Specifies whether the application base path and private binary path are probed when searching for assemblies to load.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether the application base path and private binary path are probed when searching for assemblies to load.","pos":[0,117]}]},{"pos":[25593,26992],"content":"If the DisallowApplicationBaseProbing property is `true`, the value of the <xref:System.AppDomainSetup.ApplicationBase%2A> property is ignored. That is, no assemblies are probed for in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> property. In addition, the values of the <xref:System.AppDomainSetup.PrivateBinPath%2A> property and the <xref:System.AppDomainSetup.PrivateBinPathProbe%2A> property are ignored. No assemblies are probed for in the directories specified by the <xref:System.AppDomainSetup.PrivateBinPath%2A> property.       The DisallowApplicationBaseProbing property provides an additional layer of control over the loading process. In the normal assembly loading sequence, the application base is probed before the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event is raised. However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> properties. Such applications can use the DisallowApplicationBaseProbing property to avoid the delay caused by normal probing, and to avoid loading copies of the necessary assembly that might be located in the normal probing paths.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the DisallowApplicationBaseProbing property is <ph id=\"ph1\">`true`</ph>, the value of the &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt; property is ignored.","pos":[0,143],"source":"If the DisallowApplicationBaseProbing property is `true`, the value of the <xref:System.AppDomainSetup.ApplicationBase%2A> property is ignored."},{"content":"That is, no assemblies are probed for in the directories specified by the &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt; property.","pos":[144,275],"source":" That is, no assemblies are probed for in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> property."},{"content":"In addition, the values of the &lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt; property and the &lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A&gt; property are ignored.","pos":[276,444],"source":" In addition, the values of the <xref:System.AppDomainSetup.PrivateBinPath%2A> property and the <xref:System.AppDomainSetup.PrivateBinPathProbe%2A> property are ignored."},{"content":"No assemblies are probed for in the directories specified by the &lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt; property.","pos":[445,566],"source":" No assemblies are probed for in the directories specified by the <xref:System.AppDomainSetup.PrivateBinPath%2A> property."},{"content":"The DisallowApplicationBaseProbing property provides an additional layer of control over the loading process.","pos":[573,682]},{"content":"In the normal assembly loading sequence, the application base is probed before the &lt;xref:System.AppDomain.AssemblyResolve?displayProperty=fullName&gt; event is raised.","pos":[683,847],"source":" In the normal assembly loading sequence, the application base is probed before the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event is raised."},{"content":"However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt; and &lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt; properties.","pos":[848,1177],"source":" However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> properties."},{"content":"Such applications can use the DisallowApplicationBaseProbing property to avoid the delay caused by normal probing, and to avoid loading copies of the necessary assembly that might be located in the normal probing paths.","pos":[1178,1397]}]},{"pos":[27132,27373],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if probing is not allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if probing is not allowed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,162],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if probing is not allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[163,241],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[27840,27942],"content":"Gets or sets a value that indicates whether an application domain allows assembly binding redirection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether an application domain allows assembly binding redirection.","pos":[0,102]}]},{"pos":[27954,28126],"content":"The DisallowBindingRedirects property is designed to be used by services and server applications where assembly binding redirection is not part of the application scenario.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DisallowBindingRedirects property is designed to be used by services and server applications where assembly binding redirection is not part of the application scenario.","pos":[0,172]}]},{"pos":[28259,28445],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if redirection of assemblies is not allowed; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if it is allowed.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if redirection of assemblies is not allowed; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it is allowed."},{"pos":[28886,28995],"content":"Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.","pos":[0,109]}]},{"pos":[29008,29421],"content":"The DisallowCodeDownload property is designed to be used by services and server applications where downloading code from an intranet or the Internet is not part of the application scenario.      > [!CAUTION] >  The default value for the DisallowCodeDownload property is `false`. This setting is unsafe for services. To help prevent services from downloading partially trusted code, set this property to `true`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DisallowCodeDownload property is designed to be used by services and server applications where downloading code from an intranet or the Internet is not part of the application scenario.","pos":[0,189]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  The default value for the DisallowCodeDownload property is <ph id=\"ph2\">`false`</ph>.","pos":[195,278],"source":"      > [!CAUTION] >  The default value for the DisallowCodeDownload property is `false`."},{"content":"This setting is unsafe for services.","pos":[279,315]},{"content":"To help prevent services from downloading partially trusted code, set this property to <ph id=\"ph1\">`true`</ph>.","pos":[316,410],"source":" To help prevent services from downloading partially trusted code, set this property to `true`."}]},{"pos":[29551,29739],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if HTTP download of assemblies is not allowed; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if it is allowed.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if HTTP download of assemblies is not allowed; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it is allowed."},{"pos":[30191,30380],"content":"Gets or sets a value that indicates whether the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">&amp;lt;</ph>publisherPolicy<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](../Topic/%3CpublisherPolicy%3E%20Element.md)</ept> section of the configuration file is applied to an application domain.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether the [&lt;publisherPolicy&gt;](../Topic/%3CpublisherPolicy%3E%20Element.md) section of the configuration file is applied to an application domain."},{"pos":[30393,30931],"content":"The DisallowPublisherPolicy property specifically applies to a Web application that is loaded locally. Use this property to help prevent a malicious attempt to execute an unsafe Web application in safe mode.       For more information about bypassing publisher policy, see the [Redirecting Assembly Versions](~/add/includes/ajax-current-ext-md.md) topic. For more information about safe mode, see the \"Examining the Configuration Files\" section of the [How the Runtime Locates Assemblies](~/add/includes/ajax-current-ext-md.md) topic.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DisallowPublisherPolicy property specifically applies to a Web application that is loaded locally.","pos":[0,102]},{"content":"Use this property to help prevent a malicious attempt to execute an unsafe Web application in safe mode.","pos":[103,207]},{"content":"For more information about bypassing publisher policy, see the <bpt id=\"p1\">[</bpt>Redirecting Assembly Versions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> topic.","pos":[214,354],"source":"       For more information about bypassing publisher policy, see the [Redirecting Assembly Versions](~/add/includes/ajax-current-ext-md.md) topic."},{"content":"For more information about safe mode, see the \"Examining the Configuration Files\" section of the <bpt id=\"p1\">[</bpt>How the Runtime Locates Assemblies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> topic.","pos":[355,534],"source":" For more information about safe mode, see the \"Examining the Configuration Files\" section of the [How the Runtime Locates Assemblies](~/add/includes/ajax-current-ext-md.md) topic."}]},{"pos":[31064,31410],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_&amp;lt;publisherPolicy&amp;gt;\" name=\"&amp;lt;publisherPolicy&amp;gt;\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> section of the configuration file for an application domain is ignored; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if the declared publisher policy is honored.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref uid=\"langword_csharp_&lt;publisherPolicy&gt;\" name=\"&lt;publisherPolicy&gt;\" href=\"\"></xref> section of the configuration file for an application domain is ignored; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the declared publisher policy is honored."},{"pos":[31805,31900],"content":"Gets or sets the base directory where the directory for dynamically generated files is located.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the base directory where the directory for dynamically generated files is located.","pos":[0,95]}]},{"pos":[36254,36514],"content":"The directory where the &lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName&gt; is located.       <div class=\"alert NOTE\">    The return value of this property is different from the value assigned. See the Remarks section.      </div>","needQuote":false,"needEscape":true,"nodes":[{"content":"The directory where the <ph id=\"ph1\">&amp;lt;</ph>xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> is located.","pos":[0,110],"source":"The directory where the &lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName&gt; is located."},{"content":"The return value of this property is different from the value assigned. See the Remarks section.","pos":[145,241],"nodes":[{"content":"The return value of this property is different from the value assigned.","pos":[0,71]},{"content":"See the Remarks section.","pos":[72,96]}]}]},{"pos":[36679,36826],"content":"This property cannot be set because the application name on the application domain is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property cannot be set because the application name on the application domain is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[37199,37376],"content":"Returns the XML configuration information set by the <xref:System.AppDomainSetup.SetConfigurationBytes*> method, which overrides the application's XML configuration information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the XML configuration information set by the &lt;xref:System.AppDomainSetup.SetConfigurationBytes*&gt; method, which overrides the application's XML configuration information.","pos":[0,177],"source":"Returns the XML configuration information set by the <xref:System.AppDomainSetup.SetConfigurationBytes*> method, which overrides the application's XML configuration information."}]},{"pos":[37389,38767],"content":"The <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method provides a way to override the configuration information of an application that creates a new application domain. The configuration file information in `value` overrides the configuration file information for the application. For example, when the Example.exe application creates a new application domain, it can override the configuration information originally obtained from Example.exe.config file.      > [!IMPORTANT] >  Some consumers of configuration file information do not use the information stored by the <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method. The runtime does not enforce this. To ensure that all configuration file information is overridden in a new application domain, use the <xref:System.AppDomainSetup.ConfigurationFile%2A> property to specify a configuration file. The <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method does affect assembly binding.       The XML in `value` is the same as the XML in a normal configuration file, except that it is stored as a <xref:System.Byte> array.       To access the configuration bytes for an application domain, use the <xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName> property to get the <xref:System.AppDomainSetup> object for the application domain, then use the GetConfigurationBytes method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt; method provides a way to override the configuration information of an application that creates a new application domain.","pos":[0,178],"source":"The <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method provides a way to override the configuration information of an application that creates a new application domain."},{"content":"The configuration file information in <ph id=\"ph1\">`value`</ph> overrides the configuration file information for the application.","pos":[179,290],"source":" The configuration file information in `value` overrides the configuration file information for the application."},{"content":"For example, when the Example.exe application creates a new application domain, it can override the configuration information originally obtained from Example.exe.config file.","pos":[291,466]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Some consumers of configuration file information do not use the information stored by the &lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt; method.","pos":[472,641],"source":"      > [!IMPORTANT] >  Some consumers of configuration file information do not use the information stored by the <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method."},{"content":"The runtime does not enforce this.","pos":[642,676]},{"content":"To ensure that all configuration file information is overridden in a new application domain, use the &lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt; property to specify a configuration file.","pos":[677,869],"source":" To ensure that all configuration file information is overridden in a new application domain, use the <xref:System.AppDomainSetup.ConfigurationFile%2A> property to specify a configuration file."},{"content":"The &lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt; method does affect assembly binding.","pos":[870,964],"source":" The <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method does affect assembly binding."},{"content":"The XML in <ph id=\"ph1\">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a &lt;xref:System.Byte&gt; array.","pos":[971,1100],"source":"       The XML in `value` is the same as the XML in a normal configuration file, except that it is stored as a <xref:System.Byte> array."},{"content":"To access the configuration bytes for an application domain, use the &lt;xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName&gt; property to get the &lt;xref:System.AppDomainSetup&gt; object for the application domain, then use the GetConfigurationBytes method.","pos":[1107,1371],"source":"       To access the configuration bytes for an application domain, use the <xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName> property to get the <xref:System.AppDomainSetup> object for the application domain, then use the GetConfigurationBytes method."}]},{"pos":[38908,39195],"content":"An array that contains the XML configuration information that was set by the &lt;xref:System.AppDomainSetup.SetConfigurationBytes<bpt id=\"p1\">*</bpt>&gt; method, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the &lt;xref:System.AppDomainSetup.SetConfigurationBytes<ept id=\"p1\">*</ept>&gt; method has not been called.","needQuote":true,"needEscape":true,"source":"An array that contains the XML configuration information that was set by the <xref:System.AppDomainSetup.SetConfigurationBytes*> method, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the <xref:System.AppDomainSetup.SetConfigurationBytes*> method has not been called."},{"pos":[39588,39662],"content":"Gets or sets the location of the license file associated with this domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the location of the license file associated with this domain.","pos":[0,74]}]},{"pos":[39783,39825],"content":"The location and name of the license file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The location and name of the license file.","pos":[0,42]}]},{"pos":[40243,40304],"content":"Specifies the optimization policy used to load an executable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the optimization policy used to load an executable.","pos":[0,61]}]},{"pos":[40942,41043],"content":"An enumerated constant that is used with the <bpt id=\"p1\">&lt;xref href=\"System.LoaderOptimizationAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An enumerated constant that is used with the <xref href=\"System.LoaderOptimizationAttribute\"></xref>."},{"pos":[41523,41729],"content":"Gets or sets a list of assemblies marked with the <bpt id=\"p1\">&lt;xref href=\"System.Security.PartialTrustVisibilityLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> flag that are made visible to partial-trust code running in a sandboxed application domain.","needQuote":true,"needEscape":true,"source":"Gets or sets a list of assemblies marked with the <xref href=\"System.Security.PartialTrustVisibilityLevel\"></xref> flag that are made visible to partial-trust code running in a sandboxed application domain."},{"pos":[41742,43920],"content":"Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute can be made conditional by setting its <xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A> property to <xref:System.Security.PartialTrustVisibilityLevel>. An APTCA assembly that is marked with <xref:System.Security.PartialTrustVisibilityLevel> cannot be used by partially trusted code unless the host application allows it.       The host of a sandboxed application domain allows code in the application domain to use assemblies with conditional APTCA attributes by creating an array that contains the simple name and public key of each assembly, and assigning the array to this property. For example, an element of the array might look like the following: \"MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9\".      > [!IMPORTANT] >  If you are using a subclass of <xref:System.AppDomainManager>, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the PartialTrustVisibleAssemblies property of the <xref:System.AppDomainSetup> you use to create application domains. Otherwise the assemblies that are marked with the conditional APTCA attribute will be disabled.      > [!NOTE] >  When you are debugging an application that is running in a sandboxed application domain, some <xref:System.Security.SecurityException> messages can be misleading. For example, a message might state that one of your fully trusted assemblies has only limited permissions, when the real cause of the problem is that a security demand that exceeds the grant set of the sandboxed application domain has propagated to the boundary of the sandboxed application domain and failed.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Beginning with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt; (APTCA) attribute can be made conditional by setting its &lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A&gt; property to &lt;xref:System.Security.PartialTrustVisibilityLevel&gt;.","pos":[0,357],"source":"Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute can be made conditional by setting its <xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A> property to <xref:System.Security.PartialTrustVisibilityLevel>."},{"content":"An APTCA assembly that is marked with &lt;xref:System.Security.PartialTrustVisibilityLevel&gt; cannot be used by partially trusted code unless the host application allows it.","pos":[358,526],"source":" An APTCA assembly that is marked with <xref:System.Security.PartialTrustVisibilityLevel> cannot be used by partially trusted code unless the host application allows it."},{"content":"The host of a sandboxed application domain allows code in the application domain to use assemblies with conditional APTCA attributes by creating an array that contains the simple name and public key of each assembly, and assigning the array to this property.","pos":[533,791]},{"content":"For example, an element of the array might look like the following: \"MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9\".","pos":[792,1205]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If you are using a subclass of &lt;xref:System.AppDomainManager&gt;, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the PartialTrustVisibleAssemblies property of the &lt;xref:System.AppDomainSetup&gt; you use to create application domains.","pos":[1211,1581],"source":"      > [!IMPORTANT] >  If you are using a subclass of <xref:System.AppDomainManager>, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the PartialTrustVisibleAssemblies property of the <xref:System.AppDomainSetup> you use to create application domains."},{"content":"Otherwise the assemblies that are marked with the conditional APTCA attribute will be disabled.","pos":[1582,1677]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When you are debugging an application that is running in a sandboxed application domain, some &lt;xref:System.Security.SecurityException&gt; messages can be misleading.","pos":[1683,1858],"source":"      > [!NOTE] >  When you are debugging an application that is running in a sandboxed application domain, some <xref:System.Security.SecurityException> messages can be misleading."},{"content":"For example, a message might state that one of your fully trusted assemblies has only limited permissions, when the real cause of the problem is that a security demand that exceeds the grant set of the sandboxed application domain has propagated to the boundary of the sandboxed application domain and failed.","pos":[1859,2168]}]},{"pos":[44064,44180],"content":"An array of partial assembly names, where each partial name consists of the simple assembly name and the public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of partial assembly names, where each partial name consists of the simple assembly name and the public key.","pos":[0,116]}]},{"pos":[44596,44709],"content":"Gets or sets the list of directories under the application base directory that are probed for private assemblies.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the list of directories under the application base directory that are probed for private assemblies.","pos":[0,113]}]},{"pos":[44721,44933],"content":"Private assemblies are deployed in the same directory structure as the application. If the directories specified for PrivateBinPath are not under <xref:System.AppDomainSetup.ApplicationBase%2A>, they are ignored.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Private assemblies are deployed in the same directory structure as the application. If the directories specified for PrivateBinPath are not under <xref:System.AppDomainSetup.ApplicationBase%2A>, they are ignored.","pos":[0,212],"nodes":[{"content":"Private assemblies are deployed in the same directory structure as the application.","pos":[0,83]},{"content":"If the directories specified for PrivateBinPath are not under &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;, they are ignored.","pos":[84,212],"source":" If the directories specified for PrivateBinPath are not under <xref:System.AppDomainSetup.ApplicationBase%2A>, they are ignored."}]}]},{"pos":[45057,45107],"content":"A list of directory names separated by semicolons.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of directory names separated by semicolons.","pos":[0,50]}]},{"pos":[45533,45738],"content":"Gets or sets a string value that includes or excludes &lt;xref:System.AppDomainSetup.ApplicationBase<bpt id=\"p1\">*</bpt>&gt; from the search path for the application, and searches only &lt;xref:System.AppDomainSetup.PrivateBinPath<ept id=\"p1\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"Gets or sets a string value that includes or excludes <xref:System.AppDomainSetup.ApplicationBase*> from the search path for the application, and searches only <xref:System.AppDomainSetup.PrivateBinPath*>."},{"pos":[45750,46089],"content":"Set this property to any non-null string value, including <xref:System.String?displayProperty=fullName> (\"\"), to exclude the application directory path — that is, <xref:System.AppDomainSetup.ApplicationBase%2A> — from the search path for the application, and to search for assemblies only in <xref:System.AppDomainSetup.PrivateBinPath%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Set this property to any non-null string value, including &lt;xref:System.String?displayProperty=fullName&gt; (\"\"), to exclude the application directory path — that is, &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt; — from the search path for the application, and to search for assemblies only in &lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;.","pos":[0,339],"source":"Set this property to any non-null string value, including <xref:System.String?displayProperty=fullName> (\"\"), to exclude the application directory path — that is, <xref:System.AppDomainSetup.ApplicationBase%2A> — from the search path for the application, and to search for assemblies only in <xref:System.AppDomainSetup.PrivateBinPath%2A>."}]},{"pos":[46218,46517],"content":"A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path.","pos":[0,216],"source":"A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[217,299],"source":" The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[46923,47095],"content":"Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a <ph id=\"ph1\">`QueryInterface`</ph> is performed on each call.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a `QueryInterface` is performed on each call."},{"pos":[47108,47303],"content":"Disabling interface caching has a significant impact on the performance of interop calls.       This member is introduced in the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)].","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Disabling interface caching has a significant impact on the performance of interop calls.","pos":[0,89]},{"content":"This member is introduced in the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>.","pos":[96,193],"source":"       This member is introduced in the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]."}]},{"pos":[47427,47712],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if interface caching is disabled for interop calls in application domains created with the current <bpt id=\"p2\">&lt;xref href=\"System.AppDomainSetup\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if interface caching is disabled for interop calls in application domains created with the current <xref href=\"System.AppDomainSetup\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[48334,48474],"content":"Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.","pos":[0,140]}]},{"pos":[51559,51740],"content":"An enumerable set of string values that specify compatibility switches, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to erase the existing compatibility switches.","needQuote":true,"needEscape":true,"source":"An enumerable set of string values that specify compatibility switches, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to erase the existing compatibility switches."},{"pos":[52238,52363],"content":"Provides XML configuration information for the application domain, replacing the application's XML configuration information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides XML configuration information for the application domain, replacing the application's XML configuration information.","pos":[0,125]}]},{"pos":[52376,53383],"content":"The SetConfigurationBytes method provides a way to replace the configuration information of an application that creates a new application domain. The configuration file information in `value`replaces the configuration file information for the application. For example, when the Example.exe application creates a new application domain, it can replace the configuration information originally obtained from the Example.exe.config file.      > [!IMPORTANT] >  Some consumers of configuration file information do not use the information stored by the SetConfigurationBytes method. The runtime does not enforce this. To ensure that all configuration file information is replaced in a new application domain, use the <xref:System.AppDomainSetup.ConfigurationFile%2A> property to specify a configuration file. The SetConfigurationBytes method does affect assembly binding.       The XML in `value` is the same as the XML in a normal configuration file, except that it is stored as a <xref:System.Byte> array.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SetConfigurationBytes method provides a way to replace the configuration information of an application that creates a new application domain.","pos":[0,145]},{"content":"The configuration file information in <ph id=\"ph1\">`value`</ph>replaces the configuration file information for the application.","pos":[146,255],"source":" The configuration file information in `value`replaces the configuration file information for the application."},{"content":"For example, when the Example.exe application creates a new application domain, it can replace the configuration information originally obtained from the Example.exe.config file.","pos":[256,434]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Some consumers of configuration file information do not use the information stored by the SetConfigurationBytes method.","pos":[440,577],"source":"      > [!IMPORTANT] >  Some consumers of configuration file information do not use the information stored by the SetConfigurationBytes method."},{"content":"The runtime does not enforce this.","pos":[578,612]},{"content":"To ensure that all configuration file information is replaced in a new application domain, use the &lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt; property to specify a configuration file.","pos":[613,803],"source":" To ensure that all configuration file information is replaced in a new application domain, use the <xref:System.AppDomainSetup.ConfigurationFile%2A> property to specify a configuration file."},{"content":"The SetConfigurationBytes method does affect assembly binding.","pos":[804,866]},{"content":"The XML in <ph id=\"ph1\">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a &lt;xref:System.Byte&gt; array.","pos":[873,1002],"source":"       The XML in `value` is the same as the XML in a normal configuration file, except that it is stored as a <xref:System.Byte> array."}]},{"pos":[53535,53630],"content":"An array that contains the XML configuration information to be used for the application domain.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the XML configuration information to be used for the application domain.","pos":[0,95]}]},{"pos":[54198,54300],"content":"Provides the common language runtime with an alternate implementation of a string comparison function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the common language runtime with an alternate implementation of a string comparison function.","pos":[0,102]}]},{"pos":[54313,54730],"content":"The following string comparison and sorting methods can be overridden by the SetNativeFunction method:      -   <ph id=\"ph1\">`IsNLSDefinedString`</ph><ph id=\"ph2\">      -   </ph><ph id=\"ph3\">`CompareStringEx`</ph><ph id=\"ph4\">      -   </ph><ph id=\"ph5\">`LCMapStringEx`</ph><ph id=\"ph6\">      -   </ph><ph id=\"ph7\">`FindNLSStringEx`</ph><ph id=\"ph8\">      -   </ph><ph id=\"ph9\">`CompareStringOrdinal`</ph><ph id=\"ph10\">      -   </ph><ph id=\"ph11\">`GetNLSVersion`</ph>       For information about these functions, see <bpt id=\"p1\">[</bpt>National Language Support Functions<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=228134)</ept>.","needQuote":false,"needEscape":true,"extradata":"MT","source":"The following string comparison and sorting methods can be overridden by the SetNativeFunction method:      -   `IsNLSDefinedString`      -   `CompareStringEx`      -   `LCMapStringEx`      -   `FindNLSStringEx`      -   `CompareStringOrdinal`      -   `GetNLSVersion`       For information about these functions, see [National Language Support Functions](http://go.microsoft.com/fwlink/?LinkId=228134)."},{"pos":[54937,54992],"content":"The name of the string comparison function to override.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the string comparison function to override.","pos":[0,55]}]},{"pos":[55063,55180],"content":"The function version. For [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)], its value must be 1 or greater.","needQuote":true,"needEscape":true,"nodes":[{"content":"The function version.","pos":[0,21]},{"content":"For <ph id=\"ph1\">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>, its value must be 1 or greater.","pos":[22,117],"source":" For [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)], its value must be 1 or greater."}]},{"pos":[55252,55308],"content":"A pointer to the function that overrides <ph id=\"ph1\">`functionName`</ph>.","needQuote":true,"needEscape":true,"source":"A pointer to the function that overrides `functionName`."},{"pos":[55470,55560],"content":"<ph id=\"ph1\">&lt;code&gt;functionName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>functionName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[55664,55819],"content":"<code>functionVersion</code> is not 1 or greater.       -or-       <code>functionPointer</code> is &lt;xref:System.IntPtr?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;functionVersion&lt;/code&gt;</ph> is not 1 or greater.","pos":[0,49],"source":"<code>functionVersion</code> is not 1 or greater."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;functionPointer&lt;/code&gt;</ph> is <ph id=\"ph2\">&amp;lt;</ph>xref:System.IntPtr?displayProperty=fullName<ph id=\"ph3\">&amp;gt;</ph>.","pos":[56,151],"source":"       -or-       <code>functionPointer</code> is &lt;xref:System.IntPtr?displayProperty=fullName&gt;."}]},{"pos":[56189,56273],"content":"Gets or sets the names of the directories containing assemblies to be shadow copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the names of the directories containing assemblies to be shadow copied.","pos":[0,84]}]},{"pos":[56286,57434],"content":"When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the <xref:System.AppDomainSetup.PrivateBinPath%2A> and <xref:System.AppDomainSetup.ApplicationBase%2A> properties. The ShadowCopyDirectories property restricts the shadow copy to the assemblies in the directories specified by ShadowCopyDirectories.       If you don’t assign a string to the ShadowCopyDirectories property, or if you set this property to `null`, all assemblies in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> properties are shadow copied.      > [!IMPORTANT] >  Directory paths must not contain semicolons, because the semicolon is the delimiter character. There is no escape character for semicolons.       When shadow copying is in effect, assembly files are copied to another location before the assemblies are loaded. The original assembly file is not locked, so it can be updated. For more information on shadow copying, see [Shadow Copying Assemblies](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the &lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt; and &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt; properties.","pos":[0,255],"source":"When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the <xref:System.AppDomainSetup.PrivateBinPath%2A> and <xref:System.AppDomainSetup.ApplicationBase%2A> properties."},{"content":"The ShadowCopyDirectories property restricts the shadow copy to the assemblies in the directories specified by ShadowCopyDirectories.","pos":[256,389]},{"content":"If you don’t assign a string to the ShadowCopyDirectories property, or if you set this property to <ph id=\"ph1\">`null`</ph>, all assemblies in the directories specified by the &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt; and &lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt; properties are shadow copied.","pos":[396,682],"source":"       If you don’t assign a string to the ShadowCopyDirectories property, or if you set this property to `null`, all assemblies in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> properties are shadow copied."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Directory paths must not contain semicolons, because the semicolon is the delimiter character.","pos":[688,800],"source":"      > [!IMPORTANT] >  Directory paths must not contain semicolons, because the semicolon is the delimiter character."},{"content":"There is no escape character for semicolons.","pos":[801,845]},{"content":"When shadow copying is in effect, assembly files are copied to another location before the assemblies are loaded.","pos":[852,965]},{"content":"The original assembly file is not locked, so it can be updated.","pos":[966,1029]},{"content":"For more information on shadow copying, see <bpt id=\"p1\">[</bpt>Shadow Copying Assemblies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1030,1141],"source":" For more information on shadow copying, see [Shadow Copying Assemblies](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[57566,57616],"content":"A list of directory names separated by semicolons.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of directory names separated by semicolons.","pos":[0,50]}]},{"pos":[58029,58109],"content":"Gets or sets a string that indicates whether shadow copying is turned on or off.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a string that indicates whether shadow copying is turned on or off.","pos":[0,80]}]},{"pos":[58121,58232],"content":"For more information on shadow copying, see <bpt id=\"p1\">[</bpt>Shadow Copying Assemblies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information on shadow copying, see [Shadow Copying Assemblies](~/add/includes/ajax-current-ext-md.md)."},{"pos":[58357,58484],"content":"The string value \"true\" to indicate that shadow copying is turned on; or \"false\" to indicate that shadow copying is turned off.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string value \"true\" to indicate that shadow copying is turned on; or \"false\" to indicate that shadow copying is turned off.","pos":[0,127]}]},{"pos":[58911,59184],"content":"Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the &lt;xref:System.Runtime.Versioning.FrameworkName.%23ctor%28System.String%29?displayProperty=fullName&gt; constructor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Runtime.Versioning.FrameworkName.%23ctor%28System.String%29?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> constructor.","pos":[0,273],"source":"Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the &lt;xref:System.Runtime.Versioning.FrameworkName.%23ctor%28System.String%29?displayProperty=fullName&gt; constructor."}]},{"pos":[59197,60172],"content":"Set this property to tell the currently running version of the .NET Framework that the application domain will be used to load and run assemblies that have been compiled for the target version and profile. If the currently running version of the .NET Framework has optional behaviors that affect the compatibility of code that was compiled with the target version, it can enable or disable those behaviors, as appropriate, to improve compatibility. This can be useful when an application supports add-ins compiled with multiple versions of the .NET Framework by running them in separate application domains.       For client applications, the value of the TargetFrameworkName property is inferred from the <xref:System.Runtime.Versioning.TargetFrameworkAttribute> attribute. In [!INCLUDE[vs_dev10_long](~/add/includes/vs-dev10-long-md.md)] and later, this attribute is added to the assembly automatically based on the setting of the project's **Target Framework** property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Set this property to tell the currently running version of the .NET Framework that the application domain will be used to load and run assemblies that have been compiled for the target version and profile.","pos":[0,205]},{"content":"If the currently running version of the .NET Framework has optional behaviors that affect the compatibility of code that was compiled with the target version, it can enable or disable those behaviors, as appropriate, to improve compatibility.","pos":[206,448]},{"content":"This can be useful when an application supports add-ins compiled with multiple versions of the .NET Framework by running them in separate application domains.","pos":[449,607]},{"content":"For client applications, the value of the TargetFrameworkName property is inferred from the &lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt; attribute.","pos":[614,774],"source":"       For client applications, the value of the TargetFrameworkName property is inferred from the <xref:System.Runtime.Versioning.TargetFrameworkAttribute> attribute."},{"content":"In <ph id=\"ph1\">[!INCLUDE[vs_dev10_long](~/add/includes/vs-dev10-long-md.md)]</ph> and later, this attribute is added to the assembly automatically based on the setting of the project's <bpt id=\"p1\">**</bpt>Target Framework<ept id=\"p1\">**</ept> property.","pos":[775,973],"source":" In [!INCLUDE[vs_dev10_long](~/add/includes/vs-dev10-long-md.md)] and later, this attribute is added to the assembly automatically based on the setting of the project's **Target Framework** property."}]},{"pos":[60302,60355],"content":"The target version and profile of the .NET Framework.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target version and profile of the .NET Framework.","pos":[0,53]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AppDomainSetup\n  id: AppDomainSetup\n  children:\n  - System.AppDomainSetup.#ctor\n  - System.AppDomainSetup.#ctor(System.ActivationContext)\n  - System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)\n  - System.AppDomainSetup.ActivationArguments\n  - System.AppDomainSetup.AppDomainInitializer\n  - System.AppDomainSetup.AppDomainInitializerArguments\n  - System.AppDomainSetup.AppDomainManagerAssembly\n  - System.AppDomainSetup.AppDomainManagerType\n  - System.AppDomainSetup.ApplicationBase\n  - System.AppDomainSetup.ApplicationName\n  - System.AppDomainSetup.ApplicationTrust\n  - System.AppDomainSetup.CachePath\n  - System.AppDomainSetup.ConfigurationFile\n  - System.AppDomainSetup.DisallowApplicationBaseProbing\n  - System.AppDomainSetup.DisallowBindingRedirects\n  - System.AppDomainSetup.DisallowCodeDownload\n  - System.AppDomainSetup.DisallowPublisherPolicy\n  - System.AppDomainSetup.DynamicBase\n  - System.AppDomainSetup.GetConfigurationBytes\n  - System.AppDomainSetup.LicenseFile\n  - System.AppDomainSetup.LoaderOptimization\n  - System.AppDomainSetup.PartialTrustVisibleAssemblies\n  - System.AppDomainSetup.PrivateBinPath\n  - System.AppDomainSetup.PrivateBinPathProbe\n  - System.AppDomainSetup.SandboxInterop\n  - System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})\n  - System.AppDomainSetup.SetConfigurationBytes(System.Byte[])\n  - System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)\n  - System.AppDomainSetup.ShadowCopyDirectories\n  - System.AppDomainSetup.ShadowCopyFiles\n  - System.AppDomainSetup.TargetFrameworkName\n  langs:\n  - csharp\n  name: AppDomainSetup\n  nameWithType: AppDomainSetup\n  fullName: System.AppDomainSetup\n  type: Class\n  summary: Represents assembly binding information that can be added to an instance of <xref href=\"System.AppDomain\"></xref>.\n  remarks: \"Changing the properties of an AppDomainSetup instance does not affect any existing <xref:System.AppDomain>. It can affect only the creation of a new <xref:System.AppDomain>, when the <xref:System.AppDomain.CreateDomain%2A> method is called with the AppDomainSetup instance as a parameter.  \\n  \\n This class implements the <xref:System.IAppDomainSetup> interface.  \\n  \\n> [!CAUTION]\\n>  The default value for the <xref:System.AppDomainSetup.DisallowCodeDownload%2A> property is false. This setting is unsafe for services. To help prevent services from downloading partially trusted code, set this property to true\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class AppDomainSetup : IAppDomainSetup\n  inheritance:\n  - System.Object\n  implements:\n  - System.IAppDomainSetup\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.#ctor\n  id: '#ctor'\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: AppDomainSetup()\n  nameWithType: AppDomainSetup.AppDomainSetup()\n  fullName: System.AppDomainSetup.AppDomainSetup()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.AppDomainSetup\"></xref> class.\n  syntax:\n    content: public AppDomainSetup ();\n    parameters: []\n  overload: System.AppDomainSetup.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.#ctor(System.ActivationContext)\n  id: '#ctor(System.ActivationContext)'\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: AppDomainSetup(ActivationContext)\n  nameWithType: AppDomainSetup.AppDomainSetup(ActivationContext)\n  fullName: System.AppDomainSetup.AppDomainSetup(ActivationContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.AppDomainSetup\"></xref> class with the specified activation context to use for manifest-based activation of an application domain.\n  remarks: The <xref:System.ActivationContext> object specified for `activationContext` is used to generate an <xref:System.Runtime.Hosting.ActivationArguments> object containing information required to activate a new application domain. This <xref:System.Runtime.Hosting.ActivationArguments> object can be accessed by using the <xref:System.AppDomainSetup.ActivationArguments%2A> property.\n  syntax:\n    content: public AppDomainSetup (ActivationContext activationContext);\n    parameters:\n    - id: activationContext\n      type: System.ActivationContext\n      description: The activation context to be used for an application domain.\n  overload: System.AppDomainSetup.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>activationContext</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)\n  id: '#ctor(System.Runtime.Hosting.ActivationArguments)'\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: AppDomainSetup(ActivationArguments)\n  nameWithType: AppDomainSetup.AppDomainSetup(ActivationArguments)\n  fullName: System.AppDomainSetup.AppDomainSetup(ActivationArguments)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.AppDomainSetup\"></xref> class with the specified activation arguments required for manifest-based activation of an application domain.\n  remarks: The object specified for `activationArguments` can be accessed by using the <xref:System.AppDomainSetup.ActivationArguments%2A> property.\n  syntax:\n    content: public AppDomainSetup (System.Runtime.Hosting.ActivationArguments activationArguments);\n    parameters:\n    - id: activationArguments\n      type: System.Runtime.Hosting.ActivationArguments\n      description: An object that specifies information required for the manifest-based activation of a new application domain.\n  overload: System.AppDomainSetup.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>activationArguments</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.AppDomainSetup.ActivationArguments\n  id: ActivationArguments\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: ActivationArguments\n  nameWithType: AppDomainSetup.ActivationArguments\n  fullName: System.AppDomainSetup.ActivationArguments\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets data about the activation of an application domain.\n  remarks: \"No exception is thrown if this property is set to `null`.  \\n  \\n The information provided by the <xref:System.Runtime.Hosting.ActivationArguments> object supports manifest-based activation.\"\n  syntax:\n    content: public System.Runtime.Hosting.ActivationArguments ActivationArguments { get; set; }\n    return:\n      type: System.Runtime.Hosting.ActivationArguments\n      description: An object that contains data about the activation of an application domain.\n  overload: System.AppDomainSetup.ActivationArguments*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The property is set to an <xref href=\"System.Runtime.Hosting.ActivationArguments\"></xref> object whose application identity does not match the application identity of the <xref href=\"System.Security.Policy.ApplicationTrust\"></xref> object returned by the <xref:System.AppDomainSetup.ApplicationTrust*> property. No exception is thrown if the <xref:System.AppDomainSetup.ApplicationTrust*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.AppDomainSetup.AppDomainInitializer\n  id: AppDomainInitializer\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: AppDomainInitializer\n  nameWithType: AppDomainSetup.AppDomainInitializer\n  fullName: System.AppDomainSetup.AppDomainInitializer\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the <xref href=\"System.AppDomainInitializer\"></xref> delegate, which represents a callback method that is invoked when the application domain is initialized.\n  remarks: \"To pass information to the callback method, assign an array of strings to the <xref:System.AppDomainSetup.AppDomainInitializerArguments%2A> property. The array is passed to the callback method each time an <xref:System.AppDomain> is initialized.  \\n  \\n The callback method is executed in the context of the newly created application domain.\"\n  example:\n  - \"The following example creates a child application domain named `ChildDomain`, using an <xref:System.AppDomainSetup> object and evidence from the default application domain. The AppDomainInitializer property is set to the callback method `AppDomainInit`, which is invoked when the child domain is initialized. The arguments for the callback method are placed in an array of strings, which is assigned to the <xref:System.AppDomainSetup.AppDomainInitializerArguments%2A> property. When the child domain is created, the callback method simply prints the strings.  \\n  \\n [!code-cpp[AppDomainInitializer#1](~/add/codesnippet/cpp/p-system.appdomainsetup._4_1.cpp)]\\n [!code-cs[AppDomainInitializer#1](~/add/codesnippet/csharp/p-system.appdomainsetup._4_1.cs)]\\n [!code-vb[AppDomainInitializer#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._4_1.vb)]\"\n  syntax:\n    content: public AppDomainInitializer AppDomainInitializer { get; set; }\n    return:\n      type: System.AppDomainInitializer\n      description: A delegate that represents a callback method that is invoked when the application domain is initialized.\n  overload: System.AppDomainSetup.AppDomainInitializer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.AppDomainInitializerArguments\n  id: AppDomainInitializerArguments\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: AppDomainInitializerArguments\n  nameWithType: AppDomainSetup.AppDomainInitializerArguments\n  fullName: System.AppDomainSetup.AppDomainInitializerArguments\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the arguments passed to the callback method represented by the <xref href=\"System.AppDomainInitializer\"></xref> delegate. The callback method is invoked when the application domain is initialized.\n  remarks: \"Use the <xref:System.AppDomainSetup.AppDomainInitializer%2A> property to specify a callback method that is invoked during <xref:System.AppDomain> initialization. If the <xref:System.AppDomainSetup.AppDomainInitializer%2A> property is not set, the array assigned to this property is not used.  \\n  \\n The callback method is executed in the context of the newly created application domain.\"\n  example:\n  - \"The following code example creates a child application domain named `ChildDomain`, using an <xref:System.AppDomainSetup> object and evidence from the default application domain. The <xref:System.AppDomainSetup.AppDomainInitializer%2A> property is set to the callback method `AppDomainInit`, which is invoked when the child domain is initialized. The arguments for the callback method are placed in an array of strings, which is assigned to the AppDomainInitializerArguments property. When the child domain is created, the callback method simply prints the strings.  \\n  \\n [!code-cpp[AppDomainInitializer#1](~/add/codesnippet/cpp/p-system.appdomainsetup._0_1.cpp)]\\n [!code-cs[AppDomainInitializer#1](~/add/codesnippet/csharp/p-system.appdomainsetup._0_1.cs)]\\n [!code-vb[AppDomainInitializer#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._0_1.vb)]\"\n  syntax:\n    content: public string[] AppDomainInitializerArguments { get; set; }\n    return:\n      type: System.String[]\n      description: An array of strings that is passed to the callback method represented by the <xref href=\"System.AppDomainInitializer\"></xref> delegate, when the callback method is invoked during <xref href=\"System.AppDomain\"></xref> initialization.\n  overload: System.AppDomainSetup.AppDomainInitializerArguments*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.AppDomainManagerAssembly\n  id: AppDomainManagerAssembly\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: AppDomainManagerAssembly\n  nameWithType: AppDomainSetup.AppDomainManagerAssembly\n  fullName: System.AppDomainSetup.AppDomainManagerAssembly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <xref href=\"System.AppDomainSetup\"></xref> object.\n  remarks: \"To specify the type of the application domain manager, set both this property and the <xref:System.AppDomainSetup.AppDomainManagerType%2A> property. If either of these properties is not set, the other is ignored.  \\n  \\n If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName> method is called).  \\n  \\n When the application domain is loaded, <xref:System.TypeLoadException> is thrown if the assembly does not exist, or if the assembly does not contain the type specified by the <xref:System.AppDomainSetup.AppDomainManagerType%2A> property. <xref:System.IO.FileLoadException> is thrown if the assembly is found but the version information does not match.  \\n  \\n To set the application domain manager for the default application domain, use the [\\\\<appDomainManagerAssembly>](../Topic/%3CappDomainManagerAssembly%3E%20Element.md) and [\\\\<appDomainManagerType>](../Topic/%3CappDomainManagerType%3E%20Element.md) elements in the [\\\\<runtime>](../Topic/%3Cruntime%3E%20Element.md) section of the application configuration file, or use the environment variables described in <xref:System.AppDomainManager>.  \\n  \\n This feature requires the application to have full trust. (For example, an application running on the desktop has full trust.) If the application does not have full trust, a <xref:System.TypeLoadException> is thrown.  \\n  \\n The format of the assembly display name is given by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public string AppDomainManagerAssembly { get; set; }\n    return:\n      type: System.String\n      description: The display name of the assembly that provides the <xref:System.Type> of the application domain manager.\n  overload: System.AppDomainSetup.AppDomainManagerAssembly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.AppDomainManagerType\n  id: AppDomainManagerType\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: AppDomainManagerType\n  nameWithType: AppDomainSetup.AppDomainManagerType\n  fullName: System.AppDomainSetup.AppDomainManagerType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the full name of the type that provides the application domain manager for application domains created using this <xref href=\"System.AppDomainSetup\"></xref> object.\n  remarks: \"To specify the type of the application domain manager, set both this property and the <xref:System.AppDomainSetup.AppDomainManagerAssembly%2A> property. If either of these properties is not set, the other is ignored.  \\n  \\n If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName> method is called).  \\n  \\n When the application domain is loaded, <xref:System.TypeLoadException> is thrown if the assembly specified by the <xref:System.AppDomainSetup.AppDomainManagerAssembly%2A> property does not contain the type specified by this property.  \\n  \\n To set the application domain manager for the default application domain, use the [\\\\<appDomainManagerAssembly>](../Topic/%3CappDomainManagerAssembly%3E%20Element.md) and [\\\\<appDomainManagerType>](../Topic/%3CappDomainManagerType%3E%20Element.md) elements in the [\\\\<runtime>](../Topic/%3Cruntime%3E%20Element.md) section of the application configuration file, or use the environment variables described in <xref:System.AppDomainManager>.  \\n  \\n This feature requires the application to have full trust. (For example, an application running on the desktop has full trust.) If the application does not have full trust, a <xref:System.TypeLoadException> is thrown.  \\n  \\n The format of the full name of a type is given by the <xref:System.Type.FullName%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public string AppDomainManagerType { get; set; }\n    return:\n      type: System.String\n      description: The full name of the type, including the namespace.\n  overload: System.AppDomainSetup.AppDomainManagerType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.ApplicationBase\n  id: ApplicationBase\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: ApplicationBase\n  nameWithType: AppDomainSetup.ApplicationBase\n  fullName: System.AppDomainSetup.ApplicationBase\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the name of the directory containing the application.\n  remarks: \"The application base directory is where the assembly manager begins probing for assemblies.  \\n  \\n The ApplicationBase property can influence which permissions are granted to an application domain. For example, an application domain originating from the local computer normally receives full trust based on its location of origin. However, if the ApplicationBase property of that <xref:System.AppDomain> is set to the full name of an intranet directory, the ApplicationBase setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.\"\n  example:\n  - \"The following example demonstrates how to use the ApplicationBase property to set the location where the assembly loader begins probing for assemblies to load into a new application domain.  \\n  \\n> [!NOTE]\\n>  You must ensure that the folder you specify exists.  \\n  \\n [!code-vb[ADApplicationBase#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._5_1.vb)]\\n [!code-cpp[ADApplicationBase#1](~/add/codesnippet/cpp/p-system.appdomainsetup._5_1.cpp)]\\n [!code-cs[ADApplicationBase#1](~/add/codesnippet/csharp/p-system.appdomainsetup._5_1.cs)]\"\n  syntax:\n    content: public string ApplicationBase { get; set; }\n    return:\n      type: System.String\n      description: The name of the application base directory.\n  overload: System.AppDomainSetup.ApplicationBase*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.ApplicationName\n  id: ApplicationName\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: ApplicationName\n  nameWithType: AppDomainSetup.ApplicationName\n  fullName: System.AppDomainSetup.ApplicationName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the name of the application.\n  remarks: ''\n  example:\n  - \"The following example shows how to set the ApplicationName property when you create a new application domain.  \\n  \\n The example creates a new application domain, and then calls the <xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName> method to load the example assembly into the new application domain and create an instance of the `Worker` class. The `Worker` class inherits <xref:System.MarshalByRefObject>, so the example can use the proxy returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A> to call the `TestLoad` method.  \\n  \\n The `TestLoad` method loads an assembly that you specify. You must either specify a valid, fully qualified assembly name, or comment out the <xref:System.Reflection.Assembly.Load%28System.String%29> method. The `TestLoad` method lists the assemblies that are loaded into the new application domain, showing that your specified assembly and the example assembly are loaded.  \\n  \\n The example uses the <xref:System.LoaderOptimizationAttribute> attribute to tell the assembly loader how the application will share code across application domains.  \\n  \\n [!code-cpp[ADMultiDomain#1](~/add/codesnippet/cpp/p-system.appdomainsetup._2_1.cpp)]\\n [!code-cs[ADMultiDomain#1](~/add/codesnippet/csharp/p-system.appdomainsetup._2_1.cs)]\\n [!code-vb[ADMultiDomain#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._2_1.vb)]\"\n  syntax:\n    content: public string ApplicationName { get; set; }\n    return:\n      type: System.String\n      description: The name of the application.\n  overload: System.AppDomainSetup.ApplicationName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.ApplicationTrust\n  id: ApplicationTrust\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: ApplicationTrust\n  nameWithType: AppDomainSetup.ApplicationTrust\n  fullName: System.AppDomainSetup.ApplicationTrust\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets an object containing security and trust information.\n  remarks: This property is `null` when the <xref:System.AppDomainSetup> is created. Once changed, it cannot be reset to a null reference.\n  syntax:\n    content: public System.Security.Policy.ApplicationTrust ApplicationTrust { get; set; }\n    return:\n      type: System.Security.Policy.ApplicationTrust\n      description: An object that contains security and trust information.\n  overload: System.AppDomainSetup.ApplicationTrust*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The property is set to an <xref href=\"System.Security.Policy.ApplicationTrust\"></xref> object whose application identity does not match the application identity of the <xref href=\"System.Runtime.Hosting.ActivationArguments\"></xref> object returned by the <xref:System.AppDomainSetup.ActivationArguments*> property. No exception is thrown if the <xref:System.AppDomainSetup.ActivationArguments*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The property is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.AppDomainSetup.CachePath\n  id: CachePath\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: CachePath\n  nameWithType: AppDomainSetup.CachePath\n  fullName: System.AppDomainSetup.CachePath\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the name of an area specific to the application where files are shadow copied.\n  remarks: \"In order for this property to have an effect, the <xref:System.AppDomainSetup.ApplicationName%2A> property must also be set. If the <xref:System.AppDomainSetup.ApplicationName%2A> property is not set, the CachePath property is ignored and the shadow copy cache location defaults to the download cache.  \\n  \\n For more information on shadow copying, see [Shadow Copying Assemblies](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public string CachePath { get; set; }\n    return:\n      type: System.String\n      description: The fully qualified name of the directory path and file name where files are shadow copied.\n  overload: System.AppDomainSetup.CachePath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.ConfigurationFile\n  id: ConfigurationFile\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: ConfigurationFile\n  nameWithType: AppDomainSetup.ConfigurationFile\n  fullName: System.AppDomainSetup.ConfigurationFile\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the name of the configuration file for an application domain.\n  remarks: \"The configuration file describes the search rules and configuration data for the application domain. The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.  \\n  \\n For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer. Only the host knows the specifics of the configuration data for a particular circumstance.\"\n  syntax:\n    content: public string ConfigurationFile { get; set; }\n    return:\n      type: System.String\n      description: The name of the configuration file.\n  overload: System.AppDomainSetup.ConfigurationFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.DisallowApplicationBaseProbing\n  id: DisallowApplicationBaseProbing\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: DisallowApplicationBaseProbing\n  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing\n  fullName: System.AppDomainSetup.DisallowApplicationBaseProbing\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Specifies whether the application base path and private binary path are probed when searching for assemblies to load.\n  remarks: \"If the DisallowApplicationBaseProbing property is `true`, the value of the <xref:System.AppDomainSetup.ApplicationBase%2A> property is ignored. That is, no assemblies are probed for in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> property. In addition, the values of the <xref:System.AppDomainSetup.PrivateBinPath%2A> property and the <xref:System.AppDomainSetup.PrivateBinPathProbe%2A> property are ignored. No assemblies are probed for in the directories specified by the <xref:System.AppDomainSetup.PrivateBinPath%2A> property.  \\n  \\n The DisallowApplicationBaseProbing property provides an additional layer of control over the loading process. In the normal assembly loading sequence, the application base is probed before the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event is raised. However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> properties. Such applications can use the DisallowApplicationBaseProbing property to avoid the delay caused by normal probing, and to avoid loading copies of the necessary assembly that might be located in the normal probing paths.\"\n  syntax:\n    content: public bool DisallowApplicationBaseProbing { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if probing is not allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.AppDomainSetup.DisallowApplicationBaseProbing*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.DisallowBindingRedirects\n  id: DisallowBindingRedirects\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: DisallowBindingRedirects\n  nameWithType: AppDomainSetup.DisallowBindingRedirects\n  fullName: System.AppDomainSetup.DisallowBindingRedirects\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a value that indicates whether an application domain allows assembly binding redirection.\n  remarks: The DisallowBindingRedirects property is designed to be used by services and server applications where assembly binding redirection is not part of the application scenario.\n  syntax:\n    content: public bool DisallowBindingRedirects { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if redirection of assemblies is not allowed; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it is allowed.\n  overload: System.AppDomainSetup.DisallowBindingRedirects*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.DisallowCodeDownload\n  id: DisallowCodeDownload\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: DisallowCodeDownload\n  nameWithType: AppDomainSetup.DisallowCodeDownload\n  fullName: System.AppDomainSetup.DisallowCodeDownload\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.\n  remarks: \"The DisallowCodeDownload property is designed to be used by services and server applications where downloading code from an intranet or the Internet is not part of the application scenario.  \\n  \\n> [!CAUTION]\\n>  The default value for the DisallowCodeDownload property is `false`. This setting is unsafe for services. To help prevent services from downloading partially trusted code, set this property to `true`.\"\n  syntax:\n    content: public bool DisallowCodeDownload { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if HTTP download of assemblies is not allowed; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if it is allowed.\n  overload: System.AppDomainSetup.DisallowCodeDownload*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.DisallowPublisherPolicy\n  id: DisallowPublisherPolicy\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: DisallowPublisherPolicy\n  nameWithType: AppDomainSetup.DisallowPublisherPolicy\n  fullName: System.AppDomainSetup.DisallowPublisherPolicy\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a value that indicates whether the [&lt;publisherPolicy&gt;](../Topic/%3CpublisherPolicy%3E%20Element.md) section of the configuration file is applied to an application domain.\n  remarks: \"The DisallowPublisherPolicy property specifically applies to a Web application that is loaded locally. Use this property to help prevent a malicious attempt to execute an unsafe Web application in safe mode.  \\n  \\n For more information about bypassing publisher policy, see the [Redirecting Assembly Versions](~/add/includes/ajax-current-ext-md.md) topic. For more information about safe mode, see the \\\"Examining the Configuration Files\\\" section of the [How the Runtime Locates Assemblies](~/add/includes/ajax-current-ext-md.md) topic.\"\n  syntax:\n    content: public bool DisallowPublisherPolicy { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref uid=\"langword_csharp_&lt;publisherPolicy&gt;\" name=\"&lt;publisherPolicy&gt;\" href=\"\"></xref> section of the configuration file for an application domain is ignored; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the declared publisher policy is honored.\n  overload: System.AppDomainSetup.DisallowPublisherPolicy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.DynamicBase\n  id: DynamicBase\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: DynamicBase\n  nameWithType: AppDomainSetup.DynamicBase\n  fullName: System.AppDomainSetup.DynamicBase\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the base directory where the directory for dynamically generated files is located.\n  remarks: \"Use this property to set the base directory where the dynamic directory for the new application domain will be located. When code in the new application domain loads an assembly, assembly resolution looks first in the normal probing paths. If it does not find the assembly, it looks in the dynamic directory, which is returned by the <xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName> property. Dynamic assemblies that will be loaded and executed by the new application domain can be placed there.  \\n  \\n When you assign a path to the DynamicBase property, an additional subdirectory is added; the name of this subdirectory is the hash code of the value assigned to the <xref:System.AppDomainSetup.ApplicationName%2A> property. Thus, the base directory subsequently returned by this property is always different from the value assigned.  \\n  \\n> [!IMPORTANT]\\n>  Assigning a value to this property does not create any directories. The directories must be created or verified by the code that uses them.  \\n  \\n The dynamic directory is a subdirectory of DynamicBase. Its simple name is the value returned by the <xref:System.AppDomainSetup.ApplicationName%2A> property, so its format is *original path*\\\\\\\\*hash code*\\\\\\\\*application name*.\"\n  example:\n  - \"The following example demonstrates how to use the DynamicBase property to set the path an application domain probes when loading dynamic assemblies.  \\n  \\n The example creates an <xref:System.AppDomainSetup> object and sets its <xref:System.AppDomainSetup.ApplicationName%2A> property to \\\"Example\\\" and its DynamicBase property to \\\"C:\\\\DynamicAssemblyDir\\\". The example then displays the DynamicBase property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.  \\n  \\n> [!NOTE]\\n>  The base directory in this example is intended to be outside the probing path for the example application. Be sure to compile the example in a different location. Delete the base directory and all its subdirectories each time you run the example.  \\n  \\n The example creates a new application domain using the <xref:System.AppDomainSetup> object. The example then creates the dynamic directory if it does not already exist. Although the example uses the application domain's <xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName> property to get the name of the dynamic directory, it could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.  \\n  \\n The example has a `GenerateDynamicAssembly` method that emits an assembly named `DynamicHelloWorld.dll` and stores it in the new application domain's dynamic directory. The dynamic assembly contains one type, `HelloWorld`, that has a static method (`Shared` method in Visual Basic) named `HelloFromAD`. Calling this method displays the name of the application domain.  \\n  \\n The `Example` class derives from <xref:System.MarshalByRefObject>, so the example can create an instance of the class in the new application domain and call its `Test` method. The `Test` method loads the dynamic assembly by its display name and calls the static `HelloFromAD` method.  \\n  \\n You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named `DynamicHelloWorld.dll` and compiling it in the same directory as this example. The assembly must have a class named `HelloWorld` with a static method named `HelloFromAD`. This method does not have to have the same functionality as the one in the example; it can simply display a string to the console. The assembly must also have an <xref:System.Reflection.AssemblyVersionAttribute> attribute that sets its version to 1.0.0.0. When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.  \\n  \\n [!code-cpp[ADDynamicBase#1](~/add/codesnippet/cpp/p-system.appdomainsetup._1_1.cpp)]\\n [!code-cs[ADDynamicBase#1](~/add/codesnippet/csharp/p-system.appdomainsetup._1_1.cs)]\\n [!code-vb[ADDynamicBase#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._1_1.vb)]\"\n  syntax:\n    content: public string DynamicBase { get; set; }\n    return:\n      type: System.String\n      description: \"The directory where the &lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName&gt; is located.  \\n  \\n <div class=\\\"alert NOTE\\\">  \\n The return value of this property is different from the value assigned. See the Remarks section.  \\n  \\n</div>\"\n  overload: System.AppDomainSetup.DynamicBase*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: This property cannot be set because the application name on the application domain is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.AppDomainSetup.GetConfigurationBytes\n  id: GetConfigurationBytes\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: GetConfigurationBytes()\n  nameWithType: AppDomainSetup.GetConfigurationBytes()\n  fullName: System.AppDomainSetup.GetConfigurationBytes()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the XML configuration information set by the <xref:System.AppDomainSetup.SetConfigurationBytes*> method, which overrides the application's XML configuration information.\n  remarks: \"The <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method provides a way to override the configuration information of an application that creates a new application domain. The configuration file information in `value` overrides the configuration file information for the application. For example, when the Example.exe application creates a new application domain, it can override the configuration information originally obtained from Example.exe.config file.  \\n  \\n> [!IMPORTANT]\\n>  Some consumers of configuration file information do not use the information stored by the <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method. The runtime does not enforce this. To ensure that all configuration file information is overridden in a new application domain, use the <xref:System.AppDomainSetup.ConfigurationFile%2A> property to specify a configuration file. The <xref:System.AppDomainSetup.SetConfigurationBytes%2A> method does affect assembly binding.  \\n  \\n The XML in `value` is the same as the XML in a normal configuration file, except that it is stored as a <xref:System.Byte> array.  \\n  \\n To access the configuration bytes for an application domain, use the <xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName> property to get the <xref:System.AppDomainSetup> object for the application domain, then use the GetConfigurationBytes method.\"\n  syntax:\n    content: public byte[] GetConfigurationBytes ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: An array that contains the XML configuration information that was set by the <xref:System.AppDomainSetup.SetConfigurationBytes*> method, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the <xref:System.AppDomainSetup.SetConfigurationBytes*> method has not been called.\n  overload: System.AppDomainSetup.GetConfigurationBytes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.LicenseFile\n  id: LicenseFile\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: LicenseFile\n  nameWithType: AppDomainSetup.LicenseFile\n  fullName: System.AppDomainSetup.LicenseFile\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the location of the license file associated with this domain.\n  syntax:\n    content: public string LicenseFile { get; set; }\n    return:\n      type: System.String\n      description: The location and name of the license file.\n  overload: System.AppDomainSetup.LicenseFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.LoaderOptimization\n  id: LoaderOptimization\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: LoaderOptimization\n  nameWithType: AppDomainSetup.LoaderOptimization\n  fullName: System.AppDomainSetup.LoaderOptimization\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Specifies the optimization policy used to load an executable.\n  remarks: ''\n  example:\n  - \"The following example creates a dynamic assembly and saves it to disk, and then uses the LoaderOptimization property to set the optimization policy used to load the assembly into an application domain.  \\n  \\n [!code-cpp[ADDyno#1](~/add/codesnippet/cpp/p-system.appdomainsetup._3_1.cpp)]\\n [!code-cs[ADDyno#1](~/add/codesnippet/csharp/p-system.appdomainsetup._3_1.cs)]\\n [!code-vb[ADDyno#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._3_1.vb)]\"\n  syntax:\n    content: public LoaderOptimization LoaderOptimization { get; set; }\n    return:\n      type: System.LoaderOptimization\n      description: An enumerated constant that is used with the <xref href=\"System.LoaderOptimizationAttribute\"></xref>.\n  overload: System.AppDomainSetup.LoaderOptimization*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies\n  id: PartialTrustVisibleAssemblies\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: PartialTrustVisibleAssemblies\n  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies\n  fullName: System.AppDomainSetup.PartialTrustVisibleAssemblies\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a list of assemblies marked with the <xref href=\"System.Security.PartialTrustVisibilityLevel\"></xref> flag that are made visible to partial-trust code running in a sandboxed application domain.\n  remarks: \"Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute can be made conditional by setting its <xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A> property to <xref:System.Security.PartialTrustVisibilityLevel>. An APTCA assembly that is marked with <xref:System.Security.PartialTrustVisibilityLevel> cannot be used by partially trusted code unless the host application allows it.  \\n  \\n The host of a sandboxed application domain allows code in the application domain to use assemblies with conditional APTCA attributes by creating an array that contains the simple name and public key of each assembly, and assigning the array to this property. For example, an element of the array might look like the following: \\\"MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9\\\".  \\n  \\n> [!IMPORTANT]\\n>  If you are using a subclass of <xref:System.AppDomainManager>, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the PartialTrustVisibleAssemblies property of the <xref:System.AppDomainSetup> you use to create application domains. Otherwise the assemblies that are marked with the conditional APTCA attribute will be disabled.  \\n  \\n> [!NOTE]\\n>  When you are debugging an application that is running in a sandboxed application domain, some <xref:System.Security.SecurityException> messages can be misleading. For example, a message might state that one of your fully trusted assemblies has only limited permissions, when the real cause of the problem is that a security demand that exceeds the grant set of the sandboxed application domain has propagated to the boundary of the sandboxed application domain and failed.\"\n  syntax:\n    content: public string[] PartialTrustVisibleAssemblies { get; set; }\n    return:\n      type: System.String[]\n      description: An array of partial assembly names, where each partial name consists of the simple assembly name and the public key.\n  overload: System.AppDomainSetup.PartialTrustVisibleAssemblies*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.PrivateBinPath\n  id: PrivateBinPath\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: PrivateBinPath\n  nameWithType: AppDomainSetup.PrivateBinPath\n  fullName: System.AppDomainSetup.PrivateBinPath\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the list of directories under the application base directory that are probed for private assemblies.\n  remarks: Private assemblies are deployed in the same directory structure as the application. If the directories specified for PrivateBinPath are not under <xref:System.AppDomainSetup.ApplicationBase%2A>, they are ignored.\n  syntax:\n    content: public string PrivateBinPath { get; set; }\n    return:\n      type: System.String\n      description: A list of directory names separated by semicolons.\n  overload: System.AppDomainSetup.PrivateBinPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.PrivateBinPathProbe\n  id: PrivateBinPathProbe\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: PrivateBinPathProbe\n  nameWithType: AppDomainSetup.PrivateBinPathProbe\n  fullName: System.AppDomainSetup.PrivateBinPathProbe\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a string value that includes or excludes <xref:System.AppDomainSetup.ApplicationBase*> from the search path for the application, and searches only <xref:System.AppDomainSetup.PrivateBinPath*>.\n  remarks: Set this property to any non-null string value, including <xref:System.String?displayProperty=fullName> (\"\"), to exclude the application directory path — that is, <xref:System.AppDomainSetup.ApplicationBase%2A> — from the search path for the application, and to search for assemblies only in <xref:System.AppDomainSetup.PrivateBinPath%2A>.\n  syntax:\n    content: public string PrivateBinPathProbe { get; set; }\n    return:\n      type: System.String\n      description: A null reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path. The default value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.AppDomainSetup.PrivateBinPathProbe*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.SandboxInterop\n  id: SandboxInterop\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: SandboxInterop\n  nameWithType: AppDomainSetup.SandboxInterop\n  fullName: System.AppDomainSetup.SandboxInterop\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a `QueryInterface` is performed on each call.\n  remarks: \"Disabling interface caching has a significant impact on the performance of interop calls.  \\n  \\n This member is introduced in the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)].\"\n  syntax:\n    content: public bool SandboxInterop { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if interface caching is disabled for interop calls in application domains created with the current <xref href=\"System.AppDomainSetup\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.AppDomainSetup.SandboxInterop*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})\n  id: SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: SetCompatibilitySwitches(IEnumerable<String>)\n  nameWithType: AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)\n  fullName: System.AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.\n  remarks: \"Major versions of the .NET Framework sometimes introduce breaking changes from the previous version. For example, the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)] introduces a small number of breaking changes from the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]. Use the SetCompatibilitySwitches method to specify that one or more of these breaking changes should be rolled back for the application domain, to make the behavior compatible with the previous version of the .NET Framework.  \\n  \\n Each time you call this method, it replaces the existing switch settings. To erase the settings, specify `null` for the `switches` parameter.  \\n  \\n The set of string values you provide for `switches` can be a simple string array, because arrays implement the <xref:System.Collections.IEnumerable> interface.  \\n  \\n The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.  \\n  \\n|Switch|Meaning|  \\n|------------|-------------|  \\n|\\\"NetFx40_LegacySecurityPolicy\\\"|Code access security (CAS) for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] is enabled in this application domain. See [\\\\&lt;NetFx40_LegacySecurityPolicy\\\\&gt; Element](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md).|  \\n|\\\"NetFx40_Legacy20SortingBehavior\\\"|String sorting defaults for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] are enabled in this application domain. Successfully restoring legacy sorting behavior also requires the sort00001000.dll dynamic link library to be available on the local system. See [\\\\&lt;CompatSortNLSVersion\\\\&gt; Element](../Topic/%3CCompatSortNLSVersion%3E%20Element.md).|  \\n|\\\"NetFx40_Legacy40SortingBehavior\\\"|String sorting defaults for the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] and Unicode 5.0 are enabled in this application domain. Successfully restoring legacy sorting behavior also requires the sort00060101.dll dynamic link library to be available on the local system.|  \\n|\\\"NetFx40_TimeSpanLegacyFormatMode\\\"|<xref:System.TimeSpan> formatting behavior for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] is enabled in this application domain. See [\\\\&lt;TimeSpan_LegacyFormatMode\\\\&gt; Element](../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md) and the \\\"Restoring Legacy TimeSpan Formatting\\\" section of the <xref:System.TimeSpan> topic.|  \\n|\\\"UseRandomizedStringHashAlgorithm\\\"|The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains. See [\\\\&lt;UseRandomizedStringHashAlgorithm\\\\&gt; Element](../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md).|\"\n  syntax:\n    content: public void SetCompatibilitySwitches (System.Collections.Generic.IEnumerable<string> switches);\n    parameters:\n    - id: switches\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: An enumerable set of string values that specify compatibility switches, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to erase the existing compatibility switches.\n  overload: System.AppDomainSetup.SetCompatibilitySwitches*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.SetConfigurationBytes(System.Byte[])\n  id: SetConfigurationBytes(System.Byte[])\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: SetConfigurationBytes(Byte[])\n  nameWithType: AppDomainSetup.SetConfigurationBytes(Byte[])\n  fullName: System.AppDomainSetup.SetConfigurationBytes(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Provides XML configuration information for the application domain, replacing the application's XML configuration information.\n  remarks: \"The SetConfigurationBytes method provides a way to replace the configuration information of an application that creates a new application domain. The configuration file information in `value`replaces the configuration file information for the application. For example, when the Example.exe application creates a new application domain, it can replace the configuration information originally obtained from the Example.exe.config file.  \\n  \\n> [!IMPORTANT]\\n>  Some consumers of configuration file information do not use the information stored by the SetConfigurationBytes method. The runtime does not enforce this. To ensure that all configuration file information is replaced in a new application domain, use the <xref:System.AppDomainSetup.ConfigurationFile%2A> property to specify a configuration file. The SetConfigurationBytes method does affect assembly binding.  \\n  \\n The XML in `value` is the same as the XML in a normal configuration file, except that it is stored as a <xref:System.Byte> array.\"\n  syntax:\n    content: public void SetConfigurationBytes (byte[] value);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array that contains the XML configuration information to be used for the application domain.\n  overload: System.AppDomainSetup.SetConfigurationBytes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)\n  id: SetNativeFunction(System.String,System.Int32,System.IntPtr)\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: SetNativeFunction(String,Int32,IntPtr)\n  nameWithType: AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)\n  fullName: System.AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Provides the common language runtime with an alternate implementation of a string comparison function.\n  remarks: \"The following string comparison and sorting methods can be overridden by the SetNativeFunction method:  \\n  \\n-   `IsNLSDefinedString`  \\n  \\n-   `CompareStringEx`  \\n  \\n-   `LCMapStringEx`  \\n  \\n-   `FindNLSStringEx`  \\n  \\n-   `CompareStringOrdinal`  \\n  \\n-   `GetNLSVersion`  \\n  \\n For information about these functions, see [National Language Support Functions](http://go.microsoft.com/fwlink/?LinkId=228134).\"\n  syntax:\n    content: public void SetNativeFunction (string functionName, int functionVersion, IntPtr functionPointer);\n    parameters:\n    - id: functionName\n      type: System.String\n      description: The name of the string comparison function to override.\n    - id: functionVersion\n      type: System.Int32\n      description: The function version. For [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)], its value must be 1 or greater.\n    - id: functionPointer\n      type: System.IntPtr\n      description: A pointer to the function that overrides `functionName`.\n  overload: System.AppDomainSetup.SetNativeFunction*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>functionName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>functionVersion</code> is not 1 or greater.  \\n  \\n -or-  \\n  \\n <code>functionPointer</code> is &lt;xref:System.IntPtr?displayProperty=fullName&gt;.\"\n  platform:\n  - net462\n- uid: System.AppDomainSetup.ShadowCopyDirectories\n  id: ShadowCopyDirectories\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: ShadowCopyDirectories\n  nameWithType: AppDomainSetup.ShadowCopyDirectories\n  fullName: System.AppDomainSetup.ShadowCopyDirectories\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets the names of the directories containing assemblies to be shadow copied.\n  remarks: \"When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the <xref:System.AppDomainSetup.PrivateBinPath%2A> and <xref:System.AppDomainSetup.ApplicationBase%2A> properties. The ShadowCopyDirectories property restricts the shadow copy to the assemblies in the directories specified by ShadowCopyDirectories.  \\n  \\n If you don’t assign a string to the ShadowCopyDirectories property, or if you set this property to `null`, all assemblies in the directories specified by the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> properties are shadow copied.  \\n  \\n> [!IMPORTANT]\\n>  Directory paths must not contain semicolons, because the semicolon is the delimiter character. There is no escape character for semicolons.  \\n  \\n When shadow copying is in effect, assembly files are copied to another location before the assemblies are loaded. The original assembly file is not locked, so it can be updated. For more information on shadow copying, see [Shadow Copying Assemblies](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public string ShadowCopyDirectories { get; set; }\n    return:\n      type: System.String\n      description: A list of directory names separated by semicolons.\n  overload: System.AppDomainSetup.ShadowCopyDirectories*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.ShadowCopyFiles\n  id: ShadowCopyFiles\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: ShadowCopyFiles\n  nameWithType: AppDomainSetup.ShadowCopyFiles\n  fullName: System.AppDomainSetup.ShadowCopyFiles\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a string that indicates whether shadow copying is turned on or off.\n  remarks: For more information on shadow copying, see [Shadow Copying Assemblies](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public string ShadowCopyFiles { get; set; }\n    return:\n      type: System.String\n      description: The string value \"true\" to indicate that shadow copying is turned on; or \"false\" to indicate that shadow copying is turned off.\n  overload: System.AppDomainSetup.ShadowCopyFiles*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AppDomainSetup.TargetFrameworkName\n  id: TargetFrameworkName\n  parent: System.AppDomainSetup\n  langs:\n  - csharp\n  name: TargetFrameworkName\n  nameWithType: AppDomainSetup.TargetFrameworkName\n  fullName: System.AppDomainSetup.TargetFrameworkName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the &lt;xref:System.Runtime.Versioning.FrameworkName.%23ctor%28System.String%29?displayProperty=fullName&gt; constructor.\n  remarks: \"Set this property to tell the currently running version of the .NET Framework that the application domain will be used to load and run assemblies that have been compiled for the target version and profile. If the currently running version of the .NET Framework has optional behaviors that affect the compatibility of code that was compiled with the target version, it can enable or disable those behaviors, as appropriate, to improve compatibility. This can be useful when an application supports add-ins compiled with multiple versions of the .NET Framework by running them in separate application domains.  \\n  \\n For client applications, the value of the TargetFrameworkName property is inferred from the <xref:System.Runtime.Versioning.TargetFrameworkAttribute> attribute. In [!INCLUDE[vs_dev10_long](~/add/includes/vs-dev10-long-md.md)] and later, this attribute is added to the assembly automatically based on the setting of the project's **Target Framework** property.\"\n  syntax:\n    content: public string TargetFrameworkName { get; set; }\n    return:\n      type: System.String\n      description: The target version and profile of the .NET Framework.\n  overload: System.AppDomainSetup.TargetFrameworkName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.MemberAccessException\n  isExternal: true\n  name: System.MemberAccessException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.AppDomainSetup.#ctor\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainSetup()\n  nameWithType: AppDomainSetup.AppDomainSetup()\n  fullName: System.AppDomainSetup.AppDomainSetup()\n- uid: System.AppDomainSetup.#ctor(System.ActivationContext)\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainSetup(ActivationContext)\n  nameWithType: AppDomainSetup.AppDomainSetup(ActivationContext)\n  fullName: System.AppDomainSetup.AppDomainSetup(ActivationContext)\n- uid: System.ActivationContext\n  parent: System\n  isExternal: false\n  name: ActivationContext\n  nameWithType: ActivationContext\n  fullName: System.ActivationContext\n- uid: System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainSetup(ActivationArguments)\n  nameWithType: AppDomainSetup.AppDomainSetup(ActivationArguments)\n  fullName: System.AppDomainSetup.AppDomainSetup(ActivationArguments)\n- uid: System.Runtime.Hosting.ActivationArguments\n  parent: System.Runtime.Hosting\n  isExternal: false\n  name: ActivationArguments\n  nameWithType: ActivationArguments\n  fullName: System.Runtime.Hosting.ActivationArguments\n- uid: System.AppDomainSetup.ActivationArguments\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ActivationArguments\n  nameWithType: AppDomainSetup.ActivationArguments\n  fullName: System.AppDomainSetup.ActivationArguments\n- uid: System.AppDomainSetup.AppDomainInitializer\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainInitializer\n  nameWithType: AppDomainSetup.AppDomainInitializer\n  fullName: System.AppDomainSetup.AppDomainInitializer\n- uid: System.AppDomainInitializer\n  parent: System\n  isExternal: false\n  name: AppDomainInitializer\n  nameWithType: AppDomainInitializer\n  fullName: System.AppDomainInitializer\n- uid: System.AppDomainSetup.AppDomainInitializerArguments\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainInitializerArguments\n  nameWithType: AppDomainSetup.AppDomainInitializerArguments\n  fullName: System.AppDomainSetup.AppDomainInitializerArguments\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.AppDomainSetup.AppDomainManagerAssembly\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainManagerAssembly\n  nameWithType: AppDomainSetup.AppDomainManagerAssembly\n  fullName: System.AppDomainSetup.AppDomainManagerAssembly\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.AppDomainSetup.AppDomainManagerType\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainManagerType\n  nameWithType: AppDomainSetup.AppDomainManagerType\n  fullName: System.AppDomainSetup.AppDomainManagerType\n- uid: System.AppDomainSetup.ApplicationBase\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ApplicationBase\n  nameWithType: AppDomainSetup.ApplicationBase\n  fullName: System.AppDomainSetup.ApplicationBase\n- uid: System.AppDomainSetup.ApplicationName\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ApplicationName\n  nameWithType: AppDomainSetup.ApplicationName\n  fullName: System.AppDomainSetup.ApplicationName\n- uid: System.AppDomainSetup.ApplicationTrust\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ApplicationTrust\n  nameWithType: AppDomainSetup.ApplicationTrust\n  fullName: System.AppDomainSetup.ApplicationTrust\n- uid: System.Security.Policy.ApplicationTrust\n  parent: System.Security.Policy\n  isExternal: false\n  name: ApplicationTrust\n  nameWithType: ApplicationTrust\n  fullName: System.Security.Policy.ApplicationTrust\n- uid: System.AppDomainSetup.CachePath\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: CachePath\n  nameWithType: AppDomainSetup.CachePath\n  fullName: System.AppDomainSetup.CachePath\n- uid: System.AppDomainSetup.ConfigurationFile\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ConfigurationFile\n  nameWithType: AppDomainSetup.ConfigurationFile\n  fullName: System.AppDomainSetup.ConfigurationFile\n- uid: System.AppDomainSetup.DisallowApplicationBaseProbing\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DisallowApplicationBaseProbing\n  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing\n  fullName: System.AppDomainSetup.DisallowApplicationBaseProbing\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.AppDomainSetup.DisallowBindingRedirects\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DisallowBindingRedirects\n  nameWithType: AppDomainSetup.DisallowBindingRedirects\n  fullName: System.AppDomainSetup.DisallowBindingRedirects\n- uid: System.AppDomainSetup.DisallowCodeDownload\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DisallowCodeDownload\n  nameWithType: AppDomainSetup.DisallowCodeDownload\n  fullName: System.AppDomainSetup.DisallowCodeDownload\n- uid: System.AppDomainSetup.DisallowPublisherPolicy\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DisallowPublisherPolicy\n  nameWithType: AppDomainSetup.DisallowPublisherPolicy\n  fullName: System.AppDomainSetup.DisallowPublisherPolicy\n- uid: System.AppDomainSetup.DynamicBase\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DynamicBase\n  nameWithType: AppDomainSetup.DynamicBase\n  fullName: System.AppDomainSetup.DynamicBase\n- uid: System.AppDomainSetup.GetConfigurationBytes\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: GetConfigurationBytes()\n  nameWithType: AppDomainSetup.GetConfigurationBytes()\n  fullName: System.AppDomainSetup.GetConfigurationBytes()\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.AppDomainSetup.LicenseFile\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: LicenseFile\n  nameWithType: AppDomainSetup.LicenseFile\n  fullName: System.AppDomainSetup.LicenseFile\n- uid: System.AppDomainSetup.LoaderOptimization\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: LoaderOptimization\n  nameWithType: AppDomainSetup.LoaderOptimization\n  fullName: System.AppDomainSetup.LoaderOptimization\n- uid: System.LoaderOptimization\n  parent: System\n  isExternal: false\n  name: LoaderOptimization\n  nameWithType: LoaderOptimization\n  fullName: System.LoaderOptimization\n- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: PartialTrustVisibleAssemblies\n  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies\n  fullName: System.AppDomainSetup.PartialTrustVisibleAssemblies\n- uid: System.AppDomainSetup.PrivateBinPath\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: PrivateBinPath\n  nameWithType: AppDomainSetup.PrivateBinPath\n  fullName: System.AppDomainSetup.PrivateBinPath\n- uid: System.AppDomainSetup.PrivateBinPathProbe\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: PrivateBinPathProbe\n  nameWithType: AppDomainSetup.PrivateBinPathProbe\n  fullName: System.AppDomainSetup.PrivateBinPathProbe\n- uid: System.AppDomainSetup.SandboxInterop\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: SandboxInterop\n  nameWithType: AppDomainSetup.SandboxInterop\n  fullName: System.AppDomainSetup.SandboxInterop\n- uid: System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: SetCompatibilitySwitches(IEnumerable<String>)\n  nameWithType: AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)\n  fullName: System.AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<String>\n  nameWithType: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.AppDomainSetup.SetConfigurationBytes(System.Byte[])\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: SetConfigurationBytes(Byte[])\n  nameWithType: AppDomainSetup.SetConfigurationBytes(Byte[])\n  fullName: System.AppDomainSetup.SetConfigurationBytes(Byte[])\n- uid: System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: SetNativeFunction(String,Int32,IntPtr)\n  nameWithType: AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)\n  fullName: System.AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.AppDomainSetup.ShadowCopyDirectories\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ShadowCopyDirectories\n  nameWithType: AppDomainSetup.ShadowCopyDirectories\n  fullName: System.AppDomainSetup.ShadowCopyDirectories\n- uid: System.AppDomainSetup.ShadowCopyFiles\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ShadowCopyFiles\n  nameWithType: AppDomainSetup.ShadowCopyFiles\n  fullName: System.AppDomainSetup.ShadowCopyFiles\n- uid: System.AppDomainSetup.TargetFrameworkName\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: TargetFrameworkName\n  nameWithType: AppDomainSetup.TargetFrameworkName\n  fullName: System.AppDomainSetup.TargetFrameworkName\n- uid: System.AppDomainSetup.#ctor*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainSetup\n  nameWithType: AppDomainSetup.AppDomainSetup\n- uid: System.AppDomainSetup.ActivationArguments*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ActivationArguments\n  nameWithType: AppDomainSetup.ActivationArguments\n- uid: System.AppDomainSetup.AppDomainInitializer*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainInitializer\n  nameWithType: AppDomainSetup.AppDomainInitializer\n- uid: System.AppDomainSetup.AppDomainInitializerArguments*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainInitializerArguments\n  nameWithType: AppDomainSetup.AppDomainInitializerArguments\n- uid: System.AppDomainSetup.AppDomainManagerAssembly*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainManagerAssembly\n  nameWithType: AppDomainSetup.AppDomainManagerAssembly\n- uid: System.AppDomainSetup.AppDomainManagerType*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: AppDomainManagerType\n  nameWithType: AppDomainSetup.AppDomainManagerType\n- uid: System.AppDomainSetup.ApplicationBase*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ApplicationBase\n  nameWithType: AppDomainSetup.ApplicationBase\n- uid: System.AppDomainSetup.ApplicationName*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ApplicationName\n  nameWithType: AppDomainSetup.ApplicationName\n- uid: System.AppDomainSetup.ApplicationTrust*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ApplicationTrust\n  nameWithType: AppDomainSetup.ApplicationTrust\n- uid: System.AppDomainSetup.CachePath*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: CachePath\n  nameWithType: AppDomainSetup.CachePath\n- uid: System.AppDomainSetup.ConfigurationFile*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ConfigurationFile\n  nameWithType: AppDomainSetup.ConfigurationFile\n- uid: System.AppDomainSetup.DisallowApplicationBaseProbing*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DisallowApplicationBaseProbing\n  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing\n- uid: System.AppDomainSetup.DisallowBindingRedirects*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DisallowBindingRedirects\n  nameWithType: AppDomainSetup.DisallowBindingRedirects\n- uid: System.AppDomainSetup.DisallowCodeDownload*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DisallowCodeDownload\n  nameWithType: AppDomainSetup.DisallowCodeDownload\n- uid: System.AppDomainSetup.DisallowPublisherPolicy*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DisallowPublisherPolicy\n  nameWithType: AppDomainSetup.DisallowPublisherPolicy\n- uid: System.AppDomainSetup.DynamicBase*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: DynamicBase\n  nameWithType: AppDomainSetup.DynamicBase\n- uid: System.AppDomainSetup.GetConfigurationBytes*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: GetConfigurationBytes\n  nameWithType: AppDomainSetup.GetConfigurationBytes\n- uid: System.AppDomainSetup.LicenseFile*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: LicenseFile\n  nameWithType: AppDomainSetup.LicenseFile\n- uid: System.AppDomainSetup.LoaderOptimization*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: LoaderOptimization\n  nameWithType: AppDomainSetup.LoaderOptimization\n- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: PartialTrustVisibleAssemblies\n  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies\n- uid: System.AppDomainSetup.PrivateBinPath*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: PrivateBinPath\n  nameWithType: AppDomainSetup.PrivateBinPath\n- uid: System.AppDomainSetup.PrivateBinPathProbe*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: PrivateBinPathProbe\n  nameWithType: AppDomainSetup.PrivateBinPathProbe\n- uid: System.AppDomainSetup.SandboxInterop*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: SandboxInterop\n  nameWithType: AppDomainSetup.SandboxInterop\n- uid: System.AppDomainSetup.SetCompatibilitySwitches*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: SetCompatibilitySwitches\n  nameWithType: AppDomainSetup.SetCompatibilitySwitches\n- uid: System.AppDomainSetup.SetConfigurationBytes*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: SetConfigurationBytes\n  nameWithType: AppDomainSetup.SetConfigurationBytes\n- uid: System.AppDomainSetup.SetNativeFunction*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: SetNativeFunction\n  nameWithType: AppDomainSetup.SetNativeFunction\n- uid: System.AppDomainSetup.ShadowCopyDirectories*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ShadowCopyDirectories\n  nameWithType: AppDomainSetup.ShadowCopyDirectories\n- uid: System.AppDomainSetup.ShadowCopyFiles*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: ShadowCopyFiles\n  nameWithType: AppDomainSetup.ShadowCopyFiles\n- uid: System.AppDomainSetup.TargetFrameworkName*\n  parent: System.AppDomainSetup\n  isExternal: false\n  name: TargetFrameworkName\n  nameWithType: AppDomainSetup.TargetFrameworkName\n"}