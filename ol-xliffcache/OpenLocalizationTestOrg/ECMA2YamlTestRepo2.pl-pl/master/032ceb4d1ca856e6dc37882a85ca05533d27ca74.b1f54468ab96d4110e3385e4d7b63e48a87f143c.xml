{"nodes":[{"pos":[2113,2223],"content":"Represents an SQL statement or stored procedure to execute against a database. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an SQL statement or stored procedure to execute against a database. This class cannot be inherited.","pos":[0,110],"nodes":[{"content":"Represents an SQL statement or stored procedure to execute against a database.","pos":[0,78]},{"content":"This class cannot be inherited.","pos":[79,110]}]}]},{"pos":[2236,4078],"content":"This type is deprecated and will be removed in a future version of the .NET Framework. For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md).       The OracleCommand class provides the following methods for executing commands against a data source:      |Item|Description|   |----------|-----------------|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>|Executes commands that return rows.|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A>|Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection%2A> and returns the number of rows affected.|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>|Executes commands such as SQL INSERT, DELETE, UPDATE, and SET statements.|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A>|Retrieves a single value (for example, an aggregate value) from a database as a .NET Framework data type.|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A>|Retrieves a single value (for example, an aggregate value) from a database as an Oracle-specific data type.|       You can reset the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property and reuse the OracleCommand object.       If execution of the command results in a fatal <xref:System.Data.OracleClient.OracleException>, the <xref:System.Data.OracleClient.OracleConnection> may close. However, the user can reopen the connection and continue.      > [!NOTE] >  Unlike the **Command** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), the OracleCommand object does not support a <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> property. Setting a command timeout has no effect and the value returned is always zero.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This type is deprecated and will be removed in a future version of the .NET Framework.","pos":[0,86]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Oracle and ADO.NET<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[87,173],"source":" For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md)."},{"content":"The OracleCommand class provides the following methods for executing commands against a data source:      |Item|Description|   |----------|-----------------|   |&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;|Executes commands that return rows.|   |&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A&gt;|Executes an SQL statement against the &lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt; and returns the number of rows affected.|   |&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A&gt;|Executes commands such as SQL INSERT, DELETE, UPDATE, and SET statements.|   |&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A&gt;|Retrieves a single value (for example, an aggregate value) from a database as a .NET Framework data type.|   |&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A&gt;|Retrieves a single value (for example, an aggregate value) from a database as an Oracle-specific data type.|       You can reset the &lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt; property and reuse the OracleCommand object.","pos":[180,1281],"source":"       The OracleCommand class provides the following methods for executing commands against a data source:      |Item|Description|   |----------|-----------------|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>|Executes commands that return rows.|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A>|Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection%2A> and returns the number of rows affected.|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>|Executes commands such as SQL INSERT, DELETE, UPDATE, and SET statements.|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A>|Retrieves a single value (for example, an aggregate value) from a database as a .NET Framework data type.|   |<xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A>|Retrieves a single value (for example, an aggregate value) from a database as an Oracle-specific data type.|       You can reset the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property and reuse the OracleCommand object."},{"content":"If execution of the command results in a fatal &lt;xref:System.Data.OracleClient.OracleException&gt;, the &lt;xref:System.Data.OracleClient.OracleConnection&gt; may close.","pos":[1288,1447],"source":"       If execution of the command results in a fatal <xref:System.Data.OracleClient.OracleException>, the <xref:System.Data.OracleClient.OracleConnection> may close."},{"content":"However, the user can reopen the connection and continue.","pos":[1448,1505]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Unlike the <bpt id=\"p1\">**</bpt>Command<ept id=\"p1\">**</ept> object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), the OracleCommand object does not support a &lt;xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A&gt; property.","pos":[1511,1746],"source":"      > [!NOTE] >  Unlike the **Command** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), the OracleCommand object does not support a <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> property."},{"content":"Setting a command timeout has no effect and the value returned is always zero.","pos":[1747,1825]}]},{"pos":[7585,7679],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref>."},{"pos":[7692,8181],"content":"The base constructor initializes all fields to their default values. The following table shows initial property values for an instance of <xref:System.Data.OracleClient.OracleCommand>.      |Properties|Initial Value|   |----------------|-------------------|   |<xref:System.Data.OracleClient.OracleCommand.CommandText%2A>|empty string (\"\")|   |<xref:System.Data.OracleClient.OracleCommand.CommandType%2A>|`Text`|   |<xref:System.Data.OracleClient.OracleCommand.Connection%2A>|null|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The base constructor initializes all fields to their default values.","pos":[0,68]},{"content":"The following table shows initial property values for an instance of &lt;xref:System.Data.OracleClient.OracleCommand&gt;.","pos":[69,184],"source":" The following table shows initial property values for an instance of <xref:System.Data.OracleClient.OracleCommand>."},{"content":"|Properties|Initial Value|   |----------------|-------------------|   |&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;|empty string (\"\")|   |&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;|<ph id=\"ph1\">`Text`</ph>|   |&lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;|null|","pos":[190,481],"source":"      |Properties|Initial Value|   |----------------|-------------------|   |<xref:System.Data.OracleClient.OracleCommand.CommandText%2A>|empty string (\"\")|   |<xref:System.Data.OracleClient.OracleCommand.CommandType%2A>|`Text`|   |<xref:System.Data.OracleClient.OracleCommand.Connection%2A>|null|"}]},{"pos":[9158,9285],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the text of the query.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> class with the text of the query."},{"pos":[9435,9457],"content":"The text of the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text of the query.","pos":[0,22]}]},{"pos":[10123,10327],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the text of the query and an <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> class with the text of the query and an <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> object."},{"pos":[10887,10909],"content":"The text of the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text of the query.","pos":[0,22]}]},{"pos":[11004,11122],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the connection to a database.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> object that represents the connection to a database."},{"pos":[11928,12201],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the text of the query, an <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object, and an <bpt id=\"p3\">&lt;xref href=\"System.Data.OracleClient.OracleTransaction\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> class with the text of the query, an <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> object, and an <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref>."},{"pos":[12214,12845],"content":"The following table shows initial property values for an instance of this implementation of the <xref:System.Data.OracleClient.OracleCommand>.      |Properties|Initial Value|   |----------------|-------------------|   |<xref:System.Data.OracleClient.OracleCommand.CommandText%2A>|`cmdText`|   |<xref:System.Data.OracleClient.OracleCommand.CommandType%2A>|`Text`|   |<xref:System.Data.OracleClient.OracleCommand.Connection%2A>|A new <xref:System.Data.OracleClient.OracleConnection> that is the value for the `connection` parameter.|       You can change the value for any of these parameters by setting the related property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following table shows initial property values for an instance of this implementation of the &lt;xref:System.Data.OracleClient.OracleCommand&gt;.","pos":[0,142],"source":"The following table shows initial property values for an instance of this implementation of the <xref:System.Data.OracleClient.OracleCommand>."},{"content":"|Properties|Initial Value|   |----------------|-------------------|   |&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;|<ph id=\"ph1\">`cmdText`</ph>|   |&lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;|<ph id=\"ph2\">`Text`</ph>|   |&lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;|A new &lt;xref:System.Data.OracleClient.OracleConnection&gt; that is the value for the <ph id=\"ph3\">`connection`</ph> parameter.|       You can change the value for any of these parameters by setting the related property.","pos":[148,623],"source":"      |Properties|Initial Value|   |----------------|-------------------|   |<xref:System.Data.OracleClient.OracleCommand.CommandText%2A>|`cmdText`|   |<xref:System.Data.OracleClient.OracleCommand.CommandType%2A>|`Text`|   |<xref:System.Data.OracleClient.OracleCommand.Connection%2A>|A new <xref:System.Data.OracleClient.OracleConnection> that is the value for the `connection` parameter.|       You can change the value for any of these parameters by setting the related property."}]},{"pos":[13471,13493],"content":"The text of the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text of the query.","pos":[0,22]}]},{"pos":[13588,13706],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the connection to a database.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> object that represents the connection to a database."},{"pos":[13794,13944],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleTransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which the <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> executes.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref> in which the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> executes."},{"pos":[14401,14500],"content":"Attempts to cancel the execution of an <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Attempts to cancel the execution of an <xref href=\"System.Data.OracleClient.OracleCommand\"></xref>."},{"pos":[14512,14662],"content":"If there is nothing to cancel, nothing happens. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If there is nothing to cancel, nothing happens. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.","pos":[0,150],"nodes":[{"content":"If there is nothing to cancel, nothing happens.","pos":[0,47]},{"content":"However, if there is a command in process, and the attempt to cancel fails, no exception is generated.","pos":[48,150]}]}]},{"pos":[15690,15780],"content":"Creates a copy of this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Creates a copy of this <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> object."},{"pos":[15904,16035],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object in which all property values are the same as the original.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> object in which all property values are the same as the original."},{"pos":[16513,16596],"content":"Gets or sets the SQL statement or stored procedure to execute against the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the SQL statement or stored procedure to execute against the database.","pos":[0,83]}]},{"pos":[16609,17935],"content":"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the CommandText property should be set to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command executes this stored procedure when you call one of the Execute methods.       The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`. In this case, named parameters must be used. For example:      ```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```       When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:). However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> property), do not precede the named parameter with a colon (:). The .NET Framework Data Provider for Oracle supplies the colon automatically.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the &lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt; property is set to <ph id=\"ph1\">`StoredProcedure`</ph>, the CommandText property should be set to the name of the stored procedure.","pos":[0,183],"source":"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the CommandText property should be set to the name of the stored procedure."},{"content":"The user may be required to use escape character syntax if the stored procedure name contains any special characters.","pos":[184,301]},{"content":"The command executes this stored procedure when you call one of the Execute methods.","pos":[302,386]},{"content":"The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an &lt;xref:System.Data.OracleClient.OracleCommand&gt; of <ph id=\"ph1\">`CommandType.Text`</ph>.","pos":[393,612],"source":"       The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`."},{"content":"In this case, named parameters must be used.","pos":[613,657]},{"content":"For example:      <ph id=\"ph1\">```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```</ph>       When using named parameters in an SQL statement called by an &lt;xref:System.Data.OracleClient.OracleCommand&gt; of <ph id=\"ph2\">`CommandType.Text`</ph>, you must precede the parameter name with a colon (:).","pos":[658,933],"source":" For example:      ```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```       When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:)."},{"content":"However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding &lt;xref:System.Data.OracleClient.OracleParameter&gt; objects to the &lt;xref:System.Data.OracleClient.OracleCommand.Parameters%2A&gt; property), do not precede the named parameter with a colon (:).","pos":[934,1240],"source":" However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> property), do not precede the named parameter with a colon (:)."},{"content":"The .NET Framework Data Provider for Oracle supplies the colon automatically.","pos":[1241,1318]}]},{"pos":[18440,18532],"content":"The SQL statement or stored procedure to execute. The default value is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The SQL statement or stored procedure to execute. The default value is an empty string (\"\").","pos":[0,92],"nodes":[{"content":"The SQL statement or stored procedure to execute.","pos":[0,49]},{"content":"The default value is an empty string (\"\").","pos":[50,92]}]}]},{"pos":[19031,19134],"content":"Gets or sets the wait time before terminating the attempt to execute a command and generating an error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the wait time before terminating the attempt to execute a command and generating an error.","pos":[0,103]}]},{"pos":[19146,19255],"content":"An <xref:System.ArgumentException> is generated if the assigned CommandTimeout property value is less than 0.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An &lt;xref:System.ArgumentException&gt; is generated if the assigned CommandTimeout property value is less than 0.","pos":[0,109],"source":"An <xref:System.ArgumentException> is generated if the assigned CommandTimeout property value is less than 0."}]},{"pos":[19384,19474],"content":"The time (in seconds) to wait for the command to execute. The default value is 30 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time (in seconds) to wait for the command to execute. The default value is 30 seconds.","pos":[0,90],"nodes":[{"content":"The time (in seconds) to wait for the command to execute.","pos":[0,57]},{"content":"The default value is 30 seconds.","pos":[58,90]}]}]},{"pos":[19961,20084],"content":"Gets or sets a value indicating how the <xref:System.Data.OracleClient.OracleCommand.CommandText*> property is interpreted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating how the &lt;xref:System.Data.OracleClient.OracleCommand.CommandText*&gt; property is interpreted.","pos":[0,123],"source":"Gets or sets a value indicating how the <xref:System.Data.OracleClient.OracleCommand.CommandText*> property is interpreted."}]},{"pos":[20097,21698],"content":"When the CommandType property is set to `StoredProcedure`, you should set the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property to the full Oracle call syntax. The command then executes this stored procedure when you call one of the Execute methods (for example, <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> or <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>).       The <xref:System.Data.OracleClient.OracleCommand.Connection%2A>, CommandType and <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> properties cannot be set if the current connection is performing an execute or fetch operation.       The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`. In this case, named parameters must be used. For example:      ```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```       When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:). However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> property), do not precede the named parameter with a colon (:). The .NET Framework Data Provider for Oracle supplies the colon automatically.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the CommandType property is set to <ph id=\"ph1\">`StoredProcedure`</ph>, you should set the &lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt; property to the full Oracle call syntax.","pos":[0,179],"source":"When the CommandType property is set to `StoredProcedure`, you should set the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property to the full Oracle call syntax."},{"content":"The command then executes this stored procedure when you call one of the Execute methods (for example, &lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt; or &lt;xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A&gt;).","pos":[180,415],"source":" The command then executes this stored procedure when you call one of the Execute methods (for example, <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> or <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>)."},{"content":"The &lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;, CommandType and &lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt; properties cannot be set if the current connection is performing an execute or fetch operation.","pos":[422,659],"source":"       The <xref:System.Data.OracleClient.OracleCommand.Connection%2A>, CommandType and <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> properties cannot be set if the current connection is performing an execute or fetch operation."},{"content":"The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an &lt;xref:System.Data.OracleClient.OracleCommand&gt; of <ph id=\"ph1\">`CommandType.Text`</ph>.","pos":[666,885],"source":"       The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`."},{"content":"In this case, named parameters must be used.","pos":[886,930]},{"content":"For example:      <ph id=\"ph1\">```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```</ph>       When using named parameters in an SQL statement called by an &lt;xref:System.Data.OracleClient.OracleCommand&gt; of <ph id=\"ph2\">`CommandType.Text`</ph>, you must precede the parameter name with a colon (:).","pos":[931,1206],"source":" For example:      ```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```       When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:)."},{"content":"However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding &lt;xref:System.Data.OracleClient.OracleParameter&gt; objects to the &lt;xref:System.Data.OracleClient.OracleCommand.Parameters%2A&gt; property), do not precede the named parameter with a colon (:).","pos":[1207,1513],"source":" However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> property), do not precede the named parameter with a colon (:)."},{"content":"The .NET Framework Data Provider for Oracle supplies the colon automatically.","pos":[1514,1591]}]},{"pos":[22256,22396],"content":"One of the <xref href=\"System.Data.CommandType\"></xref> values. The default is <xref uid=\"langword_csharp_Text\" name=\"Text\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,63],"source":"One of the <xref href=\"System.Data.CommandType\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Text\" name=\"Text\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[64,140],"source":" The default is <xref uid=\"langword_csharp_Text\" name=\"Text\" href=\"\"></xref>."}]},{"pos":[22569,22640],"content":"The value was not a valid <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value was not a valid <xref href=\"System.Data.CommandType\"></xref>."},{"pos":[23038,23207],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used by this instance of the <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> used by this instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref>."},{"pos":[23220,23945],"content":"You cannot set the Connection, <xref:System.Data.OracleClient.OracleCommand.CommandType%2A>, and <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> properties if the current connection is performing an execute or fetch operation.       If you set Connection while a transaction is in progress and the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is not null, an <xref:System.InvalidOperationException> is generated. If you set Connection after the transaction has been committed or rolled back, and the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is not null, the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is then set to a null value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You cannot set the Connection, <xref:System.Data.OracleClient.OracleCommand.CommandType%2A>, and <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> properties if the current connection is performing an execute or fetch operation.       If you set Connection while a transaction is in progress and the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is not null, an <xref:System.InvalidOperationException> is generated. If you set Connection after the transaction has been committed or rolled back, and the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is not null, the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is then set to a null value.","pos":[0,723],"nodes":[{"content":"You cannot set the Connection, &lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt;, and &lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt; properties if the current connection is performing an execute or fetch operation.","pos":[0,239],"source":"You cannot set the Connection, <xref:System.Data.OracleClient.OracleCommand.CommandType%2A>, and <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> properties if the current connection is performing an execute or fetch operation."},{"content":"If you set Connection while a transaction is in progress and the &lt;xref:System.Data.OracleClient.OracleCommand.Transaction%2A&gt; property is not null, an &lt;xref:System.InvalidOperationException&gt; is generated.","pos":[246,450],"source":"       If you set Connection while a transaction is in progress and the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is not null, an <xref:System.InvalidOperationException> is generated."},{"content":"If you set Connection after the transaction has been committed or rolled back, and the &lt;xref:System.Data.OracleClient.OracleCommand.Transaction%2A&gt; property is not null, the &lt;xref:System.Data.OracleClient.OracleCommand.Transaction%2A&gt; property is then set to a null value.","pos":[451,723],"source":" If you set Connection after the transaction has been committed or rolled back, and the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is not null, the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is then set to a null value."}]}]},{"pos":[24501,24562],"content":"The connection to a data source. The default is a null value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection to a data source. The default is a null value.","pos":[0,61],"nodes":[{"content":"The connection to a data source.","pos":[0,32]},{"content":"The default is a null value.","pos":[33,61]}]}]},{"pos":[24750,24822],"content":"The Connection property was changed while a transaction was in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Connection property was changed while a transaction was in progress.","pos":[0,72]}]},{"pos":[25436,25448],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25962,26060],"content":"Creates a new instance of an <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Creates a new instance of an <xref href=\"System.Data.OracleClient.OracleParameter\"></xref> object."},{"pos":[26072,26179],"content":"The CreateParameter method is a strongly-typed version of <xref:System.Data.IDbCommand.CreateParameter%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The CreateParameter method is a strongly-typed version of &lt;xref:System.Data.IDbCommand.CreateParameter%2A&gt;.","pos":[0,107],"source":"The CreateParameter method is a strongly-typed version of <xref:System.Data.IDbCommand.CreateParameter%2A>."}]},{"pos":[26374,26446],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleParameter\"></xref> object."},{"pos":[27104,27116],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27838,27850],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28522,28534],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29050,29161],"content":"Gets or sets a value indicating whether the command object should be visible in a customized interface control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the command object should be visible in a customized interface control.","pos":[0,111]}]},{"pos":[29296,29562],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if the command object should be visible in a control; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if the command object should be visible in a control; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,189],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if the command object should be visible in a control; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[190,266],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[30416,30428],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[30504,30516],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31032,31168],"content":"Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection*> and returns the number of rows affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes an SQL statement against the &lt;xref:System.Data.OracleClient.OracleCommand.Connection*&gt; and returns the number of rows affected.","pos":[0,136],"source":"Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection*> and returns the number of rows affected."}]},{"pos":[31181,31903],"content":"You can use ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <xref:System.Data.DataSet>, by executing UPDATE, INSERT, or DELETE statements.       Although ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.       For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1. If a rollback occurs, the return value is also -1.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <xref:System.Data.DataSet>, by executing UPDATE, INSERT, or DELETE statements.       Although ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.       For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1. If a rollback occurs, the return value is also -1.","pos":[0,718],"nodes":[{"content":"You can use ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a &lt;xref:System.Data.DataSet&gt;, by executing UPDATE, INSERT, or DELETE statements.","pos":[0,286],"source":"You can use ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <xref:System.Data.DataSet>, by executing UPDATE, INSERT, or DELETE statements."},{"content":"Although ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.","pos":[293,428]},{"content":"For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.","pos":[435,541]},{"content":"For CREATE TABLE and DROP TABLE statements, the return value is 0.","pos":[542,608]},{"content":"For all other types of statements, the return value is -1.","pos":[609,667]},{"content":"If a rollback occurs, the return value is also -1.","pos":[668,718]}]}]},{"pos":[32577,32809],"content":"For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.","needQuote":true,"needEscape":true,"nodes":[{"content":"For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.","pos":[0,232],"nodes":[{"content":"For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.","pos":[0,106]},{"content":"For CREATE TABLE and DROP TABLE statements, the return value is 0.","pos":[107,173]},{"content":"For all other types of statements, the return value is -1.","pos":[174,232]}]}]},{"pos":[33003,33082],"content":"The connection does not exist.       -or-       The connection is not open.","needQuote":false,"needEscape":true,"nodes":[{"content":"The connection does not exist.       -or-       The connection is not open.","pos":[0,75],"nodes":[{"content":"The connection does not exist.","pos":[0,30]},{"content":"-or-       The connection is not open.","pos":[37,75]}]}]},{"pos":[33656,33792],"content":"Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection*> and returns the number of rows affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes an SQL statement against the &lt;xref:System.Data.OracleClient.OracleCommand.Connection*&gt; and returns the number of rows affected.","pos":[0,136],"source":"Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection*> and returns the number of rows affected."}]},{"pos":[33805,34638],"content":"You can use ExecuteOracleNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <xref:System.Data.DataSet>, by executing UPDATE, INSERT, or DELETE statements.       ExecuteOracleNonQuery differs from <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> in that it returns `rowid` as an output parameter if you are executing an INSERT, DELETE, or UPDATE statement that affects exactly one row. This allows you to uniquely identify a row in the Oracle database, which can allow you to increase performance in subsequent, related queries.       Although ExecuteOracleNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use ExecuteOracleNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a &lt;xref:System.Data.DataSet&gt;, by executing UPDATE, INSERT, or DELETE statements.","pos":[0,292],"source":"You can use ExecuteOracleNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <xref:System.Data.DataSet>, by executing UPDATE, INSERT, or DELETE statements."},{"content":"ExecuteOracleNonQuery differs from &lt;xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A&gt; in that it returns <ph id=\"ph1\">`rowid`</ph> as an output parameter if you are executing an INSERT, DELETE, or UPDATE statement that affects exactly one row.","pos":[299,538],"source":"       ExecuteOracleNonQuery differs from <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> in that it returns `rowid` as an output parameter if you are executing an INSERT, DELETE, or UPDATE statement that affects exactly one row."},{"content":"This allows you to uniquely identify a row in the Oracle database, which can allow you to increase performance in subsequent, related queries.","pos":[539,681]},{"content":"Although ExecuteOracleNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.","pos":[688,829]}]},{"pos":[34848,34914],"content":"A base64 string representation of the actual row ID in the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"A base64 string representation of the actual row ID in the server.","pos":[0,66]}]},{"pos":[34971,35203],"content":"For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.","needQuote":true,"needEscape":true,"nodes":[{"content":"For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.","pos":[0,232],"nodes":[{"content":"For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.","pos":[0,106]},{"content":"For CREATE TABLE and DROP TABLE statements, the return value is 0.","pos":[107,173]},{"content":"For all other types of statements, the return value is -1.","pos":[174,232]}]}]},{"pos":[35403,35482],"content":"The connection does not exist.       -or-       The connection is not open.","needQuote":false,"needEscape":true,"nodes":[{"content":"The connection does not exist.       -or-       The connection is not open.","pos":[0,75],"nodes":[{"content":"The connection does not exist.","pos":[0,30]},{"content":"-or-       The connection is not open.","pos":[37,75]}]}]},{"pos":[35930,36103],"content":"Executes the query, and returns the first column of the first row in the result set returned by the query as an Oracle-specific data type. Extra columns or rows are ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes the query, and returns the first column of the first row in the result set returned by the query as an Oracle-specific data type. Extra columns or rows are ignored.","pos":[0,173],"nodes":[{"content":"Executes the query, and returns the first column of the first row in the result set returned by the query as an Oracle-specific data type.","pos":[0,138]},{"content":"Extra columns or rows are ignored.","pos":[139,173]}]}]},{"pos":[36116,36721],"content":"Use the ExecuteOracleScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value from the data returned by an <xref:System.Data.OracleClient.OracleDataReader>.       A typical ExecuteOracleScalar query can be formatted as in the following C# example:      ```   command.CommandText = \"SELECT COUNT(*) AS NumberOfRegions FROM Region\";   count = command.ExecuteOracleScalar();   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ExecuteOracleScalar method to retrieve a single value (for example, an aggregate value) from a database.","pos":[0,112]},{"content":"This requires less code than using the &lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt; method, and then performing the operations necessary to generate the single value from the data returned by an &lt;xref:System.Data.OracleClient.OracleDataReader&gt;.","pos":[113,375],"source":" This requires less code than using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value from the data returned by an <xref:System.Data.OracleClient.OracleDataReader>."},{"content":"A typical ExecuteOracleScalar query can be formatted as in the following C# example:      <ph id=\"ph1\">```   command.CommandText = \"SELECT COUNT(*) AS NumberOfRegions FROM Region\";   count = command.ExecuteOracleScalar();   ```</ph>","pos":[382,596],"source":"       A typical ExecuteOracleScalar query can be formatted as in the following C# example:      ```   command.CommandText = \"SELECT COUNT(*) AS NumberOfRegions FROM Region\";   count = command.ExecuteOracleScalar();   ```"}]},{"pos":[36860,37057],"content":"The first column of the first row in the result set as an Oracle-specific data type, or a null reference if the result is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_REF CURSOR\" name=\"REF CURSOR\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The first column of the first row in the result set as an Oracle-specific data type, or a null reference if the result is a <xref uid=\"langword_csharp_REF CURSOR\" name=\"REF CURSOR\" href=\"\"></xref>."},{"pos":[37563,37774],"content":"Sends the &lt;xref:System.Data.OracleClient.OracleCommand.CommandText<bpt id=\"p1\">*</bpt>&gt; to the &lt;xref:System.Data.OracleClient.OracleCommand.Connection<ept id=\"p1\">*</ept>&gt; and builds an <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sends the <xref:System.Data.OracleClient.OracleCommand.CommandText*> to the <xref:System.Data.OracleClient.OracleCommand.Connection*> and builds an <xref href=\"System.Data.OracleClient.OracleDataReader\"></xref>."},{"pos":[37787,38198],"content":"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure. The command then executes this stored procedure when you call ExecuteReader.       More than one <xref:System.Data.OracleClient.OracleDataReader> can be open at any given time.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the &lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt; property is set to <ph id=\"ph1\">`StoredProcedure`</ph>, the &lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt; property should be set to the name of the stored procedure.","pos":[0,232],"source":"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure."},{"content":"The command then executes this stored procedure when you call ExecuteReader.","pos":[233,309]},{"content":"More than one &lt;xref:System.Data.OracleClient.OracleDataReader&gt; can be open at any given time.","pos":[316,409],"source":"       More than one <xref:System.Data.OracleClient.OracleDataReader> can be open at any given time."}]},{"pos":[38867,38940],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleDataReader\"></xref> object."},{"pos":[39543,39828],"content":"Sends the &lt;xref:System.Data.OracleClient.OracleCommand.CommandText<bpt id=\"p1\">*</bpt>&gt; to the &lt;xref:System.Data.OracleClient.OracleCommand.Connection<ept id=\"p1\">*</ept>&gt;, and builds an <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> using one of the <bpt id=\"p3\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"Sends the <xref:System.Data.OracleClient.OracleCommand.CommandText*> to the <xref:System.Data.OracleClient.OracleCommand.Connection*>, and builds an <xref href=\"System.Data.OracleClient.OracleDataReader\"></xref> using one of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[39841,40718],"content":"If you expect your SQL statement to return only a single row, specifying `SingleRow` as the <xref:System.Data.CommandBehavior> value may improve application performance.       When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure. The command then executes this stored procedure when you call <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>.       The <xref:System.Data.OracleClient.OracleDataReader> supports a special mode that enables large binary values to be read efficiently. For more information, see the `SequentialAccess` setting for <xref:System.Data.CommandBehavior>.       More than one <xref:System.Data.OracleClient.OracleDataReader> can be open at any given time.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you expect your SQL statement to return only a single row, specifying <ph id=\"ph1\">`SingleRow`</ph> as the &lt;xref:System.Data.CommandBehavior&gt; value may improve application performance.","pos":[0,169],"source":"If you expect your SQL statement to return only a single row, specifying `SingleRow` as the <xref:System.Data.CommandBehavior> value may improve application performance."},{"content":"When the &lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt; property is set to <ph id=\"ph1\">`StoredProcedure`</ph>, the &lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt; property should be set to the name of the stored procedure.","pos":[176,408],"source":"       When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure."},{"content":"The command then executes this stored procedure when you call &lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;.","pos":[409,534],"source":" The command then executes this stored procedure when you call <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>."},{"content":"The &lt;xref:System.Data.OracleClient.OracleDataReader&gt; supports a special mode that enables large binary values to be read efficiently.","pos":[541,674],"source":"       The <xref:System.Data.OracleClient.OracleDataReader> supports a special mode that enables large binary values to be read efficiently."},{"content":"For more information, see the <ph id=\"ph1\">`SequentialAccess`</ph> setting for &lt;xref:System.Data.CommandBehavior&gt;.","pos":[675,771],"source":" For more information, see the `SequentialAccess` setting for <xref:System.Data.CommandBehavior>."},{"content":"More than one &lt;xref:System.Data.OracleClient.OracleDataReader&gt; can be open at any given time.","pos":[778,871],"source":"       More than one <xref:System.Data.OracleClient.OracleDataReader> can be open at any given time."}]},{"pos":[41490,41557],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.CommandBehavior\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.CommandBehavior\"></xref> values."},{"pos":[41643,41716],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleDataReader\"></xref> object."},{"pos":[42216,42387],"content":"Executes the query, and returns the first column of the first row in the result set returned by the query as a .NET Framework data type. Extra columns or rows are ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes the query, and returns the first column of the first row in the result set returned by the query as a .NET Framework data type. Extra columns or rows are ignored.","pos":[0,171],"nodes":[{"content":"Executes the query, and returns the first column of the first row in the result set returned by the query as a .NET Framework data type.","pos":[0,136]},{"content":"Extra columns or rows are ignored.","pos":[137,171]}]}]},{"pos":[42400,42966],"content":"Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value from the data returned by an <xref:System.Data.OracleClient.OracleDataReader>.       A typical ExecuteScalar query can be formatted as in the following C# example:      ```   CommandText = \"SELECT COUNT(*) FROM Region\";   Int32 count = (int32) ExecuteScalar();   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database.","pos":[0,106]},{"content":"This requires less code than using the &lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt; method, and then performing the operations necessary to generate the single value from the data returned by an &lt;xref:System.Data.OracleClient.OracleDataReader&gt;.","pos":[107,369],"source":" This requires less code than using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value from the data returned by an <xref:System.Data.OracleClient.OracleDataReader>."},{"content":"A typical ExecuteScalar query can be formatted as in the following C# example:      <ph id=\"ph1\">```   CommandText = \"SELECT COUNT(*) FROM Region\";   Int32 count = (int32) ExecuteScalar();   ```</ph>","pos":[376,557],"source":"       A typical ExecuteScalar query can be formatted as in the following C# example:      ```   CommandText = \"SELECT COUNT(*) FROM Region\";   Int32 count = (int32) ExecuteScalar();   ```"}]},{"pos":[43631,43853],"content":"The first column of the first row in the result set as a .NET Framework data type, or a null reference if the result set is empty or the result is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_REF CURSOR\" name=\"REF CURSOR\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The first column of the first row in the result set as a .NET Framework data type, or a null reference if the result set is empty or the result is a <xref uid=\"langword_csharp_REF CURSOR\" name=\"REF CURSOR\" href=\"\"></xref>."},{"pos":[44334,44415],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleParameterCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Data.OracleClient.OracleParameterCollection\"></xref>."},{"pos":[44428,45754],"content":"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command executes this stored procedure when you call one of the Execute methods.       The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`. In this case, named parameters must be used. For example:      ```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```       When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:). However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the Parameters property), do not precede the named parameter with a colon (:). The .NET Framework Data Provider for Oracle supplies the colon automatically.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the &lt;xref:System.Data.OracleClient.OracleCommand.CommandType%2A&gt; property is set to <ph id=\"ph1\">`StoredProcedure`</ph>, the &lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt; property should be set to the name of the stored procedure.","pos":[0,232],"source":"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure."},{"content":"The user may be required to use escape character syntax if the stored procedure name contains any special characters.","pos":[233,350]},{"content":"The command executes this stored procedure when you call one of the Execute methods.","pos":[351,435]},{"content":"The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an &lt;xref:System.Data.OracleClient.OracleCommand&gt; of <ph id=\"ph1\">`CommandType.Text`</ph>.","pos":[442,661],"source":"       The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`."},{"content":"In this case, named parameters must be used.","pos":[662,706]},{"content":"For example:      <ph id=\"ph1\">```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```</ph>       When using named parameters in an SQL statement called by an &lt;xref:System.Data.OracleClient.OracleCommand&gt; of <ph id=\"ph2\">`CommandType.Text`</ph>, you must precede the parameter name with a colon (:).","pos":[707,982],"source":" For example:      ```   SELECT * FROM Customers WHERE CustomerID = :pCustomerID   ```       When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:)."},{"content":"However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding &lt;xref:System.Data.OracleClient.OracleParameter&gt; objects to the Parameters property), do not precede the named parameter with a colon (:).","pos":[983,1240],"source":" However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the Parameters property), do not precede the named parameter with a colon (:)."},{"content":"The .NET Framework Data Provider for Oracle supplies the colon automatically.","pos":[1241,1318]}]},{"pos":[46532,46624],"content":"The parameters of the SQL statement or stored procedure. The default is an empty collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters of the SQL statement or stored procedure. The default is an empty collection.","pos":[0,92],"nodes":[{"content":"The parameters of the SQL statement or stored procedure.","pos":[0,56]},{"content":"The default is an empty collection.","pos":[57,92]}]}]},{"pos":[47091,47166],"content":"Creates a prepared (or compiled) version of the command at the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a prepared (or compiled) version of the command at the data source.","pos":[0,75]}]},{"pos":[47178,47275],"content":"Before you call Prepare, specify the data type of each parameter in the statement to be prepared.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Before you call Prepare, specify the data type of each parameter in the statement to be prepared.","pos":[0,97]}]},{"pos":[47536,47755],"content":"The &lt;xref:System.Data.OracleClient.OracleCommand.Connection<bpt id=\"p1\">*</bpt>&gt; is not set.       -or-       The &lt;xref:System.Data.OracleClient.OracleCommand.Connection<ept id=\"p1\">*</ept>&gt; is not &lt;xref:System.Data.OracleClient.OracleConnection.Open*&gt;.","needQuote":false,"needEscape":true,"source":"The <xref:System.Data.OracleClient.OracleCommand.Connection*> is not set.       -or-       The <xref:System.Data.OracleClient.OracleCommand.Connection*> is not <xref:System.Data.OracleClient.OracleConnection.Open*>."},{"pos":[48203,48306],"content":"Resets the <xref:System.Data.OracleClient.OracleCommand.CommandTimeout*> property to the default value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resets the &lt;xref:System.Data.OracleClient.OracleCommand.CommandTimeout*&gt; property to the default value.","pos":[0,103],"source":"Resets the <xref:System.Data.OracleClient.OracleCommand.CommandTimeout*> property to the default value."}]},{"pos":[48318,48421],"content":"The default value of the <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> is 30 seconds.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default value of the &lt;xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A&gt; is 30 seconds.","pos":[0,103],"source":"The default value of the <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> is 30 seconds."}]},{"pos":[48991,49158],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleTransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> within which the <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> executes.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref> within which the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> executes."},{"pos":[49170,49620],"content":"You cannot set the Transaction property if it is already set to a specific value, and the command is in the process of executing. If you set the transaction property to an <xref:System.Data.OracleClient.OracleTransaction> object that is not connected to the same <xref:System.Data.OracleClient.OracleConnection> as the <xref:System.Data.OracleClient.OracleCommand> object, an exception will be thrown the next time you attempt to execute a statement.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You cannot set the Transaction property if it is already set to a specific value, and the command is in the process of executing. If you set the transaction property to an <xref:System.Data.OracleClient.OracleTransaction> object that is not connected to the same <xref:System.Data.OracleClient.OracleConnection> as the <xref:System.Data.OracleClient.OracleCommand> object, an exception will be thrown the next time you attempt to execute a statement.","pos":[0,450],"nodes":[{"content":"You cannot set the Transaction property if it is already set to a specific value, and the command is in the process of executing.","pos":[0,129]},{"content":"If you set the transaction property to an &lt;xref:System.Data.OracleClient.OracleTransaction&gt; object that is not connected to the same &lt;xref:System.Data.OracleClient.OracleConnection&gt; as the &lt;xref:System.Data.OracleClient.OracleCommand&gt; object, an exception will be thrown the next time you attempt to execute a statement.","pos":[130,450],"source":" If you set the transaction property to an <xref:System.Data.OracleClient.OracleTransaction> object that is not connected to the same <xref:System.Data.OracleClient.OracleConnection> as the <xref:System.Data.OracleClient.OracleCommand> object, an exception will be thrown the next time you attempt to execute a statement."}]}]},{"pos":[49806,49902],"content":"An <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref>. The default is a null value.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleTransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,67],"source":"An <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref>."},{"content":"The default is a null value.","pos":[68,96]}]},{"pos":[50411,50604],"content":"Gets or sets a value that specifies how the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method should apply command results to the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that specifies how the <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> method should apply command results to the <xref href=\"System.Data.DataRow\"></xref>."},{"pos":[50617,50999],"content":"The default <xref:System.Data.UpdateRowSource> value is `Both` unless the command is automatically generated (as in the case of the <xref:System.Data.OracleClient.OracleCommandBuilder>), in which case the default is `None`.       For more information about using the <xref:System.Data.UpdateRowSource> property, see [DataAdapter Parameters](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default &lt;xref:System.Data.UpdateRowSource&gt; value is <ph id=\"ph1\">`Both`</ph> unless the command is automatically generated (as in the case of the &lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;), in which case the default is <ph id=\"ph2\">`None`</ph>.","pos":[0,223],"source":"The default <xref:System.Data.UpdateRowSource> value is `Both` unless the command is automatically generated (as in the case of the <xref:System.Data.OracleClient.OracleCommandBuilder>), in which case the default is `None`."},{"content":"For more information about using the &lt;xref:System.Data.UpdateRowSource&gt; property, see <bpt id=\"p1\">[</bpt>DataAdapter Parameters<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[230,380],"source":"       For more information about using the <xref:System.Data.UpdateRowSource> property, see [DataAdapter Parameters](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[51170,51237],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.UpdateRowSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.UpdateRowSource\"></xref> values."},{"pos":[51415,51508],"content":"The value entered was not one of the <bpt id=\"p1\">&lt;xref href=\"System.Data.UpdateRowSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"The value entered was not one of the <xref href=\"System.Data.UpdateRowSource\"></xref> values."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.OracleClient.OracleCommand\n  id: OracleCommand\n  children:\n  - System.Data.OracleClient.OracleCommand.#ctor\n  - System.Data.OracleClient.OracleCommand.#ctor(System.String)\n  - System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection)\n  - System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction)\n  - System.Data.OracleClient.OracleCommand.Cancel\n  - System.Data.OracleClient.OracleCommand.Clone\n  - System.Data.OracleClient.OracleCommand.CommandText\n  - System.Data.OracleClient.OracleCommand.CommandTimeout\n  - System.Data.OracleClient.OracleCommand.CommandType\n  - System.Data.OracleClient.OracleCommand.Connection\n  - System.Data.OracleClient.OracleCommand.CreateDbParameter\n  - System.Data.OracleClient.OracleCommand.CreateParameter\n  - System.Data.OracleClient.OracleCommand.DbConnection\n  - System.Data.OracleClient.OracleCommand.DbParameterCollection\n  - System.Data.OracleClient.OracleCommand.DbTransaction\n  - System.Data.OracleClient.OracleCommand.DesignTimeVisible\n  - System.Data.OracleClient.OracleCommand.ExecuteDbDataReader(System.Data.CommandBehavior)\n  - System.Data.OracleClient.OracleCommand.ExecuteNonQuery\n  - System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery(System.Data.OracleClient.OracleString@)\n  - System.Data.OracleClient.OracleCommand.ExecuteOracleScalar\n  - System.Data.OracleClient.OracleCommand.ExecuteReader\n  - System.Data.OracleClient.OracleCommand.ExecuteReader(System.Data.CommandBehavior)\n  - System.Data.OracleClient.OracleCommand.ExecuteScalar\n  - System.Data.OracleClient.OracleCommand.Parameters\n  - System.Data.OracleClient.OracleCommand.Prepare\n  - System.Data.OracleClient.OracleCommand.ResetCommandTimeout\n  - System.Data.OracleClient.OracleCommand.Transaction\n  - System.Data.OracleClient.OracleCommand.UpdatedRowSource\n  langs:\n  - csharp\n  name: OracleCommand\n  nameWithType: OracleCommand\n  fullName: System.Data.OracleClient.OracleCommand\n  type: Class\n  summary: Represents an SQL statement or stored procedure to execute against a database. This class cannot be inherited.\n  remarks: \"This type is deprecated and will be removed in a future version of the .NET Framework. For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The OracleCommand class provides the following methods for executing commands against a data source:  \\n  \\n|Item|Description|  \\n|----------|-----------------|  \\n|<xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>|Executes commands that return rows.|  \\n|<xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A>|Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection%2A> and returns the number of rows affected.|  \\n|<xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>|Executes commands such as SQL INSERT, DELETE, UPDATE, and SET statements.|  \\n|<xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A>|Retrieves a single value (for example, an aggregate value) from a database as a .NET Framework data type.|  \\n|<xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A>|Retrieves a single value (for example, an aggregate value) from a database as an Oracle-specific data type.|  \\n  \\n You can reset the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property and reuse the OracleCommand object.  \\n  \\n If execution of the command results in a fatal <xref:System.Data.OracleClient.OracleException>, the <xref:System.Data.OracleClient.OracleConnection> may close. However, the user can reopen the connection and continue.  \\n  \\n> [!NOTE]\\n>  Unlike the **Command** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), the OracleCommand object does not support a <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> property. Setting a command timeout has no effect and the value returned is always zero.\"\n  example:\n  - \"The following example uses the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method of OracleCommand, along with <xref:System.Data.OracleClient.OracleDataReader> and <xref:System.Data.OracleClient.OracleConnection>, to select rows from a table.  \\n  \\n [!code-cs[Classic WebData OracleCommand#1](~/add/codesnippet/csharp/t-system.data.oracleclie_7_1.cs)]\\n [!code-vb[Classic WebData OracleCommand#1](~/add/codesnippet/visualbasic/t-system.data.oracleclie_7_1.vb)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"RecordsAffected\")]\n\n      [System.ComponentModel.Designer(\"Microsoft.VSDesigner.Data.VS.OracleCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.ComponentModel.ToolboxItem(true)]\n\n      [System.Obsolete(\"OracleCommand has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260\", false)]\n\n      public sealed class OracleCommand : System.Data.Common.DbCommand, ICloneable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Data.Common.DbCommand\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.ExecuteNonQueryAsync\n  - System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.ExecuteReaderAsync\n  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)\n  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.ExecuteScalarAsync\n  - System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#Connection\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.#ctor\n  id: '#ctor'\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: OracleCommand()\n  nameWithType: OracleCommand.OracleCommand()\n  fullName: System.Data.OracleClient.OracleCommand.OracleCommand()\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref>.\n  remarks: \"The base constructor initializes all fields to their default values. The following table shows initial property values for an instance of <xref:System.Data.OracleClient.OracleCommand>.  \\n  \\n|Properties|Initial Value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.OracleClient.OracleCommand.CommandText%2A>|empty string (\\\"\\\")|  \\n|<xref:System.Data.OracleClient.OracleCommand.CommandType%2A>|`Text`|  \\n|<xref:System.Data.OracleClient.OracleCommand.Connection%2A>|null|\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand> and sets some of its properties.  \\n  \\n [!code-cs[Classic WebData OracleCommand.OracleCommand#1](~/add/codesnippet/csharp/m-system.data.oracleclie_12_1.cs)]\\n [!code-vb[Classic WebData OracleCommand.OracleCommand#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_12_1.vb)]\"\n  syntax:\n    content: public OracleCommand ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleCommand.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: OracleCommand(String)\n  nameWithType: OracleCommand.OracleCommand(String)\n  fullName: System.Data.OracleClient.OracleCommand.OracleCommand(String)\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> class with the text of the query.\n  syntax:\n    content: public OracleCommand (string commandText);\n    parameters:\n    - id: commandText\n      type: System.String\n      description: The text of the query.\n  overload: System.Data.OracleClient.OracleCommand.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection)\n  id: '#ctor(System.String,System.Data.OracleClient.OracleConnection)'\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: OracleCommand(String,OracleConnection)\n  nameWithType: OracleCommand.OracleCommand(String,OracleConnection)\n  fullName: System.Data.OracleClient.OracleCommand.OracleCommand(String,OracleConnection)\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> class with the text of the query and an <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand>.  \\n  \\n [!code-vb[Classic WebData OracleCommand.OracleCommand2#1](~/add/codesnippet/visualbasic/24f167a1-f345-47a8-a620-_1.vb)]\\n [!code-cs[Classic WebData OracleCommand.OracleCommand2#1](~/add/codesnippet/csharp/24f167a1-f345-47a8-a620-_1.cs)]\"\n  syntax:\n    content: public OracleCommand (string commandText, System.Data.OracleClient.OracleConnection connection);\n    parameters:\n    - id: commandText\n      type: System.String\n      description: The text of the query.\n    - id: connection\n      type: System.Data.OracleClient.OracleConnection\n      description: An <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> object that represents the connection to a database.\n  overload: System.Data.OracleClient.OracleCommand.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction)\n  id: '#ctor(System.String,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction)'\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: OracleCommand(String,OracleConnection,OracleTransaction)\n  nameWithType: OracleCommand.OracleCommand(String,OracleConnection,OracleTransaction)\n  fullName: System.Data.OracleClient.OracleCommand.OracleCommand(String,OracleConnection,OracleTransaction)\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> class with the text of the query, an <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> object, and an <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref>.\n  remarks: \"The following table shows initial property values for an instance of this implementation of the <xref:System.Data.OracleClient.OracleCommand>.  \\n  \\n|Properties|Initial Value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.OracleClient.OracleCommand.CommandText%2A>|`cmdText`|  \\n|<xref:System.Data.OracleClient.OracleCommand.CommandType%2A>|`Text`|  \\n|<xref:System.Data.OracleClient.OracleCommand.Connection%2A>|A new <xref:System.Data.OracleClient.OracleConnection> that is the value for the `connection` parameter.|  \\n  \\n You can change the value for any of these parameters by setting the related property.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData OracleCommand.OracleCommand3#1](~/add/codesnippet/visualbasic/c02f7271-efcb-41b3-bc5c-_1.vb)]\\n [!code-cs[Classic WebData OracleCommand.OracleCommand3#1](~/add/codesnippet/csharp/c02f7271-efcb-41b3-bc5c-_1.cs)]\"\n  syntax:\n    content: public OracleCommand (string commandText, System.Data.OracleClient.OracleConnection connection, System.Data.OracleClient.OracleTransaction tx);\n    parameters:\n    - id: commandText\n      type: System.String\n      description: The text of the query.\n    - id: connection\n      type: System.Data.OracleClient.OracleConnection\n      description: An <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> object that represents the connection to a database.\n    - id: tx\n      type: System.Data.OracleClient.OracleTransaction\n      description: The <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref> in which the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> executes.\n  overload: System.Data.OracleClient.OracleCommand.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.Cancel\n  id: Cancel\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: Cancel()\n  nameWithType: OracleCommand.Cancel()\n  fullName: System.Data.OracleClient.OracleCommand.Cancel()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Attempts to cancel the execution of an <xref href=\"System.Data.OracleClient.OracleCommand\"></xref>.\n  remarks: If there is nothing to cancel, nothing happens. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand>, executes it, then cancels the execution. To accomplish this, the method is passed a string that is an SQL SELECT statement and a string to use to connect to the database.  \\n  \\n [!code-vb[Classic WebData OracleCommand.Cancel#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_6_1.vb)]\\n [!code-cs[Classic WebData OracleCommand.Cancel#1](~/add/codesnippet/csharp/m-system.data.oracleclie_6_1.cs)]\"\n  syntax:\n    content: public override void Cancel ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleCommand.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.Clone\n  id: Clone\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: OracleCommand.Clone()\n  fullName: System.Data.OracleClient.OracleCommand.Clone()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Creates a copy of this <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> object.\n  syntax:\n    content: public object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A new <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> object in which all property values are the same as the original.\n  overload: System.Data.OracleClient.OracleCommand.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.CommandText\n  id: CommandText\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: CommandText\n  nameWithType: OracleCommand.CommandText\n  fullName: System.Data.OracleClient.OracleCommand.CommandText\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets the SQL statement or stored procedure to execute against the database.\n  remarks: \"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the CommandText property should be set to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command executes this stored procedure when you call one of the Execute methods.  \\n  \\n The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`. In this case, named parameters must be used. For example:  \\n  \\n```  \\nSELECT * FROM Customers WHERE CustomerID = :pCustomerID  \\n```  \\n  \\n When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:). However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> property), do not precede the named parameter with a colon (:). The .NET Framework Data Provider for Oracle supplies the colon automatically.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand> and sets some of its properties.  \\n  \\n [!code-cs[Classic WebData OracleCommand.CommandText#1](~/add/codesnippet/csharp/p-system.data.oracleclie_14_1.cs)]\\n [!code-vb[Classic WebData OracleCommand.CommandText#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_14_1.vb)]\"\n  syntax:\n    content: public override string CommandText { get; set; }\n    return:\n      type: System.String\n      description: The SQL statement or stored procedure to execute. The default value is an empty string (\"\").\n  overload: System.Data.OracleClient.OracleCommand.CommandText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.CommandTimeout\n  id: CommandTimeout\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: CommandTimeout\n  nameWithType: OracleCommand.CommandTimeout\n  fullName: System.Data.OracleClient.OracleCommand.CommandTimeout\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets the wait time before terminating the attempt to execute a command and generating an error.\n  remarks: An <xref:System.ArgumentException> is generated if the assigned CommandTimeout property value is less than 0.\n  syntax:\n    content: public override int CommandTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: The time (in seconds) to wait for the command to execute. The default value is 30 seconds.\n  overload: System.Data.OracleClient.OracleCommand.CommandTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.CommandType\n  id: CommandType\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: CommandType\n  nameWithType: OracleCommand.CommandType\n  fullName: System.Data.OracleClient.OracleCommand.CommandType\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets a value indicating how the <xref:System.Data.OracleClient.OracleCommand.CommandText*> property is interpreted.\n  remarks: \"When the CommandType property is set to `StoredProcedure`, you should set the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property to the full Oracle call syntax. The command then executes this stored procedure when you call one of the Execute methods (for example, <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> or <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>).  \\n  \\n The <xref:System.Data.OracleClient.OracleCommand.Connection%2A>, CommandType and <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> properties cannot be set if the current connection is performing an execute or fetch operation.  \\n  \\n The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`. In this case, named parameters must be used. For example:  \\n  \\n```  \\nSELECT * FROM Customers WHERE CustomerID = :pCustomerID  \\n```  \\n  \\n When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:). However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> property), do not precede the named parameter with a colon (:). The .NET Framework Data Provider for Oracle supplies the colon automatically.\"\n  example:\n  - \"The following example creates an instance of a derived class <xref:System.Data.OracleClient.OracleCommand> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData OracleCommand.CommandType#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_2_1.vb)]\\n [!code-cs[Classic WebData OracleCommand.CommandType#1](~/add/codesnippet/csharp/p-system.data.oracleclie_2_1.cs)]\"\n  syntax:\n    content: public override System.Data.CommandType CommandType { get; set; }\n    return:\n      type: System.Data.CommandType\n      description: One of the <xref href=\"System.Data.CommandType\"></xref> values. The default is <xref uid=\"langword_csharp_Text\" name=\"Text\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleCommand.CommandType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value was not a valid <xref href=\"System.Data.CommandType\"></xref>.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.Connection\n  id: Connection\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: Connection\n  nameWithType: OracleCommand.Connection\n  fullName: System.Data.OracleClient.OracleCommand.Connection\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> used by this instance of the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref>.\n  remarks: \"You cannot set the Connection, <xref:System.Data.OracleClient.OracleCommand.CommandType%2A>, and <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> properties if the current connection is performing an execute or fetch operation.  \\n  \\n If you set Connection while a transaction is in progress and the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is not null, an <xref:System.InvalidOperationException> is generated. If you set Connection after the transaction has been committed or rolled back, and the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is not null, the <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> property is then set to a null value.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand> and sets some of its properties.  \\n  \\n [!code-cs[Classic WebData OracleCommand.Connection#1](~/add/codesnippet/csharp/p-system.data.oracleclie_11_1.cs)]\\n [!code-vb[Classic WebData OracleCommand.Connection#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_11_1.vb)]\"\n  syntax:\n    content: public System.Data.OracleClient.OracleConnection Connection { get; set; }\n    return:\n      type: System.Data.OracleClient.OracleConnection\n      description: The connection to a data source. The default is a null value.\n  overload: System.Data.OracleClient.OracleCommand.Connection*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The Connection property was changed while a transaction was in progress.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.CreateDbParameter\n  id: CreateDbParameter\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: CreateDbParameter()\n  nameWithType: OracleCommand.CreateDbParameter()\n  fullName: System.Data.OracleClient.OracleCommand.CreateDbParameter()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.DbParameter CreateDbParameter ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbParameter\n      description: To be added.\n  overload: System.Data.OracleClient.OracleCommand.CreateDbParameter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.CreateParameter\n  id: CreateParameter\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: CreateParameter()\n  nameWithType: OracleCommand.CreateParameter()\n  fullName: System.Data.OracleClient.OracleCommand.CreateParameter()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Creates a new instance of an <xref href=\"System.Data.OracleClient.OracleParameter\"></xref> object.\n  remarks: The CreateParameter method is a strongly-typed version of <xref:System.Data.IDbCommand.CreateParameter%2A>.\n  syntax:\n    content: public System.Data.OracleClient.OracleParameter CreateParameter ();\n    parameters: []\n    return:\n      type: System.Data.OracleClient.OracleParameter\n      description: An <xref href=\"System.Data.OracleClient.OracleParameter\"></xref> object.\n  overload: System.Data.OracleClient.OracleCommand.CreateParameter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.DbConnection\n  id: DbConnection\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: DbConnection\n  nameWithType: OracleCommand.DbConnection\n  fullName: System.Data.OracleClient.OracleCommand.DbConnection\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.DbConnection DbConnection { get; set; }\n    return:\n      type: System.Data.Common.DbConnection\n      description: To be added.\n  overload: System.Data.OracleClient.OracleCommand.DbConnection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.DbParameterCollection\n  id: DbParameterCollection\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: DbParameterCollection\n  nameWithType: OracleCommand.DbParameterCollection\n  fullName: System.Data.OracleClient.OracleCommand.DbParameterCollection\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }\n    return:\n      type: System.Data.Common.DbParameterCollection\n      description: To be added.\n  overload: System.Data.OracleClient.OracleCommand.DbParameterCollection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.DbTransaction\n  id: DbTransaction\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: DbTransaction\n  nameWithType: OracleCommand.DbTransaction\n  fullName: System.Data.OracleClient.OracleCommand.DbTransaction\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.DbTransaction DbTransaction { get; set; }\n    return:\n      type: System.Data.Common.DbTransaction\n      description: To be added.\n  overload: System.Data.OracleClient.OracleCommand.DbTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.DesignTimeVisible\n  id: DesignTimeVisible\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: DesignTimeVisible\n  nameWithType: OracleCommand.DesignTimeVisible\n  fullName: System.Data.OracleClient.OracleCommand.DesignTimeVisible\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets a value indicating whether the command object should be visible in a customized interface control.\n  syntax:\n    content: public override bool DesignTimeVisible { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if the command object should be visible in a control; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleCommand.DesignTimeVisible*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.ExecuteDbDataReader(System.Data.CommandBehavior)\n  id: ExecuteDbDataReader(System.Data.CommandBehavior)\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: ExecuteDbDataReader(CommandBehavior)\n  nameWithType: OracleCommand.ExecuteDbDataReader(CommandBehavior)\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteDbDataReader(CommandBehavior)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: To be added.\n    return:\n      type: System.Data.Common.DbDataReader\n      description: To be added.\n  overload: System.Data.OracleClient.OracleCommand.ExecuteDbDataReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.ExecuteNonQuery\n  id: ExecuteNonQuery\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: ExecuteNonQuery()\n  nameWithType: OracleCommand.ExecuteNonQuery()\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteNonQuery()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection*> and returns the number of rows affected.\n  remarks: \"You can use ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <xref:System.Data.DataSet>, by executing UPDATE, INSERT, or DELETE statements.  \\n  \\n Although ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.  \\n  \\n For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1. If a rollback occurs, the return value is also -1.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand> and then executes it by using ExecuteNonQuery. The example is passed a string that is an SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the database.  \\n  \\n [!code-cs[Classic WebData OracleCommand.ExecuteNonQuery#1](~/add/codesnippet/csharp/m-system.data.oracleclie_8_1.cs)]\\n [!code-vb[Classic WebData OracleCommand.ExecuteNonQuery#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_8_1.vb)]\"\n  syntax:\n    content: public override int ExecuteNonQuery ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.\n  overload: System.Data.OracleClient.OracleCommand.ExecuteNonQuery*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The connection does not exist.  \\n  \\n -or-  \\n  \\n The connection is not open.\"\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery(System.Data.OracleClient.OracleString@)\n  id: ExecuteOracleNonQuery(System.Data.OracleClient.OracleString@)\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: ExecuteOracleNonQuery(OracleString)\n  nameWithType: OracleCommand.ExecuteOracleNonQuery(OracleString)\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery(OracleString)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Executes an SQL statement against the <xref:System.Data.OracleClient.OracleCommand.Connection*> and returns the number of rows affected.\n  remarks: \"You can use ExecuteOracleNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a <xref:System.Data.DataSet>, by executing UPDATE, INSERT, or DELETE statements.  \\n  \\n ExecuteOracleNonQuery differs from <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> in that it returns `rowid` as an output parameter if you are executing an INSERT, DELETE, or UPDATE statement that affects exactly one row. This allows you to uniquely identify a row in the Oracle database, which can allow you to increase performance in subsequent, related queries.  \\n  \\n Although ExecuteOracleNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.\"\n  syntax:\n    content: public int ExecuteOracleNonQuery (out System.Data.OracleClient.OracleString rowid);\n    parameters:\n    - id: rowid\n      type: System.Data.OracleClient.OracleString\n      description: A base64 string representation of the actual row ID in the server.\n    return:\n      type: System.Int32\n      description: For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.\n  overload: System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The connection does not exist.  \\n  \\n -or-  \\n  \\n The connection is not open.\"\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.ExecuteOracleScalar\n  id: ExecuteOracleScalar\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: ExecuteOracleScalar()\n  nameWithType: OracleCommand.ExecuteOracleScalar()\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteOracleScalar()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Executes the query, and returns the first column of the first row in the result set returned by the query as an Oracle-specific data type. Extra columns or rows are ignored.\n  remarks: \"Use the ExecuteOracleScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value from the data returned by an <xref:System.Data.OracleClient.OracleDataReader>.  \\n  \\n A typical ExecuteOracleScalar query can be formatted as in the following C# example:  \\n  \\n```  \\ncommand.CommandText = \\\"SELECT COUNT(*) AS NumberOfRegions FROM Region\\\";  \\ncount = command.ExecuteOracleScalar();  \\n```\"\n  syntax:\n    content: public object ExecuteOracleScalar ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The first column of the first row in the result set as an Oracle-specific data type, or a null reference if the result is a <xref uid=\"langword_csharp_REF CURSOR\" name=\"REF CURSOR\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleCommand.ExecuteOracleScalar*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.ExecuteReader\n  id: ExecuteReader\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: ExecuteReader()\n  nameWithType: OracleCommand.ExecuteReader()\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteReader()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Sends the <xref:System.Data.OracleClient.OracleCommand.CommandText*> to the <xref:System.Data.OracleClient.OracleCommand.Connection*> and builds an <xref href=\"System.Data.OracleClient.OracleDataReader\"></xref>.\n  remarks: \"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure. The command then executes this stored procedure when you call ExecuteReader.  \\n  \\n More than one <xref:System.Data.OracleClient.OracleDataReader> can be open at any given time.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand>, and then executes it by passing a string that is an SQL SELECT statement, and a string to use to connect to the data source.  \\n  \\n [!code-vb[Classic WebData OracleCommand.ExecuteReader1#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_10_1.vb)]\\n [!code-cs[Classic WebData OracleCommand.ExecuteReader1#1](~/add/codesnippet/csharp/m-system.data.oracleclie_10_1.cs)]\"\n  syntax:\n    content: public System.Data.OracleClient.OracleDataReader ExecuteReader ();\n    parameters: []\n    return:\n      type: System.Data.OracleClient.OracleDataReader\n      description: An <xref href=\"System.Data.OracleClient.OracleDataReader\"></xref> object.\n  overload: System.Data.OracleClient.OracleCommand.ExecuteReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.ExecuteReader(System.Data.CommandBehavior)\n  id: ExecuteReader(System.Data.CommandBehavior)\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: ExecuteReader(CommandBehavior)\n  nameWithType: OracleCommand.ExecuteReader(CommandBehavior)\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteReader(CommandBehavior)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Sends the <xref:System.Data.OracleClient.OracleCommand.CommandText*> to the <xref:System.Data.OracleClient.OracleCommand.Connection*>, and builds an <xref href=\"System.Data.OracleClient.OracleDataReader\"></xref> using one of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n  remarks: \"If you expect your SQL statement to return only a single row, specifying `SingleRow` as the <xref:System.Data.CommandBehavior> value may improve application performance.  \\n  \\n When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure. The command then executes this stored procedure when you call <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>.  \\n  \\n The <xref:System.Data.OracleClient.OracleDataReader> supports a special mode that enables large binary values to be read efficiently. For more information, see the `SequentialAccess` setting for <xref:System.Data.CommandBehavior>.  \\n  \\n More than one <xref:System.Data.OracleClient.OracleDataReader> can be open at any given time.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand>, and then executes it by passing a string that is an SQL SELECT statement, and a string to use to connect to the database. <xref:System.Data.CommandBehavior> is then set to <xref:System.Data.CommandBehavior>.  \\n  \\n [!code-cs[Classic WebData OracleCommand.ExecuteReader2#1](~/add/codesnippet/csharp/db42fed5-256c-4ac8-928b-_1.cs)]\\n [!code-vb[Classic WebData OracleCommand.ExecuteReader2#1](~/add/codesnippet/visualbasic/db42fed5-256c-4ac8-928b-_1.vb)]\"\n  syntax:\n    content: public System.Data.OracleClient.OracleDataReader ExecuteReader (System.Data.CommandBehavior behavior);\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: One of the <xref href=\"System.Data.CommandBehavior\"></xref> values.\n    return:\n      type: System.Data.OracleClient.OracleDataReader\n      description: An <xref href=\"System.Data.OracleClient.OracleDataReader\"></xref> object.\n  overload: System.Data.OracleClient.OracleCommand.ExecuteReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.ExecuteScalar\n  id: ExecuteScalar\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: ExecuteScalar()\n  nameWithType: OracleCommand.ExecuteScalar()\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteScalar()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Executes the query, and returns the first column of the first row in the result set returned by the query as a .NET Framework data type. Extra columns or rows are ignored.\n  remarks: \"Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value from the data returned by an <xref:System.Data.OracleClient.OracleDataReader>.  \\n  \\n A typical ExecuteScalar query can be formatted as in the following C# example:  \\n  \\n```  \\nCommandText = \\\"SELECT COUNT(*) FROM Region\\\";  \\nInt32 count = (int32) ExecuteScalar();  \\n```\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand> and then executes it using ExecuteScalar. The example is passed a string that is an SQL statement that returns an aggregate result, and a string to use to connect to the database.  \\n  \\n [!code-cs[Classic WebData OracleCommand.ExecuteScalar#1](~/add/codesnippet/csharp/m-system.data.oracleclie_1_1.cs)]\\n [!code-vb[Classic WebData OracleCommand.ExecuteScalar#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_1_1.vb)]\"\n  syntax:\n    content: public override object ExecuteScalar ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The first column of the first row in the result set as a .NET Framework data type, or a null reference if the result set is empty or the result is a <xref uid=\"langword_csharp_REF CURSOR\" name=\"REF CURSOR\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleCommand.ExecuteScalar*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.Parameters\n  id: Parameters\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: Parameters\n  nameWithType: OracleCommand.Parameters\n  fullName: System.Data.OracleClient.OracleCommand.Parameters\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets the <xref href=\"System.Data.OracleClient.OracleParameterCollection\"></xref>.\n  remarks: \"When the <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> property should be set to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command executes this stored procedure when you call one of the Execute methods.  \\n  \\n The .NET Framework Data Provider for Oracle does not support the question mark (?) placeholder for passing parameters to an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`. In this case, named parameters must be used. For example:  \\n  \\n```  \\nSELECT * FROM Customers WHERE CustomerID = :pCustomerID  \\n```  \\n  \\n When using named parameters in an SQL statement called by an <xref:System.Data.OracleClient.OracleCommand> of `CommandType.Text`, you must precede the parameter name with a colon (:). However, in a stored procedure, or when referring to a named parameter elsewhere in your code (for example, when adding <xref:System.Data.OracleClient.OracleParameter> objects to the Parameters property), do not precede the named parameter with a colon (:). The .NET Framework Data Provider for Oracle supplies the colon automatically.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand> and displays its parameters. To accomplish this, the method is passed an <xref:System.Data.OracleClient.OracleConnection>, a query string that is an SQL SELECT statement, and an array of <xref:System.Data.OracleClient.OracleParameter> objects.  \\n  \\n [!code-cs[Classic WebData OracleCommand.Parameters#1](~/add/codesnippet/csharp/p-system.data.oracleclie_6_1.cs)]\\n [!code-vb[Classic WebData OracleCommand.Parameters#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_6_1.vb)]\"\n  syntax:\n    content: public System.Data.OracleClient.OracleParameterCollection Parameters { get; }\n    return:\n      type: System.Data.OracleClient.OracleParameterCollection\n      description: The parameters of the SQL statement or stored procedure. The default is an empty collection.\n  overload: System.Data.OracleClient.OracleCommand.Parameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.Prepare\n  id: Prepare\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: Prepare()\n  nameWithType: OracleCommand.Prepare()\n  fullName: System.Data.OracleClient.OracleCommand.Prepare()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Creates a prepared (or compiled) version of the command at the data source.\n  remarks: Before you call Prepare, specify the data type of each parameter in the statement to be prepared.\n  syntax:\n    content: public override void Prepare ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleCommand.Prepare*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref:System.Data.OracleClient.OracleCommand.Connection*> is not set.  \\n  \\n -or-  \\n  \\n The <xref:System.Data.OracleClient.OracleCommand.Connection*> is not <xref:System.Data.OracleClient.OracleConnection.Open*>.\"\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.ResetCommandTimeout\n  id: ResetCommandTimeout\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: ResetCommandTimeout()\n  nameWithType: OracleCommand.ResetCommandTimeout()\n  fullName: System.Data.OracleClient.OracleCommand.ResetCommandTimeout()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Resets the <xref:System.Data.OracleClient.OracleCommand.CommandTimeout*> property to the default value.\n  remarks: The default value of the <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> is 30 seconds.\n  syntax:\n    content: public void ResetCommandTimeout ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleCommand.ResetCommandTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.Transaction\n  id: Transaction\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: Transaction\n  nameWithType: OracleCommand.Transaction\n  fullName: System.Data.OracleClient.OracleCommand.Transaction\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets the <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref> within which the <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> executes.\n  remarks: You cannot set the Transaction property if it is already set to a specific value, and the command is in the process of executing. If you set the transaction property to an <xref:System.Data.OracleClient.OracleTransaction> object that is not connected to the same <xref:System.Data.OracleClient.OracleConnection> as the <xref:System.Data.OracleClient.OracleCommand> object, an exception will be thrown the next time you attempt to execute a statement.\n  syntax:\n    content: public System.Data.OracleClient.OracleTransaction Transaction { get; set; }\n    return:\n      type: System.Data.OracleClient.OracleTransaction\n      description: An <xref href=\"System.Data.OracleClient.OracleTransaction\"></xref>. The default is a null value.\n  overload: System.Data.OracleClient.OracleCommand.Transaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleCommand.UpdatedRowSource\n  id: UpdatedRowSource\n  parent: System.Data.OracleClient.OracleCommand\n  langs:\n  - csharp\n  name: UpdatedRowSource\n  nameWithType: OracleCommand.UpdatedRowSource\n  fullName: System.Data.OracleClient.OracleCommand.UpdatedRowSource\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets a value that specifies how the <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> method should apply command results to the <xref href=\"System.Data.DataRow\"></xref>.\n  remarks: \"The default <xref:System.Data.UpdateRowSource> value is `Both` unless the command is automatically generated (as in the case of the <xref:System.Data.OracleClient.OracleCommandBuilder>), in which case the default is `None`.  \\n  \\n For more information about using the <xref:System.Data.UpdateRowSource> property, see [DataAdapter Parameters](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }\n    return:\n      type: System.Data.UpdateRowSource\n      description: One of the <xref href=\"System.Data.UpdateRowSource\"></xref> values.\n  overload: System.Data.OracleClient.OracleCommand.UpdatedRowSource*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value entered was not one of the <xref href=\"System.Data.UpdateRowSource\"></xref> values.\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.DbCommand\n  isExternal: false\n  name: System.Data.Common.DbCommand\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Data.OracleClient.OracleCommand.#ctor\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: OracleCommand()\n  nameWithType: OracleCommand.OracleCommand()\n  fullName: System.Data.OracleClient.OracleCommand.OracleCommand()\n- uid: System.Data.OracleClient.OracleCommand.#ctor(System.String)\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: OracleCommand(String)\n  nameWithType: OracleCommand.OracleCommand(String)\n  fullName: System.Data.OracleClient.OracleCommand.OracleCommand(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection)\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: OracleCommand(String,OracleConnection)\n  nameWithType: OracleCommand.OracleCommand(String,OracleConnection)\n  fullName: System.Data.OracleClient.OracleCommand.OracleCommand(String,OracleConnection)\n- uid: System.Data.OracleClient.OracleConnection\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleConnection\n  nameWithType: OracleConnection\n  fullName: System.Data.OracleClient.OracleConnection\n- uid: System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction)\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: OracleCommand(String,OracleConnection,OracleTransaction)\n  nameWithType: OracleCommand.OracleCommand(String,OracleConnection,OracleTransaction)\n  fullName: System.Data.OracleClient.OracleCommand.OracleCommand(String,OracleConnection,OracleTransaction)\n- uid: System.Data.OracleClient.OracleTransaction\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleTransaction\n  nameWithType: OracleTransaction\n  fullName: System.Data.OracleClient.OracleTransaction\n- uid: System.Data.OracleClient.OracleCommand.Cancel\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Cancel()\n  nameWithType: OracleCommand.Cancel()\n  fullName: System.Data.OracleClient.OracleCommand.Cancel()\n- uid: System.Data.OracleClient.OracleCommand.Clone\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Clone()\n  nameWithType: OracleCommand.Clone()\n  fullName: System.Data.OracleClient.OracleCommand.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.OracleClient.OracleCommand.CommandText\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CommandText\n  nameWithType: OracleCommand.CommandText\n  fullName: System.Data.OracleClient.OracleCommand.CommandText\n- uid: System.Data.OracleClient.OracleCommand.CommandTimeout\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CommandTimeout\n  nameWithType: OracleCommand.CommandTimeout\n  fullName: System.Data.OracleClient.OracleCommand.CommandTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.OracleClient.OracleCommand.CommandType\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CommandType\n  nameWithType: OracleCommand.CommandType\n  fullName: System.Data.OracleClient.OracleCommand.CommandType\n- uid: System.Data.CommandType\n  parent: System.Data\n  isExternal: false\n  name: CommandType\n  nameWithType: CommandType\n  fullName: System.Data.CommandType\n- uid: System.Data.OracleClient.OracleCommand.Connection\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Connection\n  nameWithType: OracleCommand.Connection\n  fullName: System.Data.OracleClient.OracleCommand.Connection\n- uid: System.Data.OracleClient.OracleCommand.CreateDbParameter\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CreateDbParameter()\n  nameWithType: OracleCommand.CreateDbParameter()\n  fullName: System.Data.OracleClient.OracleCommand.CreateDbParameter()\n- uid: System.Data.Common.DbParameter\n  parent: System.Data.Common\n  isExternal: false\n  name: DbParameter\n  nameWithType: DbParameter\n  fullName: System.Data.Common.DbParameter\n- uid: System.Data.OracleClient.OracleCommand.CreateParameter\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CreateParameter()\n  nameWithType: OracleCommand.CreateParameter()\n  fullName: System.Data.OracleClient.OracleCommand.CreateParameter()\n- uid: System.Data.OracleClient.OracleParameter\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleParameter\n  nameWithType: OracleParameter\n  fullName: System.Data.OracleClient.OracleParameter\n- uid: System.Data.OracleClient.OracleCommand.DbConnection\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: DbConnection\n  nameWithType: OracleCommand.DbConnection\n  fullName: System.Data.OracleClient.OracleCommand.DbConnection\n- uid: System.Data.Common.DbConnection\n  parent: System.Data.Common\n  isExternal: false\n  name: DbConnection\n  nameWithType: DbConnection\n  fullName: System.Data.Common.DbConnection\n- uid: System.Data.OracleClient.OracleCommand.DbParameterCollection\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: DbParameterCollection\n  nameWithType: OracleCommand.DbParameterCollection\n  fullName: System.Data.OracleClient.OracleCommand.DbParameterCollection\n- uid: System.Data.Common.DbParameterCollection\n  parent: System.Data.Common\n  isExternal: false\n  name: DbParameterCollection\n  nameWithType: DbParameterCollection\n  fullName: System.Data.Common.DbParameterCollection\n- uid: System.Data.OracleClient.OracleCommand.DbTransaction\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: DbTransaction\n  nameWithType: OracleCommand.DbTransaction\n  fullName: System.Data.OracleClient.OracleCommand.DbTransaction\n- uid: System.Data.Common.DbTransaction\n  parent: System.Data.Common\n  isExternal: false\n  name: DbTransaction\n  nameWithType: DbTransaction\n  fullName: System.Data.Common.DbTransaction\n- uid: System.Data.OracleClient.OracleCommand.DesignTimeVisible\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: DesignTimeVisible\n  nameWithType: OracleCommand.DesignTimeVisible\n  fullName: System.Data.OracleClient.OracleCommand.DesignTimeVisible\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.OracleClient.OracleCommand.ExecuteDbDataReader(System.Data.CommandBehavior)\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteDbDataReader(CommandBehavior)\n  nameWithType: OracleCommand.ExecuteDbDataReader(CommandBehavior)\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteDbDataReader(CommandBehavior)\n- uid: System.Data.Common.DbDataReader\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataReader\n  nameWithType: DbDataReader\n  fullName: System.Data.Common.DbDataReader\n- uid: System.Data.CommandBehavior\n  parent: System.Data\n  isExternal: false\n  name: CommandBehavior\n  nameWithType: CommandBehavior\n  fullName: System.Data.CommandBehavior\n- uid: System.Data.OracleClient.OracleCommand.ExecuteNonQuery\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteNonQuery()\n  nameWithType: OracleCommand.ExecuteNonQuery()\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteNonQuery()\n- uid: System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery(System.Data.OracleClient.OracleString@)\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteOracleNonQuery(OracleString)\n  nameWithType: OracleCommand.ExecuteOracleNonQuery(OracleString)\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery(OracleString)\n- uid: System.Data.OracleClient.OracleString\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleString\n  nameWithType: OracleString\n  fullName: System.Data.OracleClient.OracleString\n- uid: System.Data.OracleClient.OracleCommand.ExecuteOracleScalar\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteOracleScalar()\n  nameWithType: OracleCommand.ExecuteOracleScalar()\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteOracleScalar()\n- uid: System.Data.OracleClient.OracleCommand.ExecuteReader\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteReader()\n  nameWithType: OracleCommand.ExecuteReader()\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteReader()\n- uid: System.Data.OracleClient.OracleDataReader\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleDataReader\n  nameWithType: OracleDataReader\n  fullName: System.Data.OracleClient.OracleDataReader\n- uid: System.Data.OracleClient.OracleCommand.ExecuteReader(System.Data.CommandBehavior)\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteReader(CommandBehavior)\n  nameWithType: OracleCommand.ExecuteReader(CommandBehavior)\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteReader(CommandBehavior)\n- uid: System.Data.OracleClient.OracleCommand.ExecuteScalar\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteScalar()\n  nameWithType: OracleCommand.ExecuteScalar()\n  fullName: System.Data.OracleClient.OracleCommand.ExecuteScalar()\n- uid: System.Data.OracleClient.OracleCommand.Parameters\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Parameters\n  nameWithType: OracleCommand.Parameters\n  fullName: System.Data.OracleClient.OracleCommand.Parameters\n- uid: System.Data.OracleClient.OracleParameterCollection\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleParameterCollection\n  nameWithType: OracleParameterCollection\n  fullName: System.Data.OracleClient.OracleParameterCollection\n- uid: System.Data.OracleClient.OracleCommand.Prepare\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Prepare()\n  nameWithType: OracleCommand.Prepare()\n  fullName: System.Data.OracleClient.OracleCommand.Prepare()\n- uid: System.Data.OracleClient.OracleCommand.ResetCommandTimeout\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ResetCommandTimeout()\n  nameWithType: OracleCommand.ResetCommandTimeout()\n  fullName: System.Data.OracleClient.OracleCommand.ResetCommandTimeout()\n- uid: System.Data.OracleClient.OracleCommand.Transaction\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Transaction\n  nameWithType: OracleCommand.Transaction\n  fullName: System.Data.OracleClient.OracleCommand.Transaction\n- uid: System.Data.OracleClient.OracleCommand.UpdatedRowSource\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: UpdatedRowSource\n  nameWithType: OracleCommand.UpdatedRowSource\n  fullName: System.Data.OracleClient.OracleCommand.UpdatedRowSource\n- uid: System.Data.UpdateRowSource\n  parent: System.Data\n  isExternal: false\n  name: UpdateRowSource\n  nameWithType: UpdateRowSource\n  fullName: System.Data.UpdateRowSource\n- uid: System.Data.OracleClient.OracleCommand.#ctor*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: OracleCommand\n  nameWithType: OracleCommand.OracleCommand\n- uid: System.Data.OracleClient.OracleCommand.Cancel*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Cancel\n  nameWithType: OracleCommand.Cancel\n- uid: System.Data.OracleClient.OracleCommand.Clone*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Clone\n  nameWithType: OracleCommand.Clone\n- uid: System.Data.OracleClient.OracleCommand.CommandText*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CommandText\n  nameWithType: OracleCommand.CommandText\n- uid: System.Data.OracleClient.OracleCommand.CommandTimeout*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CommandTimeout\n  nameWithType: OracleCommand.CommandTimeout\n- uid: System.Data.OracleClient.OracleCommand.CommandType*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CommandType\n  nameWithType: OracleCommand.CommandType\n- uid: System.Data.OracleClient.OracleCommand.Connection*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Connection\n  nameWithType: OracleCommand.Connection\n- uid: System.Data.OracleClient.OracleCommand.CreateDbParameter*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CreateDbParameter\n  nameWithType: OracleCommand.CreateDbParameter\n- uid: System.Data.OracleClient.OracleCommand.CreateParameter*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: CreateParameter\n  nameWithType: OracleCommand.CreateParameter\n- uid: System.Data.OracleClient.OracleCommand.DbConnection*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: DbConnection\n  nameWithType: OracleCommand.DbConnection\n- uid: System.Data.OracleClient.OracleCommand.DbParameterCollection*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: DbParameterCollection\n  nameWithType: OracleCommand.DbParameterCollection\n- uid: System.Data.OracleClient.OracleCommand.DbTransaction*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: DbTransaction\n  nameWithType: OracleCommand.DbTransaction\n- uid: System.Data.OracleClient.OracleCommand.DesignTimeVisible*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: DesignTimeVisible\n  nameWithType: OracleCommand.DesignTimeVisible\n- uid: System.Data.OracleClient.OracleCommand.ExecuteDbDataReader*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteDbDataReader\n  nameWithType: OracleCommand.ExecuteDbDataReader\n- uid: System.Data.OracleClient.OracleCommand.ExecuteNonQuery*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteNonQuery\n  nameWithType: OracleCommand.ExecuteNonQuery\n- uid: System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteOracleNonQuery\n  nameWithType: OracleCommand.ExecuteOracleNonQuery\n- uid: System.Data.OracleClient.OracleCommand.ExecuteOracleScalar*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteOracleScalar\n  nameWithType: OracleCommand.ExecuteOracleScalar\n- uid: System.Data.OracleClient.OracleCommand.ExecuteReader*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteReader\n  nameWithType: OracleCommand.ExecuteReader\n- uid: System.Data.OracleClient.OracleCommand.ExecuteScalar*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ExecuteScalar\n  nameWithType: OracleCommand.ExecuteScalar\n- uid: System.Data.OracleClient.OracleCommand.Parameters*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Parameters\n  nameWithType: OracleCommand.Parameters\n- uid: System.Data.OracleClient.OracleCommand.Prepare*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Prepare\n  nameWithType: OracleCommand.Prepare\n- uid: System.Data.OracleClient.OracleCommand.ResetCommandTimeout*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: ResetCommandTimeout\n  nameWithType: OracleCommand.ResetCommandTimeout\n- uid: System.Data.OracleClient.OracleCommand.Transaction*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: Transaction\n  nameWithType: OracleCommand.Transaction\n- uid: System.Data.OracleClient.OracleCommand.UpdatedRowSource*\n  parent: System.Data.OracleClient.OracleCommand\n  isExternal: false\n  name: UpdatedRowSource\n  nameWithType: OracleCommand.UpdatedRowSource\n"}