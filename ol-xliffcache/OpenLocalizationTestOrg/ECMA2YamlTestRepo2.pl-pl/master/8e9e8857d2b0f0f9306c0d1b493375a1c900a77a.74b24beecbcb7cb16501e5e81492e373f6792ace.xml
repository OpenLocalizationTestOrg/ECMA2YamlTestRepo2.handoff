{"nodes":[{"pos":[521,670],"content":"Provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings.","pos":[0,149]}]},{"pos":[682,1362],"content":"The properties contained in the ReliableSession class are the subset of those contained in the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement> that are accessible from a predefined binding. This subset consists of the <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> and <xref:System.ServiceModel.ReliableSession.Ordered%2A> properties. The ReliableSession class references the same objects as does the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, so changing the value of one changes the value of the other too. This class gathers these two properties of reliable session binding element together for better discoverability.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The properties contained in the ReliableSession class are the subset of those contained in the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement> that are accessible from a predefined binding. This subset consists of the <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> and <xref:System.ServiceModel.ReliableSession.Ordered%2A> properties. The ReliableSession class references the same objects as does the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, so changing the value of one changes the value of the other too. This class gathers these two properties of reliable session binding element together for better discoverability.","pos":[0,680],"nodes":[{"content":"The properties contained in the ReliableSession class are the subset of those contained in the &lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement&gt; that are accessible from a predefined binding.","pos":[0,207],"source":"The properties contained in the ReliableSession class are the subset of those contained in the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement> that are accessible from a predefined binding."},{"content":"This subset consists of the &lt;xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A&gt; and &lt;xref:System.ServiceModel.ReliableSession.Ordered%2A&gt; properties.","pos":[208,369],"source":" This subset consists of the <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> and <xref:System.ServiceModel.ReliableSession.Ordered%2A> properties."},{"content":"The ReliableSession class references the same objects as does the &lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement&gt;, so changing the value of one changes the value of the other too.","pos":[370,567],"source":" The ReliableSession class references the same objects as does the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, so changing the value of one changes the value of the other too."},{"content":"This class gathers these two properties of reliable session binding element together for better discoverability.","pos":[568,680]}]}]},{"pos":[2268,2365],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.ReliableSession\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.ReliableSession\"></xref> class."},{"pos":[3110,3247],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.ReliableSession\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from a reliable session binding element.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.ReliableSession\"></xref> class from a reliable session binding element."},{"pos":[3754,3904],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose property values are used to initialize the reliable session.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"></xref> whose property values are used to initialize the reliable session."},{"pos":[4076,4187],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">reliableSessionBindingElement</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>reliableSessionBindingElement</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4603,4686],"content":"Gets or sets an interval of time that a service can remain inactive before closing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an interval of time that a service can remain inactive before closing.","pos":[0,83]}]},{"pos":[4699,7255],"content":"The property gets and sets the value of the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A> property.       Activity on a channel is defined as receiving an application or infrastructure message. The inactivity timeout property controls the maximum amount of time to keep an inactive session alive. If more than the InactivityTimeout specified time interval passes with no activity, the session is aborted by the infrastructure and the channel faults. The reliable session is torn down unilaterally.       If the sending application has no messages to send then the reliable session is normally not faulted because of inactivity; instead a keep-alive mechanism keeps the session active indefinitely. Note that the dispatcher could independently abort the reliable session if no application messages are sent or received. Thus, the inactivity timeout typically expires if network conditions are such that no messages of any sort are received or if there is a failure on the sender.       Setting this timeout prevents the server from holding onto a security session if the client does not close it. If the security session has not received a message for the inactivity interval of time, it is closed by the server. This mitigates a potential denial of service attack.       When using a reliable session, there are two different inactivity timers that must be satisfied to keep the connection alive. If either of these inactivity timers goes off, then the connection is dropped.      -   The first inactivity timer is on the reliable session and is called the InactivityTimeout. This inactivity timer fires if no messages, either application or infrastructure, are received within the timeout period. An infrastructure message is a message that is generated for the purpose of one of the protocols in the channel stack, such as a keep alive or an acknowledgment, rather than containing application data.      -   The second inactivity timer is on the service and uses the <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> setting of the binding. This inactivity timer fires if no application messages are received within the timeout period.       Since the connection is dropped if either inactivity timer fires, increasing InactivityTimeout once it is greater than <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> has no effect. The default for both of these timeouts is 10 minutes, so you always have to increase both of them to make a difference when using a reliable session.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The property gets and sets the value of the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A> property.       Activity on a channel is defined as receiving an application or infrastructure message. The inactivity timeout property controls the maximum amount of time to keep an inactive session alive. If more than the InactivityTimeout specified time interval passes with no activity, the session is aborted by the infrastructure and the channel faults. The reliable session is torn down unilaterally.       If the sending application has no messages to send then the reliable session is normally not faulted because of inactivity; instead a keep-alive mechanism keeps the session active indefinitely. Note that the dispatcher could independently abort the reliable session if no application messages are sent or received. Thus, the inactivity timeout typically expires if network conditions are such that no messages of any sort are received or if there is a failure on the sender.       Setting this timeout prevents the server from holding onto a security session if the client does not close it. If the security session has not received a message for the inactivity interval of time, it is closed by the server. This mitigates a potential denial of service attack.       When using a reliable session, there are two different inactivity timers that must be satisfied to keep the connection alive. If either of these inactivity timers goes off, then the connection is dropped.      -   The first inactivity timer is on the reliable session and is called the InactivityTimeout. This inactivity timer fires if no messages, either application or infrastructure, are received within the timeout period. An infrastructure message is a message that is generated for the purpose of one of the protocols in the channel stack, such as a keep alive or an acknowledgment, rather than containing application data.      -   The second inactivity timer is on the service and uses the <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> setting of the binding. This inactivity timer fires if no application messages are received within the timeout period.       Since the connection is dropped if either inactivity timer fires, increasing InactivityTimeout once it is greater than <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> has no effect. The default for both of these timeouts is 10 minutes, so you always have to increase both of them to make a difference when using a reliable session.","pos":[0,2542],"nodes":[{"content":"The property gets and sets the value of the &lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A&gt; property.","pos":[0,140],"source":"The property gets and sets the value of the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A> property."},{"content":"Activity on a channel is defined as receiving an application or infrastructure message.","pos":[147,234]},{"content":"The inactivity timeout property controls the maximum amount of time to keep an inactive session alive.","pos":[235,337]},{"content":"If more than the InactivityTimeout specified time interval passes with no activity, the session is aborted by the infrastructure and the channel faults.","pos":[338,490]},{"content":"The reliable session is torn down unilaterally.","pos":[491,538]},{"content":"If the sending application has no messages to send then the reliable session is normally not faulted because of inactivity; instead a keep-alive mechanism keeps the session active indefinitely.","pos":[545,738]},{"content":"Note that the dispatcher could independently abort the reliable session if no application messages are sent or received.","pos":[739,859]},{"content":"Thus, the inactivity timeout typically expires if network conditions are such that no messages of any sort are received or if there is a failure on the sender.","pos":[860,1019]},{"content":"Setting this timeout prevents the server from holding onto a security session if the client does not close it.","pos":[1026,1136]},{"content":"If the security session has not received a message for the inactivity interval of time, it is closed by the server.","pos":[1137,1252]},{"content":"This mitigates a potential denial of service attack.","pos":[1253,1305]},{"content":"When using a reliable session, there are two different inactivity timers that must be satisfied to keep the connection alive.","pos":[1312,1437]},{"content":"If either of these inactivity timers goes off, then the connection is dropped.","pos":[1438,1516]},{"content":"-   The first inactivity timer is on the reliable session and is called the InactivityTimeout.","pos":[1522,1616]},{"content":"This inactivity timer fires if no messages, either application or infrastructure, are received within the timeout period.","pos":[1617,1738]},{"content":"An infrastructure message is a message that is generated for the purpose of one of the protocols in the channel stack, such as a keep alive or an acknowledgment, rather than containing application data.","pos":[1739,1941]},{"content":"-   The second inactivity timer is on the service and uses the &lt;xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A&gt; setting of the binding.","pos":[1947,2095],"source":"      -   The second inactivity timer is on the service and uses the <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> setting of the binding."},{"content":"This inactivity timer fires if no application messages are received within the timeout period.","pos":[2096,2190]},{"content":"Since the connection is dropped if either inactivity timer fires, increasing InactivityTimeout once it is greater than &lt;xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A&gt; has no effect.","pos":[2197,2392],"source":"       Since the connection is dropped if either inactivity timer fires, increasing InactivityTimeout once it is greater than <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> has no effect."},{"content":"The default for both of these timeouts is 10 minutes, so you always have to increase both of them to make a difference when using a reliable session.","pos":[2393,2542]}]}]},{"pos":[7599,7742],"content":"The <xref:System.TimeSpan> that specifies the interval of time that a service remains inactive before closing. The default value is 10 minutes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.TimeSpan> that specifies the interval of time that a service remains inactive before closing. The default value is 10 minutes.","pos":[0,143],"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; that specifies the interval of time that a service remains inactive before closing.","pos":[0,110],"source":"The <xref:System.TimeSpan> that specifies the interval of time that a service remains inactive before closing."},{"content":"The default value is 10 minutes.","pos":[111,143]}]}]},{"pos":[7938,7982],"content":"The value set is less than or equal to zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value set is less than or equal to zero.","pos":[0,44]}]},{"pos":[8348,8460],"content":"Gets or sets a value that indicates whether message delivery must preserve the order in which messages are sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether message delivery must preserve the order in which messages are sent.","pos":[0,112]}]},{"pos":[8472,8602],"content":"The property gets and sets the value of the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The property gets and sets the value of the &lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A&gt; property.","pos":[0,130],"source":"The property gets and sets the value of the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A> property."}]},{"pos":[8930,9215],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if messages must be delivered in the order in which they are sent; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,202],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[203,285],"source":" The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.ReliableSession\n  id: ReliableSession\n  children:\n  - System.ServiceModel.ReliableSession.#ctor\n  - System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)\n  - System.ServiceModel.ReliableSession.InactivityTimeout\n  - System.ServiceModel.ReliableSession.Ordered\n  langs:\n  - csharp\n  name: ReliableSession\n  nameWithType: ReliableSession\n  fullName: System.ServiceModel.ReliableSession\n  type: Class\n  summary: Provides convenient access to the properties of a reliable session binding element that are available when using one of the system-provided bindings.\n  remarks: The properties contained in the ReliableSession class are the subset of those contained in the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement> that are accessible from a predefined binding. This subset consists of the <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> and <xref:System.ServiceModel.ReliableSession.Ordered%2A> properties. The ReliableSession class references the same objects as does the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, so changing the value of one changes the value of the other too. This class gathers these two properties of reliable session binding element together for better discoverability.\n  example:\n  - \"The following example shows how to create a new reliable session, and access and change the property values of that session. The ReliableSession class allows you to write:  \\n  \\n [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/t-system.servicemodel.re_0_1.cs)]\\n [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/t-system.servicemodel.re_0_1.vb)]\"\n  syntax:\n    content: public class ReliableSession\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ReliableSession.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.ReliableSession\n  langs:\n  - csharp\n  name: ReliableSession()\n  nameWithType: ReliableSession.ReliableSession()\n  fullName: System.ServiceModel.ReliableSession.ReliableSession()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.ReliableSession\"></xref> class.\n  syntax:\n    content: public ReliableSession ();\n    parameters: []\n  overload: System.ServiceModel.ReliableSession.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)\n  id: '#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)'\n  parent: System.ServiceModel.ReliableSession\n  langs:\n  - csharp\n  name: ReliableSession(ReliableSessionBindingElement)\n  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)\n  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.ReliableSession\"></xref> class from a reliable session binding element.\n  remarks: ''\n  example:\n  - >-\n    [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/80f1598c-ddfc-4656-a81f-_1.cs)]\n     [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/80f1598c-ddfc-4656-a81f-_1.vb)]\n  syntax:\n    content: public ReliableSession (System.ServiceModel.Channels.ReliableSessionBindingElement reliableSessionBindingElement);\n    parameters:\n    - id: reliableSessionBindingElement\n      type: System.ServiceModel.Channels.ReliableSessionBindingElement\n      description: The <xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"></xref> whose property values are used to initialize the reliable session.\n  overload: System.ServiceModel.ReliableSession.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>reliableSessionBindingElement</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ServiceModel.ReliableSession.InactivityTimeout\n  id: InactivityTimeout\n  parent: System.ServiceModel.ReliableSession\n  langs:\n  - csharp\n  name: InactivityTimeout\n  nameWithType: ReliableSession.InactivityTimeout\n  fullName: System.ServiceModel.ReliableSession.InactivityTimeout\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets or sets an interval of time that a service can remain inactive before closing.\n  remarks: \"The property gets and sets the value of the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A> property.  \\n  \\n Activity on a channel is defined as receiving an application or infrastructure message. The inactivity timeout property controls the maximum amount of time to keep an inactive session alive. If more than the InactivityTimeout specified time interval passes with no activity, the session is aborted by the infrastructure and the channel faults. The reliable session is torn down unilaterally.  \\n  \\n If the sending application has no messages to send then the reliable session is normally not faulted because of inactivity; instead a keep-alive mechanism keeps the session active indefinitely. Note that the dispatcher could independently abort the reliable session if no application messages are sent or received. Thus, the inactivity timeout typically expires if network conditions are such that no messages of any sort are received or if there is a failure on the sender.  \\n  \\n Setting this timeout prevents the server from holding onto a security session if the client does not close it. If the security session has not received a message for the inactivity interval of time, it is closed by the server. This mitigates a potential denial of service attack.  \\n  \\n When using a reliable session, there are two different inactivity timers that must be satisfied to keep the connection alive. If either of these inactivity timers goes off, then the connection is dropped.  \\n  \\n-   The first inactivity timer is on the reliable session and is called the InactivityTimeout. This inactivity timer fires if no messages, either application or infrastructure, are received within the timeout period. An infrastructure message is a message that is generated for the purpose of one of the protocols in the channel stack, such as a keep alive or an acknowledgment, rather than containing application data.  \\n  \\n-   The second inactivity timer is on the service and uses the <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> setting of the binding. This inactivity timer fires if no application messages are received within the timeout period.  \\n  \\n Since the connection is dropped if either inactivity timer fires, increasing InactivityTimeout once it is greater than <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> has no effect. The default for both of these timeouts is 10 minutes, so you always have to increase both of them to make a difference when using a reliable session.\"\n  example:\n  - >-\n    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_0_1.cs)]\n     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_0_1.vb)]\n  syntax:\n    content: public TimeSpan InactivityTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies the interval of time that a service remains inactive before closing. The default value is 10 minutes.\n  overload: System.ServiceModel.ReliableSession.InactivityTimeout*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value set is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.ServiceModel.ReliableSession.Ordered\n  id: Ordered\n  parent: System.ServiceModel.ReliableSession\n  langs:\n  - csharp\n  name: Ordered\n  nameWithType: ReliableSession.Ordered\n  fullName: System.ServiceModel.ReliableSession.Ordered\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets or sets a value that indicates whether message delivery must preserve the order in which messages are sent.\n  remarks: The property gets and sets the value of the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A> property.\n  example:\n  - >-\n    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_1_1.cs)]\n     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_1_1.vb)]\n  syntax:\n    content: public bool Ordered { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.ServiceModel.ReliableSession.Ordered*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ServiceModel.ReliableSession.#ctor\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: ReliableSession()\n  nameWithType: ReliableSession.ReliableSession()\n  fullName: System.ServiceModel.ReliableSession.ReliableSession()\n- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: ReliableSession(ReliableSessionBindingElement)\n  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)\n  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement\n  parent: System.ServiceModel.Channels\n  isExternal: false\n  name: ReliableSessionBindingElement\n  nameWithType: ReliableSessionBindingElement\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement\n- uid: System.ServiceModel.ReliableSession.InactivityTimeout\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: InactivityTimeout\n  nameWithType: ReliableSession.InactivityTimeout\n  fullName: System.ServiceModel.ReliableSession.InactivityTimeout\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.ServiceModel.ReliableSession.Ordered\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: Ordered\n  nameWithType: ReliableSession.Ordered\n  fullName: System.ServiceModel.ReliableSession.Ordered\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.ReliableSession.#ctor*\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: ReliableSession\n  nameWithType: ReliableSession.ReliableSession\n- uid: System.ServiceModel.ReliableSession.InactivityTimeout*\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: InactivityTimeout\n  nameWithType: ReliableSession.InactivityTimeout\n- uid: System.ServiceModel.ReliableSession.Ordered*\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: Ordered\n  nameWithType: ReliableSession.Ordered\n"}