{"nodes":[{"pos":[1416,1494],"content":"Controls the ability to access key containers. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls the ability to access key containers. This class cannot be inherited.","pos":[0,78],"nodes":[{"content":"Controls the ability to access key containers.","pos":[0,46]},{"content":"This class cannot be inherited.","pos":[47,78]}]}]},{"pos":[1506,1574],"content":"This permission is used to provide limited access to key containers.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This permission is used to provide limited access to key containers.","pos":[0,68]}]},{"pos":[3199,3337],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified access.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.KeyContainerPermission\"></xref> class with the specified access."},{"pos":[4072,4185],"content":"A bitwise combination of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"A bitwise combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values."},{"pos":[4364,4501],"content":"<ph id=\"ph1\">&lt;code&gt;flags&lt;/code&gt;</ph> is not a valid combination of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"<code>flags</code> is not a valid combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values."},{"pos":[5103,5265],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with either restricted or unrestricted permission.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.KeyContainerPermission\"></xref> class with either restricted or unrestricted permission."},{"pos":[5277,5361],"content":"Creates either <ph id=\"ph1\">`None`</ph> (fully restricted) or <ph id=\"ph2\">`Unrestricted`</ph> access to key containers.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Creates either `None` (fully restricted) or `Unrestricted` access to key containers."},{"pos":[5575,5658],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."},{"pos":[5837,5942],"content":"<ph id=\"ph1\">&lt;code&gt;state&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>state</code> is not a valid <xref href=\"System.Security.Permissions.PermissionState\"></xref> value."},{"pos":[6840,7026],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified global access and specific key container access rights.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.KeyContainerPermission\"></xref> class with the specified global access and specific key container access rights."},{"pos":[7837,7950],"content":"A bitwise combination of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"A bitwise combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values."},{"pos":[8067,8219],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects identifying specific key container access rights.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"></xref> objects identifying specific key container access rights."},{"pos":[8398,8535],"content":"<ph id=\"ph1\">&lt;code&gt;flags&lt;/code&gt;</ph> is not a valid combination of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"<code>flags</code> is not a valid combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values."},{"pos":[8638,8726],"content":"<ph id=\"ph1\">&lt;code&gt;accessList&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>accessList</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9171,9324],"content":"Gets the collection of <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects associated with the current permission.","needQuote":true,"needEscape":true,"source":"Gets the collection of <xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"></xref> objects associated with the current permission."},{"pos":[9336,9492],"content":"Each <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry> object in the collection specifies the access rights for a specific key container.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Each &lt;xref:System.Security.Permissions.KeyContainerPermissionAccessEntry&gt; object in the collection specifies the access rights for a specific key container.","pos":[0,156],"source":"Each <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry> object in the collection specifies the access rights for a specific key container."}]},{"pos":[9733,10015],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing the <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects for this <bpt id=\"p3\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermission\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\"></xref> containing the <xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"></xref> objects for this <xref href=\"System.Security.Permissions.KeyContainerPermission\"></xref>."},{"pos":[10514,10578],"content":"Creates and returns an identical copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]},{"pos":[10590,10682],"content":"A copy of the permission represents the same access to resources as the original permission.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A copy of the permission represents the same access to resources as the original permission.","pos":[0,92]}]},{"pos":[10849,10882],"content":"A copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]},{"pos":[11373,11477],"content":"Gets the key container permission flags that apply to all key containers associated with the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key container permission flags that apply to all key containers associated with the permission.","pos":[0,104]}]},{"pos":[11489,11534],"content":"The Flags property is set by the constructor.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Flags property is set by the constructor.","pos":[0,45]}]},{"pos":[11735,11848],"content":"A bitwise combination of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"A bitwise combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values."},{"pos":[12465,12535],"content":"Reconstructs a permission with a specified state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]},{"pos":[12547,12915],"content":"The FromXml method reconstructs a <xref:System.Security.Permissions.KeyContainerPermission> object from an XML encoding defined by the <xref:System.Security.SecurityElement> class. Use the <xref:System.Security.Permissions.KeyContainerPermission.ToXml%2A> method to XML-encode the <xref:System.Security.Permissions.KeyContainerPermission>, including state information.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The FromXml method reconstructs a <xref:System.Security.Permissions.KeyContainerPermission> object from an XML encoding defined by the <xref:System.Security.SecurityElement> class. Use the <xref:System.Security.Permissions.KeyContainerPermission.ToXml%2A> method to XML-encode the <xref:System.Security.Permissions.KeyContainerPermission>, including state information.","pos":[0,368],"nodes":[{"content":"The FromXml method reconstructs a &lt;xref:System.Security.Permissions.KeyContainerPermission&gt; object from an XML encoding defined by the &lt;xref:System.Security.SecurityElement&gt; class.","pos":[0,180],"source":"The FromXml method reconstructs a <xref:System.Security.Permissions.KeyContainerPermission> object from an XML encoding defined by the <xref:System.Security.SecurityElement> class."},{"content":"Use the &lt;xref:System.Security.Permissions.KeyContainerPermission.ToXml%2A&gt; method to XML-encode the &lt;xref:System.Security.Permissions.KeyContainerPermission&gt;, including state information.","pos":[181,368],"source":" Use the <xref:System.Security.Permissions.KeyContainerPermission.ToXml%2A> method to XML-encode the <xref:System.Security.Permissions.KeyContainerPermission>, including state information."}]}]},{"pos":[13124,13245],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the XML encoding used to reconstruct the permission.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.SecurityElement\"></xref> that contains the XML encoding used to reconstruct the permission."},{"pos":[13434,13527],"content":"<ph id=\"ph1\">&lt;code&gt;securityElement&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>securityElement</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13623,13776],"content":"<code>securityElement</code> is not a valid permission element.       -or-       The version number of <code>securityElement</code> is not supported.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;securityElement&lt;/code&gt;</ph> is not a valid permission element.","pos":[0,63],"source":"<code>securityElement</code> is not a valid permission element."},{"content":"-or-       The version number of <ph id=\"ph1\">&lt;code&gt;securityElement&lt;/code&gt;</ph> is not supported.","pos":[70,149],"source":"       -or-       The version number of <code>securityElement</code> is not supported."}]},{"pos":[14297,14410],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]},{"pos":[14422,14622],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both individual permissions will pass the intersection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both individual permissions will pass the intersection.","pos":[0,200],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both individual permissions will pass the intersection.","pos":[119,200]}]}]},{"pos":[14830,14936],"content":"A permission to intersect with the current permission. It must be the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to intersect with the current permission. It must be the same type as the current permission.","pos":[0,106],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be the same type as the current permission.","pos":[55,106]}]}]},{"pos":[15008,15227],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the intersection is empty.","pos":[106,219],"source":" This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty."}]},{"pos":[15410,15575],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and does not specify a permission of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"<code>target</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and does not specify a permission of the same type as the current permission."},{"pos":[16100,16182],"content":"Determines whether the current permission is a subset of the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]},{"pos":[16194,16569],"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained in the specified permission. For example, a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access is a subset of a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained in the specified permission. For example, a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access is a subset of a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access.","pos":[0,375],"nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained in the specified permission.","pos":[0,172]},{"content":"For example, a permission for &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags&gt; access is a subset of a permission for &lt;xref:System.Security.Permissions.KeyContainerPermissionFlags&gt; access.","pos":[173,375],"source":" For example, a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access is a subset of a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access."}]}]},{"pos":[16755,16869],"content":"A permission to test for the subset relationship. This permission must be the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to test for the subset relationship. This permission must be the same type as the current permission.","pos":[0,114],"nodes":[{"content":"A permission to test for the subset relationship.","pos":[0,49]},{"content":"This permission must be the same type as the current permission.","pos":[50,114]}]}]},{"pos":[16928,17130],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is a subset of the specified permission; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17314,17479],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and does not specify a permission of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"<code>target</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and does not specify a permission of the same type as the current permission."},{"pos":[17933,17991],"content":"Determines whether the current permission is unrestricted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current permission is unrestricted.","pos":[0,58]}]},{"pos":[18003,18093],"content":"An unrestricted permission represents access to all resources protected by the permission.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An unrestricted permission represents access to all resources protected by the permission.","pos":[0,90]}]},{"pos":[18225,18403],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is unrestricted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18908,18972],"content":"Creates an XML encoding of the permission and its current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]},{"pos":[18984,19147],"content":"Use the <xref:System.Security.Permissions.KeyContainerPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Security.Permissions.KeyContainerPermission.FromXml%2A&gt; method to restore the state information from a &lt;xref:System.Security.SecurityElement&gt;.","pos":[0,163],"source":"Use the <xref:System.Security.Permissions.KeyContainerPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>."}]},{"pos":[19323,19455],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains an XML encoding of the permission, including state information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.SecurityElement\"></xref> that contains an XML encoding of the permission, including state information."},{"pos":[20042,20136],"content":"Creates a permission that is the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]},{"pos":[20148,20358],"content":"The result of a call to Union is a permission that represents all operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The result of a call to Union is a permission that represents all operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","pos":[0,210],"nodes":[{"content":"The result of a call to Union is a permission that represents all operations represented by both the current permission and the specified permission.","pos":[0,149]},{"content":"Any demand that passes either permission passes their union.","pos":[150,210]}]}]},{"pos":[20562,20669],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]},{"pos":[20741,20839],"content":"A new permission that represents the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]},{"pos":[21018,21183],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and does not specify a permission of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"<code>target</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and does not specify a permission of the same type as the current permission."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.KeyContainerPermission\n  id: KeyContainerPermission\n  children:\n  - System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags)\n  - System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])\n  - System.Security.Permissions.KeyContainerPermission.AccessEntries\n  - System.Security.Permissions.KeyContainerPermission.Copy\n  - System.Security.Permissions.KeyContainerPermission.Flags\n  - System.Security.Permissions.KeyContainerPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.KeyContainerPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.KeyContainerPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.KeyContainerPermission.IsUnrestricted\n  - System.Security.Permissions.KeyContainerPermission.ToXml\n  - System.Security.Permissions.KeyContainerPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: KeyContainerPermission\n  nameWithType: KeyContainerPermission\n  fullName: System.Security.Permissions.KeyContainerPermission\n  type: Class\n  summary: Controls the ability to access key containers. This class cannot be inherited.\n  remarks: This permission is used to provide limited access to key containers.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class KeyContainerPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags)\n  id: '#ctor(System.Security.Permissions.KeyContainerPermissionFlags)'\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: KeyContainerPermission(KeyContainerPermissionFlags)\n  nameWithType: KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags)\n  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.KeyContainerPermission\"></xref> class with the specified access.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the KeyContainerPermission constructor.  \\n  \\n [!code-cs[System.Security.Permissions.KeyContainerPermission#20](~/add/codesnippet/csharp/dcb7bb7e-ef30-44de-aaf3-_1.cs)]\\n [!code-cpp[System.Security.Permissions.KeyContainerPermission#20](~/add/codesnippet/cpp/dcb7bb7e-ef30-44de-aaf3-_1.cpp)]\\n [!code-vb[System.Security.Permissions.KeyContainerPermission#20](~/add/codesnippet/visualbasic/dcb7bb7e-ef30-44de-aaf3-_1.vb)]\"\n  syntax:\n    content: public KeyContainerPermission (System.Security.Permissions.KeyContainerPermissionFlags flags);\n    parameters:\n    - id: flags\n      type: System.Security.Permissions.KeyContainerPermissionFlags\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values.\n  overload: System.Security.Permissions.KeyContainerPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>flags</code> is not a valid combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values.\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: KeyContainerPermission(PermissionState)\n  nameWithType: KeyContainerPermission.KeyContainerPermission(PermissionState)\n  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.KeyContainerPermission\"></xref> class with either restricted or unrestricted permission.\n  remarks: Creates either `None` (fully restricted) or `Unrestricted` access to key containers.\n  syntax:\n    content: public KeyContainerPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Security.Permissions.KeyContainerPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>state</code> is not a valid <xref href=\"System.Security.Permissions.PermissionState\"></xref> value.\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])\n  id: '#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])'\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])\n  nameWithType: KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])\n  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.KeyContainerPermission\"></xref> class with the specified global access and specific key container access rights.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the KeyContainerPermission constructor.  \\n  \\n [!code-cs[System.Security.Permissions.KeyContainerPermission#13](~/add/codesnippet/csharp/504c0c1a-d76c-49a6-8315-_1.cs)]\\n [!code-cpp[System.Security.Permissions.KeyContainerPermission#13](~/add/codesnippet/cpp/504c0c1a-d76c-49a6-8315-_1.cpp)]\\n [!code-vb[System.Security.Permissions.KeyContainerPermission#13](~/add/codesnippet/visualbasic/504c0c1a-d76c-49a6-8315-_1.vb)]\"\n  syntax:\n    content: public KeyContainerPermission (System.Security.Permissions.KeyContainerPermissionFlags flags, System.Security.Permissions.KeyContainerPermissionAccessEntry[] accessList);\n    parameters:\n    - id: flags\n      type: System.Security.Permissions.KeyContainerPermissionFlags\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values.\n    - id: accessList\n      type: System.Security.Permissions.KeyContainerPermissionAccessEntry[]\n      description: An array of <xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"></xref> objects identifying specific key container access rights.\n  overload: System.Security.Permissions.KeyContainerPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>flags</code> is not a valid combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>accessList</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.AccessEntries\n  id: AccessEntries\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: AccessEntries\n  nameWithType: KeyContainerPermission.AccessEntries\n  fullName: System.Security.Permissions.KeyContainerPermission.AccessEntries\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets the collection of <xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"></xref> objects associated with the current permission.\n  remarks: Each <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry> object in the collection specifies the access rights for a specific key container.\n  syntax:\n    content: public System.Security.Permissions.KeyContainerPermissionAccessEntryCollection AccessEntries { get; }\n    return:\n      type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n      description: A <xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\"></xref> containing the <xref href=\"System.Security.Permissions.KeyContainerPermissionAccessEntry\"></xref> objects for this <xref href=\"System.Security.Permissions.KeyContainerPermission\"></xref>.\n  overload: System.Security.Permissions.KeyContainerPermission.AccessEntries*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: KeyContainerPermission.Copy()\n  fullName: System.Security.Permissions.KeyContainerPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of the permission represents the same access to resources as the original permission.\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.KeyContainerPermission.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.Flags\n  id: Flags\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: KeyContainerPermission.Flags\n  fullName: System.Security.Permissions.KeyContainerPermission.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets the key container permission flags that apply to all key containers associated with the permission.\n  remarks: The Flags property is set by the constructor.\n  syntax:\n    content: public System.Security.Permissions.KeyContainerPermissionFlags Flags { get; }\n    return:\n      type: System.Security.Permissions.KeyContainerPermissionFlags\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.KeyContainerPermissionFlags\"></xref> values.\n  overload: System.Security.Permissions.KeyContainerPermission.Flags*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: KeyContainerPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.KeyContainerPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  remarks: The FromXml method reconstructs a <xref:System.Security.Permissions.KeyContainerPermission> object from an XML encoding defined by the <xref:System.Security.SecurityElement> class. Use the <xref:System.Security.Permissions.KeyContainerPermission.ToXml%2A> method to XML-encode the <xref:System.Security.Permissions.KeyContainerPermission>, including state information.\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement securityElement);\n    parameters:\n    - id: securityElement\n      type: System.Security.SecurityElement\n      description: A <xref href=\"System.Security.SecurityElement\"></xref> that contains the XML encoding used to reconstruct the permission.\n  overload: System.Security.Permissions.KeyContainerPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>securityElement</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>securityElement</code> is not a valid permission element.  \\n  \\n -or-  \\n  \\n The version number of <code>securityElement</code> is not supported.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: KeyContainerPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.KeyContainerPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both individual permissions will pass the intersection.\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.\n  overload: System.Security.Permissions.KeyContainerPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>target</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and does not specify a permission of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: KeyContainerPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.KeyContainerPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained in the specified permission. For example, a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access is a subset of a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access.\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to test for the subset relationship. This permission must be the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.KeyContainerPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>target</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and does not specify a permission of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: KeyContainerPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.KeyContainerPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is unrestricted.\n  remarks: An unrestricted permission represents access to all resources protected by the permission.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.KeyContainerPermission.IsUnrestricted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: KeyContainerPermission.ToXml()\n  fullName: System.Security.Permissions.KeyContainerPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  remarks: Use the <xref:System.Security.Permissions.KeyContainerPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: A <xref href=\"System.Security.SecurityElement\"></xref> that contains an XML encoding of the permission, including state information.\n  overload: System.Security.Permissions.KeyContainerPermission.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.KeyContainerPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.KeyContainerPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: KeyContainerPermission.Union(IPermission)\n  fullName: System.Security.Permissions.KeyContainerPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: The result of a call to Union is a permission that represents all operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.KeyContainerPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>target</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and does not specify a permission of the same type as the current permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags)\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: KeyContainerPermission(KeyContainerPermissionFlags)\n  nameWithType: KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags)\n  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags)\n- uid: System.Security.Permissions.KeyContainerPermissionFlags\n  parent: System.Security.Permissions\n  isExternal: false\n  name: KeyContainerPermissionFlags\n  nameWithType: KeyContainerPermissionFlags\n  fullName: System.Security.Permissions.KeyContainerPermissionFlags\n- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: KeyContainerPermission(PermissionState)\n  nameWithType: KeyContainerPermission.KeyContainerPermission(PermissionState)\n  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])\n  nameWithType: KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])\n  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])\n- uid: System.Security.Permissions.KeyContainerPermissionAccessEntry[]\n  parent: System.Security.Permissions\n  isExternal: false\n  name: KeyContainerPermissionAccessEntry\n  nameWithType: KeyContainerPermissionAccessEntry\n  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntry[]\n  spec.csharp:\n  - uid: System.Security.Permissions.KeyContainerPermissionAccessEntry\n    name: KeyContainerPermissionAccessEntry\n    nameWithType: KeyContainerPermissionAccessEntry\n    fullName: KeyContainerPermissionAccessEntry[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Permissions.KeyContainerPermission.AccessEntries\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: AccessEntries\n  nameWithType: KeyContainerPermission.AccessEntries\n  fullName: System.Security.Permissions.KeyContainerPermission.AccessEntries\n- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  parent: System.Security.Permissions\n  isExternal: false\n  name: KeyContainerPermissionAccessEntryCollection\n  nameWithType: KeyContainerPermissionAccessEntryCollection\n  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n- uid: System.Security.Permissions.KeyContainerPermission.Copy\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: KeyContainerPermission.Copy()\n  fullName: System.Security.Permissions.KeyContainerPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.KeyContainerPermission.Flags\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: Flags\n  nameWithType: KeyContainerPermission.Flags\n  fullName: System.Security.Permissions.KeyContainerPermission.Flags\n- uid: System.Security.Permissions.KeyContainerPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: KeyContainerPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.KeyContainerPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.KeyContainerPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: KeyContainerPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.KeyContainerPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.KeyContainerPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: KeyContainerPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.KeyContainerPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.KeyContainerPermission.IsUnrestricted\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: KeyContainerPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.KeyContainerPermission.IsUnrestricted()\n- uid: System.Security.Permissions.KeyContainerPermission.ToXml\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: KeyContainerPermission.ToXml()\n  fullName: System.Security.Permissions.KeyContainerPermission.ToXml()\n- uid: System.Security.Permissions.KeyContainerPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: KeyContainerPermission.Union(IPermission)\n  fullName: System.Security.Permissions.KeyContainerPermission.Union(IPermission)\n- uid: System.Security.Permissions.KeyContainerPermission.#ctor*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: KeyContainerPermission\n  nameWithType: KeyContainerPermission.KeyContainerPermission\n- uid: System.Security.Permissions.KeyContainerPermission.AccessEntries*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: AccessEntries\n  nameWithType: KeyContainerPermission.AccessEntries\n- uid: System.Security.Permissions.KeyContainerPermission.Copy*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: Copy\n  nameWithType: KeyContainerPermission.Copy\n- uid: System.Security.Permissions.KeyContainerPermission.Flags*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: Flags\n  nameWithType: KeyContainerPermission.Flags\n- uid: System.Security.Permissions.KeyContainerPermission.FromXml*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: KeyContainerPermission.FromXml\n- uid: System.Security.Permissions.KeyContainerPermission.Intersect*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: KeyContainerPermission.Intersect\n- uid: System.Security.Permissions.KeyContainerPermission.IsSubsetOf*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: KeyContainerPermission.IsSubsetOf\n- uid: System.Security.Permissions.KeyContainerPermission.IsUnrestricted*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: KeyContainerPermission.IsUnrestricted\n- uid: System.Security.Permissions.KeyContainerPermission.ToXml*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: KeyContainerPermission.ToXml\n- uid: System.Security.Permissions.KeyContainerPermission.Union*\n  parent: System.Security.Permissions.KeyContainerPermission\n  isExternal: false\n  name: Union\n  nameWithType: KeyContainerPermission.Union\n"}