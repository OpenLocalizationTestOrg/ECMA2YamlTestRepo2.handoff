{"nodes":[{"pos":[435,538],"content":"Fixes the address of a static value type field throughout its lifetime. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Fixes the address of a static value type field throughout its lifetime. This class cannot be inherited.","pos":[0,103],"nodes":[{"content":"Fixes the address of a static value type field throughout its lifetime.","pos":[0,71]},{"content":"This class cannot be inherited.","pos":[72,103]}]}]},{"pos":[551,964],"content":"Use the FixedAddressValueTypeAttribute attribute to mark static value types as pinned upon creation.       This attribute is used by the Microsoft Visual C++ compiler.       Static value type fields are created as boxed objects. This means that their address can change as garbage collection is performed. When you apply this attribute to a static value type, its address remains constant during its lifetime.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the FixedAddressValueTypeAttribute attribute to mark static value types as pinned upon creation.       This attribute is used by the Microsoft Visual C++ compiler.       Static value type fields are created as boxed objects. This means that their address can change as garbage collection is performed. When you apply this attribute to a static value type, its address remains constant during its lifetime.","pos":[0,409],"nodes":[{"content":"Use the FixedAddressValueTypeAttribute attribute to mark static value types as pinned upon creation.","pos":[0,100]},{"content":"This attribute is used by the Microsoft Visual C++ compiler.","pos":[107,167]},{"content":"Static value type fields are created as boxed objects.","pos":[174,228]},{"content":"This means that their address can change as garbage collection is performed.","pos":[229,305]},{"content":"When you apply this attribute to a static value type, its address remains constant during its lifetime.","pos":[306,409]}]}]},{"pos":[2534,2658],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.CompilerServices.FixedAddressValueTypeAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.FixedAddressValueTypeAttribute\"></xref> class."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute\n  id: FixedAddressValueTypeAttribute\n  children:\n  - System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor\n  langs:\n  - csharp\n  name: FixedAddressValueTypeAttribute\n  nameWithType: FixedAddressValueTypeAttribute\n  fullName: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute\n  type: Class\n  summary: Fixes the address of a static value type field throughout its lifetime. This class cannot be inherited.\n  remarks: \"Use the FixedAddressValueTypeAttribute attribute to mark static value types as pinned upon creation.  \\n  \\n This attribute is used by the Microsoft Visual C++ compiler.  \\n  \\n Static value type fields are created as boxed objects. This means that their address can change as garbage collection is performed. When you apply this attribute to a static value type, its address remains constant during its lifetime.\"\n  example:\n  - \"The following example illustrates the use of the FixedAddressValueTypeAttribute attribute to pin a static field in memory. It defines an `Age` structure and initializes two classes that have static fields of type `Age`. The second class applies FixedAddressValueTypeAttribute to pin the field's address. A number of memory allocations are made before and after these two objects are instantiated and the garbage collector is invoked. The output from the example shows that although the address of the first `Age` field has changed after garbage collection, the address of the field to which FixedAddressValueTypeAttribute is applied has not.  \\n  \\n [!code-cs[System.Runtime.CompilerServices.FixedAddressValueTypeAttribute#1](~/add/codesnippet/csharp/fixedaddress/example1.cs#1)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Field)]\n\n      public sealed class FixedAddressValueTypeAttribute : Attribute\n  inheritance:\n  - System.Attribute\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor\n  id: '#ctor'\n  parent: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute\n  langs:\n  - csharp\n  name: FixedAddressValueTypeAttribute()\n  nameWithType: FixedAddressValueTypeAttribute.FixedAddressValueTypeAttribute()\n  fullName: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.FixedAddressValueTypeAttribute()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.CompilerServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.FixedAddressValueTypeAttribute\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example illustrates the use of the <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> attribute to pin a static field in memory. It defines an `Age` structure and initializes two classes that have static fields of type `Age`. The second class applies <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> to pin the field's address. A number of memory allocations are made before and after these two objects are instantiated and the garbage collector is invoked. The output from the example shows that although the address of the first `Age` field has changed after garbage collection, the address of the field to which <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> is applied has not.  \\n  \\n [!code-cs[System.Runtime.CompilerServices.FixedAddressValueTypeAttribute#1](~/add/codesnippet/csharp/fixedaddress/example1.cs#1)]\"\n  syntax:\n    content: public FixedAddressValueTypeAttribute ();\n    parameters: []\n  overload: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Attribute\n  isExternal: false\n  name: System.Attribute\n- uid: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor\n  parent: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute\n  isExternal: false\n  name: FixedAddressValueTypeAttribute()\n  nameWithType: FixedAddressValueTypeAttribute.FixedAddressValueTypeAttribute()\n  fullName: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.FixedAddressValueTypeAttribute()\n- uid: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor*\n  parent: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute\n  isExternal: false\n  name: FixedAddressValueTypeAttribute\n  nameWithType: FixedAddressValueTypeAttribute.FixedAddressValueTypeAttribute\n"}