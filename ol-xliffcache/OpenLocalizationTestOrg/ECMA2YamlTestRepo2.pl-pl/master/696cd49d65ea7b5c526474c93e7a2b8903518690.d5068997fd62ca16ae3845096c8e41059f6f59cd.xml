{"nodes":[{"pos":[2119,2252],"content":"Represents the binding element that can produce the sending and receiving channels required for a reliable session between endpoints.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the binding element that can produce the sending and receiving channels required for a reliable session between endpoints.","pos":[0,133]}]},{"pos":[2265,3171],"content":"Provides sessions and optionally provides ordered message delivery. This implemented session can cross SOAP and transport intermediaries.       Each binding element represents a processing step when sending or receiving messages. At runtime, binding elements create the channel factories and listeners that are necessary to build outgoing and incoming channel stacks required to send and receive messages. The ReliableSessionBindingElement provides an optional layer in the stack that can establish a reliable session between endpoints and configure the behavior of this session.       The ReliableSessionBindingElement is provided on the standard bindings in the following table.      |Binding|Default|   |-------------|-------------|   |<xref:System.ServiceModel.NetTcpBinding>|Off|   |<xref:System.ServiceModel.WSHttpBinding>|Off|   |<xref:System.ServiceModel.WSDualHttpBinding>|On (required)|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Provides sessions and optionally provides ordered message delivery. This implemented session can cross SOAP and transport intermediaries.       Each binding element represents a processing step when sending or receiving messages. At runtime, binding elements create the channel factories and listeners that are necessary to build outgoing and incoming channel stacks required to send and receive messages. The ReliableSessionBindingElement provides an optional layer in the stack that can establish a reliable session between endpoints and configure the behavior of this session.       The ReliableSessionBindingElement is provided on the standard bindings in the following table.      |Binding|Default|   |-------------|-------------|   |<xref:System.ServiceModel.NetTcpBinding>|Off|   |<xref:System.ServiceModel.WSHttpBinding>|Off|   |<xref:System.ServiceModel.WSDualHttpBinding>|On (required)|","pos":[0,896],"nodes":[{"content":"Provides sessions and optionally provides ordered message delivery.","pos":[0,67]},{"content":"This implemented session can cross SOAP and transport intermediaries.","pos":[68,137]},{"content":"Each binding element represents a processing step when sending or receiving messages.","pos":[144,229]},{"content":"At runtime, binding elements create the channel factories and listeners that are necessary to build outgoing and incoming channel stacks required to send and receive messages.","pos":[230,405]},{"content":"The ReliableSessionBindingElement provides an optional layer in the stack that can establish a reliable session between endpoints and configure the behavior of this session.","pos":[406,579]},{"content":"The ReliableSessionBindingElement is provided on the standard bindings in the following table.","pos":[586,680]},{"content":"|Binding|Default|   |-------------|-------------|   |&lt;xref:System.ServiceModel.NetTcpBinding&gt;|Off|   |&lt;xref:System.ServiceModel.WSHttpBinding&gt;|Off|   |&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;|On (required)|","pos":[686,896],"source":"      |Binding|Default|   |-------------|-------------|   |<xref:System.ServiceModel.NetTcpBinding>|Off|   |<xref:System.ServiceModel.WSHttpBinding>|Off|   |<xref:System.ServiceModel.WSDualHttpBinding>|On (required)|"}]}]},{"pos":[4672,4792],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"></xref> class."},{"pos":[5554,5765],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that specifies whether message delivery must preserve the order in which messages are sent.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"></xref> class that specifies whether message delivery must preserve the order in which messages are sent."},{"pos":[5922,6207],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if messages must be delivered in the order in which they are sent; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,202],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[203,285],"source":" The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[6840,7007],"content":"Gets or sets the interval of time that a destination waits before sending an acknowledgment to the message source on reliable channels that are created by the factory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the interval of time that a destination waits before sending an acknowledgment to the message source on reliable channels that are created by the factory.","pos":[0,167]}]},{"pos":[7020,7990],"content":"The destination that receives messages on a reliable channel groups the acknowledgments for these messages together into a single message to reduce network traffic and to increase information density on messages. Grouping scales better as traffic increases. It does not attempt to send an acknowledgment for every message it receives as soon as possible, but rather waits for an interval of time, groups together the acknowledgments that have arrived during that interval, and then sends them all together. The first message that is received is the exception; it is acknowledged as soon as it is delivered. Also, if reliable sessions are used with single HTTP connections, as is the case for example with the <xref:System.ServiceModel.WSHttpBinding> but not <xref:System.ServiceModel.WSDualHttpBinding>, then this setting is not used.       The value that is set with the AcknowledgementInterval property is a recommendation to the infrastructure and not a hard limit.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The destination that receives messages on a reliable channel groups the acknowledgments for these messages together into a single message to reduce network traffic and to increase information density on messages. Grouping scales better as traffic increases. It does not attempt to send an acknowledgment for every message it receives as soon as possible, but rather waits for an interval of time, groups together the acknowledgments that have arrived during that interval, and then sends them all together. The first message that is received is the exception; it is acknowledged as soon as it is delivered. Also, if reliable sessions are used with single HTTP connections, as is the case for example with the <xref:System.ServiceModel.WSHttpBinding> but not <xref:System.ServiceModel.WSDualHttpBinding>, then this setting is not used.       The value that is set with the AcknowledgementInterval property is a recommendation to the infrastructure and not a hard limit.","pos":[0,968],"nodes":[{"content":"The destination that receives messages on a reliable channel groups the acknowledgments for these messages together into a single message to reduce network traffic and to increase information density on messages.","pos":[0,212]},{"content":"Grouping scales better as traffic increases.","pos":[213,257]},{"content":"It does not attempt to send an acknowledgment for every message it receives as soon as possible, but rather waits for an interval of time, groups together the acknowledgments that have arrived during that interval, and then sends them all together.","pos":[258,506]},{"content":"The first message that is received is the exception; it is acknowledged as soon as it is delivered.","pos":[507,606]},{"content":"Also, if reliable sessions are used with single HTTP connections, as is the case for example with the &lt;xref:System.ServiceModel.WSHttpBinding&gt; but not &lt;xref:System.ServiceModel.WSDualHttpBinding&gt;, then this setting is not used.","pos":[607,834],"source":" Also, if reliable sessions are used with single HTTP connections, as is the case for example with the <xref:System.ServiceModel.WSHttpBinding> but not <xref:System.ServiceModel.WSDualHttpBinding>, then this setting is not used."},{"content":"The value that is set with the AcknowledgementInterval property is a recommendation to the infrastructure and not a hard limit.","pos":[841,968]}]}]},{"pos":[8128,8298],"content":"The <xref:System.TimeSpan> that specifies the interval of time that a service waits until sending an acknowledgment to the message source. The default value is 2 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.TimeSpan> that specifies the interval of time that a service waits until sending an acknowledgment to the message source. The default value is 2 seconds.","pos":[0,170],"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; that specifies the interval of time that a service waits until sending an acknowledgment to the message source.","pos":[0,138],"source":"The <xref:System.TimeSpan> that specifies the interval of time that a service waits until sending an acknowledgment to the message source."},{"content":"The default value is 2 seconds.","pos":[139,170]}]}]},{"pos":[8523,8567],"content":"The value set is less than or equal to zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value set is less than or equal to zero.","pos":[0,44]}]},{"pos":[9504,9516],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9615,9627],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10754,10766],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10858,10870],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11895,11907],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11966,11978],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13075,13087],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13146,13158],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13733,13796],"content":"Creates a copy of the current reliable session binding element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a copy of the current reliable session binding element.","pos":[0,63]}]},{"pos":[13996,14096],"content":"A <xref:System.ServiceModel.Channels.BindingElement> that is a clone of the current binding element.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.ServiceModel.Channels.BindingElement&gt; that is a clone of the current binding element.","pos":[0,100],"source":"A <xref:System.ServiceModel.Channels.BindingElement> that is a clone of the current binding element."}]},{"pos":[14704,14794],"content":"Gets or sets a value that indicates whether the reliable session has flow control enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the reliable session has flow control enabled.","pos":[0,90]}]},{"pos":[14806,15273],"content":"Flow control is a mechanism that reliable sessions implement to ensure that senders do not send more messages than a receiver can handle. Receivers have a buffer of messages that is used to accommodate message bursts and out-of-order messages. Receivers advertise to senders the amount of space that remains in this buffer in each of their acknowledgements. Senders can use this information to stop sending new messages whenever the receiver has no buffer space left.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Flow control is a mechanism that reliable sessions implement to ensure that senders do not send more messages than a receiver can handle. Receivers have a buffer of messages that is used to accommodate message bursts and out-of-order messages. Receivers advertise to senders the amount of space that remains in this buffer in each of their acknowledgements. Senders can use this information to stop sending new messages whenever the receiver has no buffer space left.","pos":[0,467],"nodes":[{"content":"Flow control is a mechanism that reliable sessions implement to ensure that senders do not send more messages than a receiver can handle.","pos":[0,137]},{"content":"Receivers have a buffer of messages that is used to accommodate message bursts and out-of-order messages.","pos":[138,243]},{"content":"Receivers advertise to senders the amount of space that remains in this buffer in each of their acknowledgements.","pos":[244,357]},{"content":"Senders can use this information to stop sending new messages whenever the receiver has no buffer space left.","pos":[358,467]}]}]},{"pos":[15400,15662],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the reliable session has flow control enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the reliable session has flow control enabled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,185],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the reliable session has flow control enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[186,262],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[16617,16629],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16675,16687],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17299,17379],"content":"Gets or sets an interval of time that a service remains inactive before closing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an interval of time that a service remains inactive before closing.","pos":[0,80]}]},{"pos":[17392,18239],"content":"Activity on a channel is defined as receiving an application or infrastructure message. The inactivity timeout parameter controls the maximum amount of time to keep an inactive session alive. If more than InactivityTimeout time interval passes with no activity, the session is aborted by the infrastructure and the channel faults. The reliable session is torn down unilaterally.       If the sending application has no messages to send then the reliable session is normally not faulted because of inactivity; instead a keep-alive mechanism keeps the session active indefinitely. Note that the dispatcher can independently abort the reliable session if no application messages are sent or received. Thus, the inactivity timeout typically expires if network conditions are such that no messages are received or if there is a failure on the sender.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Activity on a channel is defined as receiving an application or infrastructure message. The inactivity timeout parameter controls the maximum amount of time to keep an inactive session alive. If more than InactivityTimeout time interval passes with no activity, the session is aborted by the infrastructure and the channel faults. The reliable session is torn down unilaterally.       If the sending application has no messages to send then the reliable session is normally not faulted because of inactivity; instead a keep-alive mechanism keeps the session active indefinitely. Note that the dispatcher can independently abort the reliable session if no application messages are sent or received. Thus, the inactivity timeout typically expires if network conditions are such that no messages are received or if there is a failure on the sender.","pos":[0,845],"nodes":[{"content":"Activity on a channel is defined as receiving an application or infrastructure message.","pos":[0,87]},{"content":"The inactivity timeout parameter controls the maximum amount of time to keep an inactive session alive.","pos":[88,191]},{"content":"If more than InactivityTimeout time interval passes with no activity, the session is aborted by the infrastructure and the channel faults.","pos":[192,330]},{"content":"The reliable session is torn down unilaterally.","pos":[331,378]},{"content":"If the sending application has no messages to send then the reliable session is normally not faulted because of inactivity; instead a keep-alive mechanism keeps the session active indefinitely.","pos":[385,578]},{"content":"Note that the dispatcher can independently abort the reliable session if no application messages are sent or received.","pos":[579,697]},{"content":"Thus, the inactivity timeout typically expires if network conditions are such that no messages are received or if there is a failure on the sender.","pos":[698,845]}]}]},{"pos":[18371,18514],"content":"The <xref:System.TimeSpan> that specifies the interval of time that a service remains inactive before closing. The default value is 10 minutes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.TimeSpan> that specifies the interval of time that a service remains inactive before closing. The default value is 10 minutes.","pos":[0,143],"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; that specifies the interval of time that a service remains inactive before closing.","pos":[0,110],"source":"The <xref:System.TimeSpan> that specifies the interval of time that a service remains inactive before closing."},{"content":"The default value is 10 minutes.","pos":[111,143]}]}]},{"pos":[18733,18864],"content":"The value set is less than or equal to zero or greater than either <xref:System.Int32.MaxValue> or <xref:System.TimeSpan.MaxValue>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value set is less than or equal to zero or greater than either &lt;xref:System.Int32.MaxValue&gt; or &lt;xref:System.TimeSpan.MaxValue&gt;.","pos":[0,131],"source":"The value set is less than or equal to zero or greater than either <xref:System.Int32.MaxValue> or <xref:System.TimeSpan.MaxValue>."}]},{"pos":[19377,19469],"content":"Gets or sets the largest number of channels that can be pending during the reliable session.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the largest number of channels that can be pending during the reliable session.","pos":[0,92]}]},{"pos":[19482,19890],"content":"Channels are pending when they are waiting to be accepted. Once that limit is reached, no channels are created and put in pending mode until this number goes down (by accepting pending channels). This is a limit for each listener.       When the threshold is reached and a remote application tries to establish a new reliable session, the request is denied and the open operation that prompted this faults.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Channels are pending when they are waiting to be accepted. Once that limit is reached, no channels are created and put in pending mode until this number goes down (by accepting pending channels). This is a limit for each listener.       When the threshold is reached and a remote application tries to establish a new reliable session, the request is denied and the open operation that prompted this faults.","pos":[0,406],"nodes":[{"content":"Channels are pending when they are waiting to be accepted.","pos":[0,58]},{"content":"Once that limit is reached, no channels are created and put in pending mode until this number goes down (by accepting pending channels).","pos":[59,195]},{"content":"This is a limit for each listener.","pos":[196,230]},{"content":"When the threshold is reached and a remote application tries to establish a new reliable session, the request is denied and the open operation that prompted this faults.","pos":[237,406]}]}]},{"pos":[20015,20090],"content":"The largest number of channels that can be pending. The default value is 4.","needQuote":true,"needEscape":true,"nodes":[{"content":"The largest number of channels that can be pending. The default value is 4.","pos":[0,75],"nodes":[{"content":"The largest number of channels that can be pending.","pos":[0,51]},{"content":"The default value is 4.","pos":[52,75]}]}]},{"pos":[20310,20376],"content":"The value set is less than or equal to zero or greater than 16384.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value set is less than or equal to zero or greater than 16384.","pos":[0,66]}]},{"pos":[20864,20975],"content":"Gets or sets the maximum number of times that a message attempts to be transferred during the reliable session.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum number of times that a message attempts to be transferred during the reliable session.","pos":[0,111]}]},{"pos":[20988,22240],"content":"A message is considered to be transferred if its delivery at the recipient has been acknowledged by the recipient.       If an acknowledgment has not been received within a certain amount of time for a message that has been transmitted, the infrastructure automatically retransmits the message. The infrastructure tries to send the message for, at most, a MaxRetryCount number of times. Not receiving an acknowledgment before this limit is reached is considered a fatal communication failure and causes the channel faulted event to be raised.       The infrastructure uses an exponential back-off algorithm to determine when to retransmit, based on a computed average round-trip time. The initial retry time is computed based on the measured roundtrip time of establishing the session. The retransmission algorithm doubles the delay with every attempt, which results in approximately 8.5 minutes passing between the first transmission attempt and the last retransmission attempt. The time for the first retransmission attempt is adjusted according to the calculated round-trip time and the resulting stretch of time that those attempts take varies accordingly. This allows the retransmission time to dynamically adapt to varying network conditions.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A message is considered to be transferred if its delivery at the recipient has been acknowledged by the recipient.       If an acknowledgment has not been received within a certain amount of time for a message that has been transmitted, the infrastructure automatically retransmits the message. The infrastructure tries to send the message for, at most, a MaxRetryCount number of times. Not receiving an acknowledgment before this limit is reached is considered a fatal communication failure and causes the channel faulted event to be raised.       The infrastructure uses an exponential back-off algorithm to determine when to retransmit, based on a computed average round-trip time. The initial retry time is computed based on the measured roundtrip time of establishing the session. The retransmission algorithm doubles the delay with every attempt, which results in approximately 8.5 minutes passing between the first transmission attempt and the last retransmission attempt. The time for the first retransmission attempt is adjusted according to the calculated round-trip time and the resulting stretch of time that those attempts take varies accordingly. This allows the retransmission time to dynamically adapt to varying network conditions.","pos":[0,1248],"nodes":[{"content":"A message is considered to be transferred if its delivery at the recipient has been acknowledged by the recipient.","pos":[0,114]},{"content":"If an acknowledgment has not been received within a certain amount of time for a message that has been transmitted, the infrastructure automatically retransmits the message.","pos":[121,294]},{"content":"The infrastructure tries to send the message for, at most, a MaxRetryCount number of times.","pos":[295,386]},{"content":"Not receiving an acknowledgment before this limit is reached is considered a fatal communication failure and causes the channel faulted event to be raised.","pos":[387,542]},{"content":"The infrastructure uses an exponential back-off algorithm to determine when to retransmit, based on a computed average round-trip time.","pos":[549,684]},{"content":"The initial retry time is computed based on the measured roundtrip time of establishing the session.","pos":[685,785]},{"content":"The retransmission algorithm doubles the delay with every attempt, which results in approximately 8.5 minutes passing between the first transmission attempt and the last retransmission attempt.","pos":[786,979]},{"content":"The time for the first retransmission attempt is adjusted according to the calculated round-trip time and the resulting stretch of time that those attempts take varies accordingly.","pos":[980,1160]},{"content":"This allows the retransmission time to dynamically adapt to varying network conditions.","pos":[1161,1248]}]}]},{"pos":[22360,22514],"content":"The maximum number of times that a message attempts to be re-sent. The minimum value is 1; the maximum is <xref:System.Int32>; and the default value is 8.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of times that a message attempts to be re-sent. The minimum value is 1; the maximum is <xref:System.Int32>; and the default value is 8.","pos":[0,154],"nodes":[{"content":"The maximum number of times that a message attempts to be re-sent.","pos":[0,66]},{"content":"The minimum value is 1; the maximum is &lt;xref:System.Int32&gt;; and the default value is 8.","pos":[67,154],"source":" The minimum value is 1; the maximum is <xref:System.Int32>; and the default value is 8."}]}]},{"pos":[22729,22773],"content":"The value set is less than or equal to zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value set is less than or equal to zero.","pos":[0,44]}]},{"pos":[23301,23408],"content":"Gets or sets the largest number of messages that can exist in either the send buffer or the receive buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the largest number of messages that can exist in either the send buffer or the receive buffer.","pos":[0,107]}]},{"pos":[23421,24483],"content":"The value of the MaxTransferWindowSize property can be set on both the sender and the receiver. This value is included in the binding policy of the WSDL, so if you use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md) to construct your client, it has the same value. Otherwise this value is whatever you set it to be on the client.       When this limit is reached on the sender, additional calls to send are blocked. When this limit is reached on the receiver, new messages that arrive on the underlying channel are not accepted.       A reliable session uses a windowing protocol to help improve network utilization. The amount of buffering required is directly derived from the size of the transmission window. When tuning this value, note that the optimal transmission window is related to the bandwidth and the latency in a straight-forward way. The ideal maximum window size is the bandwidth times the latency. Anything smaller yields less than 100% network utilization; anything larger is just wasted space.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of the MaxTransferWindowSize property can be set on both the sender and the receiver.","pos":[0,95]},{"content":"This value is included in the binding policy of the WSDL, so if you use the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> to construct your client, it has the same value.","pos":[96,310],"source":" This value is included in the binding policy of the WSDL, so if you use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md) to construct your client, it has the same value."},{"content":"Otherwise this value is whatever you set it to be on the client.","pos":[311,375]},{"content":"When this limit is reached on the sender, additional calls to send are blocked.","pos":[382,461]},{"content":"When this limit is reached on the receiver, new messages that arrive on the underlying channel are not accepted.","pos":[462,574]},{"content":"A reliable session uses a windowing protocol to help improve network utilization.","pos":[581,662]},{"content":"The amount of buffering required is directly derived from the size of the transmission window.","pos":[663,757]},{"content":"When tuning this value, note that the optimal transmission window is related to the bandwidth and the latency in a straight-forward way.","pos":[758,894]},{"content":"The ideal maximum window size is the bandwidth times the latency.","pos":[895,960]},{"content":"Anything smaller yields less than 100% network utilization; anything larger is just wasted space.","pos":[961,1058]}]},{"pos":[24611,24743],"content":"The largest number of messages that can be buffered. The minimum value is 1; the maximum value is 4096; and the default value is 32.","needQuote":true,"needEscape":true,"nodes":[{"content":"The largest number of messages that can be buffered. The minimum value is 1; the maximum value is 4096; and the default value is 32.","pos":[0,132],"nodes":[{"content":"The largest number of messages that can be buffered.","pos":[0,52]},{"content":"The minimum value is 1; the maximum value is 4096; and the default value is 32.","pos":[53,132]}]}]},{"pos":[24966,25030],"content":"The value set is less than or equal to one or greater than 4096.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value set is less than or equal to one or greater than 4096.","pos":[0,64]}]},{"pos":[25488,25600],"content":"Gets or sets a value that indicates whether message delivery must preserve the order in which messages are sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether message delivery must preserve the order in which messages are sent.","pos":[0,112]}]},{"pos":[25612,25760],"content":"To get messages dispatched in order, you also must set the <xref:System.ServiceModel.ConcurrencyMode> to <xref:System.ServiceModel.ConcurrencyMode>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To get messages dispatched in order, you also must set the &lt;xref:System.ServiceModel.ConcurrencyMode&gt; to &lt;xref:System.ServiceModel.ConcurrencyMode&gt;.","pos":[0,148],"source":"To get messages dispatched in order, you also must set the <xref:System.ServiceModel.ConcurrencyMode> to <xref:System.ServiceModel.ConcurrencyMode>."}]},{"pos":[25876,26157],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if messages must be delivered in the order in which they are sent; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,202],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[203,281],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[26797,26879],"content":"Gets or sets the version of WS-ReliableMessaging specified by the binding element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the version of WS-ReliableMessaging specified by the binding element.","pos":[0,82]}]},{"pos":[26892,27153],"content":"There are currently two versions of the WS-ReliableMessaging protocol supported by [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]: WS-ReliableMessaging1.1 and WS-ReliableMessagingFebruary2005. The default version is WS-ReliableMessagingFebruary2005.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There are currently two versions of the WS-ReliableMessaging protocol supported by <ph id=\"ph1\">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph>: WS-ReliableMessaging1.1 and WS-ReliableMessagingFebruary2005.","pos":[0,204],"source":"There are currently two versions of the WS-ReliableMessaging protocol supported by [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]: WS-ReliableMessaging1.1 and WS-ReliableMessagingFebruary2005."},{"content":"The default version is WS-ReliableMessagingFebruary2005.","pos":[205,261]}]},{"pos":[27357,27547],"content":"An instance derived from <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.ReliableMessagingVersion\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the version of the WS-ReliableMessaging protocol used by the configuration element.","needQuote":true,"needEscape":true,"source":"An instance derived from <xref href=\"System.ServiceModel.ReliableMessagingVersion\"></xref> that represents the version of the WS-ReliableMessaging protocol used by the configuration element."},{"pos":[28769,28939],"content":"Maps the information contained in the reliable session binding element into the WSDL elements that enable a remote endpoint to access the service with a reliable session.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps the information contained in the reliable session binding element into the WSDL elements that enable a remote endpoint to access the service with a reliable session.","pos":[0,170]}]},{"pos":[29245,29417],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Description.MetadataExporter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that exports the binding information in the reliable session binding element to the WSDL elements.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ServiceModel.Description.MetadataExporter\"></xref> that exports the binding information in the reliable session binding element to the WSDL elements."},{"pos":[29523,29686],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Description.PolicyConversionContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that provides the mapping from exported WSDL elements to the endpoint description.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ServiceModel.Description.PolicyConversionContext\"></xref> that provides the mapping from exported WSDL elements to the endpoint description."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement\n  id: ReliableSessionBindingElement\n  children:\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor(System.Boolean)\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.Clone\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion\n  - System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)\n  langs:\n  - csharp\n  name: ReliableSessionBindingElement\n  nameWithType: ReliableSessionBindingElement\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement\n  type: Class\n  summary: Represents the binding element that can produce the sending and receiving channels required for a reliable session between endpoints.\n  remarks: \"Provides sessions and optionally provides ordered message delivery. This implemented session can cross SOAP and transport intermediaries.  \\n  \\n Each binding element represents a processing step when sending or receiving messages. At runtime, binding elements create the channel factories and listeners that are necessary to build outgoing and incoming channel stacks required to send and receive messages. The ReliableSessionBindingElement provides an optional layer in the stack that can establish a reliable session between endpoints and configure the behavior of this session.  \\n  \\n The ReliableSessionBindingElement is provided on the standard bindings in the following table.  \\n  \\n|Binding|Default|  \\n|-------------|-------------|  \\n|<xref:System.ServiceModel.NetTcpBinding>|Off|  \\n|<xref:System.ServiceModel.WSHttpBinding>|Off|  \\n|<xref:System.ServiceModel.WSDualHttpBinding>|On (required)|\"\n  example:\n  - \"The ReliableSessionBindingElement can be added to any custom binding. This is done using the following configuration elements.  \\n  \\n```  \\n<bindings>  \\n    <customBinding>  \\n        <binding configurationName=”ReliabilityHTTP”>  \\n            <reliableSession/>  \\n        </binding>  \\n    </customBinding>  \\n</bindings>  \\n```  \\n  \\n The following sample code demonstrates how to use ReliableSessionBindingElement in code.  \\n  \\n [!code-vb[S_Imperative#1](~/add/codesnippet/visualbasic/t-system.servicemodel.ch_0_1.vb)]\\n [!code-cs[S_Imperative#1](~/add/codesnippet/csharp/t-system.servicemodel.ch_0_1.cs)]\"\n  syntax:\n    content: 'public sealed class ReliableSessionBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension'\n  inheritance:\n  - System.ServiceModel.Channels.BindingElement\n  implements:\n  - System.ServiceModel.Description.IPolicyExportExtension\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: ReliableSessionBindingElement()\n  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement()\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableSessionBindingElement()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"></xref> class.\n  syntax:\n    content: public ReliableSessionBindingElement ();\n    parameters: []\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: ReliableSessionBindingElement(Boolean)\n  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement(Boolean)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableSessionBindingElement(Boolean)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Channels.ReliableSessionBindingElement\"></xref> class that specifies whether message delivery must preserve the order in which messages are sent.\n  syntax:\n    content: public ReliableSessionBindingElement (bool ordered);\n    parameters:\n    - id: ordered\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval\n  id: AcknowledgementInterval\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: AcknowledgementInterval\n  nameWithType: ReliableSessionBindingElement.AcknowledgementInterval\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets the interval of time that a destination waits before sending an acknowledgment to the message source on reliable channels that are created by the factory.\n  remarks: \"The destination that receives messages on a reliable channel groups the acknowledgments for these messages together into a single message to reduce network traffic and to increase information density on messages. Grouping scales better as traffic increases. It does not attempt to send an acknowledgment for every message it receives as soon as possible, but rather waits for an interval of time, groups together the acknowledgments that have arrived during that interval, and then sends them all together. The first message that is received is the exception; it is acknowledged as soon as it is delivered. Also, if reliable sessions are used with single HTTP connections, as is the case for example with the <xref:System.ServiceModel.WSHttpBinding> but not <xref:System.ServiceModel.WSDualHttpBinding>, then this setting is not used.  \\n  \\n The value that is set with the AcknowledgementInterval property is a recommendation to the infrastructure and not a hard limit.\"\n  syntax:\n    content: public TimeSpan AcknowledgementInterval { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies the interval of time that a service waits until sending an acknowledgment to the message source. The default value is 2 seconds.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value set is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)\n  id: BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: BuildChannelFactory(BindingContext)\n  nameWithType: ReliableSessionBindingElement.BuildChannelFactory(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory(BindingContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  syntax:\n    content: public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel> (System.ServiceModel.Channels.BindingContext context);\n    parameters:\n    - id: context\n      type: System.ServiceModel.Channels.BindingContext\n      description: To be added.\n    return:\n      type: System.ServiceModel.Channels.IChannelFactory{TChannel}\n      description: To be added.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory<TChannel>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)\n  id: BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: BuildChannelListener(BindingContext)\n  nameWithType: ReliableSessionBindingElement.BuildChannelListener(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener(BindingContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  syntax:\n    content: 'public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel> (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;'\n    parameters:\n    - id: context\n      type: System.ServiceModel.Channels.BindingContext\n      description: To be added.\n    return:\n      type: System.ServiceModel.Channels.IChannelListener`1\n      description: To be added.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener<TChannel>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)\n  id: CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: CanBuildChannelFactory(BindingContext)\n  nameWithType: ReliableSessionBindingElement.CanBuildChannelFactory(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory(BindingContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  syntax:\n    content: public override bool CanBuildChannelFactory<TChannel> (System.ServiceModel.Channels.BindingContext context);\n    parameters:\n    - id: context\n      type: System.ServiceModel.Channels.BindingContext\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory<TChannel>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)\n  id: CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: CanBuildChannelListener(BindingContext)\n  nameWithType: ReliableSessionBindingElement.CanBuildChannelListener(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener(BindingContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  syntax:\n    content: 'public override bool CanBuildChannelListener<TChannel> (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;'\n    parameters:\n    - id: context\n      type: System.ServiceModel.Channels.BindingContext\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener<TChannel>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone\n  id: Clone\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ReliableSessionBindingElement.Clone()\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Creates a copy of the current reliable session binding element.\n  syntax:\n    content: public override System.ServiceModel.Channels.BindingElement Clone ();\n    parameters: []\n    return:\n      type: System.ServiceModel.Channels.BindingElement\n      description: A <xref:System.ServiceModel.Channels.BindingElement> that is a clone of the current binding element.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled\n  id: FlowControlEnabled\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: FlowControlEnabled\n  nameWithType: ReliableSessionBindingElement.FlowControlEnabled\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets a value that indicates whether the reliable session has flow control enabled.\n  remarks: Flow control is a mechanism that reliable sessions implement to ensure that senders do not send more messages than a receiver can handle. Receivers have a buffer of messages that is used to accommodate message bursts and out-of-order messages. Receivers advertise to senders the amount of space that remains in this buffer in each of their acknowledgements. Senders can use this information to stop sending new messages whenever the receiver has no buffer space left.\n  syntax:\n    content: public bool FlowControlEnabled { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the reliable session has flow control enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)\n  id: GetProperty``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: GetProperty(BindingContext)\n  nameWithType: ReliableSessionBindingElement.GetProperty(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty(BindingContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  syntax:\n    content: 'public override T GetProperty<T> (System.ServiceModel.Channels.BindingContext context) where T : class;'\n    parameters:\n    - id: context\n      type: System.ServiceModel.Channels.BindingContext\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout\n  id: InactivityTimeout\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: InactivityTimeout\n  nameWithType: ReliableSessionBindingElement.InactivityTimeout\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets an interval of time that a service remains inactive before closing.\n  remarks: \"Activity on a channel is defined as receiving an application or infrastructure message. The inactivity timeout parameter controls the maximum amount of time to keep an inactive session alive. If more than InactivityTimeout time interval passes with no activity, the session is aborted by the infrastructure and the channel faults. The reliable session is torn down unilaterally.  \\n  \\n If the sending application has no messages to send then the reliable session is normally not faulted because of inactivity; instead a keep-alive mechanism keeps the session active indefinitely. Note that the dispatcher can independently abort the reliable session if no application messages are sent or received. Thus, the inactivity timeout typically expires if network conditions are such that no messages are received or if there is a failure on the sender.\"\n  syntax:\n    content: public TimeSpan InactivityTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies the interval of time that a service remains inactive before closing. The default value is 10 minutes.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value set is less than or equal to zero or greater than either <xref:System.Int32.MaxValue> or <xref:System.TimeSpan.MaxValue>.\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels\n  id: MaxPendingChannels\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: MaxPendingChannels\n  nameWithType: ReliableSessionBindingElement.MaxPendingChannels\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets the largest number of channels that can be pending during the reliable session.\n  remarks: \"Channels are pending when they are waiting to be accepted. Once that limit is reached, no channels are created and put in pending mode until this number goes down (by accepting pending channels). This is a limit for each listener.  \\n  \\n When the threshold is reached and a remote application tries to establish a new reliable session, the request is denied and the open operation that prompted this faults.\"\n  syntax:\n    content: public int MaxPendingChannels { get; set; }\n    return:\n      type: System.Int32\n      description: The largest number of channels that can be pending. The default value is 4.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value set is less than or equal to zero or greater than 16384.\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount\n  id: MaxRetryCount\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: MaxRetryCount\n  nameWithType: ReliableSessionBindingElement.MaxRetryCount\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets the maximum number of times that a message attempts to be transferred during the reliable session.\n  remarks: \"A message is considered to be transferred if its delivery at the recipient has been acknowledged by the recipient.  \\n  \\n If an acknowledgment has not been received within a certain amount of time for a message that has been transmitted, the infrastructure automatically retransmits the message. The infrastructure tries to send the message for, at most, a MaxRetryCount number of times. Not receiving an acknowledgment before this limit is reached is considered a fatal communication failure and causes the channel faulted event to be raised.  \\n  \\n The infrastructure uses an exponential back-off algorithm to determine when to retransmit, based on a computed average round-trip time. The initial retry time is computed based on the measured roundtrip time of establishing the session. The retransmission algorithm doubles the delay with every attempt, which results in approximately 8.5 minutes passing between the first transmission attempt and the last retransmission attempt. The time for the first retransmission attempt is adjusted according to the calculated round-trip time and the resulting stretch of time that those attempts take varies accordingly. This allows the retransmission time to dynamically adapt to varying network conditions.\"\n  syntax:\n    content: public int MaxRetryCount { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum number of times that a message attempts to be re-sent. The minimum value is 1; the maximum is <xref:System.Int32>; and the default value is 8.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value set is less than or equal to zero.\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize\n  id: MaxTransferWindowSize\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: MaxTransferWindowSize\n  nameWithType: ReliableSessionBindingElement.MaxTransferWindowSize\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets the largest number of messages that can exist in either the send buffer or the receive buffer.\n  remarks: \"The value of the MaxTransferWindowSize property can be set on both the sender and the receiver. This value is included in the binding policy of the WSDL, so if you use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md) to construct your client, it has the same value. Otherwise this value is whatever you set it to be on the client.  \\n  \\n When this limit is reached on the sender, additional calls to send are blocked. When this limit is reached on the receiver, new messages that arrive on the underlying channel are not accepted.  \\n  \\n A reliable session uses a windowing protocol to help improve network utilization. The amount of buffering required is directly derived from the size of the transmission window. When tuning this value, note that the optimal transmission window is related to the bandwidth and the latency in a straight-forward way. The ideal maximum window size is the bandwidth times the latency. Anything smaller yields less than 100% network utilization; anything larger is just wasted space.\"\n  syntax:\n    content: public int MaxTransferWindowSize { get; set; }\n    return:\n      type: System.Int32\n      description: The largest number of messages that can be buffered. The minimum value is 1; the maximum value is 4096; and the default value is 32.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value set is less than or equal to one or greater than 4096.\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered\n  id: Ordered\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: Ordered\n  nameWithType: ReliableSessionBindingElement.Ordered\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets a value that indicates whether message delivery must preserve the order in which messages are sent.\n  remarks: To get messages dispatched in order, you also must set the <xref:System.ServiceModel.ConcurrencyMode> to <xref:System.ServiceModel.ConcurrencyMode>.\n  syntax:\n    content: public bool Ordered { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if messages must be delivered in the order in which they are sent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion\n  id: ReliableMessagingVersion\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: ReliableMessagingVersion\n  nameWithType: ReliableSessionBindingElement.ReliableMessagingVersion\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets the version of WS-ReliableMessaging specified by the binding element.\n  remarks: 'There are currently two versions of the WS-ReliableMessaging protocol supported by [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]: WS-ReliableMessaging1.1 and WS-ReliableMessagingFebruary2005. The default version is WS-ReliableMessagingFebruary2005.'\n  syntax:\n    content: public System.ServiceModel.ReliableMessagingVersion ReliableMessagingVersion { get; set; }\n    return:\n      type: System.ServiceModel.ReliableMessagingVersion\n      description: An instance derived from <xref href=\"System.ServiceModel.ReliableMessagingVersion\"></xref> that represents the version of the WS-ReliableMessaging protocol used by the configuration element.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)\n  id: System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)\n  isEii: true\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  langs:\n  - csharp\n  name: System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)\n  nameWithType: ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Maps the information contained in the reliable session binding element into the WSDL elements that enable a remote endpoint to access the service with a reliable session.\n  syntax:\n    content: void IPolicyExportExtension.ExportPolicy (System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context);\n    parameters:\n    - id: exporter\n      type: System.ServiceModel.Description.MetadataExporter\n      description: The <xref href=\"System.ServiceModel.Description.MetadataExporter\"></xref> that exports the binding information in the reliable session binding element to the WSDL elements.\n    - id: context\n      type: System.ServiceModel.Description.PolicyConversionContext\n      description: The <xref href=\"System.ServiceModel.Description.PolicyConversionContext\"></xref> that provides the mapping from exported WSDL elements to the endpoint description.\n  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.Channels.BindingElement\n  isExternal: false\n  name: System.ServiceModel.Channels.BindingElement\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: ReliableSessionBindingElement()\n  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement()\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableSessionBindingElement()\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor(System.Boolean)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: ReliableSessionBindingElement(Boolean)\n  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement(Boolean)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableSessionBindingElement(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: AcknowledgementInterval\n  nameWithType: ReliableSessionBindingElement.AcknowledgementInterval\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: BuildChannelFactory(BindingContext)\n  nameWithType: ReliableSessionBindingElement.BuildChannelFactory(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory(BindingContext)\n- uid: System.ServiceModel.Channels.IChannelFactory{TChannel}\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: IChannelFactory<TChannel>\n  nameWithType: IChannelFactory<TChannel>\n  fullName: System.ServiceModel.Channels.IChannelFactory<TChannel>\n  spec.csharp:\n  - uid: System.ServiceModel.Channels.IChannelFactory`1\n    name: IChannelFactory\n    nameWithType: IChannelFactory\n    fullName: IChannelFactory<TChannel>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TChannel\n    name: TChannel\n    nameWithType: TChannel\n    fullName: TChannel\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Channels.BindingContext\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: BindingContext\n  nameWithType: BindingContext\n  fullName: System.ServiceModel.Channels.BindingContext\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: BuildChannelListener(BindingContext)\n  nameWithType: ReliableSessionBindingElement.BuildChannelListener(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener(BindingContext)\n- uid: System.ServiceModel.Channels.IChannelListener`1\n  parent: System.ServiceModel.Channels\n  isExternal: false\n  name: IChannelListener<TChannel>\n  nameWithType: IChannelListener<TChannel>\n  fullName: System.ServiceModel.Channels.IChannelListener<TChannel>\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: CanBuildChannelFactory(BindingContext)\n  nameWithType: ReliableSessionBindingElement.CanBuildChannelFactory(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory(BindingContext)\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: CanBuildChannelListener(BindingContext)\n  nameWithType: ReliableSessionBindingElement.CanBuildChannelListener(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener(BindingContext)\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: Clone()\n  nameWithType: ReliableSessionBindingElement.Clone()\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone()\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: FlowControlEnabled\n  nameWithType: ReliableSessionBindingElement.FlowControlEnabled\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: GetProperty(BindingContext)\n  nameWithType: ReliableSessionBindingElement.GetProperty(BindingContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty(BindingContext)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: InactivityTimeout\n  nameWithType: ReliableSessionBindingElement.InactivityTimeout\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: MaxPendingChannels\n  nameWithType: ReliableSessionBindingElement.MaxPendingChannels\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: MaxRetryCount\n  nameWithType: ReliableSessionBindingElement.MaxRetryCount\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: MaxTransferWindowSize\n  nameWithType: ReliableSessionBindingElement.MaxTransferWindowSize\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: Ordered\n  nameWithType: ReliableSessionBindingElement.Ordered\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: ReliableMessagingVersion\n  nameWithType: ReliableSessionBindingElement.ReliableMessagingVersion\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion\n- uid: System.ServiceModel.ReliableMessagingVersion\n  parent: System.ServiceModel\n  isExternal: false\n  name: ReliableMessagingVersion\n  nameWithType: ReliableMessagingVersion\n  fullName: System.ServiceModel.ReliableMessagingVersion\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)\n  nameWithType: ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)\n- uid: System.ServiceModel.Description.MetadataExporter\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: MetadataExporter\n  nameWithType: MetadataExporter\n  fullName: System.ServiceModel.Description.MetadataExporter\n- uid: System.ServiceModel.Description.PolicyConversionContext\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: PolicyConversionContext\n  nameWithType: PolicyConversionContext\n  fullName: System.ServiceModel.Description.PolicyConversionContext\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: ReliableSessionBindingElement\n  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: AcknowledgementInterval\n  nameWithType: ReliableSessionBindingElement.AcknowledgementInterval\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory<TChannel>*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: BuildChannelFactory<TChannel>\n  nameWithType: ReliableSessionBindingElement.BuildChannelFactory<TChannel>\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener<TChannel>*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: BuildChannelListener<TChannel>\n  nameWithType: ReliableSessionBindingElement.BuildChannelListener<TChannel>\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory<TChannel>*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: CanBuildChannelFactory<TChannel>\n  nameWithType: ReliableSessionBindingElement.CanBuildChannelFactory<TChannel>\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener<TChannel>*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: CanBuildChannelListener<TChannel>\n  nameWithType: ReliableSessionBindingElement.CanBuildChannelListener<TChannel>\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: Clone\n  nameWithType: ReliableSessionBindingElement.Clone\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: FlowControlEnabled\n  nameWithType: ReliableSessionBindingElement.FlowControlEnabled\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty<T>*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: GetProperty<T>\n  nameWithType: ReliableSessionBindingElement.GetProperty<T>\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: InactivityTimeout\n  nameWithType: ReliableSessionBindingElement.InactivityTimeout\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: MaxPendingChannels\n  nameWithType: ReliableSessionBindingElement.MaxPendingChannels\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: MaxRetryCount\n  nameWithType: ReliableSessionBindingElement.MaxRetryCount\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: MaxTransferWindowSize\n  nameWithType: ReliableSessionBindingElement.MaxTransferWindowSize\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: Ordered\n  nameWithType: ReliableSessionBindingElement.Ordered\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: ReliableMessagingVersion\n  nameWithType: ReliableSessionBindingElement.ReliableMessagingVersion\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy*\n  parent: System.ServiceModel.Channels.ReliableSessionBindingElement\n  isExternal: false\n  name: System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy\n  nameWithType: ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy\n"}