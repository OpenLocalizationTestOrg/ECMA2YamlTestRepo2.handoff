{"nodes":[{"pos":[467,488],"content":"Represents a comment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a comment.","pos":[0,21]}]},{"pos":[501,1224],"content":"CodeComment can be used to represent a single line comment.       A <xref:System.CodeDom.CodeCommentStatement> can contain a CodeComment and allows it to be treated as a statement and generated as code within a collection of statements. Multi-line comments can be represented with multiple <xref:System.CodeDom.CodeCommentStatement> objects.       To include a comment in a CodeDOM graph that can be generated to source code, add a CodeComment to a <xref:System.CodeDom.CodeCommentStatement>, and add this to the statements collection of a <xref:System.CodeDom.CodeMemberMethod> or to the comments collection of a <xref:System.CodeDom.CodeNamespace> or any object that derives from <xref:System.CodeDom.CodeTypeMember>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"CodeComment can be used to represent a single line comment.       A <xref:System.CodeDom.CodeCommentStatement> can contain a CodeComment and allows it to be treated as a statement and generated as code within a collection of statements. Multi-line comments can be represented with multiple <xref:System.CodeDom.CodeCommentStatement> objects.       To include a comment in a CodeDOM graph that can be generated to source code, add a CodeComment to a <xref:System.CodeDom.CodeCommentStatement>, and add this to the statements collection of a <xref:System.CodeDom.CodeMemberMethod> or to the comments collection of a <xref:System.CodeDom.CodeNamespace> or any object that derives from <xref:System.CodeDom.CodeTypeMember>.","pos":[0,719],"nodes":[{"content":"CodeComment can be used to represent a single line comment.","pos":[0,59]},{"content":"A &lt;xref:System.CodeDom.CodeCommentStatement&gt; can contain a CodeComment and allows it to be treated as a statement and generated as code within a collection of statements.","pos":[66,236],"source":"       A <xref:System.CodeDom.CodeCommentStatement> can contain a CodeComment and allows it to be treated as a statement and generated as code within a collection of statements."},{"content":"Multi-line comments can be represented with multiple &lt;xref:System.CodeDom.CodeCommentStatement&gt; objects.","pos":[237,341],"source":" Multi-line comments can be represented with multiple <xref:System.CodeDom.CodeCommentStatement> objects."},{"content":"To include a comment in a CodeDOM graph that can be generated to source code, add a CodeComment to a &lt;xref:System.CodeDom.CodeCommentStatement&gt;, and add this to the statements collection of a &lt;xref:System.CodeDom.CodeMemberMethod&gt; or to the comments collection of a &lt;xref:System.CodeDom.CodeNamespace&gt; or any object that derives from &lt;xref:System.CodeDom.CodeTypeMember&gt;.","pos":[348,719],"source":"       To include a comment in a CodeDOM graph that can be generated to source code, add a CodeComment to a <xref:System.CodeDom.CodeCommentStatement>, and add this to the statements collection of a <xref:System.CodeDom.CodeMemberMethod> or to the comments collection of a <xref:System.CodeDom.CodeNamespace> or any object that derives from <xref:System.CodeDom.CodeTypeMember>."}]}]},{"pos":[2352,2440],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeComment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeComment\"></xref> class."},{"pos":[2952,3076],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeComment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified text as contents.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeComment\"></xref> class with the specified text as contents."},{"pos":[3210,3238],"content":"The contents of the comment.","needQuote":true,"needEscape":true,"nodes":[{"content":"The contents of the comment.","pos":[0,28]}]},{"pos":[3739,3883],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeComment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified text and documentation comment flag.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeComment\"></xref> class using the specified text and documentation comment flag."},{"pos":[4034,4062],"content":"The contents of the comment.","needQuote":true,"needEscape":true,"nodes":[{"content":"The contents of the comment.","pos":[0,28]}]},{"pos":[4130,4308],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the comment is a documentation comment; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the comment is a documentation comment; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4703,4786],"content":"Gets or sets a value that indicates whether the comment is a documentation comment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the comment is a documentation comment.","pos":[0,83]}]},{"pos":[4798,5158],"content":"Some languages support a special type of comment that can be automatically extracted from the source code for documentation purposes. This property can be used to designate whether the comment is a documentation comment, which may generate a different syntax. An example of this is C#, which uses \"//\" for regular comments and \"///\" for documentation comments.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Some languages support a special type of comment that can be automatically extracted from the source code for documentation purposes. This property can be used to designate whether the comment is a documentation comment, which may generate a different syntax. An example of this is C#, which uses \"//\" for regular comments and \"///\" for documentation comments.","pos":[0,360],"nodes":[{"content":"Some languages support a special type of comment that can be automatically extracted from the source code for documentation purposes.","pos":[0,133]},{"content":"This property can be used to designate whether the comment is a documentation comment, which may generate a different syntax.","pos":[134,259]},{"content":"An example of this is C#, which uses \"//\" for regular comments and \"///\" for documentation comments.","pos":[260,360]}]}]},{"pos":[5277,5455],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the comment is a documentation comment; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the comment is a documentation comment; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5825,5862],"content":"Gets or sets the text of the comment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the text of the comment.","pos":[0,37]}]},{"pos":[5874,6033],"content":"The text of this property should not contain line breaks. If multiple lines are required, multiple <xref:System.CodeDom.CodeComment> objects should be defined.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The text of this property should not contain line breaks. If multiple lines are required, multiple <xref:System.CodeDom.CodeComment> objects should be defined.","pos":[0,159],"nodes":[{"content":"The text of this property should not contain line breaks.","pos":[0,57]},{"content":"If multiple lines are required, multiple &lt;xref:System.CodeDom.CodeComment&gt; objects should be defined.","pos":[58,159],"source":" If multiple lines are required, multiple <xref:System.CodeDom.CodeComment> objects should be defined."}]}]},{"pos":[6147,6184],"content":"A string containing the comment text.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the comment text.","pos":[0,37]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.CodeComment\n  id: CodeComment\n  children:\n  - System.CodeDom.CodeComment.#ctor\n  - System.CodeDom.CodeComment.#ctor(System.String)\n  - System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)\n  - System.CodeDom.CodeComment.DocComment\n  - System.CodeDom.CodeComment.Text\n  langs:\n  - csharp\n  name: CodeComment\n  nameWithType: CodeComment\n  fullName: System.CodeDom.CodeComment\n  type: Class\n  summary: Represents a comment.\n  remarks: \"CodeComment can be used to represent a single line comment.  \\n  \\n A <xref:System.CodeDom.CodeCommentStatement> can contain a CodeComment and allows it to be treated as a statement and generated as code within a collection of statements. Multi-line comments can be represented with multiple <xref:System.CodeDom.CodeCommentStatement> objects.  \\n  \\n To include a comment in a CodeDOM graph that can be generated to source code, add a CodeComment to a <xref:System.CodeDom.CodeCommentStatement>, and add this to the statements collection of a <xref:System.CodeDom.CodeMemberMethod> or to the comments collection of a <xref:System.CodeDom.CodeNamespace> or any object that derives from <xref:System.CodeDom.CodeTypeMember>.\"\n  example:\n  - \"This example demonstrates using a CodeComment to represent a comment in source code.  \\n  \\n [!code-cs[CodeCommentExample#2](~/add/codesnippet/csharp/t-system.codedom.codecom_3_1.cs)]\\n [!code-cpp[CodeCommentExample#2](~/add/codesnippet/cpp/t-system.codedom.codecom_3_1.cpp)]\\n [!code-vb[CodeCommentExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codecom_3_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CodeComment : System.CodeDom.CodeObject\n  inheritance:\n  - System.Object\n  - System.CodeDom.CodeObject\n  implements: []\n  inheritedMembers:\n  - System.CodeDom.CodeObject.UserData\n  platform:\n  - net462\n- uid: System.CodeDom.CodeComment.#ctor\n  id: '#ctor'\n  parent: System.CodeDom.CodeComment\n  langs:\n  - csharp\n  name: CodeComment()\n  nameWithType: CodeComment.CodeComment()\n  fullName: System.CodeDom.CodeComment.CodeComment()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeComment\"></xref> class.\n  syntax:\n    content: public CodeComment ();\n    parameters: []\n  overload: System.CodeDom.CodeComment.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeComment.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.CodeDom.CodeComment\n  langs:\n  - csharp\n  name: CodeComment(String)\n  nameWithType: CodeComment.CodeComment(String)\n  fullName: System.CodeDom.CodeComment.CodeComment(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeComment\"></xref> class with the specified text as contents.\n  syntax:\n    content: public CodeComment (string text);\n    parameters:\n    - id: text\n      type: System.String\n      description: The contents of the comment.\n  overload: System.CodeDom.CodeComment.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)\n  id: '#ctor(System.String,System.Boolean)'\n  parent: System.CodeDom.CodeComment\n  langs:\n  - csharp\n  name: CodeComment(String,Boolean)\n  nameWithType: CodeComment.CodeComment(String,Boolean)\n  fullName: System.CodeDom.CodeComment.CodeComment(String,Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeComment\"></xref> class using the specified text and documentation comment flag.\n  syntax:\n    content: public CodeComment (string text, bool docComment);\n    parameters:\n    - id: text\n      type: System.String\n      description: The contents of the comment.\n    - id: docComment\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the comment is a documentation comment; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.CodeComment.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeComment.DocComment\n  id: DocComment\n  parent: System.CodeDom.CodeComment\n  langs:\n  - csharp\n  name: DocComment\n  nameWithType: CodeComment.DocComment\n  fullName: System.CodeDom.CodeComment.DocComment\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets a value that indicates whether the comment is a documentation comment.\n  remarks: Some languages support a special type of comment that can be automatically extracted from the source code for documentation purposes. This property can be used to designate whether the comment is a documentation comment, which may generate a different syntax. An example of this is C#, which uses \"//\" for regular comments and \"///\" for documentation comments.\n  syntax:\n    content: public bool DocComment { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the comment is a documentation comment; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.CodeComment.DocComment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeComment.Text\n  id: Text\n  parent: System.CodeDom.CodeComment\n  langs:\n  - csharp\n  name: Text\n  nameWithType: CodeComment.Text\n  fullName: System.CodeDom.CodeComment.Text\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the text of the comment.\n  remarks: The text of this property should not contain line breaks. If multiple lines are required, multiple <xref:System.CodeDom.CodeComment> objects should be defined.\n  syntax:\n    content: public string Text { get; set; }\n    return:\n      type: System.String\n      description: A string containing the comment text.\n  overload: System.CodeDom.CodeComment.Text*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.CodeDom.CodeObject\n  isExternal: false\n  name: System.CodeDom.CodeObject\n- uid: System.CodeDom.CodeComment.#ctor\n  parent: System.CodeDom.CodeComment\n  isExternal: false\n  name: CodeComment()\n  nameWithType: CodeComment.CodeComment()\n  fullName: System.CodeDom.CodeComment.CodeComment()\n- uid: System.CodeDom.CodeComment.#ctor(System.String)\n  parent: System.CodeDom.CodeComment\n  isExternal: false\n  name: CodeComment(String)\n  nameWithType: CodeComment.CodeComment(String)\n  fullName: System.CodeDom.CodeComment.CodeComment(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)\n  parent: System.CodeDom.CodeComment\n  isExternal: false\n  name: CodeComment(String,Boolean)\n  nameWithType: CodeComment.CodeComment(String,Boolean)\n  fullName: System.CodeDom.CodeComment.CodeComment(String,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.CodeDom.CodeComment.DocComment\n  parent: System.CodeDom.CodeComment\n  isExternal: false\n  name: DocComment\n  nameWithType: CodeComment.DocComment\n  fullName: System.CodeDom.CodeComment.DocComment\n- uid: System.CodeDom.CodeComment.Text\n  parent: System.CodeDom.CodeComment\n  isExternal: false\n  name: Text\n  nameWithType: CodeComment.Text\n  fullName: System.CodeDom.CodeComment.Text\n- uid: System.CodeDom.CodeComment.#ctor*\n  parent: System.CodeDom.CodeComment\n  isExternal: false\n  name: CodeComment\n  nameWithType: CodeComment.CodeComment\n- uid: System.CodeDom.CodeComment.DocComment*\n  parent: System.CodeDom.CodeComment\n  isExternal: false\n  name: DocComment\n  nameWithType: CodeComment.DocComment\n- uid: System.CodeDom.CodeComment.Text*\n  parent: System.CodeDom.CodeComment\n  isExternal: false\n  name: Text\n  nameWithType: CodeComment.Text\n"}