{"nodes":[{"pos":[1417,1541],"content":"Makes the workflow wait for any one of several possible events before the activity proceeds. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Makes the workflow wait for any one of several possible events before the activity proceeds. This class cannot be inherited.","pos":[0,124],"nodes":[{"content":"Makes the workflow wait for any one of several possible events before the activity proceeds.","pos":[0,92]},{"content":"This class cannot be inherited.","pos":[93,124]}]}]},{"pos":[1554,2282],"content":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The ListenActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, which means the ListenActivity can contain other activities. The ListenActivity can only contain <xref:System.Workflow.Activities.EventDrivenActivity> activities and must have a minimum of two child activities.       The ListenActivity can contain many branches and each branch is waiting for a particular event to occur before running. Each branch is event driven and the event that occurs runs the corresponding branch first. All other branches cancel and stop listening for events.       The ListenActivity cannot be used in state machine workflows.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph><ph id=\"ph2\"> &gt;  </ph><ph id=\"ph3\">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       The ListenActivity is a &lt;xref:System.Workflow.ComponentModel.CompositeActivity&gt;, which means the ListenActivity can contain other activities.","pos":[0,229],"source":"> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The ListenActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, which means the ListenActivity can contain other activities."},{"content":"The ListenActivity can only contain &lt;xref:System.Workflow.Activities.EventDrivenActivity&gt; activities and must have a minimum of two child activities.","pos":[230,379],"source":" The ListenActivity can only contain <xref:System.Workflow.Activities.EventDrivenActivity> activities and must have a minimum of two child activities."},{"content":"The ListenActivity can contain many branches and each branch is waiting for a particular event to occur before running.","pos":[386,505]},{"content":"Each branch is event driven and the event that occurs runs the corresponding branch first.","pos":[506,596]},{"content":"All other branches cancel and stop listening for events.","pos":[597,653]},{"content":"The ListenActivity cannot be used in state machine workflows.","pos":[660,721]}]},{"pos":[10572,10675],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.ListenActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.ListenActivity\"></xref> class."},{"pos":[11294,11428],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Workflow.Activities.ListenActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the name of the activity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.ListenActivity\"></xref> class using the name of the activity."},{"pos":[11565,11603],"content":"The user-defined name of the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user-defined name of the activity.","pos":[0,38]}]},{"pos":[12562,12574],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12673,12685],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13651,13663],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13762,13774],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14932,14944],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15040,15052],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16242,16254],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16352,16364],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17127,17139],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18171,18183],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19655,19667],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19782,19794],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.ListenActivity\n  id: ListenActivity\n  children:\n  - System.Workflow.Activities.ListenActivity.#ctor\n  - System.Workflow.Activities.ListenActivity.#ctor(System.String)\n  - System.Workflow.Activities.ListenActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.ListenActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.ListenActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Activities.ListenActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.Activities.ListenActivity.OnClosed(System.IServiceProvider)\n  - System.Workflow.Activities.ListenActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  - System.Workflow.Activities.ListenActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  langs:\n  - csharp\n  name: ListenActivity\n  nameWithType: ListenActivity\n  fullName: System.Workflow.Activities.ListenActivity\n  type: Class\n  summary: Makes the workflow wait for any one of several possible events before the activity proceeds. This class cannot be inherited.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]  \\n  \\n The ListenActivity is a <xref:System.Workflow.ComponentModel.CompositeActivity>, which means the ListenActivity can contain other activities. The ListenActivity can only contain <xref:System.Workflow.Activities.EventDrivenActivity> activities and must have a minimum of two child activities.  \\n  \\n The ListenActivity can contain many branches and each branch is waiting for a particular event to occur before running. Each branch is event driven and the event that occurs runs the corresponding branch first. All other branches cancel and stop listening for events.  \\n  \\n The ListenActivity cannot be used in state machine workflows.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.ListenDesigner), typeof(System.ComponentModel.Design.IDesigner))]\n\n      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.Activities.ListenToolboxItem))]\n\n      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.ListenActivity), \"Resources.Listen.png\")]\n\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.ListenValidator))]\n\n      public sealed class ListenActivity : System.Workflow.ComponentModel.CompositeActivity, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>\n  inheritance:\n  - System.Object\n  - System.Workflow.ComponentModel.DependencyObject\n  - System.Workflow.ComponentModel.Activity\n  - System.Workflow.ComponentModel.CompositeActivity\n  implements:\n  - System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>\n  inheritedMembers:\n  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty\n  - System.Workflow.ComponentModel.Activity.Canceling\n  - System.Workflow.ComponentModel.Activity.CancelingEvent\n  - System.Workflow.ComponentModel.Activity.Clone\n  - System.Workflow.ComponentModel.Activity.Closed\n  - System.Workflow.ComponentModel.Activity.ClosedEvent\n  - System.Workflow.ComponentModel.Activity.Compensating\n  - System.Workflow.ComponentModel.Activity.CompensatingEvent\n  - System.Workflow.ComponentModel.Activity.Description\n  - System.Workflow.ComponentModel.Activity.Enabled\n  - System.Workflow.ComponentModel.Activity.Executing\n  - System.Workflow.ComponentModel.Activity.ExecutingEvent\n  - System.Workflow.ComponentModel.Activity.ExecutionResult\n  - System.Workflow.ComponentModel.Activity.ExecutionStatus\n  - System.Workflow.ComponentModel.Activity.Faulting\n  - System.Workflow.ComponentModel.Activity.FaultingEvent\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)\n  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)\n  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)\n  - System.Workflow.ComponentModel.Activity.IsDynamicActivity\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.Name\n  - System.Workflow.ComponentModel.Activity.Parent\n  - System.Workflow.ComponentModel.Activity.QualifiedName\n  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)\n  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)\n  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)\n  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)\n  - System.Workflow.ComponentModel.Activity.StatusChanged\n  - System.Workflow.ComponentModel.Activity.StatusChangedEvent\n  - System.Workflow.ComponentModel.Activity.ToString\n  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)\n  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)\n  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})\n  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId\n  - System.Workflow.ComponentModel.CompositeActivity.Activities\n  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities\n  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)\n  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities\n  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)\n  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)\n  - System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)\n  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)\n  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.DesignMode\n  - System.Workflow.ComponentModel.DependencyObject.Dispose\n  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)\n  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties\n  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)\n  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject\n  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)\n  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)\n  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)\n  - System.Workflow.ComponentModel.DependencyObject.Site\n  - System.Workflow.ComponentModel.DependencyObject.UserData\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: ListenActivity()\n  nameWithType: ListenActivity.ListenActivity()\n  fullName: System.Workflow.Activities.ListenActivity.ListenActivity()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.ListenActivity\"></xref> class.\n  syntax:\n    content: public ListenActivity ();\n    parameters: []\n  overload: System.Workflow.Activities.ListenActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: ListenActivity(String)\n  nameWithType: ListenActivity.ListenActivity(String)\n  fullName: System.Workflow.Activities.ListenActivity.ListenActivity(String)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.ListenActivity\"></xref> class using the name of the activity.\n  syntax:\n    content: public ListenActivity (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The user-defined name of the activity.\n  overload: System.Workflow.Activities.ListenActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: ListenActivity.Cancel(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.ListenActivity.Cancel(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: To be added.\n  overload: System.Workflow.Activities.ListenActivity.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: Execute(ActivityExecutionContext)\n  nameWithType: ListenActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.ListenActivity.Execute(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    return:\n      type: System.Workflow.ComponentModel.ActivityExecutionStatus\n      description: To be added.\n  overload: System.Workflow.Activities.ListenActivity.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  id: OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  nameWithType: ListenActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  fullName: System.Workflow.Activities.ListenActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override sealed void OnActivityChangeAdd (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, System.Workflow.ComponentModel.Activity addedActivity);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    - id: addedActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: To be added.\n  overload: System.Workflow.Activities.ListenActivity.OnActivityChangeAdd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  id: OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: OnActivityChangeRemove(ActivityExecutionContext,Activity)\n  nameWithType: ListenActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)\n  fullName: System.Workflow.Activities.ListenActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override sealed void OnActivityChangeRemove (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, System.Workflow.ComponentModel.Activity removedActivity);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n    - id: removedActivity\n      type: System.Workflow.ComponentModel.Activity\n      description: To be added.\n  overload: System.Workflow.Activities.ListenActivity.OnActivityChangeRemove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.OnClosed(System.IServiceProvider)\n  id: OnClosed(System.IServiceProvider)\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: OnClosed(IServiceProvider)\n  nameWithType: ListenActivity.OnClosed(IServiceProvider)\n  fullName: System.Workflow.Activities.ListenActivity.OnClosed(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override void OnClosed (IServiceProvider provider);\n    parameters:\n    - id: provider\n      type: System.IServiceProvider\n      description: To be added.\n  overload: System.Workflow.Activities.ListenActivity.OnClosed*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  id: OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: OnWorkflowChangesCompleted(ActivityExecutionContext)\n  nameWithType: ListenActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.ListenActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: protected override void OnWorkflowChangesCompleted (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);\n    parameters:\n    - id: executionContext\n      type: System.Workflow.ComponentModel.ActivityExecutionContext\n      description: To be added.\n  overload: System.Workflow.Activities.ListenActivity.OnWorkflowChangesCompleted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.Activities.ListenActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  id: System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  isEii: true\n  parent: System.Workflow.Activities.ListenActivity\n  langs:\n  - csharp\n  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  nameWithType: ListenActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  fullName: System.Workflow.Activities.ListenActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  syntax:\n    content: void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent (object sender, System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: To be added.\n    - id: e\n      type: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n      description: To be added.\n  overload: System.Workflow.Activities.ListenActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Workflow.ComponentModel.CompositeActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.CompositeActivity\n- uid: System.Workflow.Activities.ListenActivity.#ctor\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: ListenActivity()\n  nameWithType: ListenActivity.ListenActivity()\n  fullName: System.Workflow.Activities.ListenActivity.ListenActivity()\n- uid: System.Workflow.Activities.ListenActivity.#ctor(System.String)\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: ListenActivity(String)\n  nameWithType: ListenActivity.ListenActivity(String)\n  fullName: System.Workflow.Activities.ListenActivity.ListenActivity(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Activities.ListenActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: Cancel(ActivityExecutionContext)\n  nameWithType: ListenActivity.Cancel(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.ListenActivity.Cancel(ActivityExecutionContext)\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatus\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatus\n  nameWithType: ActivityExecutionStatus\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus\n- uid: System.Workflow.ComponentModel.ActivityExecutionContext\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionContext\n  nameWithType: ActivityExecutionContext\n  fullName: System.Workflow.ComponentModel.ActivityExecutionContext\n- uid: System.Workflow.Activities.ListenActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: Execute(ActivityExecutionContext)\n  nameWithType: ListenActivity.Execute(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.ListenActivity.Execute(ActivityExecutionContext)\n- uid: System.Workflow.Activities.ListenActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  nameWithType: ListenActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)\n  fullName: System.Workflow.Activities.ListenActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)\n- uid: System.Workflow.ComponentModel.Activity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.Activities.ListenActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: OnActivityChangeRemove(ActivityExecutionContext,Activity)\n  nameWithType: ListenActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)\n  fullName: System.Workflow.Activities.ListenActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)\n- uid: System.Workflow.Activities.ListenActivity.OnClosed(System.IServiceProvider)\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: OnClosed(IServiceProvider)\n  nameWithType: ListenActivity.OnClosed(IServiceProvider)\n  fullName: System.Workflow.Activities.ListenActivity.OnClosed(IServiceProvider)\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: true\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.Workflow.Activities.ListenActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: OnWorkflowChangesCompleted(ActivityExecutionContext)\n  nameWithType: ListenActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)\n  fullName: System.Workflow.Activities.ListenActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)\n- uid: System.Workflow.Activities.ListenActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  nameWithType: ListenActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n  fullName: System.Workflow.Activities.ListenActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: ActivityExecutionStatusChangedEventArgs\n  nameWithType: ActivityExecutionStatusChangedEventArgs\n  fullName: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs\n- uid: System.Workflow.Activities.ListenActivity.#ctor*\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: ListenActivity\n  nameWithType: ListenActivity.ListenActivity\n- uid: System.Workflow.Activities.ListenActivity.Cancel*\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: Cancel\n  nameWithType: ListenActivity.Cancel\n- uid: System.Workflow.Activities.ListenActivity.Execute*\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: Execute\n  nameWithType: ListenActivity.Execute\n- uid: System.Workflow.Activities.ListenActivity.OnActivityChangeAdd*\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: OnActivityChangeAdd\n  nameWithType: ListenActivity.OnActivityChangeAdd\n- uid: System.Workflow.Activities.ListenActivity.OnActivityChangeRemove*\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: OnActivityChangeRemove\n  nameWithType: ListenActivity.OnActivityChangeRemove\n- uid: System.Workflow.Activities.ListenActivity.OnClosed*\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: OnClosed\n  nameWithType: ListenActivity.OnClosed\n- uid: System.Workflow.Activities.ListenActivity.OnWorkflowChangesCompleted*\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: OnWorkflowChangesCompleted\n  nameWithType: ListenActivity.OnWorkflowChangesCompleted\n- uid: System.Workflow.Activities.ListenActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*\n  parent: System.Workflow.Activities.ListenActivity\n  isExternal: false\n  name: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent\n  nameWithType: ListenActivity.System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent\n"}