{"nodes":[{"pos":[1557,1759],"content":"Enables you to read events from an event log based on an event query. The events that are read by this object are returned as <xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"></xref> objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enables you to read events from an event log based on an event query.","pos":[0,69]},{"content":"The events that are read by this object are returned as <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","pos":[70,202],"source":" The events that are read by this object are returned as <xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"></xref> objects."}]},{"pos":[2785,2925],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying an event query.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"></xref> class by specifying an event query."},{"pos":[2937,3058],"content":"Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A&gt; method to retrieve events from this object.","pos":[0,121],"source":"Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object."}]},{"pos":[3284,3324],"content":"The event query used to retrieve events.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event query used to retrieve events.","pos":[0,40]}]},{"pos":[3900,4069],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying an active event log to retrieve events from.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"></xref> class by specifying an active event log to retrieve events from."},{"pos":[4081,4202],"content":"Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A&gt; method to retrieve events from this object.","pos":[0,121],"source":"Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object."}]},{"pos":[4339,4389],"content":"The name of the event log to retrieve events from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the event log to retrieve events from.","pos":[0,50]}]},{"pos":[5196,5399],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying an event query and a bookmark that is used as starting position for the query.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"></xref> class by specifying an event query and a bookmark that is used as starting position for the query."},{"pos":[5411,5532],"content":"Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A&gt; method to retrieve events from this object.","pos":[0,121],"source":"Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object."}]},{"pos":[5817,5857],"content":"The event query used to retrieve events.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event query used to retrieve events.","pos":[0,40]}]},{"pos":[5957,6124],"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events logged after the bookmark event will be returned by the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events logged after the bookmark event will be returned by the query.","pos":[0,167],"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events.","pos":[0,92]},{"content":"Only events logged after the bookmark event will be returned by the query.","pos":[93,167]}]}]},{"pos":[6815,7039],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying the name of an event log to retrieve events from or the path to a log file to retrieve events from.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"></xref> class by specifying the name of an event log to retrieve events from or the path to a log file to retrieve events from."},{"pos":[7051,7172],"content":"Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A&gt; method to retrieve events from this object.","pos":[0,121],"source":"Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object."}]},{"pos":[7363,7472],"content":"The name of the event log to retrieve events from, or the path to the event log file to retrieve events from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the event log to retrieve events from, or the path to the event log file to retrieve events from.","pos":[0,109]}]},{"pos":[7567,7692],"content":"Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.","pos":[0,125]}]},{"pos":[8202,8296],"content":"Gets or sets the number of events retrieved from the stream of events on every read operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the number of events retrieved from the stream of events on every read operation.","pos":[0,94]}]},{"pos":[8411,8436],"content":"Returns an integer value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an integer value.","pos":[0,25]}]},{"pos":[8974,9010],"content":"Cancels the current query operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the current query operation.","pos":[0,36]}]},{"pos":[9594,9641],"content":"Releases all the resources used by this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases all the resources used by this object.","pos":[0,47]}]},{"pos":[10266,10366],"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","pos":[0,100]}]},{"pos":[10521,10730],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[11242,11335],"content":"Gets the status of each event log or log file associated with the event query in this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the status of each event log or log file associated with the event query in this object.","pos":[0,93]}]},{"pos":[11596,11796],"content":"Returns a list of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogStatus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that each contain status information about an event log associated with the event query in this object.","needQuote":true,"needEscape":true,"source":"Returns a list of <xref href=\"System.Diagnostics.Eventing.Reader.EventLogStatus\"></xref> objects that each contain status information about an event log associated with the event query in this object."},{"pos":[12314,12388],"content":"Reads the next event that is returned from the event query in this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the next event that is returned from the event query in this object.","pos":[0,74]}]},{"pos":[12757,12843],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"></xref> object."},{"pos":[13419,13493],"content":"Reads the next event that is returned from the event query in this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the next event that is returned from the event query in this object.","pos":[0,74]}]},{"pos":[13682,13765],"content":"The maximum time to allow the read operation to run before canceling the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum time to allow the read operation to run before canceling the operation.","pos":[0,83]}]},{"pos":[13856,13942],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"></xref> object."},{"pos":[14574,14757],"content":"Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event. No events logged before the bookmark event will be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event. No events logged before the bookmark event will be retrieved.","pos":[0,183],"nodes":[{"content":"Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event.","pos":[0,121]},{"content":"No events logged before the bookmark event will be retrieved.","pos":[122,183]}]}]},{"pos":[14769,14958],"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.","pos":[0,189],"nodes":[{"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files.","pos":[0,108]},{"content":"This function is not supported on analytic and debug channels, or for ETL files.","pos":[109,189]}]}]},{"pos":[15175,15357],"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","pos":[0,182],"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events.","pos":[0,92]},{"content":"Only events that have been logged after the bookmark event will be returned by the query.","pos":[93,182]}]}]},{"pos":[16028,16270],"content":"Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event and an offset number of events from the bookmark. No events logged before the bookmark plus the offset will be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event and an offset number of events from the bookmark. No events logged before the bookmark plus the offset will be retrieved.","pos":[0,242],"nodes":[{"content":"Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event and an offset number of events from the bookmark.","pos":[0,170]},{"content":"No events logged before the bookmark plus the offset will be retrieved.","pos":[171,242]}]}]},{"pos":[16282,16471],"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.","pos":[0,189],"nodes":[{"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files.","pos":[0,108]},{"content":"This function is not supported on analytic and debug channels, or for ETL files.","pos":[109,189]}]}]},{"pos":[16701,16883],"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","pos":[0,182],"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events.","pos":[0,92]},{"content":"Only events that have been logged after the bookmark event will be returned by the query.","pos":[93,182]}]}]},{"pos":[16945,17012],"content":"The offset number of events to change the position of the bookmark.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset number of events to change the position of the bookmark.","pos":[0,67]}]},{"pos":[17618,17864],"content":"Changes the position in the event stream where the next event that is read will come from by specifying a starting position and an offset from the starting position. No events logged before the starting position plus the offset will be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the position in the event stream where the next event that is read will come from by specifying a starting position and an offset from the starting position. No events logged before the starting position plus the offset will be retrieved.","pos":[0,246],"nodes":[{"content":"Changes the position in the event stream where the next event that is read will come from by specifying a starting position and an offset from the starting position.","pos":[0,165]},{"content":"No events logged before the starting position plus the offset will be retrieved.","pos":[166,246]}]}]},{"pos":[17876,18065],"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.","pos":[0,189],"nodes":[{"content":"You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files.","pos":[0,108]},{"content":"This function is not supported on analytic and debug channels, or for ETL files.","pos":[109,189]}]}]},{"pos":[18235,18359],"content":"A value from the <xref:System.IO.SeekOrigin> enumeration defines where in the stream of events to start querying for events.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value from the &lt;xref:System.IO.SeekOrigin&gt; enumeration defines where in the stream of events to start querying for events.","pos":[0,124],"source":"A value from the <xref:System.IO.SeekOrigin> enumeration defines where in the stream of events to start querying for events."}]},{"pos":[18421,18470],"content":"The offset number of events to add to the origin.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset number of events to add to the origin.","pos":[0,49]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader\n  id: EventLogReader\n  children:\n  - System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  - System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)\n  - System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  - System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)\n  - System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize\n  - System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading\n  - System.Diagnostics.Eventing.Reader.EventLogReader.Dispose\n  - System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)\n  - System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus\n  - System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent\n  - System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)\n  - System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)\n  - System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)\n  - System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)\n  langs:\n  - csharp\n  name: EventLogReader\n  nameWithType: EventLogReader\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader\n  type: Class\n  summary: Enables you to read events from an event log based on an event query. The events that are read by this object are returned as <xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"></xref> objects.\n  remarks: ''\n  example:\n  - 'For example code using this class, see [How To: Query for Events](http://msdn.microsoft.com/en-us/5231a436-4cf2-4539-90d2-a04813aba069) or [How To: Access and Read Event Information](http://msdn.microsoft.com/en-us/14db3375-d305-49ae-aa24-aedbe906e76c).'\n  syntax:\n    content: 'public class EventLogReader : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: EventLogReader(EventLogQuery)\n  nameWithType: EventLogReader.EventLogReader(EventLogQuery)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.EventLogReader(EventLogQuery)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"></xref> class by specifying an event query.\n  remarks: Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.\n  syntax:\n    content: public EventLogReader (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);\n    parameters:\n    - id: eventQuery\n      type: System.Diagnostics.Eventing.Reader.EventLogQuery\n      description: The event query used to retrieve events.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: EventLogReader(String)\n  nameWithType: EventLogReader.EventLogReader(String)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.EventLogReader(String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"></xref> class by specifying an active event log to retrieve events from.\n  remarks: Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.\n  syntax:\n    content: public EventLogReader (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The name of the event log to retrieve events from.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: EventLogReader(EventLogQuery,EventBookmark)\n  nameWithType: EventLogReader.EventLogReader(EventLogQuery,EventBookmark)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.EventLogReader(EventLogQuery,EventBookmark)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"></xref> class by specifying an event query and a bookmark that is used as starting position for the query.\n  remarks: Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.\n  syntax:\n    content: public EventLogReader (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);\n    parameters:\n    - id: eventQuery\n      type: System.Diagnostics.Eventing.Reader.EventLogQuery\n      description: The event query used to retrieve events.\n    - id: bookmark\n      type: System.Diagnostics.Eventing.Reader.EventBookmark\n      description: The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events logged after the bookmark event will be returned by the query.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)\n  id: '#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: EventLogReader(String,PathType)\n  nameWithType: EventLogReader.EventLogReader(String,PathType)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.EventLogReader(String,PathType)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogReader\"></xref> class by specifying the name of an event log to retrieve events from or the path to a log file to retrieve events from.\n  remarks: Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.\n  syntax:\n    content: public EventLogReader (string path, System.Diagnostics.Eventing.Reader.PathType pathType);\n    parameters:\n    - id: path\n      type: System.String\n      description: The name of the event log to retrieve events from, or the path to the event log file to retrieve events from.\n    - id: pathType\n      type: System.Diagnostics.Eventing.Reader.PathType\n      description: Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize\n  id: BatchSize\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: BatchSize\n  nameWithType: EventLogReader.BatchSize\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets or sets the number of events retrieved from the stream of events on every read operation.\n  syntax:\n    content: public int BatchSize { get; set; }\n    return:\n      type: System.Int32\n      description: Returns an integer value.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading\n  id: CancelReading\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: CancelReading()\n  nameWithType: EventLogReader.CancelReading()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Cancels the current query operation.\n  syntax:\n    content: public void CancelReading ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose\n  id: Dispose\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: EventLogReader.Dispose()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Releases all the resources used by this object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: EventLogReader.Dispose(Boolean)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Releases the unmanaged resources used by this object, and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus\n  id: LogStatus\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: LogStatus\n  nameWithType: EventLogReader.LogStatus\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Gets the status of each event log or log file associated with the event query in this object.\n  syntax:\n    content: public System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventLogStatus> LogStatus { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Diagnostics.Eventing.Reader.EventLogStatus}\n      description: Returns a list of <xref href=\"System.Diagnostics.Eventing.Reader.EventLogStatus\"></xref> objects that each contain status information about an event log associated with the event query in this object.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent\n  id: ReadEvent\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: ReadEvent()\n  nameWithType: EventLogReader.ReadEvent()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Reads the next event that is returned from the event query in this object.\n  remarks: ''\n  example:\n  - 'For example code using this class, see [How To: Query for Events](http://msdn.microsoft.com/en-us/5231a436-4cf2-4539-90d2-a04813aba069).'\n  syntax:\n    content: public System.Diagnostics.Eventing.Reader.EventRecord ReadEvent ();\n    parameters: []\n    return:\n      type: System.Diagnostics.Eventing.Reader.EventRecord\n      description: Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"></xref> object.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)\n  id: ReadEvent(System.TimeSpan)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: ReadEvent(TimeSpan)\n  nameWithType: EventLogReader.ReadEvent(TimeSpan)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Reads the next event that is returned from the event query in this object.\n  syntax:\n    content: public System.Diagnostics.Eventing.Reader.EventRecord ReadEvent (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum time to allow the read operation to run before canceling the operation.\n    return:\n      type: System.Diagnostics.Eventing.Reader.EventRecord\n      description: Returns an <xref href=\"System.Diagnostics.Eventing.Reader.EventRecord\"></xref> object.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)\n  id: Seek(System.Diagnostics.Eventing.Reader.EventBookmark)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: Seek(EventBookmark)\n  nameWithType: EventLogReader.Seek(EventBookmark)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(EventBookmark)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event. No events logged before the bookmark event will be retrieved.\n  remarks: You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.\n  syntax:\n    content: public void Seek (System.Diagnostics.Eventing.Reader.EventBookmark bookmark);\n    parameters:\n    - id: bookmark\n      type: System.Diagnostics.Eventing.Reader.EventBookmark\n      description: The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.Seek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)\n  id: Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: Seek(EventBookmark,Int64)\n  nameWithType: EventLogReader.Seek(EventBookmark,Int64)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(EventBookmark,Int64)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event and an offset number of events from the bookmark. No events logged before the bookmark plus the offset will be retrieved.\n  remarks: You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.\n  syntax:\n    content: public void Seek (System.Diagnostics.Eventing.Reader.EventBookmark bookmark, long offset);\n    parameters:\n    - id: bookmark\n      type: System.Diagnostics.Eventing.Reader.EventBookmark\n      description: The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.\n    - id: offset\n      type: System.Int64\n      description: The offset number of events to change the position of the bookmark.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.Seek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)\n  id: Seek(System.IO.SeekOrigin,System.Int64)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  langs:\n  - csharp\n  name: Seek(SeekOrigin,Int64)\n  nameWithType: EventLogReader.Seek(SeekOrigin,Int64)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(SeekOrigin,Int64)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Changes the position in the event stream where the next event that is read will come from by specifying a starting position and an offset from the starting position. No events logged before the starting position plus the offset will be retrieved.\n  remarks: You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files. This function is not supported on analytic and debug channels, or for ETL files.\n  syntax:\n    content: public void Seek (System.IO.SeekOrigin origin, long offset);\n    parameters:\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: A value from the <xref:System.IO.SeekOrigin> enumeration defines where in the stream of events to start querying for events.\n    - id: offset\n      type: System.Int64\n      description: The offset number of events to add to the origin.\n  overload: System.Diagnostics.Eventing.Reader.EventLogReader.Seek*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: EventLogReader(EventLogQuery)\n  nameWithType: EventLogReader.EventLogReader(EventLogQuery)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.EventLogReader(EventLogQuery)\n- uid: System.Diagnostics.Eventing.Reader.EventLogQuery\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventLogQuery\n  nameWithType: EventLogQuery\n  fullName: System.Diagnostics.Eventing.Reader.EventLogQuery\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: EventLogReader(String)\n  nameWithType: EventLogReader.EventLogReader(String)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.EventLogReader(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: EventLogReader(EventLogQuery,EventBookmark)\n  nameWithType: EventLogReader.EventLogReader(EventLogQuery,EventBookmark)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.EventLogReader(EventLogQuery,EventBookmark)\n- uid: System.Diagnostics.Eventing.Reader.EventBookmark\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventBookmark\n  nameWithType: EventBookmark\n  fullName: System.Diagnostics.Eventing.Reader.EventBookmark\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: EventLogReader(String,PathType)\n  nameWithType: EventLogReader.EventLogReader(String,PathType)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.EventLogReader(String,PathType)\n- uid: System.Diagnostics.Eventing.Reader.PathType\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: PathType\n  nameWithType: PathType\n  fullName: System.Diagnostics.Eventing.Reader.PathType\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: BatchSize\n  nameWithType: EventLogReader.BatchSize\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: CancelReading()\n  nameWithType: EventLogReader.CancelReading()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading()\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: Dispose()\n  nameWithType: EventLogReader.Dispose()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose()\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: EventLogReader.Dispose(Boolean)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: LogStatus\n  nameWithType: EventLogReader.LogStatus\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus\n- uid: System.Collections.Generic.IList{System.Diagnostics.Eventing.Reader.EventLogStatus}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<EventLogStatus>\n  nameWithType: IList<EventLogStatus>\n  fullName: System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventLogStatus>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Diagnostics.Eventing.Reader.EventLogStatus>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.Eventing.Reader.EventLogStatus\n    name: EventLogStatus\n    nameWithType: EventLogStatus\n    fullName: EventLogStatus\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: ReadEvent()\n  nameWithType: EventLogReader.ReadEvent()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent()\n- uid: System.Diagnostics.Eventing.Reader.EventRecord\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventRecord\n  nameWithType: EventRecord\n  fullName: System.Diagnostics.Eventing.Reader.EventRecord\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: ReadEvent(TimeSpan)\n  nameWithType: EventLogReader.ReadEvent(TimeSpan)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: Seek(EventBookmark)\n  nameWithType: EventLogReader.Seek(EventBookmark)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(EventBookmark)\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: Seek(EventBookmark,Int64)\n  nameWithType: EventLogReader.Seek(EventBookmark,Int64)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(EventBookmark,Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: Seek(SeekOrigin,Int64)\n  nameWithType: EventLogReader.Seek(SeekOrigin,Int64)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogReader.Seek(SeekOrigin,Int64)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: true\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.#ctor*\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: EventLogReader\n  nameWithType: EventLogReader.EventLogReader\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize*\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: BatchSize\n  nameWithType: EventLogReader.BatchSize\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading*\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: CancelReading\n  nameWithType: EventLogReader.CancelReading\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Dispose*\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: Dispose\n  nameWithType: EventLogReader.Dispose\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus*\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: LogStatus\n  nameWithType: EventLogReader.LogStatus\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent*\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: ReadEvent\n  nameWithType: EventLogReader.ReadEvent\n- uid: System.Diagnostics.Eventing.Reader.EventLogReader.Seek*\n  parent: System.Diagnostics.Eventing.Reader.EventLogReader\n  isExternal: false\n  name: Seek\n  nameWithType: EventLogReader.Seek\n"}