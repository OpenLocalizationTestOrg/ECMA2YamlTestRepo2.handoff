{"nodes":[{"pos":[1470,1719],"content":"Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.","pos":[0,249]}]},{"pos":[1732,3958],"content":"The DynamicILInfo class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.       To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities. The DynamicILInfo class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current DynamicILInfo. For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.       Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your DynamicILInfo object.       Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.      > [!NOTE] >  Do not use DynamicILInfo to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly. Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate. A delegate that is created with the delegate constructor does not have a reference to the target dynamic method. The dynamic method might be reclaimed by garbage collection while the delegate is still in use.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DynamicILInfo class allows developers to write their own MSIL generators instead of using &lt;xref:System.Reflection.Emit.ILGenerator&gt;.","pos":[0,136],"source":"The DynamicILInfo class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>."},{"content":"To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.","pos":[143,265]},{"content":"The DynamicILInfo class provides several overloads of the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt; method, which return tokens valid in the scope of the current DynamicILInfo.","pos":[266,459],"source":" The DynamicILInfo class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current DynamicILInfo."},{"content":"For example, if you need to call an overload of the &lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt; method, you can obtain a &lt;xref:System.RuntimeMethodHandle&gt; for that overload and pass it to the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt; method to obtain a token to embed in your MSIL.","pos":[460,774],"source":" For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL."},{"content":"Once you have created &lt;xref:System.Byte&gt; arrays for your local variable signature, exceptions, and code body, you can use the &lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;, &lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;, and &lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt; methods to insert them into the &lt;xref:System.Reflection.Emit.DynamicMethod&gt; associated with your DynamicILInfo object.","pos":[781,1212],"source":"       Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your DynamicILInfo object."},{"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[1219,1441]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[1442,1738],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Do not use DynamicILInfo to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.","pos":[1744,1894],"source":"      > [!NOTE] >  Do not use DynamicILInfo to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly."},{"content":"Instead, use the &lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt; method to create the delegate.","pos":[1895,2004],"source":" Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate."},{"content":"A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.","pos":[2005,2117]},{"content":"The dynamic method might be reclaimed by garbage collection while the delegate is still in use.","pos":[2118,2213]}]},{"pos":[4537,4609],"content":"Gets the dynamic method whose body is generated by the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the dynamic method whose body is generated by the current instance.","pos":[0,72]}]},{"pos":[4621,5022],"content":"A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method. The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method. The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.","pos":[0,401],"nodes":[{"content":"A &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object is always associated with a dynamic method.","pos":[0,96],"source":"A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method."},{"content":"The purpose of the &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the &lt;xref:System.Reflection.Emit.ILGenerator&gt; class.","pos":[97,401],"source":" The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class."}]}]},{"pos":[5193,5384],"content":"A &lt;xref:System.Reflection.Emit.DynamicMethod&gt; object representing the dynamic method for which the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is generating code.","needQuote":true,"needEscape":true,"source":"A <xref:System.Reflection.Emit.DynamicMethod> object representing the dynamic method for which the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object is generating code."},{"pos":[5896,6064],"content":"Gets a token, valid in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, representing the signature for the associated dynamic method.","needQuote":true,"needEscape":true,"source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing the signature for the associated dynamic method."},{"pos":[6077,6531],"content":"For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[0,157]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[158,454],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[6680,6717],"content":"An array that contains the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the signature.","pos":[0,37]}]},{"pos":[6774,6873],"content":"A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.","pos":[0,99]}]},{"pos":[7450,7627],"content":"Gets a token, valid in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, representing a dynamic method to be called from the associated method.","needQuote":true,"needEscape":true,"source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a dynamic method to be called from the associated method."},{"pos":[7639,7965],"content":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.","pos":[0,326],"nodes":[{"content":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.","pos":[0,182],"source":"The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"To call the associated dynamic method recursively, pass the value of the &lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt; property.","pos":[183,326],"source":" To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property."}]}]},{"pos":[8160,8187],"content":"The dynamic method to call.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dynamic method to call.","pos":[0,27]}]},{"pos":[8244,8364],"content":"A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.","needQuote":true,"needEscape":true,"nodes":[{"content":"A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.","pos":[0,120]}]},{"pos":[8934,9112],"content":"Gets a token, valid in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, representing a field to be accessed from the associated dynamic method.","needQuote":true,"needEscape":true,"source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method."},{"pos":[9124,9551],"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","pos":[0,427],"nodes":[{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.","pos":[0,161],"source":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"Use the &lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.FieldInfo&gt; for the field you want to access, then use the &lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; property to get the &lt;xref:System.RuntimeFieldHandle&gt;.","pos":[162,427],"source":" Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>."}]}]},{"pos":[9715,9740],"content":"The field to be accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be accessed.","pos":[0,25]}]},{"pos":[9797,9975],"content":"A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."},{"pos":[10550,10729],"content":"Gets a token, valid in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, representing a method to be accessed from the associated dynamic method.","needQuote":true,"needEscape":true,"source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method to be accessed from the associated dynamic method."},{"pos":[10742,11453],"content":"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.      > [!NOTE] >  For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must obtain a token for any method that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.","pos":[0,162],"source":"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"Use the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.MethodInfo&gt; for the method you want to access, and then use the &lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt; property to get the &lt;xref:System.RuntimeMethodHandle&gt;.","pos":[163,438],"source":" Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  For a method that belongs to a generic type, use the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt; method overload and specify a &lt;xref:System.RuntimeTypeHandle&gt; for the generic type.","pos":[444,708],"source":"      > [!NOTE] >  For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type."}]},{"pos":[11622,11648],"content":"The method to be accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to be accessed.","pos":[0,26]}]},{"pos":[11705,11985],"content":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;xref:System.Reflection.Emit.OpCodes.Call&gt; or &lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;, in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref:System.Reflection.Emit.OpCodes.Call> or <xref:System.Reflection.Emit.OpCodes.Ldtoken>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."},{"pos":[12550,12721],"content":"Gets a token, valid in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, representing a type to be used in the associated dynamic method.","needQuote":true,"needEscape":true,"source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a type to be used in the associated dynamic method."},{"pos":[12734,13114],"content":"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.       To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.       To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property.","pos":[0,378],"nodes":[{"content":"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.","pos":[0,234],"source":"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"To get a &lt;xref:System.RuntimeTypeHandle&gt; representing a type, use the &lt;xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt; property.","pos":[241,378],"source":"       To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property."}]}]},{"pos":[13275,13295],"content":"The type to be used.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type to be used.","pos":[0,20]}]},{"pos":[13352,13530],"content":"A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."},{"pos":[14040,14221],"content":"Gets a token, valid in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, representing a string literal to be used in the associated dynamic method.","needQuote":true,"needEscape":true,"source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a string literal to be used in the associated dynamic method."},{"pos":[14365,14387],"content":"The string to be used.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to be used.","pos":[0,22]}]},{"pos":[14444,14624],"content":"A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."},{"pos":[15298,15520],"content":"Gets a token, valid in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.","needQuote":true,"needEscape":true,"source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type."},{"pos":[15532,15963],"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.","pos":[0,431],"nodes":[{"content":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.","pos":[0,161],"source":"You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"Use the &lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.FieldInfo&gt; for the field you want to access, and then use the &lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; property to get the &lt;xref:System.RuntimeFieldHandle&gt;.","pos":[162,431],"source":" Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>."}]}]},{"pos":[16158,16183],"content":"The field to be accessed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field to be accessed.","pos":[0,25]}]},{"pos":[16262,16300],"content":"The generic type the field belongs to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The generic type the field belongs to.","pos":[0,38]}]},{"pos":[16357,16534],"content":"A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."},{"pos":[17213,17360],"content":"Gets a token, valid in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, representing a method on a generic type.","needQuote":true,"needEscape":true,"source":"Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method on a generic type."},{"pos":[17372,17806],"content":"You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.","pos":[0,434],"nodes":[{"content":"You must obtain a token for any method that will be called by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.","pos":[0,160],"source":"You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"Use the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.MethodInfo&gt; for the method you want to call, and then use the &lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt; property to get the &lt;xref:System.RuntimeMethodHandle&gt;.","pos":[161,434],"source":" Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>."}]}]},{"pos":[18005,18016],"content":"The method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method.","pos":[0,11]}]},{"pos":[18095,18134],"content":"The generic type the method belongs to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The generic type the method belongs to.","pos":[0,39]}]},{"pos":[18191,18471],"content":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;xref:System.Reflection.Emit.OpCodes.Call&gt; or &lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;, in the scope of the current <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref:System.Reflection.Emit.OpCodes.Call> or <xref:System.Reflection.Emit.OpCodes.Ldtoken>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object."},{"pos":[19005,19057],"content":"Sets the code body of the associated dynamic method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the code body of the associated dynamic method.","pos":[0,52]}]},{"pos":[19070,19744],"content":"No validity checks are performed on the MSIL stream.       Calling this method a second time replaces the first MSIL stream with the second.       Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"No validity checks are performed on the MSIL stream.","pos":[0,52]},{"content":"Calling this method a second time replaces the first MSIL stream with the second.","pos":[59,140]},{"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[147,369]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[370,666],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[19898,19937],"content":"An array that contains the MSIL stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the MSIL stream.","pos":[0,39]}]},{"pos":[20005,20083],"content":"The maximum number of items on the operand stack when the method is executing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of items on the operand stack when the method is executing.","pos":[0,78]}]},{"pos":[20652,20704],"content":"Sets the code body of the associated dynamic method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the code body of the associated dynamic method.","pos":[0,52]}]},{"pos":[20717,21391],"content":"No validity checks are performed on the MSIL stream.       Calling this method a second time replaces the first MSIL stream with the second.       Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set.\" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"No validity checks are performed on the MSIL stream.","pos":[0,52]},{"content":"Calling this method a second time replaces the first MSIL stream with the second.","pos":[59,140]},{"content":"Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set.\"","pos":[147,369]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[370,666],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[21557,21610],"content":"A pointer to a byte array containing the MSIL stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A pointer to a byte array containing the MSIL stream.","pos":[0,53]}]},{"pos":[21674,21713],"content":"The number of bytes in the MSIL stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the MSIL stream.","pos":[0,39]}]},{"pos":[21781,21859],"content":"The maximum number of items on the operand stack when the method is executing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of items on the operand stack when the method is executing.","pos":[0,78]}]},{"pos":[22034,22160],"content":"<ph id=\"ph1\">&lt;code&gt;code&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <ph id=\"ph2\">&lt;code&gt;codeSize&lt;/code&gt;</ph> is greater than 0.","needQuote":true,"needEscape":true,"source":"<code>code</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and <code>codeSize</code> is greater than 0."},{"pos":[22275,22312],"content":"<ph id=\"ph1\">&lt;code&gt;codeSize&lt;/code&gt;</ph> is less than 0.","needQuote":true,"needEscape":true,"source":"<code>codeSize</code> is less than 0."},{"pos":[22753,22815],"content":"Sets the exception metadata for the associated dynamic method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the exception metadata for the associated dynamic method.","pos":[0,62]}]},{"pos":[22828,23420],"content":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The exception metadata for a method defines the location and size of all <ph id=\"ph1\">`try`</ph>, <ph id=\"ph2\">`catch`</ph>, <ph id=\"ph3\">`finally`</ph>, filter, and fault blocks.","pos":[0,125],"source":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks."},{"content":"For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[126,295]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[296,592],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[23574,23620],"content":"An array that contains the exception metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the exception metadata.","pos":[0,46]}]},{"pos":[24181,24243],"content":"Sets the exception metadata for the associated dynamic method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the exception metadata for the associated dynamic method.","pos":[0,62]}]},{"pos":[24256,24889],"content":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The exception metadata for a method defines the location and size of all <ph id=\"ph1\">`try`</ph>, <ph id=\"ph2\">`catch`</ph>, <ph id=\"ph3\">`finally`</ph>, filter, and fault blocks.","pos":[0,125],"source":"The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks."},{"content":"For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[126,336]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[337,633],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[25061,25121],"content":"A pointer to a byte array containing the exception metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"A pointer to a byte array containing the exception metadata.","pos":[0,60]}]},{"pos":[25191,25233],"content":"The number of bytes of exception metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes of exception metadata.","pos":[0,42]}]},{"pos":[25414,25551],"content":"<ph id=\"ph1\">&lt;code&gt;exceptions&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <ph id=\"ph2\">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> is greater than 0.","needQuote":true,"needEscape":true,"source":"<code>exceptions</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and <code>exceptionSize</code> is greater than 0."},{"pos":[25666,25708],"content":"<ph id=\"ph1\">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> is less than 0.","needQuote":true,"needEscape":true,"source":"<code>exceptionSize</code> is less than 0."},{"pos":[26169,26282],"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","pos":[0,113]}]},{"pos":[26295,27134],"content":"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.       For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The local variable signature describes the layout of a method's local variables.","pos":[0,80]},{"content":"To simplify construction of the local variable signature, use the <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) &lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.Emit.SignatureHelper&gt; for the local signature.","pos":[81,364],"source":" To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature."},{"content":"For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[371,538]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[539,835],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[27300,27416],"content":"An array that contains the layout of local variables for the associated <xref:System.Reflection.Emit.DynamicMethod>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the layout of local variables for the associated &lt;xref:System.Reflection.Emit.DynamicMethod&gt;.","pos":[0,116],"source":"An array that contains the layout of local variables for the associated <xref:System.Reflection.Emit.DynamicMethod>."}]},{"pos":[28001,28114],"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the local variable signature that describes the layout of local variables for the associated dynamic method.","pos":[0,113]}]},{"pos":[28127,28966],"content":"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.       For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The local variable signature describes the layout of a method's local variables.","pos":[0,80]},{"content":"To simplify construction of the local variable signature, use the <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) &lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.Emit.SignatureHelper&gt; for the local signature.","pos":[81,364],"source":" To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature."},{"content":"For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[371,538]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[539,835],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[29149,29265],"content":"An array that contains the layout of local variables for the associated <xref:System.Reflection.Emit.DynamicMethod>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the layout of local variables for the associated &lt;xref:System.Reflection.Emit.DynamicMethod&gt;.","pos":[0,116],"source":"An array that contains the layout of local variables for the associated <xref:System.Reflection.Emit.DynamicMethod>."}]},{"pos":[29334,29371],"content":"The number of bytes in the signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the signature.","pos":[0,37]}]},{"pos":[29556,29697],"content":"<ph id=\"ph1\">&lt;code&gt;localSignature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <ph id=\"ph2\">&lt;code&gt;signatureSize&lt;/code&gt;</ph> is greater than 0.","needQuote":true,"needEscape":true,"source":"<code>localSignature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and <code>signatureSize</code> is greater than 0."},{"pos":[29812,29854],"content":"<ph id=\"ph1\">&lt;code&gt;signatureSize&lt;/code&gt;</ph> is less than 0.","needQuote":true,"needEscape":true,"source":"<code>signatureSize</code> is less than 0."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.DynamicILInfo\n  id: DynamicILInfo\n  children:\n  - System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  langs:\n  - csharp\n  name: DynamicILInfo\n  nameWithType: DynamicILInfo\n  fullName: System.Reflection.Emit.DynamicILInfo\n  type: Class\n  summary: Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.\n  remarks: \"The DynamicILInfo class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.  \\n  \\n To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities. The DynamicILInfo class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current DynamicILInfo. For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.  \\n  \\n Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your DynamicILInfo object.  \\n  \\n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \\n  \\n> [!NOTE]\\n>  Do not use DynamicILInfo to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly. Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate. A delegate that is created with the delegate constructor does not have a reference to the target dynamic method. The dynamic method might be reclaimed by garbage collection while the delegate is still in use.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class DynamicILInfo\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  id: DynamicMethod\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: DynamicMethod\n  nameWithType: DynamicILInfo.DynamicMethod\n  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the dynamic method whose body is generated by the current instance.\n  remarks: A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method. The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.\n  syntax:\n    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }\n    return:\n      type: System.Reflection.Emit.DynamicMethod\n      description: A <xref:System.Reflection.Emit.DynamicMethod> object representing the dynamic method for which the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object is generating code.\n  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  id: GetTokenFor(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(Byte[])\n  nameWithType: DynamicILInfo.GetTokenFor(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing the signature for the associated dynamic method.\n  remarks: 'For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'\n  syntax:\n    content: public int GetTokenFor (byte[] signature);\n    parameters:\n    - id: signature\n      type: System.Byte[]\n      description: An array that contains the signature.\n    return:\n      type: System.Int32\n      description: A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(DynamicMethod)\n  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a dynamic method to be called from the associated method.\n  remarks: The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.\n  syntax:\n    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);\n    parameters:\n    - id: method\n      type: System.Reflection.Emit.DynamicMethod\n      description: The dynamic method to call.\n    return:\n      type: System.Int32\n      description: A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  id: GetTokenFor(System.RuntimeFieldHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeFieldHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method.\n  remarks: You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.\n  syntax:\n    content: public int GetTokenFor (RuntimeFieldHandle field);\n    parameters:\n    - id: field\n      type: System.RuntimeFieldHandle\n      description: The field to be accessed.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  id: GetTokenFor(System.RuntimeMethodHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeMethodHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method to be accessed from the associated dynamic method.\n  remarks: \"You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.  \\n  \\n> [!NOTE]\\n>  For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.\"\n  syntax:\n    content: public int GetTokenFor (RuntimeMethodHandle method);\n    parameters:\n    - id: method\n      type: System.RuntimeMethodHandle\n      description: The method to be accessed.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref:System.Reflection.Emit.OpCodes.Call> or <xref:System.Reflection.Emit.OpCodes.Ldtoken>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a type to be used in the associated dynamic method.\n  remarks: \"The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.  \\n  \\n To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public int GetTokenFor (RuntimeTypeHandle type);\n    parameters:\n    - id: type\n      type: System.RuntimeTypeHandle\n      description: The type to be used.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  id: GetTokenFor(System.String)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(String)\n  nameWithType: DynamicILInfo.GetTokenFor(String)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a string literal to be used in the associated dynamic method.\n  syntax:\n    content: public int GetTokenFor (string literal);\n    parameters:\n    - id: literal\n      type: System.String\n      description: The string to be used.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.\n  remarks: You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.\n  syntax:\n    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);\n    parameters:\n    - id: field\n      type: System.RuntimeFieldHandle\n      description: The field to be accessed.\n    - id: contextType\n      type: System.RuntimeTypeHandle\n      description: The generic type the field belongs to.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a token, valid in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref>, representing a method on a generic type.\n  remarks: You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.\n  syntax:\n    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);\n    parameters:\n    - id: method\n      type: System.RuntimeMethodHandle\n      description: The method.\n    - id: contextType\n      type: System.RuntimeTypeHandle\n      description: The generic type the method belongs to.\n    return:\n      type: System.Int32\n      description: A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref:System.Reflection.Emit.OpCodes.Call> or <xref:System.Reflection.Emit.OpCodes.Ldtoken>, in the scope of the current <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object.\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  id: SetCode(System.Byte[],System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetCode(Byte[],Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the code body of the associated dynamic method.\n  remarks: \"No validity checks are performed on the MSIL stream.  \\n  \\n Calling this method a second time replaces the first MSIL stream with the second.  \\n  \\n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public void SetCode (byte[] code, int maxStackSize);\n    parameters:\n    - id: code\n      type: System.Byte[]\n      description: An array that contains the MSIL stream.\n    - id: maxStackSize\n      type: System.Int32\n      description: The maximum number of items on the operand stack when the method is executing.\n  overload: System.Reflection.Emit.DynamicILInfo.SetCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  id: SetCode(System.Byte*,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetCode(Byte*,Int32,Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the code body of the associated dynamic method.\n  remarks: \"No validity checks are performed on the MSIL stream.  \\n  \\n Calling this method a second time replaces the first MSIL stream with the second.  \\n  \\n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set.\\\" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public void SetCode (byte* code, int codeSize, int maxStackSize);\n    parameters:\n    - id: code\n      type: System.Byte*\n      description: A pointer to a byte array containing the MSIL stream.\n    - id: codeSize\n      type: System.Int32\n      description: The number of bytes in the MSIL stream.\n    - id: maxStackSize\n      type: System.Int32\n      description: The maximum number of items on the operand stack when the method is executing.\n  overload: System.Reflection.Emit.DynamicILInfo.SetCode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>code</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and <code>codeSize</code> is greater than 0.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>codeSize</code> is less than 0.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  id: SetExceptions(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetExceptions(Byte[])\n  nameWithType: DynamicILInfo.SetExceptions(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the exception metadata for the associated dynamic method.\n  remarks: 'The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'\n  syntax:\n    content: public void SetExceptions (byte[] exceptions);\n    parameters:\n    - id: exceptions\n      type: System.Byte[]\n      description: An array that contains the exception metadata.\n  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  id: SetExceptions(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetExceptions(Byte*,Int32)\n  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the exception metadata for the associated dynamic method.\n  remarks: 'The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'\n  syntax:\n    content: public void SetExceptions (byte* exceptions, int exceptionsSize);\n    parameters:\n    - id: exceptions\n      type: System.Byte*\n      description: A pointer to a byte array containing the exception metadata.\n    - id: exceptionsSize\n      type: System.Int32\n      description: The number of bytes of exception metadata.\n  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>exceptions</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and <code>exceptionSize</code> is greater than 0.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>exceptionSize</code> is less than 0.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  id: SetLocalSignature(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetLocalSignature(Byte[])\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the local variable signature that describes the layout of local variables for the associated dynamic method.\n  remarks: \"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.  \\n  \\n For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public void SetLocalSignature (byte[] localSignature);\n    parameters:\n    - id: localSignature\n      type: System.Byte[]\n      description: An array that contains the layout of local variables for the associated <xref:System.Reflection.Emit.DynamicMethod>.\n  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  id: SetLocalSignature(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetLocalSignature(Byte*,Int32)\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the local variable signature that describes the layout of local variables for the associated dynamic method.\n  remarks: \"The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.  \\n  \\n For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public void SetLocalSignature (byte* localSignature, int signatureSize);\n    parameters:\n    - id: localSignature\n      type: System.Byte*\n      description: An array that contains the layout of local variables for the associated <xref:System.Reflection.Emit.DynamicMethod>.\n    - id: signatureSize\n      type: System.Int32\n      description: The number of bytes in the signature.\n  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localSignature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and <code>signatureSize</code> is greater than 0.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>signatureSize</code> is less than 0.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicILInfo.DynamicMethod\n  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n- uid: System.Reflection.Emit.DynamicMethod\n  parent: System.Reflection.Emit\n  isExternal: true\n  name: DynamicMethod\n  nameWithType: DynamicMethod\n  fullName: System.Reflection.Emit.DynamicMethod\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(Byte[])\n  nameWithType: DynamicILInfo.GetTokenFor(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(DynamicMethod)\n  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeFieldHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n- uid: System.RuntimeFieldHandle\n  parent: System\n  isExternal: true\n  name: RuntimeFieldHandle\n  nameWithType: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeMethodHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: true\n  name: RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: true\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(String)\n  nameWithType: DynamicILInfo.GetTokenFor(String)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetCode(Byte[],Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetCode(Byte*,Int32,Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetExceptions(Byte[])\n  nameWithType: DynamicILInfo.SetExceptions(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetExceptions(Byte*,Int32)\n  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetLocalSignature(Byte[])\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetLocalSignature(Byte*,Int32)\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)\n- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicILInfo.DynamicMethod\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor\n  nameWithType: DynamicILInfo.GetTokenFor\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetCode\n  nameWithType: DynamicILInfo.SetCode\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetExceptions\n  nameWithType: DynamicILInfo.SetExceptions\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetLocalSignature\n  nameWithType: DynamicILInfo.SetLocalSignature\n"}