{"nodes":[{"pos":[228,314],"content":"Represents the method that executes on a <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Represents the method that executes on a <xref href=\"System.Threading.Thread\"></xref>."},{"pos":[327,1786],"content":"When a managed thread is created, the method that executes on the thread is represented by a ThreadStart delegate or a <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%2A> constructor. The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called. Execution begins at the first line of the method represented by the ThreadStart or <xref:System.Threading.ParameterizedThreadStart> delegate.      > [!NOTE] >  Visual Basic and C# users can omit the ThreadStart or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread. In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.       [C++]      > [!NOTE] >  In version 2.0 of the .NET Framework, creating a ThreadStart delegate for a static method in C++ requires only one parameter: the address of the callback method, qualified by the class name. In earlier versions two parameters were required when creating a delegate for a static method: zero (null) and the method address. For an instance method, all versions require two parameters: the instance variable and the method address.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a managed thread is created, the method that executes on the thread is represented by a ThreadStart delegate or a &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate that is passed to the &lt;xref:System.Threading.Thread.%23ctor%2A&gt; constructor.","pos":[0,253],"source":"When a managed thread is created, the method that executes on the thread is represented by a ThreadStart delegate or a <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%2A> constructor."},{"content":"The thread does not begin executing until the &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method is called.","pos":[254,382],"source":" The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called."},{"content":"Execution begins at the first line of the method represented by the ThreadStart or &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate.","pos":[383,524],"source":" Execution begins at the first line of the method represented by the ThreadStart or <xref:System.Threading.ParameterizedThreadStart> delegate."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Visual Basic and C# users can omit the ThreadStart or &lt;xref:System.Threading.ParameterizedThreadStart&gt; delegate constructor when creating a thread.","pos":[530,690],"source":"      > [!NOTE] >  Visual Basic and C# users can omit the ThreadStart or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread."},{"content":"In Visual Basic, use the <ph id=\"ph1\">`AddressOf`</ph> operator when passing your method to the &lt;xref:System.Threading.Thread.%23ctor%2A&gt; constructor; for example, <ph id=\"ph2\">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.","pos":[691,881],"source":" In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`."},{"content":"In C#, simply specify the name of the thread procedure.","pos":[882,937]},{"content":"The compiler selects the correct delegate constructor.","pos":[938,992]},{"content":"[C++]      &gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In version 2.0 of the .NET Framework, creating a ThreadStart delegate for a static method in C++ requires only one parameter: the address of the callback method, qualified by the class name.","pos":[999,1213],"source":"       [C++]      > [!NOTE] >  In version 2.0 of the .NET Framework, creating a ThreadStart delegate for a static method in C++ requires only one parameter: the address of the callback method, qualified by the class name."},{"content":"In earlier versions two parameters were required when creating a delegate for a static method: zero (null) and the method address.","pos":[1214,1344]},{"content":"For an instance method, all versions require two parameters: the instance variable and the method address.","pos":[1345,1451]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ThreadStart\n  id: ThreadStart\n  langs:\n  - csharp\n  name: ThreadStart\n  nameWithType: ThreadStart\n  fullName: System.Threading.ThreadStart\n  type: Delegate\n  summary: Represents the method that executes on a <xref href=\"System.Threading.Thread\"></xref>.\n  remarks: \"When a managed thread is created, the method that executes on the thread is represented by a ThreadStart delegate or a <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%2A> constructor. The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called. Execution begins at the first line of the method represented by the ThreadStart or <xref:System.Threading.ParameterizedThreadStart> delegate.  \\n  \\n> [!NOTE]\\n>  Visual Basic and C# users can omit the ThreadStart or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread. In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.  \\n  \\n [C++]  \\n  \\n> [!NOTE]\\n>  In version 2.0 of the .NET Framework, creating a ThreadStart delegate for a static method in C++ requires only one parameter: the address of the callback method, qualified by the class name. In earlier versions two parameters were required when creating a delegate for a static method: zero (null) and the method address. For an instance method, all versions require two parameters: the instance variable and the method address.\"\n  example:\n  - \"The following code example shows the syntax for creating and using a ThreadStart delegate with an instance method and with a static method.  \\n  \\n For another simple example that demonstrates how to create a ThreadStart delegate, see the <xref:System.Threading.Thread.Start?displayProperty=fullName> method overload. For more information about thread creation, see [Creating Threads and Passing Data at Start Time](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cpp[System.Threading.ThreadStart2#1](~/add/codesnippet/cpp/t-system.threading.threa_6_1.cpp)]\\n [!code-cs[System.Threading.ThreadStart2#1](~/add/codesnippet/csharp/t-system.threading.threa_6_1.cs)]\\n [!code-vb[System.Threading.ThreadStart2#1](~/add/codesnippet/visualbasic/t-system.threading.threa_6_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public delegate void ThreadStart();\n  inheritance:\n  - System.Delegate\n  platform:\n  - net462\nreferences:\n- uid: System.Delegate\n  isExternal: false\n  name: System.Delegate\n"}