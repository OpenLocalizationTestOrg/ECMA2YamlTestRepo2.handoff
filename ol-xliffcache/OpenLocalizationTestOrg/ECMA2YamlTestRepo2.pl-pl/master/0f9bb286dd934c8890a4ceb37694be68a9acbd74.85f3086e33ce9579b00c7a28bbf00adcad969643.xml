{"nodes":[{"pos":[813,1016],"content":"Represents an attachable member store for an object where attachable members are set. This attachable member store can then be referenced with <xref href=\"System.Xaml.AttachablePropertyServices\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an attachable member store for an object where attachable members are set.","pos":[0,85]},{"content":"This attachable member store can then be referenced with <bpt id=\"p1\">&lt;xref href=\"System.Xaml.AttachablePropertyServices\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[86,203],"source":" This attachable member store can then be referenced with <xref href=\"System.Xaml.AttachablePropertyServices\"></xref>."}]},{"pos":[1028,1575],"content":"An attachable member is typically implemented and used as an attachable property. The term \"attachable member\" provides for the possibility that a technology also defines a system for attachable events. As an item in a property store, an attachable event stores a reference to the handler that is assigned through attachable member usage. An attachable event in XAML can use the same store as the attachable properties do, even if the attachable event is not truly a property to the underlying type system or as it is considered in real-world use.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An attachable member is typically implemented and used as an attachable property. The term \"attachable member\" provides for the possibility that a technology also defines a system for attachable events. As an item in a property store, an attachable event stores a reference to the handler that is assigned through attachable member usage. An attachable event in XAML can use the same store as the attachable properties do, even if the attachable event is not truly a property to the underlying type system or as it is considered in real-world use.","pos":[0,547],"nodes":[{"content":"An attachable member is typically implemented and used as an attachable property.","pos":[0,81]},{"content":"The term \"attachable member\" provides for the possibility that a technology also defines a system for attachable events.","pos":[82,202]},{"content":"As an item in a property store, an attachable event stores a reference to the handler that is assigned through attachable member usage.","pos":[203,338]},{"content":"An attachable event in XAML can use the same store as the attachable properties do, even if the attachable event is not truly a property to the underlying type system or as it is considered in real-world use.","pos":[339,547]}]}]},{"pos":[2437,2537],"content":"Copies all attachable member/value pairs from this attachable member store into a destination array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies all attachable member/value pairs from this attachable member store into a destination array.","pos":[0,100]}]},{"pos":[2858,3102],"content":"The destination array. The array is a generic array, should be passed undimensioned, and should have components of <xref href=\"System.Xaml.AttachableMemberIdentifier\"></xref> and <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination array.","pos":[0,22]},{"content":"The array is a generic array, should be passed undimensioned, and should have components of <bpt id=\"p1\">&lt;xref href=\"System.Xaml.AttachableMemberIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[23,244],"source":" The array is a generic array, should be passed undimensioned, and should have components of <xref href=\"System.Xaml.AttachableMemberIdentifier\"></xref> and <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref>."}]},{"pos":[3163,3207],"content":"The source index where copying should begin.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source index where copying should begin.","pos":[0,44]}]},{"pos":[3673,3753],"content":"Gets the count of the attachable member entries in this attachable member store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the count of the attachable member entries in this attachable member store.","pos":[0,80]}]},{"pos":[3867,3909],"content":"The integer count of entries in the store.","needQuote":true,"needEscape":true,"nodes":[{"content":"The integer count of entries in the store.","pos":[0,42]}]},{"pos":[4539,4627],"content":"Removes the entry for the specified attachable member from this attachable member store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the entry for the specified attachable member from this attachable member store.","pos":[0,88]}]},{"pos":[4870,4944],"content":"The XAML type system identifier for the attachable member entry to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XAML type system identifier for the attachable member entry to remove.","pos":[0,74]}]},{"pos":[5003,5248],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if an attachable member entry for <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">attachableMemberIdentifier</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found in the store and removed; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an attachable member entry for <code>attachableMemberIdentifier</code> was found in the store and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5913,5985],"content":"Sets a value for the specified attachable member in the specified store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets a value for the specified attachable member in the specified store.","pos":[0,72]}]},{"pos":[5997,6191],"content":"An implementation should not throw an exception if the specific attachable member already exists. If a member already exists, the implementation should overwrite any existing value with `value`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An implementation should not throw an exception if the specific attachable member already exists.","pos":[0,97]},{"content":"If a member already exists, the implementation should overwrite any existing value with <ph id=\"ph1\">`value`</ph>.","pos":[98,194],"source":" If a member already exists, the implementation should overwrite any existing value with `value`."}]},{"pos":[6445,6516],"content":"The XAML type system identifier for the attachable member entry to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XAML type system identifier for the attachable member entry to set.","pos":[0,71]}]},{"pos":[6578,6595],"content":"The value to set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to set.","pos":[0,17]}]},{"pos":[7274,7357],"content":"Attempts to get a value for the specified attachable member in the specified store.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to get a value for the specified attachable member in the specified store.","pos":[0,83]}]},{"pos":[7369,7479],"content":"An implementation should not throw an exception if the specific attachable member is not located in the store.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An implementation should not throw an exception if the specific attachable member is not located in the store.","pos":[0,110]}]},{"pos":[7740,7811],"content":"The XAML type system identifier for the attachable member entry to get.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XAML type system identifier for the attachable member entry to get.","pos":[0,71]}]},{"pos":[7873,8028],"content":"Out parameter. When this method returns, contains the destination object for the value if `attachableMemberIdentifier` exists in the store and has a value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Out parameter.","pos":[0,14]},{"content":"When this method returns, contains the destination object for the value if <ph id=\"ph1\">`attachableMemberIdentifier`</ph> exists in the store and has a value.","pos":[15,155],"source":" When this method returns, contains the destination object for the value if `attachableMemberIdentifier` exists in the store and has a value."}]},{"pos":[8087,8365],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if an attachable member entry for <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">attachableMemberIdentifier</ph><ept id=\"p2\">&lt;/code&gt;</ept> was found in the store and a value was posted to <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an attachable member entry for <code>attachableMemberIdentifier</code> was found in the store and a value was posted to <code>value</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xaml.IAttachedPropertyStore\n  id: IAttachedPropertyStore\n  children:\n  - System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)\n  - System.Xaml.IAttachedPropertyStore.PropertyCount\n  - System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)\n  - System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)\n  - System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)\n  langs:\n  - csharp\n  name: IAttachedPropertyStore\n  nameWithType: IAttachedPropertyStore\n  fullName: System.Xaml.IAttachedPropertyStore\n  type: Interface\n  summary: Represents an attachable member store for an object where attachable members are set. This attachable member store can then be referenced with <xref href=\"System.Xaml.AttachablePropertyServices\"></xref>.\n  remarks: An attachable member is typically implemented and used as an attachable property. The term \"attachable member\" provides for the possibility that a technology also defines a system for attachable events. As an item in a property store, an attachable event stores a reference to the handler that is assigned through attachable member usage. An attachable event in XAML can use the same store as the attachable properties do, even if the attachable event is not truly a property to the underlying type system or as it is considered in real-world use.\n  syntax:\n    content: public interface IAttachedPropertyStore\n  implements: []\n  platform:\n  - net462\n- uid: System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)\n  id: CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)\n  parent: System.Xaml.IAttachedPropertyStore\n  langs:\n  - csharp\n  name: CopyPropertiesTo(KeyValuePair<AttachableMemberIdentifier,Object>,Int32)\n  nameWithType: IAttachedPropertyStore.CopyPropertiesTo(KeyValuePair<AttachableMemberIdentifier,Object>,Int32)\n  fullName: System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(KeyValuePair<AttachableMemberIdentifier,Object>,Int32)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Copies all attachable member/value pairs from this attachable member store into a destination array.\n  syntax:\n    content: public void CopyPropertiesTo (System.Collections.Generic.KeyValuePair<System.Xaml.AttachableMemberIdentifier,object>[] array, int index);\n    parameters:\n    - id: array\n      type: System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[]\n      description: The destination array. The array is a generic array, should be passed undimensioned, and should have components of <xref href=\"System.Xaml.AttachableMemberIdentifier\"></xref> and <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref>.\n    - id: index\n      type: System.Int32\n      description: The source index where copying should begin.\n  overload: System.Xaml.IAttachedPropertyStore.CopyPropertiesTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.IAttachedPropertyStore.PropertyCount\n  id: PropertyCount\n  parent: System.Xaml.IAttachedPropertyStore\n  langs:\n  - csharp\n  name: PropertyCount\n  nameWithType: IAttachedPropertyStore.PropertyCount\n  fullName: System.Xaml.IAttachedPropertyStore.PropertyCount\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Gets the count of the attachable member entries in this attachable member store.\n  syntax:\n    content: public int PropertyCount { get; }\n    return:\n      type: System.Int32\n      description: The integer count of entries in the store.\n  overload: System.Xaml.IAttachedPropertyStore.PropertyCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)\n  id: RemoveProperty(System.Xaml.AttachableMemberIdentifier)\n  parent: System.Xaml.IAttachedPropertyStore\n  langs:\n  - csharp\n  name: RemoveProperty(AttachableMemberIdentifier)\n  nameWithType: IAttachedPropertyStore.RemoveProperty(AttachableMemberIdentifier)\n  fullName: System.Xaml.IAttachedPropertyStore.RemoveProperty(AttachableMemberIdentifier)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Removes the entry for the specified attachable member from this attachable member store.\n  syntax:\n    content: public bool RemoveProperty (System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier);\n    parameters:\n    - id: attachableMemberIdentifier\n      type: System.Xaml.AttachableMemberIdentifier\n      description: The XAML type system identifier for the attachable member entry to remove.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an attachable member entry for <code>attachableMemberIdentifier</code> was found in the store and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Xaml.IAttachedPropertyStore.RemoveProperty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)\n  id: SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)\n  parent: System.Xaml.IAttachedPropertyStore\n  langs:\n  - csharp\n  name: SetProperty(AttachableMemberIdentifier,Object)\n  nameWithType: IAttachedPropertyStore.SetProperty(AttachableMemberIdentifier,Object)\n  fullName: System.Xaml.IAttachedPropertyStore.SetProperty(AttachableMemberIdentifier,Object)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Sets a value for the specified attachable member in the specified store.\n  remarks: An implementation should not throw an exception if the specific attachable member already exists. If a member already exists, the implementation should overwrite any existing value with `value`.\n  syntax:\n    content: public void SetProperty (System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier, object value);\n    parameters:\n    - id: attachableMemberIdentifier\n      type: System.Xaml.AttachableMemberIdentifier\n      description: The XAML type system identifier for the attachable member entry to set.\n    - id: value\n      type: System.Object\n      description: The value to set.\n  overload: System.Xaml.IAttachedPropertyStore.SetProperty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)\n  id: TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)\n  parent: System.Xaml.IAttachedPropertyStore\n  langs:\n  - csharp\n  name: TryGetProperty(AttachableMemberIdentifier,Object)\n  nameWithType: IAttachedPropertyStore.TryGetProperty(AttachableMemberIdentifier,Object)\n  fullName: System.Xaml.IAttachedPropertyStore.TryGetProperty(AttachableMemberIdentifier,Object)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Xaml\n  summary: Attempts to get a value for the specified attachable member in the specified store.\n  remarks: An implementation should not throw an exception if the specific attachable member is not located in the store.\n  syntax:\n    content: public bool TryGetProperty (System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier, out object value);\n    parameters:\n    - id: attachableMemberIdentifier\n      type: System.Xaml.AttachableMemberIdentifier\n      description: The XAML type system identifier for the attachable member entry to get.\n    - id: value\n      type: System.Object\n      description: Out parameter. When this method returns, contains the destination object for the value if `attachableMemberIdentifier` exists in the store and has a value.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an attachable member entry for <code>attachableMemberIdentifier</code> was found in the store and a value was posted to <code>value</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Xaml.IAttachedPropertyStore.TryGetProperty*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: CopyPropertiesTo(KeyValuePair<AttachableMemberIdentifier,Object>,Int32)\n  nameWithType: IAttachedPropertyStore.CopyPropertiesTo(KeyValuePair<AttachableMemberIdentifier,Object>,Int32)\n  fullName: System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(KeyValuePair<AttachableMemberIdentifier,Object>,Int32)\n- uid: System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[]\n  parent: System.Collections.Generic\n  isExternal: true\n  name: KeyValuePair<AttachableMemberIdentifier,Object>\n  nameWithType: KeyValuePair<AttachableMemberIdentifier,Object>\n  fullName: System.Collections.Generic.KeyValuePair<System.Xaml.AttachableMemberIdentifier,System.Object>[]\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.Xaml.AttachableMemberIdentifier,System.Object>[]\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xaml.AttachableMemberIdentifier\n    name: AttachableMemberIdentifier\n    nameWithType: AttachableMemberIdentifier\n    fullName: AttachableMemberIdentifier\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Xaml.IAttachedPropertyStore.PropertyCount\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: PropertyCount\n  nameWithType: IAttachedPropertyStore.PropertyCount\n  fullName: System.Xaml.IAttachedPropertyStore.PropertyCount\n- uid: System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: RemoveProperty(AttachableMemberIdentifier)\n  nameWithType: IAttachedPropertyStore.RemoveProperty(AttachableMemberIdentifier)\n  fullName: System.Xaml.IAttachedPropertyStore.RemoveProperty(AttachableMemberIdentifier)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xaml.AttachableMemberIdentifier\n  parent: System.Xaml\n  isExternal: false\n  name: AttachableMemberIdentifier\n  nameWithType: AttachableMemberIdentifier\n  fullName: System.Xaml.AttachableMemberIdentifier\n- uid: System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: SetProperty(AttachableMemberIdentifier,Object)\n  nameWithType: IAttachedPropertyStore.SetProperty(AttachableMemberIdentifier,Object)\n  fullName: System.Xaml.IAttachedPropertyStore.SetProperty(AttachableMemberIdentifier,Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: TryGetProperty(AttachableMemberIdentifier,Object)\n  nameWithType: IAttachedPropertyStore.TryGetProperty(AttachableMemberIdentifier,Object)\n  fullName: System.Xaml.IAttachedPropertyStore.TryGetProperty(AttachableMemberIdentifier,Object)\n- uid: System.Xaml.IAttachedPropertyStore.CopyPropertiesTo*\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: CopyPropertiesTo\n  nameWithType: IAttachedPropertyStore.CopyPropertiesTo\n- uid: System.Xaml.IAttachedPropertyStore.PropertyCount*\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: PropertyCount\n  nameWithType: IAttachedPropertyStore.PropertyCount\n- uid: System.Xaml.IAttachedPropertyStore.RemoveProperty*\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: RemoveProperty\n  nameWithType: IAttachedPropertyStore.RemoveProperty\n- uid: System.Xaml.IAttachedPropertyStore.SetProperty*\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: SetProperty\n  nameWithType: IAttachedPropertyStore.SetProperty\n- uid: System.Xaml.IAttachedPropertyStore.TryGetProperty*\n  parent: System.Xaml.IAttachedPropertyStore\n  isExternal: false\n  name: TryGetProperty\n  nameWithType: IAttachedPropertyStore.TryGetProperty\n"}