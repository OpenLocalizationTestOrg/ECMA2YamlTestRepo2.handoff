{"nodes":[{"pos":[527,633],"content":"Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).","pos":[0,106]}]},{"pos":[1217,1382],"content":"Gets the current element in the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection. This property gets the type-friendly version of the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current element in the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","pos":[0,105],"source":"Gets the current element in the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection."},{"content":"This property gets the type-friendly version of the object.","pos":[106,165]}]},{"pos":[1555,1655],"content":"The current element in the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"The current element in the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection."},{"pos":[2133,2257],"content":"Advances the enumerator to the next element of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"Advances the enumerator to the next element of the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection."},{"pos":[2270,3098],"content":"After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, an enumerator is positioned before the first element of the collection, and the first call to the MoveNext method moves the enumerator over the first element of the collection.       After the end of the collection is passed, subsequent calls to MoveNext return `false` until <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.       An enumerator remains valid as long as the collection remains unchanged. If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to MoveNext or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"After an enumerator is created or after a call to the &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; method, an enumerator is positioned before the first element of the collection, and the first call to the MoveNext method moves the enumerator over the first element of the collection.","pos":[0,298],"source":"After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, an enumerator is positioned before the first element of the collection, and the first call to the MoveNext method moves the enumerator over the first element of the collection."},{"content":"After the end of the collection is passed, subsequent calls to MoveNext return <ph id=\"ph1\">`false`</ph> until &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; is called.","pos":[305,468],"source":"       After the end of the collection is passed, subsequent calls to MoveNext return `false` until <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[475,547]},{"content":"If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to MoveNext or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[548,824],"source":" If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to MoveNext or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."}]},{"pos":[3225,3469],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the enumerator was successfully advanced to the next element; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the enumerator has passed the end of the collection.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the enumerator was successfully advanced to the next element; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the enumerator has passed the end of the collection."},{"pos":[3660,3721],"content":"The collection was modified after the enumerator was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was modified after the enumerator was created.","pos":[0,61]}]},{"pos":[4102,4261],"content":"Sets the enumerator to its initial position, which is before the first element in the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.GenericAce\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"Sets the enumerator to its initial position, which is before the first element in the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection."},{"pos":[4273,4636],"content":"An enumerator remains valid as long as the collection remains unchanged. If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the Reset method throws an <xref:System.InvalidOperationException>","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the Reset method throws an <xref:System.InvalidOperationException>","pos":[0,363],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; method or the Reset method throws an &lt;xref:System.InvalidOperationException&gt;","pos":[73,363],"source":" If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the Reset method throws an <xref:System.InvalidOperationException>"}]}]},{"pos":[4888,4949],"content":"The collection was modified after the enumerator was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was modified after the enumerator was created.","pos":[0,61]}]},{"pos":[5505,5548],"content":"Gets the current element in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current element in the collection.","pos":[0,43]}]},{"pos":[5561,7063],"content":"After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, you must call the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of IEnumerator.Current; otherwise, IEnumerator.Current is undefined.       IEnumerator.Current also throws an exception if the last call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.       IEnumerator.Current does not move the position of the enumerator, and consecutive calls to IEnumerator.Current return the same object until either <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.       An enumerator remains valid as long as the collection remains unchanged. If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> and IEnumerator.Current, IEnumerator.Current returns the element that it is set to, even if the enumerator is already invalidated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"After an enumerator is created or after a call to the &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; method, you must call the &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; method to advance the enumerator to the first element of the collection before reading the value of IEnumerator.Current; otherwise, IEnumerator.Current is undefined.","pos":[0,368],"source":"After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, you must call the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of IEnumerator.Current; otherwise, IEnumerator.Current is undefined."},{"content":"IEnumerator.Current also throws an exception if the last call to &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, which indicates the end of the collection.","pos":[375,563],"source":"       IEnumerator.Current also throws an exception if the last call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection."},{"content":"IEnumerator.Current does not move the position of the enumerator, and consecutive calls to IEnumerator.Current return the same object until either &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; is called.","pos":[570,853],"source":"       IEnumerator.Current does not move the position of the enumerator, and consecutive calls to IEnumerator.Current return the same object until either <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[860,932]},{"content":"If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[933,1264],"source":" If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; and IEnumerator.Current, IEnumerator.Current returns the element that it is set to, even if the enumerator is already invalidated.","pos":[1265,1496],"source":" If the collection is modified between <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> and IEnumerator.Current, IEnumerator.Current returns the element that it is set to, even if the enumerator is already invalidated."}]},{"pos":[7200,7246],"content":"Returns the current element in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the current element in the collection.","pos":[0,46]}]},{"pos":[7467,7528],"content":"The collection was modified after the enumerator was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was modified after the enumerator was created.","pos":[0,61]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.AceEnumerator\n  id: AceEnumerator\n  children:\n  - System.Security.AccessControl.AceEnumerator.Current\n  - System.Security.AccessControl.AceEnumerator.MoveNext\n  - System.Security.AccessControl.AceEnumerator.Reset\n  - System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current\n  langs:\n  - csharp\n  name: AceEnumerator\n  nameWithType: AceEnumerator\n  fullName: System.Security.AccessControl.AceEnumerator\n  type: Class\n  summary: Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).\n  syntax:\n    content: 'public sealed class AceEnumerator : System.Collections.IEnumerator'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerator\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.AceEnumerator.Current\n  id: Current\n  parent: System.Security.AccessControl.AceEnumerator\n  langs:\n  - csharp\n  name: Current\n  nameWithType: AceEnumerator.Current\n  fullName: System.Security.AccessControl.AceEnumerator.Current\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the current element in the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection. This property gets the type-friendly version of the object.\n  syntax:\n    content: public System.Security.AccessControl.GenericAce Current { get; }\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: The current element in the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection.\n  overload: System.Security.AccessControl.AceEnumerator.Current*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.AccessControl.AceEnumerator.MoveNext\n  id: MoveNext\n  parent: System.Security.AccessControl.AceEnumerator\n  langs:\n  - csharp\n  name: MoveNext()\n  nameWithType: AceEnumerator.MoveNext()\n  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Advances the enumerator to the next element of the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection.\n  remarks: \"After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, an enumerator is positioned before the first element of the collection, and the first call to the MoveNext method moves the enumerator over the first element of the collection.  \\n  \\n After the end of the collection is passed, subsequent calls to MoveNext return `false` until <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to MoveNext or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.\"\n  syntax:\n    content: public bool MoveNext ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the enumerator was successfully advanced to the next element; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the enumerator has passed the end of the collection.\n  overload: System.Security.AccessControl.AceEnumerator.MoveNext*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The collection was modified after the enumerator was created.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.AceEnumerator.Reset\n  id: Reset\n  parent: System.Security.AccessControl.AceEnumerator\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: AceEnumerator.Reset()\n  fullName: System.Security.AccessControl.AceEnumerator.Reset()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets the enumerator to its initial position, which is before the first element in the <xref href=\"System.Security.AccessControl.GenericAce\"></xref> collection.\n  remarks: An enumerator remains valid as long as the collection remains unchanged. If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the Reset method throws an <xref:System.InvalidOperationException>\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Security.AccessControl.AceEnumerator.Reset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The collection was modified after the enumerator was created.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current\n  id: System#Collections#IEnumerator#Current\n  isEii: true\n  parent: System.Security.AccessControl.AceEnumerator\n  langs:\n  - csharp\n  name: System.Collections.IEnumerator.Current\n  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current\n  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the current element in the collection.\n  remarks: \"After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, you must call the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of IEnumerator.Current; otherwise, IEnumerator.Current is undefined.  \\n  \\n IEnumerator.Current also throws an exception if the last call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.  \\n  \\n IEnumerator.Current does not move the position of the enumerator, and consecutive calls to IEnumerator.Current return the same object until either <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> and IEnumerator.Current, IEnumerator.Current returns the element that it is set to, even if the enumerator is already invalidated.\"\n  syntax:\n    content: object System.Collections.IEnumerator.Current { get; }\n    return:\n      type: System.Object\n      description: Returns the current element in the collection.\n  overload: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The collection was modified after the enumerator was created.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Security.AccessControl.AceEnumerator.Current\n  parent: System.Security.AccessControl.AceEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: AceEnumerator.Current\n  fullName: System.Security.AccessControl.AceEnumerator.Current\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.AceEnumerator.MoveNext\n  parent: System.Security.AccessControl.AceEnumerator\n  isExternal: false\n  name: MoveNext()\n  nameWithType: AceEnumerator.MoveNext()\n  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.AceEnumerator.Reset\n  parent: System.Security.AccessControl.AceEnumerator\n  isExternal: false\n  name: Reset()\n  nameWithType: AceEnumerator.Reset()\n  fullName: System.Security.AccessControl.AceEnumerator.Reset()\n- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current\n  parent: System.Security.AccessControl.AceEnumerator\n  isExternal: false\n  name: System.Collections.IEnumerator.Current\n  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current\n  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current\n- uid: System.Security.AccessControl.AceEnumerator.Current*\n  parent: System.Security.AccessControl.AceEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: AceEnumerator.Current\n- uid: System.Security.AccessControl.AceEnumerator.MoveNext*\n  parent: System.Security.AccessControl.AceEnumerator\n  isExternal: false\n  name: MoveNext\n  nameWithType: AceEnumerator.MoveNext\n- uid: System.Security.AccessControl.AceEnumerator.Reset*\n  parent: System.Security.AccessControl.AceEnumerator\n  isExternal: false\n  name: Reset\n  nameWithType: AceEnumerator.Reset\n- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*\n  parent: System.Security.AccessControl.AceEnumerator\n  isExternal: false\n  name: System.Collections.IEnumerator.Current\n  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current\n"}