{"nodes":[{"pos":[743,799],"content":"Provides methods that control the lifetime of an add-in.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides methods that control the lifetime of an add-in.","pos":[0,56]}]},{"pos":[812,2328],"content":"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them. This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.       When a ContractHandle object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor. When the ContractHandle object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract.       Adapters implement the contract. The ContractHandle class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted. Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter. When the adapter class is garbage-collected, the ContractHandle object will also be collected and the ContractHandle object will revoke the lifetime token on the contract.       It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class. You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them. This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.       When a ContractHandle object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor. When the ContractHandle object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract.       Adapters implement the contract. The ContractHandle class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted. Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter. When the adapter class is garbage-collected, the ContractHandle object will also be collected and the ContractHandle object will revoke the lifetime token on the contract.       It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class. You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract.","pos":[0,1510],"nodes":[{"content":"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them.","pos":[0,180]},{"content":"This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.","pos":[181,293]},{"content":"When a ContractHandle object is constructed, it calls the &lt;xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A&gt; method on the contract that is passed to the constructor.","pos":[300,481],"source":"       When a ContractHandle object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor."},{"content":"When the ContractHandle object is disposed or finalized, it calls the &lt;xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A&gt; method on the contract, which removes its hold on the contract.","pos":[482,680],"source":" When the ContractHandle object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract."},{"content":"Adapters implement the contract.","pos":[687,719]},{"content":"The ContractHandle class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted.","pos":[720,884]},{"content":"Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter.","pos":[885,1033]},{"content":"When the adapter class is garbage-collected, the ContractHandle object will also be collected and the ContractHandle object will revoke the lifetime token on the contract.","pos":[1034,1205]},{"content":"It is recommended that your view-to-contract adapters inherit from the &lt;xref:System.AddIn.Pipeline.ContractBase&gt; class.","pos":[1212,1331],"source":"       It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class."},{"content":"You can then use a default implementation for the members of &lt;xref:System.AddIn.Contract.IContract&gt;, which means you need to implement only the members of your specific contract.","pos":[1332,1510],"source":" You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract."}]}]},{"pos":[3384,3482],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Pipeline.ContractHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> class."},{"pos":[3670,3706],"content":"The contract to use in the pipeline.","needQuote":true,"needEscape":true,"nodes":[{"content":"The contract to use in the pipeline.","pos":[0,36]}]},{"pos":[3879,3965],"content":"<ph id=\"ph1\">&lt;code&gt;contract&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>contract</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4430,4515],"content":"Gets the instance of the add-in-side adapter when the application domain was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the instance of the add-in-side adapter when the application domain was created.","pos":[0,85]}]},{"pos":[4528,4692],"content":"The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>.       If the application domain was previously created by a user, there is no owner.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>.       If the application domain was previously created by a user, there is no owner.","pos":[0,162],"nodes":[{"content":"The add-in-side adapters are typed as &lt;xref:System.AddIn.Contract.IContract&gt;.","pos":[0,77],"source":"The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>."},{"content":"If the application domain was previously created by a user, there is no owner.","pos":[84,162]}]}]},{"pos":[4879,4911],"content":"The application domain to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The application domain to check.","pos":[0,32]}]},{"pos":[4987,5102],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the owner of the application domain.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.AddIn.Contract.IContract\"></xref> object that represents the owner of the application domain."},{"pos":[5284,5368],"content":"<ph id=\"ph1\">&lt;code&gt;domain&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>domain</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5736,5773],"content":"Gets the contract used by a pipeline.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the contract used by a pipeline.","pos":[0,37]}]},{"pos":[5929,6018],"content":"The contract, which is derived from <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Contract.IContract\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The contract, which is derived from <xref href=\"System.AddIn.Contract.IContract\"></xref>."},{"pos":[6688,6764],"content":"Determines whether an application domain is owned by the specified contract.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether an application domain is owned by the specified contract.","pos":[0,76]}]},{"pos":[6989,7011],"content":"The contract to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The contract to check.","pos":[0,22]}]},{"pos":[7077,7109],"content":"The application domain to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The application domain to check.","pos":[0,32]}]},{"pos":[7168,7348],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the contract owns the application domain; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the contract owns the application domain; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7537,7646],"content":"<ph id=\"ph1\">&lt;code&gt;contract&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;domain&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>contract</code> or <code>domain</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8013,8075],"content":"Revokes the lifetime token on a contract, regardless of input.","needQuote":true,"needEscape":true,"nodes":[{"content":"Revokes the lifetime token on a contract, regardless of input.","pos":[0,62]}]},{"pos":[8636,8745],"content":"Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources.","pos":[0,109]}]},{"pos":[8900,9109],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[9556,9666],"content":"Releases the resources associated with the <bpt id=\"p1\">&lt;xref href=\"System.AddIn.Pipeline.ContractHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Releases the resources associated with the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> instance."},{"pos":[9679,10183],"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.       When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.       When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method.","pos":[0,502],"nodes":[{"content":"This method overrides &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;.","pos":[0,80],"source":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>."},{"content":"Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt; method.","pos":[81,356],"source":" Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method."},{"content":"When called by the garbage collector, this method calls the &lt;xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29&gt; method.","pos":[363,502],"source":"       When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method."}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AddIn.Pipeline.ContractHandle\n  id: ContractHandle\n  children:\n  - System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)\n  - System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)\n  - System.AddIn.Pipeline.ContractHandle.Contract\n  - System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  - System.AddIn.Pipeline.ContractHandle.Dispose\n  - System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)\n  - System.AddIn.Pipeline.ContractHandle.Finalize\n  langs:\n  - csharp\n  name: ContractHandle\n  nameWithType: ContractHandle\n  fullName: System.AddIn.Pipeline.ContractHandle\n  type: Class\n  summary: Provides methods that control the lifetime of an add-in.\n  remarks: \"Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them. This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.  \\n  \\n When a ContractHandle object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor. When the ContractHandle object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract.  \\n  \\n Adapters implement the contract. The ContractHandle class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted. Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter. When the adapter class is garbage-collected, the ContractHandle object will also be collected and the ContractHandle object will revoke the lifetime token on the contract.  \\n  \\n It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class. You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract.\"\n  example:\n  - \"The following example shows how to set the lifetime token handle in a contract-to-view adapter on the add-in side of a pipeline.  \\n  \\n [!code-vb[AddinP2HostSideAdapters#2](~/add/codesnippet/visualbasic/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.vb#2)]\\n [!code-cs[AddinP2HostSideAdapters#2](~/add/codesnippet/csharp/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.cs#2)]\"\n  syntax:\n    content: 'public class ContractHandle : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)\n  id: '#ctor(System.AddIn.Contract.IContract)'\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: ContractHandle(IContract)\n  nameWithType: ContractHandle.ContractHandle(IContract)\n  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)\n  type: Constructor\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Initializes a new instance of the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> class.\n  syntax:\n    content: public ContractHandle (System.AddIn.Contract.IContract contract);\n    parameters:\n    - id: contract\n      type: System.AddIn.Contract.IContract\n      description: The contract to use in the pipeline.\n  overload: System.AddIn.Pipeline.ContractHandle.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>contract</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)\n  id: AppDomainOwner(System.AppDomain)\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: AppDomainOwner(AppDomain)\n  nameWithType: ContractHandle.AppDomainOwner(AppDomain)\n  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Gets the instance of the add-in-side adapter when the application domain was created.\n  remarks: \"The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>.  \\n  \\n If the application domain was previously created by a user, there is no owner.\"\n  syntax:\n    content: public static System.AddIn.Contract.IContract AppDomainOwner (AppDomain domain);\n    parameters:\n    - id: domain\n      type: System.AppDomain\n      description: The application domain to check.\n    return:\n      type: System.AddIn.Contract.IContract\n      description: An <xref href=\"System.AddIn.Contract.IContract\"></xref> object that represents the owner of the application domain.\n  overload: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>domain</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.AddIn.Pipeline.ContractHandle.Contract\n  id: Contract\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: Contract\n  nameWithType: ContractHandle.Contract\n  fullName: System.AddIn.Pipeline.ContractHandle.Contract\n  type: Property\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Gets the contract used by a pipeline.\n  syntax:\n    content: public System.AddIn.Contract.IContract Contract { get; }\n    return:\n      type: System.AddIn.Contract.IContract\n      description: The contract, which is derived from <xref href=\"System.AddIn.Contract.IContract\"></xref>.\n  overload: System.AddIn.Pipeline.ContractHandle.Contract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  id: ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: ContractOwnsAppDomain(IContract,AppDomain)\n  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)\n  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Determines whether an application domain is owned by the specified contract.\n  syntax:\n    content: public static bool ContractOwnsAppDomain (System.AddIn.Contract.IContract contract, AppDomain domain);\n    parameters:\n    - id: contract\n      type: System.AddIn.Contract.IContract\n      description: The contract to check.\n    - id: domain\n      type: System.AppDomain\n      description: The application domain to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the contract owns the application domain; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>contract</code> or <code>domain</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose\n  id: Dispose\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ContractHandle.Dispose()\n  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Revokes the lifetime token on a contract, regardless of input.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.AddIn.Pipeline.ContractHandle.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ContractHandle.Dispose(Boolean)\n  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.AddIn.Pipeline.ContractHandle.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Pipeline.ContractHandle.Finalize\n  id: Finalize\n  parent: System.AddIn.Pipeline.ContractHandle\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: ContractHandle.Finalize()\n  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()\n  type: Method\n  assemblies:\n  - System.AddIn\n  namespace: System.AddIn.Pipeline\n  summary: Releases the resources associated with the <xref href=\"System.AddIn.Pipeline.ContractHandle\"></xref> instance.\n  remarks: \"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \\n  \\n When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method.\"\n  syntax:\n    content: ~ContractHandle ();\n    parameters: []\n  overload: System.AddIn.Pipeline.ContractHandle.Finalize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: ContractHandle(IContract)\n  nameWithType: ContractHandle.ContractHandle(IContract)\n  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)\n- uid: System.AddIn.Contract.IContract\n  parent: System.AddIn.Contract\n  isExternal: false\n  name: IContract\n  nameWithType: IContract\n  fullName: System.AddIn.Contract.IContract\n- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: AppDomainOwner(AppDomain)\n  nameWithType: ContractHandle.AppDomainOwner(AppDomain)\n  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)\n- uid: System.AppDomain\n  parent: System\n  isExternal: false\n  name: AppDomain\n  nameWithType: AppDomain\n  fullName: System.AppDomain\n- uid: System.AddIn.Pipeline.ContractHandle.Contract\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Contract\n  nameWithType: ContractHandle.Contract\n  fullName: System.AddIn.Pipeline.ContractHandle.Contract\n- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: ContractOwnsAppDomain(IContract,AppDomain)\n  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)\n  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: ContractHandle.Dispose()\n  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ContractHandle.Dispose(Boolean)\n  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)\n- uid: System.AddIn.Pipeline.ContractHandle.Finalize\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Finalize()\n  nameWithType: ContractHandle.Finalize()\n  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()\n- uid: System.AddIn.Pipeline.ContractHandle.#ctor*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: ContractHandle\n  nameWithType: ContractHandle.ContractHandle\n- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: AppDomainOwner\n  nameWithType: ContractHandle.AppDomainOwner\n- uid: System.AddIn.Pipeline.ContractHandle.Contract*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Contract\n  nameWithType: ContractHandle.Contract\n- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: ContractOwnsAppDomain\n  nameWithType: ContractHandle.ContractOwnsAppDomain\n- uid: System.AddIn.Pipeline.ContractHandle.Dispose*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Dispose\n  nameWithType: ContractHandle.Dispose\n- uid: System.AddIn.Pipeline.ContractHandle.Finalize*\n  parent: System.AddIn.Pipeline.ContractHandle\n  isExternal: false\n  name: Finalize\n  nameWithType: ContractHandle.Finalize\n"}