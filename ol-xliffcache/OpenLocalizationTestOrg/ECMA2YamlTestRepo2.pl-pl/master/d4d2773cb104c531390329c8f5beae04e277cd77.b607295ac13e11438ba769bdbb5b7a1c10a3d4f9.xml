{"nodes":[{"pos":[933,1207],"content":"The DirectoryEntryConfiguration class provides a direct way to specify and obtain provider-specific options for manipulating a directory object. Typically, the options apply to search operations of the underlying directory store. The supported options are provider-specific.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DirectoryEntryConfiguration class provides a direct way to specify and obtain provider-specific options for manipulating a directory object. Typically, the options apply to search operations of the underlying directory store. The supported options are provider-specific.","pos":[0,274],"nodes":[{"content":"The DirectoryEntryConfiguration class provides a direct way to specify and obtain provider-specific options for manipulating a directory object.","pos":[0,144]},{"content":"Typically, the options apply to search operations of the underlying directory store.","pos":[145,229]},{"content":"The supported options are provider-specific.","pos":[230,274]}]}]},{"pos":[1852,1934],"content":"Gets the host name of the server for the current binding to this directory object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the host name of the server for the current binding to this directory object.","pos":[0,82]}]},{"pos":[2073,2096],"content":"The name of the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the server.","pos":[0,23]}]},{"pos":[2723,2790],"content":"Determines if mutual authentication is performed by the SSPI layer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines if mutual authentication is performed by the SSPI layer.","pos":[0,67]}]},{"pos":[2931,3111],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if mutual authentication has been performed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if mutual authentication has been performed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3662,3707],"content":"Gets or sets the page size in a paged search.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the page size in a paged search.","pos":[0,45]}]},{"pos":[3821,3853],"content":"The number of entries in a page.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of entries in a page.","pos":[0,32]}]},{"pos":[4429,4471],"content":"Gets or sets the password encoding method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the password encoding method.","pos":[0,42]}]},{"pos":[4672,4817],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.PasswordEncodingMethod\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration members that indicates the type of password encoding.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.DirectoryServices.PasswordEncodingMethod\"></xref> enumeration members that indicates the type of password encoding."},{"pos":[5381,5484],"content":"Gets or sets the port number to use to establish an SSL connection when the password is set or changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the port number to use to establish an SSL connection when the password is set or changed.","pos":[0,103]}]},{"pos":[5496,5592],"content":"By default, port 636 is used to establish an SSL connection when setting or changing a password.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, port 636 is used to establish an SSL connection when setting or changing a password.","pos":[0,96]}]},{"pos":[5710,5800],"content":"The port number to use to establish an SSL connection when the password is set or changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The port number to use to establish an SSL connection when the password is set or changed.","pos":[0,90]}]},{"pos":[6340,6416],"content":"Gets or sets a value that determines if and how referral chasing is pursued.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that determines if and how referral chasing is pursued.","pos":[0,76]}]},{"pos":[6607,6785],"content":"A combination of one or more of the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.ReferralChasingOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration members that specifies if and how referral chasing is pursued.","needQuote":true,"needEscape":true,"source":"A combination of one or more of the <xref href=\"System.DirectoryServices.ReferralChasingOption\"></xref> enumeration members that specifies if and how referral chasing is pursued."},{"pos":[7346,7461],"content":"Gets or sets a security mask to use with <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntryConfiguration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a security mask to use with <xref href=\"System.DirectoryServices.DirectoryEntryConfiguration\"></xref>."},{"pos":[7641,7790],"content":"A combination of one or more of the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SecurityMasks\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration members that specifies the security mask.","needQuote":true,"needEscape":true,"source":"A combination of one or more of the <xref href=\"System.DirectoryServices.SecurityMasks\"></xref> enumeration members that specifies the security mask."},{"pos":[8448,8570],"content":"Sets the name of a security principal so that when the principal is accessed, its quota information will also be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the name of a security principal so that when the principal is accessed, its quota information will also be returned.","pos":[0,122]}]},{"pos":[8733,8807],"content":"The account name that is being set to allow queries on its principal name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The account name that is being set to allow queries on its principal name.","pos":[0,74]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.DirectoryEntryConfiguration\n  id: DirectoryEntryConfiguration\n  children:\n  - System.DirectoryServices.DirectoryEntryConfiguration.GetCurrentServerName\n  - System.DirectoryServices.DirectoryEntryConfiguration.IsMutuallyAuthenticated\n  - System.DirectoryServices.DirectoryEntryConfiguration.PageSize\n  - System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding\n  - System.DirectoryServices.DirectoryEntryConfiguration.PasswordPort\n  - System.DirectoryServices.DirectoryEntryConfiguration.Referral\n  - System.DirectoryServices.DirectoryEntryConfiguration.SecurityMasks\n  - System.DirectoryServices.DirectoryEntryConfiguration.SetUserNameQueryQuota(System.String)\n  langs:\n  - csharp\n  name: DirectoryEntryConfiguration\n  nameWithType: DirectoryEntryConfiguration\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration\n  type: Class\n  summary: The DirectoryEntryConfiguration class provides a direct way to specify and obtain provider-specific options for manipulating a directory object. Typically, the options apply to search operations of the underlying directory store. The supported options are provider-specific.\n  syntax:\n    content: public class DirectoryEntryConfiguration\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.GetCurrentServerName\n  id: GetCurrentServerName\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  langs:\n  - csharp\n  name: GetCurrentServerName()\n  nameWithType: DirectoryEntryConfiguration.GetCurrentServerName()\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.GetCurrentServerName()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the host name of the server for the current binding to this directory object.\n  syntax:\n    content: public string GetCurrentServerName ();\n    parameters: []\n    return:\n      type: System.String\n      description: The name of the server.\n  overload: System.DirectoryServices.DirectoryEntryConfiguration.GetCurrentServerName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.IsMutuallyAuthenticated\n  id: IsMutuallyAuthenticated\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  langs:\n  - csharp\n  name: IsMutuallyAuthenticated()\n  nameWithType: DirectoryEntryConfiguration.IsMutuallyAuthenticated()\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.IsMutuallyAuthenticated()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines if mutual authentication is performed by the SSPI layer.\n  syntax:\n    content: public bool IsMutuallyAuthenticated ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if mutual authentication has been performed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.DirectoryServices.DirectoryEntryConfiguration.IsMutuallyAuthenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PageSize\n  id: PageSize\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  langs:\n  - csharp\n  name: PageSize\n  nameWithType: DirectoryEntryConfiguration.PageSize\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.PageSize\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets the page size in a paged search.\n  syntax:\n    content: public int PageSize { get; set; }\n    return:\n      type: System.Int32\n      description: The number of entries in a page.\n  overload: System.DirectoryServices.DirectoryEntryConfiguration.PageSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding\n  id: PasswordEncoding\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  langs:\n  - csharp\n  name: PasswordEncoding\n  nameWithType: DirectoryEntryConfiguration.PasswordEncoding\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets the password encoding method.\n  syntax:\n    content: public System.DirectoryServices.PasswordEncodingMethod PasswordEncoding { get; set; }\n    return:\n      type: System.DirectoryServices.PasswordEncodingMethod\n      description: One of the <xref href=\"System.DirectoryServices.PasswordEncodingMethod\"></xref> enumeration members that indicates the type of password encoding.\n  overload: System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PasswordPort\n  id: PasswordPort\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  langs:\n  - csharp\n  name: PasswordPort\n  nameWithType: DirectoryEntryConfiguration.PasswordPort\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.PasswordPort\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets the port number to use to establish an SSL connection when the password is set or changed.\n  remarks: By default, port 636 is used to establish an SSL connection when setting or changing a password.\n  syntax:\n    content: public int PasswordPort { get; set; }\n    return:\n      type: System.Int32\n      description: The port number to use to establish an SSL connection when the password is set or changed.\n  overload: System.DirectoryServices.DirectoryEntryConfiguration.PasswordPort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.Referral\n  id: Referral\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  langs:\n  - csharp\n  name: Referral\n  nameWithType: DirectoryEntryConfiguration.Referral\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.Referral\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets a value that determines if and how referral chasing is pursued.\n  syntax:\n    content: public System.DirectoryServices.ReferralChasingOption Referral { get; set; }\n    return:\n      type: System.DirectoryServices.ReferralChasingOption\n      description: A combination of one or more of the <xref href=\"System.DirectoryServices.ReferralChasingOption\"></xref> enumeration members that specifies if and how referral chasing is pursued.\n  overload: System.DirectoryServices.DirectoryEntryConfiguration.Referral*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.SecurityMasks\n  id: SecurityMasks\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  langs:\n  - csharp\n  name: SecurityMasks\n  nameWithType: DirectoryEntryConfiguration.SecurityMasks\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.SecurityMasks\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets a security mask to use with <xref href=\"System.DirectoryServices.DirectoryEntryConfiguration\"></xref>.\n  syntax:\n    content: public System.DirectoryServices.SecurityMasks SecurityMasks { get; set; }\n    return:\n      type: System.DirectoryServices.SecurityMasks\n      description: A combination of one or more of the <xref href=\"System.DirectoryServices.SecurityMasks\"></xref> enumeration members that specifies the security mask.\n  overload: System.DirectoryServices.DirectoryEntryConfiguration.SecurityMasks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.SetUserNameQueryQuota(System.String)\n  id: SetUserNameQueryQuota(System.String)\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  langs:\n  - csharp\n  name: SetUserNameQueryQuota(String)\n  nameWithType: DirectoryEntryConfiguration.SetUserNameQueryQuota(String)\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.SetUserNameQueryQuota(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Sets the name of a security principal so that when the principal is accessed, its quota information will also be returned.\n  syntax:\n    content: public void SetUserNameQueryQuota (string accountName);\n    parameters:\n    - id: accountName\n      type: System.String\n      description: The account name that is being set to allow queries on its principal name.\n  overload: System.DirectoryServices.DirectoryEntryConfiguration.SetUserNameQueryQuota*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.GetCurrentServerName\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: GetCurrentServerName()\n  nameWithType: DirectoryEntryConfiguration.GetCurrentServerName()\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.GetCurrentServerName()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.IsMutuallyAuthenticated\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: IsMutuallyAuthenticated()\n  nameWithType: DirectoryEntryConfiguration.IsMutuallyAuthenticated()\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.IsMutuallyAuthenticated()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PageSize\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: PageSize\n  nameWithType: DirectoryEntryConfiguration.PageSize\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.PageSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: PasswordEncoding\n  nameWithType: DirectoryEntryConfiguration.PasswordEncoding\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding\n- uid: System.DirectoryServices.PasswordEncodingMethod\n  parent: System.DirectoryServices\n  isExternal: false\n  name: PasswordEncodingMethod\n  nameWithType: PasswordEncodingMethod\n  fullName: System.DirectoryServices.PasswordEncodingMethod\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PasswordPort\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: PasswordPort\n  nameWithType: DirectoryEntryConfiguration.PasswordPort\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.PasswordPort\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.Referral\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: Referral\n  nameWithType: DirectoryEntryConfiguration.Referral\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.Referral\n- uid: System.DirectoryServices.ReferralChasingOption\n  parent: System.DirectoryServices\n  isExternal: false\n  name: ReferralChasingOption\n  nameWithType: ReferralChasingOption\n  fullName: System.DirectoryServices.ReferralChasingOption\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.SecurityMasks\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: SecurityMasks\n  nameWithType: DirectoryEntryConfiguration.SecurityMasks\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.SecurityMasks\n- uid: System.DirectoryServices.SecurityMasks\n  parent: System.DirectoryServices\n  isExternal: false\n  name: SecurityMasks\n  nameWithType: SecurityMasks\n  fullName: System.DirectoryServices.SecurityMasks\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.SetUserNameQueryQuota(System.String)\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: SetUserNameQueryQuota(String)\n  nameWithType: DirectoryEntryConfiguration.SetUserNameQueryQuota(String)\n  fullName: System.DirectoryServices.DirectoryEntryConfiguration.SetUserNameQueryQuota(String)\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.GetCurrentServerName*\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: GetCurrentServerName\n  nameWithType: DirectoryEntryConfiguration.GetCurrentServerName\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.IsMutuallyAuthenticated*\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: DirectoryEntryConfiguration.IsMutuallyAuthenticated\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PageSize*\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: PageSize\n  nameWithType: DirectoryEntryConfiguration.PageSize\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding*\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: PasswordEncoding\n  nameWithType: DirectoryEntryConfiguration.PasswordEncoding\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.PasswordPort*\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: PasswordPort\n  nameWithType: DirectoryEntryConfiguration.PasswordPort\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.Referral*\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: Referral\n  nameWithType: DirectoryEntryConfiguration.Referral\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.SecurityMasks*\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: SecurityMasks\n  nameWithType: DirectoryEntryConfiguration.SecurityMasks\n- uid: System.DirectoryServices.DirectoryEntryConfiguration.SetUserNameQueryQuota*\n  parent: System.DirectoryServices.DirectoryEntryConfiguration\n  isExternal: false\n  name: SetUserNameQueryQuota\n  nameWithType: DirectoryEntryConfiguration.SetUserNameQueryQuota\n"}