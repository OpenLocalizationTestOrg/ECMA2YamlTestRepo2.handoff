{"nodes":[{"pos":[754,799],"content":"Represents an immutable block of binary data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an immutable block of binary data.","pos":[0,45]}]},{"pos":[1431,1516],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Binary\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Linq.Binary\"></xref> class."},{"pos":[1528,1758],"content":"When`null` is passed to this constructor instead of the required array of bytes, a <xref:System.ArgumentNullException?displayProperty=fullName> exception is thrown. Do not rely on this behavior because it may change in the future.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When<ph id=\"ph1\">`null`</ph> is passed to this constructor instead of the required array of bytes, a &lt;xref:System.ArgumentNullException?displayProperty=fullName&gt; exception is thrown.","pos":[0,164],"source":"When`null` is passed to this constructor instead of the required array of bytes, a <xref:System.ArgumentNullException?displayProperty=fullName> exception is thrown."},{"content":"Do not rely on this behavior because it may change in the future.","pos":[165,230]}]},{"pos":[1889,1928],"content":"The bytes representing the binary data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bytes representing the binary data.","pos":[0,39]}]},{"pos":[2370,2418],"content":"Determines whether two binary objects are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether two binary objects are equal.","pos":[0,48]}]},{"pos":[2581,2652],"content":"The <xref:System.Object> to which the current object is being compared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to which the current object is being compared.","pos":[0,71],"source":"The <xref:System.Object> to which the current object is being compared."}]},{"pos":[2711,2883],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two binary objects are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two binary objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3306,3405],"content":"Determines whether the specified <xref:System.Object> is equal to the current <xref:System.Object>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified &lt;xref:System.Object&gt; is equal to the current &lt;xref:System.Object&gt;.","pos":[0,99],"source":"Determines whether the specified <xref:System.Object> is equal to the current <xref:System.Object>."}]},{"pos":[3546,3620],"content":"The <xref:System.Object> to compare with the current <xref:System.Object>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; to compare with the current &lt;xref:System.Object&gt;.","pos":[0,74],"source":"The <xref:System.Object> to compare with the current <xref:System.Object>."}]},{"pos":[3679,3851],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two binary objects are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two binary objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4251,4299],"content":"Serves as a hash function for a particular type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serves as a hash function for a particular type.","pos":[0,48]}]},{"pos":[4434,4476],"content":"A hash code for the current binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A hash code for the current binary object.","pos":[0,42]}]},{"pos":[4852,4889],"content":"Gets the length of the binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length of the binary object.","pos":[0,37]}]},{"pos":[4996,5031],"content":"An integer representing the length.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer representing the length.","pos":[0,35]}]},{"pos":[5570,5633],"content":"Describes the equality relationship between two binary objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the equality relationship between two binary objects.","pos":[0,63]}]},{"pos":[5645,5721],"content":"Returns <ph id=\"ph1\">`true`</ph> if both are <ph id=\"ph2\">`null`</ph> but returns <ph id=\"ph3\">`false`</ph> if only one is <ph id=\"ph4\">`null`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Returns `true` if both are `null` but returns `false` if only one is `null`."},{"pos":[5933,5953],"content":"First binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"First binary object.","pos":[0,20]}]},{"pos":[6027,6048],"content":"Second binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Second binary object.","pos":[0,21]}]},{"pos":[6107,6274],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the binary objects are equal; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the binary objects are equal; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6884,6896],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6964,6976],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7530,7595],"content":"Describes the inequality relationship between two binary objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the inequality relationship between two binary objects.","pos":[0,65]}]},{"pos":[7607,7682],"content":"Returns <ph id=\"ph1\">`false`</ph> if both are <ph id=\"ph2\">`null`</ph>, but returns <ph id=\"ph3\">`true`</ph> if either is <ph id=\"ph4\">`null`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Returns `false` if both are `null`, but returns `true` if either is `null`."},{"pos":[7896,7920],"content":"The first binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first binary object.","pos":[0,24]}]},{"pos":[7994,8019],"content":"The second binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second binary object.","pos":[0,25]}]},{"pos":[8078,8249],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the binary objects are not equal; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the binary objects are not equal; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8636,8704],"content":"Returns an array of bytes that represents the current binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an array of bytes that represents the current binary object.","pos":[0,68]}]},{"pos":[8830,8896],"content":"A byte array that contains the value of the current binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array that contains the value of the current binary object.","pos":[0,66]}]},{"pos":[9282,9355],"content":"Returns a <xref:System.String> that represents the current binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.String&gt; that represents the current binary object.","pos":[0,73],"source":"Returns a <xref:System.String> that represents the current binary object."}]},{"pos":[9491,9556],"content":"A <xref:System.String> that represents the current binary object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that represents the current binary object.","pos":[0,65],"source":"A <xref:System.String> that represents the current binary object."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.Binary\n  id: Binary\n  children:\n  - System.Data.Linq.Binary.#ctor(System.Byte[])\n  - System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)\n  - System.Data.Linq.Binary.Equals(System.Object)\n  - System.Data.Linq.Binary.GetHashCode\n  - System.Data.Linq.Binary.Length\n  - System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)\n  - System.Data.Linq.Binary.op_Implicit(System.Byte[])\n  - System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)\n  - System.Data.Linq.Binary.ToArray\n  - System.Data.Linq.Binary.ToString\n  langs:\n  - csharp\n  name: Binary\n  nameWithType: Binary\n  fullName: System.Data.Linq.Binary\n  type: Class\n  summary: Represents an immutable block of binary data.\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataContract]\n\n      public sealed class Binary : IEquatable<System.Data.Linq.Binary>\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable<System.Data.Linq.Binary>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: Binary(Byte[])\n  nameWithType: Binary.Binary(Byte[])\n  fullName: System.Data.Linq.Binary.Binary(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Data.Linq.Binary\"></xref> class.\n  remarks: When`null` is passed to this constructor instead of the required array of bytes, a <xref:System.ArgumentNullException?displayProperty=fullName> exception is thrown. Do not rely on this behavior because it may change in the future.\n  syntax:\n    content: public Binary (byte[] value);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: The bytes representing the binary data.\n  overload: System.Data.Linq.Binary.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)\n  id: Equals(System.Data.Linq.Binary)\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: Equals(Binary)\n  nameWithType: Binary.Equals(Binary)\n  fullName: System.Data.Linq.Binary.Equals(Binary)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Determines whether two binary objects are equal.\n  syntax:\n    content: public bool Equals (System.Data.Linq.Binary other);\n    parameters:\n    - id: other\n      type: System.Data.Linq.Binary\n      description: The <xref:System.Object> to which the current object is being compared.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two binary objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Linq.Binary.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Binary.Equals(Object)\n  fullName: System.Data.Linq.Binary.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Determines whether the specified <xref:System.Object> is equal to the current <xref:System.Object>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref:System.Object> to compare with the current <xref:System.Object>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two binary objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Linq.Binary.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.GetHashCode\n  id: GetHashCode\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Binary.GetHashCode()\n  fullName: System.Data.Linq.Binary.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Serves as a hash function for a particular type.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current binary object.\n  overload: System.Data.Linq.Binary.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.Length\n  id: Length\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: Length\n  nameWithType: Binary.Length\n  fullName: System.Data.Linq.Binary.Length\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Gets the length of the binary object.\n  syntax:\n    content: public int Length { get; }\n    return:\n      type: System.Int32\n      description: An integer representing the length.\n  overload: System.Data.Linq.Binary.Length*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)\n  id: op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: op_Equality(Binary,Binary)\n  nameWithType: Binary.op_Equality(Binary,Binary)\n  fullName: System.Data.Linq.Binary.op_Equality(Binary,Binary)\n  type: Operator\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Describes the equality relationship between two binary objects.\n  remarks: Returns `true` if both are `null` but returns `false` if only one is `null`.\n  syntax:\n    content: public static bool op_Equality (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);\n    parameters:\n    - id: binary1\n      type: System.Data.Linq.Binary\n      description: First binary object.\n    - id: binary2\n      type: System.Data.Linq.Binary\n      description: Second binary object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the binary objects are equal; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Linq.Binary.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.op_Implicit(System.Byte[])\n  id: op_Implicit(System.Byte[])\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: op_Implicit(Byte[])\n  nameWithType: Binary.op_Implicit(Byte[])\n  fullName: System.Data.Linq.Binary.op_Implicit(Byte[])\n  type: Operator\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public static System.Data.Linq.Binary op_Implicit (byte[] value);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: To be added.\n    return:\n      type: System.Data.Linq.Binary\n      description: To be added.\n  overload: System.Data.Linq.Binary.op_Implicit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)\n  id: op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: op_Inequality(Binary,Binary)\n  nameWithType: Binary.op_Inequality(Binary,Binary)\n  fullName: System.Data.Linq.Binary.op_Inequality(Binary,Binary)\n  type: Operator\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Describes the inequality relationship between two binary objects.\n  remarks: Returns `false` if both are `null`, but returns `true` if either is `null`.\n  syntax:\n    content: public static bool op_Inequality (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);\n    parameters:\n    - id: binary1\n      type: System.Data.Linq.Binary\n      description: The first binary object.\n    - id: binary2\n      type: System.Data.Linq.Binary\n      description: The second binary object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the binary objects are not equal; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Linq.Binary.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.ToArray\n  id: ToArray\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: Binary.ToArray()\n  fullName: System.Data.Linq.Binary.ToArray()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns an array of bytes that represents the current binary object.\n  syntax:\n    content: public byte[] ToArray ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A byte array that contains the value of the current binary object.\n  overload: System.Data.Linq.Binary.ToArray*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Binary.ToString\n  id: ToString\n  parent: System.Data.Linq.Binary\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Binary.ToString()\n  fullName: System.Data.Linq.Binary.ToString()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Returns a <xref:System.String> that represents the current binary object.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A <xref:System.String> that represents the current binary object.\n  overload: System.Data.Linq.Binary.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Linq.Binary.#ctor(System.Byte[])\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: Binary(Byte[])\n  nameWithType: Binary.Binary(Byte[])\n  fullName: System.Data.Linq.Binary.Binary(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: Equals(Binary)\n  nameWithType: Binary.Equals(Binary)\n  fullName: System.Data.Linq.Binary.Equals(Binary)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Linq.Binary\n  parent: System.Data.Linq\n  isExternal: false\n  name: Binary\n  nameWithType: Binary\n  fullName: System.Data.Linq.Binary\n- uid: System.Data.Linq.Binary.Equals(System.Object)\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Binary.Equals(Object)\n  fullName: System.Data.Linq.Binary.Equals(Object)\n- uid: System.Data.Linq.Binary.GetHashCode\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Binary.GetHashCode()\n  fullName: System.Data.Linq.Binary.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.Linq.Binary.Length\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: Length\n  nameWithType: Binary.Length\n  fullName: System.Data.Linq.Binary.Length\n- uid: System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: op_Equality(Binary,Binary)\n  nameWithType: Binary.op_Equality(Binary,Binary)\n  fullName: System.Data.Linq.Binary.op_Equality(Binary,Binary)\n- uid: System.Data.Linq.Binary.op_Implicit(System.Byte[])\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: op_Implicit(Byte[])\n  nameWithType: Binary.op_Implicit(Byte[])\n  fullName: System.Data.Linq.Binary.op_Implicit(Byte[])\n- uid: System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: op_Inequality(Binary,Binary)\n  nameWithType: Binary.op_Inequality(Binary,Binary)\n  fullName: System.Data.Linq.Binary.op_Inequality(Binary,Binary)\n- uid: System.Data.Linq.Binary.ToArray\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: ToArray()\n  nameWithType: Binary.ToArray()\n  fullName: System.Data.Linq.Binary.ToArray()\n- uid: System.Data.Linq.Binary.ToString\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: ToString()\n  nameWithType: Binary.ToString()\n  fullName: System.Data.Linq.Binary.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Linq.Binary.#ctor*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: Binary\n  nameWithType: Binary.Binary\n- uid: System.Data.Linq.Binary.Equals*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: Equals\n  nameWithType: Binary.Equals\n- uid: System.Data.Linq.Binary.GetHashCode*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Binary.GetHashCode\n- uid: System.Data.Linq.Binary.Length*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: Length\n  nameWithType: Binary.Length\n- uid: System.Data.Linq.Binary.op_Equality*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: op_Equality\n  nameWithType: Binary.op_Equality\n- uid: System.Data.Linq.Binary.op_Implicit*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: op_Implicit\n  nameWithType: Binary.op_Implicit\n- uid: System.Data.Linq.Binary.op_Inequality*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Binary.op_Inequality\n- uid: System.Data.Linq.Binary.ToArray*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: ToArray\n  nameWithType: Binary.ToArray\n- uid: System.Data.Linq.Binary.ToString*\n  parent: System.Data.Linq.Binary\n  isExternal: false\n  name: ToString\n  nameWithType: Binary.ToString\n"}