{"nodes":[{"pos":[716,810],"content":"Contains a collection of <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Contains a collection of <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> objects."},{"pos":[1479,1516],"content":"Creates a new entry in the container.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new entry in the container.","pos":[0,37]}]},{"pos":[1528,2104],"content":"You must call the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method on the new entry to make the creation permanent. When you call this method, you can then set mandatory property values on the new entry. The providers each have different requirements for properties that need to be set before a call to the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method is made. If those requirements are not met, the provider might throw an exception. Check with your provider to determine which properties must be set before committing changes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must call the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method on the new entry to make the creation permanent. When you call this method, you can then set mandatory property values on the new entry. The providers each have different requirements for properties that need to be set before a call to the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method is made. If those requirements are not met, the provider might throw an exception. Check with your provider to determine which properties must be set before committing changes.","pos":[0,576],"nodes":[{"content":"You must call the &lt;xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A&gt; method on the new entry to make the creation permanent.","pos":[0,137],"source":"You must call the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method on the new entry to make the creation permanent."},{"content":"When you call this method, you can then set mandatory property values on the new entry.","pos":[138,225]},{"content":"The providers each have different requirements for properties that need to be set before a call to the &lt;xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A&gt; method is made.","pos":[226,408],"source":" The providers each have different requirements for properties that need to be set before a call to the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method is made."},{"content":"If those requirements are not met, the provider might throw an exception.","pos":[409,482]},{"content":"Check with your provider to determine which properties must be set before committing changes.","pos":[483,576]}]}]},{"pos":[4625,4651],"content":"The name of the new entry.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the new entry.","pos":[0,26]}]},{"pos":[4723,4777],"content":"The name of the schema that is used for the new entry.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the schema that is used for the new entry.","pos":[0,54]}]},{"pos":[4861,4961],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the new entry.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> object that represents the new entry."},{"pos":[5167,5229],"content":"An error occurred during the call to the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]},{"pos":[5661,5723],"content":"Returns the member of this collection with the specified name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the member of this collection with the specified name.","pos":[0,62]}]},{"pos":[5736,6233],"content":"If child objects of different types have the same name, the first matching child object is returned.      > [!NOTE] >  The Internet Information Services (IIS) provider does not support this method. Use the overloaded <xref:System.DirectoryServices.DirectoryEntries.Find%2A> method and specify an empty string (\"\") for the `schemaClassName` parameter.   >    >  If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If child objects of different types have the same name, the first matching child object is returned.","pos":[0,100]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The Internet Information Services (IIS) provider does not support this method.","pos":[106,197],"source":"      > [!NOTE] >  The Internet Information Services (IIS) provider does not support this method."},{"content":"Use the overloaded &lt;xref:System.DirectoryServices.DirectoryEntries.Find%2A&gt; method and specify an empty string (\"\") for the <ph id=\"ph1\">`schemaClassName`</ph> parameter.","pos":[198,350],"source":" Use the overloaded <xref:System.DirectoryServices.DirectoryEntries.Find%2A> method and specify an empty string (\"\") for the `schemaClassName` parameter."},{"content":"&gt;    &gt;  If no matching result is found, a &lt;xref:System.DirectoryServices.DirectoryServicesCOMException&gt; with error code 0x2030 is thrown.","pos":[353,490],"source":"   >    >  If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown."}]},{"pos":[6401,6459],"content":"Contains the name of the child object for which to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains the name of the child object for which to search.","pos":[0,58]}]},{"pos":[6543,6654],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the child object that was found.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that represents the child object that was found."},{"pos":[6839,6902],"content":"The Active Directory Domain Services object is not a container.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Active Directory Domain Services object is not a container.","pos":[0,63]}]},{"pos":[7035,7097],"content":"An error occurred during the call to the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]},{"pos":[7578,7666],"content":"Returns the member of this collection with the specified name and of the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the member of this collection with the specified name and of the specified type.","pos":[0,88]}]},{"pos":[7678,7807],"content":"If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If no matching result is found, a &lt;xref:System.DirectoryServices.DirectoryServicesCOMException&gt; with error code 0x2030 is thrown.","pos":[0,129],"source":"If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown."}]},{"pos":[12128,12187],"content":"The name of the child directory object for which to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the child directory object for which to search.","pos":[0,59]}]},{"pos":[12259,12324],"content":"The class name of the child directory object for which to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The class name of the child directory object for which to search.","pos":[0,65]}]},{"pos":[12408,12526],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the child object that was found.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> object that represents the child object that was found."},{"pos":[12711,12774],"content":"The Active Directory Domain Services object is not a container.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Active Directory Domain Services object is not a container.","pos":[0,63]}]},{"pos":[12907,12969],"content":"An error occurred during the call to the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]},{"pos":[13398,13457],"content":"Returns an enumerator that iterates through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that iterates through the collection.","pos":[0,59]}]},{"pos":[13630,13729],"content":"An <xref:System.Collections.IEnumerator> object that can be used to iterate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; object that can be used to iterate through the collection.","pos":[0,99],"source":"An <xref:System.Collections.IEnumerator> object that can be used to iterate through the collection."}]},{"pos":[14333,14369],"content":"Deletes a member of this collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Deletes a member of this collection.","pos":[0,36]}]},{"pos":[14381,14573],"content":"If the entry to be removed is a container, the container must be empty. To delete a container and all its children, use the <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the entry to be removed is a container, the container must be empty. To delete a container and all its children, use the <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> method.","pos":[0,192],"nodes":[{"content":"If the entry to be removed is a container, the container must be empty.","pos":[0,71]},{"content":"To delete a container and all its children, use the &lt;xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A&gt; method.","pos":[72,192],"source":" To delete a container and all its children, use the <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> method."}]}]},{"pos":[19914,20008],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to delete.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> object to delete."},{"pos":[20217,20279],"content":"An error occurred during the call to the underlying interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]},{"pos":[20699,20781],"content":"Gets the schemas that specify which child objects are contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the schemas that specify which child objects are contained in the collection.","pos":[0,82]}]},{"pos":[20793,20947],"content":"If the SchemaFilter property is empty, child objects of all types are visible in the collection; otherwise, only those of the specified types are visible.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the SchemaFilter property is empty, child objects of all types are visible in the collection; otherwise, only those of the specified types are visible.","pos":[0,154]}]},{"pos":[21135,21332],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SchemaNameCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies which child objects are contained in the <bpt id=\"p2\">&lt;xref href=\"System.DirectoryServices.DirectoryEntries\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.SchemaNameCollection\"></xref> that specifies which child objects are contained in the <xref href=\"System.DirectoryServices.DirectoryEntries\"></xref> instance."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.DirectoryEntries\n  id: DirectoryEntries\n  children:\n  - System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)\n  - System.DirectoryServices.DirectoryEntries.Find(System.String)\n  - System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)\n  - System.DirectoryServices.DirectoryEntries.GetEnumerator\n  - System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)\n  - System.DirectoryServices.DirectoryEntries.SchemaFilter\n  langs:\n  - csharp\n  name: DirectoryEntries\n  nameWithType: DirectoryEntries\n  fullName: System.DirectoryServices.DirectoryEntries\n  type: Class\n  summary: Contains a collection of <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> objects.\n  syntax:\n    content: 'public class DirectoryEntries : System.Collections.IEnumerable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)\n  id: Add(System.String,System.String)\n  parent: System.DirectoryServices.DirectoryEntries\n  langs:\n  - csharp\n  name: Add(String,String)\n  nameWithType: DirectoryEntries.Add(String,String)\n  fullName: System.DirectoryServices.DirectoryEntries.Add(String,String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Creates a new entry in the container.\n  remarks: You must call the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method on the new entry to make the creation permanent. When you call this method, you can then set mandatory property values on the new entry. The providers each have different requirements for properties that need to be set before a call to the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method is made. If those requirements are not met, the provider might throw an exception. Check with your provider to determine which properties must be set before committing changes.\n  example:\n  - \"The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \\n  \\n```vb  \\nDim strPath As String = \\\"IIS://localhost/W3SVC/1/Root\\\"  \\n' Create a new 'DirectoryEntry' object with the given path.  \\nDim myDE As New DirectoryEntry(strPath)  \\nDim myEntries As DirectoryEntries = myDE.Children  \\n' Create a new entry 'Sample' in the container.  \\nDim myDirectoryEntry As DirectoryEntry = myEntries.Add(\\\"CN=Sample\\\", myDE.SchemaClassName)  \\n' Save changes of entry in the 'Active Directory Domain Services'.  \\nmyDirectoryEntry.CommitChanges()  \\nConsole.WriteLine(myDirectoryEntry.Name + \\\" entry is created in container.\\\")  \\n```  \\n  \\n The following C# example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \\n  \\n [C#]  \\n  \\n```  \\nString strPath = \\\"IIS://localhost/W3SVC/1/Root\\\";  \\n  \\n// Create a new 'DirectoryEntry' object with the given path.  \\nDirectoryEntry myDE = new DirectoryEntry(strPath);  \\nDirectoryEntries myEntries = myDE.Children;  \\n  \\n// Create a new entry 'Sample' in the container.  \\nDirectoryEntry myDirectoryEntry =   \\n   myEntries.Add(\\\"CN=Sample\\\", myDE.SchemaClassName);  \\n// Save changes of entry in the 'Active Directory Domain Services'.  \\nmyDirectoryEntry.CommitChanges();  \\nConsole.WriteLine (myDirectoryEntry.Name + \\\" entry is created in container.\\\");  \\n```  \\n  \\n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \\n  \\n```  \\nString* strPath = S\\\"IIS://localhost/W3SVC/1/Root\\\";  \\n  \\n// Create a new 'DirectoryEntry' object with the given path.  \\nDirectoryEntry* myDE = new DirectoryEntry(strPath);  \\nDirectoryEntries* myEntries = myDE->Children;  \\n  \\n// Create a new entry 'Sample' in the container.  \\nDirectoryEntry* myDirectoryEntry = myEntries->Add(S\\\"CN=Sample\\\", myDE->SchemaClassName);  \\n// Save changes of entry in the 'Active Directory Domain Services'.  \\nmyDirectoryEntry->CommitChanges();  \\nConsole::WriteLine(\\\"{0} entry is created in container.\\\", myDirectoryEntry->Name);  \\n  \\n```\"\n  syntax:\n    content: public System.DirectoryServices.DirectoryEntry Add (string name, string schemaClassName);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the new entry.\n    - id: schemaClassName\n      type: System.String\n      description: The name of the schema that is used for the new entry.\n    return:\n      type: System.DirectoryServices.DirectoryEntry\n      description: A <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> object that represents the new entry.\n  overload: System.DirectoryServices.DirectoryEntries.Add*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntries.Find(System.String)\n  id: Find(System.String)\n  parent: System.DirectoryServices.DirectoryEntries\n  langs:\n  - csharp\n  name: Find(String)\n  nameWithType: DirectoryEntries.Find(String)\n  fullName: System.DirectoryServices.DirectoryEntries.Find(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns the member of this collection with the specified name.\n  remarks: \"If child objects of different types have the same name, the first matching child object is returned.  \\n  \\n> [!NOTE]\\n>  The Internet Information Services (IIS) provider does not support this method. Use the overloaded <xref:System.DirectoryServices.DirectoryEntries.Find%2A> method and specify an empty string (\\\"\\\") for the `schemaClassName` parameter.  \\n>   \\n>  If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown.\"\n  syntax:\n    content: public System.DirectoryServices.DirectoryEntry Find (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Contains the name of the child object for which to search.\n    return:\n      type: System.DirectoryServices.DirectoryEntry\n      description: A <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that represents the child object that was found.\n  overload: System.DirectoryServices.DirectoryEntries.Find*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The Active Directory Domain Services object is not a container.\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)\n  id: Find(System.String,System.String)\n  parent: System.DirectoryServices.DirectoryEntries\n  langs:\n  - csharp\n  name: Find(String,String)\n  nameWithType: DirectoryEntries.Find(String,String)\n  fullName: System.DirectoryServices.DirectoryEntries.Find(String,String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns the member of this collection with the specified name and of the specified type.\n  remarks: If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown.\n  example:\n  - \"The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the newly created entry.  \\n  \\n```vb  \\nTry  \\n     Dim myEntry1 As DirectoryEntry  \\n     Dim myEntry2 As DirectoryEntry  \\n     Dim strPath As String = \\\"LDAP://DC=fabrikam,DC=com\\\"  \\n  \\n     ' Create a 'DirectoryEntry' object with the given path.  \\n     Dim myDE As New DirectoryEntry(strPath)  \\n     Dim myEntries As DirectoryEntries = myDE.Children  \\n  \\n     ' Create a new entry in the container.  \\n     myEntry1 = myEntries.Add(\\\"CN=Sample Entry\\\", myDE.SchemaClassName)  \\n     ' Save changes in the 'Active Directory Domain Services' store.  \\n     myEntry1.CommitChanges()  \\n  \\n     ' Find a child in the 'DirectoryEntries' collection which has the   \\n     ' specified name and type.  \\n     myEntry2 = myEntries.Find(\\\"CN=Sample Entry\\\", myDE.SchemaClassName)  \\n     Console.WriteLine(myEntry2.Name + \\\" is found in container.\\\")  \\n  \\n     Catch e As Exception  \\n          Console.WriteLine(\\\"The following exception was raised : {0}\\\", e.Message.ToString())  \\n     End Try  \\n```  \\n  \\n The following C# example shows how to create a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the newly- created entry.  \\n  \\n```c#  \\nusing System;  \\nusing System.DirectoryServices;   \\n  \\nclass MyClass1  \\n{  \\n   static void Main()  \\n   {  \\n      try  \\n      {          \\n         DirectoryEntry myEntry1;  \\n         DirectoryEntry myEntry2;  \\n         String strPath = \\\"LDAP://DC=fabrikam,DC=com\\\";  \\n  \\n         // Create a 'DirectoryEntry' object with the given path.  \\n         DirectoryEntry myDE = new DirectoryEntry(strPath);  \\n         DirectoryEntries myEntries = myDE.Children;  \\n  \\n         // Create a new entry in the container.  \\n         myEntry1 = myEntries.Add(\\\"CN=Sample Entry\\\",myDE.SchemaClassName);  \\n         // Save changes in the 'Active Directory Domain Services' store.  \\n         myEntry1.CommitChanges();  \\n  \\n         // Find a child in the 'DirectoryEntries' collection which has the   \\n         // specified name and type.  \\n         myEntry2 = myEntries.Find(\\\"CN=Sample Entry\\\",myDE.SchemaClassName);  \\n         Console.WriteLine (myEntry2.Name + \\\" is found in container.\\\");  \\n  \\n      }  \\n      catch(Exception e)  \\n      {  \\n         Console.WriteLine(\\\"The following exception was raised : {0}\\\",e.Message);  \\n      }  \\n   }  \\n}  \\n  \\n```  \\n  \\n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the new entry.  \\n  \\n```cpp#  \\n#using <mscorlib.dll>  \\n#using <System.dll>  \\n#using <System.Directoryservices.dll>  \\n  \\nusing namespace System;  \\nusing namespace System::DirectoryServices;   \\n  \\nint main() {  \\n    try {          \\n        DirectoryEntry* myEntry1;  \\n        DirectoryEntry* myEntry2;  \\n        String* strPath = S\\\"LDAP://DC=fabrikam,DC=com\\\";  \\n  \\n        // Create a 'DirectoryEntry' object with the given path.  \\n        DirectoryEntry* myDE = new DirectoryEntry(strPath);  \\n        DirectoryEntries* myEntries = myDE->Children;  \\n  \\n        // Create a new entry in the container.  \\n        myEntry1 = myEntries->Add(S\\\"CN=Sample Entry\\\", myDE->SchemaClassName);  \\n        // Save changes in the 'Active Directory Domain Services' store.  \\n        myEntry1->CommitChanges();  \\n  \\n        // Find a child in the 'DirectoryEntries' collection which has the   \\n        // specified name and type.  \\n        myEntry2 = myEntries->Find(S\\\"CN=Sample Entry\\\", myDE->SchemaClassName);  \\n        Console::WriteLine (\\\"{0} is found in container.\\\", myEntry2->Name);  \\n    } catch(Exception* e) {  \\n        Console::WriteLine(\\\"The following exception was raised : {0}\\\", e->Message);  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.DirectoryServices.DirectoryEntry Find (string name, string schemaClassName);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the child directory object for which to search.\n    - id: schemaClassName\n      type: System.String\n      description: The class name of the child directory object for which to search.\n    return:\n      type: System.DirectoryServices.DirectoryEntry\n      description: A <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> object that represents the child object that was found.\n  overload: System.DirectoryServices.DirectoryEntries.Find*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The Active Directory Domain Services object is not a container.\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator\n  id: GetEnumerator\n  parent: System.DirectoryServices.DirectoryEntries\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: DirectoryEntries.GetEnumerator()\n  fullName: System.DirectoryServices.DirectoryEntries.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns an enumerator that iterates through the collection.\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> object that can be used to iterate through the collection.\n  overload: System.DirectoryServices.DirectoryEntries.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)\n  id: Remove(System.DirectoryServices.DirectoryEntry)\n  parent: System.DirectoryServices.DirectoryEntries\n  langs:\n  - csharp\n  name: Remove(DirectoryEntry)\n  nameWithType: DirectoryEntries.Remove(DirectoryEntry)\n  fullName: System.DirectoryServices.DirectoryEntries.Remove(DirectoryEntry)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Deletes a member of this collection.\n  remarks: If the entry to be removed is a container, the container must be empty. To delete a container and all its children, use the <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> method.\n  example:\n  - \"The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \\n  \\n```vb  \\nImports System  \\nImports System.DirectoryServices  \\n  \\nClass MyClass1  \\n   Shared Sub Main()  \\n      Try  \\n         Dim strPath As String = \\\"IIS://localhost/W3SVC/1/Root\\\"  \\n         Dim strName As String = \\\"\\\"  \\n  \\n         ' Create a new 'DirectoryEntry' object with the given path.  \\n         Dim myDE As New DirectoryEntry(strPath)  \\n         Dim myEntries As DirectoryEntries = myDE.Children  \\n  \\n         ' Create a new entry 'Sample' in the container.  \\n         Dim myDirectoryEntry As DirectoryEntry = myEntries.Add(\\\"Sample\\\", myDE.SchemaClassName)  \\n         ' Save changes of entry in the 'Active Directory Domain Services'.  \\n         myDirectoryEntry.CommitChanges()  \\n         Console.WriteLine(myDirectoryEntry.Name + \\\" entry is created in container.\\\")  \\n  \\n         ' Find 'Sample' entry in container.  \\n         myDirectoryEntry = myEntries.Find(\\\"Sample\\\", myDE.SchemaClassName)  \\n         Console.WriteLine(myDirectoryEntry.Name + \\\" found in container.\\\")  \\n         ' Remove 'Sample' entry from container.  \\n         strName = myDirectoryEntry.Name  \\n         myEntries.Remove(myDirectoryEntry)  \\n         Console.WriteLine(strName + \\\" entry is removed from container.\\\")  \\n  \\n      Catch e As Exception  \\n         Console.WriteLine(\\\"The following exception was raised : {0}\\\", e.Message.ToString())  \\n      End Try  \\n   End Sub 'Main  \\nEnd Class 'MyClass1  \\n  \\n```  \\n  \\n The following C# example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \\n  \\n```c#  \\nusing System;  \\nusing System.DirectoryServices;   \\n  \\nclass MyClass1  \\n{  \\n   static void Main()  \\n   {  \\n      try  \\n      {  \\n         String strPath = \\\"IIS://localhost/W3SVC/1/Root\\\";  \\n         String strName = \\\"\\\";  \\n  \\n         // Create a new 'DirectoryEntry' object with the given path.  \\n         DirectoryEntry myDE = new DirectoryEntry(strPath);  \\n         DirectoryEntries myEntries = myDE.Children;  \\n  \\n         // Create a new entry 'Sample' in the container.  \\n         DirectoryEntry myDirectoryEntry =   \\n            myEntries.Add(\\\"Sample\\\", myDE.SchemaClassName);  \\n         // Save changes of entry in the 'Active Directory Domain Services'.  \\n         myDirectoryEntry.CommitChanges();  \\n         Console.WriteLine (myDirectoryEntry.Name +   \\n            \\\" entry is created in container.\\\");  \\n  \\n         // Find 'Sample' entry in container.  \\n         myDirectoryEntry = myEntries.Find(\\\"Sample\\\", myDE.SchemaClassName);  \\n         Console.WriteLine(myDirectoryEntry.Name + \\\" found in container.\\\");  \\n         // Remove 'Sample' entry from container.  \\n         strName = myDirectoryEntry.Name;  \\n         myEntries.Remove(myDirectoryEntry);  \\n         Console.WriteLine(strName+ \\\" entry is removed from container.\\\");  \\n  \\n      }  \\n      catch(Exception e)  \\n      {  \\n         Console.WriteLine(\\\"The following exception was raised : {0}\\\",  \\n            e.Message);  \\n      }  \\n   }  \\n}  \\n  \\n```  \\n  \\n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \\n  \\n```cpp#  \\n#using <mscorlib.dll>  \\n#using <System.dll>  \\n#using <System.Directoryservices.dll>  \\n  \\nusing namespace System;  \\nusing namespace System::DirectoryServices;   \\n  \\nint main() {  \\n    try {  \\n        String* strPath = S\\\"IIS://localhost/W3SVC/1/Root\\\";  \\n        String* strName = S\\\"\\\";  \\n  \\n        // Create a new 'DirectoryEntry' object with the given path.  \\n        DirectoryEntry* myDE = new DirectoryEntry(strPath);  \\n        DirectoryEntries* myEntries = myDE->Children;  \\n  \\n        // Create a new entry 'Sample' in the container.  \\n        DirectoryEntry* myDirectoryEntry =  myEntries->Add(S\\\"Sample\\\", myDE->SchemaClassName);  \\n        // Save changes of entry in the 'Active Directory Domain Services'.  \\n        myDirectoryEntry->CommitChanges();  \\n        Console::WriteLine(S\\\"{0} entry is created in container.\\\", myDirectoryEntry->Name);  \\n  \\n        // Find 'Sample' entry in container.  \\n        myDirectoryEntry = myEntries->Find(S\\\"Sample\\\", myDE->SchemaClassName);  \\n        Console::WriteLine(S\\\"{0} found in container.\\\", myDirectoryEntry->Name);  \\n        // Remove 'Sample' entry from container.  \\n        strName = myDirectoryEntry->Name;  \\n        myEntries->Remove(myDirectoryEntry);  \\n        Console::WriteLine(S\\\"{0} entry is removed from container.\\\", strName);  \\n    } catch(Exception* e) {  \\n        Console::WriteLine(S\\\"The following exception was raised : {0}\\\", e->Message);  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void Remove (System.DirectoryServices.DirectoryEntry entry);\n    parameters:\n    - id: entry\n      type: System.DirectoryServices.DirectoryEntry\n      description: The name of the <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> object to delete.\n  overload: System.DirectoryServices.DirectoryEntries.Remove*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  platform:\n  - net462\n- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter\n  id: SchemaFilter\n  parent: System.DirectoryServices.DirectoryEntries\n  langs:\n  - csharp\n  name: SchemaFilter\n  nameWithType: DirectoryEntries.SchemaFilter\n  fullName: System.DirectoryServices.DirectoryEntries.SchemaFilter\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the schemas that specify which child objects are contained in the collection.\n  remarks: If the SchemaFilter property is empty, child objects of all types are visible in the collection; otherwise, only those of the specified types are visible.\n  syntax:\n    content: public System.DirectoryServices.SchemaNameCollection SchemaFilter { get; }\n    return:\n      type: System.DirectoryServices.SchemaNameCollection\n      description: A <xref href=\"System.DirectoryServices.SchemaNameCollection\"></xref> that specifies which child objects are contained in the <xref href=\"System.DirectoryServices.DirectoryEntries\"></xref> instance.\n  overload: System.DirectoryServices.DirectoryEntries.SchemaFilter*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Runtime.InteropServices.COMException\n  isExternal: true\n  name: System.Runtime.InteropServices.COMException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: Add(String,String)\n  nameWithType: DirectoryEntries.Add(String,String)\n  fullName: System.DirectoryServices.DirectoryEntries.Add(String,String)\n- uid: System.DirectoryServices.DirectoryEntry\n  parent: System.DirectoryServices\n  isExternal: false\n  name: DirectoryEntry\n  nameWithType: DirectoryEntry\n  fullName: System.DirectoryServices.DirectoryEntry\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.DirectoryServices.DirectoryEntries.Find(System.String)\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: Find(String)\n  nameWithType: DirectoryEntries.Find(String)\n  fullName: System.DirectoryServices.DirectoryEntries.Find(String)\n- uid: System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: Find(String,String)\n  nameWithType: DirectoryEntries.Find(String,String)\n  fullName: System.DirectoryServices.DirectoryEntries.Find(String,String)\n- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: DirectoryEntries.GetEnumerator()\n  fullName: System.DirectoryServices.DirectoryEntries.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: Remove(DirectoryEntry)\n  nameWithType: DirectoryEntries.Remove(DirectoryEntry)\n  fullName: System.DirectoryServices.DirectoryEntries.Remove(DirectoryEntry)\n- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: SchemaFilter\n  nameWithType: DirectoryEntries.SchemaFilter\n  fullName: System.DirectoryServices.DirectoryEntries.SchemaFilter\n- uid: System.DirectoryServices.SchemaNameCollection\n  parent: System.DirectoryServices\n  isExternal: false\n  name: SchemaNameCollection\n  nameWithType: SchemaNameCollection\n  fullName: System.DirectoryServices.SchemaNameCollection\n- uid: System.DirectoryServices.DirectoryEntries.Add*\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: Add\n  nameWithType: DirectoryEntries.Add\n- uid: System.DirectoryServices.DirectoryEntries.Find*\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: Find\n  nameWithType: DirectoryEntries.Find\n- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator*\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: DirectoryEntries.GetEnumerator\n- uid: System.DirectoryServices.DirectoryEntries.Remove*\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: Remove\n  nameWithType: DirectoryEntries.Remove\n- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter*\n  parent: System.DirectoryServices.DirectoryEntries\n  isExternal: false\n  name: SchemaFilter\n  nameWithType: DirectoryEntries.SchemaFilter\n"}