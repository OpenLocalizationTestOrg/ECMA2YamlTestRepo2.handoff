{"nodes":[{"pos":[1416,1496],"content":"Provides a durable reference to an object that is an instance of an entity type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a durable reference to an object that is an instance of an entity type.","pos":[0,80]}]},{"pos":[1509,1738],"content":"The EntityKey objects are immutable; that is, after they are constructed they cannot be modified.       For more information, see [Working with Entity Keys](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The EntityKey objects are immutable; that is, after they are constructed they cannot be modified.","pos":[0,97]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Entity Keys<ept id=\"p1\">](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)</ept>.","pos":[104,227],"source":"       For more information, see [Working with Entity Keys](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)."}]},{"pos":[3250,3333],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class."},{"pos":[4165,4344],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with an entity set name and a generic &lt;xref:System.Collections.Generic.KeyValuePair&gt; collection.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and a generic <xref:System.Collections.Generic.KeyValuePair> collection."},{"pos":[5148,5238],"content":"A <xref:System.String> that is the entity set name qualified by the entity container name.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that is the entity set name qualified by the entity container name.","pos":[0,90],"source":"A <xref:System.String> that is the entity set name qualified by the entity container name."}]},{"pos":[5406,5884],"content":"A generic <xref:System.Collections.Generic.KeyValuePair> collection.       Each key/value pair has a property name as the key and the value of that property as the value. There should be one pair for each property that is part of the <xref href=\"System.Data.EntityKey\"></xref>. The order of the key/value pairs is not important, but each key property should be included. The property names are simple names that are not qualified with an entity type name or the schema name.","needQuote":false,"needEscape":true,"nodes":[{"content":"A generic &lt;xref:System.Collections.Generic.KeyValuePair&gt; collection.","pos":[0,68],"source":"A generic <xref:System.Collections.Generic.KeyValuePair> collection."},{"content":"Each key/value pair has a property name as the key and the value of that property as the value.","pos":[75,170]},{"content":"There should be one pair for each property that is part of the <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[171,277],"source":" There should be one pair for each property that is part of the <xref href=\"System.Data.EntityKey\"></xref>."},{"content":"The order of the key/value pairs is not important, but each key property should be included.","pos":[278,370]},{"content":"The property names are simple names that are not qualified with an entity type name or the schema name.","pos":[371,474]}]},{"pos":[6536,6777],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with an entity set name and an <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IEnumerable%601<ph id=\"ph2\">&amp;gt;</ph> collection of <bpt id=\"p2\">&lt;xref href=\"System.Data.EntityKeyMember\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects."},{"pos":[7030,7120],"content":"A <xref:System.String> that is the entity set name qualified by the entity container name.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that is the entity set name qualified by the entity container name.","pos":[0,90],"source":"A <xref:System.String> that is the entity set name qualified by the entity container name."}]},{"pos":[7246,7409],"content":"An <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IEnumerable%601<ph id=\"ph2\">&amp;gt;</ph> collection of <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKeyMember\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects with which to initialize the key.","needQuote":true,"needEscape":true,"source":"An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects with which to initialize the key."},{"pos":[7935,8071],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with an entity set name and specific entity key pair.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and specific entity key pair."},{"pos":[8796,8886],"content":"A <xref:System.String> that is the entity set name qualified by the entity container name.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that is the entity set name qualified by the entity container name.","pos":[0,90],"source":"A <xref:System.String> that is the entity set name qualified by the entity container name."}]},{"pos":[8950,9001],"content":"A <xref:System.String> that is the name of the key.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; that is the name of the key.","pos":[0,51],"source":"A <xref:System.String> that is the name of the key."}]},{"pos":[9066,9112],"content":"An <xref:System.Object> that is the key value.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; that is the key value.","pos":[0,46],"source":"An <xref:System.Object> that is the key value."}]},{"pos":[9539,9585],"content":"Gets or sets the name of the entity container.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the entity container.","pos":[0,46]}]},{"pos":[9714,9863],"content":"A &lt;xref:System.String&gt; value that is the name of the entity container for the entity to which the <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> belongs.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> value that is the name of the entity container for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs."},{"pos":[10284,10376],"content":"Gets or sets the key values associated with this <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the key values associated with this <xref href=\"System.Data.EntityKey\"></xref>."},{"pos":[10389,10813],"content":"The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity.       The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity.       The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object.","pos":[0,422],"nodes":[{"content":"The &lt;xref:System.Data.EntityKey&gt; class contains a copy of the values that make up the logical key that is specified for this type of entity.","pos":[0,140],"source":"The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity."},{"content":"The members of the &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; each have a property name and a value in a &lt;xref:System.Collections.Generic.KeyValuePair%602&gt;, where the key is the property name and the value is the actual value of that property on the object.","pos":[147,422],"source":"       The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object."}]}]},{"pos":[10978,11113],"content":"A <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.ReadOnlyCollection%601<ph id=\"ph2\">&amp;gt;</ph> of key values for this <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of key values for this <xref href=\"System.Data.EntityKey\"></xref>."},{"pos":[11537,11696],"content":"A simple <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> identifying an entity that resulted from a failed <bpt id=\"p2\">[</bpt>TREAT<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept> operation.","needQuote":true,"needEscape":true,"source":"A simple <xref href=\"System.Data.EntityKey\"></xref> identifying an entity that resulted from a failed [TREAT](~/add/includes/ajax-current-ext-md.md) operation."},{"pos":[11708,12249],"content":"There are various ways to get an invalid entity. The most common scenario is when an [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] query uses the [TREAT](../Topic/TREAT%20\\(Entity%20SQL\\).md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match. ([TREAT](../Topic/TREAT%20\\(Entity%20SQL\\).md) is similar to the C# `as` operator). In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to EntityNotValidKey.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"There are various ways to get an invalid entity.","pos":[0,48]},{"content":"The most common scenario is when an <ph id=\"ph1\">[!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)]</ph> query uses the <bpt id=\"p1\">[</bpt>TREAT<ept id=\"p1\">](../Topic/TREAT%20\\(Entity%20SQL\\).md)</ept> operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match.","pos":[49,324],"source":" The most common scenario is when an [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] query uses the [TREAT](../Topic/TREAT%20\\(Entity%20SQL\\).md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match."},{"content":"(<bpt id=\"p1\">[</bpt>TREAT<ept id=\"p1\">](../Topic/TREAT%20\\(Entity%20SQL\\).md)</ept> is similar to the C# <ph id=\"ph1\">`as`</ph> operator).","pos":[325,408],"source":" ([TREAT](../Topic/TREAT%20\\(Entity%20SQL\\).md) is similar to the C# `as` operator)."},{"content":"In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to EntityNotValidKey.","pos":[409,541]}]},{"pos":[12402,12414],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12770,12810],"content":"Gets or sets the name of the entity set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the entity set.","pos":[0,40]}]},{"pos":[12933,13076],"content":"A &lt;xref:System.String&gt; value that is the name of the entity set for the entity to which the <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> belongs.","needQuote":true,"needEscape":true,"source":"A <xref:System.String> value that is the name of the entity set for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs."},{"pos":[13523,13643],"content":"Returns a value that indicates whether this instance is equal to a specified <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a value that indicates whether this instance is equal to a specified <xref href=\"System.Data.EntityKey\"></xref>."},{"pos":[13656,14367],"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","pos":[0,705],"nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality.","pos":[0,119]},{"content":"That is, two references to the exact same temporary &lt;xref:System.Data.EntityKey&gt; instance are equal but no other &lt;xref:System.Data.EntityKey&gt; instances are equal.","pos":[120,282],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."},{"content":"-   Permanent keys determine equality based on the values of the contained key properties and the &lt;xref:System.Data.Metadata.Edm.EntitySet&gt;.","pos":[288,428],"source":"      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate &lt;xref:System.Data.EntityKey&gt; instances that are equal if their entity sets are the same and their key values are equal.","pos":[429,583],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal."},{"content":"In addition, temporary keys have no &lt;xref:System.Data.Metadata.Edm.EntitySet&gt; or key values, but permanent keys do.","pos":[590,705],"source":"       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do."}]}]},{"pos":[14527,14610],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to compare with this instance.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.EntityKey\"></xref> object to compare with this instance."},{"pos":[14669,14863],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this instance and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p2\">&lt;/code&gt;</ept> have equal values; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this instance and <code>other</code> have equal values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15278,15362],"content":"Returns a value that indicates whether this instance is equal to a specified object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]},{"pos":[15375,16124],"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","pos":[0,743],"nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality.","pos":[0,119]},{"content":"That is, two references to the exact same temporary &lt;xref:System.Data.EntityKey&gt; instance are equal but no other &lt;xref:System.Data.EntityKey&gt; instances are equal.","pos":[120,282],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."},{"content":"-   Permanent keys determine equality based on the values of the contained key properties and the &lt;xref:System.Data.Metadata.Edm.EntitySet&gt;.","pos":[288,428],"source":"      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate &lt;xref:System.Data.EntityKey&gt; instances that are equal if their &lt;xref:System.Data.Metadata.Edm.EntitySet&gt; objects are the same and their key values are equal.","pos":[429,621],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal."},{"content":"In addition, temporary keys have no &lt;xref:System.Data.Metadata.Edm.EntitySet&gt; or key values, but permanent keys do.","pos":[628,743],"source":"       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do."}]}]},{"pos":[16266,16320],"content":"An <xref:System.Object> to compare with this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; to compare with this instance.","pos":[0,54],"source":"An <xref:System.Object> to compare with this instance."}]},{"pos":[16379,16571],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this instance and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> have equal values; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this instance and <code>obj</code> have equal values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17107,17181],"content":"Gets the entity set for this entity key from the given metadata workspace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the entity set for this entity key from the given metadata workspace.","pos":[0,74]}]},{"pos":[17193,17286],"content":"The entity set is accessed based on the entity container name and entity set name of the key.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The entity set is accessed based on the entity container name and entity set name of the key.","pos":[0,93]}]},{"pos":[17547,17595],"content":"The metadata workspace that contains the entity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The metadata workspace that contains the entity.","pos":[0,48]}]},{"pos":[17674,17753],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Metadata.Edm.EntitySet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the entity key.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Metadata.Edm.EntitySet\"></xref> for the entity key."},{"pos":[17910,17982],"content":"The entity set could not be located in the specified metadata workspace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The entity set could not be located in the specified metadata workspace.","pos":[0,72]}]},{"pos":[18315,18496],"content":"Serves as a hash function for the current <xref href=\"System.Data.EntityKey\"></xref> object. GetHashCode is suitable for hashing algorithms and data structures such as a hash table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serves as a hash function for the current <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,92],"source":"Serves as a hash function for the current <xref href=\"System.Data.EntityKey\"></xref> object."},{"content":"GetHashCode is suitable for hashing algorithms and data structures such as a hash table.","pos":[93,181]}]},{"pos":[18631,18702],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.Data.EntityKey\"></xref>."},{"pos":[19095,19191],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is temporary.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Data.EntityKey\"></xref> is temporary."},{"pos":[19204,20850],"content":"When a new entity is created, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] defines temporary key and sets the IsTemporary property to `true`. When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] assigns a permanent key and sets the IsTemporary property to `false`.      > [!NOTE] >  Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.       Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.       When the <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> method is called on an entity's <xref:System.Data.Objects.ObjectStateEntry> and the entity transitions from the <xref:System.Data.EntityState> state to <xref:System.Data.EntityState> state, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] automatically computes a new permanent key for the entity and synchronizes all temporary key references.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a new entity is created, the <ph id=\"ph1\">[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]</ph> defines temporary key and sets the IsTemporary property to <ph id=\"ph2\">`true`</ph>.","pos":[0,154],"source":"When a new entity is created, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] defines temporary key and sets the IsTemporary property to `true`."},{"content":"When you call the &lt;xref:System.Data.Objects.ObjectContext.SaveChanges%2A&gt; method, the <ph id=\"ph1\">[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]</ph> assigns a permanent key and sets the IsTemporary property to <ph id=\"ph2\">`false`</ph>.","pos":[155,364],"source":" When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] assigns a permanent key and sets the IsTemporary property to `false`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.","pos":[370,492],"source":"      > [!NOTE] >  Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user."},{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality.","pos":[499,618]},{"content":"That is, two references to the exact same temporary &lt;xref:System.Data.EntityKey&gt; instance are equal but no other &lt;xref:System.Data.EntityKey&gt; instances are equal.","pos":[619,781],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."},{"content":"-   Permanent keys determine equality based on the values of the contained key properties and the &lt;xref:System.Data.Metadata.Edm.EntitySet&gt;.","pos":[787,927],"source":"      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate &lt;xref:System.Data.EntityKey&gt; instances that are equal if their entity sets are the same and their key values are equal.","pos":[928,1082],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal."},{"content":"In addition, temporary keys have no &lt;xref:System.Data.Metadata.Edm.EntitySet&gt; or key values, but permanent keys do.","pos":[1089,1204],"source":"       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do."},{"content":"When the &lt;xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A&gt; method is called on an entity's &lt;xref:System.Data.Objects.ObjectStateEntry&gt; and the entity transitions from the &lt;xref:System.Data.EntityState&gt; state to &lt;xref:System.Data.EntityState&gt; state, the <ph id=\"ph1\">[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]</ph> automatically computes a new permanent key for the entity and synchronizes all temporary key references.","pos":[1211,1633],"source":"       When the <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> method is called on an entity's <xref:System.Data.Objects.ObjectStateEntry> and the entity transitions from the <xref:System.Data.EntityState> state to <xref:System.Data.EntityState> state, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] automatically computes a new permanent key for the entity and synchronizes all temporary key references."}]},{"pos":[20966,21165],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is temporary; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.EntityKey\"></xref> is temporary; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[21570,21667],"content":"A singleton <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by which a read-only entity is identified.","needQuote":true,"needEscape":true,"source":"A singleton <xref href=\"System.Data.EntityKey\"></xref> by which a read-only entity is identified."},{"pos":[21679,22548],"content":"A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set. This can occur as part of the result of an [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table). An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set. Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption> merge option was specified, regardless of the actual merge option that was specified. An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set.","pos":[0,127]},{"content":"This can occur as part of the result of an <ph id=\"ph1\">[!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)]</ph> query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table).","pos":[128,386],"source":" This can occur as part of the result of an [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table)."},{"content":"An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set.","pos":[387,510]},{"content":"Therefore, the object materializer will treat this kind of entity as if the &lt;xref:System.Data.Objects.MergeOption&gt; merge option was specified, regardless of the actual merge option that was specified.","pos":[511,711],"source":" Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption> merge option was specified, regardless of the actual merge option that was specified."},{"content":"An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.","pos":[712,869]}]},{"pos":[22698,22710],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23217,23305],"content":"Helper method that is used to deserialize an <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>."},{"pos":[23317,23529],"content":"OnDeserialized is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"OnDeserialized is used by Object Services when deserializing an &lt;xref:System.Data.EntityKey&gt;.","pos":[0,93],"source":"OnDeserialized is used by Object Services when deserializing an <xref:System.Data.EntityKey>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Serializing Objects<ept id=\"p1\">](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)</ept>.","pos":[94,212],"source":" For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."}]},{"pos":[23748,23864],"content":"Describes the source and destination of a given serialized stream and provides an additional caller-defined context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the source and destination of a given serialized stream and provides an additional caller-defined context.","pos":[0,116]}]},{"pos":[24426,24514],"content":"Helper method that is used to deserialize an <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>."},{"pos":[24526,24739],"content":"OnDeserializing is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"OnDeserializing is used by Object Services when deserializing an &lt;xref:System.Data.EntityKey&gt;.","pos":[0,94],"source":"OnDeserializing is used by Object Services when deserializing an <xref:System.Data.EntityKey>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Serializing Objects<ept id=\"p1\">](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)</ept>.","pos":[95,213],"source":" For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."}]},{"pos":[24959,25076],"content":"Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.","pos":[0,117]}]},{"pos":[25626,25690],"content":"Compares two <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Compares two <xref href=\"System.Data.EntityKey\"></xref> objects."},{"pos":[25703,26414],"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","pos":[0,705],"nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality.","pos":[0,119]},{"content":"That is, two references to the exact same temporary &lt;xref:System.Data.EntityKey&gt; instance are equal but no other &lt;xref:System.Data.EntityKey&gt; instances are equal.","pos":[120,282],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."},{"content":"-   Permanent keys determine equality based on the values of the contained key properties and the &lt;xref:System.Data.Metadata.Edm.EntitySet&gt;.","pos":[288,428],"source":"      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate &lt;xref:System.Data.EntityKey&gt; instances that are equal if their entity sets are the same and their key values are equal.","pos":[429,583],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal."},{"content":"In addition, temporary keys have no &lt;xref:System.Data.Metadata.Edm.EntitySet&gt; or key values, but permanent keys do.","pos":[590,705],"source":"       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do."}]}]},{"pos":[26612,26668],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.EntityKey\"></xref> to compare."},{"pos":[26737,26793],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.EntityKey\"></xref> to compare."},{"pos":[26852,27052],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">key1</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">key2</ph><ept id=\"p3\">&lt;/code&gt;</ept> values are equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[27608,27672],"content":"Compares two <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Compares two <xref href=\"System.Data.EntityKey\"></xref> objects."},{"pos":[27685,28394],"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.","pos":[0,703],"nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:      -   Temporary keys use reference equality.","pos":[0,119]},{"content":"That is, two references to the exact same temporary &lt;xref:System.Data.EntityKey&gt; instance are equal but no other &lt;xref:System.Data.EntityKey&gt; instances are equal.","pos":[120,282],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."},{"content":"-   Permanent keys determine equality based on the values of the contained key properties and the &lt;xref:System.Data.Metadata.Edm.EntitySet&gt;.","pos":[288,428],"source":"      -   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate &lt;xref:System.Data.EntityKey&gt; instances that are equal if their entity sets are the same and their key values are equal.","pos":[429,583],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal."},{"content":"In addition, temporary keys have no &lt;xref:System.Data.Metadata.Edm.EntitySet&gt; or key values, but regular keys do.","pos":[590,703],"source":"       In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do."}]}]},{"pos":[28594,28650],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.EntityKey\"></xref> to compare."},{"pos":[28719,28775],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.EntityKey\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.EntityKey\"></xref> to compare."},{"pos":[28834,29038],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">key1</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">key2</ph><ept id=\"p3\">&lt;/code&gt;</ept> values are not equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.EntityKey\n  id: EntityKey\n  children:\n  - System.Data.EntityKey.#ctor\n  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})\n  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)\n  - System.Data.EntityKey.EntityContainerName\n  - System.Data.EntityKey.EntityKeyValues\n  - System.Data.EntityKey.EntityNotValidKey\n  - System.Data.EntityKey.EntitySetName\n  - System.Data.EntityKey.Equals(System.Data.EntityKey)\n  - System.Data.EntityKey.Equals(System.Object)\n  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  - System.Data.EntityKey.GetHashCode\n  - System.Data.EntityKey.IsTemporary\n  - System.Data.EntityKey.NoEntitySetKey\n  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  langs:\n  - csharp\n  name: EntityKey\n  nameWithType: EntityKey\n  fullName: System.Data.EntityKey\n  type: Class\n  summary: Provides a durable reference to an object that is an instance of an entity type.\n  remarks: \"The EntityKey objects are immutable; that is, after they are constructed they cannot be modified.  \\n  \\n For more information, see [Working with Entity Keys](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f).\"\n  example:\n  - \"These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an EntityKey.  \\n  \\n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#entitykeyclass_trygetobjectbykey)]\\n [!code-cs[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#entitykeyclass_trygetobjectbykey)]  \\n  \\n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]\"\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"{ConcatKeyValue()}\")]\n\n      [System.Runtime.Serialization.DataContract(IsReference=true)]\n\n      public sealed class EntityKey : IEquatable<System.Data.EntityKey>\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable<System.Data.EntityKey>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.#ctor\n  id: '#ctor'\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKey()\n  nameWithType: EntityKey.EntityKey()\n  fullName: System.Data.EntityKey.EntityKey()\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class.\n  syntax:\n    content: public EntityKey ();\n    parameters: []\n  overload: System.Data.EntityKey.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)\n  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)\n  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and a generic <xref:System.Collections.Generic.KeyValuePair> collection.\n  remarks: ''\n  example:\n  - \"This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \\n  \\n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]\"\n  syntax:\n    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);\n    parameters:\n    - id: qualifiedEntitySetName\n      type: System.String\n      description: A <xref:System.String> that is the entity set name qualified by the entity container name.\n    - id: entityKeyValues\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n      description: \"A generic <xref:System.Collections.Generic.KeyValuePair> collection.  \\n  \\n Each key/value pair has a property name as the key and the value of that property as the value. There should be one pair for each property that is part of the <xref href=\\\"System.Data.EntityKey\\\"></xref>. The order of the key/value pairs is not important, but each key property should be included. The property names are simple names that are not qualified with an entity type name or the schema name.\"\n  overload: System.Data.EntityKey.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})\n  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKey(String,IEnumerable<EntityKeyMember>)\n  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)\n  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects.\n  syntax:\n    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);\n    parameters:\n    - id: qualifiedEntitySetName\n      type: System.String\n      description: A <xref:System.String> that is the entity set name qualified by the entity container name.\n    - id: entityKeyValues\n      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}\n      description: An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects with which to initialize the key.\n  overload: System.Data.EntityKey.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)\n  id: '#ctor(System.String,System.String,System.Object)'\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKey(String,String,Object)\n  nameWithType: EntityKey.EntityKey(String,String,Object)\n  fullName: System.Data.EntityKey.EntityKey(String,String,Object)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and specific entity key pair.\n  remarks: ''\n  example:\n  - \"This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \\n  \\n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]\"\n  syntax:\n    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);\n    parameters:\n    - id: qualifiedEntitySetName\n      type: System.String\n      description: A <xref:System.String> that is the entity set name qualified by the entity container name.\n    - id: keyName\n      type: System.String\n      description: A <xref:System.String> that is the name of the key.\n    - id: keyValue\n      type: System.Object\n      description: An <xref:System.Object> that is the key value.\n  overload: System.Data.EntityKey.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.EntityContainerName\n  id: EntityContainerName\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityContainerName\n  nameWithType: EntityKey.EntityContainerName\n  fullName: System.Data.EntityKey.EntityContainerName\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets or sets the name of the entity container.\n  syntax:\n    content: public string EntityContainerName { get; set; }\n    return:\n      type: System.String\n      description: A <xref:System.String> value that is the name of the entity container for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs.\n  overload: System.Data.EntityKey.EntityContainerName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.EntityKeyValues\n  id: EntityKeyValues\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKeyValues\n  nameWithType: EntityKey.EntityKeyValues\n  fullName: System.Data.EntityKey.EntityKeyValues\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets or sets the key values associated with this <xref href=\"System.Data.EntityKey\"></xref>.\n  remarks: \"The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity.  \\n  \\n The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object.\"\n  syntax:\n    content: public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }\n    return:\n      type: System.Data.EntityKeyMember[]\n      description: A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of key values for this <xref href=\"System.Data.EntityKey\"></xref>.\n  overload: System.Data.EntityKey.EntityKeyValues*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.EntityNotValidKey\n  id: EntityNotValidKey\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityNotValidKey\n  nameWithType: EntityKey.EntityNotValidKey\n  fullName: System.Data.EntityKey.EntityNotValidKey\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: A simple <xref href=\"System.Data.EntityKey\"></xref> identifying an entity that resulted from a failed [TREAT](~/add/includes/ajax-current-ext-md.md) operation.\n  remarks: There are various ways to get an invalid entity. The most common scenario is when an [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] query uses the [TREAT](../Topic/TREAT%20\\(Entity%20SQL\\).md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match. ([TREAT](../Topic/TREAT%20\\(Entity%20SQL\\).md) is similar to the C# `as` operator). In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to EntityNotValidKey.\n  syntax:\n    content: public static readonly System.Data.EntityKey EntityNotValidKey;\n    return:\n      type: System.Data.EntityKey\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.EntitySetName\n  id: EntitySetName\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntitySetName\n  nameWithType: EntityKey.EntitySetName\n  fullName: System.Data.EntityKey.EntitySetName\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets or sets the name of the entity set.\n  syntax:\n    content: public string EntitySetName { get; set; }\n    return:\n      type: System.String\n      description: A <xref:System.String> value that is the name of the entity set for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs.\n  overload: System.Data.EntityKey.EntitySetName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)\n  id: Equals(System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: Equals(EntityKey)\n  nameWithType: EntityKey.Equals(EntityKey)\n  fullName: System.Data.EntityKey.Equals(EntityKey)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Returns a value that indicates whether this instance is equal to a specified <xref href=\"System.Data.EntityKey\"></xref>.\n  remarks: \"Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.\"\n  syntax:\n    content: public bool Equals (System.Data.EntityKey other);\n    parameters:\n    - id: other\n      type: System.Data.EntityKey\n      description: An <xref href=\"System.Data.EntityKey\"></xref> object to compare with this instance.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this instance and <code>other</code> have equal values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.EntityKey.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: EntityKey.Equals(Object)\n  fullName: System.Data.EntityKey.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  remarks: \"Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.\"\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An <xref:System.Object> to compare with this instance.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this instance and <code>obj</code> have equal values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.EntityKey.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: GetEntitySet(MetadataWorkspace)\n  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)\n  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets the entity set for this entity key from the given metadata workspace.\n  remarks: The entity set is accessed based on the entity container name and entity set name of the key.\n  syntax:\n    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);\n    parameters:\n    - id: metadataWorkspace\n      type: System.Data.Metadata.Edm.MetadataWorkspace\n      description: The metadata workspace that contains the entity.\n    return:\n      type: System.Data.Metadata.Edm.EntitySet\n      description: The <xref href=\"System.Data.Metadata.Edm.EntitySet\"></xref> for the entity key.\n  overload: System.Data.EntityKey.GetEntitySet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The entity set could not be located in the specified metadata workspace.\n  platform:\n  - net462\n- uid: System.Data.EntityKey.GetHashCode\n  id: GetHashCode\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: EntityKey.GetHashCode()\n  fullName: System.Data.EntityKey.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Serves as a hash function for the current <xref href=\"System.Data.EntityKey\"></xref> object. GetHashCode is suitable for hashing algorithms and data structures such as a hash table.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Data.EntityKey\"></xref>.\n  overload: System.Data.EntityKey.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.IsTemporary\n  id: IsTemporary\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: IsTemporary\n  nameWithType: EntityKey.IsTemporary\n  fullName: System.Data.EntityKey.IsTemporary\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets a value that indicates whether the <xref href=\"System.Data.EntityKey\"></xref> is temporary.\n  remarks: \"When a new entity is created, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] defines temporary key and sets the IsTemporary property to `true`. When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] assigns a permanent key and sets the IsTemporary property to `false`.  \\n  \\n> [!NOTE]\\n>  Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.  \\n  \\n Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.  \\n  \\n When the <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> method is called on an entity's <xref:System.Data.Objects.ObjectStateEntry> and the entity transitions from the <xref:System.Data.EntityState> state to <xref:System.Data.EntityState> state, the [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] automatically computes a new permanent key for the entity and synchronizes all temporary key references.\"\n  syntax:\n    content: public bool IsTemporary { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Data.EntityKey\"></xref> is temporary; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.EntityKey.IsTemporary*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.NoEntitySetKey\n  id: NoEntitySetKey\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: NoEntitySetKey\n  nameWithType: EntityKey.NoEntitySetKey\n  fullName: System.Data.EntityKey.NoEntitySetKey\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: A singleton <xref href=\"System.Data.EntityKey\"></xref> by which a read-only entity is identified.\n  remarks: A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set. This can occur as part of the result of an [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table). An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set. Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption> merge option was specified, regardless of the actual merge option that was specified. An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.\n  syntax:\n    content: public static readonly System.Data.EntityKey NoEntitySetKey;\n    return:\n      type: System.Data.EntityKey\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: OnDeserialized(StreamingContext)\n  nameWithType: EntityKey.OnDeserialized(StreamingContext)\n  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>.\n  remarks: OnDeserialized is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).\n  syntax:\n    content: public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Describes the source and destination of a given serialized stream and provides an additional caller-defined context.\n  overload: System.Data.EntityKey.OnDeserialized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: OnDeserializing(StreamingContext)\n  nameWithType: EntityKey.OnDeserializing(StreamingContext)\n  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>.\n  remarks: OnDeserializing is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).\n  syntax:\n    content: public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.\n  overload: System.Data.EntityKey.OnDeserializing*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: op_Equality(EntityKey,EntityKey)\n  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)\n  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)\n  type: Operator\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Compares two <xref href=\"System.Data.EntityKey\"></xref> objects.\n  remarks: \"Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.\"\n  syntax:\n    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);\n    parameters:\n    - id: key1\n      type: System.Data.EntityKey\n      description: A <xref href=\"System.Data.EntityKey\"></xref> to compare.\n    - id: key2\n      type: System.Data.EntityKey\n      description: A <xref href=\"System.Data.EntityKey\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.EntityKey.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: op_Inequality(EntityKey,EntityKey)\n  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)\n  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)\n  type: Operator\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Compares two <xref href=\"System.Data.EntityKey\"></xref> objects.\n  remarks: \"Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.\"\n  syntax:\n    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);\n    parameters:\n    - id: key1\n      type: System.Data.EntityKey\n      description: A <xref href=\"System.Data.EntityKey\"></xref> to compare.\n    - id: key2\n      type: System.Data.EntityKey\n      description: A <xref href=\"System.Data.EntityKey\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.EntityKey.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Data.EntityKey.#ctor\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey()\n  nameWithType: EntityKey.EntityKey()\n  fullName: System.Data.EntityKey.EntityKey()\n- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)\n  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)\n  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<KeyValuePair<String,Object>>\n  nameWithType: IEnumerable<KeyValuePair<String,Object>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey(String,IEnumerable<EntityKeyMember>)\n  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)\n  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)\n- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<EntityKeyMember>\n  nameWithType: IEnumerable<EntityKeyMember>\n  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Data.EntityKeyMember>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.EntityKeyMember\n    name: EntityKeyMember\n    nameWithType: EntityKeyMember\n    fullName: EntityKeyMember\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey(String,String,Object)\n  nameWithType: EntityKey.EntityKey(String,String,Object)\n  fullName: System.Data.EntityKey.EntityKey(String,String,Object)\n- uid: System.Data.EntityKey.EntityContainerName\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityContainerName\n  nameWithType: EntityKey.EntityContainerName\n  fullName: System.Data.EntityKey.EntityContainerName\n- uid: System.Data.EntityKey.EntityKeyValues\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKeyValues\n  nameWithType: EntityKey.EntityKeyValues\n  fullName: System.Data.EntityKey.EntityKeyValues\n- uid: System.Data.EntityKeyMember[]\n  parent: System.Data\n  isExternal: false\n  name: EntityKeyMember\n  nameWithType: EntityKeyMember\n  fullName: System.Data.EntityKeyMember[]\n  spec.csharp:\n  - uid: System.Data.EntityKeyMember\n    name: EntityKeyMember\n    nameWithType: EntityKeyMember\n    fullName: EntityKeyMember[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.EntityKey.EntityNotValidKey\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityNotValidKey\n  nameWithType: EntityKey.EntityNotValidKey\n  fullName: System.Data.EntityKey.EntityNotValidKey\n- uid: System.Data.EntityKey\n  parent: System.Data\n  isExternal: false\n  name: EntityKey\n  nameWithType: EntityKey\n  fullName: System.Data.EntityKey\n- uid: System.Data.EntityKey.EntitySetName\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntitySetName\n  nameWithType: EntityKey.EntitySetName\n  fullName: System.Data.EntityKey.EntitySetName\n- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: Equals(EntityKey)\n  nameWithType: EntityKey.Equals(EntityKey)\n  fullName: System.Data.EntityKey.Equals(EntityKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.EntityKey.Equals(System.Object)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: EntityKey.Equals(Object)\n  fullName: System.Data.EntityKey.Equals(Object)\n- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: GetEntitySet(MetadataWorkspace)\n  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)\n  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)\n- uid: System.Data.Metadata.Edm.EntitySet\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: EntitySet\n  nameWithType: EntitySet\n  fullName: System.Data.Metadata.Edm.EntitySet\n- uid: System.Data.Metadata.Edm.MetadataWorkspace\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: MetadataWorkspace\n  nameWithType: MetadataWorkspace\n  fullName: System.Data.Metadata.Edm.MetadataWorkspace\n- uid: System.Data.EntityKey.GetHashCode\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: EntityKey.GetHashCode()\n  fullName: System.Data.EntityKey.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.EntityKey.IsTemporary\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: IsTemporary\n  nameWithType: EntityKey.IsTemporary\n  fullName: System.Data.EntityKey.IsTemporary\n- uid: System.Data.EntityKey.NoEntitySetKey\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: NoEntitySetKey\n  nameWithType: EntityKey.NoEntitySetKey\n  fullName: System.Data.EntityKey.NoEntitySetKey\n- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: OnDeserialized(StreamingContext)\n  nameWithType: EntityKey.OnDeserialized(StreamingContext)\n  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: OnDeserializing(StreamingContext)\n  nameWithType: EntityKey.OnDeserializing(StreamingContext)\n  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)\n- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: op_Equality(EntityKey,EntityKey)\n  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)\n  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)\n- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: op_Inequality(EntityKey,EntityKey)\n  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)\n  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)\n- uid: System.Data.EntityKey.#ctor*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey\n  nameWithType: EntityKey.EntityKey\n- uid: System.Data.EntityKey.EntityContainerName*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityContainerName\n  nameWithType: EntityKey.EntityContainerName\n- uid: System.Data.EntityKey.EntityKeyValues*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKeyValues\n  nameWithType: EntityKey.EntityKeyValues\n- uid: System.Data.EntityKey.EntitySetName*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntitySetName\n  nameWithType: EntityKey.EntitySetName\n- uid: System.Data.EntityKey.Equals*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: Equals\n  nameWithType: EntityKey.Equals\n- uid: System.Data.EntityKey.GetEntitySet*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: GetEntitySet\n  nameWithType: EntityKey.GetEntitySet\n- uid: System.Data.EntityKey.GetHashCode*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: GetHashCode\n  nameWithType: EntityKey.GetHashCode\n- uid: System.Data.EntityKey.IsTemporary*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: IsTemporary\n  nameWithType: EntityKey.IsTemporary\n- uid: System.Data.EntityKey.OnDeserialized*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: OnDeserialized\n  nameWithType: EntityKey.OnDeserialized\n- uid: System.Data.EntityKey.OnDeserializing*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: OnDeserializing\n  nameWithType: EntityKey.OnDeserializing\n- uid: System.Data.EntityKey.op_Equality*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: op_Equality\n  nameWithType: EntityKey.op_Equality\n- uid: System.Data.EntityKey.op_Inequality*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: op_Inequality\n  nameWithType: EntityKey.op_Inequality\n"}