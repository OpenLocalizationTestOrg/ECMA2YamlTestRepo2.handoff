{"nodes":[{"pos":[885,1118],"content":"Represents a base class that implements the <xref href=\"System.Data.Common.DbProviderManifest\"></xref> based on an XML definition. You can use the DbXmlEnabledProviderManifest class to obtain provider-specific information at runtime.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a base class that implements the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbProviderManifest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> based on an XML definition.","pos":[0,130],"source":"Represents a base class that implements the <xref href=\"System.Data.Common.DbProviderManifest\"></xref> based on an XML definition."},{"content":"You can use the DbXmlEnabledProviderManifest class to obtain provider-specific information at runtime.","pos":[131,233]}]},{"pos":[1131,1919],"content":"The DbXmlEnabledProviderManifest class is especially appropriate for the providers whose type mapping to EDM is symmetrical. In symmetrical type mapping scenarios, each storage type maps to a single Entity Data Model (EDM) type regardless of the mapping direction. In other words, the EDM-to-provider type mapping is the same as the provider-to-EDM type mapping.       In symmetric mapping scenarios, you can either derive your custom provider class from the DbXmlEnabledProviderManifest class or the <xref:System.Data.Common.DbProviderManifest> class. We recommend that you derive your custom provider class from the DbXmlEnabledProviderManifest class for symmetric mapping scenarios because the DbXmlEnabledProviderManifest class will allow you to specify the manifests declaratively.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DbXmlEnabledProviderManifest class is especially appropriate for the providers whose type mapping to EDM is symmetrical. In symmetrical type mapping scenarios, each storage type maps to a single Entity Data Model (EDM) type regardless of the mapping direction. In other words, the EDM-to-provider type mapping is the same as the provider-to-EDM type mapping.       In symmetric mapping scenarios, you can either derive your custom provider class from the DbXmlEnabledProviderManifest class or the <xref:System.Data.Common.DbProviderManifest> class. We recommend that you derive your custom provider class from the DbXmlEnabledProviderManifest class for symmetric mapping scenarios because the DbXmlEnabledProviderManifest class will allow you to specify the manifests declaratively.","pos":[0,786],"nodes":[{"content":"The DbXmlEnabledProviderManifest class is especially appropriate for the providers whose type mapping to EDM is symmetrical.","pos":[0,124]},{"content":"In symmetrical type mapping scenarios, each storage type maps to a single Entity Data Model (EDM) type regardless of the mapping direction.","pos":[125,264]},{"content":"In other words, the EDM-to-provider type mapping is the same as the provider-to-EDM type mapping.","pos":[265,362]},{"content":"In symmetric mapping scenarios, you can either derive your custom provider class from the DbXmlEnabledProviderManifest class or the &lt;xref:System.Data.Common.DbProviderManifest&gt; class.","pos":[369,552],"source":"       In symmetric mapping scenarios, you can either derive your custom provider class from the DbXmlEnabledProviderManifest class or the <xref:System.Data.Common.DbProviderManifest> class."},{"content":"We recommend that you derive your custom provider class from the DbXmlEnabledProviderManifest class for symmetric mapping scenarios because the DbXmlEnabledProviderManifest class will allow you to specify the manifests declaratively.","pos":[553,786]}]}]},{"pos":[3601,3710],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbXmlEnabledProviderManifest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Common.DbXmlEnabledProviderManifest\"></xref> class."},{"pos":[3722,3848],"content":"The Entity Framework provides a default implementation that builds the provider manifest information from the given XmlReader.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Entity Framework provides a default implementation that builds the provider manifest information from the given XmlReader.","pos":[0,126]}]},{"pos":[4027,4132],"content":"An <xref:System.Xml.XmlReader> object that provides access to the XML data in the provider manifest file.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Xml.XmlReader&gt; object that provides access to the XML data in the provider manifest file.","pos":[0,105],"source":"An <xref:System.Xml.XmlReader> object that provides access to the XML data in the provider manifest file."}]},{"pos":[4787,4873],"content":"Returns the list of facet descriptions for the specified Entity Data Model (EDM) type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the list of facet descriptions for the specified Entity Data Model (EDM) type.","pos":[0,86]}]},{"pos":[5163,5273],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.Metadata.Edm.EdmType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which the facet descriptions are to be retrieved.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.Metadata.Edm.EdmType\"></xref> for which the facet descriptions are to be retrieved."},{"pos":[5410,5570],"content":"A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of facet descriptions for the specified EDM type.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of type <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.ReadOnlyCollection%601<ph id=\"ph2\">&amp;gt;</ph> that contains the list of facet descriptions for the specified EDM type.","pos":[0,160],"source":"A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of facet descriptions for the specified EDM type."}]},{"pos":[6136,6185],"content":"Returns the list of provider-supported functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the list of provider-supported functions.","pos":[0,49]}]},{"pos":[6197,6352],"content":"This (not nullable) method does not return user-defined functions. If the provider does not support any functions, this method returns an empty collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This (not nullable) method does not return user-defined functions. If the provider does not support any functions, this method returns an empty collection.","pos":[0,155],"nodes":[{"content":"This (not nullable) method does not return user-defined functions.","pos":[0,66]},{"content":"If the provider does not support any functions, this method returns an empty collection.","pos":[67,155]}]}]},{"pos":[6652,6795],"content":"A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of provider-supported functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of type <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.ReadOnlyCollection%601<ph id=\"ph2\">&amp;gt;</ph> that contains the list of provider-supported functions.","pos":[0,143],"source":"A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of provider-supported functions."}]},{"pos":[7338,7408],"content":"Returns the list of primitive types supported by the storage provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the list of primitive types supported by the storage provider.","pos":[0,70]}]},{"pos":[7420,7515],"content":"If the store does not support any type, this (not nullable) method returns an empty collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the store does not support any type, this (not nullable) method returns an empty collection.","pos":[0,95]}]},{"pos":[7815,7979],"content":"A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of primitive types supported by the storage provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of type <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.ObjectModel.ReadOnlyCollection%601<ph id=\"ph2\">&amp;gt;</ph> that contains the list of primitive types supported by the storage provider.","pos":[0,164],"source":"A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of primitive types supported by the storage provider."}]},{"pos":[8514,8574],"content":"Gets the namespace name supported by this provider manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the namespace name supported by this provider manifest.","pos":[0,60]}]},{"pos":[8701,8756],"content":"The namespace name supported by this provider manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"The namespace name supported by this provider manifest.","pos":[0,55]}]},{"pos":[9381,9476],"content":"Gets the best mapped equivalent Entity Data Model (EDM) type for a specified storage type name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the best mapped equivalent Entity Data Model (EDM) type for a specified storage type name.","pos":[0,95]}]},{"pos":[9488,9667],"content":"This property (not nullable) returns the <xref:System.Collections.Generic.Dictionary> object, which accepts a storage type name as a key and returns its associated EDM type value.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property (not nullable) returns the &lt;xref:System.Collections.Generic.Dictionary&gt; object, which accepts a storage type name as a key and returns its associated EDM type value.","pos":[0,179],"source":"This property (not nullable) returns the <xref:System.Collections.Generic.Dictionary> object, which accepts a storage type name as a key and returns its associated EDM type value."}]},{"pos":[9962,10032],"content":"The best mapped equivalent EDM type for a specified storage type name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The best mapped equivalent EDM type for a specified storage type name.","pos":[0,70]}]},{"pos":[10685,10774],"content":"Gets the best mapped equivalent storage primitive type for a specified storage type name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the best mapped equivalent storage primitive type for a specified storage type name.","pos":[0,89]}]},{"pos":[10786,10979],"content":"This property (not nullable) returns the <xref:System.Collections.Generic.Dictionary> object, which accepts a storage type name as a key and returns its associated storage primitive type value.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property (not nullable) returns the &lt;xref:System.Collections.Generic.Dictionary&gt; object, which accepts a storage type name as a key and returns its associated storage primitive type value.","pos":[0,193],"source":"This property (not nullable) returns the <xref:System.Collections.Generic.Dictionary> object, which accepts a storage type name as a key and returns its associated storage primitive type value."}]},{"pos":[11276,11360],"content":"The best mapped equivalent storage primitive type for a specified storage type name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The best mapped equivalent storage primitive type for a specified storage type name.","pos":[0,84]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.DbXmlEnabledProviderManifest\n  id: DbXmlEnabledProviderManifest\n  children:\n  - System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)\n  - System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)\n  - System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions\n  - System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes\n  - System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName\n  - System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType\n  - System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType\n  langs:\n  - csharp\n  name: DbXmlEnabledProviderManifest\n  nameWithType: DbXmlEnabledProviderManifest\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest\n  type: Class\n  summary: Represents a base class that implements the <xref href=\"System.Data.Common.DbProviderManifest\"></xref> based on an XML definition. You can use the DbXmlEnabledProviderManifest class to obtain provider-specific information at runtime.\n  remarks: \"The DbXmlEnabledProviderManifest class is especially appropriate for the providers whose type mapping to EDM is symmetrical. In symmetrical type mapping scenarios, each storage type maps to a single Entity Data Model (EDM) type regardless of the mapping direction. In other words, the EDM-to-provider type mapping is the same as the provider-to-EDM type mapping.  \\n  \\n In symmetric mapping scenarios, you can either derive your custom provider class from the DbXmlEnabledProviderManifest class or the <xref:System.Data.Common.DbProviderManifest> class. We recommend that you derive your custom provider class from the DbXmlEnabledProviderManifest class for symmetric mapping scenarios because the DbXmlEnabledProviderManifest class will allow you to specify the manifests declaratively.\"\n  syntax:\n    content: 'public abstract class DbXmlEnabledProviderManifest : System.Data.Common.DbProviderManifest'\n  inheritance:\n  - System.Object\n  - System.Data.Common.DbProviderManifest\n  implements: []\n  inheritedMembers:\n  - System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition\n  - System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3\n  - System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)\n  - System.Data.Common.DbProviderManifest.GetDbInformation(System.String)\n  - System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)\n  - System.Data.Common.DbProviderManifest.GetInformation(System.String)\n  - System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)\n  - System.Data.Common.DbProviderManifest.StoreSchemaDefinition\n  - System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3\n  - System.Data.Common.DbProviderManifest.StoreSchemaMapping\n  - System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3\n  - System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)\n  platform:\n  - net462\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)\n  id: '#ctor(System.Xml.XmlReader)'\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  langs:\n  - csharp\n  name: DbXmlEnabledProviderManifest(XmlReader)\n  nameWithType: DbXmlEnabledProviderManifest.DbXmlEnabledProviderManifest(XmlReader)\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.DbXmlEnabledProviderManifest(XmlReader)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.DbXmlEnabledProviderManifest\"></xref> class.\n  remarks: The Entity Framework provides a default implementation that builds the provider manifest information from the given XmlReader.\n  syntax:\n    content: protected DbXmlEnabledProviderManifest (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An <xref:System.Xml.XmlReader> object that provides access to the XML data in the provider manifest file.\n  overload: System.Data.Common.DbXmlEnabledProviderManifest.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)\n  id: GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  langs:\n  - csharp\n  name: GetFacetDescriptions(EdmType)\n  nameWithType: DbXmlEnabledProviderManifest.GetFacetDescriptions(EdmType)\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(EdmType)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Returns the list of facet descriptions for the specified Entity Data Model (EDM) type.\n  syntax:\n    content: public override System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.FacetDescription> GetFacetDescriptions (System.Data.Metadata.Edm.EdmType type);\n    parameters:\n    - id: type\n      type: System.Data.Metadata.Edm.EdmType\n      description: An <xref href=\"System.Data.Metadata.Edm.EdmType\"></xref> for which the facet descriptions are to be retrieved.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.FacetDescription}\n      description: A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of facet descriptions for the specified EDM type.\n  overload: System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions\n  id: GetStoreFunctions\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  langs:\n  - csharp\n  name: GetStoreFunctions()\n  nameWithType: DbXmlEnabledProviderManifest.GetStoreFunctions()\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Returns the list of provider-supported functions.\n  remarks: This (not nullable) method does not return user-defined functions. If the provider does not support any functions, this method returns an empty collection.\n  syntax:\n    content: public override System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.EdmFunction> GetStoreFunctions ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}\n      description: A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of provider-supported functions.\n  overload: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes\n  id: GetStoreTypes\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  langs:\n  - csharp\n  name: GetStoreTypes()\n  nameWithType: DbXmlEnabledProviderManifest.GetStoreTypes()\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Returns the list of primitive types supported by the storage provider.\n  remarks: If the store does not support any type, this (not nullable) method returns an empty collection.\n  syntax:\n    content: public override System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.PrimitiveType> GetStoreTypes ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.PrimitiveType}\n      description: A collection of type &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; that contains the list of primitive types supported by the storage provider.\n  overload: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName\n  id: NamespaceName\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  langs:\n  - csharp\n  name: NamespaceName\n  nameWithType: DbXmlEnabledProviderManifest.NamespaceName\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Gets the namespace name supported by this provider manifest.\n  syntax:\n    content: public override string NamespaceName { get; }\n    return:\n      type: System.String\n      description: The namespace name supported by this provider manifest.\n  overload: System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType\n  id: StoreTypeNameToEdmPrimitiveType\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  langs:\n  - csharp\n  name: StoreTypeNameToEdmPrimitiveType\n  nameWithType: DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Gets the best mapped equivalent Entity Data Model (EDM) type for a specified storage type name.\n  remarks: This property (not nullable) returns the <xref:System.Collections.Generic.Dictionary> object, which accepts a storage type name as a key and returns its associated EDM type value.\n  syntax:\n    content: protected System.Collections.Generic.Dictionary<string,System.Data.Metadata.Edm.PrimitiveType> StoreTypeNameToEdmPrimitiveType { get; }\n    return:\n      type: System.Collections.Generic.Dictionary{System.String,System.Data.Metadata.Edm.PrimitiveType}\n      description: The best mapped equivalent EDM type for a specified storage type name.\n  overload: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType\n  id: StoreTypeNameToStorePrimitiveType\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  langs:\n  - csharp\n  name: StoreTypeNameToStorePrimitiveType\n  nameWithType: DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Gets the best mapped equivalent storage primitive type for a specified storage type name.\n  remarks: This property (not nullable) returns the <xref:System.Collections.Generic.Dictionary> object, which accepts a storage type name as a key and returns its associated storage primitive type value.\n  syntax:\n    content: protected System.Collections.Generic.Dictionary<string,System.Data.Metadata.Edm.PrimitiveType> StoreTypeNameToStorePrimitiveType { get; }\n    return:\n      type: System.Collections.Generic.Dictionary{System.String,System.Data.Metadata.Edm.PrimitiveType}\n      description: The best mapped equivalent storage primitive type for a specified storage type name.\n  overload: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: System.Data.Common.DbProviderManifest\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: DbXmlEnabledProviderManifest(XmlReader)\n  nameWithType: DbXmlEnabledProviderManifest.DbXmlEnabledProviderManifest(XmlReader)\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.DbXmlEnabledProviderManifest(XmlReader)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: GetFacetDescriptions(EdmType)\n  nameWithType: DbXmlEnabledProviderManifest.GetFacetDescriptions(EdmType)\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(EdmType)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.FacetDescription}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<FacetDescription>\n  nameWithType: ReadOnlyCollection<FacetDescription>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.FacetDescription>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Data.Metadata.Edm.FacetDescription>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Metadata.Edm.FacetDescription\n    name: FacetDescription\n    nameWithType: FacetDescription\n    fullName: FacetDescription\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Metadata.Edm.EdmType\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: EdmType\n  nameWithType: EdmType\n  fullName: System.Data.Metadata.Edm.EdmType\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: GetStoreFunctions()\n  nameWithType: DbXmlEnabledProviderManifest.GetStoreFunctions()\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<EdmFunction>\n  nameWithType: ReadOnlyCollection<EdmFunction>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.EdmFunction>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Data.Metadata.Edm.EdmFunction>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Metadata.Edm.EdmFunction\n    name: EdmFunction\n    nameWithType: EdmFunction\n    fullName: EdmFunction\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: GetStoreTypes()\n  nameWithType: DbXmlEnabledProviderManifest.GetStoreTypes()\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.PrimitiveType}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<PrimitiveType>\n  nameWithType: ReadOnlyCollection<PrimitiveType>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.PrimitiveType>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Data.Metadata.Edm.PrimitiveType>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Metadata.Edm.PrimitiveType\n    name: PrimitiveType\n    nameWithType: PrimitiveType\n    fullName: PrimitiveType\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: NamespaceName\n  nameWithType: DbXmlEnabledProviderManifest.NamespaceName\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: StoreTypeNameToEdmPrimitiveType\n  nameWithType: DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType\n- uid: System.Collections.Generic.Dictionary{System.String,System.Data.Metadata.Edm.PrimitiveType}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: Dictionary<String,PrimitiveType>\n  nameWithType: Dictionary<String,PrimitiveType>\n  fullName: System.Collections.Generic.Dictionary<System.String,System.Data.Metadata.Edm.PrimitiveType>\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    nameWithType: Dictionary\n    fullName: Dictionary<System.String,System.Data.Metadata.Edm.PrimitiveType>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Data.Metadata.Edm.PrimitiveType\n    name: PrimitiveType\n    nameWithType: PrimitiveType\n    fullName: PrimitiveType\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: StoreTypeNameToStorePrimitiveType\n  nameWithType: DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType\n  fullName: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.#ctor*\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: DbXmlEnabledProviderManifest\n  nameWithType: DbXmlEnabledProviderManifest.DbXmlEnabledProviderManifest\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions*\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: GetFacetDescriptions\n  nameWithType: DbXmlEnabledProviderManifest.GetFacetDescriptions\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions*\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: GetStoreFunctions\n  nameWithType: DbXmlEnabledProviderManifest.GetStoreFunctions\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes*\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: GetStoreTypes\n  nameWithType: DbXmlEnabledProviderManifest.GetStoreTypes\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName*\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: NamespaceName\n  nameWithType: DbXmlEnabledProviderManifest.NamespaceName\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType*\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: StoreTypeNameToEdmPrimitiveType\n  nameWithType: DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType\n- uid: System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType*\n  parent: System.Data.Common.DbXmlEnabledProviderManifest\n  isExternal: false\n  name: StoreTypeNameToStorePrimitiveType\n  nameWithType: DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType\n"}