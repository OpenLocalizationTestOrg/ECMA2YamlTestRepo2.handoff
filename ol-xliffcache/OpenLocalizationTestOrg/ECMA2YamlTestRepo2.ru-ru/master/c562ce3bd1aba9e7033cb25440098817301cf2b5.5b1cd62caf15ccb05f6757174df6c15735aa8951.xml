{"nodes":[{"pos":[2295,2401],"content":"A listener for <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that writes events to the ETW subsytem.","needQuote":true,"needEscape":true,"source":"A listener for <xref href=\"System.Diagnostics.TraceSource\"></xref> that writes events to the ETW subsytem."},{"pos":[2414,4112],"content":"All event data (trace or debug) from the source event is written to the ETW subsystem as a string. The data elements are delimited using a comma. To specify a different delimiter, use the <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter%2A> property.       Adding the listener to <xref:System.Diagnostics.TraceSource?displayProperty=fullName> registers the provider with the ETW subsystem. You must create an ETW trace session using the Logman.exe executable program (or something similar) to write the events to a log file.       You do not need a manifest to consume events from the listener because the event data is a single string.       When you call the <xref:System.Diagnostics.TraceSource?displayProperty=fullName> methods to write events, you pass a <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration value. The enumeration contains both level and keyword values. When you enable a trace listener provider from an ETW session, the level value that you specify can be the value associated with one of the following <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration values:      -   Critical (value is 1)      -   Error (value is 2)      -   Information (value is 8)      -   Verbose (value is 16)      -   Warning (value is 4)       The keyword value that you specify for the session can be the value associated with one of the following <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration values:      -   Resume (value is 2,048)      -   Start (value is 256)      -   Stop (value is 512)      -   Suspend (value is 1,024)      -   Transfer (value is 4,096)","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"All event data (trace or debug) from the source event is written to the ETW subsystem as a string. The data elements are delimited using a comma. To specify a different delimiter, use the <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter%2A> property.       Adding the listener to <xref:System.Diagnostics.TraceSource?displayProperty=fullName> registers the provider with the ETW subsystem. You must create an ETW trace session using the Logman.exe executable program (or something similar) to write the events to a log file.       You do not need a manifest to consume events from the listener because the event data is a single string.       When you call the <xref:System.Diagnostics.TraceSource?displayProperty=fullName> methods to write events, you pass a <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration value. The enumeration contains both level and keyword values. When you enable a trace listener provider from an ETW session, the level value that you specify can be the value associated with one of the following <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration values:      -   Critical (value is 1)      -   Error (value is 2)      -   Information (value is 8)      -   Verbose (value is 16)      -   Warning (value is 4)       The keyword value that you specify for the session can be the value associated with one of the following <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration values:      -   Resume (value is 2,048)      -   Start (value is 256)      -   Stop (value is 512)      -   Suspend (value is 1,024)      -   Transfer (value is 4,096)","pos":[0,1670],"nodes":[{"content":"All event data (trace or debug) from the source event is written to the ETW subsystem as a string.","pos":[0,98]},{"content":"The data elements are delimited using a comma.","pos":[99,145]},{"content":"To specify a different delimiter, use the &lt;xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter%2A&gt; property.","pos":[146,272],"source":" To specify a different delimiter, use the <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter%2A> property."},{"content":"Adding the listener to &lt;xref:System.Diagnostics.TraceSource?displayProperty=fullName&gt; registers the provider with the ETW subsystem.","pos":[279,411],"source":"       Adding the listener to <xref:System.Diagnostics.TraceSource?displayProperty=fullName> registers the provider with the ETW subsystem."},{"content":"You must create an ETW trace session using the Logman.exe executable program (or something similar) to write the events to a log file.","pos":[412,546]},{"content":"You do not need a manifest to consume events from the listener because the event data is a single string.","pos":[553,658]},{"content":"When you call the &lt;xref:System.Diagnostics.TraceSource?displayProperty=fullName&gt; methods to write events, you pass a &lt;xref:System.Diagnostics.TraceEventType?displayProperty=fullName&gt; enumeration value.","pos":[665,866],"source":"       When you call the <xref:System.Diagnostics.TraceSource?displayProperty=fullName> methods to write events, you pass a <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration value."},{"content":"The enumeration contains both level and keyword values.","pos":[867,922]},{"content":"When you enable a trace listener provider from an ETW session, the level value that you specify can be the value associated with one of the following &lt;xref:System.Diagnostics.TraceEventType?displayProperty=fullName&gt; enumeration values:      -   Critical (value is 1)      -   Error (value is 2)      -   Information (value is 8)      -   Verbose (value is 16)      -   Warning (value is 4)       The keyword value that you specify for the session can be the value associated with one of the following &lt;xref:System.Diagnostics.TraceEventType?displayProperty=fullName&gt; enumeration values:      -   Resume (value is 2,048)      -   Start (value is 256)      -   Stop (value is 512)      -   Suspend (value is 1,024)      -   Transfer (value is 4,096)","pos":[923,1670],"source":" When you enable a trace listener provider from an ETW session, the level value that you specify can be the value associated with one of the following <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration values:      -   Critical (value is 1)      -   Error (value is 2)      -   Information (value is 8)      -   Verbose (value is 16)      -   Warning (value is 4)       The keyword value that you specify for the session can be the value associated with one of the following <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration values:      -   Resume (value is 2,048)      -   Start (value is 256)      -   Stop (value is 512)      -   Suspend (value is 1,024)      -   Transfer (value is 4,096)"}]}]},{"pos":[7005,7161],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified provider identifier.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"></xref> class using the specified provider identifier."},{"pos":[7322,7386],"content":"A unique string <xref:System.Guid> that identifies the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique string &lt;xref:System.Guid&gt; that identifies the provider.","pos":[0,64],"source":"A unique string <xref:System.Guid> that identifies the provider."}]},{"pos":[8072,8253],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified provider identifier and name of the listener.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"></xref> class using the specified provider identifier and name of the listener."},{"pos":[8427,8491],"content":"A unique string <xref:System.Guid> that identifies the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique string &lt;xref:System.Guid&gt; that identifies the provider.","pos":[0,64],"source":"A unique string <xref:System.Guid> that identifies the provider."}]},{"pos":[8552,8573],"content":"Name of the listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the listener.","pos":[0,21]}]},{"pos":[9308,9501],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified provider identifier, name of the listener, and delimiter.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"></xref> class using the specified provider identifier, name of the listener, and delimiter."},{"pos":[9708,9772],"content":"A unique string <xref:System.Guid> that identifies the provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique string &lt;xref:System.Guid&gt; that identifies the provider.","pos":[0,64],"source":"A unique string <xref:System.Guid> that identifies the provider."}]},{"pos":[9833,9854],"content":"Name of the listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Name of the listener.","pos":[0,21]}]},{"pos":[9920,10072],"content":"Delimiter used to delimit the event data. (For more details, see the <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter*> property.)","needQuote":true,"needEscape":true,"nodes":[{"content":"Delimiter used to delimit the event data. (For more details, see the <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter*> property.)","pos":[0,152],"nodes":[{"content":"Delimiter used to delimit the event data.","pos":[0,41]},{"content":"(For more details, see the &lt;xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter*&gt; property.)","pos":[42,152],"source":" (For more details, see the <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter*> property.)"}]}]},{"pos":[10591,10669],"content":"Closes the output stream so it no longer receives tracing or debugging output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the output stream so it no longer receives tracing or debugging output.","pos":[0,78]}]},{"pos":[11277,11373],"content":"Gets and sets the delimiter used to delimit the event data that is written to the ETW subsystem.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets and sets the delimiter used to delimit the event data that is written to the ETW subsystem.","pos":[0,96]}]},{"pos":[11386,12121],"content":"The listener converts the data elements to strings and then concatenates the strings together, using the specified delimiter to delimit each data element in the string. The string is then written as the event data in the ETW subsystem.       To successfully parse the string, the consumer must know the delimiter that was used.       If the data contains a string that may contain a comma, specify an appropriate delimiter, so that the event data can be correctly parsed.       You do not need a manifest to consume events from the listener because the event data is a single string.       The delimiter applies to event data written using the <xref:System.Diagnostics.TraceSource.TraceData%2A?displayProperty=fullName> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The listener converts the data elements to strings and then concatenates the strings together, using the specified delimiter to delimit each data element in the string. The string is then written as the event data in the ETW subsystem.       To successfully parse the string, the consumer must know the delimiter that was used.       If the data contains a string that may contain a comma, specify an appropriate delimiter, so that the event data can be correctly parsed.       You do not need a manifest to consume events from the listener because the event data is a single string.       The delimiter applies to event data written using the <xref:System.Diagnostics.TraceSource.TraceData%2A?displayProperty=fullName> method.","pos":[0,727],"nodes":[{"content":"The listener converts the data elements to strings and then concatenates the strings together, using the specified delimiter to delimit each data element in the string.","pos":[0,168]},{"content":"The string is then written as the event data in the ETW subsystem.","pos":[169,235]},{"content":"To successfully parse the string, the consumer must know the delimiter that was used.","pos":[242,327]},{"content":"If the data contains a string that may contain a comma, specify an appropriate delimiter, so that the event data can be correctly parsed.","pos":[334,471]},{"content":"You do not need a manifest to consume events from the listener because the event data is a single string.","pos":[478,583]},{"content":"The delimiter applies to event data written using the &lt;xref:System.Diagnostics.TraceSource.TraceData%2A?displayProperty=fullName&gt; method.","pos":[590,727],"source":"       The delimiter applies to event data written using the <xref:System.Diagnostics.TraceSource.TraceData%2A?displayProperty=fullName> method."}]}]},{"pos":[12241,12320],"content":"The delimiter used to delimit the event data. The default delimiter is a comma.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delimiter used to delimit the event data. The default delimiter is a comma.","pos":[0,79],"nodes":[{"content":"The delimiter used to delimit the event data.","pos":[0,45]},{"content":"The default delimiter is a comma.","pos":[46,79]}]}]},{"pos":[12935,13097],"content":"Emits an error message and a detailed error message to the listener you create when you implement the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Emits an error message and a detailed error message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class."},{"pos":[13266,13284],"content":"A message to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to emit.","pos":[0,18]}]},{"pos":[13354,13381],"content":"A detailed message to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"A detailed message to emit.","pos":[0,27]}]},{"pos":[13899,13925],"content":"Flushes the output buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushes the output buffer.","pos":[0,26]}]},{"pos":[14609,14668],"content":"Gets the custom attributes supported by the trace listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the custom attributes supported by the trace listener.","pos":[0,59]}]},{"pos":[14825,15000],"content":"A string array naming the custom attributes supported by the trace listener, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if there are no custom attributes.","needQuote":true,"needEscape":true,"source":"A string array naming the custom attributes supported by the trace listener, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there are no custom attributes."},{"pos":[15567,15633],"content":"Gets a value indicating whether the trace listener is thread safe.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the trace listener is thread safe.","pos":[0,66]}]},{"pos":[15765,16017],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the trace listener is thread safe; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the trace listener is thread safe; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,173],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the trace listener is thread safe; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[174,252],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[16935,17029],"content":"Writes trace information, a data object and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a data object and event information to the listener specific output.","pos":[0,94]}]},{"pos":[17324,17466],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[17529,17634],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[17720,17848],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[17906,17941],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[18002,18025],"content":"The trace data to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"The trace data to emit.","pos":[0,23]}]},{"pos":[18950,19044],"content":"Writes trace information, a data object and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a data object and event information to the listener specific output.","pos":[0,94]}]},{"pos":[19341,19483],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[19546,19651],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[19737,19865],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[19923,19958],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[20021,20057],"content":"An array of objects to emit as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of objects to emit as data.","pos":[0,36]}]},{"pos":[20928,20995],"content":"Writes trace and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace and event information to the listener specific output.","pos":[0,67]}]},{"pos":[21278,21420],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[21483,21588],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[21674,21802],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[21860,21895],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[22816,22907],"content":"Writes trace information, a message, and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a message, and event information to the listener specific output.","pos":[0,91]}]},{"pos":[23206,23348],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[23411,23516],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[23602,23730],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[23788,23823],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[23887,23906],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[24886,24995],"content":"Writes trace information, a formatted array of objects and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a formatted array of objects and event information to the listener specific output.","pos":[0,109]}]},{"pos":[25308,25450],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[25513,25618],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[25704,25832],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace."},{"pos":[25890,25925],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[25988,26093],"content":"A format string that contains zero or more format items, which correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A format string that contains zero or more format items, which correspond to objects in the `args` array."},{"pos":[26156,26272],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing zero or more objects to format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format."},{"pos":[27134,27253],"content":"Writes trace information, a message, a related activity identity and event information to the listener specific output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a message, a related activity identity and event information to the listener specific output.","pos":[0,119]}]},{"pos":[27534,27676],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."},{"pos":[27739,27844],"content":"A name used to identify the output, typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output, typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[27902,27937],"content":"A numeric identifier for the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]},{"pos":[28001,28020],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[28092,28151],"content":"A <xref:System.Guid> object identifying a related activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Guid&gt; object identifying a related activity.","pos":[0,59],"source":"A <xref:System.Guid> object identifying a related activity."}]},{"pos":[28726,28839],"content":"When overridden in a derived class, writes the specified message to the listener you create in the derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, writes the specified message to the listener you create in the derived class.","pos":[0,113]}]},{"pos":[28994,29013],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[29600,29732],"content":"When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.","pos":[0,132]}]},{"pos":[29891,29910],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener\n  id: EventProviderTraceListener\n  children:\n  - System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.Close\n  - System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter\n  - System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.Flush\n  - System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes\n  - System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe\n  - System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)\n  - System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)\n  langs:\n  - csharp\n  name: EventProviderTraceListener\n  nameWithType: EventProviderTraceListener\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener\n  type: Class\n  summary: A listener for <xref href=\"System.Diagnostics.TraceSource\"></xref> that writes events to the ETW subsytem.\n  remarks: \"All event data (trace or debug) from the source event is written to the ETW subsystem as a string. The data elements are delimited using a comma. To specify a different delimiter, use the <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter%2A> property.  \\n  \\n Adding the listener to <xref:System.Diagnostics.TraceSource?displayProperty=fullName> registers the provider with the ETW subsystem. You must create an ETW trace session using the Logman.exe executable program (or something similar) to write the events to a log file.  \\n  \\n You do not need a manifest to consume events from the listener because the event data is a single string.  \\n  \\n When you call the <xref:System.Diagnostics.TraceSource?displayProperty=fullName> methods to write events, you pass a <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration value. The enumeration contains both level and keyword values. When you enable a trace listener provider from an ETW session, the level value that you specify can be the value associated with one of the following <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration values:  \\n  \\n-   Critical (value is 1)  \\n  \\n-   Error (value is 2)  \\n  \\n-   Information (value is 8)  \\n  \\n-   Verbose (value is 16)  \\n  \\n-   Warning (value is 4)  \\n  \\n The keyword value that you specify for the session can be the value associated with one of the following <xref:System.Diagnostics.TraceEventType?displayProperty=fullName> enumeration values:  \\n  \\n-   Resume (value is 2,048)  \\n  \\n-   Start (value is 256)  \\n  \\n-   Stop (value is 512)  \\n  \\n-   Suspend (value is 1,024)  \\n  \\n-   Transfer (value is 4,096)\"\n  example:\n  - \"```  \\nprivate static Guid providerId = new Guid(\\\"{B3F0C8FC-E8A8-4868-8901-1465E8A2F41B}\\\");  \\n  \\n    EventProviderTraceListener listener = new EventProviderTraceListener(providerId.ToString(), \\\"Test Listener\\\", \\\"::\\\");  \\n  \\n    // You should use the All default level and control the level using the  \\n    // ETW session; otherwise, you may not log all the events requested by the  \\n    // session.  \\n    TraceSource source = new TraceSource(\\\"MyProvider\\\", SourceLevels.All);  \\n  \\n    source.Listeners.Add(listener);  \\n  \\n    source.TraceData(TraceEventType.Warning | TraceEventType.Start, 2, new object[] { \\\"abc\\\", \\\"def\\\", true, 123 });  \\n  \\n    source.TraceEvent(TraceEventType.Warning, 12, \\\"Provider guid: {0}\\\", new object[] { providerId });  \\n  \\n    source.TraceInformation(\\\"string {0}, bool {1}, int {2}, ushort {3}\\\", new object[] { \\\"abc\\\", false, 123, (UInt32)5 });  \\n```\"\n  syntax:\n    content: 'public class EventProviderTraceListener : System.Diagnostics.TraceListener'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Diagnostics.TraceListener\n  implements: []\n  inheritedMembers:\n  - System.Diagnostics.TraceListener.Attributes\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  - System.Diagnostics.TraceListener.Fail(System.String)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.Name\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: EventProviderTraceListener(String)\n  nameWithType: EventProviderTraceListener.EventProviderTraceListener(String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.EventProviderTraceListener(String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"></xref> class using the specified provider identifier.\n  syntax:\n    content: public EventProviderTraceListener (string providerId);\n    parameters:\n    - id: providerId\n      type: System.String\n      description: A unique string <xref:System.Guid> that identifies the provider.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: EventProviderTraceListener(String,String)\n  nameWithType: EventProviderTraceListener.EventProviderTraceListener(String,String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.EventProviderTraceListener(String,String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"></xref> class using the specified provider identifier and name of the listener.\n  syntax:\n    content: public EventProviderTraceListener (string providerId, string name);\n    parameters:\n    - id: providerId\n      type: System.String\n      description: A unique string <xref:System.Guid> that identifies the provider.\n    - id: name\n      type: System.String\n      description: Name of the listener.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)\n  id: '#ctor(System.String,System.String,System.String)'\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: EventProviderTraceListener(String,String,String)\n  nameWithType: EventProviderTraceListener.EventProviderTraceListener(String,String,String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.EventProviderTraceListener(String,String,String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.EventProviderTraceListener\"></xref> class using the specified provider identifier, name of the listener, and delimiter.\n  remarks: '-'\n  syntax:\n    content: public EventProviderTraceListener (string providerId, string name, string delimiter);\n    parameters:\n    - id: providerId\n      type: System.String\n      description: A unique string <xref:System.Guid> that identifies the provider.\n    - id: name\n      type: System.String\n      description: Name of the listener.\n    - id: delimiter\n      type: System.String\n      description: Delimiter used to delimit the event data. (For more details, see the <xref:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter*> property.)\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Close\n  id: Close\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: EventProviderTraceListener.Close()\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Close()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Closes the output stream so it no longer receives tracing or debugging output.\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter\n  id: Delimiter\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: Delimiter\n  nameWithType: EventProviderTraceListener.Delimiter\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Gets and sets the delimiter used to delimit the event data that is written to the ETW subsystem.\n  remarks: \"The listener converts the data elements to strings and then concatenates the strings together, using the specified delimiter to delimit each data element in the string. The string is then written as the event data in the ETW subsystem.  \\n  \\n To successfully parse the string, the consumer must know the delimiter that was used.  \\n  \\n If the data contains a string that may contain a comma, specify an appropriate delimiter, so that the event data can be correctly parsed.  \\n  \\n You do not need a manifest to consume events from the listener because the event data is a single string.  \\n  \\n The delimiter applies to event data written using the <xref:System.Diagnostics.TraceSource.TraceData%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public string Delimiter { get; set; }\n    return:\n      type: System.String\n      description: The delimiter used to delimit the event data. The default delimiter is a comma.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)\n  id: Fail(System.String,System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: Fail(String,String)\n  nameWithType: EventProviderTraceListener.Fail(String,String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Fail(String,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Emits an error message and a detailed error message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\"></xref> class.\n  syntax:\n    content: public override void Fail (string message, string detailMessage);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to emit.\n    - id: detailMessage\n      type: System.String\n      description: A detailed message to emit.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.Fail*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Flush\n  id: Flush\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: EventProviderTraceListener.Flush()\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Flush()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Flushes the output buffer.\n  syntax:\n    content: public override sealed void Flush ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes\n  id: GetSupportedAttributes\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: GetSupportedAttributes()\n  nameWithType: EventProviderTraceListener.GetSupportedAttributes()\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Gets the custom attributes supported by the trace listener.\n  syntax:\n    content: protected override string[] GetSupportedAttributes ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: A string array naming the custom attributes supported by the trace listener, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there are no custom attributes.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe\n  id: IsThreadSafe\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: IsThreadSafe\n  nameWithType: EventProviderTraceListener.IsThreadSafe\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Gets a value indicating whether the trace listener is thread safe.\n  syntax:\n    content: public override sealed bool IsThreadSafe { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the trace listener is thread safe; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  nameWithType: EventProviderTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes trace information, a data object and event information to the listener specific output.\n  syntax:\n    content: public override sealed void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object\n      description: The trace data to emit.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  nameWithType: EventProviderTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes trace information, a data object and event information to the listener specific output.\n  syntax:\n    content: public override sealed void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object[]\n      description: An array of objects to emit as data.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  nameWithType: EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes trace and event information to the listener specific output.\n  syntax:\n    content: public override sealed void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  nameWithType: EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes trace information, a message, and event information to the listener specific output.\n  syntax:\n    content: public override sealed void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  nameWithType: EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes trace information, a formatted array of objects and event information to the listener specific output.\n  syntax:\n    content: public override sealed void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> values specifying the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items, which correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  nameWithType: EventProviderTraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: Writes trace information, a message, a related activity identity and event information to the listener specific output.\n  syntax:\n    content: public override sealed void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output, typically the name of the application that generated the trace event.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: A message to write.\n    - id: relatedActivityId\n      type: System.Guid\n      description: A <xref:System.Guid> object identifying a related activity.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: EventProviderTraceListener.Write(String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Write(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: When overridden in a derived class, writes the specified message to the listener you create in the derived class.\n  syntax:\n    content: public override sealed void Write (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: EventProviderTraceListener.WriteLine(String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing\n  summary: When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.\n  syntax:\n    content: public override sealed void WriteLine (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Diagnostics.TraceListener\n  isExternal: false\n  name: System.Diagnostics.TraceListener\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: EventProviderTraceListener(String)\n  nameWithType: EventProviderTraceListener.EventProviderTraceListener(String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.EventProviderTraceListener(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: EventProviderTraceListener(String,String)\n  nameWithType: EventProviderTraceListener.EventProviderTraceListener(String,String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.EventProviderTraceListener(String,String)\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: EventProviderTraceListener(String,String,String)\n  nameWithType: EventProviderTraceListener.EventProviderTraceListener(String,String,String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.EventProviderTraceListener(String,String,String)\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Close\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Close()\n  nameWithType: EventProviderTraceListener.Close()\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Close()\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Delimiter\n  nameWithType: EventProviderTraceListener.Delimiter\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Fail(String,String)\n  nameWithType: EventProviderTraceListener.Fail(String,String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Fail(String,String)\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Flush\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Flush()\n  nameWithType: EventProviderTraceListener.Flush()\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Flush()\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: GetSupportedAttributes()\n  nameWithType: EventProviderTraceListener.GetSupportedAttributes()\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes()\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: IsThreadSafe\n  nameWithType: EventProviderTraceListener.IsThreadSafe\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  nameWithType: EventProviderTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  nameWithType: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  nameWithType: EventProviderTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  nameWithType: EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  nameWithType: EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  nameWithType: EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  nameWithType: EventProviderTraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Write(String)\n  nameWithType: EventProviderTraceListener.Write(String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.Write(String)\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: EventProviderTraceListener.WriteLine(String)\n  fullName: System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(String)\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.#ctor*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: EventProviderTraceListener\n  nameWithType: EventProviderTraceListener.EventProviderTraceListener\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Close*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Close\n  nameWithType: EventProviderTraceListener.Close\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Delimiter\n  nameWithType: EventProviderTraceListener.Delimiter\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Fail*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Fail\n  nameWithType: EventProviderTraceListener.Fail\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Flush*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Flush\n  nameWithType: EventProviderTraceListener.Flush\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: GetSupportedAttributes\n  nameWithType: EventProviderTraceListener.GetSupportedAttributes\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: IsThreadSafe\n  nameWithType: EventProviderTraceListener.IsThreadSafe\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceData*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceData\n  nameWithType: EventProviderTraceListener.TraceData\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceEvent\n  nameWithType: EventProviderTraceListener.TraceEvent\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: TraceTransfer\n  nameWithType: EventProviderTraceListener.TraceTransfer\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.Write*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: Write\n  nameWithType: EventProviderTraceListener.Write\n- uid: System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine*\n  parent: System.Diagnostics.Eventing.EventProviderTraceListener\n  isExternal: false\n  name: WriteLine\n  nameWithType: EventProviderTraceListener.WriteLine\n"}