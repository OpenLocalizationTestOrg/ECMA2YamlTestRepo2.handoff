{"nodes":[{"pos":[2501,2655],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Conversion\" name=\"Conversion\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> module contains the procedures used to perform various conversion operations.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_Conversion\" name=\"Conversion\" href=\"\"></xref> module contains the procedures used to perform various conversion operations."},{"pos":[2667,2866],"content":"This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.","pos":[0,199]}]},{"pos":[3737,3778],"content":"Converts an object to the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts an object to the specified type.","pos":[0,41]}]},{"pos":[3791,4667],"content":"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.       The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`CTypeDynamic`</ph> method converts the object passed as the <ph id=\"ph2\">`Expression`</ph> parameter to the type specified by the <ph id=\"ph3\">`TargetType`</ph> parameter.","pos":[0,135],"source":"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter."},{"content":"If the object is a dynamic object, the <ph id=\"ph1\">`CTypeDynamic`</ph> method applies available dynamic conversions.","pos":[136,235],"source":" If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions."},{"content":"The <ph id=\"ph1\">`CTypeDynamic`</ph> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.","pos":[242,369],"source":"       The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself."},{"content":"If a dynamic object inherits from &lt;xref:System.Dynamic.DynamicObject&gt;, the <ph id=\"ph1\">`CTypeDynamic`</ph> method first attempts to perform the conversion by using a user-defined, static conversion.","pos":[370,551],"source":" If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion."},{"content":"If the user-defined, static conversion fails, the <ph id=\"ph1\">`CTypeDynamic`</ph> method attempts to perform the conversion by using dynamic conversions.","pos":[552,688],"source":" If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions."},{"content":"If a dynamic object implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;, the <ph id=\"ph1\">`CTypeDynamic`</ph> method gives precedence to dynamic conversions over user-defined, static conversions.","pos":[689,874],"source":" If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions."}]},{"pos":[5712,5734],"content":"The object to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to convert.","pos":[0,22]}]},{"pos":[5799,5839],"content":"The type to which to convert the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type to which to convert the object.","pos":[0,40]}]},{"pos":[5897,5959],"content":"An object whose type at run time is the requested target type.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object whose type at run time is the requested target type.","pos":[0,62]}]},{"pos":[6639,6651],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6706,6718],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7196,7263],"content":"Returns the error message that corresponds to a given error number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the error message that corresponds to a given error number.","pos":[0,67]}]},{"pos":[7276,7705],"content":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If no run-time error has occurred, `ErrorToString` returns a zero-length string (\"\").       In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`ErrorToString`</ph> function examines the property settings of the <ph id=\"ph2\">`Err`</ph> object to identify the most recent run-time error.","pos":[0,123],"source":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error."},{"content":"The return value of the <ph id=\"ph1\">`ErrorToString`</ph> function corresponds to the <ph id=\"ph2\">`Description`</ph> property of the <ph id=\"ph3\">`Err`</ph> object.","pos":[124,235],"source":" The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object."},{"content":"If no run-time error has occurred, <ph id=\"ph1\">`ErrorToString`</ph> returns a zero-length string (\"\").","pos":[236,321],"source":" If no run-time error has occurred, `ErrorToString` returns a zero-length string (\"\")."},{"content":"In Visual Basic version 6.0 and earlier, this functionality was provided by the <ph id=\"ph1\">`Error`</ph> function.","pos":[328,425],"source":"       In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function."}]},{"pos":[8088,8157],"content":"The error message that corresponds to the most recent run-time error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The error message that corresponds to the most recent run-time error.","pos":[0,69]}]},{"pos":[8326,8367],"content":"<ph id=\"ph1\">&lt;code&gt;ErrorNumber&lt;/code&gt;</ph> is out of range.","needQuote":true,"needEscape":true,"source":"<code>ErrorNumber</code> is out of range."},{"pos":[8800,8867],"content":"Returns the error message that corresponds to a given error number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the error message that corresponds to a given error number.","pos":[0,67]}]},{"pos":[8880,9628],"content":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `\"Application-defined or object-defined error.\"` If `ErrorNumber` is not valid, an error occurs. If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned. If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string (\"\").       In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`ErrorToString`</ph> function examines the property settings of the <ph id=\"ph2\">`Err`</ph> object to identify the most recent run-time error.","pos":[0,123],"source":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error."},{"content":"The return value of the <ph id=\"ph1\">`ErrorToString`</ph> function corresponds to the <ph id=\"ph2\">`Description`</ph> property of the <ph id=\"ph3\">`Err`</ph> object.","pos":[124,235],"source":" The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object."},{"content":"If <ph id=\"ph1\">`ErrorNumber`</ph> is a valid error number but is not defined, <ph id=\"ph2\">`ErrorToString`</ph> returns the string <ph id=\"ph3\">`\"Application-defined or object-defined error.\"`</ph> If <ph id=\"ph4\">`ErrorNumber`</ph> is not valid, an error occurs.","pos":[236,428],"source":" If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `\"Application-defined or object-defined error.\"` If `ErrorNumber` is not valid, an error occurs."},{"content":"If <ph id=\"ph1\">`ErrorNumber`</ph> is omitted, the message corresponding to the most recent run-time error is returned.","pos":[429,530],"source":" If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned."},{"content":"If no run-time error has occurred or <ph id=\"ph1\">`ErrorNumber`</ph> is 0, <ph id=\"ph2\">`ErrorToString`</ph> returns a zero-length string (\"\").","pos":[531,638],"source":" If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string (\"\")."},{"content":"In Visual Basic version 6.0 and earlier, this functionality was provided by the <ph id=\"ph1\">`Error`</ph> function.","pos":[645,742],"source":"       In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function."}]},{"pos":[10034,10067],"content":"Optional. Any valid error number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Optional. Any valid error number.","pos":[0,33],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Any valid error number.","pos":[10,33]}]}]},{"pos":[10125,10184],"content":"The error message that corresponds to a given error number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The error message that corresponds to a given error number.","pos":[0,59]}]},{"pos":[10353,10394],"content":"<ph id=\"ph1\">&lt;code&gt;ErrorNumber&lt;/code&gt;</ph> is out of range.","needQuote":true,"needEscape":true,"source":"<code>ErrorNumber</code> is out of range."},{"pos":[10787,10826],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[10839,11344],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[12797,13090],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[13149,13188],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[13355,13379],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[13474,13503],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[13891,13930],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[13943,14448],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[15898,16191],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[16249,16288],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[16455,16479],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[16574,16603],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[16986,17025],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[17038,17543],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[18993,19286],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[19343,19382],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[19549,19573],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[19668,19697],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[20080,20119],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[20132,20637],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[22080,22373],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[22430,22469],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[22636,22660],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[22755,22784],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[23167,23206],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[23219,23724],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[25169,25462],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[25519,25558],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[25725,25749],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[25844,25873],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[26261,26300],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[26313,26818],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[28271,28564],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[28622,28661],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[28828,28852],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[28947,28976],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[29364,29403],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[29416,29921],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[31369,31662],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[31720,31759],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[31926,31950],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[32045,32074],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[32452,32516],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[32529,32943],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[33286,33404],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[33462,33526],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[33693,33730],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[33825,33867],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[34250,34314],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[34327,34741],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[35086,35204],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[35262,35326],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[35493,35530],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[35625,35667],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[36050,36114],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[36127,36541],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[36884,37002],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[37060,37124],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[37291,37328],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[37423,37465],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[37848,37912],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[37925,38339],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[38682,38800],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[38858,38922],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[39089,39126],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[39221,39263],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[39651,39715],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[39728,40142],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[40488,40606],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[40664,40728],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[40895,40932],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[41027,41069],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[41452,41516],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[41529,41943],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[42287,42405],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[42463,42527],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[42694,42731],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[42826,42868],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[43256,43320],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[43333,43747],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[44094,44212],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[44270,44334],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[44501,44538],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[44633,44675],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[45063,45127],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[45140,45554],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[45899,46017],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[46075,46139],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[46306,46343],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[46438,46480],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[46868,46932],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[46945,47359],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If <ph id=\"ph1\">`Number`</ph> is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph2\">`&amp;H`</ph>.","pos":[114,339],"source":"      |||   |-|-|   |If `Number` is|Hex returns|   |Empty|Zero (0)|   |Any numeric value|Up to sixteen hexadecimal characters|       You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[340,406],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]},{"pos":[47705,47823],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[47881,47945],"content":"Returns a string representing the hexadecimal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]},{"pos":[48112,48149],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[48244,48286],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[48679,48718],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[48731,49236],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[50689,50982],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[51041,51080],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[51247,51271],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[51366,51395],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[51783,51822],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[51835,52340],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[53793,54086],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[54144,54183],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[54350,54374],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[54469,54498],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[54881,54920],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[54933,55438],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[56888,57181],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[57238,57277],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[57444,57468],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[57563,57592],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[57975,58014],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[58027,58532],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[59978,60271],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[60328,60367],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[60534,60558],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[60653,60682],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[61065,61104],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[61117,61622],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[63070,63363],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[63420,63459],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[63626,63650],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[63745,63774],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[64162,64201],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[64214,64719],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[66172,66465],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[66523,66562],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[66729,66753],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[66848,66877],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[67265,67304],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[67317,67822],"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.       `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","pos":[0,113],"source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[120,358],"source":"       The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[359,429],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."},{"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","pos":[436,501],"source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}]},{"pos":[69270,69563],"content":"Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or any valid numeric expression.","pos":[10,124],"source":" A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression."},{"content":"If <ph id=\"ph1\">`Number`</ph> contains <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[125,293],"source":" If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned."}]},{"pos":[69621,69660],"content":"Return the integer portion of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]},{"pos":[69827,69851],"content":"Number is not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not specified.","pos":[0,24]}]},{"pos":[69946,69975],"content":"Number is not a numeric type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]},{"pos":[70353,70411],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[70424,70808],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[71145,71263],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[71321,71379],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[71546,71583],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[71678,71720],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[72103,72161],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[72174,72558],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[72897,73015],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[73073,73131],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[73298,73335],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[73430,73472],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[73855,73913],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[73926,74310],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[74646,74764],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[74822,74880],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[75047,75084],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[75179,75221],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[75604,75662],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[75675,76059],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[76397,76515],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[76573,76631],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[76798,76835],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[76930,76972],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[77360,77418],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[77431,77815],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[78156,78274],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[78332,78390],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[78557,78594],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[78689,78731],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[79114,79172],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[79185,79569],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[79907,80025],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[80083,80141],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[80308,80345],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[80440,80482],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[80870,80928],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[80941,81325],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[81665,81783],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[81841,81899],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[82066,82103],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[82198,82240],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[82628,82686],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[82699,83083],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[83422,83540],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[83598,83656],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[83823,83860],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[83955,83997],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[84385,84443],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[84456,84840],"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","pos":[0,108],"source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"content":"|||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[114,319],"source":"      |||   |-|-|   |If Number is|Oct returns|   |Empty|Zero (0)|   |Any other number|Up to 22 octal characters|       You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[320,376],"source":" For example, `&O10` is the octal notation for decimal 8."}]},{"pos":[85180,85298],"content":"Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression.","pos":[10,118],"source":" Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression."}]},{"pos":[85356,85414],"content":"Returns a string representing the octal value of a number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]},{"pos":[85581,85618],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[85713,85755],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[86143,86245],"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representation of a number.","needQuote":true,"needEscape":true,"source":"Returns a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> representation of a number."},{"pos":[86258,87267],"content":"When numbers are converted to strings, a leading space is always reserved for the sign of `Number`. If `Number` is positive, the returned string contains a leading space, and the plus sign is implied. A negative number will include the minus sign (-) and no leading space.       Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats. Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.      > [!NOTE] >  The `Str` function recognizes only the period (`.`) as a valid decimal separator. If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When numbers are converted to strings, a leading space is always reserved for the sign of <ph id=\"ph1\">`Number`</ph>.","pos":[0,99],"source":"When numbers are converted to strings, a leading space is always reserved for the sign of `Number`."},{"content":"If <ph id=\"ph1\">`Number`</ph> is positive, the returned string contains a leading space, and the plus sign is implied.","pos":[100,200],"source":" If `Number` is positive, the returned string contains a leading space, and the plus sign is implied."},{"content":"A negative number will include the minus sign (-) and no leading space.","pos":[201,272]},{"content":"Use the <ph id=\"ph1\">`Format`</ph> function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.","pos":[279,412],"source":"       Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats."},{"content":"Unlike the <ph id=\"ph1\">`Str`</ph> function, the <ph id=\"ph2\">`Format`</ph> function does not include a leading space for the sign of <ph id=\"ph3\">`Number`</ph>.","pos":[413,520],"source":" Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`Str`</ph> function recognizes only the period (<ph id=\"ph3\">`.`</ph>) as a valid decimal separator.","pos":[526,620],"source":"      > [!NOTE] >  The `Str` function recognizes only the period (`.`) as a valid decimal separator."},{"content":"If different decimal separators are used (for example, in international applications), use the <ph id=\"ph1\">`CStr`</ph> or <ph id=\"ph2\">`Format`</ph> functions to convert a number to a string.","pos":[621,777],"source":" If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string."},{"content":"To get the string representation of a number in a particular culture, use the number's <ph id=\"ph1\">`ToString(IFormatProvider)`</ph> method.","pos":[778,900],"source":" To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method."},{"content":"For example, use &lt;xref:System.Double.ToString%2A&gt; when converting a value of type <ph id=\"ph1\">`Double`</ph> to a string.","pos":[901,1004],"source":" For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string."}]},{"pos":[87714,87832],"content":"Required. An <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> containing any valid numeric expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing any valid numeric expression.","pos":[10,118],"source":" An <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> containing any valid numeric expression."}]},{"pos":[87890,87992],"content":"Returns a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representation of a number.","needQuote":true,"needEscape":true,"source":"Returns a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> representation of a number."},{"pos":[88159,88196],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not specified."},{"pos":[88297,88339],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","needQuote":true,"needEscape":true,"source":"<code>Number</code> is not a numeric type."},{"pos":[88717,88798],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]},{"pos":[88811,90571],"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are stripped from the argument.       The following call returns the value 1615198.      ```      Val(\" 1615 198th Street N.E.\")    ```       The following call returns the decimal value -1.      ```      Val(\"&HFFFF\")    ```      > [!NOTE] >  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.      > [!NOTE] >  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.   >    >  `' These examples cause run-time errors.`   >    >  `'Console.WriteLine(Val(\"1.34%\"))`   >    >  `'Console.WriteLine(Val(\"1.34&\"))`   >    >  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.   >    >  `' These examples cause compiler errors.`   >    >  `'Dim m = 1.34%`   >    >  `'Dim n = 1.34&`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.","pos":[0,107],"source":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number."},{"content":"Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.","pos":[108,234]},{"content":"However, the function recognizes the radix prefixes <ph id=\"ph1\">`&amp;O`</ph> (for octal) and <ph id=\"ph2\">`&amp;H`</ph> (for hexadecimal).","pos":[235,331],"source":" However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal)."},{"content":"Blanks, tabs, and linefeed characters are stripped from the argument.","pos":[332,401]},{"content":"The following call returns the value 1615198.","pos":[408,453]},{"content":"<ph id=\"ph1\">```      Val(\" 1615 198th Street N.E.\")    ```</ph>       The following call returns the decimal value -1.","pos":[459,560],"source":"```      Val(\" 1615 198th Street N.E.\")    ```       The following call returns the decimal value -1."},{"content":"<ph id=\"ph1\">```      Val(\"&amp;HFFFF\")    ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  The <ph id=\"ph4\">`Val`</ph> function recognizes only the period (<ph id=\"ph5\">`.`</ph>) as a valid decimal separator.","pos":[566,695],"source":"```      Val(\"&HFFFF\")    ```      > [!NOTE] >  The `Val` function recognizes only the period (`.`) as a valid decimal separator."},{"content":"When different decimal separators are used, as in international applications, use <ph id=\"ph1\">`CDbl`</ph> or <ph id=\"ph2\">`CInt`</ph> instead to convert a string to a number.","pos":[696,835],"source":" When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number."},{"content":"To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id=\"ph1\">`Parse(String, IFormatProvider)`</ph> method.","pos":[836,992],"source":" To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method."},{"content":"For example, use &lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt; when converting a string to a <ph id=\"ph1\">`Double`</ph>.","pos":[993,1104],"source":" For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidCastException&gt; exception might be raised in response to certain uncommon number formats.","pos":[1110,1234],"source":"      > [!NOTE] >  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats."},{"content":"For example, the following code raises this exception.","pos":[1235,1289]},{"content":"&gt;    &gt;  <ph id=\"ph1\">`' These examples cause run-time errors.`</ph>   &gt;    &gt;  <ph id=\"ph2\">`'Console.WriteLine(Val(\"1.34%\"))`</ph>   &gt;    &gt;  <ph id=\"ph3\">`'Console.WriteLine(Val(\"1.34&amp;\"))`</ph>   &gt;    &gt;  The conflict between the number formatted as a <ph id=\"ph4\">`Double`</ph> and the <ph id=\"ph5\">`Integer`</ph> and <ph id=\"ph6\">`Long`</ph> type characters would be caught by the compiler if it were not contained in a string.","pos":[1292,1612],"source":"   >    >  `' These examples cause run-time errors.`   >    >  `'Console.WriteLine(Val(\"1.34%\"))`   >    >  `'Console.WriteLine(Val(\"1.34&\"))`   >    >  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string."},{"content":"&gt;    &gt;  <ph id=\"ph1\">`' These examples cause compiler errors.`</ph>   &gt;    &gt;  <ph id=\"ph2\">`'Dim m = 1.34%`</ph>   &gt;    &gt;  <ph id=\"ph3\">`'Dim n = 1.34&amp;`</ph>","pos":[1615,1718],"source":"   >    >  `' These examples cause compiler errors.`   >    >  `'Dim m = 1.34%`   >    >  `'Dim n = 1.34&`"}]},{"pos":[91080,91565],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> variable, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> value.","pos":[10,242],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, its value must be convertible to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or an &lt;xref:System.ArgumentException&gt; error occurs.","pos":[243,485],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs."}]},{"pos":[91622,91703],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]},{"pos":[91862,91897],"content":"<ph id=\"ph1\">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.","needQuote":true,"needEscape":true,"source":"<code>InputStr</code> is too large."},{"pos":[91992,92195],"content":"<ph id=\"ph1\">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type expression that is not convertible to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Expression</code> is an <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> type expression that is not convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>."},{"pos":[92583,92664],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]},{"pos":[92677,94441],"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.       The following call returns the value 1234123.      ```      Val(\" 1234 123th Street N.E.\")    ```       The following call returns the decimal value -1.      ```      Val(\"&HFFFF\")    ```      > [!NOTE] >  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.      > [!NOTE] >  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.   >    >  `' These examples cause run-time errors.`   >    >  `'Console.WriteLine(Val(\"1.34%\"))`   >    >  `'Console.WriteLine(Val(\"1.34&\"))`   >    >  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.   >    >  `' These examples cause compiler errors.`   >    >  `'Dim m = 1.34%`   >    >  `'Dim n = 1.34&`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.","pos":[0,107],"source":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number."},{"content":"Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.","pos":[108,234]},{"content":"However, the function recognizes the radix prefixes <ph id=\"ph1\">`&amp;O`</ph> (for octal) and <ph id=\"ph2\">`&amp;H`</ph> (for hexadecimal).","pos":[235,331],"source":" However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal)."},{"content":"Blanks, tabs, and linefeed characters are removed from the argument.","pos":[332,400]},{"content":"The following call returns the value 1234123.","pos":[407,452]},{"content":"<ph id=\"ph1\">```      Val(\" 1234 123th Street N.E.\")    ```</ph>       The following call returns the decimal value -1.","pos":[458,559],"source":"```      Val(\" 1234 123th Street N.E.\")    ```       The following call returns the decimal value -1."},{"content":"<ph id=\"ph1\">```      Val(\"&amp;HFFFF\")    ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  The <ph id=\"ph4\">`Val`</ph> function recognizes only the period (<ph id=\"ph5\">`.`</ph>) as a valid decimal separator.","pos":[565,694],"source":"```      Val(\"&HFFFF\")    ```      > [!NOTE] >  The `Val` function recognizes only the period (`.`) as a valid decimal separator."},{"content":"When other decimal separators are used, as in international applications, use <ph id=\"ph1\">`CDbl`</ph> or <ph id=\"ph2\">`CInt`</ph> instead to convert a string to a number.","pos":[695,830],"source":" When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number."},{"content":"To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id=\"ph1\">`Parse(String, IFormatProvider)`</ph> method.","pos":[831,987],"source":" To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method."},{"content":"For example, use &lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt; when converting a string to a <ph id=\"ph1\">`Double`</ph>.","pos":[988,1099],"source":" For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidCastException&gt; exception might be raised in response to certain uncommon number formats.","pos":[1105,1229],"source":"      > [!NOTE] >  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats."},{"content":"For example, the following code raises this exception.","pos":[1230,1284]},{"content":"&gt;    &gt;  <ph id=\"ph1\">`' These examples cause run-time errors.`</ph>   &gt;    &gt;  <ph id=\"ph2\">`'Console.WriteLine(Val(\"1.34%\"))`</ph>   &gt;    &gt;  <ph id=\"ph3\">`'Console.WriteLine(Val(\"1.34&amp;\"))`</ph>   &gt;    &gt;  The conflict between the number formatted as a <ph id=\"ph4\">`Double`</ph> and the <ph id=\"ph5\">`Integer`</ph> and <ph id=\"ph6\">`Long`</ph> type characters would be caught by the compiler if the conflict were not contained in strings.","pos":[1287,1616],"source":"   >    >  `' These examples cause run-time errors.`   >    >  `'Console.WriteLine(Val(\"1.34%\"))`   >    >  `'Console.WriteLine(Val(\"1.34&\"))`   >    >  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings."},{"content":"&gt;    &gt;  <ph id=\"ph1\">`' These examples cause compiler errors.`</ph>   &gt;    &gt;  <ph id=\"ph2\">`'Dim m = 1.34%`</ph>   &gt;    &gt;  <ph id=\"ph3\">`'Dim n = 1.34&amp;`</ph>","pos":[1619,1722],"source":"   >    >  `' These examples cause compiler errors.`   >    >  `'Dim m = 1.34%`   >    >  `'Dim n = 1.34&`"}]},{"pos":[94957,95442],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> variable, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> value.","pos":[10,242],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, its value must be convertible to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or an &lt;xref:System.ArgumentException&gt; error occurs.","pos":[243,485],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs."}]},{"pos":[95500,95581],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]},{"pos":[95740,95775],"content":"<ph id=\"ph1\">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.","needQuote":true,"needEscape":true,"source":"<code>InputStr</code> is too large."},{"pos":[95870,96073],"content":"<ph id=\"ph1\">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type expression that is not convertible to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Expression</code> is an <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> type expression that is not convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>."},{"pos":[96461,96542],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]},{"pos":[96555,98319],"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.       The following call returns the value 1234123.      ```      Val(\" 1234 123th Street N.E.\")    ```       The following call returns the decimal value -1.      ```      Val(\"&HFFFF\")    ```      > [!NOTE] >  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.      > [!NOTE] >  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.   >    >  `' These examples cause run-time errors.`   >    >  `'Console.WriteLine(Val(\"1.34%\"))`   >    >  `'Console.WriteLine(Val(\"1.34&\"))`   >    >  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.   >    >  `' These examples cause compiler errors.`   >    >  `'Dim m = 1.34%`   >    >  `'Dim n = 1.34&`","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.","pos":[0,107],"source":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number."},{"content":"Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.","pos":[108,234]},{"content":"However, the function recognizes the radix prefixes <ph id=\"ph1\">`&amp;O`</ph> (for octal) and <ph id=\"ph2\">`&amp;H`</ph> (for hexadecimal).","pos":[235,331],"source":" However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal)."},{"content":"Blanks, tabs, and linefeed characters are removed from the argument.","pos":[332,400]},{"content":"The following call returns the value 1234123.","pos":[407,452]},{"content":"<ph id=\"ph1\">```      Val(\" 1234 123th Street N.E.\")    ```</ph>       The following call returns the decimal value -1.","pos":[458,559],"source":"```      Val(\" 1234 123th Street N.E.\")    ```       The following call returns the decimal value -1."},{"content":"<ph id=\"ph1\">```      Val(\"&amp;HFFFF\")    ```</ph><ph id=\"ph2\">      &gt; </ph><ph id=\"ph3\">[!NOTE]</ph> &gt;  The <ph id=\"ph4\">`Val`</ph> function recognizes only the period (<ph id=\"ph5\">`.`</ph>) as a valid decimal separator.","pos":[565,694],"source":"```      Val(\"&HFFFF\")    ```      > [!NOTE] >  The `Val` function recognizes only the period (`.`) as a valid decimal separator."},{"content":"When other decimal separators are used, as in international applications, use <ph id=\"ph1\">`CDbl`</ph> or <ph id=\"ph2\">`CInt`</ph> instead to convert a string to a number.","pos":[695,830],"source":" When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number."},{"content":"To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id=\"ph1\">`Parse(String, IFormatProvider)`</ph> method.","pos":[831,987],"source":" To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method."},{"content":"For example, use &lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt; when converting a string to a <ph id=\"ph1\">`Double`</ph>.","pos":[988,1099],"source":" For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidCastException&gt; exception might be raised in response to certain uncommon number formats.","pos":[1105,1229],"source":"      > [!NOTE] >  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats."},{"content":"For example, the following code raises this exception.","pos":[1230,1284]},{"content":"&gt;    &gt;  <ph id=\"ph1\">`' These examples cause run-time errors.`</ph>   &gt;    &gt;  <ph id=\"ph2\">`'Console.WriteLine(Val(\"1.34%\"))`</ph>   &gt;    &gt;  <ph id=\"ph3\">`'Console.WriteLine(Val(\"1.34&amp;\"))`</ph>   &gt;    &gt;  The conflict between the number formatted as a <ph id=\"ph4\">`Double`</ph> and the <ph id=\"ph5\">`Integer`</ph> and <ph id=\"ph6\">`Long`</ph> type characters would be caught by the compiler if the conflict were not contained in strings.","pos":[1287,1616],"source":"   >    >  `' These examples cause run-time errors.`   >    >  `'Console.WriteLine(Val(\"1.34%\"))`   >    >  `'Console.WriteLine(Val(\"1.34&\"))`   >    >  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings."},{"content":"&gt;    &gt;  <ph id=\"ph1\">`' These examples cause compiler errors.`</ph>   &gt;    &gt;  <ph id=\"ph2\">`'Dim m = 1.34%`</ph>   &gt;    &gt;  <ph id=\"ph3\">`'Dim n = 1.34&amp;`</ph>","pos":[1619,1722],"source":"   >    >  `' These examples cause compiler errors.`   >    >  `'Dim m = 1.34%`   >    >  `'Dim n = 1.34&`"}]},{"pos":[98832,99317],"content":"Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> expression, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> variable, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> value.","pos":[10,242],"source":" Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value."},{"content":"If <ph id=\"ph1\">`Expression`</ph> is of type <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, its value must be convertible to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or an &lt;xref:System.ArgumentException&gt; error occurs.","pos":[243,485],"source":" If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs."}]},{"pos":[99375,99456],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]},{"pos":[99615,99650],"content":"<ph id=\"ph1\">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.","needQuote":true,"needEscape":true,"source":"<code>InputStr</code> is too large."},{"pos":[99745,99948],"content":"<ph id=\"ph1\">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type expression that is not convertible to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Expression</code> is an <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> type expression that is not convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Conversion\n  id: Conversion\n  children:\n  - Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)\n  - Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)\n  - Microsoft.VisualBasic.Conversion.ErrorToString\n  - Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Decimal)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Double)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Int16)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Int64)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Object)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Single)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Byte)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Int16)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Int64)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Object)\n  - Microsoft.VisualBasic.Conversion.Hex(System.SByte)\n  - Microsoft.VisualBasic.Conversion.Hex(System.UInt16)\n  - Microsoft.VisualBasic.Conversion.Hex(System.UInt32)\n  - Microsoft.VisualBasic.Conversion.Hex(System.UInt64)\n  - Microsoft.VisualBasic.Conversion.Int(System.Decimal)\n  - Microsoft.VisualBasic.Conversion.Int(System.Double)\n  - Microsoft.VisualBasic.Conversion.Int(System.Int16)\n  - Microsoft.VisualBasic.Conversion.Int(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Int(System.Int64)\n  - Microsoft.VisualBasic.Conversion.Int(System.Object)\n  - Microsoft.VisualBasic.Conversion.Int(System.Single)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Byte)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Int16)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Int64)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Object)\n  - Microsoft.VisualBasic.Conversion.Oct(System.SByte)\n  - Microsoft.VisualBasic.Conversion.Oct(System.UInt16)\n  - Microsoft.VisualBasic.Conversion.Oct(System.UInt32)\n  - Microsoft.VisualBasic.Conversion.Oct(System.UInt64)\n  - Microsoft.VisualBasic.Conversion.Str(System.Object)\n  - Microsoft.VisualBasic.Conversion.Val(System.Char)\n  - Microsoft.VisualBasic.Conversion.Val(System.Object)\n  - Microsoft.VisualBasic.Conversion.Val(System.String)\n  langs:\n  - csharp\n  name: Conversion\n  nameWithType: Conversion\n  fullName: Microsoft.VisualBasic.Conversion\n  type: Class\n  summary: The <xref uid=\"langword_csharp_Conversion\" name=\"Conversion\" href=\"\"></xref> module contains the procedures used to perform various conversion operations.\n  remarks: This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._0_1.vb)]\"\n  syntax:\n    content: >-\n      [Microsoft.VisualBasic.CompilerServices.StandardModule]\n\n      public sealed class Conversion\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)\n  id: CTypeDynamic(System.Object,System.Type)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: CTypeDynamic(Object,Type)\n  nameWithType: Conversion.CTypeDynamic(Object,Type)\n  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Converts an object to the specified type.\n  remarks: \"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.  \\n  \\n The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.\"\n  example:\n  - \"The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  \\n  \\n```vb#  \\nImports System.Dynamic  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim dyn As Object = New SampleDynamicObject  \\n        Dim sampleString = CTypeDynamic(dyn, GetType(String))  \\n        Console.WriteLine(sampleString)  \\n    End Sub  \\nEnd Module  \\n  \\nClass SampleDynamicObject  \\n    Inherits DynamicObject  \\n  \\n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \\n                                         ByRef result As Object) As Boolean  \\n  \\n        If binder.Type = GetType(String) Then  \\n            result = \\\"Sample String\\\"  \\n            Return True  \\n        End If  \\n  \\n        Return False  \\n    End Function  \\nEnd Class  \\n```\"\n  syntax:\n    content: public static object CTypeDynamic (object Expression, Type TargetType);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: The object to convert.\n    - id: TargetType\n      type: System.Type\n      description: The type to which to convert the object.\n    return:\n      type: System.Object\n      description: An object whose type at run time is the requested target type.\n  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)\n  id: CTypeDynamic``1(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: CTypeDynamic(Object)\n  nameWithType: Conversion.CTypeDynamic(Object)\n  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  syntax:\n    content: public static TargetType CTypeDynamic<TargetType> (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: To be added.\n    return:\n      type: TargetType\n      description: To be added.\n  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString\n  id: ErrorToString\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: ErrorToString()\n  nameWithType: Conversion.ErrorToString()\n  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the error message that corresponds to a given error number.\n  remarks: \"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If no run-time error has occurred, `ErrorToString` returns a zero-length string (\\\"\\\").  \\n  \\n In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.\"\n  example:\n  - \"The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \\n  \\n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._1_1.vb)]\"\n  syntax:\n    content: public static string ErrorToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The error message that corresponds to the most recent run-time error.\n  overload: Microsoft.VisualBasic.Conversion.ErrorToString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ErrorNumber</code> is out of range.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)\n  id: ErrorToString(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: ErrorToString(Int32)\n  nameWithType: Conversion.ErrorToString(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the error message that corresponds to a given error number.\n  remarks: \"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `\\\"Application-defined or object-defined error.\\\"` If `ErrorNumber` is not valid, an error occurs. If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned. If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string (\\\"\\\").  \\n  \\n In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.\"\n  example:\n  - \"The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \\n  \\n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._191_1.vb)]\"\n  syntax:\n    content: public static string ErrorToString (int ErrorNumber);\n    parameters:\n    - id: ErrorNumber\n      type: System.Int32\n      description: Optional. Any valid error number.\n    return:\n      type: System.String\n      description: The error message that corresponds to a given error number.\n  overload: Microsoft.VisualBasic.Conversion.ErrorToString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ErrorNumber</code> is out of range.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)\n  id: Fix(System.Decimal)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Decimal)\n  nameWithType: Conversion.Fix(Decimal)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static decimal Fix (decimal Number);\n    parameters:\n    - id: Number\n      type: System.Decimal\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Decimal\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)\n  id: Fix(System.Double)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Double)\n  nameWithType: Conversion.Fix(Double)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static double Fix (double Number);\n    parameters:\n    - id: Number\n      type: System.Double\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Double\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)\n  id: Fix(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Int16)\n  nameWithType: Conversion.Fix(Int16)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static short Fix (short Number);\n    parameters:\n    - id: Number\n      type: System.Int16\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Int16\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)\n  id: Fix(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Int32)\n  nameWithType: Conversion.Fix(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static int Fix (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Int32\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)\n  id: Fix(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Int64)\n  nameWithType: Conversion.Fix(Int64)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static long Fix (long Number);\n    parameters:\n    - id: Number\n      type: System.Int64\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Int64\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)\n  id: Fix(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Object)\n  nameWithType: Conversion.Fix(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static object Fix (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Object\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)\n  id: Fix(System.Single)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Single)\n  nameWithType: Conversion.Fix(Single)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static float Fix (float Number);\n    parameters:\n    - id: Number\n      type: System.Single\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Single\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)\n  id: Hex(System.Byte)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Byte)\n  nameWithType: Conversion.Hex(Byte)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._208_1.vb)]\"\n  syntax:\n    content: public static string Hex (byte Number);\n    parameters:\n    - id: Number\n      type: System.Byte\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)\n  id: Hex(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Int16)\n  nameWithType: Conversion.Hex(Int16)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._128_1.vb)]\"\n  syntax:\n    content: public static string Hex (short Number);\n    parameters:\n    - id: Number\n      type: System.Int16\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)\n  id: Hex(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Int32)\n  nameWithType: Conversion.Hex(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._102_1.vb)]\"\n  syntax:\n    content: public static string Hex (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)\n  id: Hex(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Int64)\n  nameWithType: Conversion.Hex(Int64)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._75_1.vb)]\"\n  syntax:\n    content: public static string Hex (long Number);\n    parameters:\n    - id: Number\n      type: System.Int64\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)\n  id: Hex(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Object)\n  nameWithType: Conversion.Hex(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._53_1.vb)]\"\n  syntax:\n    content: public static string Hex (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)\n  id: Hex(System.SByte)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(SByte)\n  nameWithType: Conversion.Hex(SByte)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._15_1.vb)]\"\n  syntax:\n    content: public static string Hex (sbyte Number);\n    parameters:\n    - id: Number\n      type: System.SByte\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)\n  id: Hex(System.UInt16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(UInt16)\n  nameWithType: Conversion.Hex(UInt16)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._118_1.vb)]\"\n  syntax:\n    content: public static string Hex (ushort Number);\n    parameters:\n    - id: Number\n      type: System.UInt16\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)\n  id: Hex(System.UInt32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(UInt32)\n  nameWithType: Conversion.Hex(UInt32)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._182_1.vb)]\"\n  syntax:\n    content: public static string Hex (uint Number);\n    parameters:\n    - id: Number\n      type: System.UInt32\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)\n  id: Hex(System.UInt64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(UInt64)\n  nameWithType: Conversion.Hex(UInt64)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If `Number` is|Hex returns|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._119_1.vb)]\"\n  syntax:\n    content: public static string Hex (ulong Number);\n    parameters:\n    - id: Number\n      type: System.UInt64\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)\n  id: Int(System.Decimal)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Decimal)\n  nameWithType: Conversion.Int(Decimal)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static decimal Int (decimal Number);\n    parameters:\n    - id: Number\n      type: System.Decimal\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Decimal\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)\n  id: Int(System.Double)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Double)\n  nameWithType: Conversion.Int(Double)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static double Int (double Number);\n    parameters:\n    - id: Number\n      type: System.Double\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Double\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)\n  id: Int(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Int16)\n  nameWithType: Conversion.Int(Int16)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static short Int (short Number);\n    parameters:\n    - id: Number\n      type: System.Int16\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Int16\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)\n  id: Int(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Int32)\n  nameWithType: Conversion.Int(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static int Int (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Int32\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)\n  id: Int(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Int64)\n  nameWithType: Conversion.Int(Int64)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static long Int (long Number);\n    parameters:\n    - id: Number\n      type: System.Int64\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Int64\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)\n  id: Int(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Object)\n  nameWithType: Conversion.Int(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static object Int (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Object\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)\n  id: Int(System.Single)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Single)\n  nameWithType: Conversion.Int(Single)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Single)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_1.vb)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_2.vb)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_3.vb)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static float Int (float Number);\n    parameters:\n    - id: Number\n      type: System.Single\n      description: Required. A number of type <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> or any valid numeric expression. If `Number` contains <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref>, <xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> is returned.\n    return:\n      type: System.Single\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)\n  id: Oct(System.Byte)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Byte)\n  nameWithType: Conversion.Oct(Byte)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._109_1.vb)]\"\n  syntax:\n    content: public static string Oct (byte Number);\n    parameters:\n    - id: Number\n      type: System.Byte\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)\n  id: Oct(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Int16)\n  nameWithType: Conversion.Oct(Int16)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._151_1.vb)]\"\n  syntax:\n    content: public static string Oct (short Number);\n    parameters:\n    - id: Number\n      type: System.Int16\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)\n  id: Oct(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Int32)\n  nameWithType: Conversion.Oct(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._36_1.vb)]\"\n  syntax:\n    content: public static string Oct (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)\n  id: Oct(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Int64)\n  nameWithType: Conversion.Oct(Int64)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._217_1.vb)]\"\n  syntax:\n    content: public static string Oct (long Number);\n    parameters:\n    - id: Number\n      type: System.Int64\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)\n  id: Oct(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Object)\n  nameWithType: Conversion.Oct(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._233_1.vb)]\"\n  syntax:\n    content: public static string Oct (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)\n  id: Oct(System.SByte)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(SByte)\n  nameWithType: Conversion.Oct(SByte)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._16_1.vb)]\"\n  syntax:\n    content: public static string Oct (sbyte Number);\n    parameters:\n    - id: Number\n      type: System.SByte\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)\n  id: Oct(System.UInt16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(UInt16)\n  nameWithType: Conversion.Oct(UInt16)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._28_1.vb)]\"\n  syntax:\n    content: public static string Oct (ushort Number);\n    parameters:\n    - id: Number\n      type: System.UInt16\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)\n  id: Oct(System.UInt32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(UInt32)\n  nameWithType: Conversion.Oct(UInt32)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._240_1.vb)]\"\n  syntax:\n    content: public static string Oct (uint Number);\n    parameters:\n    - id: Number\n      type: System.UInt32\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)\n  id: Oct(System.UInt64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(UInt64)\n  nameWithType: Conversion.Oct(UInt64)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|||  \\n|-|-|  \\n|If Number is|Oct returns|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._219_1.vb)]\"\n  syntax:\n    content: public static string Oct (ulong Number);\n    parameters:\n    - id: Number\n      type: System.UInt64\n      description: Required. Any valid numeric expression or <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)\n  id: Str(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Str(Object)\n  nameWithType: Conversion.Str(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Str(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> representation of a number.\n  remarks: \"When numbers are converted to strings, a leading space is always reserved for the sign of `Number`. If `Number` is positive, the returned string contains a leading space, and the plus sign is implied. A negative number will include the minus sign (-) and no leading space.  \\n  \\n Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats. Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.  \\n  \\n> [!NOTE]\\n>  The `Str` function recognizes only the period (`.`) as a valid decimal separator. If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.\"\n  example:\n  - \"This example uses the `Str` function to return a `String` representation of a number. When a positive number is converted to a string, a leading space is always reserved for its sign.  \\n  \\n [!code-vb[VbVbalrStrings#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._24_1.vb)]\"\n  syntax:\n    content: public static string Str (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. An <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> containing any valid numeric expression.\n    return:\n      type: System.String\n      description: Returns a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> representation of a number.\n  overload: Microsoft.VisualBasic.Conversion.Str*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>Number</code> is not a numeric type.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)\n  id: Val(System.Char)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Val(Char)\n  nameWithType: Conversion.Val(Char)\n  fullName: Microsoft.VisualBasic.Conversion.Val(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the numbers contained in a string as a numeric value of appropriate type.\n  remarks: \"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are stripped from the argument.  \\n  \\n The following call returns the value 1615198.  \\n  \\n```  \\n  \\nVal(\\\" 1615 198th Street N.E.\\\")   \\n```  \\n  \\n The following call returns the decimal value -1.  \\n  \\n```  \\n  \\nVal(\\\"&HFFFF\\\")   \\n```  \\n  \\n> [!NOTE]\\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \\n>   \\n>  `' These examples cause run-time errors.`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34%\\\"))`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34&\\\"))`  \\n>   \\n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.  \\n>   \\n>  `' These examples cause compiler errors.`  \\n>   \\n>  `'Dim m = 1.34%`  \\n>   \\n>  `'Dim n = 1.34&`\"\n  example:\n  - \"The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \\n  \\n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._65_1.vb)]\"\n  syntax:\n    content: public static int Val (char Expression);\n    parameters:\n    - id: Expression\n      type: System.Char\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs.\n    return:\n      type: System.Int32\n      description: Returns the numbers contained in a string as a numeric value of appropriate type.\n  overload: Microsoft.VisualBasic.Conversion.Val*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>InputStr</code> is too large.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Expression</code> is an <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> type expression that is not convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)\n  id: Val(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Val(Object)\n  nameWithType: Conversion.Val(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Val(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the numbers contained in a string as a numeric value of appropriate type.\n  remarks: \"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  \\n  \\n The following call returns the value 1234123.  \\n  \\n```  \\n  \\nVal(\\\" 1234 123th Street N.E.\\\")   \\n```  \\n  \\n The following call returns the decimal value -1.  \\n  \\n```  \\n  \\nVal(\\\"&HFFFF\\\")   \\n```  \\n  \\n> [!NOTE]\\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \\n>   \\n>  `' These examples cause run-time errors.`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34%\\\"))`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34&\\\"))`  \\n>   \\n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.  \\n>   \\n>  `' These examples cause compiler errors.`  \\n>   \\n>  `'Dim m = 1.34%`  \\n>   \\n>  `'Dim n = 1.34&`\"\n  example:\n  - \"The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \\n  \\n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._98_1.vb)]\"\n  syntax:\n    content: public static double Val (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs.\n    return:\n      type: System.Double\n      description: Returns the numbers contained in a string as a numeric value of appropriate type.\n  overload: Microsoft.VisualBasic.Conversion.Val*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>InputStr</code> is too large.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Expression</code> is an <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> type expression that is not convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.Conversion.Val(System.String)\n  id: Val(System.String)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Val(String)\n  nameWithType: Conversion.Val(String)\n  fullName: Microsoft.VisualBasic.Conversion.Val(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the numbers contained in a string as a numeric value of appropriate type.\n  remarks: \"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  \\n  \\n The following call returns the value 1234123.  \\n  \\n```  \\n  \\nVal(\\\" 1234 123th Street N.E.\\\")   \\n```  \\n  \\n The following call returns the decimal value -1.  \\n  \\n```  \\n  \\nVal(\\\"&HFFFF\\\")   \\n```  \\n  \\n> [!NOTE]\\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \\n>   \\n>  `' These examples cause run-time errors.`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34%\\\"))`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34&\\\"))`  \\n>   \\n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.  \\n>   \\n>  `' These examples cause compiler errors.`  \\n>   \\n>  `'Dim m = 1.34%`  \\n>   \\n>  `'Dim n = 1.34&`\"\n  example:\n  - \"The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \\n  \\n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._227_1.vb)]\"\n  syntax:\n    content: public static double Val (string InputStr);\n    parameters:\n    - id: InputStr\n      type: System.String\n      description: Required. Any valid <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> expression, <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> variable, or <xref uid=\"langword_csharp_Char\" name=\"Char\" href=\"\"></xref> value. If `Expression` is of type <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>, its value must be convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> or an <xref:System.ArgumentException> error occurs.\n    return:\n      type: System.Double\n      description: Returns the numbers contained in a string as a numeric value of appropriate type.\n  overload: Microsoft.VisualBasic.Conversion.Val*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>InputStr</code> is too large.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Expression</code> is an <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> type expression that is not convertible to <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.OverflowException\n  isExternal: true\n  name: System.OverflowException\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: CTypeDynamic(Object,Type)\n  nameWithType: Conversion.CTypeDynamic(Object,Type)\n  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: CTypeDynamic(Object)\n  nameWithType: Conversion.CTypeDynamic(Object)\n  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)\n- uid: TargetType\n  isExternal: true\n  name: TargetType\n  nameWithType: TargetType\n  fullName: TargetType\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: ErrorToString()\n  nameWithType: Conversion.ErrorToString()\n  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: ErrorToString(Int32)\n  nameWithType: Conversion.ErrorToString(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Decimal)\n  nameWithType: Conversion.Fix(Decimal)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: true\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Double)\n  nameWithType: Conversion.Fix(Double)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Int16)\n  nameWithType: Conversion.Fix(Int16)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Int32)\n  nameWithType: Conversion.Fix(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Int64)\n  nameWithType: Conversion.Fix(Int64)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Object)\n  nameWithType: Conversion.Fix(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Single)\n  nameWithType: Conversion.Fix(Single)\n  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Byte)\n  nameWithType: Conversion.Hex(Byte)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Int16)\n  nameWithType: Conversion.Hex(Int16)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Int32)\n  nameWithType: Conversion.Hex(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Int64)\n  nameWithType: Conversion.Hex(Int64)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Object)\n  nameWithType: Conversion.Hex(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(SByte)\n  nameWithType: Conversion.Hex(SByte)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: true\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(UInt16)\n  nameWithType: Conversion.Hex(UInt16)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: true\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(UInt32)\n  nameWithType: Conversion.Hex(UInt32)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: true\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(UInt64)\n  nameWithType: Conversion.Hex(UInt64)\n  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: true\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Decimal)\n  nameWithType: Conversion.Int(Decimal)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Double)\n  nameWithType: Conversion.Int(Double)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Double)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Int16)\n  nameWithType: Conversion.Int(Int16)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Int32)\n  nameWithType: Conversion.Int(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Int64)\n  nameWithType: Conversion.Int(Int64)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Object)\n  nameWithType: Conversion.Int(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Object)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Single)\n  nameWithType: Conversion.Int(Single)\n  fullName: Microsoft.VisualBasic.Conversion.Int(Single)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Byte)\n  nameWithType: Conversion.Oct(Byte)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Int16)\n  nameWithType: Conversion.Oct(Int16)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Int32)\n  nameWithType: Conversion.Oct(Int32)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Int64)\n  nameWithType: Conversion.Oct(Int64)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Object)\n  nameWithType: Conversion.Oct(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(SByte)\n  nameWithType: Conversion.Oct(SByte)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(UInt16)\n  nameWithType: Conversion.Oct(UInt16)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(UInt32)\n  nameWithType: Conversion.Oct(UInt32)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(UInt64)\n  nameWithType: Conversion.Oct(UInt64)\n  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)\n- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Str(Object)\n  nameWithType: Conversion.Str(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Str(Object)\n- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Val(Char)\n  nameWithType: Conversion.Val(Char)\n  fullName: Microsoft.VisualBasic.Conversion.Val(Char)\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Val(Object)\n  nameWithType: Conversion.Val(Object)\n  fullName: Microsoft.VisualBasic.Conversion.Val(Object)\n- uid: Microsoft.VisualBasic.Conversion.Val(System.String)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Val(String)\n  nameWithType: Conversion.Val(String)\n  fullName: Microsoft.VisualBasic.Conversion.Val(String)\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: CTypeDynamic\n  nameWithType: Conversion.CTypeDynamic\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: CTypeDynamic<TargetType>\n  nameWithType: Conversion.CTypeDynamic<TargetType>\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: ErrorToString\n  nameWithType: Conversion.ErrorToString\n- uid: Microsoft.VisualBasic.Conversion.Fix*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix\n  nameWithType: Conversion.Fix\n- uid: Microsoft.VisualBasic.Conversion.Hex*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex\n  nameWithType: Conversion.Hex\n- uid: Microsoft.VisualBasic.Conversion.Int*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int\n  nameWithType: Conversion.Int\n- uid: Microsoft.VisualBasic.Conversion.Oct*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct\n  nameWithType: Conversion.Oct\n- uid: Microsoft.VisualBasic.Conversion.Str*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Str\n  nameWithType: Conversion.Str\n- uid: Microsoft.VisualBasic.Conversion.Val*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Val\n  nameWithType: Conversion.Val\n"}