{"nodes":[{"pos":[439,577],"content":"Computes a Hash-based Message Authentication Code (HMAC) using the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SHA384\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> hash function.","needQuote":true,"needEscape":true,"source":"Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA384\"></xref> hash function."},{"pos":[590,1775],"content":"HMACSHA384 is a type of keyed hash algorithm that is constructed from the SHA-384 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data and hashes the result. The hash value is mixed with the secret key again, and then hashed a second time. The output hash is 384 bits long.       An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.       If the original and computed hash values match, the message is authenticated. If they do not match, either the data or the hash value has been changed. HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.       HMACSHA384 accepts all key sizes and produces a hash sequence that is 384 bits long.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"HMACSHA384 is a type of keyed hash algorithm that is constructed from the SHA-384 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data and hashes the result. The hash value is mixed with the secret key again, and then hashed a second time. The output hash is 384 bits long.       An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.       If the original and computed hash values match, the message is authenticated. If they do not match, either the data or the hash value has been changed. HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.       HMACSHA384 accepts all key sizes and produces a hash sequence that is 384 bits long.","pos":[0,1179],"nodes":[{"content":"HMACSHA384 is a type of keyed hash algorithm that is constructed from the SHA-384 hash function and used as a Hash-based Message Authentication Code (HMAC).","pos":[0,156]},{"content":"The HMAC process mixes a secret key with the message data and hashes the result.","pos":[157,237]},{"content":"The hash value is mixed with the secret key again, and then hashed a second time.","pos":[238,319]},{"content":"The output hash is 384 bits long.","pos":[320,353]},{"content":"An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[360,522]},{"content":"The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.","pos":[523,652]},{"content":"The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","pos":[653,781]},{"content":"If the original and computed hash values match, the message is authenticated.","pos":[788,865]},{"content":"If they do not match, either the data or the hash value has been changed.","pos":[866,939]},{"content":"HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[940,1088]},{"content":"HMACSHA384 accepts all key sizes and produces a hash sequence that is 384 bits long.","pos":[1095,1179]}]}]},{"pos":[4611,4746],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA384\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using a randomly generated key.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> class by using a randomly generated key."},{"pos":[4758,4814],"content":"This constructor uses a 64-byte, randomly generated key.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor uses a 64-byte, randomly generated key.","pos":[0,56]}]},{"pos":[5389,5522],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA384\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified key data.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> class by using the specified key data."},{"pos":[5791,6110],"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> encryption. The key can be any length. However, the recommended size is 128 bytes. If the key is more than 128 bytes long, it is hashed (using SHA-384) to derive a 128-byte key. If it is less than 128 bytes long, it is padded to 128 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The secret key for <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA384\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> encryption.","pos":[0,91],"source":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> encryption."},{"content":"The key can be any length.","pos":[92,118]},{"content":"However, the recommended size is 128 bytes.","pos":[119,162]},{"content":"If the key is more than 128 bytes long, it is hashed (using SHA-384) to derive a 128-byte key.","pos":[163,257]},{"content":"If it is less than 128 bytes long, it is padded to 128 bytes.","pos":[258,319]}]},{"pos":[6286,6381],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>key</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6832,7139],"content":"Provides a workaround for the <ph id=\"ph1\">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> implementation of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA384\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> algorithm, which is inconsistent with the <ph id=\"ph2\">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> implementation of the algorithm.","needQuote":true,"needEscape":true,"source":"Provides a workaround for the [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)] implementation of the <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> algorithm, which is inconsistent with the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] implementation of the algorithm."},{"pos":[7152,8006],"content":"The purpose of the ProduceLegacyHmacValues Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] applications. When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA384> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]. You should set this property only once after you create your HMAC object. You will need to reset your key afterwards, as shown in the following example.      ```   public static void Test()       {       HMACSHA384 hmac = new HMACSHA384();       hmac.ProduceLegacyHmacValues = true;       hmac.Key = // ...Get the HMAC key.       // ...       // Use the HMAC algorithm.       // ...       }   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The purpose of the ProduceLegacyHmacValues Boolean property is to enable <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id=\"ph2\">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> applications.","pos":[0,238],"source":"The purpose of the ProduceLegacyHmacValues Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] applications."},{"content":"When you set this property to <ph id=\"ph1\">`true`</ph>, the &lt;xref:System.Security.Cryptography.HMACSHA384&gt; object produces values that match the values produced by the <ph id=\"ph2\">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph>.","pos":[239,445],"source":" When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA384> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]."},{"content":"You should set this property only once after you create your HMAC object.","pos":[446,519]},{"content":"You will need to reset your key afterwards, as shown in the following example.","pos":[520,598]}]},{"pos":[8139,8450],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to enable <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id=\"ph2\">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> applications; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to enable [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] applications; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.HMACSHA384\n  id: HMACSHA384\n  children:\n  - System.Security.Cryptography.HMACSHA384.#ctor\n  - System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])\n  - System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues\n  langs:\n  - csharp\n  name: HMACSHA384\n  nameWithType: HMACSHA384\n  fullName: System.Security.Cryptography.HMACSHA384\n  type: Class\n  summary: Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA384\"></xref> hash function.\n  remarks: \"HMACSHA384 is a type of keyed hash algorithm that is constructed from the SHA-384 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data and hashes the result. The hash value is mixed with the secret key again, and then hashed a second time. The output hash is 384 bits long.  \\n  \\n An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \\n  \\n If the original and computed hash values match, the message is authenticated. If they do not match, either the data or the hash value has been changed. HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.  \\n  \\n HMACSHA384 accepts all key sizes and produces a hash sequence that is 384 bits long.\"\n  example:\n  - \"The following example shows how to sign a file by using the HMACSHA384 object, and then how to verify the file.  \\n  \\n [!code-cs[HMACSHA384#1](~/add/codesnippet/csharp/t-system.security.crypto_31_1.cs)]\\n [!code-vb[HMACSHA384#1](~/add/codesnippet/visualbasic/t-system.security.crypto_31_1.vb)]\\n [!code-cpp[HMACSHA384#1](~/add/codesnippet/cpp/t-system.security.crypto_31_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class HMACSHA384 : System.Security.Cryptography.HMAC\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  - System.Security.Cryptography.HMAC\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.BlockSizeValue\n  - System.Security.Cryptography.HMAC.Create\n  - System.Security.Cryptography.HMAC.Create(System.String)\n  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.HashFinal\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.HMAC.Initialize\n  - System.Security.Cryptography.HMAC.Key\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HMACSHA384.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  name: HMACSHA384()\n  nameWithType: HMACSHA384.HMACSHA384()\n  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> class by using a randomly generated key.\n  remarks: This constructor uses a 64-byte, randomly generated key.\n  syntax:\n    content: public HMACSHA384 ();\n    parameters: []\n  overload: System.Security.Cryptography.HMACSHA384.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  name: HMACSHA384(Byte[])\n  nameWithType: HMACSHA384.HMACSHA384(Byte[])\n  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384(Byte[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> class by using the specified key data.\n  remarks: ''\n  example:\n  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA384> class.\n  syntax:\n    content: public HMACSHA384 (byte[] key);\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: The secret key for <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> encryption. The key can be any length. However, the recommended size is 128 bytes. If the key is more than 128 bytes long, it is hashed (using SHA-384) to derive a 128-byte key. If it is less than 128 bytes long, it is padded to 128 bytes.\n  overload: System.Security.Cryptography.HMACSHA384.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>key</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues\n  id: ProduceLegacyHmacValues\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  name: ProduceLegacyHmacValues\n  nameWithType: HMACSHA384.ProduceLegacyHmacValues\n  fullName: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Provides a workaround for the [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)] implementation of the <xref href=\"System.Security.Cryptography.HMACSHA384\"></xref> algorithm, which is inconsistent with the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] implementation of the algorithm.\n  remarks: \"The purpose of the ProduceLegacyHmacValues Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] applications. When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA384> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]. You should set this property only once after you create your HMAC object. You will need to reset your key afterwards, as shown in the following example.  \\n  \\n```  \\npublic static void Test()  \\n    {  \\n    HMACSHA384 hmac = new HMACSHA384();  \\n    hmac.ProduceLegacyHmacValues = true;  \\n    hmac.Key = // ...Get the HMAC key.  \\n    // ...  \\n    // Use the HMAC algorithm.  \\n    // ...  \\n    }  \\n```\"\n  syntax:\n    content: public bool ProduceLegacyHmacValues { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to enable [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] applications; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: System.Security.Cryptography.HMAC\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.HMACSHA384.#ctor\n  parent: System.Security.Cryptography.HMACSHA384\n  isExternal: false\n  name: HMACSHA384()\n  nameWithType: HMACSHA384.HMACSHA384()\n  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384()\n- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.HMACSHA384\n  isExternal: false\n  name: HMACSHA384(Byte[])\n  nameWithType: HMACSHA384.HMACSHA384(Byte[])\n  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues\n  parent: System.Security.Cryptography.HMACSHA384\n  isExternal: false\n  name: ProduceLegacyHmacValues\n  nameWithType: HMACSHA384.ProduceLegacyHmacValues\n  fullName: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HMACSHA384.#ctor*\n  parent: System.Security.Cryptography.HMACSHA384\n  isExternal: false\n  name: HMACSHA384\n  nameWithType: HMACSHA384.HMACSHA384\n- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues*\n  parent: System.Security.Cryptography.HMACSHA384\n  isExternal: false\n  name: ProduceLegacyHmacValues\n  nameWithType: HMACSHA384.ProduceLegacyHmacValues\n"}