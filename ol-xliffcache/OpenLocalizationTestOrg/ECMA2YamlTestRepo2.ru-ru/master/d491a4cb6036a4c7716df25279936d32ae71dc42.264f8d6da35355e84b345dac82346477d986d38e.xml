{"nodes":[{"pos":[652,763],"content":"Provides an interface that can extend a designer loader to support asynchronous loading of external components.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an interface that can extend a designer loader to support asynchronous loading of external components.","pos":[0,111]}]},{"pos":[776,2443],"content":"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components. This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>. A designer loader does not have to implement this interface if it does not require support for asynchronous loading.       Designer loading using a custom implementation of the IDesignerLoaderService can occur in a variety of ways. Sometimes external components are involved in the loading process. To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed. The IDesignerLoaderService typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining. When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter. To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete. When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components. This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>. A designer loader does not have to implement this interface if it does not require support for asynchronous loading.       Designer loading using a custom implementation of the IDesignerLoaderService can occur in a variety of ways. Sometimes external components are involved in the loading process. To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed. The IDesignerLoaderService typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining. When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter. To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete. When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.","pos":[0,1665],"nodes":[{"content":"A &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt; can implement this interface to manage designer loading that involves external components.","pos":[0,157],"source":"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components."},{"content":"This interface also allows external components to initiate a reload of the design surface by calling &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A&gt;.","pos":[158,342],"source":" This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>."},{"content":"A designer loader does not have to implement this interface if it does not require support for asynchronous loading.","pos":[343,459]},{"content":"Designer loading using a custom implementation of the IDesignerLoaderService can occur in a variety of ways.","pos":[466,574]},{"content":"Sometimes external components are involved in the loading process.","pos":[575,641]},{"content":"To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed.","pos":[642,859]},{"content":"The IDesignerLoaderService typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining.","pos":[860,1008]},{"content":"When each portion of the load completes, &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A&gt; is called, and the service decrements the counter.","pos":[1009,1198],"source":" When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter."},{"content":"To set the number of dependent load processes, call &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A&gt; once for each load process that calls &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A&gt; when its loading is complete.","pos":[1199,1510],"source":" To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete."},{"content":"When the final loading is complete, the service calls &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A&gt; on the loader host.","pos":[1511,1665],"source":" When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host."}]}]},{"pos":[3051,3137],"content":"Registers an external component as part of the load process managed by this interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers an external component as part of the load process managed by this interface.","pos":[0,86]}]},{"pos":[3149,3387],"content":"Call AddLoadDependency once for each external object participating in the load process. <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call AddLoadDependency once for each external object participating in the load process. <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.","pos":[0,238],"nodes":[{"content":"Call AddLoadDependency once for each external object participating in the load process.","pos":[0,87]},{"content":"&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A&gt; is called when the work of the load process is done.","pos":[88,238],"source":" <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done."}]}]},{"pos":[4275,4318],"content":"Signals that a dependent load has finished.","needQuote":true,"needEscape":true,"nodes":[{"content":"Signals that a dependent load has finished.","pos":[0,43]}]},{"pos":[4331,5011],"content":"This method is called to signal that a dependent loading operation has completed. Call DependentLoadComplete once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.       If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter. If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called to signal that a dependent loading operation has completed.","pos":[0,81]},{"content":"Call DependentLoadComplete once for every process that was registered by calling &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A&gt;, which has already completed.","pos":[82,286],"source":" Call DependentLoadComplete once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed."},{"content":"If the dependent load succeeds, the caller sets the <ph id=\"ph1\">`successful`</ph> parameter to <ph id=\"ph2\">`true`</ph> and passes either an empty collection or <ph id=\"ph3\">`null`</ph> to the <ph id=\"ph4\">`errorCollection`</ph> parameter.","pos":[293,461],"source":"       If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter."},{"content":"If the dependent load encounters errors, the caller sets the <ph id=\"ph1\">`successful`</ph> parameter to <ph id=\"ph2\">`false`</ph> and passes a collection of exceptions that indicate the reason or reasons for failure to the <ph id=\"ph3\">`errorCollection`</ph> parameter.","pos":[462,678],"source":" If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter."}]},{"pos":[5220,5431],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the load of the designer is successful; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if errors prevented the load from finishing.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the load of the designer is successful; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if errors prevented the load from finishing."},{"pos":[5520,5701],"content":"A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of errors that occurred during the load, if any.","pos":[0,61]},{"content":"If no errors occurred, pass either an empty collection or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[62,181],"source":" If no errors occurred, pass either an empty collection or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[6291,6319],"content":"Reloads the design document.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reloads the design document.","pos":[0,28]}]},{"pos":[6332,6832],"content":"Any object can call this method to request that the loader reload the design document. If the loader supports reloading and complies with the reload, the designer loader can return `true`. Otherwise, it returns `false`, indicating that the reload will not occur. Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.       The caller can display a message to the user if the designer cannot be reloaded.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Any object can call this method to request that the loader reload the design document.","pos":[0,86]},{"content":"If the loader supports reloading and complies with the reload, the designer loader can return <ph id=\"ph1\">`true`</ph>.","pos":[87,188],"source":" If the loader supports reloading and complies with the reload, the designer loader can return `true`."},{"content":"Otherwise, it returns <ph id=\"ph1\">`false`</ph>, indicating that the reload will not occur.","pos":[189,262],"source":" Otherwise, it returns `false`, indicating that the reload will not occur."},{"content":"Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.","pos":[263,411]},{"content":"The caller can display a message to the user if the designer cannot be reloaded.","pos":[418,498]}]},{"pos":[6957,7159],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the reload request is accepted, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the loader does not allow the reload.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the reload request is accepted, or <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the loader does not allow the reload."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  id: IDesignerLoaderService\n  children:\n  - System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency\n  - System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  - System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload\n  langs:\n  - csharp\n  name: IDesignerLoaderService\n  nameWithType: IDesignerLoaderService\n  fullName: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  type: Interface\n  summary: Provides an interface that can extend a designer loader to support asynchronous loading of external components.\n  remarks: \"A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components. This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>. A designer loader does not have to implement this interface if it does not require support for asynchronous loading.  \\n  \\n Designer loading using a custom implementation of the IDesignerLoaderService can occur in a variety of ways. Sometimes external components are involved in the loading process. To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed. The IDesignerLoaderService typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining. When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter. To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete. When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.\"\n  syntax:\n    content: public interface IDesignerLoaderService\n  implements: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency\n  id: AddLoadDependency\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  langs:\n  - csharp\n  name: AddLoadDependency()\n  nameWithType: IDesignerLoaderService.AddLoadDependency()\n  fullName: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Registers an external component as part of the load process managed by this interface.\n  remarks: Call AddLoadDependency once for each external object participating in the load process. <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.\n  syntax:\n    content: public void AddLoadDependency ();\n    parameters: []\n  overload: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  id: DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  langs:\n  - csharp\n  name: DependentLoadComplete(Boolean,ICollection)\n  nameWithType: IDesignerLoaderService.DependentLoadComplete(Boolean,ICollection)\n  fullName: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(Boolean,ICollection)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Signals that a dependent load has finished.\n  remarks: \"This method is called to signal that a dependent loading operation has completed. Call DependentLoadComplete once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.  \\n  \\n If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter. If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.\"\n  syntax:\n    content: public void DependentLoadComplete (bool successful, System.Collections.ICollection errorCollection);\n    parameters:\n    - id: successful\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the load of the designer is successful; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if errors prevented the load from finishing.\n    - id: errorCollection\n      type: System.Collections.ICollection\n      description: A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload\n  id: Reload\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  langs:\n  - csharp\n  name: Reload()\n  nameWithType: IDesignerLoaderService.Reload()\n  fullName: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Reloads the design document.\n  remarks: \"Any object can call this method to request that the loader reload the design document. If the loader supports reloading and complies with the reload, the designer loader can return `true`. Otherwise, it returns `false`, indicating that the reload will not occur. Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.  \\n  \\n The caller can display a message to the user if the designer cannot be reloaded.\"\n  syntax:\n    content: public bool Reload ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the reload request is accepted, or <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the loader does not allow the reload.\n  overload: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: AddLoadDependency()\n  nameWithType: IDesignerLoaderService.AddLoadDependency()\n  fullName: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency()\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: DependentLoadComplete(Boolean,ICollection)\n  nameWithType: IDesignerLoaderService.DependentLoadComplete(Boolean,ICollection)\n  fullName: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(Boolean,ICollection)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: Reload()\n  nameWithType: IDesignerLoaderService.Reload()\n  fullName: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload()\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency*\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: AddLoadDependency\n  nameWithType: IDesignerLoaderService.AddLoadDependency\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete*\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: DependentLoadComplete\n  nameWithType: IDesignerLoaderService.DependentLoadComplete\n- uid: System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload*\n  parent: System.ComponentModel.Design.Serialization.IDesignerLoaderService\n  isExternal: false\n  name: Reload\n  nameWithType: IDesignerLoaderService.Reload\n"}