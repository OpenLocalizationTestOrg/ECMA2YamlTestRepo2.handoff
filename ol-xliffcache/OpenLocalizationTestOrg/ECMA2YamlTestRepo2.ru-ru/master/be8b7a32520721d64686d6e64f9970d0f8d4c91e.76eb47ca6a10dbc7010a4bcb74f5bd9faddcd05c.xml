{"nodes":[{"pos":[935,1015],"content":"Represents a type declaration for a class, structure, interface, or enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a type declaration for a class, structure, interface, or enumeration.","pos":[0,80]}]},{"pos":[1028,3243],"content":"CodeTypeDeclaration can be used to represent code that declares a class, structure, interface, or enumeration. CodeTypeDeclaration can be used to declare a type that is nested within another type.       The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared. The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types. The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type. The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.      > [!NOTE] >  Some programming languages only support the declaration of reference types, or classes. To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags. <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for value types such as structures.       You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations. The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial. Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"CodeTypeDeclaration can be used to represent code that declares a class, structure, interface, or enumeration.","pos":[0,110]},{"content":"CodeTypeDeclaration can be used to declare a type that is nested within another type.","pos":[111,196]},{"content":"The &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt; property specifies the base type or base types of the type being declared.","pos":[203,336],"source":"       The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared."},{"content":"The &lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt; property contains the type members, which can include methods, fields, properties, comments and other types.","pos":[337,502],"source":" The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types."},{"content":"The &lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt; property indicates the &lt;xref:System.Reflection.TypeAttributes&gt; values for the type declaration, which indicate the type category of the type.","pos":[503,708],"source":" The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type."},{"content":"The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;, and &lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt; methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.","pos":[709,1038],"source":" The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Some programming languages only support the declaration of reference types, or classes.","pos":[1044,1144],"source":"      > [!NOTE] >  Some programming languages only support the declaration of reference types, or classes."},{"content":"To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method to test for the appropriate &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; flags.","pos":[1145,1421],"source":" To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags."},{"content":"&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for interfaces, &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for enumerations, and &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for value types such as structures.","pos":[1422,1693],"source":" <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for value types such as structures."},{"content":"You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.","pos":[1700,1839]},{"content":"The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt; property indicates whether the type declaration is complete or partial.","pos":[1840,1970],"source":" The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial."},{"content":"Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.","pos":[1971,2208],"source":" Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>."}]},{"pos":[4806,4902],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeTypeDeclaration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeTypeDeclaration\"></xref> class."},{"pos":[5486,5606],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeTypeDeclaration\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeTypeDeclaration\"></xref> class with the specified name."},{"pos":[5748,5774],"content":"The name for the new type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name for the new type.","pos":[0,26]}]},{"pos":[6204,6236],"content":"Gets the base types of the type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the base types of the type.","pos":[0,32]}]},{"pos":[6249,7935],"content":"To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the BaseTypes collection.      > [!NOTE] >  In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type. For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.       The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.       [Visual Basic]      ```   Dim ctd As New CodeTypeDeclaration(\"Class1\")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference(\"Interface1\"))   ```       [C#]      ```   CodeTypeDeclaration ctd = new CodeTypeDeclaration(\"Class1\");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference(\"Interface1\"));   ```       The preceding code generates the equivalent of the following Visual Basic code.      ```   Public Class Class1   Implements Interface1   ```       However, the Visual Basic code actually generated is the following.      ```   Public Class Class1   Inherits Object   Implements Interface1   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include &lt;xref:System.Object&gt; as the first item in the BaseTypes collection.","pos":[0,208],"source":"To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the BaseTypes collection."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In the .NET Framework version 2.0 you do not need the &lt;xref:System.CodeDom.CodeTypeReference&gt; for &lt;xref:System.Object&gt; if the interface you are implementing already exists and you are referring to it by type.","pos":[214,435],"source":"      > [!NOTE] >  In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type."},{"content":"For example, if you are implementing the &lt;xref:System.Collections.ICollection&gt; interface and add it to the collection with this statement, <ph id=\"ph1\">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id=\"ph2\">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.","pos":[436,740],"source":" For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement."},{"content":"The following code illustrates the addition of a &lt;xref:System.CodeDom.CodeTypeReference&gt; to the collection that refers to &lt;xref:System.Object&gt;.","pos":[747,890],"source":"       The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>."},{"content":"[Visual Basic]      <ph id=\"ph1\">```   Dim ctd As New CodeTypeDeclaration(\"Class1\")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference(\"Interface1\"))   ```</ph>       [C#]      <ph id=\"ph2\">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration(\"Class1\");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference(\"Interface1\"));   ```</ph>       The preceding code generates the equivalent of the following Visual Basic code.","pos":[897,1426],"source":"       [Visual Basic]      ```   Dim ctd As New CodeTypeDeclaration(\"Class1\")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference(\"Interface1\"))   ```       [C#]      ```   CodeTypeDeclaration ctd = new CodeTypeDeclaration(\"Class1\");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference(\"Interface1\"));   ```       The preceding code generates the equivalent of the following Visual Basic code."},{"content":"<ph id=\"ph1\">```   Public Class Class1   Implements Interface1   ```</ph>       However, the Visual Basic code actually generated is the following.","pos":[1432,1561],"source":"```   Public Class Class1   Implements Interface1   ```       However, the Visual Basic code actually generated is the following."}]},{"pos":[8115,8230],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeTypeReferenceCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that indicates the base types of the type.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeTypeReferenceCollection\"></xref> object that indicates the base types of the type."},{"pos":[8654,8732],"content":"Gets or sets a value indicating whether the type is a class or reference type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the type is a class or reference type.","pos":[0,78]}]},{"pos":[8848,9025],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the type is a class or reference type; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the type is a class or reference type; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9442,9509],"content":"Gets or sets a value indicating whether the type is an enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the type is an enumeration.","pos":[0,67]}]},{"pos":[9624,9790],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the type is an enumeration; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the type is an enumeration; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10231,10296],"content":"Gets or sets a value indicating whether the type is an interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the type is an interface.","pos":[0,65]}]},{"pos":[10416,10580],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the type is an interface; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the type is an interface; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11016,11100],"content":"Gets or sets a value indicating whether the type declaration is complete or partial.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the type declaration is complete or partial.","pos":[0,84]}]},{"pos":[11113,13442],"content":"You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations. Implementations are commonly supplied in one complete type declaration. In this case, set the type declaration IsPartial property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.       A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application. The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.       The C# language supports partial type declarations of classes and structures through the `partial` keyword. Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword. Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.      > [!NOTE] >  Partial type declarations are supported for classes and structures. If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.       When supplying a class or structure implementation across multiple declarations, set the IsPartial property to `true` for the initial declaration and all supplemental declarations. The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces. The supplementary declarations do not need to re-specify the type signature. A compiler error typically results if you redefine the type signature in a supplementary declaration.       Visual Studio 2005 uses partial types to separate user-generated code from designer code. In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword. In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.","pos":[0,137]},{"content":"Implementations are commonly supplied in one complete type declaration.","pos":[138,209]},{"content":"In this case, set the type declaration IsPartial property to <ph id=\"ph1\">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.","pos":[210,387],"source":" In this case, set the type declaration IsPartial property to `false`, which indicates that the type declaration represents all details for the class or structure implementation."},{"content":"A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.","pos":[394,545]},{"content":"The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.","pos":[546,728]},{"content":"The C# language supports partial type declarations of classes and structures through the <ph id=\"ph1\">`partial`</ph> keyword.","pos":[735,842],"source":"       The C# language supports partial type declarations of classes and structures through the `partial` keyword."},{"content":"Visual Basic supports partial type declarations of classes and structures with the <ph id=\"ph1\">`Partial`</ph> keyword.","pos":[843,944],"source":" Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword."},{"content":"Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.","pos":[945,1182],"source":" Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Partial type declarations are supported for classes and structures.","pos":[1188,1268],"source":"      > [!NOTE] >  Partial type declarations are supported for classes and structures."},{"content":"If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.","pos":[1269,1388]},{"content":"When supplying a class or structure implementation across multiple declarations, set the IsPartial property to <ph id=\"ph1\">`true`</ph> for the initial declaration and all supplemental declarations.","pos":[1395,1575],"source":"       When supplying a class or structure implementation across multiple declarations, set the IsPartial property to `true` for the initial declaration and all supplemental declarations."},{"content":"The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.","pos":[1576,1711]},{"content":"The supplementary declarations do not need to re-specify the type signature.","pos":[1712,1788]},{"content":"A compiler error typically results if you redefine the type signature in a supplementary declaration.","pos":[1789,1890]},{"content":"Visual Studio 2005 uses partial types to separate user-generated code from designer code.","pos":[1897,1986]},{"content":"In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id=\"ph1\">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id=\"ph2\">`Partial`</ph> keyword.","pos":[1987,2211],"source":" In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword."},{"content":"In C#, both the user code and designer code appear in partial classes identified by the <ph id=\"ph1\">`partial`</ph> keyword.","pos":[2212,2318],"source":" In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword."}]},{"pos":[14737,15103],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the class or structure declaration is a partial representation of the implementation; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the declaration is a complete implementation of the class or structure. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the class or structure declaration is a partial representation of the implementation; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the declaration is a complete implementation of the class or structure.","pos":[0,287],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the class or structure declaration is a partial representation of the implementation; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the declaration is a complete implementation of the class or structure."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[288,366],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[15532,15606],"content":"Gets or sets a value indicating whether the type is a value type (struct).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the type is a value type (struct).","pos":[0,74]}]},{"pos":[15723,15887],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the type is a value type; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the type is a value type; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16310,16372],"content":"Gets the collection of class members for the represented type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of class members for the represented type.","pos":[0,62]}]},{"pos":[16543,16646],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeTypeMemberCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that indicates the class members.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeTypeMemberCollection\"></xref> object that indicates the class members."},{"pos":[17115,17226],"content":"Occurs when the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*> collection is accessed for the first time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt; collection is accessed for the first time.","pos":[0,111],"source":"Occurs when the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*> collection is accessed for the first time."}]},{"pos":[17358,17370],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17773,17882],"content":"Occurs when the <xref:System.CodeDom.CodeTypeDeclaration.Members*> collection is accessed for the first time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt; collection is accessed for the first time.","pos":[0,109],"source":"Occurs when the <xref:System.CodeDom.CodeTypeDeclaration.Members*> collection is accessed for the first time."}]},{"pos":[18012,18024],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18425,18465],"content":"Gets or sets the attributes of the type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the attributes of the type.","pos":[0,40]}]},{"pos":[18478,20617],"content":"The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time. Many of these flags do not correspond to the type declaration syntax for some languages. As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, and <xref:System.Reflection.TypeAttributes>.      > [!NOTE] >  Some of the flags such as <xref:System.Reflection.TypeAttributes> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>. The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested. The flags in the TypeAttributes property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.      > [!NOTE] >  The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes> and then set the desired visibility flag. For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.  The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`. Setting the TypeAttributes property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Reflection.TypeAttributes&gt; property contains the same type of values used by &lt;xref:System.Reflection&gt; when investigating a type at run time.","pos":[0,157],"source":"The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time."},{"content":"Many of these flags do not correspond to the type declaration syntax for some languages.","pos":[158,246]},{"content":"As a result, only the following flags are significant to &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; : &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, and &lt;xref:System.Reflection.TypeAttributes&gt;.","pos":[247,679],"source":" As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, and <xref:System.Reflection.TypeAttributes>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Some of the flags such as &lt;xref:System.Reflection.TypeAttributes&gt; overlap with the meaning of flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property of &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; that is inherited from &lt;xref:System.CodeDom.CodeTypeMember&gt;.","pos":[685,970],"source":"      > [!NOTE] >  Some of the flags such as <xref:System.Reflection.TypeAttributes> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>."},{"content":"The &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property is a side effect of the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; class inheriting from &lt;xref:System.CodeDom.CodeTypeMember&gt; so that classes can be nested.","pos":[971,1190],"source":" The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested."},{"content":"The flags in the TypeAttributes property should be used instead of the flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property.","pos":[1191,1335],"source":" The flags in the TypeAttributes property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The pattern for setting the visibility flags (flags containing the words <ph id=\"ph2\">`Public`</ph> or <ph id=\"ph3\">`Nested`</ph>) is to mask out all visibility flags using the &lt;xref:System.Reflection.TypeAttributes&gt; and then set the desired visibility flag.","pos":[1341,1576],"source":"      > [!NOTE] >  The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes> and then set the desired visibility flag."},{"content":"For example, the C# code statement to identify the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; (named <ph id=\"ph1\">`cd`</ph>) as an internal class is <ph id=\"ph2\">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.","pos":[1577,1810],"source":" For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`."},{"content":"The code to set the same value in Visual Basic is <ph id=\"ph1\">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.","pos":[1812,1975],"source":"  The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`."},{"content":"Setting the TypeAttributes property directly to a visibility flag (<ph id=\"ph1\">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.","pos":[1976,2133],"source":" Setting the TypeAttributes property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set."}]},{"pos":[20787,20878],"content":"A <xref:System.Reflection.TypeAttributes> object that indicates the attributes of the type.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Reflection.TypeAttributes&gt; object that indicates the attributes of the type.","pos":[0,91],"source":"A <xref:System.Reflection.TypeAttributes> object that indicates the attributes of the type."}]},{"pos":[21342,21392],"content":"Gets the type parameters for the type declaration.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the type parameters for the type declaration.","pos":[0,50]}]},{"pos":[21405,21842],"content":"A generic type declaration contains one or more unspecified types known as type parameters. A type parameter name stands for the type within the body of the generic declaration. For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.       For more information on generics, see [Generics in the .NET Framework Class Library](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A generic type declaration contains one or more unspecified types known as type parameters.","pos":[0,91]},{"content":"A type parameter name stands for the type within the body of the generic declaration.","pos":[92,177]},{"content":"For example, the generic declaration for the &lt;xref:System.Collections.Generic.List%601&gt; class contains the type parameter <ph id=\"ph1\">`T`</ph>.","pos":[178,304],"source":" For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`."},{"content":"For more information on generics, see <bpt id=\"p1\">[</bpt>Generics in the .NET Framework Class Library<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[311,435],"source":"       For more information on generics, see [Generics in the .NET Framework Class Library](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[22027,22152],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeTypeParameterCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the type parameters for the type declaration.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeTypeParameterCollection\"></xref> that contains the type parameters for the type declaration."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.CodeTypeDeclaration\n  id: CodeTypeDeclaration\n  children:\n  - System.CodeDom.CodeTypeDeclaration.#ctor\n  - System.CodeDom.CodeTypeDeclaration.#ctor(System.String)\n  - System.CodeDom.CodeTypeDeclaration.BaseTypes\n  - System.CodeDom.CodeTypeDeclaration.IsClass\n  - System.CodeDom.CodeTypeDeclaration.IsEnum\n  - System.CodeDom.CodeTypeDeclaration.IsInterface\n  - System.CodeDom.CodeTypeDeclaration.IsPartial\n  - System.CodeDom.CodeTypeDeclaration.IsStruct\n  - System.CodeDom.CodeTypeDeclaration.Members\n  - System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes\n  - System.CodeDom.CodeTypeDeclaration.PopulateMembers\n  - System.CodeDom.CodeTypeDeclaration.TypeAttributes\n  - System.CodeDom.CodeTypeDeclaration.TypeParameters\n  langs:\n  - csharp\n  name: CodeTypeDeclaration\n  nameWithType: CodeTypeDeclaration\n  fullName: System.CodeDom.CodeTypeDeclaration\n  type: Class\n  summary: Represents a type declaration for a class, structure, interface, or enumeration.\n  remarks: \"CodeTypeDeclaration can be used to represent code that declares a class, structure, interface, or enumeration. CodeTypeDeclaration can be used to declare a type that is nested within another type.  \\n  \\n The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared. The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types. The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type. The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.  \\n  \\n> [!NOTE]\\n>  Some programming languages only support the declaration of reference types, or classes. To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags. <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport> indicates support for value types such as structures.  \\n  \\n You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations. The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial. Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.\"\n  example:\n  - \"This example demonstrates using a CodeTypeDeclaration to declare a type.  \\n  \\n [!code-cs[CodeTypeDeclarationExample#2](~/add/codesnippet/csharp/t-system.codedom.codetyp_7_1.cs)]\\n [!code-vb[CodeTypeDeclarationExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codetyp_7_1.vb)]\\n [!code-cpp[CodeTypeDeclarationExample#2](~/add/codesnippet/cpp/t-system.codedom.codetyp_7_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember\n  inheritance:\n  - System.Object\n  - System.CodeDom.CodeObject\n  - System.CodeDom.CodeTypeMember\n  implements: []\n  inheritedMembers:\n  - System.CodeDom.CodeObject.UserData\n  - System.CodeDom.CodeTypeMember.Attributes\n  - System.CodeDom.CodeTypeMember.Comments\n  - System.CodeDom.CodeTypeMember.CustomAttributes\n  - System.CodeDom.CodeTypeMember.EndDirectives\n  - System.CodeDom.CodeTypeMember.LinePragma\n  - System.CodeDom.CodeTypeMember.Name\n  - System.CodeDom.CodeTypeMember.StartDirectives\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.#ctor\n  id: '#ctor'\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: CodeTypeDeclaration()\n  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()\n  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeTypeDeclaration\"></xref> class.\n  syntax:\n    content: public CodeTypeDeclaration ();\n    parameters: []\n  overload: System.CodeDom.CodeTypeDeclaration.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: CodeTypeDeclaration(String)\n  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)\n  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeTypeDeclaration\"></xref> class with the specified name.\n  syntax:\n    content: public CodeTypeDeclaration (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name for the new type.\n  overload: System.CodeDom.CodeTypeDeclaration.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes\n  id: BaseTypes\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: BaseTypes\n  nameWithType: CodeTypeDeclaration.BaseTypes\n  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets the base types of the type.\n  remarks: \"To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the BaseTypes collection.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type. For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.  \\n  \\n The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.  \\n  \\n [Visual Basic]  \\n  \\n```  \\nDim ctd As New CodeTypeDeclaration(\\\"Class1\\\")  \\nctd.IsClass = True  \\nctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  \\nctd.BaseTypes.Add(New CodeTypeReference(\\\"Interface1\\\"))  \\n```  \\n  \\n [C#]  \\n  \\n```  \\nCodeTypeDeclaration ctd = new CodeTypeDeclaration(\\\"Class1\\\");  \\nctd.IsClass = true;  \\nctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  \\nctd.BaseTypes.Add(new CodeTypeReference(\\\"Interface1\\\"));  \\n```  \\n  \\n The preceding code generates the equivalent of the following Visual Basic code.  \\n  \\n```  \\nPublic Class Class1  \\nImplements Interface1  \\n```  \\n  \\n However, the Visual Basic code actually generated is the following.  \\n  \\n```  \\nPublic Class Class1  \\nInherits Object  \\nImplements Interface1  \\n```\"\n  syntax:\n    content: public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }\n    return:\n      type: System.CodeDom.CodeTypeReferenceCollection\n      description: A <xref href=\"System.CodeDom.CodeTypeReferenceCollection\"></xref> object that indicates the base types of the type.\n  overload: System.CodeDom.CodeTypeDeclaration.BaseTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.IsClass\n  id: IsClass\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: IsClass\n  nameWithType: CodeTypeDeclaration.IsClass\n  fullName: System.CodeDom.CodeTypeDeclaration.IsClass\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets a value indicating whether the type is a class or reference type.\n  syntax:\n    content: public bool IsClass { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the type is a class or reference type; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.CodeTypeDeclaration.IsClass*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.IsEnum\n  id: IsEnum\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: IsEnum\n  nameWithType: CodeTypeDeclaration.IsEnum\n  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets a value indicating whether the type is an enumeration.\n  syntax:\n    content: public bool IsEnum { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the type is an enumeration; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.CodeTypeDeclaration.IsEnum*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.IsInterface\n  id: IsInterface\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: IsInterface\n  nameWithType: CodeTypeDeclaration.IsInterface\n  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets a value indicating whether the type is an interface.\n  syntax:\n    content: public bool IsInterface { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the type is an interface; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.CodeTypeDeclaration.IsInterface*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.IsPartial\n  id: IsPartial\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: IsPartial\n  nameWithType: CodeTypeDeclaration.IsPartial\n  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets a value indicating whether the type declaration is complete or partial.\n  remarks: \"You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations. Implementations are commonly supplied in one complete type declaration. In this case, set the type declaration IsPartial property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.  \\n  \\n A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application. The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.  \\n  \\n The C# language supports partial type declarations of classes and structures through the `partial` keyword. Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword. Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.  \\n  \\n> [!NOTE]\\n>  Partial type declarations are supported for classes and structures. If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.  \\n  \\n When supplying a class or structure implementation across multiple declarations, set the IsPartial property to `true` for the initial declaration and all supplemental declarations. The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces. The supplementary declarations do not need to re-specify the type signature. A compiler error typically results if you redefine the type signature in a supplementary declaration.  \\n  \\n Visual Studio 2005 uses partial types to separate user-generated code from designer code. In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword. In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.\"\n  example:\n  - \"This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations. The example builds the initial class declaration statement and sets the IsPartial property to `true`.  \\n  \\n [!code-cpp[CodeDomPartialTypeExample#3](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_1.cpp)]\\n [!code-cs[CodeDomPartialTypeExample#3](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_1.cs)]\\n [!code-vb[CodeDomPartialTypeExample#3](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_1.vb)]  \\n  \\n A different method in the example extends the class implementation. This method builds a new type declaration statement for the existing class and sets the IsPartial property to `true`. The compiler combines the two partial type declarations together for the complete class implementation.  \\n  \\n [!code-cpp[CodeDomPartialTypeExample#7](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_2.cpp)]\\n [!code-cs[CodeDomPartialTypeExample#7](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_2.cs)]\\n [!code-vb[CodeDomPartialTypeExample#7](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_2.vb)]\"\n  syntax:\n    content: public bool IsPartial { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the class or structure declaration is a partial representation of the implementation; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the declaration is a complete implementation of the class or structure. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.CodeTypeDeclaration.IsPartial*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.IsStruct\n  id: IsStruct\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: IsStruct\n  nameWithType: CodeTypeDeclaration.IsStruct\n  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets a value indicating whether the type is a value type (struct).\n  syntax:\n    content: public bool IsStruct { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the type is a value type; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.CodeTypeDeclaration.IsStruct*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.Members\n  id: Members\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: Members\n  nameWithType: CodeTypeDeclaration.Members\n  fullName: System.CodeDom.CodeTypeDeclaration.Members\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets the collection of class members for the represented type.\n  syntax:\n    content: public System.CodeDom.CodeTypeMemberCollection Members { get; }\n    return:\n      type: System.CodeDom.CodeTypeMemberCollection\n      description: A <xref href=\"System.CodeDom.CodeTypeMemberCollection\"></xref> object that indicates the class members.\n  overload: System.CodeDom.CodeTypeDeclaration.Members*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes\n  id: PopulateBaseTypes\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: PopulateBaseTypes\n  nameWithType: CodeTypeDeclaration.PopulateBaseTypes\n  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes\n  type: Event\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Occurs when the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*> collection is accessed for the first time.\n  syntax:\n    content: public event EventHandler PopulateBaseTypes;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers\n  id: PopulateMembers\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: PopulateMembers\n  nameWithType: CodeTypeDeclaration.PopulateMembers\n  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers\n  type: Event\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Occurs when the <xref:System.CodeDom.CodeTypeDeclaration.Members*> collection is accessed for the first time.\n  syntax:\n    content: public event EventHandler PopulateMembers;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes\n  id: TypeAttributes\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: TypeAttributes\n  nameWithType: CodeTypeDeclaration.TypeAttributes\n  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the attributes of the type.\n  remarks: \"The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time. Many of these flags do not correspond to the type declaration syntax for some languages. As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, and <xref:System.Reflection.TypeAttributes>.  \\n  \\n> [!NOTE]\\n>  Some of the flags such as <xref:System.Reflection.TypeAttributes> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>. The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested. The flags in the TypeAttributes property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.  \\n  \\n> [!NOTE]\\n>  The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes> and then set the desired visibility flag. For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.  The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`. Setting the TypeAttributes property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.\"\n  syntax:\n    content: public System.Reflection.TypeAttributes TypeAttributes { get; set; }\n    return:\n      type: System.Reflection.TypeAttributes\n      description: A <xref:System.Reflection.TypeAttributes> object that indicates the attributes of the type.\n  overload: System.CodeDom.CodeTypeDeclaration.TypeAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters\n  id: TypeParameters\n  parent: System.CodeDom.CodeTypeDeclaration\n  langs:\n  - csharp\n  name: TypeParameters\n  nameWithType: CodeTypeDeclaration.TypeParameters\n  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets the type parameters for the type declaration.\n  remarks: \"A generic type declaration contains one or more unspecified types known as type parameters. A type parameter name stands for the type within the body of the generic declaration. For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.  \\n  \\n For more information on generics, see [Generics in the .NET Framework Class Library](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }\n    return:\n      type: System.CodeDom.CodeTypeParameterCollection\n      description: A <xref href=\"System.CodeDom.CodeTypeParameterCollection\"></xref> that contains the type parameters for the type declaration.\n  overload: System.CodeDom.CodeTypeDeclaration.TypeParameters*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.CodeDom.CodeTypeMember\n  isExternal: false\n  name: System.CodeDom.CodeTypeMember\n- uid: System.CodeDom.CodeTypeDeclaration.#ctor\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: CodeTypeDeclaration()\n  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()\n  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()\n- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: CodeTypeDeclaration(String)\n  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)\n  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: BaseTypes\n  nameWithType: CodeTypeDeclaration.BaseTypes\n  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes\n- uid: System.CodeDom.CodeTypeReferenceCollection\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeTypeReferenceCollection\n  nameWithType: CodeTypeReferenceCollection\n  fullName: System.CodeDom.CodeTypeReferenceCollection\n- uid: System.CodeDom.CodeTypeDeclaration.IsClass\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsClass\n  nameWithType: CodeTypeDeclaration.IsClass\n  fullName: System.CodeDom.CodeTypeDeclaration.IsClass\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.CodeDom.CodeTypeDeclaration.IsEnum\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsEnum\n  nameWithType: CodeTypeDeclaration.IsEnum\n  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum\n- uid: System.CodeDom.CodeTypeDeclaration.IsInterface\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsInterface\n  nameWithType: CodeTypeDeclaration.IsInterface\n  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface\n- uid: System.CodeDom.CodeTypeDeclaration.IsPartial\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsPartial\n  nameWithType: CodeTypeDeclaration.IsPartial\n  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial\n- uid: System.CodeDom.CodeTypeDeclaration.IsStruct\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsStruct\n  nameWithType: CodeTypeDeclaration.IsStruct\n  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct\n- uid: System.CodeDom.CodeTypeDeclaration.Members\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: Members\n  nameWithType: CodeTypeDeclaration.Members\n  fullName: System.CodeDom.CodeTypeDeclaration.Members\n- uid: System.CodeDom.CodeTypeMemberCollection\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeTypeMemberCollection\n  nameWithType: CodeTypeMemberCollection\n  fullName: System.CodeDom.CodeTypeMemberCollection\n- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: PopulateBaseTypes\n  nameWithType: CodeTypeDeclaration.PopulateBaseTypes\n  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: PopulateMembers\n  nameWithType: CodeTypeDeclaration.PopulateMembers\n  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers\n- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: TypeAttributes\n  nameWithType: CodeTypeDeclaration.TypeAttributes\n  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes\n- uid: System.Reflection.TypeAttributes\n  parent: System.Reflection\n  isExternal: true\n  name: TypeAttributes\n  nameWithType: TypeAttributes\n  fullName: System.Reflection.TypeAttributes\n- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: TypeParameters\n  nameWithType: CodeTypeDeclaration.TypeParameters\n  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters\n- uid: System.CodeDom.CodeTypeParameterCollection\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeTypeParameterCollection\n  nameWithType: CodeTypeParameterCollection\n  fullName: System.CodeDom.CodeTypeParameterCollection\n- uid: System.CodeDom.CodeTypeDeclaration.#ctor*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: CodeTypeDeclaration\n  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration\n- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: BaseTypes\n  nameWithType: CodeTypeDeclaration.BaseTypes\n- uid: System.CodeDom.CodeTypeDeclaration.IsClass*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsClass\n  nameWithType: CodeTypeDeclaration.IsClass\n- uid: System.CodeDom.CodeTypeDeclaration.IsEnum*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsEnum\n  nameWithType: CodeTypeDeclaration.IsEnum\n- uid: System.CodeDom.CodeTypeDeclaration.IsInterface*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsInterface\n  nameWithType: CodeTypeDeclaration.IsInterface\n- uid: System.CodeDom.CodeTypeDeclaration.IsPartial*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsPartial\n  nameWithType: CodeTypeDeclaration.IsPartial\n- uid: System.CodeDom.CodeTypeDeclaration.IsStruct*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: IsStruct\n  nameWithType: CodeTypeDeclaration.IsStruct\n- uid: System.CodeDom.CodeTypeDeclaration.Members*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: Members\n  nameWithType: CodeTypeDeclaration.Members\n- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: TypeAttributes\n  nameWithType: CodeTypeDeclaration.TypeAttributes\n- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters*\n  parent: System.CodeDom.CodeTypeDeclaration\n  isExternal: false\n  name: TypeParameters\n  nameWithType: CodeTypeDeclaration.TypeParameters\n"}