{"nodes":[{"pos":[485,537],"content":"Specifies the type of a Message Queuing transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the type of a Message Queuing transaction.","pos":[0,52]}]},{"pos":[550,1896],"content":"When you read or write a message using an overload of the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods (including <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>) that takes a `transactionType` parameter, you can specify how you are interacting with the queue. `Automatic` enables you to send and receive from external transactions (such as when you are interacting with database applications), while `Single` is used for single internal Message Queuing transactions.       `None` enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue. This is useful, for example, when routing several messages sent within a single transaction.       If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the <xref:System.Messaging.MessageQueueTransaction> class and pass it into an overload of the <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods that takes a `transaction` parameter rather than one that takes a `transactionType` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you read or write a message using an overload of the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; or &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; methods (including &lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt; and &lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;) that takes a <ph id=\"ph1\">`transactionType`</ph> parameter, you can specify how you are interacting with the queue.","pos":[0,435],"source":"When you read or write a message using an overload of the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods (including <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>) that takes a `transactionType` parameter, you can specify how you are interacting with the queue."},{"content":"<ph id=\"ph1\">`Automatic`</ph> enables you to send and receive from external transactions (such as when you are interacting with database applications), while <ph id=\"ph2\">`Single`</ph> is used for single internal Message Queuing transactions.","pos":[436,642],"source":"`Automatic` enables you to send and receive from external transactions (such as when you are interacting with database applications), while `Single` is used for single internal Message Queuing transactions."},{"content":"<ph id=\"ph1\">`None`</ph> enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue.","pos":[649,802],"source":"`None` enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue."},{"content":"This is useful, for example, when routing several messages sent within a single transaction.","pos":[803,895]},{"content":"If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the &lt;xref:System.Messaging.MessageQueueTransaction&gt; class and pass it into an overload of the &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; or &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; methods that takes a <ph id=\"ph1\">`transaction`</ph> parameter rather than one that takes a <ph id=\"ph2\">`transactionType`</ph> parameter.","pos":[902,1342],"source":"       If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the <xref:System.Messaging.MessageQueueTransaction> class and pass it into an overload of the <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods that takes a `transaction` parameter rather than one that takes a `transactionType` parameter."}]},{"pos":[2397,2584],"content":"A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services. If there is already an MTS transaction context, it will be used when sending or receiving the message.","needQuote":true,"needEscape":true,"nodes":[{"content":"A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services. If there is already an MTS transaction context, it will be used when sending or receiving the message.","pos":[0,187],"nodes":[{"content":"A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services.","pos":[0,84]},{"content":"If there is already an MTS transaction context, it will be used when sending or receiving the message.","pos":[85,187]}]}]},{"pos":[2706,2718],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3116,3152],"content":"Operation will not be transactional.","needQuote":true,"needEscape":true,"nodes":[{"content":"Operation will not be transactional.","pos":[0,36]}]},{"pos":[3269,3281],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3689,3746],"content":"A transaction type used for single internal transactions.","needQuote":true,"needEscape":true,"nodes":[{"content":"A transaction type used for single internal transactions.","pos":[0,57]}]},{"pos":[3865,3877],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.MessageQueueTransactionType\n  id: MessageQueueTransactionType\n  children:\n  - System.Messaging.MessageQueueTransactionType.Automatic\n  - System.Messaging.MessageQueueTransactionType.None\n  - System.Messaging.MessageQueueTransactionType.Single\n  langs:\n  - csharp\n  name: MessageQueueTransactionType\n  nameWithType: MessageQueueTransactionType\n  fullName: System.Messaging.MessageQueueTransactionType\n  type: Enum\n  summary: Specifies the type of a Message Queuing transaction.\n  remarks: \"When you read or write a message using an overload of the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods (including <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>) that takes a `transactionType` parameter, you can specify how you are interacting with the queue. `Automatic` enables you to send and receive from external transactions (such as when you are interacting with database applications), while `Single` is used for single internal Message Queuing transactions.  \\n  \\n `None` enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue. This is useful, for example, when routing several messages sent within a single transaction.  \\n  \\n If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the <xref:System.Messaging.MessageQueueTransaction> class and pass it into an overload of the <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods that takes a `transaction` parameter rather than one that takes a `transactionType` parameter.\"\n  syntax:\n    content: public enum MessageQueueTransactionType\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueTransactionType.Automatic\n  id: Automatic\n  parent: System.Messaging.MessageQueueTransactionType\n  langs:\n  - csharp\n  name: Automatic\n  nameWithType: MessageQueueTransactionType.Automatic\n  fullName: System.Messaging.MessageQueueTransactionType.Automatic\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services. If there is already an MTS transaction context, it will be used when sending or receiving the message.\n  syntax:\n    content: Automatic\n    return:\n      type: System.Messaging.MessageQueueTransactionType\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueTransactionType.None\n  id: None\n  parent: System.Messaging.MessageQueueTransactionType\n  langs:\n  - csharp\n  name: None\n  nameWithType: MessageQueueTransactionType.None\n  fullName: System.Messaging.MessageQueueTransactionType.None\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Operation will not be transactional.\n  syntax:\n    content: None\n    return:\n      type: System.Messaging.MessageQueueTransactionType\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueTransactionType.Single\n  id: Single\n  parent: System.Messaging.MessageQueueTransactionType\n  langs:\n  - csharp\n  name: Single\n  nameWithType: MessageQueueTransactionType.Single\n  fullName: System.Messaging.MessageQueueTransactionType.Single\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: A transaction type used for single internal transactions.\n  syntax:\n    content: Single\n    return:\n      type: System.Messaging.MessageQueueTransactionType\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Messaging.MessageQueueTransactionType.Automatic\n  parent: System.Messaging.MessageQueueTransactionType\n  isExternal: false\n  name: Automatic\n  nameWithType: MessageQueueTransactionType.Automatic\n  fullName: System.Messaging.MessageQueueTransactionType.Automatic\n- uid: System.Messaging.MessageQueueTransactionType\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransactionType\n  nameWithType: MessageQueueTransactionType\n  fullName: System.Messaging.MessageQueueTransactionType\n- uid: System.Messaging.MessageQueueTransactionType.None\n  parent: System.Messaging.MessageQueueTransactionType\n  isExternal: false\n  name: None\n  nameWithType: MessageQueueTransactionType.None\n  fullName: System.Messaging.MessageQueueTransactionType.None\n- uid: System.Messaging.MessageQueueTransactionType.Single\n  parent: System.Messaging.MessageQueueTransactionType\n  isExternal: false\n  name: Single\n  nameWithType: MessageQueueTransactionType.Single\n  fullName: System.Messaging.MessageQueueTransactionType.Single\n"}