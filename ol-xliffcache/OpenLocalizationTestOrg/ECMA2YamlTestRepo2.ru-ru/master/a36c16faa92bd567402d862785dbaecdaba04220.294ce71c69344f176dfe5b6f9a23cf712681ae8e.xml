{"nodes":[{"pos":[1194,1398],"content":"Describes an exception that occurred during validation of new or modified values before values are inserted, updated, or deleted by a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Describes an exception that occurred during validation of new or modified values before values are inserted, updated, or deleted by a <xref href=\"System.Web.UI.WebControls.LinqDataSource\"></xref> control."},{"pos":[1411,3458],"content":"The LinqDataSourceValidationException class contains type conversion and property setter exceptions. All of the exceptions that are thrown during validation are contained in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection. You can retrieve each validation exception by iterating through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.       You typically handle exceptions in the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, and <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> events. If a validation exception is thrown, the `Exception` property of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, or <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains a LinqDataSourceValidationException object. If no exception is thrown, the `Exception` property contains `null`.       To handle validation exceptions, create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. In the event handler, check whether the `Exception` property of the event argument class contains a value other than `null`. If the `Exception` property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.       A validation exception can occur if a value does not match the type of the property. For example, trying to update an integer property by using non-numeric characters causes a validation exception. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The LinqDataSourceValidationException class contains type conversion and property setter exceptions.","pos":[0,100]},{"content":"All of the exceptions that are thrown during validation are contained in the &lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A&gt; collection.","pos":[101,275],"source":" All of the exceptions that are thrown during validation are contained in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection."},{"content":"You can retrieve each validation exception by iterating through the &lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A&gt; collection.","pos":[276,441],"source":" You can retrieve each validation exception by iterating through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection."},{"content":"You typically handle exceptions in the &lt;xref:System.Web.UI.WebControls.LinqDataSource.Updating&gt;, &lt;xref:System.Web.UI.WebControls.LinqDataSource.Deleting&gt;, and &lt;xref:System.Web.UI.WebControls.LinqDataSource.Inserting&gt; events.","pos":[448,672],"source":"       You typically handle exceptions in the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, and <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> events."},{"content":"If a validation exception is thrown, the <ph id=\"ph1\">`Exception`</ph> property of the &lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;, &lt;xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;, or &lt;xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; object contains a LinqDataSourceValidationException object.","pos":[673,995],"source":" If a validation exception is thrown, the `Exception` property of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, or <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains a LinqDataSourceValidationException object."},{"content":"If no exception is thrown, the <ph id=\"ph1\">`Exception`</ph> property contains <ph id=\"ph2\">`null`</ph>.","pos":[996,1064],"source":" If no exception is thrown, the `Exception` property contains `null`."},{"content":"To handle validation exceptions, create a handler for the &lt;xref:System.Web.UI.WebControls.LinqDataSource.Updating&gt;, &lt;xref:System.Web.UI.WebControls.LinqDataSource.Deleting&gt;, or &lt;xref:System.Web.UI.WebControls.LinqDataSource.Inserting&gt; event.","pos":[1071,1312],"source":"       To handle validation exceptions, create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event."},{"content":"In the event handler, check whether the <ph id=\"ph1\">`Exception`</ph> property of the event argument class contains a value other than <ph id=\"ph2\">`null`</ph>.","pos":[1313,1437],"source":" In the event handler, check whether the `Exception` property of the event argument class contains a value other than `null`."},{"content":"If the <ph id=\"ph1\">`Exception`</ph> property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the &lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A&gt; property.","pos":[1438,1674],"source":" If the `Exception` property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property."},{"content":"A validation exception can occur if a value does not match the type of the property.","pos":[1681,1765]},{"content":"For example, trying to update an integer property by using non-numeric characters causes a validation exception.","pos":[1766,1878]},{"content":"A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.","pos":[1879,2041]}]},{"pos":[5506,5683],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a system-supplied message that describes the error.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with a system-supplied message that describes the error."},{"pos":[5696,6146],"content":"The system-supplied message that describes the error takes into account the current system culture.       The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.      |Property|Value|   |--------------|-----------|   |<xref:System.Exception.InnerException%2A>|`null`.|   |<xref:System.Exception.Message%2A>|A system-supplied localized description.|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The system-supplied message that describes the error takes into account the current system culture.","pos":[0,99]},{"content":"The following table shows the initial property values for an instance of the &lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException&gt; class.","pos":[106,256],"source":"       The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class."},{"content":"|Property|Value|   |--------------|-----------|   |&lt;xref:System.Exception.InnerException%2A&gt;|<ph id=\"ph1\">`null`</ph>.|   |&lt;xref:System.Exception.Message%2A&gt;|A system-supplied localized description.|","pos":[262,443],"source":"      |Property|Value|   |--------------|-----------|   |<xref:System.Exception.InnerException%2A>|`null`.|   |<xref:System.Exception.Message%2A>|A system-supplied localized description.|"}]},{"pos":[6927,7098],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specified message that describes the error.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with a specified message that describes the error."},{"pos":[7111,7461],"content":"The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.      |Property|Value|   |--------------|-----------|   |<xref:System.Exception.InnerException%2A>|`null`.|   |<xref:System.Exception.Message%2A>|The error message string specified in `message`.|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following table shows the initial property values for an instance of the &lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException&gt; class.","pos":[0,150],"source":"The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class."},{"content":"|Property|Value|   |--------------|-----------|   |&lt;xref:System.Exception.InnerException%2A&gt;|<ph id=\"ph1\">`null`</ph>.|   |&lt;xref:System.Exception.Message%2A&gt;|The error message string specified in <ph id=\"ph2\">`message`</ph>.|","pos":[156,345],"source":"      |Property|Value|   |--------------|-----------|   |<xref:System.Exception.InnerException%2A>|`null`.|   |<xref:System.Exception.Message%2A>|The error message string specified in `message`.|"}]},{"pos":[7624,7661],"content":"The message that describes the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message that describes the error.","pos":[0,37]}]},{"pos":[8596,8738],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with serialized data.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with serialized data."},{"pos":[8750,8871],"content":"This constructor is called during deserialization to reconstitute the exception object that is transmitted over a stream.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor is called during deserialization to reconstitute the exception object that is transmitted over a stream.","pos":[0,121]}]},{"pos":[9158,9207],"content":"The object that holds the serialized object data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that holds the serialized object data.","pos":[0,49]}]},{"pos":[9303,9355],"content":"Context information about the source or destination.","needQuote":true,"needEscape":true,"nodes":[{"content":"Context information about the source or destination.","pos":[0,52]}]},{"pos":[10280,10503],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specified message that describes the error, and a collection of references to inner exceptions.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with a specified message that describes the error, and a collection of references to inner exceptions."},{"pos":[10739,10776],"content":"The message that describes the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message that describes the error.","pos":[0,37]}]},{"pos":[10905,10945],"content":"The collection of validation exceptions.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection of validation exceptions.","pos":[0,40]}]},{"pos":[11702,11893],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specified error message and a reference to the inner exception.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with a specified error message and a reference to the inner exception."},{"pos":[11905,12152],"content":"You typically will not use this constructor because validation exceptions are stored in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property, not the <xref:System.Exception.InnerException%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You typically will not use this constructor because validation exceptions are stored in the &lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A&gt; property, not the &lt;xref:System.Exception.InnerException%2A&gt; property.","pos":[0,247],"source":"You typically will not use this constructor because validation exceptions are stored in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property, not the <xref:System.Exception.InnerException%2A> property."}]},{"pos":[12340,12377],"content":"The message that describes the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message that describes the error.","pos":[0,37]}]},{"pos":[12451,12508],"content":"The exception that is the cause of the current exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]}]},{"pos":[13392,13523],"content":"Gets information about the exception and adds it to the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets information about the exception and adds it to the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object."},{"pos":[13535,13855],"content":"The GetObjectData method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization. During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetObjectData method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization. During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream.","pos":[0,320],"nodes":[{"content":"The GetObjectData method adds information about the exception to the &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; object that is targeted for serialization.","pos":[0,165],"source":"The GetObjectData method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization."},{"content":"During deserialization, the exception is reconstituted from the &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; that is transmitted over the stream.","pos":[166,320],"source":" During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream."}]}]},{"pos":[14133,14221],"content":"The object that holds the serialized object data for the exception that is being thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that holds the serialized object data for the exception that is being thrown.","pos":[0,88]}]},{"pos":[14317,14369],"content":"Context information about the source or destination.","needQuote":true,"needEscape":true,"nodes":[{"content":"Context information about the source or destination.","pos":[0,52]}]},{"pos":[14977,15065],"content":"Gets one or more exceptions that occurred when new or modified data was being validated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets one or more exceptions that occurred when new or modified data was being validated.","pos":[0,88]}]},{"pos":[15077,15602],"content":"The InnerExceptions collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation. A validation exception can occur if a value does not match the type of the property. For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The InnerExceptions collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation. A validation exception can occur if a value does not match the type of the property. For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.","pos":[0,525],"nodes":[{"content":"The InnerExceptions collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation.","pos":[0,156]},{"content":"A validation exception can occur if a value does not match the type of the property.","pos":[157,241]},{"content":"For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown.","pos":[242,362]},{"content":"A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.","pos":[363,525]}]}]},{"pos":[17069,17111],"content":"A collection that contains the exceptions.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that contains the exceptions.","pos":[0,42]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException\n  id: LinqDataSourceValidationException\n  children:\n  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor\n  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)\n  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})\n  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)\n  - System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions\n  langs:\n  - csharp\n  name: LinqDataSourceValidationException\n  nameWithType: LinqDataSourceValidationException\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException\n  type: Class\n  summary: Describes an exception that occurred during validation of new or modified values before values are inserted, updated, or deleted by a <xref href=\"System.Web.UI.WebControls.LinqDataSource\"></xref> control.\n  remarks: \"The LinqDataSourceValidationException class contains type conversion and property setter exceptions. All of the exceptions that are thrown during validation are contained in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection. You can retrieve each validation exception by iterating through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.  \\n  \\n You typically handle exceptions in the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, and <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> events. If a validation exception is thrown, the `Exception` property of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, or <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains a LinqDataSourceValidationException object. If no exception is thrown, the `Exception` property contains `null`.  \\n  \\n To handle validation exceptions, create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. In the event handler, check whether the `Exception` property of the event argument class contains a value other than `null`. If the `Exception` property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.  \\n  \\n A validation exception can occur if a value does not match the type of the property. For example, trying to update an integer property by using non-numeric characters causes a validation exception. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.\"\n  example:\n  - \"The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \\n  \\n```vb#  \\nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \\n        ByVal e As LinqDataSourceUpdateEventArgs)  \\n    If (e.Exception IsNot Nothing) Then  \\n        For Each innerException As KeyValuePair(Of String, Exception) _  \\n               In e.Exception.InnerExceptions  \\n            Label1.Text &= innerException.Key & \\\": \\\" & _  \\n                innerException.Value.Message & \\\"<br />\\\"  \\n        Next  \\n        e.ExceptionHandled = True  \\n    End If  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\nprotected void LinqDataSource_Updating(object sender,   \\n        LinqDataSourceUpdateEventArgs e)  \\n{  \\n    if (e.Exception != null)  \\n    {  \\n        foreach (KeyValuePair<string, Exception> innerException in   \\n             e.Exception.InnerExceptions)  \\n        {  \\n        Label1.Text += innerException.Key + \\\": \\\" +   \\n            innerException.Value.Message + \\\"<br />\\\";  \\n        }  \\n        e.ExceptionHandled = true;  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: 'public class LinqDataSourceValidationException : Exception, System.Web.DynamicData.IDynamicValidatorException'\n  inheritance:\n  - System.Exception\n  implements:\n  - System.Web.DynamicData.IDynamicValidatorException\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  langs:\n  - csharp\n  name: LinqDataSourceValidationException()\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException()\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException()\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with a system-supplied message that describes the error.\n  remarks: \"The system-supplied message that describes the error takes into account the current system culture.  \\n  \\n The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|`null`.|  \\n|<xref:System.Exception.Message%2A>|A system-supplied localized description.|\"\n  syntax:\n    content: public LinqDataSourceValidationException ();\n    parameters: []\n  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  langs:\n  - csharp\n  name: LinqDataSourceValidationException(String)\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with a specified message that describes the error.\n  remarks: \"The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|`null`.|  \\n|<xref:System.Exception.Message%2A>|The error message string specified in `message`.|\"\n  syntax:\n    content: public LinqDataSourceValidationException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that describes the error.\n  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  langs:\n  - csharp\n  name: LinqDataSourceValidationException(SerializationInfo,StreamingContext)\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(SerializationInfo,StreamingContext)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with serialized data.\n  remarks: This constructor is called during deserialization to reconstitute the exception object that is transmitted over a stream.\n  syntax:\n    content: protected LinqDataSourceValidationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object that holds the serialized object data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Context information about the source or destination.\n  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})\n  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})'\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  langs:\n  - csharp\n  name: LinqDataSourceValidationException(String,IDictionary<String,Exception>)\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String,IDictionary<String,Exception>)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String,IDictionary<String,Exception>)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with a specified message that describes the error, and a collection of references to inner exceptions.\n  syntax:\n    content: public LinqDataSourceValidationException (string message, System.Collections.Generic.IDictionary<string,Exception> innerExceptions);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that describes the error.\n    - id: innerExceptions\n      type: System.Collections.Generic.IDictionary{System.String,System.Exception}\n      description: The collection of validation exceptions.\n  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  langs:\n  - csharp\n  name: LinqDataSourceValidationException(String,Exception)\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String,Exception)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String,Exception)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceValidationException\"></xref> class with a specified error message and a reference to the inner exception.\n  remarks: You typically will not use this constructor because validation exceptions are stored in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property, not the <xref:System.Exception.InnerException%2A> property.\n  syntax:\n    content: public LinqDataSourceValidationException (string message, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that describes the error.\n    - id: innerException\n      type: System.Exception\n      description: The exception that is the cause of the current exception.\n  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: LinqDataSourceValidationException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets information about the exception and adds it to the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object.\n  remarks: The GetObjectData method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization. During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream.\n  syntax:\n    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object that holds the serialized object data for the exception that is being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Context information about the source or destination.\n  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions\n  id: InnerExceptions\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  langs:\n  - csharp\n  name: InnerExceptions\n  nameWithType: LinqDataSourceValidationException.InnerExceptions\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets one or more exceptions that occurred when new or modified data was being validated.\n  remarks: The InnerExceptions collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation. A validation exception can occur if a value does not match the type of the property. For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \\n  \\n```vb#  \\nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \\n        ByVal e As LinqDataSourceUpdateEventArgs)  \\n    If (e.Exception IsNot Nothing) Then  \\n        For Each innerException As KeyValuePair(Of String, Exception) _  \\n                In e.Exception.InnerExceptions  \\n          Label1.Text &= innerException.Key & \\\": \\\" & _   \\n                  innerException.Value.Message & \\\"<br />\\\"  \\n        Next  \\n        e.ExceptionHandled = True  \\n    End If  \\nEnd Sub  \\n```  \\n  \\n [C#]  \\n  \\n```  \\nprotected void LinqDataSource_Updating(object sender,   \\n        LinqDataSourceUpdateEventArgs e)   \\n{  \\n    if (e.Exception != null)  \\n    {  \\n        foreach (KeyValuePair<string, Exception> innerException in   \\n            e.Exception.InnerExceptions)  \\n        {  \\n            Label1.Text += innerException.Key + \\\": \\\" +   \\n                innerException.Message + \\\"<br />\\\";  \\n        }  \\n        e.ExceptionHandled = true;  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,Exception> InnerExceptions { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Exception}\n      description: A collection that contains the exceptions.\n  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Exception\n  isExternal: false\n  name: System.Exception\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: LinqDataSourceValidationException()\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException()\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException()\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: LinqDataSourceValidationException(String)\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: LinqDataSourceValidationException(SerializationInfo,StreamingContext)\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(SerializationInfo,StreamingContext)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: LinqDataSourceValidationException(String,IDictionary<String,Exception>)\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String,IDictionary<String,Exception>)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String,IDictionary<String,Exception>)\n- uid: System.Collections.Generic.IDictionary{System.String,System.Exception}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,Exception>\n  nameWithType: IDictionary<String,Exception>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Exception>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.Exception>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Exception\n    name: Exception\n    nameWithType: Exception\n    fullName: Exception\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: LinqDataSourceValidationException(String,Exception)\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String,Exception)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String,Exception)\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: LinqDataSourceValidationException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: InnerExceptions\n  nameWithType: LinqDataSourceValidationException.InnerExceptions\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: LinqDataSourceValidationException\n  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData*\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: GetObjectData\n  nameWithType: LinqDataSourceValidationException.GetObjectData\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions*\n  parent: System.Web.UI.WebControls.LinqDataSourceValidationException\n  isExternal: false\n  name: InnerExceptions\n  nameWithType: LinqDataSourceValidationException.InnerExceptions\n"}