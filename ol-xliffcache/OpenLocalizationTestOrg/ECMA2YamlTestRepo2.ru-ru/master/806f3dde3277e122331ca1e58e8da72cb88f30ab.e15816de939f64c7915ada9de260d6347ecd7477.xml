{"nodes":[{"pos":[751,835],"content":"Specifies what type to use as a converter for the object this attribute is bound to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies what type to use as a converter for the object this attribute is bound to.","pos":[0,84]}]},{"pos":[848,2850],"content":"The class you use for conversion must inherit from <xref:System.ComponentModel.TypeConverter>. Use the <xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A> property to get the name of the class that provides the data conversion for the object this attribute is bound to.       For more information about attributes, see [Attributes](~/add/includes/ajax-current-ext-md.md). For more information about type converters, see the <xref:System.ComponentModel.TypeConverter> base class and [How to: Implement a Type Converter](~/add/includes/ajax-current-ext-md.md).       In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the TypeConverterAttribute attribute to your type. The argument of the attribute references your type converter implementation. Your type converter should be able to accept values from a string that is used for attributes or initialization text in XAML markup, and convert that string into your intended destination type. For more information, see[TypeConverters and XAML](~/add/includes/ajax-current-ext-md.md).       Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property. In this case, you apply TypeConverterAttribute to the property definition (the outer definition, not the specific `get` and `set` definitions).       A type converter behavior for XAML usage of a custom attachable member can be assigned by applying TypeConverterAttribute to the `get` method accessor that supports the XAML usage. For more information, see [Attached Properties Overview](~/add/includes/ajax-current-ext-md.md).       For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members. For more information, see <xref:System.Windows.Markup.ValueSerializer>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The class you use for conversion must inherit from &lt;xref:System.ComponentModel.TypeConverter&gt;.","pos":[0,94],"source":"The class you use for conversion must inherit from <xref:System.ComponentModel.TypeConverter>."},{"content":"Use the &lt;xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A&gt; property to get the name of the class that provides the data conversion for the object this attribute is bound to.","pos":[95,290],"source":" Use the <xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A> property to get the name of the class that provides the data conversion for the object this attribute is bound to."},{"content":"For more information about attributes, see <bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[297,392],"source":"       For more information about attributes, see [Attributes](~/add/includes/ajax-current-ext-md.md)."},{"content":"For more information about type converters, see the &lt;xref:System.ComponentModel.TypeConverter&gt; base class and <bpt id=\"p1\">[</bpt>How to: Implement a Type Converter<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[393,579],"source":" For more information about type converters, see the <xref:System.ComponentModel.TypeConverter> base class and [How to: Implement a Type Converter](~/add/includes/ajax-current-ext-md.md)."},{"content":"In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the TypeConverterAttribute attribute to your type.","pos":[586,752]},{"content":"The argument of the attribute references your type converter implementation.","pos":[753,829]},{"content":"Your type converter should be able to accept values from a string that is used for attributes or initialization text in XAML markup, and convert that string into your intended destination type.","pos":[830,1023]},{"content":"For more information, see<bpt id=\"p1\">[</bpt>TypeConverters and XAML<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1024,1114],"source":" For more information, see[TypeConverters and XAML](~/add/includes/ajax-current-ext-md.md)."},{"content":"Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property.","pos":[1121,1249]},{"content":"In this case, you apply TypeConverterAttribute to the property definition (the outer definition, not the specific <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> definitions).","pos":[1250,1393],"source":" In this case, you apply TypeConverterAttribute to the property definition (the outer definition, not the specific `get` and `set` definitions)."},{"content":"A type converter behavior for XAML usage of a custom attachable member can be assigned by applying TypeConverterAttribute to the <ph id=\"ph1\">`get`</ph> method accessor that supports the XAML usage.","pos":[1400,1580],"source":"       A type converter behavior for XAML usage of a custom attachable member can be assigned by applying TypeConverterAttribute to the `get` method accessor that supports the XAML usage."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Attached Properties Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1581,1677],"source":" For more information, see [Attached Properties Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members.","pos":[1684,1920]},{"content":"For more information, see &lt;xref:System.Windows.Markup.ValueSerializer&gt;.","pos":[1921,1992],"source":" For more information, see <xref:System.Windows.Markup.ValueSerializer>."}]},{"pos":[4706,4875],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the default type converter, which is an empty string (\"\").","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class with the default type converter, which is an empty string (\"\")."},{"pos":[4887,4992],"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The class that provides the data conversion must inherit from &lt;xref:System.ComponentModel.TypeConverter&gt;.","pos":[0,105],"source":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>."}]},{"pos":[5638,5839],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified type name as the data converter for the object this attribute is bound to.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type name as the data converter for the object this attribute is bound to."},{"pos":[5851,5956],"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The class that provides the data conversion must inherit from &lt;xref:System.ComponentModel.TypeConverter&gt;.","pos":[0,105],"source":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>."}]},{"pos":[6109,6216],"content":"The fully qualified name of the class to use for data conversion for the object this attribute is bound to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified name of the class to use for data conversion for the object this attribute is bound to.","pos":[0,107]}]},{"pos":[6776,6972],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified type as the data converter for the object this attribute is bound to.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type as the data converter for the object this attribute is bound to."},{"pos":[6984,7089],"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The class that provides the data conversion must inherit from &lt;xref:System.ComponentModel.TypeConverter&gt;.","pos":[0,105],"source":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>."}]},{"pos":[7230,7368],"content":"A <xref:System.Type> that represents the type of the converter class to use for data conversion for the object this attribute is bound to.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; that represents the type of the converter class to use for data conversion for the object this attribute is bound to.","pos":[0,138],"source":"A <xref:System.Type> that represents the type of the converter class to use for data conversion for the object this attribute is bound to."}]},{"pos":[7888,8013],"content":"Gets the fully qualified type name of the <xref:System.Type> to use as a converter for the object this attribute is bound to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the fully qualified type name of the &lt;xref:System.Type&gt; to use as a converter for the object this attribute is bound to.","pos":[0,125],"source":"Gets the fully qualified type name of the <xref:System.Type> to use as a converter for the object this attribute is bound to."}]},{"pos":[8135,8338],"content":"The fully qualified type name of the <xref:System.Type> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists. The default value is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified type name of the <xref:System.Type> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists. The default value is an empty string (\"\").","pos":[0,203],"nodes":[{"content":"The fully qualified type name of the &lt;xref:System.Type&gt; to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists.","pos":[0,160],"source":"The fully qualified type name of the <xref:System.Type> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists."},{"content":"The default value is an empty string (\"\").","pos":[161,203]}]}]},{"pos":[8817,8900],"content":"Specifies the type to use as a converter for the object this attribute is bound to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the type to use as a converter for the object this attribute is bound to.","pos":[0,83]}]},{"pos":[9089,9101],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9554,9690],"content":"Returns whether the value of the given object is equal to the current <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns whether the value of the given object is equal to the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>."},{"pos":[9831,9872],"content":"The object to test the value equality of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to test the value equality of.","pos":[0,41]}]},{"pos":[9931,10198],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the value of the given object is equal to that of the current <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the value of the given object is equal to that of the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10693,10733],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[10868,10962],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.TypeConverterAttribute\n  id: TypeConverterAttribute\n  children:\n  - System.ComponentModel.TypeConverterAttribute.#ctor\n  - System.ComponentModel.TypeConverterAttribute.#ctor(System.String)\n  - System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)\n  - System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n  - System.ComponentModel.TypeConverterAttribute.Default\n  - System.ComponentModel.TypeConverterAttribute.Equals(System.Object)\n  - System.ComponentModel.TypeConverterAttribute.GetHashCode\n  langs:\n  - csharp\n  name: TypeConverterAttribute\n  nameWithType: TypeConverterAttribute\n  fullName: System.ComponentModel.TypeConverterAttribute\n  type: Class\n  summary: Specifies what type to use as a converter for the object this attribute is bound to.\n  remarks: \"The class you use for conversion must inherit from <xref:System.ComponentModel.TypeConverter>. Use the <xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A> property to get the name of the class that provides the data conversion for the object this attribute is bound to.  \\n  \\n For more information about attributes, see [Attributes](~/add/includes/ajax-current-ext-md.md). For more information about type converters, see the <xref:System.ComponentModel.TypeConverter> base class and [How to: Implement a Type Converter](~/add/includes/ajax-current-ext-md.md).  \\n  \\n In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the TypeConverterAttribute attribute to your type. The argument of the attribute references your type converter implementation. Your type converter should be able to accept values from a string that is used for attributes or initialization text in XAML markup, and convert that string into your intended destination type. For more information, see[TypeConverters and XAML](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property. In this case, you apply TypeConverterAttribute to the property definition (the outer definition, not the specific `get` and `set` definitions).  \\n  \\n A type converter behavior for XAML usage of a custom attachable member can be assigned by applying TypeConverterAttribute to the `get` method accessor that supports the XAML usage. For more information, see [Attached Properties Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members. For more information, see <xref:System.Windows.Markup.ValueSerializer>.\"\n  example:\n  - \"The following example declares `MyClass` to use the type converter called `MyClassConverter`. This example assumes that `MyClassConverter` has been implemented elsewhere. The class implementing the converter (`MyClassConverter`) must inherit from the <xref:System.ComponentModel.TypeConverter> class.  \\n  \\n [!code-vb[Classic TypeConverterAttribute Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._140_1.vb)]\\n [!code-cpp[Classic TypeConverterAttribute Example#1](~/add/codesnippet/cpp/t-system.componentmodel._140_1.cpp)]\\n [!code-cs[Classic TypeConverterAttribute Example#1](~/add/codesnippet/csharp/t-system.componentmodel._140_1.cs)]  \\n  \\n The next example creates an instance of `MyClass`. Then it gets the attributes for the class, and prints the name of the type converter used by `MyClass`.  \\n  \\n [!code-vb[Classic TypeConverterAttribute Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._140_2.vb)]\\n [!code-cpp[Classic TypeConverterAttribute Example#2](~/add/codesnippet/cpp/t-system.componentmodel._140_2.cpp)]\\n [!code-cs[Classic TypeConverterAttribute Example#2](~/add/codesnippet/csharp/t-system.componentmodel._140_2.cs)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.All)]\n\n      public sealed class TypeConverterAttribute : Attribute\n  inheritance:\n  - System.Attribute\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: TypeConverterAttribute()\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute()\n  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class with the default type converter, which is an empty string (\"\").\n  remarks: The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.\n  syntax:\n    content: public TypeConverterAttribute ();\n    parameters: []\n  overload: System.ComponentModel.TypeConverterAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: TypeConverterAttribute(String)\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute(String)\n  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type name as the data converter for the object this attribute is bound to.\n  remarks: The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.\n  syntax:\n    content: public TypeConverterAttribute (string typeName);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The fully qualified name of the class to use for data conversion for the object this attribute is bound to.\n  overload: System.ComponentModel.TypeConverterAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)\n  id: '#ctor(System.Type)'\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: TypeConverterAttribute(Type)\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute(Type)\n  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute(Type)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type as the data converter for the object this attribute is bound to.\n  remarks: The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.\n  syntax:\n    content: public TypeConverterAttribute (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> that represents the type of the converter class to use for data conversion for the object this attribute is bound to.\n  overload: System.ComponentModel.TypeConverterAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n  id: ConverterTypeName\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: ConverterTypeName\n  nameWithType: TypeConverterAttribute.ConverterTypeName\n  fullName: System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the fully qualified type name of the <xref:System.Type> to use as a converter for the object this attribute is bound to.\n  syntax:\n    content: public string ConverterTypeName { get; }\n    return:\n      type: System.String\n      description: The fully qualified type name of the <xref:System.Type> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists. The default value is an empty string (\"\").\n  overload: System.ComponentModel.TypeConverterAttribute.ConverterTypeName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.TypeConverterAttribute.Default\n  id: Default\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: Default\n  nameWithType: TypeConverterAttribute.Default\n  fullName: System.ComponentModel.TypeConverterAttribute.Default\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Specifies the type to use as a converter for the object this attribute is bound to.\n  syntax:\n    content: public static readonly System.ComponentModel.TypeConverterAttribute Default;\n    return:\n      type: System.ComponentModel.TypeConverterAttribute\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.TypeConverterAttribute.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: TypeConverterAttribute.Equals(Object)\n  fullName: System.ComponentModel.TypeConverterAttribute.Equals(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns whether the value of the given object is equal to the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to test the value equality of.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the value of the given object is equal to that of the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.TypeConverterAttribute.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.TypeConverterAttribute.GetHashCode\n  id: GetHashCode\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: TypeConverterAttribute.GetHashCode()\n  fullName: System.ComponentModel.TypeConverterAttribute.GetHashCode()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>.\n  overload: System.ComponentModel.TypeConverterAttribute.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Attribute\n  isExternal: false\n  name: System.Attribute\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: TypeConverterAttribute()\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute()\n  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute()\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.String)\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: TypeConverterAttribute(String)\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute(String)\n  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: TypeConverterAttribute(Type)\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute(Type)\n  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute(Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: ConverterTypeName\n  nameWithType: TypeConverterAttribute.ConverterTypeName\n  fullName: System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n- uid: System.ComponentModel.TypeConverterAttribute.Default\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: Default\n  nameWithType: TypeConverterAttribute.Default\n  fullName: System.ComponentModel.TypeConverterAttribute.Default\n- uid: System.ComponentModel.TypeConverterAttribute\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeConverterAttribute\n  nameWithType: TypeConverterAttribute\n  fullName: System.ComponentModel.TypeConverterAttribute\n- uid: System.ComponentModel.TypeConverterAttribute.Equals(System.Object)\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: TypeConverterAttribute.Equals(Object)\n  fullName: System.ComponentModel.TypeConverterAttribute.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.TypeConverterAttribute.GetHashCode\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: TypeConverterAttribute.GetHashCode()\n  fullName: System.ComponentModel.TypeConverterAttribute.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor*\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: TypeConverterAttribute\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute\n- uid: System.ComponentModel.TypeConverterAttribute.ConverterTypeName*\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: ConverterTypeName\n  nameWithType: TypeConverterAttribute.ConverterTypeName\n- uid: System.ComponentModel.TypeConverterAttribute.Equals*\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: Equals\n  nameWithType: TypeConverterAttribute.Equals\n- uid: System.ComponentModel.TypeConverterAttribute.GetHashCode*\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: GetHashCode\n  nameWithType: TypeConverterAttribute.GetHashCode\n"}