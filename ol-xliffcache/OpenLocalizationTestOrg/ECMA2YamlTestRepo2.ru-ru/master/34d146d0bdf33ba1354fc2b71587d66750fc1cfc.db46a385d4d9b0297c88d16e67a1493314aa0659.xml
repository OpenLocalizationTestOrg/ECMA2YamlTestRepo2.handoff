{"nodes":[{"pos":[504,585],"content":"Defines a method for objects that import custom policy assertions about bindings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a method for objects that import custom policy assertions about bindings.","pos":[0,81]}]},{"pos":[598,4398],"content":"Implement the IPolicyImportExtension interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements. Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.       Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, IPolicyImportExtension does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> constructor.       [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.       An IPolicyImportExtension implementation performs the following steps:      1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.      2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.      3.  Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.       Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.      > [!IMPORTANT] >  A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer. It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.       Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format.       If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>.      > [!NOTE] >  You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Implement the IPolicyImportExtension interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements.","pos":[0,180]},{"content":"Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.","pos":[181,382]},{"content":"Unlike its counterpart, &lt;xref:System.ServiceModel.Description.IPolicyExportExtension&gt;, IPolicyImportExtension does not require implementation by a &lt;xref:System.ServiceModel.Channels.BindingElement&gt; object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the &lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName&gt; constructor.","pos":[389,809],"source":"       Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, IPolicyImportExtension does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> constructor."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph> passes two objects to the &lt;xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A&gt; method, a &lt;xref:System.ServiceModel.Description.MetadataImporter&gt; and a &lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;.","pos":[816,1114],"source":"[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>."},{"content":"Typically the &lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt; object already contains the policy assertions for each binding scope.","pos":[1115,1261],"source":" Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope."},{"content":"An IPolicyImportExtension implementation performs the following steps:      1.","pos":[1268,1346]},{"content":"Locates the custom policy assertion for which it is responsible by calling either the &lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A&gt;, &lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A&gt;, or &lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A&gt; methods, depending upon the scope.","pos":[1348,1750],"source":"  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope."},{"content":"2.","pos":[1756,1758]},{"content":"Removes the policy assertion from the assertion collection.","pos":[1760,1819]},{"content":"The &lt;xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName&gt; method locates, returns, and removes the assertion in one step.","pos":[1820,1987],"source":" The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step."},{"content":"3.","pos":[1993,1995]},{"content":"Modify the binding stack or the contract by either adding a required custom &lt;xref:System.ServiceModel.Channels.BindingElement&gt; to the &lt;xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A&gt; property or by modifying the &lt;xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName&gt; property.","pos":[1997,2351],"source":"  Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property."},{"content":"Step 2 is important.","pos":[2358,2378]},{"content":"After all policy importers have been called, <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> checks for the existence of any policy assertions that remain.","pos":[2379,2545],"source":" After all policy importers have been called, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] checks for the existence of any policy assertions that remain."},{"content":"If one exists, <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> assumes that the policy import was unsuccessful and does not import the associated binding.","pos":[2546,2711],"source":" If one exists, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer.","pos":[2717,2862],"source":"      > [!IMPORTANT] >  A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer."},{"content":"It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.","pos":[2863,2974]},{"content":"Custom &lt;xref:System.ServiceModel.Description.MetadataImporter&gt; implementations must implement their own &lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt; object to extract the policy assertions attached to the custom metadata format.","pos":[2981,3227],"source":"       Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format."},{"content":"If you want to export and import custom WSDL elements that are not policy assertions, see &lt;xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName&gt; and &lt;xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName&gt;.","pos":[3234,3498],"source":"       If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can use custom policy importers and exporters with the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> by using the same configuration elements in a configuration file and the <ph id=\"ph2\">`/svcutilConfig:&lt;configFile&gt;`</ph> option.","pos":[3504,3776],"source":"      > [!NOTE] >  You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option."}]},{"pos":[6465,6561],"content":"Defines a method that can import custom policy assertions and add implementing binding elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a method that can import custom policy assertions and add implementing binding elements.","pos":[0,96]}]},{"pos":[6574,8773],"content":"Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion. Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.       [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] passes two objects to the ImportPolicy method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.       An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:      1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.      2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.      3.  Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.       Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Implement the <ph id=\"ph1\">`ImportPolicy`</ph> method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion.","pos":[0,155],"source":"Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion."},{"content":"Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.","pos":[156,309]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph> passes two objects to the ImportPolicy method, a &lt;xref:System.ServiceModel.Description.MetadataImporter&gt; and a &lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;.","pos":[316,549],"source":"[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] passes two objects to the ImportPolicy method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>."},{"content":"Typically the &lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt; object already contains the policy assertions for each binding scope.","pos":[550,696],"source":" Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope."},{"content":"An &lt;xref:System.ServiceModel.Description.IPolicyImportExtension&gt; implementation performs the following steps:      1.","pos":[703,820],"source":"       An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:      1."},{"content":"Locates the custom policy assertion for which it is responsible by calling either the &lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A&gt;, &lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A&gt;, or &lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A&gt; methods, depending upon the scope.","pos":[822,1224],"source":"  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope."},{"content":"2.","pos":[1230,1232]},{"content":"Removes the policy assertion from the assertion collection.","pos":[1234,1293]},{"content":"The &lt;xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName&gt; method locates, returns, and removes the assertion in one step.","pos":[1294,1461],"source":" The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step."},{"content":"3.","pos":[1467,1469]},{"content":"Modifies the binding stack or the contract by either adding a required custom &lt;xref:System.ServiceModel.Channels.BindingElement&gt; to the &lt;xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A&gt; property or by modifying the &lt;xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName&gt; property.","pos":[1471,1827],"source":"  Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property."},{"content":"Step 2 is important.","pos":[1834,1854]},{"content":"After all policy importers have been called, <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> checks for the existence of any policy assertions that remain.","pos":[1855,2021],"source":" After all policy importers have been called, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] checks for the existence of any policy assertions that remain."},{"content":"If one exists, <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> assumes that the policy import was unsuccessful and does not import the associated binding.","pos":[2022,2187],"source":" If one exists, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding."}]},{"pos":[10247,10335],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Description.MetadataImporter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object in use.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ServiceModel.Description.MetadataImporter\"></xref> object in use."},{"pos":[10441,10676],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Description.PolicyConversionContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ServiceModel.Description.PolicyConversionContext\"></xref> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Description.IPolicyImportExtension\n  id: IPolicyImportExtension\n  children:\n  - System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  langs:\n  - csharp\n  name: IPolicyImportExtension\n  nameWithType: IPolicyImportExtension\n  fullName: System.ServiceModel.Description.IPolicyImportExtension\n  type: Interface\n  summary: Defines a method for objects that import custom policy assertions about bindings.\n  remarks: \"Implement the IPolicyImportExtension interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements. Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.  \\n  \\n Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, IPolicyImportExtension does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> constructor.  \\n  \\n [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.  \\n  \\n An IPolicyImportExtension implementation performs the following steps:  \\n  \\n1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.  \\n  \\n2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.  \\n  \\n3.  Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.  \\n  \\n Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.  \\n  \\n> [!IMPORTANT]\\n>  A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer. It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.  \\n  \\n Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format.  \\n  \\n If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method to locate, return, and remove the assertion in one step.  \\n  \\n [!code-cs[CustomPolicySample#1](~/add/codesnippet/csharp/custompolicysample.client/policyimporter.cs#1)]\\n [!code-vb[CustomPolicySample#1](~/add/codesnippet/visualbasic/custompolicysample.client/policyimporter.vb#1)]  \\n  \\n The following code example shows the client application configuration file to load the custom policy importer when the <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=fullName> is invoked.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \\n  \\n The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and resolve metadata into description objects.  \\n  \\n [!code-vb[CustomPolicySample#10](~/add/codesnippet/visualbasic/custompolicysample.client/client.vb#10)]\\n [!code-cs[CustomPolicySample#10](~/add/codesnippet/csharp/custompolicysample.client/client.cs#10)]\"\n  syntax:\n    content: public interface IPolicyImportExtension\n  implements: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  id: ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  parent: System.ServiceModel.Description.IPolicyImportExtension\n  langs:\n  - csharp\n  name: ImportPolicy(MetadataImporter,PolicyConversionContext)\n  nameWithType: IPolicyImportExtension.ImportPolicy(MetadataImporter,PolicyConversionContext)\n  fullName: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter,PolicyConversionContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: Defines a method that can import custom policy assertions and add implementing binding elements.\n  remarks: \"Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion. Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.  \\n  \\n [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] passes two objects to the ImportPolicy method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.  \\n  \\n An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:  \\n  \\n1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.  \\n  \\n2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.  \\n  \\n3.  Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.  \\n  \\n Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method to locate, return, and remove the assertion in one step.  \\n  \\n [!code-cs[CustomPolicySample#1](~/add/codesnippet/csharp/custompolicysample.client/policyimporter.cs#1)]\\n [!code-vb[CustomPolicySample#1](~/add/codesnippet/visualbasic/custompolicysample.client/policyimporter.vb#1)]  \\n  \\n The following code example shows the client application configuration file to load the custom policy importer when the <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=fullName> is invoked.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \\n  \\n The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and resolve metadata into description objects.  \\n  \\n [!code-vb[CustomPolicySample#10](~/add/codesnippet/visualbasic/custompolicysample.client/client.vb#10)]\\n [!code-cs[CustomPolicySample#10](~/add/codesnippet/csharp/custompolicysample.client/client.cs#10)]\"\n  syntax:\n    content: public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);\n    parameters:\n    - id: importer\n      type: System.ServiceModel.Description.MetadataImporter\n      description: The <xref href=\"System.ServiceModel.Description.MetadataImporter\"></xref> object in use.\n    - id: context\n      type: System.ServiceModel.Description.PolicyConversionContext\n      description: The <xref href=\"System.ServiceModel.Description.PolicyConversionContext\"></xref> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added.\n  overload: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  parent: System.ServiceModel.Description.IPolicyImportExtension\n  isExternal: false\n  name: ImportPolicy(MetadataImporter,PolicyConversionContext)\n  nameWithType: IPolicyImportExtension.ImportPolicy(MetadataImporter,PolicyConversionContext)\n  fullName: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(MetadataImporter,PolicyConversionContext)\n- uid: System.ServiceModel.Description.MetadataImporter\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: MetadataImporter\n  nameWithType: MetadataImporter\n  fullName: System.ServiceModel.Description.MetadataImporter\n- uid: System.ServiceModel.Description.PolicyConversionContext\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: PolicyConversionContext\n  nameWithType: PolicyConversionContext\n  fullName: System.ServiceModel.Description.PolicyConversionContext\n- uid: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy*\n  parent: System.ServiceModel.Description.IPolicyImportExtension\n  isExternal: false\n  name: ImportPolicy\n  nameWithType: IPolicyImportExtension.ImportPolicy\n"}