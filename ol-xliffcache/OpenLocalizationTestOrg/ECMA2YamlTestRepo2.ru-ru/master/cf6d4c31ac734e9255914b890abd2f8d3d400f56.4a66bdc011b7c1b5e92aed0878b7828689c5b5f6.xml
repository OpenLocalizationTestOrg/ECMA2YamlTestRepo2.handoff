{"nodes":[{"pos":[2329,2367],"content":"Represents the strip lines on a chart.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the strip lines on a chart.","pos":[0,38]}]},{"pos":[2380,5350],"content":"Strip lines, or strips, are horizontal or vertical ranges that shade the background of a chart in regular or custom intervals. You can use strip lines to:      -   Improve readability for looking up individual values on the chart.      -   Separate data points when reading the chart.      -   Highlight dates that occur at regular intervals, for example, to identify weekend data points.      -   Highlight a specific key range of data.      -   Add a threshold line at a specific constant value.       A single StripLine object can either be drawn once, or repeatedly, for a given interval. This action is controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property. When a value of -1 is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, one strip line will be drawn. When a non-zero value is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, a strip line will be drawn repeatedly at each given interval. The location where a strip line is drawn is also affected by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> properties of the strip line.       Strip lines are always associated with an <xref:System.Web.UI.DataVisualization.Charting.Axis> object. They can be added at both design time and run time.       To add a horizontal or vertical line to display a threshold, set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to a value of 0.0. This will result in a line being drawn. You can use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties for the color, width and style of the line. No chart background properties (`Back*`) are used when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0.       Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> property of the strip line to associate text with a strip line. The placement and orientation of this text can be controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A> property.       When multiple strip lines are defined for the same axis, it is possible that the strip lines will overlap. The Z-order of StripLine objects is determined by their order of occurrence in the <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> object. This means that the first occurrence is drawn first; the second occurrence is drawn second, and so on.       Strip lines are not supported for the following chart types: Pie, Doughnut, Funnel, Pyramid, Kagi, ThreeLineBreak, PointAndFigure, Polar and Radar.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Strip lines, or strips, are horizontal or vertical ranges that shade the background of a chart in regular or custom intervals.","pos":[0,126]},{"content":"You can use strip lines to:      -   Improve readability for looking up individual values on the chart.","pos":[127,230]},{"content":"-   Separate data points when reading the chart.","pos":[236,284]},{"content":"-   Highlight dates that occur at regular intervals, for example, to identify weekend data points.","pos":[290,388]},{"content":"-   Highlight a specific key range of data.","pos":[394,437]},{"content":"-   Add a threshold line at a specific constant value.","pos":[443,497]},{"content":"A single StripLine object can either be drawn once, or repeatedly, for a given interval.","pos":[504,592]},{"content":"This action is controlled by the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A&gt; property.","pos":[593,705],"source":" This action is controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property."},{"content":"When a value of -1 is assigned to the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A&gt; property, one strip line will be drawn.","pos":[706,853],"source":" When a value of -1 is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, one strip line will be drawn."},{"content":"When a non-zero value is assigned to the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A&gt; property, a strip line will be drawn repeatedly at each given interval.","pos":[854,1036],"source":" When a non-zero value is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, a strip line will be drawn repeatedly at each given interval."},{"content":"The location where a strip line is drawn is also affected by the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A&gt; and &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A&gt; properties of the strip line.","pos":[1037,1291],"source":" The location where a strip line is drawn is also affected by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> properties of the strip line."},{"content":"Strip lines are always associated with an &lt;xref:System.Web.UI.DataVisualization.Charting.Axis&gt; object.","pos":[1298,1400],"source":"       Strip lines are always associated with an <xref:System.Web.UI.DataVisualization.Charting.Axis> object."},{"content":"They can be added at both design time and run time.","pos":[1401,1452]},{"content":"To add a horizontal or vertical line to display a threshold, set the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property to a value of 0.0.","pos":[1459,1627],"source":"       To add a horizontal or vertical line to display a threshold, set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to a value of 0.0."},{"content":"This will result in a line being drawn.","pos":[1628,1667]},{"content":"You can use the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A&gt;, &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A&gt; and &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A&gt; properties for the color, width and style of the line.","pos":[1668,1966],"source":" You can use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties for the color, width and style of the line."},{"content":"No chart background properties (<ph id=\"ph1\">`Back*`</ph>) are used when the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property is set to 0.0.","pos":[1967,2121],"source":" No chart background properties (`Back*`) are used when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0."},{"content":"Use the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A&gt; property of the strip line to associate text with a strip line.","pos":[2128,2265],"source":"       Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> property of the strip line to associate text with a strip line."},{"content":"The placement and orientation of this text can be controlled by the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A&gt; property.","pos":[2266,2418],"source":" The placement and orientation of this text can be controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A> property."},{"content":"When multiple strip lines are defined for the same axis, it is possible that the strip lines will overlap.","pos":[2425,2531]},{"content":"The Z-order of StripLine objects is determined by their order of occurrence in the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection&gt; object.","pos":[2532,2691],"source":" The Z-order of StripLine objects is determined by their order of occurrence in the <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> object."},{"content":"This means that the first occurrence is drawn first; the second occurrence is drawn second, and so on.","pos":[2692,2794]},{"content":"Strip lines are not supported for the following chart types: Pie, Doughnut, Funnel, Pyramid, Kagi, ThreeLineBreak, PointAndFigure, Polar and Radar.","pos":[2801,2948]}]},{"pos":[14417,14529],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"></xref> class."},{"pos":[15124,15176],"content":"Gets or sets the background color of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the background color of the strip line.","pos":[0,52]}]},{"pos":[15189,15903],"content":"You can set this property to any valid ARGB (alpha, red, green, blue) value.       To set a gradient for the strip line, set the BackColor and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties.       If you set this color to \"transparent\"—in other words, set the alpha value to 0—no color will be assigned to the background of the element. As a result, the background will be transparent.       If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0, a line will be drawn and the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> property will determine the color of the line, not this property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can set this property to any valid ARGB (alpha, red, green, blue) value.       To set a gradient for the strip line, set the BackColor and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties.       If you set this color to \"transparent\"—in other words, set the alpha value to 0—no color will be assigned to the background of the element. As a result, the background will be transparent.       If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0, a line will be drawn and the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> property will determine the color of the line, not this property.","pos":[0,706],"nodes":[{"content":"You can set this property to any valid ARGB (alpha, red, green, blue) value.","pos":[0,76]},{"content":"To set a gradient for the strip line, set the BackColor and &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A&gt; properties.","pos":[83,234],"source":"       To set a gradient for the strip line, set the BackColor and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties."},{"content":"If you set this color to \"transparent\"—in other words, set the alpha value to 0—no color will be assigned to the background of the element.","pos":[241,380]},{"content":"As a result, the background will be transparent.","pos":[381,429]},{"content":"If the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property is set to 0.0, a line will be drawn and the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A&gt; property will determine the color of the line, not this property.","pos":[436,706],"source":"       If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0, a line will be drawn and the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> property will determine the color of the line, not this property."}]}]},{"pos":[24146,24257],"content":"A <xref href=\"System.Drawing.Color\"></xref> structure. The default color is <xref:System.Drawing.Color.White*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","pos":[0,54],"source":"A <xref href=\"System.Drawing.Color\"></xref> structure."},{"content":"The default color is &lt;xref:System.Drawing.Color.White*&gt;.","pos":[55,111],"source":" The default color is <xref:System.Drawing.Color.White*>."}]},{"pos":[24833,24883],"content":"Gets or sets the gradient style of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the gradient style of the strip line.","pos":[0,50]}]},{"pos":[24896,25585],"content":"The BackGradientStyle property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used.       To use gradient colors:      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color.      -   Set this BackGradientStyle property of the chart element to the desired gradient style.       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The BackGradientStyle property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used.       To use gradient colors:      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color.      -   Set this BackGradientStyle property of the chart element to the desired gradient style.       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.","pos":[0,679],"nodes":[{"content":"The BackGradientStyle property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used.","pos":[0,143]},{"content":"To use gradient colors:      -   Use the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A&gt; property to set the primary color.","pos":[150,296],"source":"       To use gradient colors:      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color."},{"content":"-   Use the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A&gt; property to set the secondary color.","pos":[302,430],"source":"      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color."},{"content":"-   Set this BackGradientStyle property of the chart element to the desired gradient style.","pos":[436,527]},{"content":"This property is not applicable if the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property is set to a value of 0.0.","pos":[534,679],"source":"       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0."}]}]},{"pos":[25802,25990],"content":"A <xref href=\"System.Web.UI.DataVisualization.Charting.GradientStyle\"></xref> enumeration. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.GradientStyle\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.GradientStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","pos":[0,90],"source":"A <xref href=\"System.Web.UI.DataVisualization.Charting.GradientStyle\"></xref> enumeration."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.GradientStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[91,188],"source":" The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.GradientStyle\"></xref>."}]},{"pos":[26559,26609],"content":"Gets or sets the hatching style of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the hatching style of the strip line.","pos":[0,50]}]},{"pos":[26621,27079],"content":"The hatch pattern consists of a solid background color and lines drawn over the background. The two colors used in the hatch style are set by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties. This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The hatch pattern consists of a solid background color and lines drawn over the background. The two colors used in the hatch style are set by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties. This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.","pos":[0,458],"nodes":[{"content":"The hatch pattern consists of a solid background color and lines drawn over the background.","pos":[0,91]},{"content":"The two colors used in the hatch style are set by the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A&gt; and &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A&gt; properties.","pos":[92,312],"source":" The two colors used in the hatch style are set by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties."},{"content":"This property is not applicable if the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property is set to a value of 0.0.","pos":[313,458],"source":" This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0."}]}]},{"pos":[27296,27488],"content":"A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartHatchStyle\"></xref> enumeration. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartHatchStyle\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.ChartHatchStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","pos":[0,92],"source":"A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartHatchStyle\"></xref> enumeration."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.ChartHatchStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[93,192],"source":" The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartHatchStyle\"></xref>."}]},{"pos":[28029,28081],"content":"Gets or sets the background image of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the background image of the strip line.","pos":[0,52]}]},{"pos":[28094,28984],"content":"The BackImage property defines a path to a background image for many chart elements, and is an absolute or relative URL.       To position this image, use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> properties.       You can also specify that one color will be displayed by the image as \"transparent\" by setting the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> property.       An image can be any valid graphics file supported by .NET Framework, including icons.       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.       Background images take precedence over other background properties, such as gradient colors.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The BackImage property defines a path to a background image for many chart elements, and is an absolute or relative URL.       To position this image, use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> properties.       You can also specify that one color will be displayed by the image as \"transparent\" by setting the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> property.       An image can be any valid graphics file supported by .NET Framework, including icons.       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.       Background images take precedence over other background properties, such as gradient colors.","pos":[0,878],"nodes":[{"content":"The BackImage property defines a path to a background image for many chart elements, and is an absolute or relative URL.","pos":[0,120]},{"content":"To position this image, use the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A&gt; and &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A&gt; properties.","pos":[127,333],"source":"       To position this image, use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> properties."},{"content":"You can also specify that one color will be displayed by the image as \"transparent\" by setting the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A&gt; property.","pos":[340,535],"source":"       You can also specify that one color will be displayed by the image as \"transparent\" by setting the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> property."},{"content":"An image can be any valid graphics file supported by .NET Framework, including icons.","pos":[542,627]},{"content":"This property is not applicable if the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property is set to a value of 0.0.","pos":[634,779],"source":"       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0."},{"content":"Background images take precedence over other background properties, such as gradient colors.","pos":[786,878]}]}]},{"pos":[29104,29243],"content":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents an image file URL. The default is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents an image file URL.","pos":[0,107],"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents an image file URL."},{"content":"The default is an empty string.","pos":[108,139]}]},{"pos":[29824,29868],"content":"Gets or sets the background image alignment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the background image alignment.","pos":[0,44]}]},{"pos":[29881,30311],"content":"This property determines the alignment of the background image for strip lines; it is only applied when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>.       For more information about available alignments, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle> enumeration topic.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property determines the alignment of the background image for strip lines; it is only applied when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>.       For more information about available alignments, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle> enumeration topic.","pos":[0,428],"nodes":[{"content":"This property determines the alignment of the background image for strip lines; it is only applied when the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A&gt; property is set to &lt;xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&gt;.","pos":[0,273],"source":"This property determines the alignment of the background image for strip lines; it is only applied when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>."},{"content":"For more information about available alignments, see the &lt;xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&gt; enumeration topic.","pos":[280,428],"source":"       For more information about available alignments, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle> enumeration topic."}]}]},{"pos":[30551,30767],"content":"A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\"></xref> enumeration value. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value.","pos":[0,107],"source":"A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\"></xref> enumeration value."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[108,216],"source":" The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\"></xref>."}]},{"pos":[31392,31488],"content":"Gets or sets the color of a strip line background image that will be implemented as transparent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the color of a strip line background image that will be implemented as transparent.","pos":[0,96]}]},{"pos":[31500,31645],"content":"This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is not applicable if the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property is set to a value of 0.0.","pos":[0,145],"source":"This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0."}]},{"pos":[31801,31889],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that will be displayed as transparent.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Color\"></xref> value that will be displayed as transparent."},{"pos":[32481,32553],"content":"Gets or sets the drawing mode of the background image of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the drawing mode of the background image of the strip line.","pos":[0,72]}]},{"pos":[32566,33416],"content":"This property determines how the image is displayed; that is, tiled, scaled, and so forth.       If an image is scaled, it will be stretched to fit within the bounding strip line. If the image is tiled, it is repeatedly drawn, starting from the top-left corner.       For more information concerning the available wrapping modes, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> enumeration topic.       If the BackImageWrapMode property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, the location where the image is drawn will be determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> property setting.       This property is not applicable if <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is set to a value of 0.0.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property determines how the image is displayed; that is, tiled, scaled, and so forth.       If an image is scaled, it will be stretched to fit within the bounding strip line. If the image is tiled, it is repeatedly drawn, starting from the top-left corner.       For more information concerning the available wrapping modes, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> enumeration topic.       If the BackImageWrapMode property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, the location where the image is drawn will be determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> property setting.       This property is not applicable if <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is set to a value of 0.0.","pos":[0,842],"nodes":[{"content":"This property determines how the image is displayed; that is, tiled, scaled, and so forth.","pos":[0,90]},{"content":"If an image is scaled, it will be stretched to fit within the bounding strip line.","pos":[97,179]},{"content":"If the image is tiled, it is repeatedly drawn, starting from the top-left corner.","pos":[180,261]},{"content":"For more information concerning the available wrapping modes, see the &lt;xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&gt; enumeration topic.","pos":[268,423],"source":"       For more information concerning the available wrapping modes, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> enumeration topic."},{"content":"If the BackImageWrapMode property is set to &lt;xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&gt;, the location where the image is drawn will be determined by the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A&gt; property setting.","pos":[430,703],"source":"       If the BackImageWrapMode property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, the location where the image is drawn will be determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> property setting."},{"content":"This property is not applicable if &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; is set to a value of 0.0.","pos":[710,842],"source":"       This property is not applicable if <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is set to a value of 0.0."}]}]},{"pos":[33643,33843],"content":"A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\"></xref> integer enumeration. The default is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> integer enumeration.","pos":[0,103],"source":"A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\"></xref> integer enumeration."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[104,200],"source":" The default is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\"></xref>."}]},{"pos":[34432,34494],"content":"Gets or sets the secondary color of the strip line background.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the secondary color of the strip line background.","pos":[0,62]}]},{"pos":[34507,35403],"content":"This property determines the secondary background color of many chart objects, and is used when gradient colors are being applied.       You can set background secondary color to any valid ARGB (alpha, red, green, blue) value.       If hatching is used, the BackSecondaryColor property determines the color of the hatching lines.       To use gradient colors for the background of a chart element:      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.      -   Use this BackSecondaryColor property to set the secondary color.      -   Set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property to the desired gradient style.       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property determines the secondary background color of many chart objects, and is used when gradient colors are being applied.       You can set background secondary color to any valid ARGB (alpha, red, green, blue) value.       If hatching is used, the BackSecondaryColor property determines the color of the hatching lines.       To use gradient colors for the background of a chart element:      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.      -   Use this BackSecondaryColor property to set the secondary color.      -   Set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property to the desired gradient style.       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.","pos":[0,882],"nodes":[{"content":"This property determines the secondary background color of many chart objects, and is used when gradient colors are being applied.","pos":[0,130]},{"content":"You can set background secondary color to any valid ARGB (alpha, red, green, blue) value.","pos":[137,226]},{"content":"If hatching is used, the BackSecondaryColor property determines the color of the hatching lines.","pos":[233,329]},{"content":"To use gradient colors for the background of a chart element:      -   Use the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A&gt; property to set the primary color.","pos":[336,520],"source":"       To use gradient colors for the background of a chart element:      -   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color."},{"content":"-   Use this BackSecondaryColor property to set the secondary color.","pos":[526,594]},{"content":"-   Set the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A&gt; property to the desired gradient style.","pos":[600,730],"source":"      -   Set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property to the desired gradient style."},{"content":"This property is not applicable if the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property is set to a value of 0.0.","pos":[737,882],"source":"       This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0."}]}]},{"pos":[35553,35743],"content":"A <xref href=\"System.Drawing.Color\"></xref> value used for the secondary color of a background with hatching or gradient fill. The default color is <xref href=\"System.Drawing.Color\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value used for the secondary color of a background with hatching or gradient fill.","pos":[0,126],"source":"A <xref href=\"System.Drawing.Color\"></xref> value used for the secondary color of a background with hatching or gradient fill."},{"content":"The default color is <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[127,190],"source":" The default color is <xref href=\"System.Drawing.Color\"></xref>."}]},{"pos":[36298,36344],"content":"Gets or sets the border color of a strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the border color of a strip line.","pos":[0,46]}]},{"pos":[36357,36803],"content":"You can set this property to any valid ARGB (alpha, red, green, blue) value.       If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property of a <xref:System.Web.UI.DataVisualization.Charting.StripLine> object is set to 0.0, a line will be drawn, and it is this property and not the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property setting that will determine the color of the line.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can set this property to any valid ARGB (alpha, red, green, blue) value.       If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property of a <xref:System.Web.UI.DataVisualization.Charting.StripLine> object is set to 0.0, a line will be drawn, and it is this property and not the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property setting that will determine the color of the line.","pos":[0,444],"nodes":[{"content":"You can set this property to any valid ARGB (alpha, red, green, blue) value.","pos":[0,76]},{"content":"If the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property of a &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine&gt; object is set to 0.0, a line will be drawn, and it is this property and not the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A&gt; property setting that will determine the color of the line.","pos":[83,444],"source":"       If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property of a <xref:System.Web.UI.DataVisualization.Charting.StripLine> object is set to 0.0, a line will be drawn, and it is this property and not the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property setting that will determine the color of the line."}]}]},{"pos":[36946,37060],"content":"A <xref href=\"System.Drawing.Color\"></xref> value. The default color is <xref href=\"System.Drawing.Color\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","pos":[0,50],"source":"A <xref href=\"System.Drawing.Color\"></xref> value."},{"content":"The default color is <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[51,114],"source":" The default color is <xref href=\"System.Drawing.Color\"></xref>."}]},{"pos":[37628,37676],"content":"Gets or sets the border style of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the border style of the strip line.","pos":[0,48]}]},{"pos":[37688,37814],"content":"This property specifies the line style used for a border. The line can be solid, dotted or some variation of solid and dotted.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property specifies the line style used for a border. The line can be solid, dotted or some variation of solid and dotted.","pos":[0,126],"nodes":[{"content":"This property specifies the line style used for a border.","pos":[0,57]},{"content":"The line can be solid, dotted or some variation of solid and dotted.","pos":[58,126]}]}]},{"pos":[38030,38178],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.ChartDashStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that determines the border style of the strip line.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartDashStyle\"></xref> enumeration value that determines the border style of the strip line."},{"pos":[38730,38778],"content":"Gets or sets the border width of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the border width of the strip line.","pos":[0,48]}]},{"pos":[38790,38826],"content":"This property is measured in pixels.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is measured in pixels.","pos":[0,36]}]},{"pos":[38943,39083],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that determines the width of the strip line's border, in pixels.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"></xref> value that determines the width of the strip line's border, in pixels."},{"pos":[39668,39831],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"></xref> and optionally releases the managed resources."},{"pos":[39987,40196],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[40705,40756],"content":"Gets or sets the font used for the strip line text.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the font used for the strip line text.","pos":[0,51]}]},{"pos":[40889,40986],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Font\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the font of the strip line text.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Font\"></xref> value that represents the font of the strip line text."},{"pos":[41517,41563],"content":"Gets or sets the color of the strip line text.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the color of the strip line text.","pos":[0,46]}]},{"pos":[41575,41714],"content":"You can specify any valid ARGB color for this property. This property is only applicable when a text value is specified for the strip line.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can specify any valid ARGB color for this property. This property is only applicable when a text value is specified for the strip line.","pos":[0,139],"nodes":[{"content":"You can specify any valid ARGB color for this property.","pos":[0,55]},{"content":"This property is only applicable when a text value is specified for the strip line.","pos":[56,139]}]}]},{"pos":[41854,42008],"content":"A <xref href=\"System.Drawing.Color\"></xref> value that represents the text color of a strip line. The default value is <xref:System.Drawing.Color.Black*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the text color of a strip line.","pos":[0,97],"source":"A <xref href=\"System.Drawing.Color\"></xref> value that represents the text color of a strip line."},{"content":"The default value is &lt;xref:System.Drawing.Color.Black*&gt;.","pos":[98,154],"source":" The default value is <xref:System.Drawing.Color.Black*>."}]},{"pos":[42539,42644],"content":"Gets or sets the interval for a strip line, and determines if the strip line is drawn once or repeatedly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the interval for a strip line, and determines if the strip line is drawn once or repeatedly.","pos":[0,105]}]},{"pos":[42656,43101],"content":"When you set the Interval property to a value of zero (0.0), one strip line will be displayed, with a width specified by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property. When you set Interval to a value of other than zero, multiple strip lines will be shown. The unit that is used for the Interval property is defined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you set the Interval property to a value of zero (0.0), one strip line will be displayed, with a width specified by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property. When you set Interval to a value of other than zero, multiple strip lines will be shown. The unit that is used for the Interval property is defined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.","pos":[0,445],"nodes":[{"content":"When you set the Interval property to a value of zero (0.0), one strip line will be displayed, with a width specified by the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property.","pos":[0,206],"source":"When you set the Interval property to a value of zero (0.0), one strip line will be displayed, with a width specified by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property."},{"content":"When you set Interval to a value of other than zero, multiple strip lines will be shown.","pos":[207,295]},{"content":"The unit that is used for the Interval property is defined by the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A&gt; property.","pos":[296,445],"source":" The unit that is used for the Interval property is defined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property."}]}]},{"pos":[51321,51469],"content":"A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> value that represents the interval between strip lines. The default value is 0.0.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the interval between strip lines.","pos":[0,122],"source":"A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> value that represents the interval between strip lines."},{"content":"The default value is 0.0.","pos":[123,148]}]},{"pos":[52029,52108],"content":"Gets or sets the offset of grid lines, tick marks, strip lines and axis labels.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the offset of grid lines, tick marks, strip lines and axis labels.","pos":[0,79]}]},{"pos":[52121,52603],"content":"The interval offset of minor tick marks and grid lines is never affected by the value of the <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A> property of the <xref:System.Web.UI.DataVisualization.Charting.Axis> object.       The IntervalOffset property setting defines the units of measurement of the offset.       The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> can be a negative value.       The default value is `Auto` (`0`).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The interval offset of minor tick marks and grid lines is never affected by the value of the &lt;xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A&gt; property of the &lt;xref:System.Web.UI.DataVisualization.Charting.Axis&gt; object.","pos":[0,240],"source":"The interval offset of minor tick marks and grid lines is never affected by the value of the <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A> property of the <xref:System.Web.UI.DataVisualization.Charting.Axis> object."},{"content":"The IntervalOffset property setting defines the units of measurement of the offset.","pos":[247,330]},{"content":"The &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A&gt; can be a negative value.","pos":[337,435],"source":"       The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> can be a negative value."},{"content":"The default value is <ph id=\"ph1\">`Auto`</ph> (<ph id=\"ph2\">`0`</ph>).","pos":[442,476],"source":"       The default value is `Auto` (`0`)."}]},{"pos":[60830,60939],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the interval offset.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> value that represents the interval offset."},{"pos":[61525,61581],"content":"Gets or sets the interval offset type of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the interval offset type of the strip line.","pos":[0,56]}]},{"pos":[61593,61837],"content":"By default, this property is set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>; the actual value of this property is determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, this property is set to &lt;xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&gt;; the actual value of this property is determined by the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A&gt; property.","pos":[0,244],"source":"By default, this property is set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>; the actual value of this property is determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property."}]},{"pos":[70170,70411],"content":"A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the interval type. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that indicates the interval type.","pos":[0,136],"source":"A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the interval type."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[137,241],"source":" The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>."}]},{"pos":[70971,71086],"content":"Gets or sets the interval type of a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the interval type of a <xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"></xref> object."},{"pos":[71099,71604],"content":"Interval types can be set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, in which case the type depends on: the X-value or Y-value types of the plotted <xref:System.Web.UI.DataVisualization.Charting.DataPoint> objects—depending on which axis the <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects belong to—and the axis scale.       The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property determines how often a strip or line is drawn.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Interval types can be set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, in which case the type depends on: the X-value or Y-value types of the plotted <xref:System.Web.UI.DataVisualization.Charting.DataPoint> objects—depending on which axis the <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects belong to—and the axis scale.       The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property determines how often a strip or line is drawn.","pos":[0,503],"nodes":[{"content":"Interval types can be set to &lt;xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&gt;, in which case the type depends on: the X-value or Y-value types of the plotted &lt;xref:System.Web.UI.DataVisualization.Charting.DataPoint&gt; objects—depending on which axis the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine&gt; objects belong to—and the axis scale.","pos":[0,367],"source":"Interval types can be set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, in which case the type depends on: the X-value or Y-value types of the plotted <xref:System.Web.UI.DataVisualization.Charting.DataPoint> objects—depending on which axis the <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects belong to—and the axis scale."},{"content":"The &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A&gt; property determines how often a strip or line is drawn.","pos":[374,503],"source":"       The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property determines how often a strip or line is drawn."}]}]},{"pos":[79932,80173],"content":"A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the interval type. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that indicates the interval type.","pos":[0,136],"source":"A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the interval type."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[137,241],"source":" The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>."}]},{"pos":[80752,80807],"content":"Gets or sets the map area attributes of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the map area attributes of the strip line.","pos":[0,55]}]},{"pos":[80934,81084],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the attributes of the chart element's corresponding map area.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the attributes of the chart element's corresponding map area."},{"pos":[81603,81635],"content":"Gets the name of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the strip line.","pos":[0,32]}]},{"pos":[81744,81860],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the name of the strip line.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the name of the strip line."},{"pos":[82411,82550],"content":"Gets or sets the postback value that can be processed on a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.Chart.Click\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Gets or sets the postback value that can be processed on a <xref href=\"System.Web.UI.DataVisualization.Charting.Chart.Click\"></xref> event."},{"pos":[82673,82823],"content":"A string value that represents the postback value that is passed to a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.Chart.Click\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"A string value that represents the postback value that is passed to a <xref href=\"System.Web.UI.DataVisualization.Charting.Chart.Click\"></xref> event."},{"pos":[83368,83407],"content":"Gets or sets the width of a strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the width of a strip line.","pos":[0,39]}]},{"pos":[83420,84557],"content":"This property cannot be set to a value less than 0.0, otherwise an exception will be raised.       A setting of 0.0 will result in a line being drawn; this line will use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> property settings for its color, width and style. None of the `Back*` properties in this class are utilized when the value of StripWidth is 0.0.       If you set the StripWidth property to a value greater than 0.0, a strip will be created. The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties only apply to the border of the strip; all of the `Back*` properties are then used for the background properties of the strip.       If the value of the StripWidth property is greater than 0.0, the units are determined by the relevant axis scale.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property cannot be set to a value less than 0.0, otherwise an exception will be raised.","pos":[0,92]},{"content":"A setting of 0.0 will result in a line being drawn; this line will use the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A&gt;, &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A&gt; and &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A&gt; property settings for its color, width and style.","pos":[99,451],"source":"       A setting of 0.0 will result in a line being drawn; this line will use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> property settings for its color, width and style."},{"content":"None of the <ph id=\"ph1\">`Back*`</ph> properties in this class are utilized when the value of StripWidth is 0.0.","pos":[452,546],"source":" None of the `Back*` properties in this class are utilized when the value of StripWidth is 0.0."},{"content":"If you set the StripWidth property to a value greater than 0.0, a strip will be created.","pos":[553,641]},{"content":"The &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A&gt;, &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A&gt; and &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A&gt; properties only apply to the border of the strip; all of the <ph id=\"ph1\">`Back*`</ph> properties are then used for the background properties of the strip.","pos":[642,1011],"source":" The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties only apply to the border of the strip; all of the `Back*` properties are then used for the background properties of the strip."},{"content":"If the value of the StripWidth property is greater than 0.0, the units are determined by the relevant axis scale.","pos":[1018,1131]}]},{"pos":[84678,84828],"content":"A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> value that determines whether a strip or a line is drawn. The default value is 0.0.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that determines whether a strip or a line is drawn.","pos":[0,124],"source":"A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> value that determines whether a strip or a line is drawn."},{"content":"The default value is 0.0.","pos":[125,150]}]},{"pos":[85390,85514],"content":"Gets or sets the unit of measurement for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the unit of measurement for the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*&gt; property.","pos":[0,124],"source":"Gets or sets the unit of measurement for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*> property."}]},{"pos":[85527,86147],"content":"This property determines the units used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property. For example, to set a strip line to represent \"one week\", you could set this property to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> and set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to one (1.0).       You can change the value of this property from <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> to a <xref:System.DateTime> value when the relevant axis scale uses a <xref:System.DateTime> value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property determines the units used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property. For example, to set a strip line to represent \"one week\", you could set this property to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> and set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to one (1.0).       You can change the value of this property from <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> to a <xref:System.DateTime> value when the relevant axis scale uses a <xref:System.DateTime> value.","pos":[0,616],"nodes":[{"content":"This property determines the units used for the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property.","pos":[0,129],"source":"This property determines the units used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property."},{"content":"For example, to set a strip line to represent \"one week\", you could set this property to &lt;xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&gt; and set the &lt;xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A&gt; property to one (1.0).","pos":[130,394],"source":" For example, to set a strip line to represent \"one week\", you could set this property to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> and set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to one (1.0)."},{"content":"You can change the value of this property from &lt;xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&gt; to a &lt;xref:System.DateTime&gt; value when the relevant axis scale uses a &lt;xref:System.DateTime&gt; value.","pos":[401,616],"source":"       You can change the value of this property from <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> to a <xref:System.DateTime> value when the relevant axis scale uses a <xref:System.DateTime> value."}]}]},{"pos":[86375,86613],"content":"A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the width type. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration value that indicates the width type.","pos":[0,133],"source":"A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the width type."},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[134,238],"source":" The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>."}]},{"pos":[87129,87170],"content":"Gets or sets the text for the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the text for the strip line.","pos":[0,41]}]},{"pos":[87182,87228],"content":"Use this property to add text to a strip line.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this property to add text to a strip line.","pos":[0,46]}]},{"pos":[91341,91455],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the text of a strip line.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the text of a strip line."},{"pos":[92006,92056],"content":"Gets or sets the text alignment of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the text alignment of the strip line.","pos":[0,50]}]},{"pos":[96617,96730],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringAlignment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the alignment of the strip line text.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.StringAlignment\"></xref> value that represents the alignment of the strip line text."},{"pos":[97310,97366],"content":"Gets or sets the text line alignment of strip line text.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the text line alignment of strip line text.","pos":[0,56]}]},{"pos":[101931,102038],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.StringAlignment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the alignment of the text line.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.StringAlignment\"></xref> value that represents the alignment of the text line."},{"pos":[102612,102646],"content":"Gets or sets the text orientation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the text orientation.","pos":[0,34]}]},{"pos":[102658,103061],"content":"When this property is set to a value of <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, the text is oriented based on the chart type. For all X-Y chart types other than Bar, X-axis strip line text is oriented horizontally from left to right on the bottom of the strip line. For Bar charts, X-axis strip line text is oriented vertically from top to bottom to the right of the strip line.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When this property is set to a value of <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, the text is oriented based on the chart type. For all X-Y chart types other than Bar, X-axis strip line text is oriented horizontally from left to right on the bottom of the strip line. For Bar charts, X-axis strip line text is oriented vertically from top to bottom to the right of the strip line.","pos":[0,403],"nodes":[{"content":"When this property is set to a value of &lt;xref:System.Web.UI.DataVisualization.Charting.TextOrientation&gt;, the text is oriented based on the chart type.","pos":[0,150],"source":"When this property is set to a value of <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, the text is oriented based on the chart type."},{"content":"For all X-Y chart types other than Bar, X-axis strip line text is oriented horizontally from left to right on the bottom of the strip line.","pos":[151,290]},{"content":"For Bar charts, X-axis strip line text is oriented vertically from top to bottom to the right of the strip line.","pos":[291,403]}]}]},{"pos":[107658,107736],"content":"A TextOrientation value that represents the alignment of the text orientation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A TextOrientation value that represents the alignment of the text orientation.","pos":[0,78]}]},{"pos":[108268,108309],"content":"Gets or sets the tooltip of a strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the tooltip of a strip line.","pos":[0,41]}]},{"pos":[108322,108749],"content":"If you set this property, a client-side image map will automatically be created, and a map area will be created with the Title attribute set to the specified tooltip string. The map area will use the dimensions that correspond to the strip line.       Setting this property will have no effect if the <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> property is set to `false`. The default value is true.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you set this property, a client-side image map will automatically be created, and a map area will be created with the Title attribute set to the specified tooltip string.","pos":[0,173]},{"content":"The map area will use the dimensions that correspond to the strip line.","pos":[174,245]},{"content":"Setting this property will have no effect if the &lt;xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A&gt; property is set to <ph id=\"ph1\">`false`</ph>.","pos":[252,398],"source":"       Setting this property will have no effect if the <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> property is set to `false`."},{"content":"The default value is true.","pos":[399,425]}]},{"pos":[108867,108986],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the tooltip of the strip line.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the tooltip of the strip line."},{"pos":[109490,109557],"content":"Gets or sets the destination URL or anchor point of the strip line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the destination URL or anchor point of the strip line.","pos":[0,67]}]},{"pos":[109569,109751],"content":"To use an absolute URL, start the string expression with either \"http://\" or \"www.\". If the string does not start with either of these prefixes, it will be treated as a relative URL.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To use an absolute URL, start the string expression with either \"http://\" or \"www.\". If the string does not start with either of these prefixes, it will be treated as a relative URL.","pos":[0,182],"nodes":[{"content":"To use an absolute URL, start the string expression with either \"http://\" or \"www.\".","pos":[0,84]},{"content":"If the string does not start with either of these prefixes, it will be treated as a relative URL.","pos":[85,182]}]}]},{"pos":[109864,110007],"content":"A <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that represents the destination URL or anchor point of the strip line.","needQuote":true,"needEscape":true,"source":"A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the destination URL or anchor point of the strip line."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.DataVisualization.Charting.StripLine\n  id: StripLine\n  children:\n  - System.Web.UI.DataVisualization.Charting.StripLine.#ctor\n  - System.Web.UI.DataVisualization.Charting.StripLine.BackColor\n  - System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle\n  - System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle\n  - System.Web.UI.DataVisualization.Charting.StripLine.BackImage\n  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment\n  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor\n  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode\n  - System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor\n  - System.Web.UI.DataVisualization.Charting.StripLine.BorderColor\n  - System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle\n  - System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth\n  - System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)\n  - System.Web.UI.DataVisualization.Charting.StripLine.Font\n  - System.Web.UI.DataVisualization.Charting.StripLine.ForeColor\n  - System.Web.UI.DataVisualization.Charting.StripLine.Interval\n  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset\n  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType\n  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalType\n  - System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes\n  - System.Web.UI.DataVisualization.Charting.StripLine.Name\n  - System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue\n  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidth\n  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType\n  - System.Web.UI.DataVisualization.Charting.StripLine.Text\n  - System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment\n  - System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment\n  - System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation\n  - System.Web.UI.DataVisualization.Charting.StripLine.ToolTip\n  - System.Web.UI.DataVisualization.Charting.StripLine.Url\n  langs:\n  - csharp\n  name: StripLine\n  nameWithType: StripLine\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine\n  type: Class\n  summary: Represents the strip lines on a chart.\n  remarks: \"Strip lines, or strips, are horizontal or vertical ranges that shade the background of a chart in regular or custom intervals. You can use strip lines to:  \\n  \\n-   Improve readability for looking up individual values on the chart.  \\n  \\n-   Separate data points when reading the chart.  \\n  \\n-   Highlight dates that occur at regular intervals, for example, to identify weekend data points.  \\n  \\n-   Highlight a specific key range of data.  \\n  \\n-   Add a threshold line at a specific constant value.  \\n  \\n A single StripLine object can either be drawn once, or repeatedly, for a given interval. This action is controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property. When a value of -1 is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, one strip line will be drawn. When a non-zero value is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, a strip line will be drawn repeatedly at each given interval. The location where a strip line is drawn is also affected by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> properties of the strip line.  \\n  \\n Strip lines are always associated with an <xref:System.Web.UI.DataVisualization.Charting.Axis> object. They can be added at both design time and run time.  \\n  \\n To add a horizontal or vertical line to display a threshold, set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to a value of 0.0. This will result in a line being drawn. You can use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties for the color, width and style of the line. No chart background properties (`Back*`) are used when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0.  \\n  \\n Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> property of the strip line to associate text with a strip line. The placement and orientation of this text can be controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A> property.  \\n  \\n When multiple strip lines are defined for the same axis, it is possible that the strip lines will overlap. The Z-order of StripLine objects is determined by their order of occurrence in the <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> object. This means that the first occurrence is drawn first; the second occurrence is drawn second, and so on.  \\n  \\n Strip lines are not supported for the following chart types: Pie, Doughnut, Funnel, Pyramid, Kagi, ThreeLineBreak, PointAndFigure, Polar and Radar.\"\n  example:\n  - \"The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds repeating horizontal strip lines.   \\n        AddHorizRepeatingStripLines()   \\n  \\n        ' Highlights weekend points using strip lines.   \\n        HighlightWeekendsWithStripLines()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ' Adds a week of data with values between 20 and 35.   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ' Adds repeating horizontal strip lines at intervals of 5.   \\n    Private Sub AddHorizRepeatingStripLines()   \\n        ' Instantiate new strip line   \\n        Dim stripLine1 As New StripLine()  \\n        stripLine1.StripWidth = 2.5   \\n        stripLine1.Interval = 5   \\n  \\n        ' Consider adding transparency so that the strip lines are lighter   \\n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \\n  \\n        ' Add the strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \\n    End Sub   \\n  \\n    ' Adds strip lines to highlight weekend values.   \\n    Private Sub HighlightWeekendsWithStripLines()   \\n        ' Set strip line to highlight weekends   \\n        Dim stripLine2 As New StripLine()   \\n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \\n        stripLine2.IntervalOffset = -1.5   \\n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \\n        stripLine2.Interval = 1   \\n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \\n        stripLine2.StripWidth = 2   \\n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \\n  \\n        ' Set the axis label to show the name of the day   \\n        ' This is done in order to demonstrate that weekends are highlighted   \\n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \\\"ddd\\\"   \\n    End Sub   \\n  \\n    ' Adds a horizontal threshold strip line at the mean value of the first series.  \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds repeating horizontal strip lines.  \\n            AddHorizRepeatingStripLines();  \\n  \\n            // Highlights weekend points using strip lines.  \\n            HighlightWeekendsWithStripLines();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds repeating horizontal strip lines at intervals of 5.  \\n        /// </summary>  \\n        private void AddHorizRepeatingStripLines()  \\n        {  \\n            // Instantiate new strip line  \\n            StripLine stripLine1 = new StripLine();  \\n            stripLine1.StripWidth = 0;  \\n            stripLine1.BorderColor = Color.Black;  \\n            stripLine1.BorderWidth = 3;  \\n            stripLine1.Interval = 5;  \\n  \\n            // Consider adding transparency so that the strip lines are lighter  \\n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \\n  \\n            stripLine1.BackSecondaryColor = Color.Black;  \\n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \\n  \\n            // Add the strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds strip lines to highlight weekend values.  \\n        /// </summary>  \\n        private void HighlightWeekendsWithStripLines()  \\n        {  \\n            // Set strip line to highlight weekends  \\n            StripLine stripLine2 = new StripLine();  \\n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \\n            stripLine2.IntervalOffset = -1.5;  \\n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \\n            stripLine2.Interval = 1;  \\n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \\n            stripLine2.StripWidth = 2;  \\n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \\n  \\n            // Set the axis label to show the name of the day  \\n            // This is done in order to demonstrate that weekends are highlighted  \\n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \\\"ddd\\\";  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultProperty(\"IntervalOffset\")]\n\n      public class StripLine : System.Web.UI.DataVisualization.Charting.ChartElement, System.Web.UI.DataVisualization.Charting.IChartMapArea\n  inheritance:\n  - System.Object\n  - System.Web.UI.DataVisualization.Charting.ChartElement\n  implements:\n  - System.Web.UI.DataVisualization.Charting.IChartMapArea\n  inheritedMembers:\n  - System.Web.UI.DataVisualization.Charting.ChartElement.Dispose\n  - System.Web.UI.DataVisualization.Charting.ChartElement.Equals(System.Object)\n  - System.Web.UI.DataVisualization.Charting.ChartElement.GetHashCode\n  - System.Web.UI.DataVisualization.Charting.ChartElement.Tag\n  - System.Web.UI.DataVisualization.Charting.ChartElement.ToString\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: StripLine()\n  nameWithType: StripLine.StripLine()\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()\n  type: Constructor\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"></xref> class.\n  syntax:\n    content: public StripLine ();\n    parameters: []\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor\n  id: BackColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BackColor\n  nameWithType: StripLine.BackColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the background color of the strip line.\n  remarks: \"You can set this property to any valid ARGB (alpha, red, green, blue) value.  \\n  \\n To set a gradient for the strip line, set the BackColor and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties.  \\n  \\n If you set this color to \\\"transparent\\\"—in other words, set the alpha value to 0—no color will be assigned to the background of the element. As a result, the background will be transparent.  \\n  \\n If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0, a line will be drawn and the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> property will determine the color of the line, not this property.\"\n  example:\n  - \"The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds repeating horizontal strip lines.   \\n        AddHorizRepeatingStripLines()   \\n  \\n        ' Highlights weekend points using strip lines.   \\n        HighlightWeekendsWithStripLines()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds repeating horizontal strip lines at intervals of 5.   \\n    ''' </summary>   \\n    Private Sub AddHorizRepeatingStripLines()   \\n        ' Instantiate new strip line   \\n        Dim stripLine1 As New StripLine()   \\n        stripLine1.StripWidth = 2.5   \\n        stripLine1.Interval = 5   \\n  \\n        ' Consider adding transparency so that the strip lines are lighter   \\n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \\n  \\n        ' Add the strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds strip lines to highlight weekend values.   \\n    ''' </summary>   \\n    Private Sub HighlightWeekendsWithStripLines()   \\n        ' Set strip line to highlight weekends   \\n        Dim stripLine2 As New StripLine()   \\n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \\n        stripLine2.IntervalOffset = -1.5   \\n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \\n        stripLine2.Interval = 1   \\n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \\n        stripLine2.StripWidth = 2   \\n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \\n  \\n        ' Set the axis label to show the name of the day   \\n        ' This is done in order to demonstrate that weekends are highlighted   \\n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \\\"ddd\\\"   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds repeating horizontal strip lines.  \\n            AddHorizRepeatingStripLines();  \\n  \\n            // Highlights weekend points using strip lines.  \\n            HighlightWeekendsWithStripLines();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds repeating horizontal strip lines at intervals of 5.  \\n        /// </summary>  \\n        private void AddHorizRepeatingStripLines()  \\n        {  \\n            // Instantiate new strip line  \\n            StripLine stripLine1 = new StripLine();  \\n            stripLine1.StripWidth = 0;  \\n            stripLine1.BorderColor = Color.Black;  \\n            stripLine1.BorderWidth = 3;  \\n            stripLine1.Interval = 5;  \\n  \\n            // Consider adding transparency so that the strip lines are lighter  \\n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \\n  \\n            stripLine1.BackSecondaryColor = Color.Black;  \\n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \\n  \\n            // Add the strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds strip lines to highlight weekend values.  \\n        /// </summary>  \\n        private void HighlightWeekendsWithStripLines()  \\n        {  \\n            // Set strip line to highlight weekends  \\n            StripLine stripLine2 = new StripLine();  \\n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \\n            stripLine2.IntervalOffset = -1.5;  \\n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \\n            stripLine2.Interval = 1;  \\n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \\n            stripLine2.StripWidth = 2;  \\n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \\n  \\n            // Set the axis label to show the name of the day  \\n            // This is done in order to demonstrate that weekends are highlighted  \\n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \\\"ddd\\\";  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public System.Drawing.Color BackColor { get; set; }\n    return:\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> structure. The default color is <xref:System.Drawing.Color.White*>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle\n  id: BackGradientStyle\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BackGradientStyle\n  nameWithType: StripLine.BackGradientStyle\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the gradient style of the strip line.\n  remarks: \"The BackGradientStyle property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used.  \\n  \\n To use gradient colors:  \\n  \\n-   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.  \\n  \\n-   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color.  \\n  \\n-   Set this BackGradientStyle property of the chart element to the desired gradient style.  \\n  \\n This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.\"\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.GradientStyle\n      description: A <xref href=\"System.Web.UI.DataVisualization.Charting.GradientStyle\"></xref> enumeration. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.GradientStyle\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle\n  id: BackHatchStyle\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BackHatchStyle\n  nameWithType: StripLine.BackHatchStyle\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the hatching style of the strip line.\n  remarks: The hatch pattern consists of a solid background color and lines drawn over the background. The two colors used in the hatch style are set by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties. This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.ChartHatchStyle\n      description: A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartHatchStyle\"></xref> enumeration. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartHatchStyle\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage\n  id: BackImage\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BackImage\n  nameWithType: StripLine.BackImage\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the background image of the strip line.\n  remarks: \"The BackImage property defines a path to a background image for many chart elements, and is an absolute or relative URL.  \\n  \\n To position this image, use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> properties.  \\n  \\n You can also specify that one color will be displayed by the image as \\\"transparent\\\" by setting the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> property.  \\n  \\n An image can be any valid graphics file supported by .NET Framework, including icons.  \\n  \\n This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.  \\n  \\n Background images take precedence over other background properties, such as gradient colors.\"\n  syntax:\n    content: public string BackImage { get; set; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents an image file URL. The default is an empty string.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment\n  id: BackImageAlignment\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BackImageAlignment\n  nameWithType: StripLine.BackImageAlignment\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the background image alignment.\n  remarks: \"This property determines the alignment of the background image for strip lines; it is only applied when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>.  \\n  \\n For more information about available alignments, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle> enumeration topic.\"\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\n      description: A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\"></xref> enumeration value. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor\n  id: BackImageTransparentColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BackImageTransparentColor\n  nameWithType: StripLine.BackImageTransparentColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the color of a strip line background image that will be implemented as transparent.\n  remarks: This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.\n  syntax:\n    content: public System.Drawing.Color BackImageTransparentColor { get; set; }\n    return:\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> value that will be displayed as transparent.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode\n  id: BackImageWrapMode\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BackImageWrapMode\n  nameWithType: StripLine.BackImageWrapMode\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the drawing mode of the background image of the strip line.\n  remarks: \"This property determines how the image is displayed; that is, tiled, scaled, and so forth.  \\n  \\n If an image is scaled, it will be stretched to fit within the bounding strip line. If the image is tiled, it is repeatedly drawn, starting from the top-left corner.  \\n  \\n For more information concerning the available wrapping modes, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> enumeration topic.  \\n  \\n If the BackImageWrapMode property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, the location where the image is drawn will be determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> property setting.  \\n  \\n This property is not applicable if <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is set to a value of 0.0.\"\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\n      description: A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\"></xref> integer enumeration. The default is <xref href=\"System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor\n  id: BackSecondaryColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BackSecondaryColor\n  nameWithType: StripLine.BackSecondaryColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the secondary color of the strip line background.\n  remarks: \"This property determines the secondary background color of many chart objects, and is used when gradient colors are being applied.  \\n  \\n You can set background secondary color to any valid ARGB (alpha, red, green, blue) value.  \\n  \\n If hatching is used, the BackSecondaryColor property determines the color of the hatching lines.  \\n  \\n To use gradient colors for the background of a chart element:  \\n  \\n-   Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.  \\n  \\n-   Use this BackSecondaryColor property to set the secondary color.  \\n  \\n-   Set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property to the desired gradient style.  \\n  \\n This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.\"\n  syntax:\n    content: public System.Drawing.Color BackSecondaryColor { get; set; }\n    return:\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> value used for the secondary color of a background with hatching or gradient fill. The default color is <xref href=\"System.Drawing.Color\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor\n  id: BorderColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BorderColor\n  nameWithType: StripLine.BorderColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the border color of a strip line.\n  remarks: \"You can set this property to any valid ARGB (alpha, red, green, blue) value.  \\n  \\n If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property of a <xref:System.Web.UI.DataVisualization.Charting.StripLine> object is set to 0.0, a line will be drawn, and it is this property and not the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property setting that will determine the color of the line.\"\n  syntax:\n    content: public System.Drawing.Color BorderColor { get; set; }\n    return:\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> value. The default color is <xref href=\"System.Drawing.Color\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle\n  id: BorderDashStyle\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BorderDashStyle\n  nameWithType: StripLine.BorderDashStyle\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the border style of the strip line.\n  remarks: This property specifies the line style used for a border. The line can be solid, dotted or some variation of solid and dotted.\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.ChartDashStyle\n      description: A <xref href=\"System.Web.UI.DataVisualization.Charting.ChartDashStyle\"></xref> enumeration value that determines the border style of the strip line.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth\n  id: BorderWidth\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: BorderWidth\n  nameWithType: StripLine.BorderWidth\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the border width of the strip line.\n  remarks: This property is measured in pixels.\n  syntax:\n    content: public int BorderWidth { get; set; }\n    return:\n      type: System.Int32\n      description: An <xref uid=\"langword_csharp_integer\" name=\"integer\" href=\"\"></xref> value that determines the width of the strip line's border, in pixels.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: StripLine.Dispose(Boolean)\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"></xref> and optionally releases the managed resources.\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font\n  id: Font\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: Font\n  nameWithType: StripLine.Font\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the font used for the strip line text.\n  syntax:\n    content: public System.Drawing.Font Font { get; set; }\n    return:\n      type: System.Drawing.Font\n      description: A <xref href=\"System.Drawing.Font\"></xref> value that represents the font of the strip line text.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.Font*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor\n  id: ForeColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: ForeColor\n  nameWithType: StripLine.ForeColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the color of the strip line text.\n  remarks: You can specify any valid ARGB color for this property. This property is only applicable when a text value is specified for the strip line.\n  syntax:\n    content: public System.Drawing.Color ForeColor { get; set; }\n    return:\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> value that represents the text color of a strip line. The default value is <xref:System.Drawing.Color.Black*>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval\n  id: Interval\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: Interval\n  nameWithType: StripLine.Interval\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the interval for a strip line, and determines if the strip line is drawn once or repeatedly.\n  remarks: When you set the Interval property to a value of zero (0.0), one strip line will be displayed, with a width specified by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property. When you set Interval to a value of other than zero, multiple strip lines will be shown. The unit that is used for the Interval property is defined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.\n  example:\n  - \"The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds repeating horizontal strip lines.   \\n        AddHorizRepeatingStripLines()   \\n  \\n        ' Highlights weekend points using strip lines.   \\n        HighlightWeekendsWithStripLines()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds repeating horizontal strip lines at intervals of 5.   \\n    ''' </summary>   \\n    Private Sub AddHorizRepeatingStripLines()   \\n        ' Instantiate new strip line   \\n        Dim stripLine1 As New StripLine()   \\n        stripLine1.StripWidth = 2.5   \\n        stripLine1.Interval = 5   \\n  \\n        ' Consider adding transparency so that the strip lines are lighter   \\n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \\n  \\n        ' Add the strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds strip lines to highlight weekend values.   \\n    ''' </summary>   \\n    Private Sub HighlightWeekendsWithStripLines()   \\n        ' Set strip line to highlight weekends   \\n        Dim stripLine2 As New StripLine()   \\n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \\n        stripLine2.IntervalOffset = -1.5   \\n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \\n        stripLine2.Interval = 1   \\n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \\n        stripLine2.StripWidth = 2   \\n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \\n  \\n        ' Set the axis label to show the name of the day   \\n        ' This is done in order to demonstrate that weekends are highlighted   \\n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \\\"ddd\\\"   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds repeating horizontal strip lines.  \\n            AddHorizRepeatingStripLines();  \\n  \\n            // Highlights weekend points using strip lines.  \\n            HighlightWeekendsWithStripLines();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds repeating horizontal strip lines at intervals of 5.  \\n        /// </summary>  \\n        private void AddHorizRepeatingStripLines()  \\n        {  \\n            // Instantiate new strip line  \\n            StripLine stripLine1 = new StripLine();  \\n            stripLine1.StripWidth = 0;  \\n            stripLine1.BorderColor = Color.Black;  \\n            stripLine1.BorderWidth = 3;  \\n            stripLine1.Interval = 5;  \\n  \\n            // Consider adding transparency so that the strip lines are lighter  \\n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \\n  \\n            stripLine1.BackSecondaryColor = Color.Black;  \\n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \\n  \\n            // Add the strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds strip lines to highlight weekend values.  \\n        /// </summary>  \\n        private void HighlightWeekendsWithStripLines()  \\n        {  \\n            // Set strip line to highlight weekends  \\n            StripLine stripLine2 = new StripLine();  \\n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \\n            stripLine2.IntervalOffset = -1.5;  \\n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \\n            stripLine2.Interval = 1;  \\n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \\n            stripLine2.StripWidth = 2;  \\n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \\n  \\n            // Set the axis label to show the name of the day  \\n            // This is done in order to demonstrate that weekends are highlighted  \\n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \\\"ddd\\\";  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public double Interval { get; set; }\n    return:\n      type: System.Double\n      description: A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> value that represents the interval between strip lines. The default value is 0.0.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.Interval*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset\n  id: IntervalOffset\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: IntervalOffset\n  nameWithType: StripLine.IntervalOffset\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the offset of grid lines, tick marks, strip lines and axis labels.\n  remarks: \"The interval offset of minor tick marks and grid lines is never affected by the value of the <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A> property of the <xref:System.Web.UI.DataVisualization.Charting.Axis> object.  \\n  \\n The IntervalOffset property setting defines the units of measurement of the offset.  \\n  \\n The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> can be a negative value.  \\n  \\n The default value is `Auto` (`0`).\"\n  example:\n  - \"The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds repeating horizontal strip lines.   \\n        AddHorizRepeatingStripLines()   \\n  \\n        ' Highlights weekend points using strip lines.   \\n        HighlightWeekendsWithStripLines()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds repeating horizontal strip lines at intervals of 5.   \\n    ''' </summary>   \\n    Private Sub AddHorizRepeatingStripLines()   \\n        ' Instantiate new strip line   \\n        Dim stripLine1 As New StripLine()   \\n        stripLine1.StripWidth = 2.5   \\n        stripLine1.Interval = 5   \\n  \\n        ' Consider adding transparency so that the strip lines are lighter   \\n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \\n  \\n        ' Add the strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds strip lines to highlight weekend values.   \\n    ''' </summary>   \\n    Private Sub HighlightWeekendsWithStripLines()   \\n        ' Set strip line to highlight weekends   \\n        Dim stripLine2 As New StripLine()   \\n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \\n        stripLine2.IntervalOffset = -1.5   \\n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \\n        stripLine2.Interval = 1   \\n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \\n        stripLine2.StripWidth = 2   \\n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \\n  \\n        ' Set the axis label to show the name of the day   \\n        ' This is done in order to demonstrate that weekends are highlighted   \\n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \\\"ddd\\\"   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds repeating horizontal strip lines.  \\n            AddHorizRepeatingStripLines();  \\n  \\n            // Highlights weekend points using strip lines.  \\n            HighlightWeekendsWithStripLines();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds repeating horizontal strip lines at intervals of 5.  \\n        /// </summary>  \\n        private void AddHorizRepeatingStripLines()  \\n        {  \\n            // Instantiate new strip line  \\n            StripLine stripLine1 = new StripLine();  \\n            stripLine1.StripWidth = 0;  \\n            stripLine1.BorderColor = Color.Black;  \\n            stripLine1.BorderWidth = 3;  \\n            stripLine1.Interval = 5;  \\n  \\n            // Consider adding transparency so that the strip lines are lighter  \\n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \\n  \\n            stripLine1.BackSecondaryColor = Color.Black;  \\n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \\n  \\n            // Add the strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds strip lines to highlight weekend values.  \\n        /// </summary>  \\n        private void HighlightWeekendsWithStripLines()  \\n        {  \\n            // Set strip line to highlight weekends  \\n            StripLine stripLine2 = new StripLine();  \\n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \\n            stripLine2.IntervalOffset = -1.5;  \\n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \\n            stripLine2.Interval = 1;  \\n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \\n            stripLine2.StripWidth = 2;  \\n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \\n  \\n            // Set the axis label to show the name of the day  \\n            // This is done in order to demonstrate that weekends are highlighted  \\n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \\\"ddd\\\";  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public double IntervalOffset { get; set; }\n    return:\n      type: System.Double\n      description: A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> value that represents the interval offset.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType\n  id: IntervalOffsetType\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: IntervalOffsetType\n  nameWithType: StripLine.IntervalOffsetType\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the interval offset type of the strip line.\n  remarks: By default, this property is set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>; the actual value of this property is determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.\n  example:\n  - \"The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds repeating horizontal strip lines.   \\n        AddHorizRepeatingStripLines()   \\n  \\n        ' Highlights weekend points using strip lines.   \\n        HighlightWeekendsWithStripLines()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds repeating horizontal strip lines at intervals of 5.   \\n    ''' </summary>   \\n    Private Sub AddHorizRepeatingStripLines()   \\n        ' Instantiate new strip line   \\n        Dim stripLine1 As New StripLine()   \\n        stripLine1.StripWidth = 2.5   \\n        stripLine1.Interval = 5   \\n  \\n        ' Consider adding transparency so that the strip lines are lighter   \\n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \\n  \\n        ' Add the strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds strip lines to highlight weekend values.   \\n    ''' </summary>   \\n    Private Sub HighlightWeekendsWithStripLines()   \\n        ' Set strip line to highlight weekends   \\n        Dim stripLine2 As New StripLine()   \\n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \\n        stripLine2.IntervalOffset = -1.5   \\n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \\n        stripLine2.Interval = 1   \\n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \\n        stripLine2.StripWidth = 2   \\n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \\n  \\n        ' Set the axis label to show the name of the day   \\n        ' This is done in order to demonstrate that weekends are highlighted   \\n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \\\"ddd\\\"   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds repeating horizontal strip lines.  \\n            AddHorizRepeatingStripLines();  \\n  \\n            // Highlights weekend points using strip lines.  \\n            HighlightWeekendsWithStripLines();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds repeating horizontal strip lines at intervals of 5.  \\n        /// </summary>  \\n        private void AddHorizRepeatingStripLines()  \\n        {  \\n            // Instantiate new strip line  \\n            StripLine stripLine1 = new StripLine();  \\n            stripLine1.StripWidth = 0;  \\n            stripLine1.BorderColor = Color.Black;  \\n            stripLine1.BorderWidth = 3;  \\n            stripLine1.Interval = 5;  \\n  \\n            // Consider adding transparency so that the strip lines are lighter  \\n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \\n  \\n            stripLine1.BackSecondaryColor = Color.Black;  \\n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \\n  \\n            // Add the strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds strip lines to highlight weekend values.  \\n        /// </summary>  \\n        private void HighlightWeekendsWithStripLines()  \\n        {  \\n            // Set strip line to highlight weekends  \\n            StripLine stripLine2 = new StripLine();  \\n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \\n            stripLine2.IntervalOffset = -1.5;  \\n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \\n            stripLine2.Interval = 1;  \\n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \\n            stripLine2.StripWidth = 2;  \\n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \\n  \\n            // Set the axis label to show the name of the day  \\n            // This is done in order to demonstrate that weekends are highlighted  \\n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \\\"ddd\\\";  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\n      description: A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the interval type. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType\n  id: IntervalType\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: IntervalType\n  nameWithType: StripLine.IntervalType\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the interval type of a <xref href=\"System.Web.UI.DataVisualization.Charting.StripLine\"></xref> object.\n  remarks: \"Interval types can be set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, in which case the type depends on: the X-value or Y-value types of the plotted <xref:System.Web.UI.DataVisualization.Charting.DataPoint> objects—depending on which axis the <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects belong to—and the axis scale.  \\n  \\n The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property determines how often a strip or line is drawn.\"\n  example:\n  - \"The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds repeating horizontal strip lines.   \\n        AddHorizRepeatingStripLines()   \\n  \\n        ' Highlights weekend points using strip lines.   \\n        HighlightWeekendsWithStripLines()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds repeating horizontal strip lines at intervals of 5.   \\n    ''' </summary>   \\n    Private Sub AddHorizRepeatingStripLines()   \\n        ' Instantiate new strip line   \\n        Dim stripLine1 As New StripLine()   \\n        stripLine1.StripWidth = 2.5   \\n        stripLine1.Interval = 5   \\n  \\n        ' Consider adding transparency so that the strip lines are lighter   \\n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \\n  \\n        ' Add the strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds strip lines to highlight weekend values.   \\n    ''' </summary>   \\n    Private Sub HighlightWeekendsWithStripLines()   \\n        ' Set strip line to highlight weekends   \\n        Dim stripLine2 As New StripLine()   \\n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \\n        stripLine2.IntervalOffset = -1.5   \\n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \\n        stripLine2.Interval = 1   \\n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \\n        stripLine2.StripWidth = 2   \\n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \\n  \\n        ' Set the axis label to show the name of the day   \\n        ' This is done in order to demonstrate that weekends are highlighted   \\n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \\\"ddd\\\"   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds repeating horizontal strip lines.  \\n            AddHorizRepeatingStripLines();  \\n  \\n            // Highlights weekend points using strip lines.  \\n            HighlightWeekendsWithStripLines();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds repeating horizontal strip lines at intervals of 5.  \\n        /// </summary>  \\n        private void AddHorizRepeatingStripLines()  \\n        {  \\n            // Instantiate new strip line  \\n            StripLine stripLine1 = new StripLine();  \\n            stripLine1.StripWidth = 0;  \\n            stripLine1.BorderColor = Color.Black;  \\n            stripLine1.BorderWidth = 3;  \\n            stripLine1.Interval = 5;  \\n  \\n            // Consider adding transparency so that the strip lines are lighter  \\n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \\n  \\n            stripLine1.BackSecondaryColor = Color.Black;  \\n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \\n  \\n            // Add the strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds strip lines to highlight weekend values.  \\n        /// </summary>  \\n        private void HighlightWeekendsWithStripLines()  \\n        {  \\n            // Set strip line to highlight weekends  \\n            StripLine stripLine2 = new StripLine();  \\n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \\n            stripLine2.IntervalOffset = -1.5;  \\n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \\n            stripLine2.Interval = 1;  \\n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \\n            stripLine2.StripWidth = 2;  \\n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \\n  \\n            // Set the axis label to show the name of the day  \\n            // This is done in order to demonstrate that weekends are highlighted  \\n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \\\"ddd\\\";  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\n      description: A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the interval type. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes\n  id: MapAreaAttributes\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: MapAreaAttributes\n  nameWithType: StripLine.MapAreaAttributes\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the map area attributes of the strip line.\n  syntax:\n    content: public string MapAreaAttributes { get; set; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the attributes of the chart element's corresponding map area.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name\n  id: Name\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: Name\n  nameWithType: StripLine.Name\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets the name of the strip line.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the name of the strip line.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue\n  id: PostBackValue\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: PostBackValue\n  nameWithType: StripLine.PostBackValue\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the postback value that can be processed on a <xref href=\"System.Web.UI.DataVisualization.Charting.Chart.Click\"></xref> event.\n  syntax:\n    content: public string PostBackValue { get; set; }\n    return:\n      type: System.String\n      description: A string value that represents the postback value that is passed to a <xref href=\"System.Web.UI.DataVisualization.Charting.Chart.Click\"></xref> event.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth\n  id: StripWidth\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: StripWidth\n  nameWithType: StripLine.StripWidth\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the width of a strip line.\n  remarks: \"This property cannot be set to a value less than 0.0, otherwise an exception will be raised.  \\n  \\n A setting of 0.0 will result in a line being drawn; this line will use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> property settings for its color, width and style. None of the `Back*` properties in this class are utilized when the value of StripWidth is 0.0.  \\n  \\n If you set the StripWidth property to a value greater than 0.0, a strip will be created. The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties only apply to the border of the strip; all of the `Back*` properties are then used for the background properties of the strip.  \\n  \\n If the value of the StripWidth property is greater than 0.0, the units are determined by the relevant axis scale.\"\n  syntax:\n    content: public double StripWidth { get; set; }\n    return:\n      type: System.Double\n      description: A <xref uid=\"langword_csharp_double\" name=\"double\" href=\"\"></xref> value that determines whether a strip or a line is drawn. The default value is 0.0.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType\n  id: StripWidthType\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: StripWidthType\n  nameWithType: StripLine.StripWidthType\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the unit of measurement for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*> property.\n  remarks: \"This property determines the units used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property. For example, to set a strip line to represent \\\"one week\\\", you could set this property to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> and set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to one (1.0).  \\n  \\n You can change the value of this property from <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType> to a <xref:System.DateTime> value when the relevant axis scale uses a <xref:System.DateTime> value.\"\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\n      description: A <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref> enumeration value that indicates the width type. The default value is <xref href=\"System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\"></xref>.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text\n  id: Text\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: Text\n  nameWithType: StripLine.Text\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the text for the strip line.\n  remarks: Use this property to add text to a strip line.\n  example:\n  - \"The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public string Text { get; set; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the text of a strip line.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.Text*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment\n  id: TextAlignment\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: TextAlignment\n  nameWithType: StripLine.TextAlignment\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the text alignment of the strip line.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n        stripLine3.TextAlignment = StringAlignment.Near   \\n        stripLine3.TextLineAlignment = StringAlignment.Near   \\n        stripLine3.TextOrientation = TextOrientation.Auto   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n            stripLine3.TextAlignment = StringAlignment.Near;  \\n            stripLine3.TextLineAlignment = StringAlignment.Near;  \\n            stripLine3.TextOrientation = TextOrientation.Auto;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public System.Drawing.StringAlignment TextAlignment { get; set; }\n    return:\n      type: System.Drawing.StringAlignment\n      description: A <xref href=\"System.Drawing.StringAlignment\"></xref> value that represents the alignment of the strip line text.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment\n  id: TextLineAlignment\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: TextLineAlignment\n  nameWithType: StripLine.TextLineAlignment\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the text line alignment of strip line text.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n        stripLine3.TextAlignment = StringAlignment.Near   \\n        stripLine3.TextLineAlignment = StringAlignment.Near   \\n        stripLine3.TextOrientation = TextOrientation.Auto   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n            stripLine3.TextAlignment = StringAlignment.Near;  \\n            stripLine3.TextLineAlignment = StringAlignment.Near;  \\n            stripLine3.TextOrientation = TextOrientation.Auto;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public System.Drawing.StringAlignment TextLineAlignment { get; set; }\n    return:\n      type: System.Drawing.StringAlignment\n      description: A <xref href=\"System.Drawing.StringAlignment\"></xref> value that represents the alignment of the text line.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation\n  id: TextOrientation\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: TextOrientation\n  nameWithType: StripLine.TextOrientation\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the text orientation.\n  remarks: When this property is set to a value of <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, the text is oriented based on the chart type. For all X-Y chart types other than Bar, X-axis strip line text is oriented horizontally from left to right on the bottom of the strip line. For Bar charts, X-axis strip line text is oriented vertically from top to bottom to the right of the strip line.\n  example:\n  - \"The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \\n  \\n```vb#  \\nImports System.Web.UI.DataVisualization.Charting  \\n  \\nPublic Partial Class StripLines   \\n    Inherits System.Web.UI.Page   \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \\n        ' Add chart data before adding strip lines.   \\n        AddChartData()   \\n  \\n        ' Adds a threshold line using strip lines.   \\n        AddThresholdStripLine()   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a week of data with values between 20 and 35.   \\n    ''' </summary>   \\n    Private Sub AddChartData()   \\n        ' Declare new random variable   \\n        Dim rand As New Random()   \\n        For i As Integer = 0 To 6   \\n  \\n            ' Add a week of data   \\n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \\n        Next   \\n    End Sub   \\n  \\n    ''' <summary>   \\n    ''' Adds a horizontal threshold strip line at the calculated mean   \\n    ''' value of all data points in the first series of the chart.   \\n    ''' </summary>   \\n    Private Sub AddThresholdStripLine()   \\n        Dim stripLine3 As New StripLine()   \\n  \\n        ' Set threshold line so that it is only shown once   \\n        stripLine3.Interval = 0   \\n  \\n        ' Set the threshold line to be drawn at the calculated mean of the first series   \\n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \\n  \\n        stripLine3.BackColor = Color.DarkGreen   \\n        stripLine3.StripWidth = 0.25   \\n  \\n        ' Set text properties for the threshold line   \\n        stripLine3.Text = \\\"Mean\\\"   \\n        stripLine3.ForeColor = Color.Black   \\n        stripLine3.TextAlignment = StringAlignment.Near   \\n        stripLine3.TextLineAlignment = StringAlignment.Near   \\n        stripLine3.TextOrientation = TextOrientation.Auto   \\n  \\n        ' Add strip line to the chart   \\n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \\n    End Sub   \\nEnd Class  \\n```  \\n  \\n```c#  \\npublic partial class StripLines : System.Web.UI.Page   \\n    {  \\n        protected void Page_Load(object sender, EventArgs e)  \\n        {              \\n            // Add chart data  \\n            AddChartData();  \\n  \\n            // Adds a threshold line using strip lines.  \\n            AddThresholdStripLine();  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a week of data with values between 20 and 35.  \\n        /// </summary>  \\n        private void AddChartData()  \\n        {  \\n            // Declare new random variable  \\n            Random rand = new Random();  \\n  \\n            // Add a week of data  \\n            for (int i = 0; i < 7; i++)   \\n            {  \\n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \\n            }  \\n        }  \\n  \\n        /// <summary>  \\n        /// Adds a horizontal threshold strip line at the calculated mean   \\n        /// value of all data points in the first series of the chart.  \\n        /// </summary>  \\n        private void AddThresholdStripLine()  \\n        {  \\n            StripLine stripLine3 = new StripLine();  \\n  \\n            // Set threshold line so that it is only shown once  \\n            stripLine3.Interval = 0;  \\n  \\n            // Set the threshold line to be drawn at the calculated mean of the first series  \\n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \\n  \\n            stripLine3.BackColor = Color.DarkGreen;  \\n            stripLine3.StripWidth = 0.25;  \\n  \\n            // Set text properties for the threshold line  \\n            stripLine3.Text = \\\"Mean\\\";  \\n            stripLine3.ForeColor = Color.Black;  \\n            stripLine3.TextAlignment = StringAlignment.Near;  \\n            stripLine3.TextLineAlignment = StringAlignment.Near;  \\n            stripLine3.TextOrientation = TextOrientation.Auto;  \\n  \\n            // Add strip line to the chart  \\n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \\n        }  \\n    }  \\n```\"\n  syntax:\n    content: public System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }\n    return:\n      type: System.Web.UI.DataVisualization.Charting.TextOrientation\n      description: A TextOrientation value that represents the alignment of the text orientation.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip\n  id: ToolTip\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: ToolTip\n  nameWithType: StripLine.ToolTip\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the tooltip of a strip line.\n  remarks: \"If you set this property, a client-side image map will automatically be created, and a map area will be created with the Title attribute set to the specified tooltip string. The map area will use the dimensions that correspond to the strip line.  \\n  \\n Setting this property will have no effect if the <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> property is set to `false`. The default value is true.\"\n  syntax:\n    content: public string ToolTip { get; set; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the tooltip of the strip line.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url\n  id: Url\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  langs:\n  - csharp\n  name: Url\n  nameWithType: StripLine.Url\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url\n  type: Property\n  assemblies:\n  - System.Web.DataVisualization\n  namespace: System.Web.UI.DataVisualization.Charting\n  summary: Gets or sets the destination URL or anchor point of the strip line.\n  remarks: To use an absolute URL, start the string expression with either \"http://\" or \"www.\". If the string does not start with either of these prefixes, it will be treated as a relative URL.\n  syntax:\n    content: public string Url { get; set; }\n    return:\n      type: System.String\n      description: A <xref uid=\"langword_csharp_string\" name=\"string\" href=\"\"></xref> value that represents the destination URL or anchor point of the strip line.\n  overload: System.Web.UI.DataVisualization.Charting.StripLine.Url*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.DataVisualization.Charting.ChartElement\n  isExternal: false\n  name: System.Web.UI.DataVisualization.Charting.ChartElement\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: StripLine()\n  nameWithType: StripLine.StripLine()\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackColor\n  nameWithType: StripLine.BackColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor\n- uid: System.Drawing.Color\n  parent: System.Drawing\n  isExternal: false\n  name: Color\n  nameWithType: Color\n  fullName: System.Drawing.Color\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackGradientStyle\n  nameWithType: StripLine.BackGradientStyle\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle\n- uid: System.Web.UI.DataVisualization.Charting.GradientStyle\n  parent: System.Web.UI.DataVisualization.Charting\n  isExternal: false\n  name: GradientStyle\n  nameWithType: GradientStyle\n  fullName: System.Web.UI.DataVisualization.Charting.GradientStyle\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackHatchStyle\n  nameWithType: StripLine.BackHatchStyle\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle\n- uid: System.Web.UI.DataVisualization.Charting.ChartHatchStyle\n  parent: System.Web.UI.DataVisualization.Charting\n  isExternal: false\n  name: ChartHatchStyle\n  nameWithType: ChartHatchStyle\n  fullName: System.Web.UI.DataVisualization.Charting.ChartHatchStyle\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackImage\n  nameWithType: StripLine.BackImage\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackImageAlignment\n  nameWithType: StripLine.BackImageAlignment\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment\n- uid: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\n  parent: System.Web.UI.DataVisualization.Charting\n  isExternal: false\n  name: ChartImageAlignmentStyle\n  nameWithType: ChartImageAlignmentStyle\n  fullName: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackImageTransparentColor\n  nameWithType: StripLine.BackImageTransparentColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackImageWrapMode\n  nameWithType: StripLine.BackImageWrapMode\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode\n- uid: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\n  parent: System.Web.UI.DataVisualization.Charting\n  isExternal: false\n  name: ChartImageWrapMode\n  nameWithType: ChartImageWrapMode\n  fullName: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackSecondaryColor\n  nameWithType: StripLine.BackSecondaryColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BorderColor\n  nameWithType: StripLine.BorderColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BorderDashStyle\n  nameWithType: StripLine.BorderDashStyle\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle\n- uid: System.Web.UI.DataVisualization.Charting.ChartDashStyle\n  parent: System.Web.UI.DataVisualization.Charting\n  isExternal: false\n  name: ChartDashStyle\n  nameWithType: ChartDashStyle\n  fullName: System.Web.UI.DataVisualization.Charting.ChartDashStyle\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BorderWidth\n  nameWithType: StripLine.BorderWidth\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: StripLine.Dispose(Boolean)\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Font\n  nameWithType: StripLine.Font\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font\n- uid: System.Drawing.Font\n  parent: System.Drawing\n  isExternal: false\n  name: Font\n  nameWithType: Font\n  fullName: System.Drawing.Font\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: ForeColor\n  nameWithType: StripLine.ForeColor\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Interval\n  nameWithType: StripLine.Interval\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: IntervalOffset\n  nameWithType: StripLine.IntervalOffset\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: IntervalOffsetType\n  nameWithType: StripLine.IntervalOffsetType\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType\n- uid: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\n  parent: System.Web.UI.DataVisualization.Charting\n  isExternal: false\n  name: DateTimeIntervalType\n  nameWithType: DateTimeIntervalType\n  fullName: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: IntervalType\n  nameWithType: StripLine.IntervalType\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: MapAreaAttributes\n  nameWithType: StripLine.MapAreaAttributes\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Name\n  nameWithType: StripLine.Name\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: PostBackValue\n  nameWithType: StripLine.PostBackValue\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: StripWidth\n  nameWithType: StripLine.StripWidth\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: StripWidthType\n  nameWithType: StripLine.StripWidthType\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Text\n  nameWithType: StripLine.Text\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: TextAlignment\n  nameWithType: StripLine.TextAlignment\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment\n- uid: System.Drawing.StringAlignment\n  parent: System.Drawing\n  isExternal: false\n  name: StringAlignment\n  nameWithType: StringAlignment\n  fullName: System.Drawing.StringAlignment\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: TextLineAlignment\n  nameWithType: StripLine.TextLineAlignment\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: TextOrientation\n  nameWithType: StripLine.TextOrientation\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation\n- uid: System.Web.UI.DataVisualization.Charting.TextOrientation\n  parent: System.Web.UI.DataVisualization.Charting\n  isExternal: false\n  name: TextOrientation\n  nameWithType: TextOrientation\n  fullName: System.Web.UI.DataVisualization.Charting.TextOrientation\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: ToolTip\n  nameWithType: StripLine.ToolTip\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Url\n  nameWithType: StripLine.Url\n  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: StripLine\n  nameWithType: StripLine.StripLine\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackColor\n  nameWithType: StripLine.BackColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackGradientStyle\n  nameWithType: StripLine.BackGradientStyle\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackHatchStyle\n  nameWithType: StripLine.BackHatchStyle\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackImage\n  nameWithType: StripLine.BackImage\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackImageAlignment\n  nameWithType: StripLine.BackImageAlignment\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackImageTransparentColor\n  nameWithType: StripLine.BackImageTransparentColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackImageWrapMode\n  nameWithType: StripLine.BackImageWrapMode\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BackSecondaryColor\n  nameWithType: StripLine.BackSecondaryColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BorderColor\n  nameWithType: StripLine.BorderColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BorderDashStyle\n  nameWithType: StripLine.BorderDashStyle\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: BorderWidth\n  nameWithType: StripLine.BorderWidth\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Dispose\n  nameWithType: StripLine.Dispose\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Font\n  nameWithType: StripLine.Font\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: ForeColor\n  nameWithType: StripLine.ForeColor\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Interval\n  nameWithType: StripLine.Interval\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: IntervalOffset\n  nameWithType: StripLine.IntervalOffset\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: IntervalOffsetType\n  nameWithType: StripLine.IntervalOffsetType\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: IntervalType\n  nameWithType: StripLine.IntervalType\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: MapAreaAttributes\n  nameWithType: StripLine.MapAreaAttributes\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Name\n  nameWithType: StripLine.Name\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: PostBackValue\n  nameWithType: StripLine.PostBackValue\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: StripWidth\n  nameWithType: StripLine.StripWidth\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: StripWidthType\n  nameWithType: StripLine.StripWidthType\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Text\n  nameWithType: StripLine.Text\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: TextAlignment\n  nameWithType: StripLine.TextAlignment\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: TextLineAlignment\n  nameWithType: StripLine.TextLineAlignment\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: TextOrientation\n  nameWithType: StripLine.TextOrientation\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: ToolTip\n  nameWithType: StripLine.ToolTip\n- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url*\n  parent: System.Web.UI.DataVisualization.Charting.StripLine\n  isExternal: false\n  name: Url\n  nameWithType: StripLine.Url\n"}