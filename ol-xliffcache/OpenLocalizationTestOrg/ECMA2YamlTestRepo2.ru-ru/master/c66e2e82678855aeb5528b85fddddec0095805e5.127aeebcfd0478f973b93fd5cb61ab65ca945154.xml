{"nodes":[{"pos":[922,934],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1509,1521],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2268,2280],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3427,3439],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4073,4085],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4824,4836],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6073,6085],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6151,6163],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6222,6234],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Device.Location.IGeoPositionWatcher`1\n  id: IGeoPositionWatcher`1\n  children:\n  - System.Device.Location.IGeoPositionWatcher`1.Position\n  - System.Device.Location.IGeoPositionWatcher`1.PositionChanged\n  - System.Device.Location.IGeoPositionWatcher`1.Start\n  - System.Device.Location.IGeoPositionWatcher`1.Start(System.Boolean)\n  - System.Device.Location.IGeoPositionWatcher`1.Status\n  - System.Device.Location.IGeoPositionWatcher`1.StatusChanged\n  - System.Device.Location.IGeoPositionWatcher`1.Stop\n  - System.Device.Location.IGeoPositionWatcher`1.TryStart(System.Boolean,System.`0imeSpan)\n  langs:\n  - csharp\n  name: IGeoPositionWatcher<T>\n  nameWithType: IGeoPositionWatcher<T>\n  fullName: System.Device.Location.IGeoPositionWatcher<T>\n  type: Interface\n  syntax:\n    content: public interface IGeoPositionWatcher<T>\n    typeParameters:\n    - id: T\n      description: To be added.\n  implements: []\n  platform:\n  - net462\n- uid: System.Device.Location.IGeoPositionWatcher`1.Position\n  id: Position\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  langs:\n  - csharp\n  name: Position\n  nameWithType: IGeoPositionWatcher<T>.Position\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Position\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public System.Device.Location.GeoPosition<T> Position { get; }\n    return:\n      type: System.Device.Location.GeoPosition`1\n      description: To be added.\n  overload: System.Device.Location.IGeoPositionWatcher`1.Position*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.IGeoPositionWatcher`1.PositionChanged\n  id: PositionChanged\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  langs:\n  - csharp\n  name: PositionChanged\n  nameWithType: IGeoPositionWatcher<T>.PositionChanged\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.PositionChanged\n  type: Event\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public event EventHandler<System.Device.Location.GeoPositionChangedEventArgs<T>> PositionChanged;\n    return:\n      type: System.EventHandler{System.Device.Location.GeoPositionChangedEventArgs{T}}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.IGeoPositionWatcher`1.Start\n  id: Start\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: IGeoPositionWatcher<T>.Start()\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Start()\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Device.Location.IGeoPositionWatcher`1.Start*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.IGeoPositionWatcher`1.Start(System.Boolean)\n  id: Start(System.Boolean)\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  langs:\n  - csharp\n  name: Start(Boolean)\n  nameWithType: IGeoPositionWatcher<T>.Start(Boolean)\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Start(Boolean)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public void Start (bool suppressPermissionPrompt);\n    parameters:\n    - id: suppressPermissionPrompt\n      type: System.Boolean\n      description: To be added.\n  overload: System.Device.Location.IGeoPositionWatcher`1.Start*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.IGeoPositionWatcher`1.Status\n  id: Status\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  langs:\n  - csharp\n  name: Status\n  nameWithType: IGeoPositionWatcher<T>.Status\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Status\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public System.Device.Location.GeoPositionStatus Status { get; }\n    return:\n      type: System.Device.Location.GeoPositionStatus\n      description: To be added.\n  overload: System.Device.Location.IGeoPositionWatcher`1.Status*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.IGeoPositionWatcher`1.StatusChanged\n  id: StatusChanged\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  langs:\n  - csharp\n  name: StatusChanged\n  nameWithType: IGeoPositionWatcher<T>.StatusChanged\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.StatusChanged\n  type: Event\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public event EventHandler<System.Device.Location.GeoPositionStatusChangedEventArgs> StatusChanged;\n    return:\n      type: System.EventHandler{System.Device.Location.GeoPositionStatusChangedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.IGeoPositionWatcher`1.Stop\n  id: Stop\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: IGeoPositionWatcher<T>.Stop()\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Stop()\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Device.Location.IGeoPositionWatcher`1.Stop*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Device.Location.IGeoPositionWatcher`1.TryStart(System.Boolean,System.`0imeSpan)\n  id: TryStart(System.Boolean,System.`0imeSpan)\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  langs:\n  - csharp\n  name: TryStart(Boolean,TimeSpan)\n  nameWithType: IGeoPositionWatcher<T>.TryStart(Boolean,TimeSpan)\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.TryStart(Boolean,TimeSpan)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public bool TryStart (bool suppressPermissionPrompt, TimeSpan timeout);\n    parameters:\n    - id: suppressPermissionPrompt\n      type: System.Boolean\n      description: To be added.\n    - id: timeout\n      type: System.TimeSpan\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Device.Location.IGeoPositionWatcher`1.TryStart*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Device.Location.IGeoPositionWatcher`1.Position\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Position\n  nameWithType: IGeoPositionWatcher<T>.Position\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Position\n- uid: System.Device.Location.GeoPosition`1\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoPosition<T>\n  nameWithType: GeoPosition<T>\n  fullName: System.Device.Location.GeoPosition<T>\n- uid: System.Device.Location.IGeoPositionWatcher`1.PositionChanged\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: PositionChanged\n  nameWithType: IGeoPositionWatcher<T>.PositionChanged\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.PositionChanged\n- uid: System.EventHandler{System.Device.Location.GeoPositionChangedEventArgs{T}}\n  parent: System\n  isExternal: true\n  name: EventHandler<GeoPositionChangedEventArgs<T>>\n  nameWithType: EventHandler<GeoPositionChangedEventArgs<T>>\n  fullName: System.EventHandler<System.Device.Location.GeoPositionChangedEventArgs<T>>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Device.Location.GeoPositionChangedEventArgs<T>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Device.Location.GeoPositionChangedEventArgs`1\n    name: GeoPositionChangedEventArgs\n    nameWithType: GeoPositionChangedEventArgs\n    fullName: GeoPositionChangedEventArgs<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Device.Location.IGeoPositionWatcher`1.Start\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Start()\n  nameWithType: IGeoPositionWatcher<T>.Start()\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Start()\n- uid: System.Device.Location.IGeoPositionWatcher`1.Start(System.Boolean)\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Start(Boolean)\n  nameWithType: IGeoPositionWatcher<T>.Start(Boolean)\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Start(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Device.Location.IGeoPositionWatcher`1.Status\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Status\n  nameWithType: IGeoPositionWatcher<T>.Status\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Status\n- uid: System.Device.Location.GeoPositionStatus\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoPositionStatus\n  nameWithType: GeoPositionStatus\n  fullName: System.Device.Location.GeoPositionStatus\n- uid: System.Device.Location.IGeoPositionWatcher`1.StatusChanged\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: StatusChanged\n  nameWithType: IGeoPositionWatcher<T>.StatusChanged\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.StatusChanged\n- uid: System.EventHandler{System.Device.Location.GeoPositionStatusChangedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<GeoPositionStatusChangedEventArgs>\n  nameWithType: EventHandler<GeoPositionStatusChangedEventArgs>\n  fullName: System.EventHandler<System.Device.Location.GeoPositionStatusChangedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Device.Location.GeoPositionStatusChangedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Device.Location.GeoPositionStatusChangedEventArgs\n    name: GeoPositionStatusChangedEventArgs\n    nameWithType: GeoPositionStatusChangedEventArgs\n    fullName: GeoPositionStatusChangedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Device.Location.IGeoPositionWatcher`1.Stop\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Stop()\n  nameWithType: IGeoPositionWatcher<T>.Stop()\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.Stop()\n- uid: System.Device.Location.IGeoPositionWatcher`1.TryStart(System.Boolean,System.`0imeSpan)\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: TryStart(Boolean,TimeSpan)\n  nameWithType: IGeoPositionWatcher<T>.TryStart(Boolean,TimeSpan)\n  fullName: System.Device.Location.IGeoPositionWatcher<T>.TryStart(Boolean,TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Device.Location.IGeoPositionWatcher`1.Position*\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Position\n  nameWithType: IGeoPositionWatcher<T>.Position\n- uid: System.Device.Location.IGeoPositionWatcher`1.Start*\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Start\n  nameWithType: IGeoPositionWatcher<T>.Start\n- uid: System.Device.Location.IGeoPositionWatcher`1.Status*\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Status\n  nameWithType: IGeoPositionWatcher<T>.Status\n- uid: System.Device.Location.IGeoPositionWatcher`1.Stop*\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: Stop\n  nameWithType: IGeoPositionWatcher<T>.Stop\n- uid: System.Device.Location.IGeoPositionWatcher`1.TryStart*\n  parent: System.Device.Location.IGeoPositionWatcher`1\n  isExternal: false\n  name: TryStart\n  nameWithType: IGeoPositionWatcher<T>.TryStart\n"}