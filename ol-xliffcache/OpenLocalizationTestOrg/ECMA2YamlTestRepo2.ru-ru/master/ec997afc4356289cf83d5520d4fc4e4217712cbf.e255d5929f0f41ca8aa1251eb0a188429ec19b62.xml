{"nodes":[{"pos":[428,526],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Application.ThreadException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Windows.Forms.Application.ThreadException\"></xref> event."},{"pos":[538,700],"content":"A ThreadExceptionEventArgs is created by a thread when an unhandled exception occurs. ThreadExceptionEventArgs contains the <xref:System.Exception> that occurred.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A ThreadExceptionEventArgs is created by a thread when an unhandled exception occurs. ThreadExceptionEventArgs contains the <xref:System.Exception> that occurred.","pos":[0,162],"nodes":[{"content":"A ThreadExceptionEventArgs is created by a thread when an unhandled exception occurs.","pos":[0,85]},{"content":"ThreadExceptionEventArgs contains the &lt;xref:System.Exception&gt; that occurred.","pos":[86,162],"source":" ThreadExceptionEventArgs contains the <xref:System.Exception> that occurred."}]}]},{"pos":[2440,2543],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadExceptionEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Threading.ThreadExceptionEventArgs\"></xref> class."},{"pos":[3797,3839],"content":"The <xref:System.Exception> that occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Exception&gt; that occurred.","pos":[0,42],"source":"The <xref:System.Exception> that occurred."}]},{"pos":[4304,4351],"content":"Gets the <xref:System.Exception> that occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Exception&gt; that occurred.","pos":[0,47],"source":"Gets the <xref:System.Exception> that occurred."}]},{"pos":[5576,5618],"content":"The <xref:System.Exception> that occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Exception&gt; that occurred.","pos":[0,42],"source":"The <xref:System.Exception> that occurred."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ThreadExceptionEventArgs\n  id: ThreadExceptionEventArgs\n  children:\n  - System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)\n  - System.Threading.ThreadExceptionEventArgs.Exception\n  langs:\n  - csharp\n  name: ThreadExceptionEventArgs\n  nameWithType: ThreadExceptionEventArgs\n  fullName: System.Threading.ThreadExceptionEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Windows.Forms.Application.ThreadException\"></xref> event.\n  remarks: A ThreadExceptionEventArgs is created by a thread when an unhandled exception occurs. ThreadExceptionEventArgs contains the <xref:System.Exception> that occurred.\n  example:\n  - \"The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form. The example creates two classes. The `ErrorHandler` class creates the form and the button that raises the event. The `CustomExceptionHandler` class provides the methods to handle the exception.  \\n  \\n In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`. Then the instance is added to the event, and the application is run.  \\n  \\n In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception. The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.  \\n  \\n [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/add/codesnippet/visualbasic/t-system.threading.threa_0_1.vb)]\\n [!code-cs[Classic ThreadExceptionEventArgs Example#1](~/add/codesnippet/csharp/t-system.threading.threa_0_1.cs)]\"\n  syntax:\n    content: 'public class ThreadExceptionEventArgs : EventArgs'\n  inheritance:\n  - System.EventArgs\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)\n  id: '#ctor(System.Exception)'\n  parent: System.Threading.ThreadExceptionEventArgs\n  langs:\n  - csharp\n  name: ThreadExceptionEventArgs(Exception)\n  nameWithType: ThreadExceptionEventArgs.ThreadExceptionEventArgs(Exception)\n  fullName: System.Threading.ThreadExceptionEventArgs.ThreadExceptionEventArgs(Exception)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.ThreadExceptionEventArgs\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form. The example creates two classes. The `ErrorHandler` class creates the form and the button that raises the event. The `CustomExceptionHandler` class provides the methods to handle the exception.  \\n  \\n In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`. Then the instance is added to the event, and the application is run.  \\n  \\n In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception. The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.  \\n  \\n [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/add/codesnippet/visualbasic/m-system.threading.threa_30_1.vb)]\\n [!code-cs[Classic ThreadExceptionEventArgs Example#1](~/add/codesnippet/csharp/m-system.threading.threa_30_1.cs)]\"\n  syntax:\n    content: public ThreadExceptionEventArgs (Exception t);\n    parameters:\n    - id: t\n      type: System.Exception\n      description: The <xref:System.Exception> that occurred.\n  overload: System.Threading.ThreadExceptionEventArgs.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadExceptionEventArgs.Exception\n  id: Exception\n  parent: System.Threading.ThreadExceptionEventArgs\n  langs:\n  - csharp\n  name: Exception\n  nameWithType: ThreadExceptionEventArgs.Exception\n  fullName: System.Threading.ThreadExceptionEventArgs.Exception\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Threading\n  summary: Gets the <xref:System.Exception> that occurred.\n  remarks: ''\n  example:\n  - \"The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form. The example creates two classes. The `ErrorHandler` class creates the form and the button that raises the event. The `CustomExceptionHandler` class provides the methods to handle the exception.  \\n  \\n In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`. Then the instance is added to the event, and the application is run.  \\n  \\n In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception. The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.  \\n  \\n [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/add/codesnippet/visualbasic/p-system.threading.threa_9_1.vb)]\\n [!code-cs[Classic ThreadExceptionEventArgs Example#1](~/add/codesnippet/csharp/p-system.threading.threa_9_1.cs)]\"\n  syntax:\n    content: public Exception Exception { get; }\n    return:\n      type: System.Exception\n      description: The <xref:System.Exception> that occurred.\n  overload: System.Threading.ThreadExceptionEventArgs.Exception*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.EventArgs\n  isExternal: false\n  name: System.EventArgs\n- uid: System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)\n  parent: System.Threading.ThreadExceptionEventArgs\n  isExternal: false\n  name: ThreadExceptionEventArgs(Exception)\n  nameWithType: ThreadExceptionEventArgs.ThreadExceptionEventArgs(Exception)\n  fullName: System.Threading.ThreadExceptionEventArgs.ThreadExceptionEventArgs(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Threading.ThreadExceptionEventArgs.Exception\n  parent: System.Threading.ThreadExceptionEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: ThreadExceptionEventArgs.Exception\n  fullName: System.Threading.ThreadExceptionEventArgs.Exception\n- uid: System.Threading.ThreadExceptionEventArgs.#ctor*\n  parent: System.Threading.ThreadExceptionEventArgs\n  isExternal: false\n  name: ThreadExceptionEventArgs\n  nameWithType: ThreadExceptionEventArgs.ThreadExceptionEventArgs\n- uid: System.Threading.ThreadExceptionEventArgs.Exception*\n  parent: System.Threading.ThreadExceptionEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: ThreadExceptionEventArgs.Exception\n"}