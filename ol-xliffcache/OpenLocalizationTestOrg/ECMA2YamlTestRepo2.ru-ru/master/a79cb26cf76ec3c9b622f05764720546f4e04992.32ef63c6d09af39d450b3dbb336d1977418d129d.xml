{"nodes":[{"pos":[582,654],"content":"Represents the container for the route to be followed by a routed event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the container for the route to be followed by a routed event.","pos":[0,72]}]},{"pos":[667,1479],"content":"This class corresponds to a valid <xref:System.Windows.RoutedEvent>, and contains an ordered list of target object and handler list pairs that refer to the event route for that event. EventRoute supports adding new entries to the list and also allows for the handlers in the list to be invoked.       Most normal operations for adding handlers for [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] events do not require working with this class (for instance, use <xref:System.Windows.EventManager> methods to add class handling, or query for existing handlers of an event). This class is mainly for use when elements have particular knowledge about child elements or parent elements that make it practical to either add elements to or remove elements from the default calculated event route.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class corresponds to a valid &lt;xref:System.Windows.RoutedEvent&gt;, and contains an ordered list of target object and handler list pairs that refer to the event route for that event.","pos":[0,183],"source":"This class corresponds to a valid <xref:System.Windows.RoutedEvent>, and contains an ordered list of target object and handler list pairs that refer to the event route for that event."},{"content":"EventRoute supports adding new entries to the list and also allows for the handlers in the list to be invoked.","pos":[184,294]},{"content":"Most normal operations for adding handlers for <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> events do not require working with this class (for instance, use &lt;xref:System.Windows.EventManager&gt; methods to add class handling, or query for existing handlers of an event).","pos":[301,592],"source":"       Most normal operations for adding handlers for [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] events do not require working with this class (for instance, use <xref:System.Windows.EventManager> methods to add class handling, or query for existing handlers of an event)."},{"content":"This class is mainly for use when elements have particular knowledge about child elements or parent elements that make it practical to either add elements to or remove elements from the default calculated event route.","pos":[593,810]}]},{"pos":[2035,2119],"content":"Initializes an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.EventRoute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes an instance of the <xref href=\"System.Windows.EventRoute\"></xref> class."},{"pos":[2299,2368],"content":"The non-NULL event identifier to be associated with this event route.","needQuote":true,"needEscape":true,"nodes":[{"content":"The non-NULL event identifier to be associated with this event route.","pos":[0,69]}]},{"pos":[2898,2963],"content":"Adds the specified handler for the specified target to the route.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified handler for the specified target to the route.","pos":[0,65]}]},{"pos":[2975,3100],"content":"It is not an error to add a handler for a particular target instance twice. In such a case, the handler will be called twice.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"It is not an error to add a handler for a particular target instance twice. In such a case, the handler will be called twice.","pos":[0,125],"nodes":[{"content":"It is not an error to add a handler for a particular target instance twice.","pos":[0,75]},{"content":"In such a case, the handler will be called twice.","pos":[76,125]}]}]},{"pos":[3276,3353],"content":"Specifies the target object of which the handler is to be added to the route.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the target object of which the handler is to be added to the route.","pos":[0,77]}]},{"pos":[3419,3466],"content":"Specifies the handler to be added to the route.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the handler to be added to the route.","pos":[0,47]}]},{"pos":[3540,3624],"content":"Indicates whether or not the listener detects events that have already been handled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether or not the listener detects events that have already been handled.","pos":[0,84]}]},{"pos":[4046,4135],"content":"Returns the top-most element on the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the top-most element on the event route stack at which two logical trees diverge.","pos":[0,89]}]},{"pos":[4268,4349],"content":"The top-most element on the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"The top-most element on the event route stack at which two logical trees diverge.","pos":[0,81]}]},{"pos":[4792,4896],"content":"Returns the source for the top-most element on the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the source for the top-most element on the event route stack at which two logical trees diverge.","pos":[0,104]}]},{"pos":[5031,5127],"content":"The source for the top-most element on the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source for the top-most element on the event route stack at which two logical trees diverge.","pos":[0,96]}]},{"pos":[5557,5643],"content":"Returns the top-most node on the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the top-most node on the event route stack at which two logical trees diverge.","pos":[0,86]}]},{"pos":[5775,5853],"content":"The top-most node on the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"The top-most node on the event route stack at which two logical trees diverge.","pos":[0,78]}]},{"pos":[6382,6465],"content":"Adds the top-most node to the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the top-most node to the event route stack at which two logical trees diverge.","pos":[0,83]}]},{"pos":[6622,6703],"content":"The top-most element on the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"The top-most element on the event route stack at which two logical trees diverge.","pos":[0,81]}]},{"pos":[6766,6862],"content":"The source for the top-most element on the event route stack at which two logical trees diverge.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source for the top-most element on the event route stack at which two logical trees diverge.","pos":[0,96]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.EventRoute\n  id: EventRoute\n  children:\n  - System.Windows.EventRoute.#ctor(System.Windows.RoutedEvent)\n  - System.Windows.EventRoute.Add(System.Object,System.Delegate,System.Boolean)\n  - System.Windows.EventRoute.PeekBranchNode\n  - System.Windows.EventRoute.PeekBranchSource\n  - System.Windows.EventRoute.PopBranchNode\n  - System.Windows.EventRoute.PushBranchNode(System.Object,System.Object)\n  langs:\n  - csharp\n  name: EventRoute\n  nameWithType: EventRoute\n  fullName: System.Windows.EventRoute\n  type: Class\n  summary: Represents the container for the route to be followed by a routed event.\n  remarks: \"This class corresponds to a valid <xref:System.Windows.RoutedEvent>, and contains an ordered list of target object and handler list pairs that refer to the event route for that event. EventRoute supports adding new entries to the list and also allows for the handlers in the list to be invoked.  \\n  \\n Most normal operations for adding handlers for [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] events do not require working with this class (for instance, use <xref:System.Windows.EventManager> methods to add class handling, or query for existing handlers of an event). This class is mainly for use when elements have particular knowledge about child elements or parent elements that make it practical to either add elements to or remove elements from the default calculated event route.\"\n  syntax:\n    content: public sealed class EventRoute\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.EventRoute.#ctor(System.Windows.RoutedEvent)\n  id: '#ctor(System.Windows.RoutedEvent)'\n  parent: System.Windows.EventRoute\n  langs:\n  - csharp\n  name: EventRoute(RoutedEvent)\n  nameWithType: EventRoute.EventRoute(RoutedEvent)\n  fullName: System.Windows.EventRoute.EventRoute(RoutedEvent)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Initializes an instance of the <xref href=\"System.Windows.EventRoute\"></xref> class.\n  syntax:\n    content: public EventRoute (System.Windows.RoutedEvent routedEvent);\n    parameters:\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: The non-NULL event identifier to be associated with this event route.\n  overload: System.Windows.EventRoute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventRoute.Add(System.Object,System.Delegate,System.Boolean)\n  id: Add(System.Object,System.Delegate,System.Boolean)\n  parent: System.Windows.EventRoute\n  langs:\n  - csharp\n  name: Add(Object,Delegate,Boolean)\n  nameWithType: EventRoute.Add(Object,Delegate,Boolean)\n  fullName: System.Windows.EventRoute.Add(Object,Delegate,Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Adds the specified handler for the specified target to the route.\n  remarks: It is not an error to add a handler for a particular target instance twice. In such a case, the handler will be called twice.\n  syntax:\n    content: public void Add (object target, Delegate handler, bool handledEventsToo);\n    parameters:\n    - id: target\n      type: System.Object\n      description: Specifies the target object of which the handler is to be added to the route.\n    - id: handler\n      type: System.Delegate\n      description: Specifies the handler to be added to the route.\n    - id: handledEventsToo\n      type: System.Boolean\n      description: Indicates whether or not the listener detects events that have already been handled.\n  overload: System.Windows.EventRoute.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventRoute.PeekBranchNode\n  id: PeekBranchNode\n  parent: System.Windows.EventRoute\n  langs:\n  - csharp\n  name: PeekBranchNode()\n  nameWithType: EventRoute.PeekBranchNode()\n  fullName: System.Windows.EventRoute.PeekBranchNode()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns the top-most element on the event route stack at which two logical trees diverge.\n  syntax:\n    content: public object PeekBranchNode ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The top-most element on the event route stack at which two logical trees diverge.\n  overload: System.Windows.EventRoute.PeekBranchNode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventRoute.PeekBranchSource\n  id: PeekBranchSource\n  parent: System.Windows.EventRoute\n  langs:\n  - csharp\n  name: PeekBranchSource()\n  nameWithType: EventRoute.PeekBranchSource()\n  fullName: System.Windows.EventRoute.PeekBranchSource()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns the source for the top-most element on the event route stack at which two logical trees diverge.\n  syntax:\n    content: public object PeekBranchSource ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The source for the top-most element on the event route stack at which two logical trees diverge.\n  overload: System.Windows.EventRoute.PeekBranchSource*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventRoute.PopBranchNode\n  id: PopBranchNode\n  parent: System.Windows.EventRoute\n  langs:\n  - csharp\n  name: PopBranchNode()\n  nameWithType: EventRoute.PopBranchNode()\n  fullName: System.Windows.EventRoute.PopBranchNode()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns the top-most node on the event route stack at which two logical trees diverge.\n  syntax:\n    content: public object PopBranchNode ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The top-most node on the event route stack at which two logical trees diverge.\n  overload: System.Windows.EventRoute.PopBranchNode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.EventRoute.PushBranchNode(System.Object,System.Object)\n  id: PushBranchNode(System.Object,System.Object)\n  parent: System.Windows.EventRoute\n  langs:\n  - csharp\n  name: PushBranchNode(Object,Object)\n  nameWithType: EventRoute.PushBranchNode(Object,Object)\n  fullName: System.Windows.EventRoute.PushBranchNode(Object,Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Adds the top-most node to the event route stack at which two logical trees diverge.\n  syntax:\n    content: public void PushBranchNode (object node, object source);\n    parameters:\n    - id: node\n      type: System.Object\n      description: The top-most element on the event route stack at which two logical trees diverge.\n    - id: source\n      type: System.Object\n      description: The source for the top-most element on the event route stack at which two logical trees diverge.\n  overload: System.Windows.EventRoute.PushBranchNode*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.EventRoute.#ctor(System.Windows.RoutedEvent)\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: EventRoute(RoutedEvent)\n  nameWithType: EventRoute.EventRoute(RoutedEvent)\n  fullName: System.Windows.EventRoute.EventRoute(RoutedEvent)\n- uid: System.Windows.RoutedEvent\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEvent\n  fullName: System.Windows.RoutedEvent\n- uid: System.Windows.EventRoute.Add(System.Object,System.Delegate,System.Boolean)\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: Add(Object,Delegate,Boolean)\n  nameWithType: EventRoute.Add(Object,Delegate,Boolean)\n  fullName: System.Windows.EventRoute.Add(Object,Delegate,Boolean)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.EventRoute.PeekBranchNode\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: PeekBranchNode()\n  nameWithType: EventRoute.PeekBranchNode()\n  fullName: System.Windows.EventRoute.PeekBranchNode()\n- uid: System.Windows.EventRoute.PeekBranchSource\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: PeekBranchSource()\n  nameWithType: EventRoute.PeekBranchSource()\n  fullName: System.Windows.EventRoute.PeekBranchSource()\n- uid: System.Windows.EventRoute.PopBranchNode\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: PopBranchNode()\n  nameWithType: EventRoute.PopBranchNode()\n  fullName: System.Windows.EventRoute.PopBranchNode()\n- uid: System.Windows.EventRoute.PushBranchNode(System.Object,System.Object)\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: PushBranchNode(Object,Object)\n  nameWithType: EventRoute.PushBranchNode(Object,Object)\n  fullName: System.Windows.EventRoute.PushBranchNode(Object,Object)\n- uid: System.Windows.EventRoute.#ctor*\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: EventRoute\n  nameWithType: EventRoute.EventRoute\n- uid: System.Windows.EventRoute.Add*\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: Add\n  nameWithType: EventRoute.Add\n- uid: System.Windows.EventRoute.PeekBranchNode*\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: PeekBranchNode\n  nameWithType: EventRoute.PeekBranchNode\n- uid: System.Windows.EventRoute.PeekBranchSource*\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: PeekBranchSource\n  nameWithType: EventRoute.PeekBranchSource\n- uid: System.Windows.EventRoute.PopBranchNode*\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: PopBranchNode\n  nameWithType: EventRoute.PopBranchNode\n- uid: System.Windows.EventRoute.PushBranchNode*\n  parent: System.Windows.EventRoute\n  isExternal: false\n  name: PushBranchNode\n  nameWithType: EventRoute.PushBranchNode\n"}