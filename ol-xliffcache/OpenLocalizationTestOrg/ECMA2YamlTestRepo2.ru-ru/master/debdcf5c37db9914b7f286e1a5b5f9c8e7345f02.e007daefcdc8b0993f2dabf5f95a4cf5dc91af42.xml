{"nodes":[{"pos":[623,804],"content":"Allows security actions for <xref href=\"System.Security.Permissions.ZoneIdentityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows security actions for <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ZoneIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be applied to code using declarative security.","pos":[0,149],"source":"Allows security actions for <xref href=\"System.Security.Permissions.ZoneIdentityPermission\"></xref> to be applied to code using declarative security."},{"content":"This class cannot be inherited.","pos":[150,181]}]},{"pos":[817,1908],"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.      > [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.   >    >  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. In the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The scope of the declaration that is allowed depends on the &lt;xref:System.Security.Permissions.SecurityAction&gt; that is used.","pos":[0,123],"source":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Starting with the <ph id=\"ph2\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, identity permissions are not used.","pos":[129,260],"source":"      > [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used."},{"content":"&gt;    &gt;  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted.","pos":[263,413],"source":"   >    >  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted."},{"content":"That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria.","pos":[414,563]},{"content":"In the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust.","pos":[564,687]},{"content":"This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[688,802]},{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[809,959]},{"content":"Security attributes are used only for declarative security.","pos":[960,1019]},{"content":"For imperative security, use the corresponding permission class.","pos":[1020,1084]}]},{"pos":[3309,3513],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ZoneIdentityPermissionAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.ZoneIdentityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."},{"pos":[3736,3818],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values."},{"pos":[4414,4512],"content":"Creates and returns a new <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ZoneIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns a new <xref href=\"System.Security.Permissions.ZoneIdentityPermission\"></xref>."},{"pos":[4525,4839],"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[0,312],"nodes":[{"content":"This method should only be called by the security system, never by application code.","pos":[0,84]},{"content":"At compile time, attributes convert security declarations to a serialized form in metadata.","pos":[91,182]},{"content":"Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[183,312]}]}]},{"pos":[5019,5128],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ZoneIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to this attribute.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.ZoneIdentityPermission\"></xref> that corresponds to this attribute."},{"pos":[5671,5747],"content":"Gets or sets membership in the content zone specified by the property value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets membership in the content zone specified by the property value.","pos":[0,76]}]},{"pos":[5898,5966],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityZone\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.SecurityZone\"></xref> values."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  id: ZoneIdentityPermissionAttribute\n  children:\n  - System.Security.Permissions.ZoneIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission\n  - System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone\n  langs:\n  - csharp\n  name: ZoneIdentityPermissionAttribute\n  nameWithType: ZoneIdentityPermissionAttribute\n  fullName: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  type: Class\n  summary: Allows security actions for <xref href=\"System.Security.Permissions.ZoneIdentityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.\n  remarks: \"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \\n  \\n> [!IMPORTANT]\\n>  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.  \\n>   \\n>  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. In the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ZoneIdentityPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  platform:\n  - net462\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  langs:\n  - csharp\n  name: ZoneIdentityPermissionAttribute(SecurityAction)\n  nameWithType: ZoneIdentityPermissionAttribute.ZoneIdentityPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.ZoneIdentityPermissionAttribute.ZoneIdentityPermissionAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.ZoneIdentityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  syntax:\n    content: public ZoneIdentityPermissionAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.\n  overload: System.Security.Permissions.ZoneIdentityPermissionAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: ZoneIdentityPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new <xref href=\"System.Security.Permissions.ZoneIdentityPermission\"></xref>.\n  remarks: \"This method should only be called by the security system, never by application code.  \\n  \\n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.\"\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Security.Permissions.ZoneIdentityPermission\"></xref> that corresponds to this attribute.\n  overload: System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone\n  id: Zone\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  langs:\n  - csharp\n  name: Zone\n  nameWithType: ZoneIdentityPermissionAttribute.Zone\n  fullName: System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets membership in the content zone specified by the property value.\n  syntax:\n    content: public System.Security.SecurityZone Zone { get; set; }\n    return:\n      type: System.Security.SecurityZone\n      description: One of the <xref href=\"System.Security.SecurityZone\"></xref> values.\n  overload: System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  isExternal: false\n  name: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  isExternal: false\n  name: ZoneIdentityPermissionAttribute(SecurityAction)\n  nameWithType: ZoneIdentityPermissionAttribute.ZoneIdentityPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.ZoneIdentityPermissionAttribute.ZoneIdentityPermissionAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: ZoneIdentityPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  isExternal: false\n  name: Zone\n  nameWithType: ZoneIdentityPermissionAttribute.Zone\n  fullName: System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone\n- uid: System.Security.SecurityZone\n  parent: System.Security\n  isExternal: false\n  name: SecurityZone\n  nameWithType: SecurityZone\n  fullName: System.Security.SecurityZone\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.#ctor*\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  isExternal: false\n  name: ZoneIdentityPermissionAttribute\n  nameWithType: ZoneIdentityPermissionAttribute.ZoneIdentityPermissionAttribute\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission*\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: ZoneIdentityPermissionAttribute.CreatePermission\n- uid: System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone*\n  parent: System.Security.Permissions.ZoneIdentityPermissionAttribute\n  isExternal: false\n  name: Zone\n  nameWithType: ZoneIdentityPermissionAttribute.Zone\n"}