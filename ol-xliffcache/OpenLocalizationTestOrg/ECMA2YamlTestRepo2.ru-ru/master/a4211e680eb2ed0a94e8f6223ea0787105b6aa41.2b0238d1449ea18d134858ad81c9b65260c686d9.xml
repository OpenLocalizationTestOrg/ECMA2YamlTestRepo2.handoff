{"nodes":[{"pos":[584,713],"content":"Provides functionality for a stack of client channel sinks that must be invoked during an asynchronous message response decoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides functionality for a stack of client channel sinks that must be invoked during an asynchronous message response decoding.","pos":[0,129]}]},{"pos":[726,1819],"content":"The IClientChannelSinkStack is used during processing of responses to asynchronous calls.       During a synchronous call, the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A?displayProperty=fullName> method is called when a message is outbound to the server. Each sink in the sink chain calls the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A> method on the next sink until the call reaches the transport sink at the end of the chain. From there the message is transported to the server.       When the formatter sink is called through the <xref:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage%2A> method, it dispatches the call asynchronously by calling <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A> on the next channel sink. A stack of reply sinks is needed to process the response. Any sink that wants to process the response needs to push itself to the client channel sink stack inside of <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The IClientChannelSinkStack is used during processing of responses to asynchronous calls.       During a synchronous call, the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A?displayProperty=fullName> method is called when a message is outbound to the server. Each sink in the sink chain calls the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A> method on the next sink until the call reaches the transport sink at the end of the chain. From there the message is transported to the server.       When the formatter sink is called through the <xref:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage%2A> method, it dispatches the call asynchronously by calling <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A> on the next channel sink. A stack of reply sinks is needed to process the response. Any sink that wants to process the response needs to push itself to the client channel sink stack inside of <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A>.","pos":[0,1089],"nodes":[{"content":"The IClientChannelSinkStack is used during processing of responses to asynchronous calls.","pos":[0,89]},{"content":"During a synchronous call, the &lt;xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A?displayProperty=fullName&gt; method is called when a message is outbound to the server.","pos":[96,287],"source":"       During a synchronous call, the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A?displayProperty=fullName> method is called when a message is outbound to the server."},{"content":"Each sink in the sink chain calls the &lt;xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A&gt; method on the next sink until the call reaches the transport sink at the end of the chain.","pos":[288,493],"source":" Each sink in the sink chain calls the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A> method on the next sink until the call reaches the transport sink at the end of the chain."},{"content":"From there the message is transported to the server.","pos":[494,546]},{"content":"When the formatter sink is called through the &lt;xref:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage%2A&gt; method, it dispatches the call asynchronously by calling &lt;xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A&gt; on the next channel sink.","pos":[553,840],"source":"       When the formatter sink is called through the <xref:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage%2A> method, it dispatches the call asynchronously by calling <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A> on the next channel sink."},{"content":"A stack of reply sinks is needed to process the response.","pos":[841,898]},{"content":"Any sink that wants to process the response needs to push itself to the client channel sink stack inside of &lt;xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A&gt;.","pos":[899,1089],"source":" Any sink that wants to process the response needs to push itself to the client channel sink stack inside of <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A>."}]}]},{"pos":[2683,2793],"content":"Pops the information associated with all the sinks from the sink stack up to and including the specified sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pops the information associated with all the sinks from the sink stack up to and including the specified sink.","pos":[0,110]}]},{"pos":[3009,3059],"content":"The sink to remove and return from the sink stack.","needQuote":true,"needEscape":true,"nodes":[{"content":"The sink to remove and return from the sink stack.","pos":[0,50]}]},{"pos":[3117,3198],"content":"Information generated on the request side and associated with the specified sink.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information generated on the request side and associated with the specified sink.","pos":[0,81]}]},{"pos":[3399,3460],"content":"The immediate caller does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller does not have infrastructure permission.","pos":[0,61]}]},{"pos":[4097,4178],"content":"Pushes the specified sink and information associated with it onto the sink stack.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pushes the specified sink and information associated with it onto the sink stack.","pos":[0,81]}]},{"pos":[4190,4435],"content":"The information generated on the request side and specified in the <ph id=\"ph1\">`state`</ph> parameter is returned in the <ph id=\"ph2\">`state`</ph> parameter of the &lt;xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse%2A&gt; method on the corresponding sink.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The information generated on the request side and specified in the `state` parameter is returned in the `state` parameter of the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse%2A> method on the corresponding sink."},{"pos":[4664,4701],"content":"The sink to push onto the sink stack.","needQuote":true,"needEscape":true,"nodes":[{"content":"The sink to push onto the sink stack.","pos":[0,37]}]},{"pos":[4763,4841],"content":"Information generated on the request side that is needed on the response side.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information generated on the request side that is needed on the response side.","pos":[0,78]}]},{"pos":[5043,5104],"content":"The immediate caller does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller does not have infrastructure permission.","pos":[0,61]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Channels.IClientChannelSinkStack\n  id: IClientChannelSinkStack\n  children:\n  - System.Runtime.Remoting.Channels.IClientChannelSinkStack.Pop(System.Runtime.Remoting.Channels.IClientChannelSink)\n  - System.Runtime.Remoting.Channels.IClientChannelSinkStack.Push(System.Runtime.Remoting.Channels.IClientChannelSink,System.Object)\n  langs:\n  - csharp\n  name: IClientChannelSinkStack\n  nameWithType: IClientChannelSinkStack\n  fullName: System.Runtime.Remoting.Channels.IClientChannelSinkStack\n  type: Interface\n  summary: Provides functionality for a stack of client channel sinks that must be invoked during an asynchronous message response decoding.\n  remarks: \"The IClientChannelSinkStack is used during processing of responses to asynchronous calls.  \\n  \\n During a synchronous call, the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A?displayProperty=fullName> method is called when a message is outbound to the server. Each sink in the sink chain calls the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A> method on the next sink until the call reaches the transport sink at the end of the chain. From there the message is transported to the server.  \\n  \\n When the formatter sink is called through the <xref:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage%2A> method, it dispatches the call asynchronously by calling <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A> on the next channel sink. A stack of reply sinks is needed to process the response. Any sink that wants to process the response needs to push itself to the client channel sink stack inside of <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest%2A>.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IClientChannelSinkStack : System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack\n  implements:\n  - System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Pop(System.Runtime.Remoting.Channels.IClientChannelSink)\n  id: Pop(System.Runtime.Remoting.Channels.IClientChannelSink)\n  parent: System.Runtime.Remoting.Channels.IClientChannelSinkStack\n  langs:\n  - csharp\n  name: Pop(IClientChannelSink)\n  nameWithType: IClientChannelSinkStack.Pop(IClientChannelSink)\n  fullName: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Pop(IClientChannelSink)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Channels\n  summary: Pops the information associated with all the sinks from the sink stack up to and including the specified sink.\n  syntax:\n    content: public object Pop (System.Runtime.Remoting.Channels.IClientChannelSink sink);\n    parameters:\n    - id: sink\n      type: System.Runtime.Remoting.Channels.IClientChannelSink\n      description: The sink to remove and return from the sink stack.\n    return:\n      type: System.Object\n      description: Information generated on the request side and associated with the specified sink.\n  overload: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Pop*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller does not have infrastructure permission.\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Push(System.Runtime.Remoting.Channels.IClientChannelSink,System.Object)\n  id: Push(System.Runtime.Remoting.Channels.IClientChannelSink,System.Object)\n  parent: System.Runtime.Remoting.Channels.IClientChannelSinkStack\n  langs:\n  - csharp\n  name: Push(IClientChannelSink,Object)\n  nameWithType: IClientChannelSinkStack.Push(IClientChannelSink,Object)\n  fullName: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Push(IClientChannelSink,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Channels\n  summary: Pushes the specified sink and information associated with it onto the sink stack.\n  remarks: The information generated on the request side and specified in the `state` parameter is returned in the `state` parameter of the <xref:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse%2A> method on the corresponding sink.\n  syntax:\n    content: public void Push (System.Runtime.Remoting.Channels.IClientChannelSink sink, object state);\n    parameters:\n    - id: sink\n      type: System.Runtime.Remoting.Channels.IClientChannelSink\n      description: The sink to push onto the sink stack.\n    - id: state\n      type: System.Object\n      description: Information generated on the request side that is needed on the response side.\n  overload: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Push*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller does not have infrastructure permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Pop(System.Runtime.Remoting.Channels.IClientChannelSink)\n  parent: System.Runtime.Remoting.Channels.IClientChannelSinkStack\n  isExternal: false\n  name: Pop(IClientChannelSink)\n  nameWithType: IClientChannelSinkStack.Pop(IClientChannelSink)\n  fullName: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Pop(IClientChannelSink)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.Remoting.Channels.IClientChannelSink\n  parent: System.Runtime.Remoting.Channels\n  isExternal: false\n  name: IClientChannelSink\n  nameWithType: IClientChannelSink\n  fullName: System.Runtime.Remoting.Channels.IClientChannelSink\n- uid: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Push(System.Runtime.Remoting.Channels.IClientChannelSink,System.Object)\n  parent: System.Runtime.Remoting.Channels.IClientChannelSinkStack\n  isExternal: false\n  name: Push(IClientChannelSink,Object)\n  nameWithType: IClientChannelSinkStack.Push(IClientChannelSink,Object)\n  fullName: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Push(IClientChannelSink,Object)\n- uid: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Pop*\n  parent: System.Runtime.Remoting.Channels.IClientChannelSinkStack\n  isExternal: false\n  name: Pop\n  nameWithType: IClientChannelSinkStack.Pop\n- uid: System.Runtime.Remoting.Channels.IClientChannelSinkStack.Push*\n  parent: System.Runtime.Remoting.Channels.IClientChannelSinkStack\n  isExternal: false\n  name: Push\n  nameWithType: IClientChannelSinkStack.Push\n"}