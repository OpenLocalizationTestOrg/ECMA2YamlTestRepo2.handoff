{"nodes":[{"pos":[878,964],"content":"A task factory which can take a code DOM supported language and create a task from it.","needQuote":true,"needEscape":true,"nodes":[{"content":"A task factory which can take a code DOM supported language and create a task from it.","pos":[0,86]}]},{"pos":[1584,1609],"content":"Creates the task factory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates the task factory.","pos":[0,25]}]},{"pos":[2238,2284],"content":"Cleans up any context or state used in a task.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cleans up any context or state used in a task.","pos":[0,46]}]},{"pos":[2466,2487],"content":"The task to clean up.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task to clean up.","pos":[0,21]}]},{"pos":[3083,3191],"content":"Create a <ph id=\"ph1\">`taskfactory`</ph> instance which contains the data that needs to be refreshed between task invocations.","needQuote":true,"needEscape":true,"source":"Create a `taskfactory` instance which contains the data that needs to be refreshed between task invocations."},{"pos":[3427,3480],"content":"The host that logs information from the task factory.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host that logs information from the task factory.","pos":[0,53]}]},{"pos":[3556,3577],"content":"Returns the new task.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the new task.","pos":[0,21]}]},{"pos":[4057,4098],"content":"The MSBuild engine uses this for logging.","needQuote":true,"needEscape":true,"nodes":[{"content":"The MSBuild engine uses this for logging.","pos":[0,41]}]},{"pos":[4214,4243],"content":"Returns the name of the task.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the name of the task.","pos":[0,29]}]},{"pos":[4758,4808],"content":"Gets the type information for all task parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the type information for all task parameters.","pos":[0,50]}]},{"pos":[5013,5078],"content":"Returns an array of the type information for all task parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an array of the type information for all task parameters.","pos":[0,65]}]},{"pos":[6083,6111],"content":"Initialzes the task factory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initialzes the task factory.","pos":[0,28]}]},{"pos":[6454,6475],"content":"The name of the task.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the task.","pos":[0,21]}]},{"pos":[6629,6657],"content":"The parameters for the task.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameters for the task.","pos":[0,28]}]},{"pos":[6733,6767],"content":"The element contents for the task.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element contents for the task.","pos":[0,34]}]},{"pos":[6871,6922],"content":"The logging host that gets information about tasks.","needQuote":true,"needEscape":true,"nodes":[{"content":"The logging host that gets information about tasks.","pos":[0,51]}]},{"pos":[6981,7010],"content":"Returns the new task factory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the new task factory.","pos":[0,29]}]},{"pos":[7475,7503],"content":"Represents the type of task.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the type of task.","pos":[0,28]}]},{"pos":[7612,7634],"content":"Returns the task type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the task type.","pos":[0,22]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Tasks.CodeTaskFactory\n  id: CodeTaskFactory\n  children:\n  - Microsoft.Build.Tasks.CodeTaskFactory.#ctor\n  - Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)\n  - Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)\n  - Microsoft.Build.Tasks.CodeTaskFactory.FactoryName\n  - Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters\n  - Microsoft.Build.Tasks.CodeTaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)\n  - Microsoft.Build.Tasks.CodeTaskFactory.TaskType\n  langs:\n  - csharp\n  name: CodeTaskFactory\n  nameWithType: CodeTaskFactory\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory\n  type: Class\n  summary: A task factory which can take a code DOM supported language and create a task from it.\n  syntax:\n    content: 'public class CodeTaskFactory : Microsoft.Build.Framework.ITaskFactory'\n  inheritance:\n  - System.Object\n  implements:\n  - Microsoft.Build.Framework.ITaskFactory\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.#ctor\n  id: '#ctor'\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  langs:\n  - csharp\n  name: CodeTaskFactory()\n  nameWithType: CodeTaskFactory.CodeTaskFactory()\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CodeTaskFactory()\n  type: Constructor\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Creates the task factory.\n  syntax:\n    content: public CodeTaskFactory ();\n    parameters: []\n  overload: Microsoft.Build.Tasks.CodeTaskFactory.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)\n  id: CleanupTask(Microsoft.Build.Framework.ITask)\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  langs:\n  - csharp\n  name: CleanupTask(ITask)\n  nameWithType: CodeTaskFactory.CleanupTask(ITask)\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(ITask)\n  type: Method\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Cleans up any context or state used in a task.\n  syntax:\n    content: public void CleanupTask (Microsoft.Build.Framework.ITask task);\n    parameters:\n    - id: task\n      type: Microsoft.Build.Framework.ITask\n      description: The task to clean up.\n  overload: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)\n  id: CreateTask(Microsoft.Build.Framework.IBuildEngine)\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  langs:\n  - csharp\n  name: CreateTask(IBuildEngine)\n  nameWithType: CodeTaskFactory.CreateTask(IBuildEngine)\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(IBuildEngine)\n  type: Method\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Create a `taskfactory` instance which contains the data that needs to be refreshed between task invocations.\n  syntax:\n    content: public Microsoft.Build.Framework.ITask CreateTask (Microsoft.Build.Framework.IBuildEngine loggingHost);\n    parameters:\n    - id: loggingHost\n      type: Microsoft.Build.Framework.IBuildEngine\n      description: The host that logs information from the task factory.\n    return:\n      type: Microsoft.Build.Framework.ITask\n      description: Returns the new task.\n  overload: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName\n  id: FactoryName\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  langs:\n  - csharp\n  name: FactoryName\n  nameWithType: CodeTaskFactory.FactoryName\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName\n  type: Property\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: The MSBuild engine uses this for logging.\n  syntax:\n    content: public string FactoryName { get; }\n    return:\n      type: System.String\n      description: Returns the name of the task.\n  overload: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters\n  id: GetTaskParameters\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  langs:\n  - csharp\n  name: GetTaskParameters()\n  nameWithType: CodeTaskFactory.GetTaskParameters()\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters()\n  type: Method\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Gets the type information for all task parameters.\n  syntax:\n    content: public Microsoft.Build.Framework.TaskPropertyInfo[] GetTaskParameters ();\n    parameters: []\n    return:\n      type: Microsoft.Build.Framework.TaskPropertyInfo[]\n      description: Returns an array of the type information for all task parameters.\n  overload: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)\n  id: Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  langs:\n  - csharp\n  name: Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)\n  nameWithType: CodeTaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)\n  type: Method\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Initialzes the task factory.\n  syntax:\n    content: public bool Initialize (string taskName, System.Collections.Generic.IDictionary<string,Microsoft.Build.Framework.TaskPropertyInfo> taskParameters, string taskElementContents, Microsoft.Build.Framework.IBuildEngine taskFactoryLoggingHost);\n    parameters:\n    - id: taskName\n      type: System.String\n      description: The name of the task.\n    - id: taskParameters\n      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo}\n      description: The parameters for the task.\n    - id: taskElementContents\n      type: System.String\n      description: The element contents for the task.\n    - id: taskFactoryLoggingHost\n      type: Microsoft.Build.Framework.IBuildEngine\n      description: The logging host that gets information about tasks.\n    return:\n      type: System.Boolean\n      description: Returns the new task factory.\n  overload: Microsoft.Build.Tasks.CodeTaskFactory.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.TaskType\n  id: TaskType\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  langs:\n  - csharp\n  name: TaskType\n  nameWithType: CodeTaskFactory.TaskType\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.TaskType\n  type: Property\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Represents the type of task.\n  syntax:\n    content: public Type TaskType { get; }\n    return:\n      type: System.Type\n      description: Returns the task type.\n  overload: Microsoft.Build.Tasks.CodeTaskFactory.TaskType*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.#ctor\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: CodeTaskFactory()\n  nameWithType: CodeTaskFactory.CodeTaskFactory()\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CodeTaskFactory()\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: CleanupTask(ITask)\n  nameWithType: CodeTaskFactory.CleanupTask(ITask)\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(ITask)\n- uid: Microsoft.Build.Framework.ITask\n  parent: Microsoft.Build.Framework\n  isExternal: false\n  name: ITask\n  nameWithType: ITask\n  fullName: Microsoft.Build.Framework.ITask\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: CreateTask(IBuildEngine)\n  nameWithType: CodeTaskFactory.CreateTask(IBuildEngine)\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(IBuildEngine)\n- uid: Microsoft.Build.Framework.IBuildEngine\n  parent: Microsoft.Build.Framework\n  isExternal: false\n  name: IBuildEngine\n  nameWithType: IBuildEngine\n  fullName: Microsoft.Build.Framework.IBuildEngine\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: FactoryName\n  nameWithType: CodeTaskFactory.FactoryName\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: GetTaskParameters()\n  nameWithType: CodeTaskFactory.GetTaskParameters()\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters()\n- uid: Microsoft.Build.Framework.TaskPropertyInfo[]\n  parent: Microsoft.Build.Framework\n  isExternal: false\n  name: TaskPropertyInfo\n  nameWithType: TaskPropertyInfo\n  fullName: Microsoft.Build.Framework.TaskPropertyInfo[]\n  spec.csharp:\n  - uid: Microsoft.Build.Framework.TaskPropertyInfo\n    name: TaskPropertyInfo\n    nameWithType: TaskPropertyInfo\n    fullName: TaskPropertyInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)\n  nameWithType: CodeTaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,TaskPropertyInfo>\n  nameWithType: IDictionary<String,TaskPropertyInfo>\n  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Framework.TaskPropertyInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,Microsoft.Build.Framework.TaskPropertyInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: Microsoft.Build.Framework.TaskPropertyInfo\n    name: TaskPropertyInfo\n    nameWithType: TaskPropertyInfo\n    fullName: TaskPropertyInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.TaskType\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: TaskType\n  nameWithType: CodeTaskFactory.TaskType\n  fullName: Microsoft.Build.Tasks.CodeTaskFactory.TaskType\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.#ctor*\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: CodeTaskFactory\n  nameWithType: CodeTaskFactory.CodeTaskFactory\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask*\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: CleanupTask\n  nameWithType: CodeTaskFactory.CleanupTask\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask*\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: CreateTask\n  nameWithType: CodeTaskFactory.CreateTask\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName*\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: FactoryName\n  nameWithType: CodeTaskFactory.FactoryName\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters*\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: GetTaskParameters\n  nameWithType: CodeTaskFactory.GetTaskParameters\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.Initialize*\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: Initialize\n  nameWithType: CodeTaskFactory.Initialize\n- uid: Microsoft.Build.Tasks.CodeTaskFactory.TaskType*\n  parent: Microsoft.Build.Tasks.CodeTaskFactory\n  isExternal: false\n  name: TaskType\n  nameWithType: CodeTaskFactory.TaskType\n"}