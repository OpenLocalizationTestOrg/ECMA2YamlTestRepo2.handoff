{"nodes":[{"pos":[529,634],"content":"Defines the compatibility guarantee of a component, type, or type member that may span multiple versions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the compatibility guarantee of a component, type, or type member that may span multiple versions.","pos":[0,105]}]},{"pos":[647,14360],"content":"The ComponentGuaranteesAttribute is used by developers of components and class libraries to indicate the level of compatibility that consumers of their libraries can expect across multiple versions. It indicates the level of guarantee that a future version of the library or component will not break an existing client. Clients can then use the ComponentGuaranteesAttribute as an aid in designing their own interfaces to ensure stability across versions.      > [!NOTE] >  The common language runtime (CLR) does not use this attribute in any way. Its value lies in formally documenting the intent of the component author. Compile-time tools can also use these declarations to detect compile-time errors that would otherwise break the declared guarantee.      ## Levels of Compatibility    The ComponentGuaranteesAttribute supports the following levels of compatibility, which are represented by members of the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeration:      -   No version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>). The client can expect that future versions will break the existing client. For more information, see the [No Compatibility](#None) section later in this topic.      -   Side-by-side version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>). The component has been tested to work when more than one version of the assembly is loaded in the same application domain. In general, future versions can break compatibility. However, when breaking changes are made, the old version is not modified but exists alongside the new version. Side-by-side execution is the expected way to make existing clients work when breaking changes are made. For more information, see the [Side-by-Side Compatibility](#SideBySide) section later in this topic.      -   Stable version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>). Future versions should not break the client, and side-by-side execution should not be needed. However, if the client is inadvertently broken, it may be possible to use side-by-side execution to fix the problem. For more information, see the [Stable Compatibility](#Standard) section.      -   Exchange version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>). Extraordinary care is taken to ensure that future versions will not break the client. The client should use only these types in the signature of interfaces that are used for communication with other assemblies that are deployed independently of one another. Only one version of these types is expected to be in a given application domain, which means that if a client breaks, side-by-side execution cannot fix the compatibility problem. For more information, see the [Exchange Type Compatibility](#Exchange) section.       The following sections discuss each level of guarantee in greater detail.      <a name=\"None\"></a>    ### No Compatibility    Marking a component as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the provider makes no guarantees about compatibility. Clients should avoid taking any dependencies on the exposed interfaces. This level of compatibility is useful for types that are experimental or that are publicly exposed but are intended only for components that are always updated at the same time. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> explicitly indicates that this component should not be used by external components.      <a name=\"SideBySide\"></a>    ### Side-by-Side Compatibility    Marking a component as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the component has been tested to work when more than one version of the assembly is loaded into the same application domain. Breaking changes are allowed as long as they are made to the assembly that has the greater version number. Components that are bound to an old version of the assembly are expected to continue to bind to the old version, and other components can bind to the new version. It is also possible to update a component that is declared to be <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> by destructively modifying the old version.      <a name=\"Standard\"></a>    ### Stable Compatibility    Marking a type as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the type should remain stable across versions. However, it may also be possible for side-by-side versions of a stable type to exist in the same application domain.       Stable types maintain a high binary compatibility bar. Because of this, providers should avoid making breaking changes to stable types. The following kinds of changes are acceptable:      -   Adding private instance fields to, or removing fields from, a type, as long as this does not break the serialization format.      -   Changing a non-serializable type to a serializable type. (However, a serializable type cannot be changed to a non-serializable type.)      -   Throwing new, more derived exceptions from a method.      -   Improving the performance of a method.      -   Changing the range of return values, as long as the change does not adversely affect the majority of clients.      -   Fixing serious bugs, if the business justification is high and the number of adversely affected clients is low.       Because new versions of stable components are not expected to break existing clients, generally only one version of a stable component is needed in an application domain. However, this is not a requirement, because stable types are not used as well-known exchange types that all components agree upon. Therefore, if a new version of a stable component does inadvertently break some component, and if other components need the new version, it may be possible to fix the problem by loading both the old and new component.       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> provides a stronger version compatibility guarantee than <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>. It is a common default for multi-version components.       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> can be combined with <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, which states that the component will not break compatibility but is tested to work when more than one version is loaded in a given application domain.       After a type or method is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, it can be upgraded to <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>. However, it cannot be downgraded to <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.      <a name=\"Exchange\"></a>    ### Exchange Type Compatibility    Marking a type as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> provides a stronger version compatibility guarantee than <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, and should be applied to the most stable of all types. These types are intended to be used for interchange between independently built components across all component boundaries in both time (any version of the CLR or any version of a component or application) and space (cross-process, cross-CLR in one process, cross-application domain in one CLR). If a breaking change is made to an exchange type, it is impossible to fix the issue by loading multiple versions of the type.       Exchange types should be changed only when a problem is very serious (such as a severe security issue) or the probability of breakage is very low (that is, if the behavior was already broken in a random way that code could not have conceivably taken a dependency on). You can make the following kinds of changes to an exchange type:      -   Add inheritance of new interface definitions.      -   Add new private methods that implement the methods of newly inherited interface definitions.      -   Add new static fields.      -   Add new static methods.      -   Add new non-virtual instance methods.       The following are considered breaking changes and are not allowed for primitive types:      -   Changing serialization formats. Version-tolerant serialization is required.      -   Adding or removing private instance fields. This risks changing the serialization format of the type and breaking client code that uses reflection.      -   Changing the serializability of a type. A non-serializable type may not be made serializable, and vice versa.      -   Throwing different exceptions from a method.      -   Changing the range of a method's return values, unless the member definition raises this possibility and clearly indicates how clients should handle unknown values.      -   Fixing most bugs. Consumers of the type will rely on the existing behavior.       After a component, type, or member is marked with the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> guarantee, it cannot be changed to either <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> or <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.       Typically, exchange types are the basic types (such as <xref:System.Int32> and <xref:System.String> in the .NET Framework) and interfaces (such as <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, and <xref:System.IComparable%601>) that are commonly used in public interfaces.       Exchange types may publicly expose only other types that are also marked with <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> compatibility. In addition, exchange types cannot depend on the behavior of Windows APIs that are prone to change.      ## Component Guarantees: A Summary    The following table indicates how a component's characteristics and usage affect its compatibility guarantee.      |Component characteristics|Exchange|Stable|Side-by-Side|None|   |-------------------------------|--------------|------------|--------------------|----------|   |Can be used in interfaces between components that version independently.|Y|N|N|N|   |Can be used (privately) by an assembly that versions independently.|Y|Y|Y|N|   |Can have multiple versions in a single application domain.|N|Y|Y|Y|   |Can make breaking changes|N|N|Y|Y|   |Tested to make certain multiple versions of the assembly can be loaded together.|N|N|Y|N|   |Can make breaking changes in place.|N|N|N|Y|   |Can make very safe non-breaking servicing changes in place.|Y|Y|Y|Y|      ## Applying the Attribute    You can apply the ComponentGuaranteesAttribute to an assembly, a type, or a type member. Its application is hierarchical. That is, by default, the guarantee defined by the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> property of the attribute at the assembly level defines the guarantee of all types in the assembly and all members in those types. Similarly, if the guarantee is applied to the type, by default it also applies to each member of the type.       This inherited guarantee can be overridden by applying the ComponentGuaranteesAttribute to individual types and type members. However, guarantees that override the default can only weaken the guarantee; they cannot strengthen it. For example, if an assembly is marked with the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> guarantee, its types and members have no compatibility guarantee, and any other guarantee that is applied to types or members in the assembly is ignored.      ## Testing the Guarantee    The <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> property returns a member of the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeration, which is marked with the <xref:System.FlagsAttribute> attribute. This means that you should test for the flag that you are interested in by masking away potentially unknown flags. For example, the following example tests whether a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.       [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)]  [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb)]       The following example tests whether a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> or <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.       [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)]  [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb)]       The following example tests wither a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> (that is, neither <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> nor <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>).       [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)]  [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ComponentGuaranteesAttribute is used by developers of components and class libraries to indicate the level of compatibility that consumers of their libraries can expect across multiple versions.","pos":[0,198]},{"content":"It indicates the level of guarantee that a future version of the library or component will not break an existing client.","pos":[199,319]},{"content":"Clients can then use the ComponentGuaranteesAttribute as an aid in designing their own interfaces to ensure stability across versions.","pos":[320,454]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The common language runtime (CLR) does not use this attribute in any way.","pos":[460,546],"source":"      > [!NOTE] >  The common language runtime (CLR) does not use this attribute in any way."},{"content":"Its value lies in formally documenting the intent of the component author.","pos":[547,621]},{"content":"Compile-time tools can also use these declarations to detect compile-time errors that would otherwise break the declared guarantee.","pos":[622,753]},{"content":"Levels of Compatibility    The ComponentGuaranteesAttribute supports the following levels of compatibility, which are represented by members of the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; enumeration:      -   No version-to-version compatibility (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).","pos":[762,1115],"source":"      ## Levels of Compatibility    The ComponentGuaranteesAttribute supports the following levels of compatibility, which are represented by members of the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeration:      -   No version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>)."},{"content":"The client can expect that future versions will break the existing client.","pos":[1116,1190]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>No Compatibility<ept id=\"p1\">](#None)</ept> section later in this topic.","pos":[1191,1275],"source":" For more information, see the [No Compatibility](#None) section later in this topic."},{"content":"-   Side-by-side version-to-version compatibility (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).","pos":[1281,1418],"source":"      -   Side-by-side version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>)."},{"content":"The component has been tested to work when more than one version of the assembly is loaded in the same application domain.","pos":[1419,1541]},{"content":"In general, future versions can break compatibility.","pos":[1542,1594]},{"content":"However, when breaking changes are made, the old version is not modified but exists alongside the new version.","pos":[1595,1705]},{"content":"Side-by-side execution is the expected way to make existing clients work when breaking changes are made.","pos":[1706,1810]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Side-by-Side Compatibility<ept id=\"p1\">](#SideBySide)</ept> section later in this topic.","pos":[1811,1911],"source":" For more information, see the [Side-by-Side Compatibility](#SideBySide) section later in this topic."},{"content":"-   Stable version-to-version compatibility (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).","pos":[1917,2048],"source":"      -   Stable version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>)."},{"content":"Future versions should not break the client, and side-by-side execution should not be needed.","pos":[2049,2142]},{"content":"However, if the client is inadvertently broken, it may be possible to use side-by-side execution to fix the problem.","pos":[2143,2259]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Stable Compatibility<ept id=\"p1\">](#Standard)</ept> section.","pos":[2260,2332],"source":" For more information, see the [Stable Compatibility](#Standard) section."},{"content":"-   Exchange version-to-version compatibility (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).","pos":[2338,2471],"source":"      -   Exchange version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>)."},{"content":"Extraordinary care is taken to ensure that future versions will not break the client.","pos":[2472,2557]},{"content":"The client should use only these types in the signature of interfaces that are used for communication with other assemblies that are deployed independently of one another.","pos":[2558,2729]},{"content":"Only one version of these types is expected to be in a given application domain, which means that if a client breaks, side-by-side execution cannot fix the compatibility problem.","pos":[2730,2908]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Exchange Type Compatibility<ept id=\"p1\">](#Exchange)</ept> section.","pos":[2909,2988],"source":" For more information, see the [Exchange Type Compatibility](#Exchange) section."},{"content":"The following sections discuss each level of guarantee in greater detail.","pos":[2995,3068]},{"content":"<bpt id=\"p1\">&lt;a name=\"None\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ### No Compatibility    Marking a component as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; indicates that the provider makes no guarantees about compatibility.","pos":[3074,3297],"source":"<a name=\"None\"></a>    ### No Compatibility    Marking a component as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the provider makes no guarantees about compatibility."},{"content":"Clients should avoid taking any dependencies on the exposed interfaces.","pos":[3298,3369]},{"content":"This level of compatibility is useful for types that are experimental or that are publicly exposed but are intended only for components that are always updated at the same time.","pos":[3370,3547]},{"content":"&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; explicitly indicates that this component should not be used by external components.","pos":[3548,3691],"source":" <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> explicitly indicates that this component should not be used by external components."},{"content":"<bpt id=\"p1\">&lt;a name=\"SideBySide\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ### Side-by-Side Compatibility    Marking a component as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; indicates that the component has been tested to work when more than one version of the assembly is loaded into the same application domain.","pos":[3697,4007],"source":"<a name=\"SideBySide\"></a>    ### Side-by-Side Compatibility    Marking a component as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the component has been tested to work when more than one version of the assembly is loaded into the same application domain."},{"content":"Breaking changes are allowed as long as they are made to the assembly that has the greater version number.","pos":[4008,4114]},{"content":"Components that are bound to an old version of the assembly are expected to continue to bind to the old version, and other components can bind to the new version.","pos":[4115,4277]},{"content":"It is also possible to update a component that is declared to be &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; by destructively modifying the old version.","pos":[4278,4446],"source":" It is also possible to update a component that is declared to be <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> by destructively modifying the old version."},{"content":"<bpt id=\"p1\">&lt;a name=\"Standard\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ### Stable Compatibility    Marking a type as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; indicates that the type should remain stable across versions.","pos":[4452,4671],"source":"<a name=\"Standard\"></a>    ### Stable Compatibility    Marking a type as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the type should remain stable across versions."},{"content":"However, it may also be possible for side-by-side versions of a stable type to exist in the same application domain.","pos":[4672,4788]},{"content":"Stable types maintain a high binary compatibility bar.","pos":[4795,4849]},{"content":"Because of this, providers should avoid making breaking changes to stable types.","pos":[4850,4930]},{"content":"The following kinds of changes are acceptable:      -   Adding private instance fields to, or removing fields from, a type, as long as this does not break the serialization format.","pos":[4931,5111]},{"content":"-   Changing a non-serializable type to a serializable type.","pos":[5117,5177]},{"content":"(However, a serializable type cannot be changed to a non-serializable type.)      -   Throwing new, more derived exceptions from a method.","pos":[5178,5316]},{"content":"-   Improving the performance of a method.","pos":[5322,5364]},{"content":"-   Changing the range of return values, as long as the change does not adversely affect the majority of clients.","pos":[5370,5483]},{"content":"-   Fixing serious bugs, if the business justification is high and the number of adversely affected clients is low.","pos":[5489,5604]},{"content":"Because new versions of stable components are not expected to break existing clients, generally only one version of a stable component is needed in an application domain.","pos":[5611,5781]},{"content":"However, this is not a requirement, because stable types are not used as well-known exchange types that all components agree upon.","pos":[5782,5912]},{"content":"Therefore, if a new version of a stable component does inadvertently break some component, and if other components need the new version, it may be possible to fix the problem by loading both the old and new component.","pos":[5913,6130]},{"content":"&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; provides a stronger version compatibility guarantee than &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.","pos":[6137,6314],"source":"       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> provides a stronger version compatibility guarantee than <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>."},{"content":"It is a common default for multi-version components.","pos":[6315,6367]},{"content":"&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; can be combined with &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;, which states that the component will not break compatibility but is tested to work when more than one version is loaded in a given application domain.","pos":[6374,6666],"source":"       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> can be combined with <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, which states that the component will not break compatibility but is tested to work when more than one version is loaded in a given application domain."},{"content":"After a type or method is marked as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;, it can be upgraded to &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.","pos":[6673,6852],"source":"       After a type or method is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, it can be upgraded to <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>."},{"content":"However, it cannot be downgraded to &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.","pos":[6853,6949],"source":" However, it cannot be downgraded to <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>."},{"content":"<bpt id=\"p1\">&lt;a name=\"Exchange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ### Exchange Type Compatibility    Marking a type as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; provides a stronger version compatibility guarantee than &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;, and should be applied to the most stable of all types.","pos":[6955,7292],"source":"<a name=\"Exchange\"></a>    ### Exchange Type Compatibility    Marking a type as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> provides a stronger version compatibility guarantee than <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, and should be applied to the most stable of all types."},{"content":"These types are intended to be used for interchange between independently built components across all component boundaries in both time (any version of the CLR or any version of a component or application) and space (cross-process, cross-CLR in one process, cross-application domain in one CLR).","pos":[7293,7588]},{"content":"If a breaking change is made to an exchange type, it is impossible to fix the issue by loading multiple versions of the type.","pos":[7589,7714]},{"content":"Exchange types should be changed only when a problem is very serious (such as a severe security issue) or the probability of breakage is very low (that is, if the behavior was already broken in a random way that code could not have conceivably taken a dependency on).","pos":[7721,7988]},{"content":"You can make the following kinds of changes to an exchange type:      -   Add inheritance of new interface definitions.","pos":[7989,8108]},{"content":"-   Add new private methods that implement the methods of newly inherited interface definitions.","pos":[8114,8210]},{"content":"-   Add new static fields.","pos":[8216,8242]},{"content":"-   Add new static methods.","pos":[8248,8275]},{"content":"-   Add new non-virtual instance methods.","pos":[8281,8322]},{"content":"The following are considered breaking changes and are not allowed for primitive types:      -   Changing serialization formats.","pos":[8329,8456]},{"content":"Version-tolerant serialization is required.","pos":[8457,8500]},{"content":"-   Adding or removing private instance fields.","pos":[8506,8553]},{"content":"This risks changing the serialization format of the type and breaking client code that uses reflection.","pos":[8554,8657]},{"content":"-   Changing the serializability of a type.","pos":[8663,8706]},{"content":"A non-serializable type may not be made serializable, and vice versa.","pos":[8707,8776]},{"content":"-   Throwing different exceptions from a method.","pos":[8782,8830]},{"content":"-   Changing the range of a method's return values, unless the member definition raises this possibility and clearly indicates how clients should handle unknown values.","pos":[8836,9004]},{"content":"-   Fixing most bugs.","pos":[9010,9031]},{"content":"Consumers of the type will rely on the existing behavior.","pos":[9032,9089]},{"content":"After a component, type, or member is marked with the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; guarantee, it cannot be changed to either &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; or &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.","pos":[9096,9375],"source":"       After a component, type, or member is marked with the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> guarantee, it cannot be changed to either <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> or <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>."},{"content":"Typically, exchange types are the basic types (such as &lt;xref:System.Int32&gt; and &lt;xref:System.String&gt; in the .NET Framework) and interfaces (such as &lt;xref:System.Collections.Generic.IList%601&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, and &lt;xref:System.IComparable%601&gt;) that are commonly used in public interfaces.","pos":[9382,9704],"source":"       Typically, exchange types are the basic types (such as <xref:System.Int32> and <xref:System.String> in the .NET Framework) and interfaces (such as <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, and <xref:System.IComparable%601>) that are commonly used in public interfaces."},{"content":"Exchange types may publicly expose only other types that are also marked with &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; compatibility.","pos":[9711,9863],"source":"       Exchange types may publicly expose only other types that are also marked with <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> compatibility."},{"content":"In addition, exchange types cannot depend on the behavior of Windows APIs that are prone to change.","pos":[9864,9963]},{"content":"Component Guarantees: A Summary    The following table indicates how a component's characteristics and usage affect its compatibility guarantee.","pos":[9972,10116]},{"content":"|Component characteristics|Exchange|Stable|Side-by-Side|None|   |-------------------------------|--------------|------------|--------------------|----------|   |Can be used in interfaces between components that version independently.|Y|N|N|N|   |Can be used (privately) by an assembly that versions independently.|Y|Y|Y|N|   |Can have multiple versions in a single application domain.|N|Y|Y|Y|   |Can make breaking changes|N|N|Y|Y|   |Tested to make certain multiple versions of the assembly can be loaded together.|N|N|Y|N|   |Can make breaking changes in place.|N|N|N|Y|   |Can make very safe non-breaking servicing changes in place.|Y|Y|Y|Y|      ## Applying the Attribute    You can apply the ComponentGuaranteesAttribute to an assembly, a type, or a type member.","pos":[10122,10889]},{"content":"Its application is hierarchical.","pos":[10890,10922]},{"content":"That is, by default, the guarantee defined by the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt; property of the attribute at the assembly level defines the guarantee of all types in the assembly and all members in those types.","pos":[10923,11179],"source":" That is, by default, the guarantee defined by the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> property of the attribute at the assembly level defines the guarantee of all types in the assembly and all members in those types."},{"content":"Similarly, if the guarantee is applied to the type, by default it also applies to each member of the type.","pos":[11180,11286]},{"content":"This inherited guarantee can be overridden by applying the ComponentGuaranteesAttribute to individual types and type members.","pos":[11293,11418]},{"content":"However, guarantees that override the default can only weaken the guarantee; they cannot strengthen it.","pos":[11419,11522]},{"content":"For example, if an assembly is marked with the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; guarantee, its types and members have no compatibility guarantee, and any other guarantee that is applied to types or members in the assembly is ignored.","pos":[11523,11783],"source":" For example, if an assembly is marked with the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> guarantee, its types and members have no compatibility guarantee, and any other guarantee that is applied to types or members in the assembly is ignored."},{"content":"Testing the Guarantee    The &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt; property returns a member of the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; enumeration, which is marked with the &lt;xref:System.FlagsAttribute&gt; attribute.","pos":[11792,12067],"source":"      ## Testing the Guarantee    The <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> property returns a member of the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeration, which is marked with the <xref:System.FlagsAttribute> attribute."},{"content":"This means that you should test for the flag that you are interested in by masking away potentially unknown flags.","pos":[12068,12182]},{"content":"For example, the following example tests whether a type is marked as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.","pos":[12183,12312],"source":" For example, the following example tests whether a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1<ept id=\"p4\">](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb)</ept><ept id=\"p3\">]</ept>       The following example tests whether a type is marked as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; or &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.","pos":[12319,12772],"source":"[!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)]  [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb)]       The following example tests whether a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> or <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2<ept id=\"p4\">](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb)</ept><ept id=\"p3\">]</ept>       The following example tests wither a type is marked as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; (that is, neither &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; nor &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;).","pos":[12779,13311],"source":"[!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)]  [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb)]       The following example tests wither a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> (that is, neither <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> nor <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>)."},{"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3<ept id=\"p4\">](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)</ept><ept id=\"p3\">]</ept>","pos":[13318,13585],"source":"[!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)]  [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)]"}]},{"pos":[15658,15890],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Versioning.ComponentGuaranteesAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a value that indicates a library, type, or member's guaranteed level of compatibility across multiple versions.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Versioning.ComponentGuaranteesAttribute\"></xref> class with a value that indicates a library, type, or member's guaranteed level of compatibility across multiple versions."},{"pos":[15902,16140],"content":"When the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt; class is instantiated, the value of the <ph id=\"ph1\">`guarantees`</ph> parameter is assigned to the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt; property.","needQuote":true,"needEscape":true,"extradata":"MT","source":"When the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> class is instantiated, the value of the `guarantees` parameter is assigned to the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> property."},{"pos":[16388,16504],"content":"One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.","pos":[0,116]}]},{"pos":[17041,17171],"content":"Gets a value that indicates the guaranteed level of compatibility of a library, type, or type member that spans multiple versions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates the guaranteed level of compatibility of a library, type, or type member that spans multiple versions.","pos":[0,130]}]},{"pos":[17183,17354],"content":"The value of the Guarantees property corresponds to the <ph id=\"ph1\">`guarantees`</ph> parameter of the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A&gt; constructor.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The value of the Guarantees property corresponds to the `guarantees` parameter of the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> constructor."},{"pos":[17554,17670],"content":"One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.","pos":[0,116]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute\n  id: ComponentGuaranteesAttribute\n  children:\n  - System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)\n  - System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees\n  langs:\n  - csharp\n  name: ComponentGuaranteesAttribute\n  nameWithType: ComponentGuaranteesAttribute\n  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute\n  type: Class\n  summary: Defines the compatibility guarantee of a component, type, or type member that may span multiple versions.\n  remarks: \"The ComponentGuaranteesAttribute is used by developers of components and class libraries to indicate the level of compatibility that consumers of their libraries can expect across multiple versions. It indicates the level of guarantee that a future version of the library or component will not break an existing client. Clients can then use the ComponentGuaranteesAttribute as an aid in designing their own interfaces to ensure stability across versions.  \\n  \\n> [!NOTE]\\n>  The common language runtime (CLR) does not use this attribute in any way. Its value lies in formally documenting the intent of the component author. Compile-time tools can also use these declarations to detect compile-time errors that would otherwise break the declared guarantee.  \\n  \\n## Levels of Compatibility  \\n The ComponentGuaranteesAttribute supports the following levels of compatibility, which are represented by members of the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeration:  \\n  \\n-   No version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>). The client can expect that future versions will break the existing client. For more information, see the [No Compatibility](#None) section later in this topic.  \\n  \\n-   Side-by-side version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>). The component has been tested to work when more than one version of the assembly is loaded in the same application domain. In general, future versions can break compatibility. However, when breaking changes are made, the old version is not modified but exists alongside the new version. Side-by-side execution is the expected way to make existing clients work when breaking changes are made. For more information, see the [Side-by-Side Compatibility](#SideBySide) section later in this topic.  \\n  \\n-   Stable version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>). Future versions should not break the client, and side-by-side execution should not be needed. However, if the client is inadvertently broken, it may be possible to use side-by-side execution to fix the problem. For more information, see the [Stable Compatibility](#Standard) section.  \\n  \\n-   Exchange version-to-version compatibility (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>). Extraordinary care is taken to ensure that future versions will not break the client. The client should use only these types in the signature of interfaces that are used for communication with other assemblies that are deployed independently of one another. Only one version of these types is expected to be in a given application domain, which means that if a client breaks, side-by-side execution cannot fix the compatibility problem. For more information, see the [Exchange Type Compatibility](#Exchange) section.  \\n  \\n The following sections discuss each level of guarantee in greater detail.  \\n  \\n<a name=\\\"None\\\"></a>   \\n### No Compatibility  \\n Marking a component as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the provider makes no guarantees about compatibility. Clients should avoid taking any dependencies on the exposed interfaces. This level of compatibility is useful for types that are experimental or that are publicly exposed but are intended only for components that are always updated at the same time. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> explicitly indicates that this component should not be used by external components.  \\n  \\n<a name=\\\"SideBySide\\\"></a>   \\n### Side-by-Side Compatibility  \\n Marking a component as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the component has been tested to work when more than one version of the assembly is loaded into the same application domain. Breaking changes are allowed as long as they are made to the assembly that has the greater version number. Components that are bound to an old version of the assembly are expected to continue to bind to the old version, and other components can bind to the new version. It is also possible to update a component that is declared to be <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> by destructively modifying the old version.  \\n  \\n<a name=\\\"Standard\\\"></a>   \\n### Stable Compatibility  \\n Marking a type as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> indicates that the type should remain stable across versions. However, it may also be possible for side-by-side versions of a stable type to exist in the same application domain.  \\n  \\n Stable types maintain a high binary compatibility bar. Because of this, providers should avoid making breaking changes to stable types. The following kinds of changes are acceptable:  \\n  \\n-   Adding private instance fields to, or removing fields from, a type, as long as this does not break the serialization format.  \\n  \\n-   Changing a non-serializable type to a serializable type. (However, a serializable type cannot be changed to a non-serializable type.)  \\n  \\n-   Throwing new, more derived exceptions from a method.  \\n  \\n-   Improving the performance of a method.  \\n  \\n-   Changing the range of return values, as long as the change does not adversely affect the majority of clients.  \\n  \\n-   Fixing serious bugs, if the business justification is high and the number of adversely affected clients is low.  \\n  \\n Because new versions of stable components are not expected to break existing clients, generally only one version of a stable component is needed in an application domain. However, this is not a requirement, because stable types are not used as well-known exchange types that all components agree upon. Therefore, if a new version of a stable component does inadvertently break some component, and if other components need the new version, it may be possible to fix the problem by loading both the old and new component.  \\n  \\n <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> provides a stronger version compatibility guarantee than <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>. It is a common default for multi-version components.  \\n  \\n <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> can be combined with <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, which states that the component will not break compatibility but is tested to work when more than one version is loaded in a given application domain.  \\n  \\n After a type or method is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, it can be upgraded to <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>. However, it cannot be downgraded to <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.  \\n  \\n<a name=\\\"Exchange\\\"></a>   \\n### Exchange Type Compatibility  \\n Marking a type as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> provides a stronger version compatibility guarantee than <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, and should be applied to the most stable of all types. These types are intended to be used for interchange between independently built components across all component boundaries in both time (any version of the CLR or any version of a component or application) and space (cross-process, cross-CLR in one process, cross-application domain in one CLR). If a breaking change is made to an exchange type, it is impossible to fix the issue by loading multiple versions of the type.  \\n  \\n Exchange types should be changed only when a problem is very serious (such as a severe security issue) or the probability of breakage is very low (that is, if the behavior was already broken in a random way that code could not have conceivably taken a dependency on). You can make the following kinds of changes to an exchange type:  \\n  \\n-   Add inheritance of new interface definitions.  \\n  \\n-   Add new private methods that implement the methods of newly inherited interface definitions.  \\n  \\n-   Add new static fields.  \\n  \\n-   Add new static methods.  \\n  \\n-   Add new non-virtual instance methods.  \\n  \\n The following are considered breaking changes and are not allowed for primitive types:  \\n  \\n-   Changing serialization formats. Version-tolerant serialization is required.  \\n  \\n-   Adding or removing private instance fields. This risks changing the serialization format of the type and breaking client code that uses reflection.  \\n  \\n-   Changing the serializability of a type. A non-serializable type may not be made serializable, and vice versa.  \\n  \\n-   Throwing different exceptions from a method.  \\n  \\n-   Changing the range of a method's return values, unless the member definition raises this possibility and clearly indicates how clients should handle unknown values.  \\n  \\n-   Fixing most bugs. Consumers of the type will rely on the existing behavior.  \\n  \\n After a component, type, or member is marked with the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> guarantee, it cannot be changed to either <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> or <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.  \\n  \\n Typically, exchange types are the basic types (such as <xref:System.Int32> and <xref:System.String> in the .NET Framework) and interfaces (such as <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, and <xref:System.IComparable%601>) that are commonly used in public interfaces.  \\n  \\n Exchange types may publicly expose only other types that are also marked with <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> compatibility. In addition, exchange types cannot depend on the behavior of Windows APIs that are prone to change.  \\n  \\n## Component Guarantees: A Summary  \\n The following table indicates how a component's characteristics and usage affect its compatibility guarantee.  \\n  \\n|Component characteristics|Exchange|Stable|Side-by-Side|None|  \\n|-------------------------------|--------------|------------|--------------------|----------|  \\n|Can be used in interfaces between components that version independently.|Y|N|N|N|  \\n|Can be used (privately) by an assembly that versions independently.|Y|Y|Y|N|  \\n|Can have multiple versions in a single application domain.|N|Y|Y|Y|  \\n|Can make breaking changes|N|N|Y|Y|  \\n|Tested to make certain multiple versions of the assembly can be loaded together.|N|N|Y|N|  \\n|Can make breaking changes in place.|N|N|N|Y|  \\n|Can make very safe non-breaking servicing changes in place.|Y|Y|Y|Y|  \\n  \\n## Applying the Attribute  \\n You can apply the ComponentGuaranteesAttribute to an assembly, a type, or a type member. Its application is hierarchical. That is, by default, the guarantee defined by the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> property of the attribute at the assembly level defines the guarantee of all types in the assembly and all members in those types. Similarly, if the guarantee is applied to the type, by default it also applies to each member of the type.  \\n  \\n This inherited guarantee can be overridden by applying the ComponentGuaranteesAttribute to individual types and type members. However, guarantees that override the default can only weaken the guarantee; they cannot strengthen it. For example, if an assembly is marked with the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> guarantee, its types and members have no compatibility guarantee, and any other guarantee that is applied to types or members in the assembly is ignored.  \\n  \\n## Testing the Guarantee  \\n The <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> property returns a member of the <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> enumeration, which is marked with the <xref:System.FlagsAttribute> attribute. This means that you should test for the flag that you are interested in by masking away potentially unknown flags. For example, the following example tests whether a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.  \\n  \\n [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)]\\n [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb)]  \\n  \\n The following example tests whether a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> or <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.  \\n  \\n [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)]\\n [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb)]  \\n  \\n The following example tests wither a type is marked as <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> (that is, neither <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> nor <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>).  \\n  \\n [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)]\\n [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)]\n\n      public sealed class ComponentGuaranteesAttribute : Attribute\n  inheritance:\n  - System.Attribute\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)\n  id: '#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)'\n  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute\n  langs:\n  - csharp\n  name: ComponentGuaranteesAttribute(ComponentGuaranteesOptions)\n  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)\n  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Versioning\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Versioning.ComponentGuaranteesAttribute\"></xref> class with a value that indicates a library, type, or member's guaranteed level of compatibility across multiple versions.\n  remarks: When the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> class is instantiated, the value of the `guarantees` parameter is assigned to the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> property.\n  syntax:\n    content: public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);\n    parameters:\n    - id: guarantees\n      type: System.Runtime.Versioning.ComponentGuaranteesOptions\n      description: One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.\n  overload: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees\n  id: Guarantees\n  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute\n  langs:\n  - csharp\n  name: Guarantees\n  nameWithType: ComponentGuaranteesAttribute.Guarantees\n  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Versioning\n  summary: Gets a value that indicates the guaranteed level of compatibility of a library, type, or type member that spans multiple versions.\n  remarks: The value of the Guarantees property corresponds to the `guarantees` parameter of the <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> constructor.\n  syntax:\n    content: public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }\n    return:\n      type: System.Runtime.Versioning.ComponentGuaranteesOptions\n      description: One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.\n  overload: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Attribute\n  isExternal: false\n  name: System.Attribute\n- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)\n  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute\n  isExternal: false\n  name: ComponentGuaranteesAttribute(ComponentGuaranteesOptions)\n  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)\n  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)\n- uid: System.Runtime.Versioning.ComponentGuaranteesOptions\n  parent: System.Runtime.Versioning\n  isExternal: false\n  name: ComponentGuaranteesOptions\n  nameWithType: ComponentGuaranteesOptions\n  fullName: System.Runtime.Versioning.ComponentGuaranteesOptions\n- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees\n  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute\n  isExternal: false\n  name: Guarantees\n  nameWithType: ComponentGuaranteesAttribute.Guarantees\n  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees\n- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor*\n  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute\n  isExternal: false\n  name: ComponentGuaranteesAttribute\n  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute\n- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees*\n  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute\n  isExternal: false\n  name: Guarantees\n  nameWithType: ComponentGuaranteesAttribute.Guarantees\n"}