{"nodes":[{"pos":[418,616],"content":"The SearchResult class encapsulates a node in the Active Directory Domain Services hierarchy that is returned during a search through <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectorySearcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The SearchResult class encapsulates a node in the Active Directory Domain Services hierarchy that is returned during a search through <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref>."},{"pos":[628,1400],"content":"Instances of the SearchResult class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class. The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for SearchResult is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class. Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from SearchResult.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Instances of the SearchResult class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class. The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for SearchResult is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class. Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from SearchResult.","pos":[0,772],"nodes":[{"content":"Instances of the SearchResult class are very similar to instances of &lt;xref:System.DirectoryServices.DirectoryEntry&gt; class.","pos":[0,122],"source":"Instances of the SearchResult class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class."},{"content":"The crucial difference is that the &lt;xref:System.DirectoryServices.DirectoryEntry&gt; class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for SearchResult is already available in the &lt;xref:System.DirectoryServices.SearchResultCollection&gt;, where it gets returned from a query that is performed with the &lt;xref:System.DirectoryServices.DirectorySearcher&gt; class.","pos":[123,562],"source":" The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for SearchResult is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class."},{"content":"Only those properties that are specified through the &lt;xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName&gt; collection in your query will be available from SearchResult.","pos":[563,772],"source":" Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from SearchResult."}]}]},{"pos":[10444,10654],"content":"Retrieves the <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to the <bpt id=\"p2\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> from the Active Directory Domain Services hierarchy.","needQuote":true,"needEscape":true,"source":"Retrieves the <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> from the Active Directory Domain Services hierarchy."},{"pos":[10667,11075],"content":"Use GetDirectoryEntry when you want to look at the live entry instead of the entry that was returned through <xref:System.DirectoryServices.DirectorySearcher>, or when you want to invoke a method on the object that was returned.      > [!NOTE] >  Calling GetDirectoryEntry on each <xref:System.DirectoryServices.SearchResult> returned through <xref:System.DirectoryServices.DirectorySearcher> can be slow.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use GetDirectoryEntry when you want to look at the live entry instead of the entry that was returned through &lt;xref:System.DirectoryServices.DirectorySearcher&gt;, or when you want to invoke a method on the object that was returned.","pos":[0,228],"source":"Use GetDirectoryEntry when you want to look at the live entry instead of the entry that was returned through <xref:System.DirectoryServices.DirectorySearcher>, or when you want to invoke a method on the object that was returned."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Calling GetDirectoryEntry on each &lt;xref:System.DirectoryServices.SearchResult&gt; returned through &lt;xref:System.DirectoryServices.DirectorySearcher&gt; can be slow.","pos":[234,405],"source":"      > [!NOTE] >  Calling GetDirectoryEntry on each <xref:System.DirectoryServices.SearchResult> returned through <xref:System.DirectoryServices.DirectorySearcher> can be slow."}]},{"pos":[13045,13193],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to the <bpt id=\"p2\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref>."},{"pos":[13643,13725],"content":"Gets the path for this <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the path for this <xref href=\"System.DirectoryServices.SearchResult\"></xref>."},{"pos":[13737,13887],"content":"The Path property uniquely identifies this entry in the Active Directory Domain Services hierarchy. The entry can always be retrieved using this path.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Path property uniquely identifies this entry in the Active Directory Domain Services hierarchy. The entry can always be retrieved using this path.","pos":[0,150],"nodes":[{"content":"The Path property uniquely identifies this entry in the Active Directory Domain Services hierarchy.","pos":[0,99]},{"content":"The entry can always be retrieved using this path.","pos":[100,150]}]}]},{"pos":[15239,15315],"content":"The path of this <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.SearchResult\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The path of this <xref href=\"System.DirectoryServices.SearchResult\"></xref>."},{"pos":[15782,15901],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.ResultPropertyCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection of properties for this object.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> collection of properties for this object."},{"pos":[15913,16088],"content":"This collection only contains properties that were explicitly requested through <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This collection only contains properties that were explicitly requested through &lt;xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName&gt;.","pos":[0,175],"source":"This collection only contains properties that were explicitly requested through <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>."}]},{"pos":[18726,18832],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.DirectoryServices.ResultPropertyCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of properties set on this object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> of properties set on this object."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.SearchResult\n  id: SearchResult\n  children:\n  - System.DirectoryServices.SearchResult.GetDirectoryEntry\n  - System.DirectoryServices.SearchResult.Path\n  - System.DirectoryServices.SearchResult.Properties\n  langs:\n  - csharp\n  name: SearchResult\n  nameWithType: SearchResult\n  fullName: System.DirectoryServices.SearchResult\n  type: Class\n  summary: The SearchResult class encapsulates a node in the Active Directory Domain Services hierarchy that is returned during a search through <xref href=\"System.DirectoryServices.DirectorySearcher\"></xref>.\n  remarks: Instances of the SearchResult class are very similar to instances of <xref:System.DirectoryServices.DirectoryEntry> class. The crucial difference is that the <xref:System.DirectoryServices.DirectoryEntry> class retrieves its information from the Active Directory Domain Services hierarchy each time a new object is accessed, whereas the data for SearchResult is already available in the <xref:System.DirectoryServices.SearchResultCollection>, where it gets returned from a query that is performed with the <xref:System.DirectoryServices.DirectorySearcher> class. Only those properties that are specified through the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName> collection in your query will be available from SearchResult.\n  example:\n  - \"The following example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the  <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry identified in the search results.  \\n  \\n```vb  \\nImports System  \\nImports System.DirectoryServices  \\nImports Microsoft.VisualBasic  \\n  \\nPublic Class MySample  \\n   Public Shared Sub Main()  \\n      Dim myLDAPPath As String = \\\"\\\"  \\n      Try  \\n         ' Create a 'DirectoryEntry' object to search.  \\n         Console.WriteLine(\\\"Enter the path ( Ex : 'LDAP://MyServer')\\\")  \\n         myLDAPPath = Console.ReadLine()  \\n         Dim mySearchRoot As New DirectoryEntry(myLDAPPath)  \\n  \\n         Dim myDirectorySearcher As New DirectorySearcher(mySearchRoot)  \\n  \\n         ' Get the first entry of the search.  \\n         Dim mySearchResult As SearchResult = myDirectorySearcher.FindOne()  \\n         If Not (mySearchResult Is Nothing) Then  \\n            ' Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\n            Dim myDirectoryEntry As DirectoryEntry = mySearchResult.GetDirectoryEntry()  \\n            Console.WriteLine(ControlChars.Newline + \\\"The name of the 'myDirectoryEntry' \\\" + _  \\n                        \\\"directory entry that corresponds to the \\\" + _  \\n                        \\\"'mySearchResult' search result is : {0}\\\" + _  \\n                        ControlChars.Newline, myDirectoryEntry.Name)  \\n            Dim mySearchResultPath As String = mySearchResult.Path  \\n            Console.WriteLine(\\\"The path for the 'mySearchResult' search result is : {0}\\\" + _  \\n                              ControlChars.Newline, mySearchResultPath)  \\n            ' Get the properties of the 'mySearchResult'.  \\n            Dim myResultPropColl As ResultPropertyCollection  \\n            myResultPropColl = mySearchResult.Properties  \\n            Console.WriteLine(\\\"The properties of the 'mySearchResult' are :\\\")  \\n            Dim myKey As String  \\n            For Each myKey In  myResultPropColl.PropertyNames  \\n               Dim tab1 As String = \\\"    \\\"  \\n               Console.WriteLine(myKey + \\\" = \\\")  \\n               Dim myCollection As Object  \\n               For Each myCollection In  myResultPropColl(myKey)  \\n                  Console.WriteLine(tab1 + myCollection)  \\n               Next myCollection  \\n            Next myKey  \\n            myDirectoryEntry.Dispose()  \\n            mySearchRoot.Dispose()  \\n         Else  \\n            Console.WriteLine(\\\"The '\\\" + myLDAPPath + \\\"' path not found.\\\")  \\n         End If  \\n      Catch e As Exception  \\n         Console.WriteLine(\\\"The '\\\" + myLDAPPath + \\\"' path not found.\\\")  \\n         Console.WriteLine(\\\"Exception : \\\" & e.Message)  \\n      End Try  \\n   End Sub 'Main  \\nEnd Class 'MySample  \\n```  \\n  \\n```c#  \\nusing System;  \\nusing System.DirectoryServices;  \\n  \\npublic class MySample  \\n{  \\n    public static void Main()  \\n    {  \\n        string myLDAPPath = \\\"\\\";  \\n        try  \\n        {  \\n            // Create a 'DirectoryEntry' object to search.  \\n            Console.WriteLine(\\\"Enter the path ( Ex : 'LDAP://MyServer')\\\");  \\n            myLDAPPath = Console.ReadLine();  \\n  \\n            DirectoryEntry mySearchRoot = new DirectoryEntry(myLDAPPath);  \\n            DirectorySearcher myDirectorySearcher =   \\n                    new DirectorySearcher(mySearchRoot);  \\n  \\n            // Get the first entry of the search.  \\n            SearchResult mySearchResult = myDirectorySearcher.FindOne();  \\n  \\n            if ( mySearchResult != null )  \\n            {  \\n                // Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\n                DirectoryEntry myDirectoryEntry =   \\n                mySearchResult.GetDirectoryEntry();  \\n                Console.WriteLine(\\\"\\\\nThe name of the 'myDirectoryEntry' \\\" +  \\n                        \\\"directory entry that corresponds to the \\\" +  \\n                        \\\"'mySearchResult' search result is : {0}\\\\n\\\",  \\n                        myDirectoryEntry.Name);  \\n                string mySearchResultPath = mySearchResult.Path;  \\n                Console.WriteLine(\\\"The path for the 'mySearchResult' search \\\"  \\n                        + \\\"result is : {0}\\\\n\\\", mySearchResultPath);  \\n  \\n                // Get the properties of the 'mySearchResult'.  \\n                ResultPropertyCollection myResultPropColl;  \\n                myResultPropColl = mySearchResult.Properties;  \\n                Console.WriteLine(\\\"The properties of the \\\" +   \\n                        \\\"'mySearchResult' are :\\\");  \\n  \\n                foreach( string myKey in myResultPropColl.PropertyNames)  \\n                {  \\n                    string tab = \\\"    \\\";  \\n                    Console.WriteLine(myKey + \\\" = \\\");  \\n                    foreach( Object myCollection in myResultPropColl[myKey])  \\n                    {  \\n                        Console.WriteLine(tab + myCollection);  \\n                    }  \\n                }  \\n                mySearchRoot.Dispose();  \\n                myDirectoryEntry.Dispose();  \\n            }  \\n            else  \\n            {  \\n                Console.WriteLine(\\\"The '\\\" + myLDAPPath + \\\"' path not found.\\\");  \\n            }  \\n        }  \\n        catch(Exception e)  \\n        {  \\n            Console.WriteLine(\\\"The '\\\" + myLDAPPath + \\\"' path not found.\\\");  \\n            Console.WriteLine(\\\"Exception : \\\" + e.Message);  \\n        }  \\n    }  \\n  \\n}  \\n```  \\n  \\n```cpp#  \\n#using <mscorlib.dll>  \\n#using <System.dll>  \\n#using <System.Directoryservices.dll>  \\n  \\nusing namespace System;  \\nusing namespace System::Collections;  \\nusing namespace System::DirectoryServices;  \\nusing namespace stdcli::language;  \\n  \\nint main()   \\n{  \\n    String^ myLDAPPath = \\\"\\\";  \\n    try   \\n    {  \\n        // Create a 'DirectoryEntry' object to search.  \\n        Console::WriteLine(\\\"Enter the path ( Ex : 'LDAP://MyServer')\\\");  \\n        myLDAPPath = Console::ReadLine();  \\n        DirectoryEntry^ mySearchRoot = gcnew DirectoryEntry(myLDAPPath);  \\n  \\n        DirectorySearcher^ myDirectorySearcher = gcnew DirectorySearcher(mySearchRoot);  \\n  \\n        // Get the first entry of the search.  \\n        SearchResult^ mySearchResult = myDirectorySearcher->FindOne();  \\n        if (mySearchResult)   \\n        {  \\n            // Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\n            DirectoryEntry^ myDirectoryEntry = mySearchResult->GetDirectoryEntry();  \\n            Console::WriteLine(  \\n                String::Concat(\\\"\\\\nThe name of the 'myDirectoryEntry' \\\",  \\n                \\\"directory entry that corresponds to the \\\",  \\n                \\\"'mySearchResult' search result is : {0}\\\\n\\\"),  \\n                myDirectoryEntry->Name);  \\n  \\n            String^ mySearchResultPath = mySearchResult->Path;  \\n            Console::WriteLine(\\\"The path for the 'mySearchResult' search result is :  \\n                    {0}\\\\n\\\", mySearchResultPath);  \\n  \\n            // Get the properties of the 'mySearchResult'.  \\n            ResultPropertyCollection^ myResultPropColl = mySearchResult->Properties;  \\n            Console::WriteLine(\\\"The properties of the 'mySearchResult' are :\\\");  \\n            IEnumerator^ myEnum = myResultPropColl->PropertyNames->GetEnumerator();  \\n            while (myEnum->MoveNext())   \\n            {  \\n                String^ myKey = safe_cast<String^>(myEnum->Current);  \\n                Console::WriteLine(\\\"{0} = \\\", myKey);  \\n                IEnumerator^ myEnum = myResultPropColl->Item[myKey]->GetEnumerator();  \\n                while (myEnum->MoveNext())   \\n                {  \\n                    Console::WriteLine(\\\"\\\\t{0}\\\", myEnum->Current);  \\n                }  \\n            }  \\n            myDirectoryEntry->Dispose();  \\n            mySearchRoot->Dispose();   \\n        }   \\n        else   \\n        {  \\n            Console::WriteLine(\\\"The '{0}' path not found.\\\", myLDAPPath);  \\n        }  \\n    }   \\n    catch (Exception^ e)   \\n    {  \\n        Console::WriteLine(\\\"The '{0}' path not found.\\\",  myLDAPPath);  \\n        Console::WriteLine(\\\"Exception : {0}\\\", e->Message);  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public class SearchResult\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry\n  id: GetDirectoryEntry\n  parent: System.DirectoryServices.SearchResult\n  langs:\n  - csharp\n  name: GetDirectoryEntry()\n  nameWithType: SearchResult.GetDirectoryEntry()\n  fullName: System.DirectoryServices.SearchResult.GetDirectoryEntry()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Retrieves the <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref> from the Active Directory Domain Services hierarchy.\n  remarks: \"Use GetDirectoryEntry when you want to look at the live entry instead of the entry that was returned through <xref:System.DirectoryServices.DirectorySearcher>, or when you want to invoke a method on the object that was returned.  \\n  \\n> [!NOTE]\\n>  Calling GetDirectoryEntry on each <xref:System.DirectoryServices.SearchResult> returned through <xref:System.DirectoryServices.DirectorySearcher> can be slow.\"\n  example:\n  - \"The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the GetDirectoryEntry method to retrieve the live directory entry that is identified in the search results.  \\n  \\n```vb  \\n' Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\nDim myDirectoryEntry As DirectoryEntry = mySearchResult.GetDirectoryEntry()  \\nConsole.WriteLine(ControlChars.Newline + \\\"The name of the 'myDirectoryEntry' \\\" + _  \\n            \\\"directory entry that corresponds to the \\\" + _  \\n            \\\"'mySearchResult' search result is : {0}\\\" + _  \\n            ControlChars.Newline, myDirectoryEntry.Name)  \\n  \\n```  \\n  \\n```c#  \\n// Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\nDirectoryEntry myDirectoryEntry =   \\n                           mySearchResult.GetDirectoryEntry();  \\nConsole.WriteLine(\\\"\\\\nThe name of the 'myDirectoryEntry' \\\" +  \\n                  \\\"directory entry that corresponds to the \\\" +  \\n                  \\\"'mySearchResult' search result is : {0}\\\\n\\\",  \\n                  myDirectoryEntry.Name);  \\n  \\n```  \\n  \\n```cpp#  \\n// Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \\nDirectoryEntry^ myDirectoryEntry = mySearchResult->GetDirectoryEntry();  \\nConsole::WriteLine(  \\n    String::Concat(\\\"\\\\nThe name of the 'myDirectoryEntry' \\\",  \\n    \\\"directory entry that corresponds to the \\\",  \\n    \\\"'mySearchResult' search result is : {0}\\\\n\\\"),  \\n    myDirectoryEntry->Name);  \\n```\"\n  syntax:\n    content: public System.DirectoryServices.DirectoryEntry GetDirectoryEntry ();\n    parameters: []\n    return:\n      type: System.DirectoryServices.DirectoryEntry\n      description: The <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref> that corresponds to the <xref href=\"System.DirectoryServices.SearchResult\"></xref>.\n  overload: System.DirectoryServices.SearchResult.GetDirectoryEntry*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResult.Path\n  id: Path\n  parent: System.DirectoryServices.SearchResult\n  langs:\n  - csharp\n  name: Path\n  nameWithType: SearchResult.Path\n  fullName: System.DirectoryServices.SearchResult.Path\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the path for this <xref href=\"System.DirectoryServices.SearchResult\"></xref>.\n  remarks: The Path property uniquely identifies this entry in the Active Directory Domain Services hierarchy. The entry can always be retrieved using this path.\n  example:\n  - \"The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry that is identified in the search results.  \\n  \\n This example shows how to parse the Path property from the search result.  \\n  \\n```vb  \\nDim mySearchResultPath As String = mySearchResult.Path  \\nConsole.WriteLine(\\\"The path for the 'mySearchResult' search result is : {0}\\\" + _  \\n                  ControlChars.Newline, mySearchResultPath)  \\n  \\n```  \\n  \\n```c#  \\nstring mySearchResultPath = mySearchResult.Path;  \\nConsole.WriteLine(\\\"The path for the 'mySearchResult' search \\\"  \\n                  + \\\"result is : {0}\\\\n\\\", mySearchResultPath);  \\n```  \\n  \\n```cpp#  \\nString^ mySearchResultPath = mySearchResult->Path;  \\nConsole::WriteLine(\\\"The path for the 'mySearchResult' search result is : {0}\\\\n\\\", mySearchResultPath);  \\n  \\n```\"\n  syntax:\n    content: public string Path { get; }\n    return:\n      type: System.String\n      description: The path of this <xref href=\"System.DirectoryServices.SearchResult\"></xref>.\n  overload: System.DirectoryServices.SearchResult.Path*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.DirectoryServices.SearchResult.Properties\n  id: Properties\n  parent: System.DirectoryServices.SearchResult\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: SearchResult.Properties\n  fullName: System.DirectoryServices.SearchResult.Properties\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> collection of properties for this object.\n  remarks: This collection only contains properties that were explicitly requested through <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>.\n  example:\n  - \"The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry that is identified in the search results.  \\n  \\n In this example, the search result is put into a <xref:System.DirectoryServices.ResultPropertyCollection>. Then, each property is displayed to the console window.  \\n  \\n```vb  \\n' Get the properties for 'mySearchResult'.  \\nDim myResultPropColl As ResultPropertyCollection  \\nmyResultPropColl = mySearchResult.Properties  \\nConsole.WriteLine(\\\"The properties of the 'mySearchResult' are :\\\")  \\nDim myKey As String  \\nFor Each myKey In  myResultPropColl.PropertyNames  \\n   Dim tab1 As String = \\\"    \\\"  \\n   Console.WriteLine(myKey + \\\" = \\\")  \\n   Dim myCollection As Object  \\n   For Each myCollection In  myResultPropColl(myKey)  \\n      Console.WriteLine(tab1 + myCollection)  \\n   Next myCollection  \\nNext myKey  \\n  \\n```  \\n  \\n```c#  \\n// Get the properties for 'mySearchResult'.  \\nResultPropertyCollection myResultPropColl;  \\nmyResultPropColl = mySearchResult.Properties;  \\nConsole.WriteLine(\\\"The properties of the \\\" +   \\n                  \\\"'mySearchResult' are :\\\");  \\nforeach( string myKey in myResultPropColl.PropertyNames)  \\n{  \\n   string tab = \\\"    \\\";  \\n   Console.WriteLine(myKey + \\\" = \\\");  \\n   foreach( Object myCollection in myResultPropColl[myKey])  \\n   {  \\n      Console.WriteLine(tab + myCollection);  \\n   }  \\n}  \\n  \\n```  \\n  \\n```cpp#  \\n// Get the properties for 'mySearchResult'.  \\nResultPropertyCollection^ myResultPropColl = mySearchResult->Properties;  \\nConsole::WriteLine(\\\"The properties of the 'mySearchResult' are :\\\");  \\nIEnumerator^ myEnum = myResultPropColl->PropertyNames->GetEnumerator();  \\nwhile (myEnum->MoveNext())   \\n{  \\n    String^ myKey = safe_cast<String^>(myEnum->Current);  \\n    Console::WriteLine(\\\"{0} = \\\", myKey);  \\n    IEnumerator^ myEnum = myResultPropColl->Item[myKey]->GetEnumerator();  \\n    while (myEnum->MoveNext())   \\n    {  \\n        Console::WriteLine(\\\"\\\\t{0}\\\", myEnum->Current);  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.DirectoryServices.ResultPropertyCollection Properties { get; }\n    return:\n      type: System.DirectoryServices.ResultPropertyCollection\n      description: A <xref href=\"System.DirectoryServices.ResultPropertyCollection\"></xref> of properties set on this object.\n  overload: System.DirectoryServices.SearchResult.Properties*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: GetDirectoryEntry()\n  nameWithType: SearchResult.GetDirectoryEntry()\n  fullName: System.DirectoryServices.SearchResult.GetDirectoryEntry()\n- uid: System.DirectoryServices.DirectoryEntry\n  parent: System.DirectoryServices\n  isExternal: false\n  name: DirectoryEntry\n  nameWithType: DirectoryEntry\n  fullName: System.DirectoryServices.DirectoryEntry\n- uid: System.DirectoryServices.SearchResult.Path\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: Path\n  nameWithType: SearchResult.Path\n  fullName: System.DirectoryServices.SearchResult.Path\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.DirectoryServices.SearchResult.Properties\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: Properties\n  nameWithType: SearchResult.Properties\n  fullName: System.DirectoryServices.SearchResult.Properties\n- uid: System.DirectoryServices.ResultPropertyCollection\n  parent: System.DirectoryServices\n  isExternal: false\n  name: ResultPropertyCollection\n  nameWithType: ResultPropertyCollection\n  fullName: System.DirectoryServices.ResultPropertyCollection\n- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry*\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: GetDirectoryEntry\n  nameWithType: SearchResult.GetDirectoryEntry\n- uid: System.DirectoryServices.SearchResult.Path*\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: Path\n  nameWithType: SearchResult.Path\n- uid: System.DirectoryServices.SearchResult.Properties*\n  parent: System.DirectoryServices.SearchResult\n  isExternal: false\n  name: Properties\n  nameWithType: SearchResult.Properties\n"}