{"nodes":[{"pos":[452,526],"content":"Defines identifiers for a set of technologies that designer hosts support.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines identifiers for a set of technologies that designer hosts support.","pos":[0,74]}]},{"pos":[539,2495],"content":"The view adapter model replaces and adds functionality to the ViewTechnology feature; however, the ViewTechnology feature is retained for both backward compatibility and future use, if you choose. For more information, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.       ViewTechnology defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.       You should only use the Default value in your designer hosting environment. In previous versions of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)], the ViewTechnology enumeration specified the type of UI model supported by a root designer. Because this model is not extensible, you should instead use a *view adapter* model. A view adapter is a type that adapts an object of one type to another.       For example, an HTML designer might return a `DemoDOM` tree as its view. The HTML designer returns a view technology of Default. A Windows Forms hosting environment would have one or more view adapter classes available. If one such class could convert the `DemoDOM` into a Windows Forms control, the hosting application can support this type of designer. If no adapter can handle the data type returned from the designer’s <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> method, the load of the designer will fail, and the user will be presented with an error.       [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] has an extensible scheme for providing view adapters, so it can adapt to any UI technology. Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.       For an example that uses view adapters, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The view adapter model replaces and adds functionality to the ViewTechnology feature; however, the ViewTechnology feature is retained for both backward compatibility and future use, if you choose.","pos":[0,196]},{"content":"For more information, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","pos":[197,354]},{"content":"ViewTechnology defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.","pos":[361,488]},{"content":"You should only use the Default value in your designer hosting environment.","pos":[495,570]},{"content":"In previous versions of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph>, the ViewTechnology enumeration specified the type of UI model supported by a root designer.","pos":[571,749],"source":" In previous versions of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)], the ViewTechnology enumeration specified the type of UI model supported by a root designer."},{"content":"Because this model is not extensible, you should instead use a <bpt id=\"p1\">*</bpt>view adapter<ept id=\"p1\">*</ept> model.","pos":[750,834],"source":" Because this model is not extensible, you should instead use a *view adapter* model."},{"content":"A view adapter is a type that adapts an object of one type to another.","pos":[835,905]},{"content":"For example, an HTML designer might return a <ph id=\"ph1\">`DemoDOM`</ph> tree as its view.","pos":[912,984],"source":"       For example, an HTML designer might return a `DemoDOM` tree as its view."},{"content":"The HTML designer returns a view technology of Default.","pos":[985,1040]},{"content":"A Windows Forms hosting environment would have one or more view adapter classes available.","pos":[1041,1131]},{"content":"If one such class could convert the <ph id=\"ph1\">`DemoDOM`</ph> into a Windows Forms control, the hosting application can support this type of designer.","pos":[1132,1266],"source":" If one such class could convert the `DemoDOM` into a Windows Forms control, the hosting application can support this type of designer."},{"content":"If no adapter can handle the data type returned from the designer’s &lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt; method, the load of the designer will fail, and the user will be presented with an error.","pos":[1267,1485],"source":" If no adapter can handle the data type returned from the designer’s <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> method, the load of the designer will fail, and the user will be presented with an error."},{"content":"<ph id=\"ph1\">[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]</ph> has an extensible scheme for providing view adapters, so it can adapt to any UI technology.","pos":[1492,1631],"source":"[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] has an extensible scheme for providing view adapters, so it can adapt to any UI technology."},{"content":"Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.","pos":[1632,1760]},{"content":"For an example that uses view adapters, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","pos":[1767,1942]}]},{"pos":[3558,3604],"content":"Specifies the default view technology support.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the default view technology support.","pos":[0,46]}]},{"pos":[3616,4009],"content":"The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a <xref:System.Windows.Forms.Control?displayProperty=fullName> instance.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host.","pos":[0,130]},{"content":"Hosting environments such as <ph id=\"ph1\">[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]</ph> provide a way to plug in new view technology adapters.","pos":[131,262],"source":" Hosting environments such as [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] provide a way to plug in new view technology adapters."},{"content":"The default view object for the Windows Forms designer is a &lt;xref:System.Windows.Forms.Control?displayProperty=fullName&gt; instance.","pos":[263,393],"source":" The default view object for the Windows Forms designer is a <xref:System.Windows.Forms.Control?displayProperty=fullName> instance."}]},{"pos":[4661,4673],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5092,5185],"content":"Represents a mode in which the view object is passed directly to the development environment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a mode in which the view object is passed directly to the development environment.","pos":[0,93]}]},{"pos":[5197,5851],"content":"The view object must implement any interfaces the development environment requires. The [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] VSI ([!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] Integration) program. The [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The view object must implement any interfaces the development environment requires.","pos":[0,83]},{"content":"The <ph id=\"ph1\">[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]</ph> development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through <ph id=\"ph2\">[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]</ph> VSI (<ph id=\"ph3\">[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]</ph> Integration) program.","pos":[84,440],"source":" The [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] VSI ([!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] Integration) program."},{"content":"The <ph id=\"ph1\">[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]</ph> development environment provides support for this view technology.","pos":[441,559],"source":" The [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] development environment provides support for this view technology."},{"content":"Support for this view technology is not necessarily available in all development environments.","pos":[560,654]}]},{"pos":[5974,5986],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6410,6511],"content":"Represents a mode in which a Windows Forms control object provides the display for the root designer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a mode in which a Windows Forms control object provides the display for the root designer.","pos":[0,101]}]},{"pos":[6523,6622],"content":"The designer host fills the development environment document window with the Windows Forms control.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The designer host fills the development environment document window with the Windows Forms control.","pos":[0,99]}]},{"pos":[7335,7347],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.ViewTechnology\n  id: ViewTechnology\n  children:\n  - System.ComponentModel.Design.ViewTechnology.Default\n  - System.ComponentModel.Design.ViewTechnology.Passthrough\n  - System.ComponentModel.Design.ViewTechnology.WindowsForms\n  langs:\n  - csharp\n  name: ViewTechnology\n  nameWithType: ViewTechnology\n  fullName: System.ComponentModel.Design.ViewTechnology\n  type: Enum\n  summary: Defines identifiers for a set of technologies that designer hosts support.\n  remarks: \"The view adapter model replaces and adds functionality to the ViewTechnology feature; however, the ViewTechnology feature is retained for both backward compatibility and future use, if you choose. For more information, see \\\".NET Shape Library: A Sample Designer\\\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.  \\n  \\n ViewTechnology defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.  \\n  \\n You should only use the Default value in your designer hosting environment. In previous versions of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)], the ViewTechnology enumeration specified the type of UI model supported by a root designer. Because this model is not extensible, you should instead use a *view adapter* model. A view adapter is a type that adapts an object of one type to another.  \\n  \\n For example, an HTML designer might return a `DemoDOM` tree as its view. The HTML designer returns a view technology of Default. A Windows Forms hosting environment would have one or more view adapter classes available. If one such class could convert the `DemoDOM` into a Windows Forms control, the hosting application can support this type of designer. If no adapter can handle the data type returned from the designer’s <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> method, the load of the designer will fail, and the user will be presented with an error.  \\n  \\n [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] has an extensible scheme for providing view adapters, so it can adapt to any UI technology. Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.  \\n  \\n For an example that uses view adapters, see \\\".NET Shape Library: A Sample Designer\\\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.\"\n  example:\n  - \"The following code example demonstrates how to use the ViewTechnology class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.IRootDesigner> interface.  \\n  \\n [!code-cs[IRootDesigner Sample#1](~/add/codesnippet/csharp/t-system.componentmodel._118_1.cs)]\\n [!code-vb[IRootDesigner Sample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._118_1.vb)]\\n [!code-cpp[IRootDesigner Sample#1](~/add/codesnippet/cpp/t-system.componentmodel._118_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum ViewTechnology\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.ViewTechnology.Default\n  id: Default\n  parent: System.ComponentModel.Design.ViewTechnology\n  langs:\n  - csharp\n  name: Default\n  nameWithType: ViewTechnology.Default\n  fullName: System.ComponentModel.Design.ViewTechnology.Default\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Specifies the default view technology support.\n  remarks: The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a <xref:System.Windows.Forms.Control?displayProperty=fullName> instance.\n  example:\n  - \"The following code example demonstrates how to use the ViewTechnology class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.IRootDesigner> interface.  \\n  \\n [!code-cs[IRootDesigner Sample#1](~/add/codesnippet/csharp/t-system.componentmodel._118_1.cs)]\\n [!code-vb[IRootDesigner Sample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._118_1.vb)]\\n [!code-cpp[IRootDesigner Sample#1](~/add/codesnippet/cpp/t-system.componentmodel._118_1.cpp)]\"\n  syntax:\n    content: Default\n    return:\n      type: System.ComponentModel.Design.ViewTechnology\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.ViewTechnology.Passthrough\n  id: Passthrough\n  parent: System.ComponentModel.Design.ViewTechnology\n  langs:\n  - csharp\n  name: Passthrough\n  nameWithType: ViewTechnology.Passthrough\n  fullName: System.ComponentModel.Design.ViewTechnology.Passthrough\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Represents a mode in which the view object is passed directly to the development environment.\n  remarks: The view object must implement any interfaces the development environment requires. The [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] VSI ([!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] Integration) program. The [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.\n  syntax:\n    content: Passthrough\n    return:\n      type: System.ComponentModel.Design.ViewTechnology\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.ViewTechnology.WindowsForms\n  id: WindowsForms\n  parent: System.ComponentModel.Design.ViewTechnology\n  langs:\n  - csharp\n  name: WindowsForms\n  nameWithType: ViewTechnology.WindowsForms\n  fullName: System.ComponentModel.Design.ViewTechnology.WindowsForms\n  type: Field\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Represents a mode in which a Windows Forms control object provides the display for the root designer.\n  remarks: The designer host fills the development environment document window with the Windows Forms control.\n  example:\n  - \"The following code example demonstrates how to use the ViewTechnology class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.LocalizationExtenderProvider> class.  \\n  \\n [!code-cpp[LocalizationExtenderProviderExample#1](~/add/codesnippet/cpp/t-system.componentmodel._118_2.cpp)]\\n [!code-cs[LocalizationExtenderProviderExample#1](~/add/codesnippet/csharp/t-system.componentmodel._118_2.cs)]\\n [!code-vb[LocalizationExtenderProviderExample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._118_2.vb)]\"\n  syntax:\n    content: WindowsForms\n    return:\n      type: System.ComponentModel.Design.ViewTechnology\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.ComponentModel.Design.ViewTechnology.Default\n  parent: System.ComponentModel.Design.ViewTechnology\n  isExternal: false\n  name: Default\n  nameWithType: ViewTechnology.Default\n  fullName: System.ComponentModel.Design.ViewTechnology.Default\n- uid: System.ComponentModel.Design.ViewTechnology\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ViewTechnology\n  nameWithType: ViewTechnology\n  fullName: System.ComponentModel.Design.ViewTechnology\n- uid: System.ComponentModel.Design.ViewTechnology.Passthrough\n  parent: System.ComponentModel.Design.ViewTechnology\n  isExternal: false\n  name: Passthrough\n  nameWithType: ViewTechnology.Passthrough\n  fullName: System.ComponentModel.Design.ViewTechnology.Passthrough\n- uid: System.ComponentModel.Design.ViewTechnology.WindowsForms\n  parent: System.ComponentModel.Design.ViewTechnology\n  isExternal: false\n  name: WindowsForms\n  nameWithType: ViewTechnology.WindowsForms\n  fullName: System.ComponentModel.Design.ViewTechnology.WindowsForms\n"}